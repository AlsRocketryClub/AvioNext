
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fd58  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c04  08020028  08020028  00021028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020c2c  08020c2c  00021c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08020c34  08020c34  00021c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08020c38  08020c38  00021c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000003c8  24000000  08020c3c  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005a98  240003c8  08021004  000223c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  24005e60  08021004  00022e60  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000223c8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003a978  00000000  00000000  000223f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007112  00000000  00000000  0005cd6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002ee0  00000000  00000000  00063e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002453  00000000  00000000  00066d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000c980  00000000  00000000  000691b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000420d6  00000000  00000000  00075b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00181008  00000000  00000000  000b7c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00238c11  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000e040  00000000  00000000  00238c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005d  00000000  00000000  00246c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240003c8 	.word	0x240003c8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08020010 	.word	0x08020010

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240003cc 	.word	0x240003cc
 800030c:	08020010 	.word	0x08020010

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <strcmp>:
 80003c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80003c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80003c8:	2a01      	cmp	r2, #1
 80003ca:	bf28      	it	cs
 80003cc:	429a      	cmpcs	r2, r3
 80003ce:	d0f7      	beq.n	80003c0 <strcmp>
 80003d0:	1ad0      	subs	r0, r2, r3
 80003d2:	4770      	bx	lr

080003d4 <__aeabi_drsub>:
 80003d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003d8:	e002      	b.n	80003e0 <__adddf3>
 80003da:	bf00      	nop

080003dc <__aeabi_dsub>:
 80003dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003e0 <__adddf3>:
 80003e0:	b530      	push	{r4, r5, lr}
 80003e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ea:	ea94 0f05 	teq	r4, r5
 80003ee:	bf08      	it	eq
 80003f0:	ea90 0f02 	teqeq	r0, r2
 80003f4:	bf1f      	itttt	ne
 80003f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000402:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000406:	f000 80e2 	beq.w	80005ce <__adddf3+0x1ee>
 800040a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800040e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000412:	bfb8      	it	lt
 8000414:	426d      	neglt	r5, r5
 8000416:	dd0c      	ble.n	8000432 <__adddf3+0x52>
 8000418:	442c      	add	r4, r5
 800041a:	ea80 0202 	eor.w	r2, r0, r2
 800041e:	ea81 0303 	eor.w	r3, r1, r3
 8000422:	ea82 0000 	eor.w	r0, r2, r0
 8000426:	ea83 0101 	eor.w	r1, r3, r1
 800042a:	ea80 0202 	eor.w	r2, r0, r2
 800042e:	ea81 0303 	eor.w	r3, r1, r3
 8000432:	2d36      	cmp	r5, #54	@ 0x36
 8000434:	bf88      	it	hi
 8000436:	bd30      	pophi	{r4, r5, pc}
 8000438:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800043c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000440:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000444:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x70>
 800044a:	4240      	negs	r0, r0
 800044c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000450:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000454:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000458:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800045c:	d002      	beq.n	8000464 <__adddf3+0x84>
 800045e:	4252      	negs	r2, r2
 8000460:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000464:	ea94 0f05 	teq	r4, r5
 8000468:	f000 80a7 	beq.w	80005ba <__adddf3+0x1da>
 800046c:	f1a4 0401 	sub.w	r4, r4, #1
 8000470:	f1d5 0e20 	rsbs	lr, r5, #32
 8000474:	db0d      	blt.n	8000492 <__adddf3+0xb2>
 8000476:	fa02 fc0e 	lsl.w	ip, r2, lr
 800047a:	fa22 f205 	lsr.w	r2, r2, r5
 800047e:	1880      	adds	r0, r0, r2
 8000480:	f141 0100 	adc.w	r1, r1, #0
 8000484:	fa03 f20e 	lsl.w	r2, r3, lr
 8000488:	1880      	adds	r0, r0, r2
 800048a:	fa43 f305 	asr.w	r3, r3, r5
 800048e:	4159      	adcs	r1, r3
 8000490:	e00e      	b.n	80004b0 <__adddf3+0xd0>
 8000492:	f1a5 0520 	sub.w	r5, r5, #32
 8000496:	f10e 0e20 	add.w	lr, lr, #32
 800049a:	2a01      	cmp	r2, #1
 800049c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004a0:	bf28      	it	cs
 80004a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004a6:	fa43 f305 	asr.w	r3, r3, r5
 80004aa:	18c0      	adds	r0, r0, r3
 80004ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004b4:	d507      	bpl.n	80004c6 <__adddf3+0xe6>
 80004b6:	f04f 0e00 	mov.w	lr, #0
 80004ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80004be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004ca:	d31b      	bcc.n	8000504 <__adddf3+0x124>
 80004cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004d0:	d30c      	bcc.n	80004ec <__adddf3+0x10c>
 80004d2:	0849      	lsrs	r1, r1, #1
 80004d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004dc:	f104 0401 	add.w	r4, r4, #1
 80004e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004e8:	f080 809a 	bcs.w	8000620 <__adddf3+0x240>
 80004ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004f0:	bf08      	it	eq
 80004f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004f6:	f150 0000 	adcs.w	r0, r0, #0
 80004fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004fe:	ea41 0105 	orr.w	r1, r1, r5
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000508:	4140      	adcs	r0, r0
 800050a:	eb41 0101 	adc.w	r1, r1, r1
 800050e:	3c01      	subs	r4, #1
 8000510:	bf28      	it	cs
 8000512:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000516:	d2e9      	bcs.n	80004ec <__adddf3+0x10c>
 8000518:	f091 0f00 	teq	r1, #0
 800051c:	bf04      	itt	eq
 800051e:	4601      	moveq	r1, r0
 8000520:	2000      	moveq	r0, #0
 8000522:	fab1 f381 	clz	r3, r1
 8000526:	bf08      	it	eq
 8000528:	3320      	addeq	r3, #32
 800052a:	f1a3 030b 	sub.w	r3, r3, #11
 800052e:	f1b3 0220 	subs.w	r2, r3, #32
 8000532:	da0c      	bge.n	800054e <__adddf3+0x16e>
 8000534:	320c      	adds	r2, #12
 8000536:	dd08      	ble.n	800054a <__adddf3+0x16a>
 8000538:	f102 0c14 	add.w	ip, r2, #20
 800053c:	f1c2 020c 	rsb	r2, r2, #12
 8000540:	fa01 f00c 	lsl.w	r0, r1, ip
 8000544:	fa21 f102 	lsr.w	r1, r1, r2
 8000548:	e00c      	b.n	8000564 <__adddf3+0x184>
 800054a:	f102 0214 	add.w	r2, r2, #20
 800054e:	bfd8      	it	le
 8000550:	f1c2 0c20 	rsble	ip, r2, #32
 8000554:	fa01 f102 	lsl.w	r1, r1, r2
 8000558:	fa20 fc0c 	lsr.w	ip, r0, ip
 800055c:	bfdc      	itt	le
 800055e:	ea41 010c 	orrle.w	r1, r1, ip
 8000562:	4090      	lslle	r0, r2
 8000564:	1ae4      	subs	r4, r4, r3
 8000566:	bfa2      	ittt	ge
 8000568:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800056c:	4329      	orrge	r1, r5
 800056e:	bd30      	popge	{r4, r5, pc}
 8000570:	ea6f 0404 	mvn.w	r4, r4
 8000574:	3c1f      	subs	r4, #31
 8000576:	da1c      	bge.n	80005b2 <__adddf3+0x1d2>
 8000578:	340c      	adds	r4, #12
 800057a:	dc0e      	bgt.n	800059a <__adddf3+0x1ba>
 800057c:	f104 0414 	add.w	r4, r4, #20
 8000580:	f1c4 0220 	rsb	r2, r4, #32
 8000584:	fa20 f004 	lsr.w	r0, r0, r4
 8000588:	fa01 f302 	lsl.w	r3, r1, r2
 800058c:	ea40 0003 	orr.w	r0, r0, r3
 8000590:	fa21 f304 	lsr.w	r3, r1, r4
 8000594:	ea45 0103 	orr.w	r1, r5, r3
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f1c4 040c 	rsb	r4, r4, #12
 800059e:	f1c4 0220 	rsb	r2, r4, #32
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 f304 	lsl.w	r3, r1, r4
 80005aa:	ea40 0003 	orr.w	r0, r0, r3
 80005ae:	4629      	mov	r1, r5
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	fa21 f004 	lsr.w	r0, r1, r4
 80005b6:	4629      	mov	r1, r5
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	f094 0f00 	teq	r4, #0
 80005be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005c2:	bf06      	itte	eq
 80005c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005c8:	3401      	addeq	r4, #1
 80005ca:	3d01      	subne	r5, #1
 80005cc:	e74e      	b.n	800046c <__adddf3+0x8c>
 80005ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005d2:	bf18      	it	ne
 80005d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005d8:	d029      	beq.n	800062e <__adddf3+0x24e>
 80005da:	ea94 0f05 	teq	r4, r5
 80005de:	bf08      	it	eq
 80005e0:	ea90 0f02 	teqeq	r0, r2
 80005e4:	d005      	beq.n	80005f2 <__adddf3+0x212>
 80005e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ea:	bf04      	itt	eq
 80005ec:	4619      	moveq	r1, r3
 80005ee:	4610      	moveq	r0, r2
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	ea91 0f03 	teq	r1, r3
 80005f6:	bf1e      	ittt	ne
 80005f8:	2100      	movne	r1, #0
 80005fa:	2000      	movne	r0, #0
 80005fc:	bd30      	popne	{r4, r5, pc}
 80005fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000602:	d105      	bne.n	8000610 <__adddf3+0x230>
 8000604:	0040      	lsls	r0, r0, #1
 8000606:	4149      	adcs	r1, r1
 8000608:	bf28      	it	cs
 800060a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800060e:	bd30      	pop	{r4, r5, pc}
 8000610:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000614:	bf3c      	itt	cc
 8000616:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800061a:	bd30      	popcc	{r4, r5, pc}
 800061c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000620:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000624:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000628:	f04f 0000 	mov.w	r0, #0
 800062c:	bd30      	pop	{r4, r5, pc}
 800062e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000632:	bf1a      	itte	ne
 8000634:	4619      	movne	r1, r3
 8000636:	4610      	movne	r0, r2
 8000638:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800063c:	bf1c      	itt	ne
 800063e:	460b      	movne	r3, r1
 8000640:	4602      	movne	r2, r0
 8000642:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000646:	bf06      	itte	eq
 8000648:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800064c:	ea91 0f03 	teqeq	r1, r3
 8000650:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000654:	bd30      	pop	{r4, r5, pc}
 8000656:	bf00      	nop

08000658 <__aeabi_ui2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800066c:	f04f 0500 	mov.w	r5, #0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e750      	b.n	8000518 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_i2d>:
 8000678:	f090 0f00 	teq	r0, #0
 800067c:	bf04      	itt	eq
 800067e:	2100      	moveq	r1, #0
 8000680:	4770      	bxeq	lr
 8000682:	b530      	push	{r4, r5, lr}
 8000684:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000688:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800068c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000690:	bf48      	it	mi
 8000692:	4240      	negmi	r0, r0
 8000694:	f04f 0100 	mov.w	r1, #0
 8000698:	e73e      	b.n	8000518 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_f2d>:
 800069c:	0042      	lsls	r2, r0, #1
 800069e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006aa:	bf1f      	itttt	ne
 80006ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006b8:	4770      	bxne	lr
 80006ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006be:	bf08      	it	eq
 80006c0:	4770      	bxeq	lr
 80006c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006c6:	bf04      	itt	eq
 80006c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006cc:	4770      	bxeq	lr
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	e71c      	b.n	8000518 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_ul2d>:
 80006e0:	ea50 0201 	orrs.w	r2, r0, r1
 80006e4:	bf08      	it	eq
 80006e6:	4770      	bxeq	lr
 80006e8:	b530      	push	{r4, r5, lr}
 80006ea:	f04f 0500 	mov.w	r5, #0
 80006ee:	e00a      	b.n	8000706 <__aeabi_l2d+0x16>

080006f0 <__aeabi_l2d>:
 80006f0:	ea50 0201 	orrs.w	r2, r0, r1
 80006f4:	bf08      	it	eq
 80006f6:	4770      	bxeq	lr
 80006f8:	b530      	push	{r4, r5, lr}
 80006fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006fe:	d502      	bpl.n	8000706 <__aeabi_l2d+0x16>
 8000700:	4240      	negs	r0, r0
 8000702:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000706:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800070a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800070e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000712:	f43f aed8 	beq.w	80004c6 <__adddf3+0xe6>
 8000716:	f04f 0203 	mov.w	r2, #3
 800071a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800071e:	bf18      	it	ne
 8000720:	3203      	addne	r2, #3
 8000722:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000726:	bf18      	it	ne
 8000728:	3203      	addne	r2, #3
 800072a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800072e:	f1c2 0320 	rsb	r3, r2, #32
 8000732:	fa00 fc03 	lsl.w	ip, r0, r3
 8000736:	fa20 f002 	lsr.w	r0, r0, r2
 800073a:	fa01 fe03 	lsl.w	lr, r1, r3
 800073e:	ea40 000e 	orr.w	r0, r0, lr
 8000742:	fa21 f102 	lsr.w	r1, r1, r2
 8000746:	4414      	add	r4, r2
 8000748:	e6bd      	b.n	80004c6 <__adddf3+0xe6>
 800074a:	bf00      	nop

0800074c <__aeabi_uldivmod>:
 800074c:	b953      	cbnz	r3, 8000764 <__aeabi_uldivmod+0x18>
 800074e:	b94a      	cbnz	r2, 8000764 <__aeabi_uldivmod+0x18>
 8000750:	2900      	cmp	r1, #0
 8000752:	bf08      	it	eq
 8000754:	2800      	cmpeq	r0, #0
 8000756:	bf1c      	itt	ne
 8000758:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800075c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000760:	f000 b9a4 	b.w	8000aac <__aeabi_idiv0>
 8000764:	f1ad 0c08 	sub.w	ip, sp, #8
 8000768:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800076c:	f000 f840 	bl	80007f0 <__udivmoddi4>
 8000770:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000774:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000778:	b004      	add	sp, #16
 800077a:	4770      	bx	lr

0800077c <__aeabi_d2lz>:
 800077c:	b508      	push	{r3, lr}
 800077e:	4602      	mov	r2, r0
 8000780:	460b      	mov	r3, r1
 8000782:	ec43 2b17 	vmov	d7, r2, r3
 8000786:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800078a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800078e:	d403      	bmi.n	8000798 <__aeabi_d2lz+0x1c>
 8000790:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000794:	f000 b80c 	b.w	80007b0 <__aeabi_d2ulz>
 8000798:	eeb1 7b47 	vneg.f64	d7, d7
 800079c:	ec51 0b17 	vmov	r0, r1, d7
 80007a0:	f000 f806 	bl	80007b0 <__aeabi_d2ulz>
 80007a4:	4240      	negs	r0, r0
 80007a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007aa:	bd08      	pop	{r3, pc}
 80007ac:	0000      	movs	r0, r0
	...

080007b0 <__aeabi_d2ulz>:
 80007b0:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007e0 <__aeabi_d2ulz+0x30>
 80007b4:	ec41 0b17 	vmov	d7, r0, r1
 80007b8:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007e8 <__aeabi_d2ulz+0x38>
 80007bc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c0:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007c4:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007c8:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d0:	ee16 1a10 	vmov	r1, s12
 80007d4:	ee17 0a90 	vmov	r0, s15
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	f3af 8000 	nop.w
 80007e0:	00000000 	.word	0x00000000
 80007e4:	3df00000 	.word	0x3df00000
 80007e8:	00000000 	.word	0x00000000
 80007ec:	41f00000 	.word	0x41f00000

080007f0 <__udivmoddi4>:
 80007f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007f4:	9d08      	ldr	r5, [sp, #32]
 80007f6:	460c      	mov	r4, r1
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d14e      	bne.n	800089a <__udivmoddi4+0xaa>
 80007fc:	4694      	mov	ip, r2
 80007fe:	458c      	cmp	ip, r1
 8000800:	4686      	mov	lr, r0
 8000802:	fab2 f282 	clz	r2, r2
 8000806:	d962      	bls.n	80008ce <__udivmoddi4+0xde>
 8000808:	b14a      	cbz	r2, 800081e <__udivmoddi4+0x2e>
 800080a:	f1c2 0320 	rsb	r3, r2, #32
 800080e:	4091      	lsls	r1, r2
 8000810:	fa20 f303 	lsr.w	r3, r0, r3
 8000814:	fa0c fc02 	lsl.w	ip, ip, r2
 8000818:	4319      	orrs	r1, r3
 800081a:	fa00 fe02 	lsl.w	lr, r0, r2
 800081e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000822:	fa1f f68c 	uxth.w	r6, ip
 8000826:	fbb1 f4f7 	udiv	r4, r1, r7
 800082a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800082e:	fb07 1114 	mls	r1, r7, r4, r1
 8000832:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000836:	fb04 f106 	mul.w	r1, r4, r6
 800083a:	4299      	cmp	r1, r3
 800083c:	d90a      	bls.n	8000854 <__udivmoddi4+0x64>
 800083e:	eb1c 0303 	adds.w	r3, ip, r3
 8000842:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000846:	f080 8112 	bcs.w	8000a6e <__udivmoddi4+0x27e>
 800084a:	4299      	cmp	r1, r3
 800084c:	f240 810f 	bls.w	8000a6e <__udivmoddi4+0x27e>
 8000850:	3c02      	subs	r4, #2
 8000852:	4463      	add	r3, ip
 8000854:	1a59      	subs	r1, r3, r1
 8000856:	fa1f f38e 	uxth.w	r3, lr
 800085a:	fbb1 f0f7 	udiv	r0, r1, r7
 800085e:	fb07 1110 	mls	r1, r7, r0, r1
 8000862:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000866:	fb00 f606 	mul.w	r6, r0, r6
 800086a:	429e      	cmp	r6, r3
 800086c:	d90a      	bls.n	8000884 <__udivmoddi4+0x94>
 800086e:	eb1c 0303 	adds.w	r3, ip, r3
 8000872:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000876:	f080 80fc 	bcs.w	8000a72 <__udivmoddi4+0x282>
 800087a:	429e      	cmp	r6, r3
 800087c:	f240 80f9 	bls.w	8000a72 <__udivmoddi4+0x282>
 8000880:	4463      	add	r3, ip
 8000882:	3802      	subs	r0, #2
 8000884:	1b9b      	subs	r3, r3, r6
 8000886:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800088a:	2100      	movs	r1, #0
 800088c:	b11d      	cbz	r5, 8000896 <__udivmoddi4+0xa6>
 800088e:	40d3      	lsrs	r3, r2
 8000890:	2200      	movs	r2, #0
 8000892:	e9c5 3200 	strd	r3, r2, [r5]
 8000896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089a:	428b      	cmp	r3, r1
 800089c:	d905      	bls.n	80008aa <__udivmoddi4+0xba>
 800089e:	b10d      	cbz	r5, 80008a4 <__udivmoddi4+0xb4>
 80008a0:	e9c5 0100 	strd	r0, r1, [r5]
 80008a4:	2100      	movs	r1, #0
 80008a6:	4608      	mov	r0, r1
 80008a8:	e7f5      	b.n	8000896 <__udivmoddi4+0xa6>
 80008aa:	fab3 f183 	clz	r1, r3
 80008ae:	2900      	cmp	r1, #0
 80008b0:	d146      	bne.n	8000940 <__udivmoddi4+0x150>
 80008b2:	42a3      	cmp	r3, r4
 80008b4:	d302      	bcc.n	80008bc <__udivmoddi4+0xcc>
 80008b6:	4290      	cmp	r0, r2
 80008b8:	f0c0 80f0 	bcc.w	8000a9c <__udivmoddi4+0x2ac>
 80008bc:	1a86      	subs	r6, r0, r2
 80008be:	eb64 0303 	sbc.w	r3, r4, r3
 80008c2:	2001      	movs	r0, #1
 80008c4:	2d00      	cmp	r5, #0
 80008c6:	d0e6      	beq.n	8000896 <__udivmoddi4+0xa6>
 80008c8:	e9c5 6300 	strd	r6, r3, [r5]
 80008cc:	e7e3      	b.n	8000896 <__udivmoddi4+0xa6>
 80008ce:	2a00      	cmp	r2, #0
 80008d0:	f040 8090 	bne.w	80009f4 <__udivmoddi4+0x204>
 80008d4:	eba1 040c 	sub.w	r4, r1, ip
 80008d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008dc:	fa1f f78c 	uxth.w	r7, ip
 80008e0:	2101      	movs	r1, #1
 80008e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80008e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008ea:	fb08 4416 	mls	r4, r8, r6, r4
 80008ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008f2:	fb07 f006 	mul.w	r0, r7, r6
 80008f6:	4298      	cmp	r0, r3
 80008f8:	d908      	bls.n	800090c <__udivmoddi4+0x11c>
 80008fa:	eb1c 0303 	adds.w	r3, ip, r3
 80008fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000902:	d202      	bcs.n	800090a <__udivmoddi4+0x11a>
 8000904:	4298      	cmp	r0, r3
 8000906:	f200 80cd 	bhi.w	8000aa4 <__udivmoddi4+0x2b4>
 800090a:	4626      	mov	r6, r4
 800090c:	1a1c      	subs	r4, r3, r0
 800090e:	fa1f f38e 	uxth.w	r3, lr
 8000912:	fbb4 f0f8 	udiv	r0, r4, r8
 8000916:	fb08 4410 	mls	r4, r8, r0, r4
 800091a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800091e:	fb00 f707 	mul.w	r7, r0, r7
 8000922:	429f      	cmp	r7, r3
 8000924:	d908      	bls.n	8000938 <__udivmoddi4+0x148>
 8000926:	eb1c 0303 	adds.w	r3, ip, r3
 800092a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800092e:	d202      	bcs.n	8000936 <__udivmoddi4+0x146>
 8000930:	429f      	cmp	r7, r3
 8000932:	f200 80b0 	bhi.w	8000a96 <__udivmoddi4+0x2a6>
 8000936:	4620      	mov	r0, r4
 8000938:	1bdb      	subs	r3, r3, r7
 800093a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800093e:	e7a5      	b.n	800088c <__udivmoddi4+0x9c>
 8000940:	f1c1 0620 	rsb	r6, r1, #32
 8000944:	408b      	lsls	r3, r1
 8000946:	fa22 f706 	lsr.w	r7, r2, r6
 800094a:	431f      	orrs	r7, r3
 800094c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000950:	fa04 f301 	lsl.w	r3, r4, r1
 8000954:	ea43 030c 	orr.w	r3, r3, ip
 8000958:	40f4      	lsrs	r4, r6
 800095a:	fa00 f801 	lsl.w	r8, r0, r1
 800095e:	0c38      	lsrs	r0, r7, #16
 8000960:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000964:	fbb4 fef0 	udiv	lr, r4, r0
 8000968:	fa1f fc87 	uxth.w	ip, r7
 800096c:	fb00 441e 	mls	r4, r0, lr, r4
 8000970:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000974:	fb0e f90c 	mul.w	r9, lr, ip
 8000978:	45a1      	cmp	r9, r4
 800097a:	fa02 f201 	lsl.w	r2, r2, r1
 800097e:	d90a      	bls.n	8000996 <__udivmoddi4+0x1a6>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000986:	f080 8084 	bcs.w	8000a92 <__udivmoddi4+0x2a2>
 800098a:	45a1      	cmp	r9, r4
 800098c:	f240 8081 	bls.w	8000a92 <__udivmoddi4+0x2a2>
 8000990:	f1ae 0e02 	sub.w	lr, lr, #2
 8000994:	443c      	add	r4, r7
 8000996:	eba4 0409 	sub.w	r4, r4, r9
 800099a:	fa1f f983 	uxth.w	r9, r3
 800099e:	fbb4 f3f0 	udiv	r3, r4, r0
 80009a2:	fb00 4413 	mls	r4, r0, r3, r4
 80009a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80009ae:	45a4      	cmp	ip, r4
 80009b0:	d907      	bls.n	80009c2 <__udivmoddi4+0x1d2>
 80009b2:	193c      	adds	r4, r7, r4
 80009b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80009b8:	d267      	bcs.n	8000a8a <__udivmoddi4+0x29a>
 80009ba:	45a4      	cmp	ip, r4
 80009bc:	d965      	bls.n	8000a8a <__udivmoddi4+0x29a>
 80009be:	3b02      	subs	r3, #2
 80009c0:	443c      	add	r4, r7
 80009c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009c6:	fba0 9302 	umull	r9, r3, r0, r2
 80009ca:	eba4 040c 	sub.w	r4, r4, ip
 80009ce:	429c      	cmp	r4, r3
 80009d0:	46ce      	mov	lr, r9
 80009d2:	469c      	mov	ip, r3
 80009d4:	d351      	bcc.n	8000a7a <__udivmoddi4+0x28a>
 80009d6:	d04e      	beq.n	8000a76 <__udivmoddi4+0x286>
 80009d8:	b155      	cbz	r5, 80009f0 <__udivmoddi4+0x200>
 80009da:	ebb8 030e 	subs.w	r3, r8, lr
 80009de:	eb64 040c 	sbc.w	r4, r4, ip
 80009e2:	fa04 f606 	lsl.w	r6, r4, r6
 80009e6:	40cb      	lsrs	r3, r1
 80009e8:	431e      	orrs	r6, r3
 80009ea:	40cc      	lsrs	r4, r1
 80009ec:	e9c5 6400 	strd	r6, r4, [r5]
 80009f0:	2100      	movs	r1, #0
 80009f2:	e750      	b.n	8000896 <__udivmoddi4+0xa6>
 80009f4:	f1c2 0320 	rsb	r3, r2, #32
 80009f8:	fa20 f103 	lsr.w	r1, r0, r3
 80009fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a00:	fa24 f303 	lsr.w	r3, r4, r3
 8000a04:	4094      	lsls	r4, r2
 8000a06:	430c      	orrs	r4, r1
 8000a08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a0c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a10:	fa1f f78c 	uxth.w	r7, ip
 8000a14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a18:	fb08 3110 	mls	r1, r8, r0, r3
 8000a1c:	0c23      	lsrs	r3, r4, #16
 8000a1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a22:	fb00 f107 	mul.w	r1, r0, r7
 8000a26:	4299      	cmp	r1, r3
 8000a28:	d908      	bls.n	8000a3c <__udivmoddi4+0x24c>
 8000a2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000a32:	d22c      	bcs.n	8000a8e <__udivmoddi4+0x29e>
 8000a34:	4299      	cmp	r1, r3
 8000a36:	d92a      	bls.n	8000a8e <__udivmoddi4+0x29e>
 8000a38:	3802      	subs	r0, #2
 8000a3a:	4463      	add	r3, ip
 8000a3c:	1a5b      	subs	r3, r3, r1
 8000a3e:	b2a4      	uxth	r4, r4
 8000a40:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a44:	fb08 3311 	mls	r3, r8, r1, r3
 8000a48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a4c:	fb01 f307 	mul.w	r3, r1, r7
 8000a50:	42a3      	cmp	r3, r4
 8000a52:	d908      	bls.n	8000a66 <__udivmoddi4+0x276>
 8000a54:	eb1c 0404 	adds.w	r4, ip, r4
 8000a58:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000a5c:	d213      	bcs.n	8000a86 <__udivmoddi4+0x296>
 8000a5e:	42a3      	cmp	r3, r4
 8000a60:	d911      	bls.n	8000a86 <__udivmoddi4+0x296>
 8000a62:	3902      	subs	r1, #2
 8000a64:	4464      	add	r4, ip
 8000a66:	1ae4      	subs	r4, r4, r3
 8000a68:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a6c:	e739      	b.n	80008e2 <__udivmoddi4+0xf2>
 8000a6e:	4604      	mov	r4, r0
 8000a70:	e6f0      	b.n	8000854 <__udivmoddi4+0x64>
 8000a72:	4608      	mov	r0, r1
 8000a74:	e706      	b.n	8000884 <__udivmoddi4+0x94>
 8000a76:	45c8      	cmp	r8, r9
 8000a78:	d2ae      	bcs.n	80009d8 <__udivmoddi4+0x1e8>
 8000a7a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a7e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a82:	3801      	subs	r0, #1
 8000a84:	e7a8      	b.n	80009d8 <__udivmoddi4+0x1e8>
 8000a86:	4631      	mov	r1, r6
 8000a88:	e7ed      	b.n	8000a66 <__udivmoddi4+0x276>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	e799      	b.n	80009c2 <__udivmoddi4+0x1d2>
 8000a8e:	4630      	mov	r0, r6
 8000a90:	e7d4      	b.n	8000a3c <__udivmoddi4+0x24c>
 8000a92:	46d6      	mov	lr, sl
 8000a94:	e77f      	b.n	8000996 <__udivmoddi4+0x1a6>
 8000a96:	4463      	add	r3, ip
 8000a98:	3802      	subs	r0, #2
 8000a9a:	e74d      	b.n	8000938 <__udivmoddi4+0x148>
 8000a9c:	4606      	mov	r6, r0
 8000a9e:	4623      	mov	r3, r4
 8000aa0:	4608      	mov	r0, r1
 8000aa2:	e70f      	b.n	80008c4 <__udivmoddi4+0xd4>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	e730      	b.n	800090c <__udivmoddi4+0x11c>
 8000aaa:	bf00      	nop

08000aac <__aeabi_idiv0>:
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <LoRA_Read_Register>:
#define RSSI_OFFSET_HF_PORT      157
#define RSSI_OFFSET_LF_PORT      164

#define MAX_PKT_LENGTH           255

uint8_t LoRA_Read_Register(uint8_t addr){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ac0:	480d      	ldr	r0, [pc, #52]	@ (8000af8 <LoRA_Read_Register+0x48>)
 8000ac2:	f008 faa5 	bl	8009010 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000ac6:	1df9      	adds	r1, r7, #7
 8000ac8:	2364      	movs	r3, #100	@ 0x64
 8000aca:	2201      	movs	r2, #1
 8000acc:	480b      	ldr	r0, [pc, #44]	@ (8000afc <LoRA_Read_Register+0x4c>)
 8000ace:	f00f f9e9 	bl	800fea4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000ad2:	f107 010f 	add.w	r1, r7, #15
 8000ad6:	2364      	movs	r3, #100	@ 0x64
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4808      	ldr	r0, [pc, #32]	@ (8000afc <LoRA_Read_Register+0x4c>)
 8000adc:	f00f fbde 	bl	801029c <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ae6:	4804      	ldr	r0, [pc, #16]	@ (8000af8 <LoRA_Read_Register+0x48>)
 8000ae8:	f008 fa92 	bl	8009010 <HAL_GPIO_WritePin>

	return reg_value;
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	58020000 	.word	0x58020000
 8000afc:	240011bc 	.word	0x240011bc

08000b00 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	460a      	mov	r2, r1
 8000b0a:	71fb      	strb	r3, [r7, #7]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b20:	480c      	ldr	r0, [pc, #48]	@ (8000b54 <LoRA_Write_Register+0x54>)
 8000b22:	f008 fa75 	bl	8009010 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000b26:	1df9      	adds	r1, r7, #7
 8000b28:	2364      	movs	r3, #100	@ 0x64
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	480a      	ldr	r0, [pc, #40]	@ (8000b58 <LoRA_Write_Register+0x58>)
 8000b2e:	f00f f9b9 	bl	800fea4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000b32:	1db9      	adds	r1, r7, #6
 8000b34:	2364      	movs	r3, #100	@ 0x64
 8000b36:	2201      	movs	r2, #1
 8000b38:	4807      	ldr	r0, [pc, #28]	@ (8000b58 <LoRA_Write_Register+0x58>)
 8000b3a:	f00f f9b3 	bl	800fea4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b44:	4803      	ldr	r0, [pc, #12]	@ (8000b54 <LoRA_Write_Register+0x54>)
 8000b46:	f008 fa63 	bl	8009010 <HAL_GPIO_WritePin>

}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	58020000 	.word	0x58020000
 8000b58:	240011bc 	.word	0x240011bc

08000b5c <LoRA_sleep>:


void LoRA_sleep(void){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000b60:	2180      	movs	r1, #128	@ 0x80
 8000b62:	2001      	movs	r0, #1
 8000b64:	f7ff ffcc 	bl	8000b00 <LoRA_Write_Register>
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000b6c:	b5b0      	push	{r4, r5, r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000b74:	6879      	ldr	r1, [r7, #4]
 8000b76:	17c8      	asrs	r0, r1, #31
 8000b78:	460a      	mov	r2, r1
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	1355      	asrs	r5, r2, #13
 8000b7e:	04d4      	lsls	r4, r2, #19
 8000b80:	4a18      	ldr	r2, [pc, #96]	@ (8000be4 <LoRA_set_frequency+0x78>)
 8000b82:	f04f 0300 	mov.w	r3, #0
 8000b86:	4620      	mov	r0, r4
 8000b88:	4629      	mov	r1, r5
 8000b8a:	f7ff fddf 	bl	800074c <__aeabi_uldivmod>
 8000b8e:	4602      	mov	r2, r0
 8000b90:	460b      	mov	r3, r1
 8000b92:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000b96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000b9a:	f04f 0200 	mov.w	r2, #0
 8000b9e:	f04f 0300 	mov.w	r3, #0
 8000ba2:	0c02      	lsrs	r2, r0, #16
 8000ba4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ba8:	0c0b      	lsrs	r3, r1, #16
 8000baa:	b2d3      	uxtb	r3, r2
 8000bac:	4619      	mov	r1, r3
 8000bae:	2006      	movs	r0, #6
 8000bb0:	f7ff ffa6 	bl	8000b00 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000bb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000bb8:	f04f 0200 	mov.w	r2, #0
 8000bbc:	f04f 0300 	mov.w	r3, #0
 8000bc0:	0a02      	lsrs	r2, r0, #8
 8000bc2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000bc6:	0a0b      	lsrs	r3, r1, #8
 8000bc8:	b2d3      	uxtb	r3, r2
 8000bca:	4619      	mov	r1, r3
 8000bcc:	2007      	movs	r0, #7
 8000bce:	f7ff ff97 	bl	8000b00 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000bd2:	7a3b      	ldrb	r3, [r7, #8]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	2008      	movs	r0, #8
 8000bd8:	f7ff ff92 	bl	8000b00 <LoRA_Write_Register>
}
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bdb0      	pop	{r4, r5, r7, pc}
 8000be4:	01e84800 	.word	0x01e84800

08000be8 <LoRA_idle>:

void LoRA_idle(){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000bec:	2181      	movs	r1, #129	@ 0x81
 8000bee:	2001      	movs	r0, #1
 8000bf0:	f7ff ff86 	bl	8000b00 <LoRA_Write_Register>
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8000c02:	231b      	movs	r3, #27
 8000c04:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	2b78      	cmp	r3, #120	@ 0x78
 8000c0a:	d809      	bhi.n	8000c20 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	3b2d      	subs	r3, #45	@ 0x2d
 8000c10:	4a11      	ldr	r2, [pc, #68]	@ (8000c58 <LoRA_setOCP+0x60>)
 8000c12:	fb82 1203 	smull	r1, r2, r2, r3
 8000c16:	1052      	asrs	r2, r2, #1
 8000c18:	17db      	asrs	r3, r3, #31
 8000c1a:	1ad3      	subs	r3, r2, r3
 8000c1c:	73fb      	strb	r3, [r7, #15]
 8000c1e:	e00b      	b.n	8000c38 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2bf0      	cmp	r3, #240	@ 0xf0
 8000c24:	d808      	bhi.n	8000c38 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	331e      	adds	r3, #30
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c58 <LoRA_setOCP+0x60>)
 8000c2c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c30:	1092      	asrs	r2, r2, #2
 8000c32:	17db      	asrs	r3, r3, #31
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	f003 031f 	and.w	r3, r3, #31
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	f043 0320 	orr.w	r3, r3, #32
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	4619      	mov	r1, r3
 8000c48:	200b      	movs	r0, #11
 8000c4a:	f7ff ff59 	bl	8000b00 <LoRA_Write_Register>
}
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	66666667 	.word	0x66666667

08000c5c <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b11      	cmp	r3, #17
 8000c68:	dd0f      	ble.n	8000c8a <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b14      	cmp	r3, #20
 8000c6e:	dd01      	ble.n	8000c74 <LoRA_setTxPower+0x18>
        level = 20;
 8000c70:	2314      	movs	r3, #20
 8000c72:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b03      	subs	r3, #3
 8000c78:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000c7a:	2187      	movs	r1, #135	@ 0x87
 8000c7c:	204d      	movs	r0, #77	@ 0x4d
 8000c7e:	f7ff ff3f 	bl	8000b00 <LoRA_Write_Register>
      LoRA_setOCP(140);
 8000c82:	208c      	movs	r0, #140	@ 0x8c
 8000c84:	f7ff ffb8 	bl	8000bf8 <LoRA_setOCP>
 8000c88:	e00b      	b.n	8000ca2 <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	dc01      	bgt.n	8000c94 <LoRA_setTxPower+0x38>
        level = 2;
 8000c90:	2302      	movs	r3, #2
 8000c92:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000c94:	2184      	movs	r1, #132	@ 0x84
 8000c96:	204d      	movs	r0, #77	@ 0x4d
 8000c98:	f7ff ff32 	bl	8000b00 <LoRA_Write_Register>
      LoRA_setOCP(100);
 8000c9c:	2064      	movs	r0, #100	@ 0x64
 8000c9e:	f7ff ffab 	bl	8000bf8 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	3b02      	subs	r3, #2
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	b25b      	sxtb	r3, r3
 8000cac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000cb0:	b25b      	sxtb	r3, r3
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	2009      	movs	r0, #9
 8000cb8:	f7ff ff22 	bl	8000b00 <LoRA_Write_Register>
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8000cc8:	201d      	movs	r0, #29
 8000cca:	f7ff fef1 	bl	8000ab0 <LoRA_Read_Register>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	f023 0301 	bic.w	r3, r3, #1
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	201d      	movs	r0, #29
 8000cda:	f7ff ff11 	bl	8000b00 <LoRA_Write_Register>
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <LoRA_begin>:

void LoRA_begin(long frequency){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b09c      	sub	sp, #112	@ 0x70
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000cec:	2201      	movs	r2, #1
 8000cee:	2101      	movs	r1, #1
 8000cf0:	4822      	ldr	r0, [pc, #136]	@ (8000d7c <LoRA_begin+0x98>)
 8000cf2:	f008 f98d 	bl	8009010 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cfc:	4820      	ldr	r0, [pc, #128]	@ (8000d80 <LoRA_begin+0x9c>)
 8000cfe:	f008 f987 	bl	8009010 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8000d02:	2042      	movs	r0, #66	@ 0x42
 8000d04:	f7ff fed4 	bl	8000ab0 <LoRA_Read_Register>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 8000d0e:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8000d12:	f107 0308 	add.w	r3, r7, #8
 8000d16:	491b      	ldr	r1, [pc, #108]	@ (8000d84 <LoRA_begin+0xa0>)
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f01b f909 	bl	801bf30 <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 8000d1e:	f107 0308 	add.w	r3, r7, #8
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fb44 	bl	80003b0 <strlen>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	f107 0308 	add.w	r3, r7, #8
 8000d2e:	4611      	mov	r1, r2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f019 fe65 	bl	801aa00 <CDC_Transmit_HS>

	LoRA_sleep();
 8000d36:	f7ff ff11 	bl	8000b5c <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8000d3a:	4813      	ldr	r0, [pc, #76]	@ (8000d88 <LoRA_begin+0xa4>)
 8000d3c:	f7ff ff16 	bl	8000b6c <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8000d40:	2100      	movs	r1, #0
 8000d42:	200f      	movs	r0, #15
 8000d44:	f7ff fedc 	bl	8000b00 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8000d48:	2100      	movs	r1, #0
 8000d4a:	200e      	movs	r0, #14
 8000d4c:	f7ff fed8 	bl	8000b00 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8000d50:	200c      	movs	r0, #12
 8000d52:	f7ff fead 	bl	8000ab0 <LoRA_Read_Register>
 8000d56:	4603      	mov	r3, r0
 8000d58:	f043 0303 	orr.w	r3, r3, #3
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	4619      	mov	r1, r3
 8000d60:	200c      	movs	r0, #12
 8000d62:	f7ff fecd 	bl	8000b00 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8000d66:	2104      	movs	r1, #4
 8000d68:	2026      	movs	r0, #38	@ 0x26
 8000d6a:	f7ff fec9 	bl	8000b00 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8000d6e:	2011      	movs	r0, #17
 8000d70:	f7ff ff74 	bl	8000c5c <LoRA_setTxPower>

}
 8000d74:	bf00      	nop
 8000d76:	3770      	adds	r7, #112	@ 0x70
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	58020c00 	.word	0x58020c00
 8000d80:	58020000 	.word	0x58020000
 8000d84:	08020028 	.word	0x08020028
 8000d88:	33bca100 	.word	0x33bca100

08000d8c <LoRA_beginPacket>:


void LoRA_beginPacket(){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8000d90:	f7ff ff98 	bl	8000cc4 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000d94:	2100      	movs	r1, #0
 8000d96:	200d      	movs	r0, #13
 8000d98:	f7ff feb2 	bl	8000b00 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	2022      	movs	r0, #34	@ 0x22
 8000da0:	f7ff feae 	bl	8000b00 <LoRA_Write_Register>
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <LoRA_endPacket>:

void LoRA_endPacket(){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8000dac:	2183      	movs	r1, #131	@ 0x83
 8000dae:	2001      	movs	r0, #1
 8000db0:	f7ff fea6 	bl	8000b00 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 8000db4:	bf00      	nop
 8000db6:	2012      	movs	r0, #18
 8000db8:	f7ff fe7a 	bl	8000ab0 <LoRA_Read_Register>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	f003 0308 	and.w	r3, r3, #8
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d0f7      	beq.n	8000db6 <LoRA_endPacket+0xe>

	}
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8000dc6:	2185      	movs	r1, #133	@ 0x85
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f7ff fe99 	bl	8000b00 <LoRA_Write_Register>

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8000dce:	2108      	movs	r1, #8
 8000dd0:	2012      	movs	r0, #18
 8000dd2:	f7ff fe95 	bl	8000b00 <LoRA_Write_Register>

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <LoRA_parsePacket>:


int LoRA_parsePacket(){
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8000de4:	2012      	movs	r0, #18
 8000de6:	f7ff fe63 	bl	8000ab0 <LoRA_Read_Register>
 8000dea:	4603      	mov	r3, r0
 8000dec:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 8000dee:	f7ff ff69 	bl	8000cc4 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	4619      	mov	r1, r3
 8000df8:	2012      	movs	r0, #18
 8000dfa:	f7ff fe81 	bl	8000b00 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d016      	beq.n	8000e36 <LoRA_parsePacket+0x5c>
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	f003 0320 	and.w	r3, r3, #32
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d111      	bne.n	8000e36 <LoRA_parsePacket+0x5c>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 8000e12:	2013      	movs	r0, #19
 8000e14:	f7ff fe4c 	bl	8000ab0 <LoRA_Read_Register>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 8000e1c:	2010      	movs	r0, #16
 8000e1e:	f7ff fe47 	bl	8000ab0 <LoRA_Read_Register>
 8000e22:	4603      	mov	r3, r0
 8000e24:	4619      	mov	r1, r3
 8000e26:	200d      	movs	r0, #13
 8000e28:	f7ff fe6a 	bl	8000b00 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8000e2c:	2185      	movs	r1, #133	@ 0x85
 8000e2e:	2001      	movs	r0, #1
 8000e30:	f7ff fe66 	bl	8000b00 <LoRA_Write_Register>
 8000e34:	e00d      	b.n	8000e52 <LoRA_parsePacket+0x78>

		//LoRA_idle();
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS)){
 8000e36:	2001      	movs	r0, #1
 8000e38:	f7ff fe3a 	bl	8000ab0 <LoRA_Read_Register>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b85      	cmp	r3, #133	@ 0x85
 8000e40:	d007      	beq.n	8000e52 <LoRA_parsePacket+0x78>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000e42:	2100      	movs	r1, #0
 8000e44:	200d      	movs	r0, #13
 8000e46:	f7ff fe5b 	bl	8000b00 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8000e4a:	2185      	movs	r1, #133	@ 0x85
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f7ff fe57 	bl	8000b00 <LoRA_Write_Register>
	}
	return packetLenght;
 8000e52:	687b      	ldr	r3, [r7, #4]

}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <LoRA_sendPacket>:

void LoRA_sendPacket(char * data){
 8000e5c:	b5b0      	push	{r4, r5, r7, lr}
 8000e5e:	b0c4      	sub	sp, #272	@ 0x110
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e66:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000e6a:	6018      	str	r0, [r3, #0]
	LoRA_idle();
 8000e6c:	f7ff febc 	bl	8000be8 <LoRA_idle>

	char debug[MAX_PKT_LENGTH];
	if(recv_packet(debug, MAX_PKT_LENGTH)) {
 8000e70:	f107 0308 	add.w	r3, r7, #8
 8000e74:	21ff      	movs	r1, #255	@ 0xff
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 f878 	bl	8000f6c <recv_packet>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d022      	beq.n	8000ec8 <LoRA_sendPacket+0x6c>
		HAL_Delay(100);
 8000e82:	2064      	movs	r0, #100	@ 0x64
 8000e84:	f003 f9c6 	bl	8004214 <HAL_Delay>
		strcat(debug, " was thrown away");
 8000e88:	f107 0308 	add.w	r3, r7, #8
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fa8f 	bl	80003b0 <strlen>
 8000e92:	4603      	mov	r3, r0
 8000e94:	461a      	mov	r2, r3
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a32      	ldr	r2, [pc, #200]	@ (8000f68 <LoRA_sendPacket+0x10c>)
 8000e9e:	461d      	mov	r5, r3
 8000ea0:	4614      	mov	r4, r2
 8000ea2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ea4:	6028      	str	r0, [r5, #0]
 8000ea6:	6069      	str	r1, [r5, #4]
 8000ea8:	60aa      	str	r2, [r5, #8]
 8000eaa:	60eb      	str	r3, [r5, #12]
 8000eac:	7823      	ldrb	r3, [r4, #0]
 8000eae:	742b      	strb	r3, [r5, #16]
		CDC_Transmit_HS(debug, strlen(debug));
 8000eb0:	f107 0308 	add.w	r3, r7, #8
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fa7b 	bl	80003b0 <strlen>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	f107 0308 	add.w	r3, r7, #8
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f019 fd9c 	bl	801aa00 <CDC_Transmit_HS>
	}



	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8000ec8:	2012      	movs	r0, #18
 8000eca:	f7ff fdf1 	bl	8000ab0 <LoRA_Read_Register>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	/*char debug[250];
	sprintf(debug, "here: %d\n", (irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK));
	CDC_Transmit_HS(debug, strlen(debug));
	HAL_Delay(100);*/
	if(!((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0))
 8000ed4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d005      	beq.n	8000eec <LoRA_sendPacket+0x90>
 8000ee0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000ee4:	f003 0320 	and.w	r3, r3, #32
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d033      	beq.n	8000f54 <LoRA_sendPacket+0xf8>
	{
		//CDC_Transmit_HS("here1\n", strlen("here1\n"));
		LoRA_beginPacket();
 8000eec:	f7ff ff4e 	bl	8000d8c <LoRA_beginPacket>
    	for(int i = 0; i < strlen(data); i++){
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000ef6:	e011      	b.n	8000f1c <LoRA_sendPacket+0xc0>
    		LoRA_Write_Register(REG_FIFO, data[i]);
 8000ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000efc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000f00:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000f04:	6812      	ldr	r2, [r2, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f7ff fdf7 	bl	8000b00 <LoRA_Write_Register>
    	for(int i = 0; i < strlen(data); i++){
 8000f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000f16:	3301      	adds	r3, #1
 8000f18:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000f1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f20:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000f24:	6818      	ldr	r0, [r3, #0]
 8000f26:	f7ff fa43 	bl	80003b0 <strlen>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d8e1      	bhi.n	8000ef8 <LoRA_sendPacket+0x9c>
    	}
    	LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 8000f34:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f38:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000f3c:	6818      	ldr	r0, [r3, #0]
 8000f3e:	f7ff fa37 	bl	80003b0 <strlen>
 8000f42:	4603      	mov	r3, r0
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	4619      	mov	r1, r3
 8000f48:	2022      	movs	r0, #34	@ 0x22
 8000f4a:	f7ff fdd9 	bl	8000b00 <LoRA_Write_Register>
    	LoRA_endPacket();
 8000f4e:	f7ff ff2b 	bl	8000da8 <LoRA_endPacket>
 8000f52:	e004      	b.n	8000f5e <LoRA_sendPacket+0x102>
    	HAL_Delay(100);
    	CDC_Transmit_HS(sent, strlen(sent));*/
	}
	else {
		//CDC_Transmit_HS("here2\n", strlen("here2\n"));
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8000f54:	2185      	movs	r1, #133	@ 0x85
 8000f56:	2001      	movs	r0, #1
 8000f58:	f7ff fdd2 	bl	8000b00 <LoRA_Write_Register>
	}
	/*char sent[300];
	sprintf(sent, "\nsent: %s\n", data);
	HAL_Delay(100);
	CDC_Transmit_HS(sent, strlen(sent));*/
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bdb0      	pop	{r4, r5, r7, pc}
 8000f68:	0802002c 	.word	0x0802002c

08000f6c <recv_packet>:

int recv_packet(char* LoRA_data, int max_length)
{
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  int packet_length = LoRA_parsePacket();
 8000f76:	f7ff ff30 	bl	8000dda <LoRA_parsePacket>
 8000f7a:	60b8      	str	r0, [r7, #8]
  if(max_length-1 < packet_length) //-1 for the null terminator
 8000f7c:	683a      	ldr	r2, [r7, #0]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	dc01      	bgt.n	8000f88 <recv_packet+0x1c>
  {
    return 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	e01c      	b.n	8000fc2 <recv_packet+0x56>
  }
  if(packet_length){
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d018      	beq.n	8000fc0 <recv_packet+0x54>
    for(int i = 0; i < packet_length; i++){
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	e00a      	b.n	8000faa <recv_packet+0x3e>
      LoRA_data[i] = LoRA_Read_Register(0x00);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	18d4      	adds	r4, r2, r3
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f7ff fd88 	bl	8000ab0 <LoRA_Read_Register>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i < packet_length; i++){
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	dbf0      	blt.n	8000f94 <recv_packet+0x28>
    }
    LoRA_data[packet_length] = '\0';
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]

    /*char rec[300];
    sprintf(rec, "received: %s\n", LoRA_data);
    CDC_Transmit_HS(rec, strlen(rec));*/
    return packet_length;
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	e000      	b.n	8000fc2 <recv_packet+0x56>
  }
  else{
    return 0;
 8000fc0:	2300      	movs	r3, #0
  }
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd90      	pop	{r4, r7, pc}

08000fca <reliable_send_packet>:

void reliable_send_packet(char *LoRA_data) {
 8000fca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fce:	b089      	sub	sp, #36	@ 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	466b      	mov	r3, sp
 8000fd6:	461e      	mov	r6, r3
	//CDC_Transmit_HS("debug\n", strlen("debug\n"));
	uint16_t length = strlen(LoRA_data) + 1; //+1 for the \0
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff f9e9 	bl	80003b0 <strlen>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	82fb      	strh	r3, [r7, #22]
	char acknowledge[length];
 8000fe6:	8af9      	ldrh	r1, [r7, #22]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	3b01      	subs	r3, #1
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	b28b      	uxth	r3, r1
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4698      	mov	r8, r3
 8000ff4:	4691      	mov	r9, r2
 8000ff6:	f04f 0200 	mov.w	r2, #0
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001002:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001006:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800100a:	b28b      	uxth	r3, r1
 800100c:	2200      	movs	r2, #0
 800100e:	461c      	mov	r4, r3
 8001010:	4615      	mov	r5, r2
 8001012:	f04f 0200 	mov.w	r2, #0
 8001016:	f04f 0300 	mov.w	r3, #0
 800101a:	00eb      	lsls	r3, r5, #3
 800101c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001020:	00e2      	lsls	r2, r4, #3
 8001022:	460b      	mov	r3, r1
 8001024:	3307      	adds	r3, #7
 8001026:	08db      	lsrs	r3, r3, #3
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	ebad 0d03 	sub.w	sp, sp, r3
 800102e:	466b      	mov	r3, sp
 8001030:	3300      	adds	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
	uint32_t lastTime = HAL_GetTick();
 8001034:	f003 f8e2 	bl	80041fc <HAL_GetTick>
 8001038:	61f8      	str	r0, [r7, #28]
	uint32_t wait_time = rand_range(3, 13)*100;
 800103a:	210d      	movs	r1, #13
 800103c:	2003      	movs	r0, #3
 800103e:	f001 fc79 	bl	8002934 <rand_range>
 8001042:	4603      	mov	r3, r0
 8001044:	2264      	movs	r2, #100	@ 0x64
 8001046:	fb02 f303 	mul.w	r3, r2, r3
 800104a:	61bb      	str	r3, [r7, #24]
	LoRA_sendPacket(LoRA_data);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff ff05 	bl	8000e5c <LoRA_sendPacket>
	while (1) {

		if (recv_packet(acknowledge, length)) {
 8001052:	8afb      	ldrh	r3, [r7, #22]
 8001054:	4619      	mov	r1, r3
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f7ff ff88 	bl	8000f6c <recv_packet>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d009      	beq.n	8001076 <reliable_send_packet+0xac>

			//cehck crc
			if (strcmp(acknowledge, LoRA_data) != 0) {
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f7ff f9ab 	bl	80003c0 <strcmp>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d01a      	beq.n	80010a6 <reliable_send_packet+0xdc>
				LoRA_sendPacket(LoRA_data);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff fef3 	bl	8000e5c <LoRA_sendPacket>
			} else {
				break;
			}
		}

		if (HAL_GetTick() - lastTime > wait_time) {
 8001076:	f003 f8c1 	bl	80041fc <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	429a      	cmp	r2, r3
 8001084:	d2e5      	bcs.n	8001052 <reliable_send_packet+0x88>
	    	//CDC_Transmit_HS("debug\n", strlen("debug\n"));
			wait_time = rand_range(3, 13)*100;
 8001086:	210d      	movs	r1, #13
 8001088:	2003      	movs	r0, #3
 800108a:	f001 fc53 	bl	8002934 <rand_range>
 800108e:	4603      	mov	r3, r0
 8001090:	2264      	movs	r2, #100	@ 0x64
 8001092:	fb02 f303 	mul.w	r3, r2, r3
 8001096:	61bb      	str	r3, [r7, #24]
			LoRA_sendPacket(LoRA_data);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff fedf 	bl	8000e5c <LoRA_sendPacket>
			lastTime = HAL_GetTick();
 800109e:	f003 f8ad 	bl	80041fc <HAL_GetTick>
 80010a2:	61f8      	str	r0, [r7, #28]
		if (recv_packet(acknowledge, length)) {
 80010a4:	e7d5      	b.n	8001052 <reliable_send_packet+0x88>
				break;
 80010a6:	bf00      	nop
 80010a8:	46b5      	mov	sp, r6
		}
	}
}
 80010aa:	bf00      	nop
 80010ac:	3724      	adds	r7, #36	@ 0x24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080010b4 <communicationHandler>:
#include "communication_protocol.h"
#include "LoRA.h"

//should move variables to global, remove the loop and call the function in main loop (communicationHandle)
void communicationHandler(void reliableReceiveHandle(char*), void streamReceiveHandle(char*), char* streamSendHandle(int), struct ReliableSendConfig reliableSendHandle(), int initial_communication_state) {
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	f5ad 7d4f 	sub.w	sp, sp, #828	@ 0x33c
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	f507 744e 	add.w	r4, r7, #824	@ 0x338
 80010c0:	f5a4 744b 	sub.w	r4, r4, #812	@ 0x32c
 80010c4:	6020      	str	r0, [r4, #0]
 80010c6:	f507 704e 	add.w	r0, r7, #824	@ 0x338
 80010ca:	f5a0 704c 	sub.w	r0, r0, #816	@ 0x330
 80010ce:	6001      	str	r1, [r0, #0]
 80010d0:	f507 714e 	add.w	r1, r7, #824	@ 0x338
 80010d4:	f5a1 714d 	sub.w	r1, r1, #820	@ 0x334
 80010d8:	600a      	str	r2, [r1, #0]
 80010da:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 80010de:	f5a2 724e 	sub.w	r2, r2, #824	@ 0x338
 80010e2:	6013      	str	r3, [r2, #0]
  int communication_state = initial_communication_state;
 80010e4:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 80010e8:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
  int max_packet_count = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
  char previous_packet[MAX_PKT_LENGTH] = "";
 80010f2:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80010f6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	3304      	adds	r3, #4
 8001100:	22fb      	movs	r2, #251	@ 0xfb
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f01b feab 	bl	801ce60 <memset>
  char received_packet[MAX_PKT_LENGTH] = "";
 800110a:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 800110e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	3304      	adds	r3, #4
 8001118:	22fb      	movs	r2, #251	@ 0xfb
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f01b fe9f 	bl	801ce60 <memset>
  char general_buffer[MAX_PKT_LENGTH] = "";
 8001122:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001126:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	3304      	adds	r3, #4
 8001130:	22fb      	movs	r2, #251	@ 0xfb
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f01b fe93 	bl	801ce60 <memset>
  uint32_t previousTime = HAL_GetTick();
 800113a:	f003 f85f 	bl	80041fc <HAL_GetTick>
 800113e:	4603      	mov	r3, r0
 8001140:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
  uint32_t wait_time = rand_range(3, 13)*100;
 8001144:	210d      	movs	r1, #13
 8001146:	2003      	movs	r0, #3
 8001148:	f001 fbf4 	bl	8002934 <rand_range>
 800114c:	4603      	mov	r3, r0
 800114e:	2264      	movs	r2, #100	@ 0x64
 8001150:	fb02 f303 	mul.w	r3, r2, r3
 8001154:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c

  while (1) {
      if(communication_state == RECEIVING_RELIABLE)
 8001158:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 800115c:	2b00      	cmp	r3, #0
 800115e:	d151      	bne.n	8001204 <communicationHandler+0x150>
      {
        if(recv_packet(received_packet, MAX_PKT_LENGTH))
 8001160:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001164:	21ff      	movs	r1, #255	@ 0xff
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff00 	bl	8000f6c <recv_packet>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0f2      	beq.n	8001158 <communicationHandler+0xa4>
        {
          previousTime = HAL_GetTick();
 8001172:	f003 f843 	bl	80041fc <HAL_GetTick>
 8001176:	4603      	mov	r3, r0
 8001178:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330

          if(strcmp(received_packet, "$") == 0)
 800117c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001180:	49cd      	ldr	r1, [pc, #820]	@ (80014b8 <communicationHandler+0x404>)
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f91c 	bl	80003c0 <strcmp>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d103      	bne.n	8001196 <communicationHandler+0xe2>
          {
            communication_state = SENDING_RELIABLE;
 800118e:	2302      	movs	r3, #2
 8001190:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8001194:	e7e0      	b.n	8001158 <communicationHandler+0xa4>
          }
          else if(sscanf(received_packet, "! %d", &max_packet_count) == 1)
 8001196:	f507 7248 	add.w	r2, r7, #800	@ 0x320
 800119a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800119e:	49c7      	ldr	r1, [pc, #796]	@ (80014bc <communicationHandler+0x408>)
 80011a0:	4618      	mov	r0, r3
 80011a2:	f01a fee5 	bl	801bf70 <siscanf>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d103      	bne.n	80011b4 <communicationHandler+0x100>
          {
            communication_state = SENDING_STREAM;
 80011ac:	2303      	movs	r3, #3
 80011ae:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 80011b2:	e7d1      	b.n	8001158 <communicationHandler+0xa4>
          }
          else if(strcmp(received_packet, previous_packet)==0)
 80011b4:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80011b8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80011bc:	4611      	mov	r1, r2
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f8fe 	bl	80003c0 <strcmp>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d105      	bne.n	80011d6 <communicationHandler+0x122>
          {
            //send acknowledge again
            LoRA_sendPacket(received_packet);
 80011ca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fe44 	bl	8000e5c <LoRA_sendPacket>
 80011d4:	e7c0      	b.n	8001158 <communicationHandler+0xa4>
          }
          else
          {
        	//send acknowledge
            strcpy(previous_packet, received_packet);
 80011d6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80011da:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80011de:	4611      	mov	r1, r2
 80011e0:	4618      	mov	r0, r3
 80011e2:	f01b feca 	bl	801cf7a <strcpy>
            LoRA_sendPacket(received_packet);
 80011e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fe36 	bl	8000e5c <LoRA_sendPacket>

            reliableReceiveHandle(received_packet);
 80011f0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80011f4:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80011f8:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4610      	mov	r0, r2
 8001200:	4798      	blx	r3
 8001202:	e7a9      	b.n	8001158 <communicationHandler+0xa4>

          }
        }
      }
      else if(communication_state == RECEIVING_STREAM)
 8001204:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001208:	2b01      	cmp	r3, #1
 800120a:	d14d      	bne.n	80012a8 <communicationHandler+0x1f4>
      {
        if(recv_packet(received_packet, MAX_PKT_LENGTH))
 800120c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001210:	21ff      	movs	r1, #255	@ 0xff
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff feaa 	bl	8000f6c <recv_packet>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d01b      	beq.n	8001256 <communicationHandler+0x1a2>
        {
          previousTime = HAL_GetTick();
 800121e:	f002 ffed 	bl	80041fc <HAL_GetTick>
 8001222:	4603      	mov	r3, r0
 8001224:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
          if(strcmp(received_packet, "$") == 0)
 8001228:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800122c:	49a2      	ldr	r1, [pc, #648]	@ (80014b8 <communicationHandler+0x404>)
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f8c6 	bl	80003c0 <strcmp>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d103      	bne.n	8001242 <communicationHandler+0x18e>
          {
            communication_state = SENDING_RELIABLE;
 800123a:	2302      	movs	r3, #2
 800123c:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8001240:	e78a      	b.n	8001158 <communicationHandler+0xa4>
          }
          else
          {
        	streamReceiveHandle(received_packet);
 8001242:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001246:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 800124a:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4610      	mov	r0, r2
 8001252:	4798      	blx	r3
 8001254:	e780      	b.n	8001158 <communicationHandler+0xa4>
          }
        }
        else if(HAL_GetTick()-previousTime > wait_time)
 8001256:	f002 ffd1 	bl	80041fc <HAL_GetTick>
 800125a:	4603      	mov	r3, r0
 800125c:	461a      	mov	r2, r3
 800125e:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 8001268:	429a      	cmp	r2, r3
 800126a:	f4bf af75 	bcs.w	8001158 <communicationHandler+0xa4>
        {
          wait_time = rand_range(3, 13)*100;
 800126e:	210d      	movs	r1, #13
 8001270:	2003      	movs	r0, #3
 8001272:	f001 fb5f 	bl	8002934 <rand_range>
 8001276:	4603      	mov	r3, r0
 8001278:	2264      	movs	r2, #100	@ 0x64
 800127a:	fb02 f303 	mul.w	r3, r2, r3
 800127e:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
          previousTime = HAL_GetTick();
 8001282:	f002 ffbb 	bl	80041fc <HAL_GetTick>
 8001286:	4603      	mov	r3, r0
 8001288:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
          //give up SENDING
          sprintf(general_buffer, "! %d", max_packet_count);
 800128c:	f8d7 2320 	ldr.w	r2, [r7, #800]	@ 0x320
 8001290:	f107 0320 	add.w	r3, r7, #32
 8001294:	4989      	ldr	r1, [pc, #548]	@ (80014bc <communicationHandler+0x408>)
 8001296:	4618      	mov	r0, r3
 8001298:	f01a fe4a 	bl	801bf30 <siprintf>
          LoRA_sendPacket(general_buffer);
 800129c:	f107 0320 	add.w	r3, r7, #32
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fddb 	bl	8000e5c <LoRA_sendPacket>
 80012a6:	e757      	b.n	8001158 <communicationHandler+0xa4>
        }
      }
      else if(communication_state == SENDING_STREAM)
 80012a8:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	d11f      	bne.n	80012f0 <communicationHandler+0x23c>
      {
        if(max_packet_count == 0)
 80012b0:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d106      	bne.n	80012c6 <communicationHandler+0x212>
        {
          communication_state = TRANSITIONING;
 80012b8:	2304      	movs	r3, #4
 80012ba:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
          LoRA_sendPacket("$");
 80012be:	487e      	ldr	r0, [pc, #504]	@ (80014b8 <communicationHandler+0x404>)
 80012c0:	f7ff fdcc 	bl	8000e5c <LoRA_sendPacket>
 80012c4:	e748      	b.n	8001158 <communicationHandler+0xa4>
        }
        else
        {
          //send whatever
          char* msg = streamSendHandle(max_packet_count);
 80012c6:	f8d7 2320 	ldr.w	r2, [r7, #800]	@ 0x320
 80012ca:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80012ce:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4610      	mov	r0, r2
 80012d6:	4798      	blx	r3
 80012d8:	f8c7 0324 	str.w	r0, [r7, #804]	@ 0x324
          LoRA_sendPacket(msg);
 80012dc:	f8d7 0324 	ldr.w	r0, [r7, #804]	@ 0x324
 80012e0:	f7ff fdbc 	bl	8000e5c <LoRA_sendPacket>
          max_packet_count--;
 80012e4:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 80012e8:	3b01      	subs	r3, #1
 80012ea:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
 80012ee:	e733      	b.n	8001158 <communicationHandler+0xa4>
        }

      }
      else if(communication_state == SENDING_RELIABLE)
 80012f0:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	f040 8091 	bne.w	800141c <communicationHandler+0x368>
      {
        reliable_send_packet("*");
 80012fa:	4871      	ldr	r0, [pc, #452]	@ (80014c0 <communicationHandler+0x40c>)
 80012fc:	f7ff fe65 	bl	8000fca <reliable_send_packet>
        struct ReliableSendConfig config = reliableSendHandle();
 8001300:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001304:	f5a3 724a 	sub.w	r2, r3, #808	@ 0x328
 8001308:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 800130c:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4610      	mov	r0, r2
 8001314:	4798      	blx	r3
        for(int i = 0; i < config.messages_count; i++)
 8001316:	2300      	movs	r3, #0
 8001318:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 800131c:	e040      	b.n	80013a0 <communicationHandler+0x2ec>
        {
        	if(config.messages[i][0] == '$' || config.messages[i][0] == '*' || config.messages[i][0] == '!')
 800131e:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001322:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b24      	cmp	r3, #36	@ 0x24
 8001336:	d019      	beq.n	800136c <communicationHandler+0x2b8>
 8001338:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 800133c:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001350:	d00c      	beq.n	800136c <communicationHandler+0x2b8>
 8001352:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001356:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b21      	cmp	r3, #33	@ 0x21
 800136a:	d107      	bne.n	800137c <communicationHandler+0x2c8>
        	{
        		HAL_Delay(100);
 800136c:	2064      	movs	r0, #100	@ 0x64
 800136e:	f002 ff51 	bl	8004214 <HAL_Delay>
        		CDC_Transmit_HS("Can't send control commands! ('$', '*', '!')\n", strlen("Can't send control commands! ('$', '*', '!')\n"));
 8001372:	212d      	movs	r1, #45	@ 0x2d
 8001374:	4853      	ldr	r0, [pc, #332]	@ (80014c4 <communicationHandler+0x410>)
 8001376:	f019 fb43 	bl	801aa00 <CDC_Transmit_HS>
        	{
 800137a:	e00c      	b.n	8001396 <communicationHandler+0x2e2>
        	}
        	else
        	{
        		reliable_send_packet(config.messages[i]);
 800137c:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001380:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fe1a 	bl	8000fca <reliable_send_packet>
        for(int i = 0; i < config.messages_count; i++)
 8001396:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 800139a:	3301      	adds	r3, #1
 800139c:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 80013a0:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80013a4:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	f8d7 2328 	ldr.w	r2, [r7, #808]	@ 0x328
 80013ae:	429a      	cmp	r2, r3
 80013b0:	dbb5      	blt.n	800131e <communicationHandler+0x26a>
        	}
        }
        if(config.mode==RECEIVING_STREAM)
 80013b2:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80013b6:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d117      	bne.n	80013f0 <communicationHandler+0x33c>
        {
          communication_state = RECEIVING_STREAM;
 80013c0:	2301      	movs	r3, #1
 80013c2:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
          max_packet_count = config.streamable_packets;
 80013c6:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80013ca:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
          sprintf(general_buffer, "! %d", max_packet_count);
 80013d4:	f8d7 2320 	ldr.w	r2, [r7, #800]	@ 0x320
 80013d8:	f107 0320 	add.w	r3, r7, #32
 80013dc:	4937      	ldr	r1, [pc, #220]	@ (80014bc <communicationHandler+0x408>)
 80013de:	4618      	mov	r0, r3
 80013e0:	f01a fda6 	bl	801bf30 <siprintf>
          LoRA_sendPacket(general_buffer);
 80013e4:	f107 0320 	add.w	r3, r7, #32
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fd37 	bl	8000e5c <LoRA_sendPacket>
 80013ee:	e6b3      	b.n	8001158 <communicationHandler+0xa4>
        }
        else if(config.mode==RECEIVING_RELIABLE)
 80013f0:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80013f4:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d106      	bne.n	800140c <communicationHandler+0x358>
        {
          communication_state = TRANSITIONING;
 80013fe:	2304      	movs	r3, #4
 8001400:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
          LoRA_sendPacket("$");
 8001404:	482c      	ldr	r0, [pc, #176]	@ (80014b8 <communicationHandler+0x404>)
 8001406:	f7ff fd29 	bl	8000e5c <LoRA_sendPacket>
 800140a:	e6a5      	b.n	8001158 <communicationHandler+0xa4>
        }
        else
        {
            HAL_Delay(100);
 800140c:	2064      	movs	r0, #100	@ 0x64
 800140e:	f002 ff01 	bl	8004214 <HAL_Delay>
        	CDC_Transmit_HS("Shouldn't try to transition to this mode.\n", strlen("Shouldn't try to transition to this mode.\n"));
 8001412:	212a      	movs	r1, #42	@ 0x2a
 8001414:	482c      	ldr	r0, [pc, #176]	@ (80014c8 <communicationHandler+0x414>)
 8001416:	f019 faf3 	bl	801aa00 <CDC_Transmit_HS>
 800141a:	e69d      	b.n	8001158 <communicationHandler+0xa4>
        }
      }
      else if(communication_state == TRANSITIONING)
 800141c:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001420:	2b04      	cmp	r3, #4
 8001422:	f47f ae99 	bne.w	8001158 <communicationHandler+0xa4>
      {

          if(recv_packet(received_packet, MAX_PKT_LENGTH))
 8001426:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800142a:	21ff      	movs	r1, #255	@ 0xff
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fd9d 	bl	8000f6c <recv_packet>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d01f      	beq.n	8001478 <communicationHandler+0x3c4>
          {
            previousTime = HAL_GetTick();
 8001438:	f002 fee0 	bl	80041fc <HAL_GetTick>
 800143c:	4603      	mov	r3, r0
 800143e:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
            if(strcmp(received_packet, "*")==0)
 8001442:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001446:	491e      	ldr	r1, [pc, #120]	@ (80014c0 <communicationHandler+0x40c>)
 8001448:	4618      	mov	r0, r3
 800144a:	f7fe ffb9 	bl	80003c0 <strcmp>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	f47f ae81 	bne.w	8001158 <communicationHandler+0xa4>
            {
              strcpy(previous_packet, received_packet);
 8001456:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800145a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f01b fd8a 	bl	801cf7a <strcpy>
              communication_state = RECEIVING_RELIABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
              LoRA_sendPacket(received_packet);
 800146c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fcf3 	bl	8000e5c <LoRA_sendPacket>
 8001476:	e66f      	b.n	8001158 <communicationHandler+0xa4>
            }
          }
          else if (HAL_GetTick()-previousTime > wait_time)
 8001478:	f002 fec0 	bl	80041fc <HAL_GetTick>
 800147c:	4603      	mov	r3, r0
 800147e:	461a      	mov	r2, r3
 8001480:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 800148a:	429a      	cmp	r2, r3
 800148c:	f4bf ae64 	bcs.w	8001158 <communicationHandler+0xa4>
          {
            wait_time = rand_range(3, 13)*100;
 8001490:	210d      	movs	r1, #13
 8001492:	2003      	movs	r0, #3
 8001494:	f001 fa4e 	bl	8002934 <rand_range>
 8001498:	4603      	mov	r3, r0
 800149a:	2264      	movs	r2, #100	@ 0x64
 800149c:	fb02 f303 	mul.w	r3, r2, r3
 80014a0:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
            previousTime = HAL_GetTick();
 80014a4:	f002 feaa 	bl	80041fc <HAL_GetTick>
 80014a8:	4603      	mov	r3, r0
 80014aa:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
            LoRA_sendPacket("$");
 80014ae:	4802      	ldr	r0, [pc, #8]	@ (80014b8 <communicationHandler+0x404>)
 80014b0:	f7ff fcd4 	bl	8000e5c <LoRA_sendPacket>
      if(communication_state == RECEIVING_RELIABLE)
 80014b4:	e650      	b.n	8001158 <communicationHandler+0xa4>
 80014b6:	bf00      	nop
 80014b8:	08020040 	.word	0x08020040
 80014bc:	08020044 	.word	0x08020044
 80014c0:	0802004c 	.word	0x0802004c
 80014c4:	08020050 	.word	0x08020050
 80014c8:	08020080 	.word	0x08020080

080014cc <setServo>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;

void setServo(int servoNum, float angle) {
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal = (int) (3000 + (4000 * (angle / 100)));
 80014d8:	ed97 7a00 	vldr	s14, [r7]
 80014dc:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 800154c <setServo+0x80>
 80014e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e4:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001550 <setServo+0x84>
 80014e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ec:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001554 <setServo+0x88>
 80014f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014f8:	ee17 3a90 	vmov	r3, s15
 80014fc:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3b01      	subs	r3, #1
 8001502:	2b03      	cmp	r3, #3
 8001504:	d81a      	bhi.n	800153c <setServo+0x70>
 8001506:	a201      	add	r2, pc, #4	@ (adr r2, 800150c <setServo+0x40>)
 8001508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150c:	0800151d 	.word	0x0800151d
 8001510:	08001525 	.word	0x08001525
 8001514:	0800152d 	.word	0x0800152d
 8001518:	08001535 	.word	0x08001535
	case 1:
		TIM4->CCR4 = timerVal;
 800151c:	4a0e      	ldr	r2, [pc, #56]	@ (8001558 <setServo+0x8c>)
 800151e:	89fb      	ldrh	r3, [r7, #14]
 8001520:	6413      	str	r3, [r2, #64]	@ 0x40
		break;
 8001522:	e00c      	b.n	800153e <setServo+0x72>
	case 2:
		TIM4->CCR3 = timerVal;
 8001524:	4a0c      	ldr	r2, [pc, #48]	@ (8001558 <setServo+0x8c>)
 8001526:	89fb      	ldrh	r3, [r7, #14]
 8001528:	63d3      	str	r3, [r2, #60]	@ 0x3c
		break;
 800152a:	e008      	b.n	800153e <setServo+0x72>
	case 3:
		TIM4->CCR2 = timerVal;
 800152c:	4a0a      	ldr	r2, [pc, #40]	@ (8001558 <setServo+0x8c>)
 800152e:	89fb      	ldrh	r3, [r7, #14]
 8001530:	6393      	str	r3, [r2, #56]	@ 0x38
		break;
 8001532:	e004      	b.n	800153e <setServo+0x72>
	case 4:
		TIM4->CCR1 = timerVal;
 8001534:	4a08      	ldr	r2, [pc, #32]	@ (8001558 <setServo+0x8c>)
 8001536:	89fb      	ldrh	r3, [r7, #14]
 8001538:	6353      	str	r3, [r2, #52]	@ 0x34
		break;
 800153a:	e000      	b.n	800153e <setServo+0x72>

	default:
		break;
 800153c:	bf00      	nop
	}
}
 800153e:	bf00      	nop
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	42c80000 	.word	0x42c80000
 8001550:	457a0000 	.word	0x457a0000
 8001554:	453b8000 	.word	0x453b8000
 8001558:	40000800 	.word	0x40000800

0800155c <setLEDs>:

void setLEDs(void) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b08e      	sub	sp, #56	@ 0x38
 8001560:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8001562:	2300      	movs	r3, #0
 8001564:	637b      	str	r3, [r7, #52]	@ 0x34
 8001566:	e181      	b.n	800186c <setLEDs+0x310>
			i++) {
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 8001568:	4aa1      	ldr	r2, [pc, #644]	@ (80017f0 <setLEDs+0x294>)
 800156a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800156c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001570:	2b03      	cmp	r3, #3
 8001572:	f200 8177 	bhi.w	8001864 <setLEDs+0x308>
 8001576:	a201      	add	r2, pc, #4	@ (adr r2, 800157c <setLEDs+0x20>)
 8001578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157c:	0800158d 	.word	0x0800158d
 8001580:	0800163d 	.word	0x0800163d
 8001584:	080016ed 	.word	0x080016ed
 8001588:	0800179d 	.word	0x0800179d
		case 0:
			for (int j = 0; j < 3; j++) {
 800158c:	2300      	movs	r3, #0
 800158e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001590:	e042      	b.n	8001618 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 8001592:	2300      	movs	r3, #0
 8001594:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001596:	e039      	b.n	800160c <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8001598:	4996      	ldr	r1, [pc, #600]	@ (80017f4 <setLEDs+0x298>)
 800159a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800159c:	4613      	mov	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4413      	add	r3, r2
 80015a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80015a4:	4413      	add	r3, r2
 80015a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015aa:	2180      	movs	r1, #128	@ 0x80
 80015ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015ae:	fa41 f202 	asr.w	r2, r1, r2
 80015b2:	4013      	ands	r3, r2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d013      	beq.n	80015e0 <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 80015b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015ba:	00da      	lsls	r2, r3, #3
 80015bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015be:	18d1      	adds	r1, r2, r3
 80015c0:	4a8b      	ldr	r2, [pc, #556]	@ (80017f0 <setLEDs+0x294>)
 80015c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	4413      	add	r3, r2
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4413      	add	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	440b      	add	r3, r1
								+ 8] = 60;
 80015d4:	3308      	adds	r3, #8
 80015d6:	4a88      	ldr	r2, [pc, #544]	@ (80017f8 <setLEDs+0x29c>)
 80015d8:	213c      	movs	r1, #60	@ 0x3c
 80015da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80015de:	e012      	b.n	8001606 <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 80015e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015e2:	00da      	lsls	r2, r3, #3
 80015e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015e6:	18d1      	adds	r1, r2, r3
 80015e8:	4a81      	ldr	r2, [pc, #516]	@ (80017f0 <setLEDs+0x294>)
 80015ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4413      	add	r3, r2
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	4613      	mov	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4413      	add	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	440b      	add	r3, r1
								+ 8] = 30;
 80015fc:	3308      	adds	r3, #8
 80015fe:	4a7e      	ldr	r2, [pc, #504]	@ (80017f8 <setLEDs+0x29c>)
 8001600:	211e      	movs	r1, #30
 8001602:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8001606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001608:	3301      	adds	r3, #1
 800160a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800160c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800160e:	2b07      	cmp	r3, #7
 8001610:	ddc2      	ble.n	8001598 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8001612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001614:	3301      	adds	r3, #1
 8001616:	633b      	str	r3, [r7, #48]	@ 0x30
 8001618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800161a:	2b02      	cmp	r3, #2
 800161c:	ddb9      	ble.n	8001592 <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 800161e:	2380      	movs	r3, #128	@ 0x80
 8001620:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001622:	e007      	b.n	8001634 <setLEDs+0xd8>
					i++) {
				LED_PWM_Data_0[i] = 0;
 8001624:	4a74      	ldr	r2, [pc, #464]	@ (80017f8 <setLEDs+0x29c>)
 8001626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001628:	2100      	movs	r1, #0
 800162a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 800162e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001630:	3301      	adds	r3, #1
 8001632:	62bb      	str	r3, [r7, #40]	@ 0x28
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8001634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001636:	2bb1      	cmp	r3, #177	@ 0xb1
 8001638:	ddf4      	ble.n	8001624 <setLEDs+0xc8>
			}
			break;
 800163a:	e114      	b.n	8001866 <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 800163c:	2300      	movs	r3, #0
 800163e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001640:	e042      	b.n	80016c8 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8001642:	2300      	movs	r3, #0
 8001644:	623b      	str	r3, [r7, #32]
 8001646:	e039      	b.n	80016bc <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8001648:	496a      	ldr	r1, [pc, #424]	@ (80017f4 <setLEDs+0x298>)
 800164a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800164c:	4613      	mov	r3, r2
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	4413      	add	r3, r2
 8001652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001654:	4413      	add	r3, r2
 8001656:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800165a:	2180      	movs	r1, #128	@ 0x80
 800165c:	6a3a      	ldr	r2, [r7, #32]
 800165e:	fa41 f202 	asr.w	r2, r1, r2
 8001662:	4013      	ands	r3, r2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d013      	beq.n	8001690 <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8001668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166a:	00da      	lsls	r2, r3, #3
 800166c:	6a3b      	ldr	r3, [r7, #32]
 800166e:	18d1      	adds	r1, r2, r3
 8001670:	4a5f      	ldr	r2, [pc, #380]	@ (80017f0 <setLEDs+0x294>)
 8001672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4413      	add	r3, r2
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4413      	add	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	440b      	add	r3, r1
								+ 8] = 60;
 8001684:	3308      	adds	r3, #8
 8001686:	4a5d      	ldr	r2, [pc, #372]	@ (80017fc <setLEDs+0x2a0>)
 8001688:	213c      	movs	r1, #60	@ 0x3c
 800168a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800168e:	e012      	b.n	80016b6 <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8001690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001692:	00da      	lsls	r2, r3, #3
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	18d1      	adds	r1, r2, r3
 8001698:	4a55      	ldr	r2, [pc, #340]	@ (80017f0 <setLEDs+0x294>)
 800169a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	4413      	add	r3, r2
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	4413      	add	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	440b      	add	r3, r1
								+ 8] = 30;
 80016ac:	3308      	adds	r3, #8
 80016ae:	4a53      	ldr	r2, [pc, #332]	@ (80017fc <setLEDs+0x2a0>)
 80016b0:	211e      	movs	r1, #30
 80016b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 80016b6:	6a3b      	ldr	r3, [r7, #32]
 80016b8:	3301      	adds	r3, #1
 80016ba:	623b      	str	r3, [r7, #32]
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 80016be:	2b07      	cmp	r3, #7
 80016c0:	ddc2      	ble.n	8001648 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 80016c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c4:	3301      	adds	r3, #1
 80016c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80016c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	ddb9      	ble.n	8001642 <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 80016ce:	2380      	movs	r3, #128	@ 0x80
 80016d0:	61fb      	str	r3, [r7, #28]
 80016d2:	e007      	b.n	80016e4 <setLEDs+0x188>
					i++) {
				LED_PWM_Data_1[i] = 0;
 80016d4:	4a49      	ldr	r2, [pc, #292]	@ (80017fc <setLEDs+0x2a0>)
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	2100      	movs	r1, #0
 80016da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3301      	adds	r3, #1
 80016e2:	61fb      	str	r3, [r7, #28]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	2bb1      	cmp	r3, #177	@ 0xb1
 80016e8:	ddf4      	ble.n	80016d4 <setLEDs+0x178>
			}
			break;
 80016ea:	e0bc      	b.n	8001866 <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 80016ec:	2300      	movs	r3, #0
 80016ee:	61bb      	str	r3, [r7, #24]
 80016f0:	e042      	b.n	8001778 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	e039      	b.n	800176c <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80016f8:	493e      	ldr	r1, [pc, #248]	@ (80017f4 <setLEDs+0x298>)
 80016fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80016fc:	4613      	mov	r3, r2
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	4413      	add	r3, r2
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4413      	add	r3, r2
 8001706:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800170a:	2180      	movs	r1, #128	@ 0x80
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	fa41 f202 	asr.w	r2, r1, r2
 8001712:	4013      	ands	r3, r2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d013      	beq.n	8001740 <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	00da      	lsls	r2, r3, #3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	18d1      	adds	r1, r2, r3
 8001720:	4a33      	ldr	r2, [pc, #204]	@ (80017f0 <setLEDs+0x294>)
 8001722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	4413      	add	r3, r2
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	440b      	add	r3, r1
								+ 8] = 60;
 8001734:	3308      	adds	r3, #8
 8001736:	4a32      	ldr	r2, [pc, #200]	@ (8001800 <setLEDs+0x2a4>)
 8001738:	213c      	movs	r1, #60	@ 0x3c
 800173a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800173e:	e012      	b.n	8001766 <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	00da      	lsls	r2, r3, #3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	18d1      	adds	r1, r2, r3
 8001748:	4a29      	ldr	r2, [pc, #164]	@ (80017f0 <setLEDs+0x294>)
 800174a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	4413      	add	r3, r2
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	4613      	mov	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	4413      	add	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	440b      	add	r3, r1
								+ 8] = 30;
 800175c:	3308      	adds	r3, #8
 800175e:	4a28      	ldr	r2, [pc, #160]	@ (8001800 <setLEDs+0x2a4>)
 8001760:	211e      	movs	r1, #30
 8001762:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3301      	adds	r3, #1
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	2b07      	cmp	r3, #7
 8001770:	ddc2      	ble.n	80016f8 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	3301      	adds	r3, #1
 8001776:	61bb      	str	r3, [r7, #24]
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	2b02      	cmp	r3, #2
 800177c:	ddb9      	ble.n	80016f2 <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 800177e:	2338      	movs	r3, #56	@ 0x38
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	e007      	b.n	8001794 <setLEDs+0x238>
					i++) {
				LED_PWM_Data_2[i] = 0;
 8001784:	4a1e      	ldr	r2, [pc, #120]	@ (8001800 <setLEDs+0x2a4>)
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	2100      	movs	r1, #0
 800178a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	3301      	adds	r3, #1
 8001792:	613b      	str	r3, [r7, #16]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	2b69      	cmp	r3, #105	@ 0x69
 8001798:	ddf4      	ble.n	8001784 <setLEDs+0x228>
			}
			break;
 800179a:	e064      	b.n	8001866 <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	e04e      	b.n	8001840 <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 80017a2:	2300      	movs	r3, #0
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	e045      	b.n	8001834 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80017a8:	4912      	ldr	r1, [pc, #72]	@ (80017f4 <setLEDs+0x298>)
 80017aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80017ac:	4613      	mov	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4413      	add	r3, r2
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	4413      	add	r3, r2
 80017b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017ba:	2180      	movs	r1, #128	@ 0x80
 80017bc:	68ba      	ldr	r2, [r7, #8]
 80017be:	fa41 f202 	asr.w	r2, r1, r2
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d01f      	beq.n	8001808 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	00da      	lsls	r2, r3, #3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	18d1      	adds	r1, r2, r3
 80017d0:	4a07      	ldr	r2, [pc, #28]	@ (80017f0 <setLEDs+0x294>)
 80017d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	4413      	add	r3, r2
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4413      	add	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	440b      	add	r3, r1
								+ 8] = 60;
 80017e4:	3308      	adds	r3, #8
 80017e6:	4a07      	ldr	r2, [pc, #28]	@ (8001804 <setLEDs+0x2a8>)
 80017e8:	213c      	movs	r1, #60	@ 0x3c
 80017ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80017ee:	e01e      	b.n	800182e <setLEDs+0x2d2>
 80017f0:	080202e4 	.word	0x080202e4
 80017f4:	24000cc4 	.word	0x24000cc4
 80017f8:	240003e4 	.word	0x240003e4
 80017fc:	240006ac 	.word	0x240006ac
 8001800:	24000974 	.word	0x24000974
 8001804:	24000b1c 	.word	0x24000b1c
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	00da      	lsls	r2, r3, #3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	18d1      	adds	r1, r2, r3
 8001810:	4a26      	ldr	r2, [pc, #152]	@ (80018ac <setLEDs+0x350>)
 8001812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4413      	add	r3, r2
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	4613      	mov	r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	4413      	add	r3, r2
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	440b      	add	r3, r1
								+ 8] = 30;
 8001824:	3308      	adds	r3, #8
 8001826:	4a22      	ldr	r2, [pc, #136]	@ (80018b0 <setLEDs+0x354>)
 8001828:	211e      	movs	r1, #30
 800182a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	3301      	adds	r3, #1
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	2b07      	cmp	r3, #7
 8001838:	ddb6      	ble.n	80017a8 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	3301      	adds	r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2b02      	cmp	r3, #2
 8001844:	ddad      	ble.n	80017a2 <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8001846:	2338      	movs	r3, #56	@ 0x38
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	e007      	b.n	800185c <setLEDs+0x300>
					i++) {
				LED_PWM_Data_3[i] = 0;
 800184c:	4a18      	ldr	r2, [pc, #96]	@ (80018b0 <setLEDs+0x354>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2100      	movs	r1, #0
 8001852:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3301      	adds	r3, #1
 800185a:	607b      	str	r3, [r7, #4]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b69      	cmp	r3, #105	@ 0x69
 8001860:	ddf4      	ble.n	800184c <setLEDs+0x2f0>
			}
			break;
 8001862:	e000      	b.n	8001866 <setLEDs+0x30a>
		default:
			break;
 8001864:	bf00      	nop
			i++) {
 8001866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001868:	3301      	adds	r3, #1
 800186a:	637b      	str	r3, [r7, #52]	@ 0x34
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 800186c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800186e:	2b0d      	cmp	r3, #13
 8001870:	f77f ae7a 	ble.w	8001568 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0,
 8001874:	23b2      	movs	r3, #178	@ 0xb2
 8001876:	4a0f      	ldr	r2, [pc, #60]	@ (80018b4 <setLEDs+0x358>)
 8001878:	210c      	movs	r1, #12
 800187a:	480f      	ldr	r0, [pc, #60]	@ (80018b8 <setLEDs+0x35c>)
 800187c:	f00f f952 	bl	8010b24 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1,
 8001880:	23b2      	movs	r3, #178	@ 0xb2
 8001882:	4a0e      	ldr	r2, [pc, #56]	@ (80018bc <setLEDs+0x360>)
 8001884:	2108      	movs	r1, #8
 8001886:	480e      	ldr	r0, [pc, #56]	@ (80018c0 <setLEDs+0x364>)
 8001888:	f00f f94c 	bl	8010b24 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2,
 800188c:	236a      	movs	r3, #106	@ 0x6a
 800188e:	4a0d      	ldr	r2, [pc, #52]	@ (80018c4 <setLEDs+0x368>)
 8001890:	2104      	movs	r1, #4
 8001892:	480d      	ldr	r0, [pc, #52]	@ (80018c8 <setLEDs+0x36c>)
 8001894:	f00f f946 	bl	8010b24 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3,
 8001898:	236a      	movs	r3, #106	@ 0x6a
 800189a:	4a05      	ldr	r2, [pc, #20]	@ (80018b0 <setLEDs+0x354>)
 800189c:	2100      	movs	r1, #0
 800189e:	480a      	ldr	r0, [pc, #40]	@ (80018c8 <setLEDs+0x36c>)
 80018a0:	f00f f940 	bl	8010b24 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3

}
 80018a4:	bf00      	nop
 80018a6:	3738      	adds	r7, #56	@ 0x38
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	080202e4 	.word	0x080202e4
 80018b0:	24000b1c 	.word	0x24000b1c
 80018b4:	240003e4 	.word	0x240003e4
 80018b8:	24001328 	.word	0x24001328
 80018bc:	240006ac 	.word	0x240006ac
 80018c0:	24001244 	.word	0x24001244
 80018c4:	24000974 	.word	0x24000974
 80018c8:	24001290 	.word	0x24001290

080018cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b090      	sub	sp, #64	@ 0x40
 80018d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d2:	f002 fc0d 	bl	80040f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018d6:	f000 f881 	bl	80019dc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80018da:	f000 f8f7 	bl	8001acc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018de:	f000 fea3 	bl	8002628 <MX_GPIO_Init>
  MX_DMA_Init();
 80018e2:	f000 fe41 	bl	8002568 <MX_DMA_Init>
  MX_SPI3_Init();
 80018e6:	f000 fb77 	bl	8001fd8 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 80018ea:	f000 fa07 	bl	8001cfc <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 80018ee:	f000 fdef 	bl	80024d0 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80018f2:	f000 f91d 	bl	8001b30 <MX_ADC1_Init>
  MX_TIM4_Init();
 80018f6:	f000 fc81 	bl	80021fc <MX_TIM4_Init>
  MX_ADC3_Init();
 80018fa:	f000 f991 	bl	8001c20 <MX_ADC3_Init>
  MX_SPI2_Init();
 80018fe:	f000 fb15 	bl	8001f2c <MX_SPI2_Init>
  MX_I2C2_Init();
 8001902:	f000 fa5f 	bl	8001dc4 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001906:	f000 fbbd 	bl	8002084 <MX_TIM2_Init>
  MX_TIM5_Init();
 800190a:	f000 fcf3 	bl	80022f4 <MX_TIM5_Init>
  MX_TIM3_Init();
 800190e:	f000 fc11 	bl	8002134 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8001912:	f018 ffb5 	bl	801a880 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001916:	f000 fab3 	bl	8001e80 <MX_SPI1_Init>
  MX_UART4_Init();
 800191a:	f000 fd8d 	bl	8002438 <MX_UART4_Init>
  MX_FATFS_Init();
 800191e:	f013 fdd7 	bl	80154d0 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 8001922:	f000 fa8f 	bl	8001e44 <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 8001926:	f000 fd3f 	bl	80023a8 <MX_TIM13_Init>
  MX_TIM14_Init();
 800192a:	f000 fd61 	bl	80023f0 <MX_TIM14_Init>
  MX_RNG_Init();
 800192e:	f000 ffe5 	bl	80028fc <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
	char dummy[50];
	disarm(dummy);
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	4618      	mov	r0, r3
 8001936:	f001 f843 	bl	80029c0 <disarm>


	FR_Status = f_mount(&FatFs, SDPath, 1);
 800193a:	2201      	movs	r2, #1
 800193c:	491a      	ldr	r1, [pc, #104]	@ (80019a8 <main+0xdc>)
 800193e:	481b      	ldr	r0, [pc, #108]	@ (80019ac <main+0xe0>)
 8001940:	f018 f996 	bl	8019c70 <f_mount>
 8001944:	4603      	mov	r3, r0
 8001946:	461a      	mov	r2, r3
 8001948:	4b19      	ldr	r3, [pc, #100]	@ (80019b0 <main+0xe4>)
 800194a:	701a      	strb	r2, [r3, #0]

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800194c:	210c      	movs	r1, #12
 800194e:	4819      	ldr	r0, [pc, #100]	@ (80019b4 <main+0xe8>)
 8001950:	f00e ffcc 	bl	80108ec <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 8001954:	2201      	movs	r2, #1
 8001956:	2104      	movs	r1, #4
 8001958:	4817      	ldr	r0, [pc, #92]	@ (80019b8 <main+0xec>)
 800195a:	f007 fb59 	bl	8009010 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 800195e:	2201      	movs	r2, #1
 8001960:	2108      	movs	r1, #8
 8001962:	4815      	ldr	r0, [pc, #84]	@ (80019b8 <main+0xec>)
 8001964:	f007 fb54 	bl	8009010 <HAL_GPIO_WritePin>

	FR_Status = f_open(&Fil, "MyTextFile.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8001968:	220b      	movs	r2, #11
 800196a:	4914      	ldr	r1, [pc, #80]	@ (80019bc <main+0xf0>)
 800196c:	4814      	ldr	r0, [pc, #80]	@ (80019c0 <main+0xf4>)
 800196e:	f018 f9c5 	bl	8019cfc <f_open>
 8001972:	4603      	mov	r3, r0
 8001974:	461a      	mov	r2, r3
 8001976:	4b0e      	ldr	r3, [pc, #56]	@ (80019b0 <main+0xe4>)
 8001978:	701a      	strb	r2, [r3, #0]
	f_puts("testing 1 2\n", &Fil);
 800197a:	4911      	ldr	r1, [pc, #68]	@ (80019c0 <main+0xf4>)
 800197c:	4811      	ldr	r0, [pc, #68]	@ (80019c4 <main+0xf8>)
 800197e:	f018 fe38 	bl	801a5f2 <f_puts>
	f_close(&Fil);
 8001982:	480f      	ldr	r0, [pc, #60]	@ (80019c0 <main+0xf4>)
 8001984:	f018 fd94 	bl	801a4b0 <f_close>

	LoRA_begin(868000000);
 8001988:	480f      	ldr	r0, [pc, #60]	@ (80019c8 <main+0xfc>)
 800198a:	f7ff f9ab 	bl	8000ce4 <LoRA_begin>
	communicationHandler(
 800198e:	2300      	movs	r3, #0
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	4b0e      	ldr	r3, [pc, #56]	@ (80019cc <main+0x100>)
 8001994:	4a0e      	ldr	r2, [pc, #56]	@ (80019d0 <main+0x104>)
 8001996:	490f      	ldr	r1, [pc, #60]	@ (80019d4 <main+0x108>)
 8001998:	480f      	ldr	r0, [pc, #60]	@ (80019d8 <main+0x10c>)
 800199a:	f7ff fb8b 	bl	80010b4 <communicationHandler>
 800199e:	2300      	movs	r3, #0

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3738      	adds	r7, #56	@ 0x38
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	24003ec8 	.word	0x24003ec8
 80019ac:	2400178c 	.word	0x2400178c
 80019b0:	240037f4 	.word	0x240037f4
 80019b4:	240012dc 	.word	0x240012dc
 80019b8:	58021800 	.word	0x58021800
 80019bc:	080200ac 	.word	0x080200ac
 80019c0:	240027c4 	.word	0x240027c4
 80019c4:	080200bc 	.word	0x080200bc
 80019c8:	33bca100 	.word	0x33bca100
 80019cc:	08002c99 	.word	0x08002c99
 80019d0:	08002bed 	.word	0x08002bed
 80019d4:	08002bcd 	.word	0x08002bcd
 80019d8:	08002bb1 	.word	0x08002bb1

080019dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b09c      	sub	sp, #112	@ 0x70
 80019e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019e6:	224c      	movs	r2, #76	@ 0x4c
 80019e8:	2100      	movs	r1, #0
 80019ea:	4618      	mov	r0, r3
 80019ec:	f01b fa38 	bl	801ce60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	2220      	movs	r2, #32
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f01b fa32 	bl	801ce60 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80019fc:	2002      	movs	r0, #2
 80019fe:	f008 ff1b 	bl	800a838 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a02:	2300      	movs	r3, #0
 8001a04:	603b      	str	r3, [r7, #0]
 8001a06:	4b30      	ldr	r3, [pc, #192]	@ (8001ac8 <SystemClock_Config+0xec>)
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001a0e:	4a2e      	ldr	r2, [pc, #184]	@ (8001ac8 <SystemClock_Config+0xec>)
 8001a10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a14:	6193      	str	r3, [r2, #24]
 8001a16:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac8 <SystemClock_Config+0xec>)
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a1e:	603b      	str	r3, [r7, #0]
 8001a20:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001a22:	bf00      	nop
 8001a24:	4b28      	ldr	r3, [pc, #160]	@ (8001ac8 <SystemClock_Config+0xec>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a30:	d1f8      	bne.n	8001a24 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001a32:	2322      	movs	r3, #34	@ 0x22
 8001a34:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001a36:	2301      	movs	r3, #1
 8001a38:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001a3a:	2340      	movs	r3, #64	@ 0x40
 8001a3c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a42:	2302      	movs	r3, #2
 8001a44:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a46:	2300      	movs	r3, #0
 8001a48:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001a4e:	230c      	movs	r3, #12
 8001a50:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001a52:	2301      	movs	r3, #1
 8001a54:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001a56:	2303      	movs	r3, #3
 8001a58:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001a5e:	230c      	movs	r3, #12
 8001a60:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f008 ff2c 	bl	800a8cc <HAL_RCC_OscConfig>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001a7a:	f000 ff39 	bl	80028f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a7e:	233f      	movs	r3, #63	@ 0x3f
 8001a80:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a82:	2303      	movs	r3, #3
 8001a84:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001a8a:	2308      	movs	r3, #8
 8001a8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001a8e:	2340      	movs	r3, #64	@ 0x40
 8001a90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001a92:	2340      	movs	r3, #64	@ 0x40
 8001a94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001a96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a9a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001a9c:	2340      	movs	r3, #64	@ 0x40
 8001a9e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f009 faeb 	bl	800b080 <HAL_RCC_ClockConfig>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001ab0:	f000 ff1e 	bl	80028f0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001ab4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001ab8:	2100      	movs	r1, #0
 8001aba:	2000      	movs	r0, #0
 8001abc:	f009 fc96 	bl	800b3ec <HAL_RCC_MCOConfig>
}
 8001ac0:	bf00      	nop
 8001ac2:	3770      	adds	r7, #112	@ 0x70
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	58024800 	.word	0x58024800

08001acc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b0ae      	sub	sp, #184	@ 0xb8
 8001ad0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ad2:	463b      	mov	r3, r7
 8001ad4:	22b8      	movs	r2, #184	@ 0xb8
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f01b f9c1 	bl	801ce60 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8001ade:	f44f 2201 	mov.w	r2, #528384	@ 0x81000
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001aea:	2304      	movs	r3, #4
 8001aec:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001aee:	230c      	movs	r3, #12
 8001af0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001af2:	2304      	movs	r3, #4
 8001af4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001af6:	2302      	movs	r3, #2
 8001af8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001afa:	2302      	movs	r3, #2
 8001afc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001afe:	23c0      	movs	r3, #192	@ 0xc0
 8001b00:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001b0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001b10:	2300      	movs	r3, #0
 8001b12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b16:	463b      	mov	r3, r7
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f009 fea7 	bl	800b86c <HAL_RCCEx_PeriphCLKConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001b24:	f000 fee4 	bl	80028f0 <Error_Handler>
  }
}
 8001b28:	bf00      	nop
 8001b2a:	37b8      	adds	r7, #184	@ 0xb8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08c      	sub	sp, #48	@ 0x30
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001b36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b42:	463b      	mov	r3, r7
 8001b44:	2224      	movs	r2, #36	@ 0x24
 8001b46:	2100      	movs	r1, #0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f01b f989 	bl	801ce60 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b4e:	4b31      	ldr	r3, [pc, #196]	@ (8001c14 <MX_ADC1_Init+0xe4>)
 8001b50:	4a31      	ldr	r2, [pc, #196]	@ (8001c18 <MX_ADC1_Init+0xe8>)
 8001b52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001b54:	4b2f      	ldr	r3, [pc, #188]	@ (8001c14 <MX_ADC1_Init+0xe4>)
 8001b56:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8001b5a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001b5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001c14 <MX_ADC1_Init+0xe4>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b62:	4b2c      	ldr	r3, [pc, #176]	@ (8001c14 <MX_ADC1_Init+0xe4>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b68:	4b2a      	ldr	r3, [pc, #168]	@ (8001c14 <MX_ADC1_Init+0xe4>)
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b6e:	4b29      	ldr	r3, [pc, #164]	@ (8001c14 <MX_ADC1_Init+0xe4>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b74:	4b27      	ldr	r3, [pc, #156]	@ (8001c14 <MX_ADC1_Init+0xe4>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001b7a:	4b26      	ldr	r3, [pc, #152]	@ (8001c14 <MX_ADC1_Init+0xe4>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b80:	4b24      	ldr	r3, [pc, #144]	@ (8001c14 <MX_ADC1_Init+0xe4>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b88:	4b22      	ldr	r3, [pc, #136]	@ (8001c14 <MX_ADC1_Init+0xe4>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b8e:	4b21      	ldr	r3, [pc, #132]	@ (8001c14 <MX_ADC1_Init+0xe4>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001b94:	4b1f      	ldr	r3, [pc, #124]	@ (8001c14 <MX_ADC1_Init+0xe4>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c14 <MX_ADC1_Init+0xe4>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c14 <MX_ADC1_Init+0xe4>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001ba6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c14 <MX_ADC1_Init+0xe4>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bae:	4819      	ldr	r0, [pc, #100]	@ (8001c14 <MX_ADC1_Init+0xe4>)
 8001bb0:	f002 fe56 	bl	8004860 <HAL_ADC_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001bba:	f000 fe99 	bl	80028f0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4812      	ldr	r0, [pc, #72]	@ (8001c14 <MX_ADC1_Init+0xe4>)
 8001bca:	f004 fa37 	bl	800603c <HAL_ADCEx_MultiModeConfigChannel>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001bd4:	f000 fe8c 	bl	80028f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001bd8:	4b10      	ldr	r3, [pc, #64]	@ (8001c1c <MX_ADC1_Init+0xec>)
 8001bda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bdc:	2306      	movs	r3, #6
 8001bde:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001be0:	2303      	movs	r3, #3
 8001be2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001be4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001be8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001bea:	2304      	movs	r3, #4
 8001bec:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bf8:	463b      	mov	r3, r7
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4805      	ldr	r0, [pc, #20]	@ (8001c14 <MX_ADC1_Init+0xe4>)
 8001bfe:	f003 fa37 	bl	8005070 <HAL_ADC_ConfigChannel>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001c08:	f000 fe72 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c0c:	bf00      	nop
 8001c0e:	3730      	adds	r7, #48	@ 0x30
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	24000d6c 	.word	0x24000d6c
 8001c18:	40022000 	.word	0x40022000
 8001c1c:	3ac04000 	.word	0x3ac04000

08001c20 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	@ 0x28
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	2224      	movs	r2, #36	@ 0x24
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f01b f917 	bl	801ce60 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001c32:	4b2f      	ldr	r3, [pc, #188]	@ (8001cf0 <MX_ADC3_Init+0xd0>)
 8001c34:	4a2f      	ldr	r2, [pc, #188]	@ (8001cf4 <MX_ADC3_Init+0xd4>)
 8001c36:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001c38:	4b2d      	ldr	r3, [pc, #180]	@ (8001cf0 <MX_ADC3_Init+0xd0>)
 8001c3a:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8001c3e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001c40:	4b2b      	ldr	r3, [pc, #172]	@ (8001cf0 <MX_ADC3_Init+0xd0>)
 8001c42:	2208      	movs	r2, #8
 8001c44:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001c46:	4b2a      	ldr	r3, [pc, #168]	@ (8001cf0 <MX_ADC3_Init+0xd0>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c4c:	4b28      	ldr	r3, [pc, #160]	@ (8001cf0 <MX_ADC3_Init+0xd0>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c52:	4b27      	ldr	r3, [pc, #156]	@ (8001cf0 <MX_ADC3_Init+0xd0>)
 8001c54:	2204      	movs	r2, #4
 8001c56:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001c58:	4b25      	ldr	r3, [pc, #148]	@ (8001cf0 <MX_ADC3_Init+0xd0>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001c5e:	4b24      	ldr	r3, [pc, #144]	@ (8001cf0 <MX_ADC3_Init+0xd0>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001c64:	4b22      	ldr	r3, [pc, #136]	@ (8001cf0 <MX_ADC3_Init+0xd0>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001c6a:	4b21      	ldr	r3, [pc, #132]	@ (8001cf0 <MX_ADC3_Init+0xd0>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c72:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf0 <MX_ADC3_Init+0xd0>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c78:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf0 <MX_ADC3_Init+0xd0>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf0 <MX_ADC3_Init+0xd0>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001c86:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf0 <MX_ADC3_Init+0xd0>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001c8c:	4b18      	ldr	r3, [pc, #96]	@ (8001cf0 <MX_ADC3_Init+0xd0>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c92:	4b17      	ldr	r3, [pc, #92]	@ (8001cf0 <MX_ADC3_Init+0xd0>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001c98:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <MX_ADC3_Init+0xd0>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001c9e:	4b14      	ldr	r3, [pc, #80]	@ (8001cf0 <MX_ADC3_Init+0xd0>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001ca6:	4812      	ldr	r0, [pc, #72]	@ (8001cf0 <MX_ADC3_Init+0xd0>)
 8001ca8:	f002 fdda 	bl	8004860 <HAL_ADC_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001cb2:	f000 fe1d 	bl	80028f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001cb6:	4b10      	ldr	r3, [pc, #64]	@ (8001cf8 <MX_ADC3_Init+0xd8>)
 8001cb8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cba:	2306      	movs	r3, #6
 8001cbc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001cc2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001cc6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001cc8:	2304      	movs	r3, #4
 8001cca:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4805      	ldr	r0, [pc, #20]	@ (8001cf0 <MX_ADC3_Init+0xd0>)
 8001cda:	f003 f9c9 	bl	8005070 <HAL_ADC_ConfigChannel>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001ce4:	f000 fe04 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001ce8:	bf00      	nop
 8001cea:	3728      	adds	r7, #40	@ 0x28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	24000ddc 	.word	0x24000ddc
 8001cf4:	58026000 	.word	0x58026000
 8001cf8:	04300002 	.word	0x04300002

08001cfc <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001d00:	4b2e      	ldr	r3, [pc, #184]	@ (8001dbc <MX_FDCAN3_Init+0xc0>)
 8001d02:	4a2f      	ldr	r2, [pc, #188]	@ (8001dc0 <MX_FDCAN3_Init+0xc4>)
 8001d04:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001d06:	4b2d      	ldr	r3, [pc, #180]	@ (8001dbc <MX_FDCAN3_Init+0xc0>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001dbc <MX_FDCAN3_Init+0xc0>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001d12:	4b2a      	ldr	r3, [pc, #168]	@ (8001dbc <MX_FDCAN3_Init+0xc0>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001d18:	4b28      	ldr	r3, [pc, #160]	@ (8001dbc <MX_FDCAN3_Init+0xc0>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001d1e:	4b27      	ldr	r3, [pc, #156]	@ (8001dbc <MX_FDCAN3_Init+0xc0>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8001d24:	4b25      	ldr	r3, [pc, #148]	@ (8001dbc <MX_FDCAN3_Init+0xc0>)
 8001d26:	2210      	movs	r2, #16
 8001d28:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001d2a:	4b24      	ldr	r3, [pc, #144]	@ (8001dbc <MX_FDCAN3_Init+0xc0>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001d30:	4b22      	ldr	r3, [pc, #136]	@ (8001dbc <MX_FDCAN3_Init+0xc0>)
 8001d32:	2202      	movs	r2, #2
 8001d34:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001d36:	4b21      	ldr	r3, [pc, #132]	@ (8001dbc <MX_FDCAN3_Init+0xc0>)
 8001d38:	2202      	movs	r2, #2
 8001d3a:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dbc <MX_FDCAN3_Init+0xc0>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001d42:	4b1e      	ldr	r3, [pc, #120]	@ (8001dbc <MX_FDCAN3_Init+0xc0>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001d48:	4b1c      	ldr	r3, [pc, #112]	@ (8001dbc <MX_FDCAN3_Init+0xc0>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dbc <MX_FDCAN3_Init+0xc0>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001d54:	4b19      	ldr	r3, [pc, #100]	@ (8001dbc <MX_FDCAN3_Init+0xc0>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8001d5a:	4b18      	ldr	r3, [pc, #96]	@ (8001dbc <MX_FDCAN3_Init+0xc0>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001d60:	4b16      	ldr	r3, [pc, #88]	@ (8001dbc <MX_FDCAN3_Init+0xc0>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001d66:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <MX_FDCAN3_Init+0xc0>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001d6c:	4b13      	ldr	r3, [pc, #76]	@ (8001dbc <MX_FDCAN3_Init+0xc0>)
 8001d6e:	2204      	movs	r2, #4
 8001d70:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001d72:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <MX_FDCAN3_Init+0xc0>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001d78:	4b10      	ldr	r3, [pc, #64]	@ (8001dbc <MX_FDCAN3_Init+0xc0>)
 8001d7a:	2204      	movs	r2, #4
 8001d7c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001dbc <MX_FDCAN3_Init+0xc0>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001d84:	4b0d      	ldr	r3, [pc, #52]	@ (8001dbc <MX_FDCAN3_Init+0xc0>)
 8001d86:	2204      	movs	r2, #4
 8001d88:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001dbc <MX_FDCAN3_Init+0xc0>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001d90:	4b0a      	ldr	r3, [pc, #40]	@ (8001dbc <MX_FDCAN3_Init+0xc0>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001d96:	4b09      	ldr	r3, [pc, #36]	@ (8001dbc <MX_FDCAN3_Init+0xc0>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001d9c:	4b07      	ldr	r3, [pc, #28]	@ (8001dbc <MX_FDCAN3_Init+0xc0>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001da2:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <MX_FDCAN3_Init+0xc0>)
 8001da4:	2204      	movs	r2, #4
 8001da6:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001da8:	4804      	ldr	r0, [pc, #16]	@ (8001dbc <MX_FDCAN3_Init+0xc0>)
 8001daa:	f006 fc0d 	bl	80085c8 <HAL_FDCAN_Init>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001db4:	f000 fd9c 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001db8:	bf00      	nop
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	24000f3c 	.word	0x24000f3c
 8001dc0:	4000d400 	.word	0x4000d400

08001dc4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e38 <MX_I2C2_Init+0x74>)
 8001dca:	4a1c      	ldr	r2, [pc, #112]	@ (8001e3c <MX_I2C2_Init+0x78>)
 8001dcc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001dce:	4b1a      	ldr	r3, [pc, #104]	@ (8001e38 <MX_I2C2_Init+0x74>)
 8001dd0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e40 <MX_I2C2_Init+0x7c>)
 8001dd2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001dd4:	4b18      	ldr	r3, [pc, #96]	@ (8001e38 <MX_I2C2_Init+0x74>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dda:	4b17      	ldr	r3, [pc, #92]	@ (8001e38 <MX_I2C2_Init+0x74>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001de0:	4b15      	ldr	r3, [pc, #84]	@ (8001e38 <MX_I2C2_Init+0x74>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001de6:	4b14      	ldr	r3, [pc, #80]	@ (8001e38 <MX_I2C2_Init+0x74>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001dec:	4b12      	ldr	r3, [pc, #72]	@ (8001e38 <MX_I2C2_Init+0x74>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001df2:	4b11      	ldr	r3, [pc, #68]	@ (8001e38 <MX_I2C2_Init+0x74>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001df8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e38 <MX_I2C2_Init+0x74>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001dfe:	480e      	ldr	r0, [pc, #56]	@ (8001e38 <MX_I2C2_Init+0x74>)
 8001e00:	f007 f920 	bl	8009044 <HAL_I2C_Init>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001e0a:	f000 fd71 	bl	80028f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e0e:	2100      	movs	r1, #0
 8001e10:	4809      	ldr	r0, [pc, #36]	@ (8001e38 <MX_I2C2_Init+0x74>)
 8001e12:	f007 f9c1 	bl	8009198 <HAL_I2CEx_ConfigAnalogFilter>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001e1c:	f000 fd68 	bl	80028f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001e20:	2100      	movs	r1, #0
 8001e22:	4805      	ldr	r0, [pc, #20]	@ (8001e38 <MX_I2C2_Init+0x74>)
 8001e24:	f007 fa03 	bl	800922e <HAL_I2CEx_ConfigDigitalFilter>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001e2e:	f000 fd5f 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	24000fdc 	.word	0x24000fdc
 8001e3c:	40005800 	.word	0x40005800
 8001e40:	20303e5d 	.word	0x20303e5d

08001e44 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8001e48:	4b0b      	ldr	r3, [pc, #44]	@ (8001e78 <MX_SDMMC2_SD_Init+0x34>)
 8001e4a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e7c <MX_SDMMC2_SD_Init+0x38>)
 8001e4c:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e78 <MX_SDMMC2_SD_Init+0x34>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001e54:	4b08      	ldr	r3, [pc, #32]	@ (8001e78 <MX_SDMMC2_SD_Init+0x34>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001e5a:	4b07      	ldr	r3, [pc, #28]	@ (8001e78 <MX_SDMMC2_SD_Init+0x34>)
 8001e5c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e60:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001e62:	4b05      	ldr	r3, [pc, #20]	@ (8001e78 <MX_SDMMC2_SD_Init+0x34>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 8;
 8001e68:	4b03      	ldr	r3, [pc, #12]	@ (8001e78 <MX_SDMMC2_SD_Init+0x34>)
 8001e6a:	2208      	movs	r2, #8
 8001e6c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	24001030 	.word	0x24001030
 8001e7c:	48022400 	.word	0x48022400

08001e80 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e84:	4b27      	ldr	r3, [pc, #156]	@ (8001f24 <MX_SPI1_Init+0xa4>)
 8001e86:	4a28      	ldr	r2, [pc, #160]	@ (8001f28 <MX_SPI1_Init+0xa8>)
 8001e88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e8a:	4b26      	ldr	r3, [pc, #152]	@ (8001f24 <MX_SPI1_Init+0xa4>)
 8001e8c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001e90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e92:	4b24      	ldr	r3, [pc, #144]	@ (8001f24 <MX_SPI1_Init+0xa4>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e98:	4b22      	ldr	r3, [pc, #136]	@ (8001f24 <MX_SPI1_Init+0xa4>)
 8001e9a:	2207      	movs	r2, #7
 8001e9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e9e:	4b21      	ldr	r3, [pc, #132]	@ (8001f24 <MX_SPI1_Init+0xa4>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f24 <MX_SPI1_Init+0xa4>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8001f24 <MX_SPI1_Init+0xa4>)
 8001eac:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001eb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001eb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f24 <MX_SPI1_Init+0xa4>)
 8001eb4:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8001eb8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001eba:	4b1a      	ldr	r3, [pc, #104]	@ (8001f24 <MX_SPI1_Init+0xa4>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ec0:	4b18      	ldr	r3, [pc, #96]	@ (8001f24 <MX_SPI1_Init+0xa4>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ec6:	4b17      	ldr	r3, [pc, #92]	@ (8001f24 <MX_SPI1_Init+0xa4>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001ecc:	4b15      	ldr	r3, [pc, #84]	@ (8001f24 <MX_SPI1_Init+0xa4>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ed2:	4b14      	ldr	r3, [pc, #80]	@ (8001f24 <MX_SPI1_Init+0xa4>)
 8001ed4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ed8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001eda:	4b12      	ldr	r3, [pc, #72]	@ (8001f24 <MX_SPI1_Init+0xa4>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001ee0:	4b10      	ldr	r3, [pc, #64]	@ (8001f24 <MX_SPI1_Init+0xa4>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8001f24 <MX_SPI1_Init+0xa4>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001eec:	4b0d      	ldr	r3, [pc, #52]	@ (8001f24 <MX_SPI1_Init+0xa4>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8001f24 <MX_SPI1_Init+0xa4>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8001f24 <MX_SPI1_Init+0xa4>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001efe:	4b09      	ldr	r3, [pc, #36]	@ (8001f24 <MX_SPI1_Init+0xa4>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001f04:	4b07      	ldr	r3, [pc, #28]	@ (8001f24 <MX_SPI1_Init+0xa4>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001f0a:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <MX_SPI1_Init+0xa4>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f10:	4804      	ldr	r0, [pc, #16]	@ (8001f24 <MX_SPI1_Init+0xa4>)
 8001f12:	f00d fea3 	bl	800fc5c <HAL_SPI_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001f1c:	f000 fce8 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	240010ac 	.word	0x240010ac
 8001f28:	40013000 	.word	0x40013000

08001f2c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f30:	4b27      	ldr	r3, [pc, #156]	@ (8001fd0 <MX_SPI2_Init+0xa4>)
 8001f32:	4a28      	ldr	r2, [pc, #160]	@ (8001fd4 <MX_SPI2_Init+0xa8>)
 8001f34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f36:	4b26      	ldr	r3, [pc, #152]	@ (8001fd0 <MX_SPI2_Init+0xa4>)
 8001f38:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001f3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f3e:	4b24      	ldr	r3, [pc, #144]	@ (8001fd0 <MX_SPI2_Init+0xa4>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f44:	4b22      	ldr	r3, [pc, #136]	@ (8001fd0 <MX_SPI2_Init+0xa4>)
 8001f46:	2207      	movs	r2, #7
 8001f48:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f4a:	4b21      	ldr	r3, [pc, #132]	@ (8001fd0 <MX_SPI2_Init+0xa4>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f50:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd0 <MX_SPI2_Init+0xa4>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f56:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd0 <MX_SPI2_Init+0xa4>)
 8001f58:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001f5c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd0 <MX_SPI2_Init+0xa4>)
 8001f60:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001f64:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f66:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd0 <MX_SPI2_Init+0xa4>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f6c:	4b18      	ldr	r3, [pc, #96]	@ (8001fd0 <MX_SPI2_Init+0xa4>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f72:	4b17      	ldr	r3, [pc, #92]	@ (8001fd0 <MX_SPI2_Init+0xa4>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001f78:	4b15      	ldr	r3, [pc, #84]	@ (8001fd0 <MX_SPI2_Init+0xa4>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f7e:	4b14      	ldr	r3, [pc, #80]	@ (8001fd0 <MX_SPI2_Init+0xa4>)
 8001f80:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f84:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001f86:	4b12      	ldr	r3, [pc, #72]	@ (8001fd0 <MX_SPI2_Init+0xa4>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001f8c:	4b10      	ldr	r3, [pc, #64]	@ (8001fd0 <MX_SPI2_Init+0xa4>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f92:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd0 <MX_SPI2_Init+0xa4>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f98:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd0 <MX_SPI2_Init+0xa4>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd0 <MX_SPI2_Init+0xa4>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd0 <MX_SPI2_Init+0xa4>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001faa:	4b09      	ldr	r3, [pc, #36]	@ (8001fd0 <MX_SPI2_Init+0xa4>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001fb0:	4b07      	ldr	r3, [pc, #28]	@ (8001fd0 <MX_SPI2_Init+0xa4>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001fb6:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <MX_SPI2_Init+0xa4>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001fbc:	4804      	ldr	r0, [pc, #16]	@ (8001fd0 <MX_SPI2_Init+0xa4>)
 8001fbe:	f00d fe4d 	bl	800fc5c <HAL_SPI_Init>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001fc8:	f000 fc92 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	24001134 	.word	0x24001134
 8001fd4:	40003800 	.word	0x40003800

08001fd8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001fdc:	4b27      	ldr	r3, [pc, #156]	@ (800207c <MX_SPI3_Init+0xa4>)
 8001fde:	4a28      	ldr	r2, [pc, #160]	@ (8002080 <MX_SPI3_Init+0xa8>)
 8001fe0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001fe2:	4b26      	ldr	r3, [pc, #152]	@ (800207c <MX_SPI3_Init+0xa4>)
 8001fe4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001fe8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001fea:	4b24      	ldr	r3, [pc, #144]	@ (800207c <MX_SPI3_Init+0xa4>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ff0:	4b22      	ldr	r3, [pc, #136]	@ (800207c <MX_SPI3_Init+0xa4>)
 8001ff2:	2207      	movs	r2, #7
 8001ff4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ff6:	4b21      	ldr	r3, [pc, #132]	@ (800207c <MX_SPI3_Init+0xa4>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800207c <MX_SPI3_Init+0xa4>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002002:	4b1e      	ldr	r3, [pc, #120]	@ (800207c <MX_SPI3_Init+0xa4>)
 8002004:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002008:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800200a:	4b1c      	ldr	r3, [pc, #112]	@ (800207c <MX_SPI3_Init+0xa4>)
 800200c:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8002010:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002012:	4b1a      	ldr	r3, [pc, #104]	@ (800207c <MX_SPI3_Init+0xa4>)
 8002014:	2200      	movs	r2, #0
 8002016:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002018:	4b18      	ldr	r3, [pc, #96]	@ (800207c <MX_SPI3_Init+0xa4>)
 800201a:	2200      	movs	r2, #0
 800201c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800201e:	4b17      	ldr	r3, [pc, #92]	@ (800207c <MX_SPI3_Init+0xa4>)
 8002020:	2200      	movs	r2, #0
 8002022:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8002024:	4b15      	ldr	r3, [pc, #84]	@ (800207c <MX_SPI3_Init+0xa4>)
 8002026:	2200      	movs	r2, #0
 8002028:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800202a:	4b14      	ldr	r3, [pc, #80]	@ (800207c <MX_SPI3_Init+0xa4>)
 800202c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002030:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002032:	4b12      	ldr	r3, [pc, #72]	@ (800207c <MX_SPI3_Init+0xa4>)
 8002034:	2200      	movs	r2, #0
 8002036:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002038:	4b10      	ldr	r3, [pc, #64]	@ (800207c <MX_SPI3_Init+0xa4>)
 800203a:	2200      	movs	r2, #0
 800203c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800203e:	4b0f      	ldr	r3, [pc, #60]	@ (800207c <MX_SPI3_Init+0xa4>)
 8002040:	2200      	movs	r2, #0
 8002042:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002044:	4b0d      	ldr	r3, [pc, #52]	@ (800207c <MX_SPI3_Init+0xa4>)
 8002046:	2200      	movs	r2, #0
 8002048:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800204a:	4b0c      	ldr	r3, [pc, #48]	@ (800207c <MX_SPI3_Init+0xa4>)
 800204c:	2200      	movs	r2, #0
 800204e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002050:	4b0a      	ldr	r3, [pc, #40]	@ (800207c <MX_SPI3_Init+0xa4>)
 8002052:	2200      	movs	r2, #0
 8002054:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002056:	4b09      	ldr	r3, [pc, #36]	@ (800207c <MX_SPI3_Init+0xa4>)
 8002058:	2200      	movs	r2, #0
 800205a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800205c:	4b07      	ldr	r3, [pc, #28]	@ (800207c <MX_SPI3_Init+0xa4>)
 800205e:	2200      	movs	r2, #0
 8002060:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002062:	4b06      	ldr	r3, [pc, #24]	@ (800207c <MX_SPI3_Init+0xa4>)
 8002064:	2200      	movs	r2, #0
 8002066:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002068:	4804      	ldr	r0, [pc, #16]	@ (800207c <MX_SPI3_Init+0xa4>)
 800206a:	f00d fdf7 	bl	800fc5c <HAL_SPI_Init>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8002074:	f000 fc3c 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}
 800207c:	240011bc 	.word	0x240011bc
 8002080:	40003c00 	.word	0x40003c00

08002084 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	@ 0x28
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800208a:	f107 031c 	add.w	r3, r7, #28
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	605a      	str	r2, [r3, #4]
 8002094:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002096:	463b      	mov	r3, r7
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
 80020a4:	615a      	str	r2, [r3, #20]
 80020a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020a8:	4b21      	ldr	r3, [pc, #132]	@ (8002130 <MX_TIM2_Init+0xac>)
 80020aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80020b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002130 <MX_TIM2_Init+0xac>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002130 <MX_TIM2_Init+0xac>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 80020bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002130 <MX_TIM2_Init+0xac>)
 80020be:	225a      	movs	r2, #90	@ 0x5a
 80020c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002130 <MX_TIM2_Init+0xac>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c8:	4b19      	ldr	r3, [pc, #100]	@ (8002130 <MX_TIM2_Init+0xac>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020ce:	4818      	ldr	r0, [pc, #96]	@ (8002130 <MX_TIM2_Init+0xac>)
 80020d0:	f00e fbb4 	bl	801083c <HAL_TIM_PWM_Init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80020da:	f000 fc09 	bl	80028f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020e6:	f107 031c 	add.w	r3, r7, #28
 80020ea:	4619      	mov	r1, r3
 80020ec:	4810      	ldr	r0, [pc, #64]	@ (8002130 <MX_TIM2_Init+0xac>)
 80020ee:	f00f fe3b 	bl	8011d68 <HAL_TIMEx_MasterConfigSynchronization>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80020f8:	f000 fbfa 	bl	80028f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020fc:	2360      	movs	r3, #96	@ 0x60
 80020fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002104:	2300      	movs	r3, #0
 8002106:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002108:	2300      	movs	r3, #0
 800210a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800210c:	463b      	mov	r3, r7
 800210e:	2208      	movs	r2, #8
 8002110:	4619      	mov	r1, r3
 8002112:	4807      	ldr	r0, [pc, #28]	@ (8002130 <MX_TIM2_Init+0xac>)
 8002114:	f00f f85a 	bl	80111cc <HAL_TIM_PWM_ConfigChannel>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800211e:	f000 fbe7 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002122:	4803      	ldr	r0, [pc, #12]	@ (8002130 <MX_TIM2_Init+0xac>)
 8002124:	f001 fc60 	bl	80039e8 <HAL_TIM_MspPostInit>

}
 8002128:	bf00      	nop
 800212a:	3728      	adds	r7, #40	@ 0x28
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	24001244 	.word	0x24001244

08002134 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08a      	sub	sp, #40	@ 0x28
 8002138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800213a:	f107 031c 	add.w	r3, r7, #28
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	605a      	str	r2, [r3, #4]
 8002144:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002146:	463b      	mov	r3, r7
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
 8002154:	615a      	str	r2, [r3, #20]
 8002156:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002158:	4b26      	ldr	r3, [pc, #152]	@ (80021f4 <MX_TIM3_Init+0xc0>)
 800215a:	4a27      	ldr	r2, [pc, #156]	@ (80021f8 <MX_TIM3_Init+0xc4>)
 800215c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800215e:	4b25      	ldr	r3, [pc, #148]	@ (80021f4 <MX_TIM3_Init+0xc0>)
 8002160:	2200      	movs	r2, #0
 8002162:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002164:	4b23      	ldr	r3, [pc, #140]	@ (80021f4 <MX_TIM3_Init+0xc0>)
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 800216a:	4b22      	ldr	r3, [pc, #136]	@ (80021f4 <MX_TIM3_Init+0xc0>)
 800216c:	225a      	movs	r2, #90	@ 0x5a
 800216e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002170:	4b20      	ldr	r3, [pc, #128]	@ (80021f4 <MX_TIM3_Init+0xc0>)
 8002172:	2200      	movs	r2, #0
 8002174:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002176:	4b1f      	ldr	r3, [pc, #124]	@ (80021f4 <MX_TIM3_Init+0xc0>)
 8002178:	2200      	movs	r2, #0
 800217a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800217c:	481d      	ldr	r0, [pc, #116]	@ (80021f4 <MX_TIM3_Init+0xc0>)
 800217e:	f00e fb5d 	bl	801083c <HAL_TIM_PWM_Init>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002188:	f000 fbb2 	bl	80028f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800218c:	2300      	movs	r3, #0
 800218e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002190:	2300      	movs	r3, #0
 8002192:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002194:	f107 031c 	add.w	r3, r7, #28
 8002198:	4619      	mov	r1, r3
 800219a:	4816      	ldr	r0, [pc, #88]	@ (80021f4 <MX_TIM3_Init+0xc0>)
 800219c:	f00f fde4 	bl	8011d68 <HAL_TIMEx_MasterConfigSynchronization>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80021a6:	f000 fba3 	bl	80028f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021aa:	2360      	movs	r3, #96	@ 0x60
 80021ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021ba:	463b      	mov	r3, r7
 80021bc:	2200      	movs	r2, #0
 80021be:	4619      	mov	r1, r3
 80021c0:	480c      	ldr	r0, [pc, #48]	@ (80021f4 <MX_TIM3_Init+0xc0>)
 80021c2:	f00f f803 	bl	80111cc <HAL_TIM_PWM_ConfigChannel>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80021cc:	f000 fb90 	bl	80028f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021d0:	463b      	mov	r3, r7
 80021d2:	2204      	movs	r2, #4
 80021d4:	4619      	mov	r1, r3
 80021d6:	4807      	ldr	r0, [pc, #28]	@ (80021f4 <MX_TIM3_Init+0xc0>)
 80021d8:	f00e fff8 	bl	80111cc <HAL_TIM_PWM_ConfigChannel>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80021e2:	f000 fb85 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80021e6:	4803      	ldr	r0, [pc, #12]	@ (80021f4 <MX_TIM3_Init+0xc0>)
 80021e8:	f001 fbfe 	bl	80039e8 <HAL_TIM_MspPostInit>

}
 80021ec:	bf00      	nop
 80021ee:	3728      	adds	r7, #40	@ 0x28
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	24001290 	.word	0x24001290
 80021f8:	40000400 	.word	0x40000400

080021fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	@ 0x28
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002202:	f107 031c 	add.w	r3, r7, #28
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800220e:	463b      	mov	r3, r7
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
 800221c:	615a      	str	r2, [r3, #20]
 800221e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002220:	4b32      	ldr	r3, [pc, #200]	@ (80022ec <MX_TIM4_Init+0xf0>)
 8002222:	4a33      	ldr	r2, [pc, #204]	@ (80022f0 <MX_TIM4_Init+0xf4>)
 8002224:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 29;
 8002226:	4b31      	ldr	r3, [pc, #196]	@ (80022ec <MX_TIM4_Init+0xf0>)
 8002228:	221d      	movs	r2, #29
 800222a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800222c:	4b2f      	ldr	r3, [pc, #188]	@ (80022ec <MX_TIM4_Init+0xf0>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002232:	4b2e      	ldr	r3, [pc, #184]	@ (80022ec <MX_TIM4_Init+0xf0>)
 8002234:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002238:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800223a:	4b2c      	ldr	r3, [pc, #176]	@ (80022ec <MX_TIM4_Init+0xf0>)
 800223c:	2200      	movs	r2, #0
 800223e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002240:	4b2a      	ldr	r3, [pc, #168]	@ (80022ec <MX_TIM4_Init+0xf0>)
 8002242:	2200      	movs	r2, #0
 8002244:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002246:	4829      	ldr	r0, [pc, #164]	@ (80022ec <MX_TIM4_Init+0xf0>)
 8002248:	f00e faf8 	bl	801083c <HAL_TIM_PWM_Init>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002252:	f000 fb4d 	bl	80028f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002256:	2300      	movs	r3, #0
 8002258:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800225a:	2300      	movs	r3, #0
 800225c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800225e:	f107 031c 	add.w	r3, r7, #28
 8002262:	4619      	mov	r1, r3
 8002264:	4821      	ldr	r0, [pc, #132]	@ (80022ec <MX_TIM4_Init+0xf0>)
 8002266:	f00f fd7f 	bl	8011d68 <HAL_TIMEx_MasterConfigSynchronization>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002270:	f000 fb3e 	bl	80028f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002274:	2360      	movs	r3, #96	@ 0x60
 8002276:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800227c:	2300      	movs	r3, #0
 800227e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002280:	2300      	movs	r3, #0
 8002282:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002284:	463b      	mov	r3, r7
 8002286:	2200      	movs	r2, #0
 8002288:	4619      	mov	r1, r3
 800228a:	4818      	ldr	r0, [pc, #96]	@ (80022ec <MX_TIM4_Init+0xf0>)
 800228c:	f00e ff9e 	bl	80111cc <HAL_TIM_PWM_ConfigChannel>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002296:	f000 fb2b 	bl	80028f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800229a:	463b      	mov	r3, r7
 800229c:	2204      	movs	r2, #4
 800229e:	4619      	mov	r1, r3
 80022a0:	4812      	ldr	r0, [pc, #72]	@ (80022ec <MX_TIM4_Init+0xf0>)
 80022a2:	f00e ff93 	bl	80111cc <HAL_TIM_PWM_ConfigChannel>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80022ac:	f000 fb20 	bl	80028f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022b0:	463b      	mov	r3, r7
 80022b2:	2208      	movs	r2, #8
 80022b4:	4619      	mov	r1, r3
 80022b6:	480d      	ldr	r0, [pc, #52]	@ (80022ec <MX_TIM4_Init+0xf0>)
 80022b8:	f00e ff88 	bl	80111cc <HAL_TIM_PWM_ConfigChannel>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80022c2:	f000 fb15 	bl	80028f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022c6:	463b      	mov	r3, r7
 80022c8:	220c      	movs	r2, #12
 80022ca:	4619      	mov	r1, r3
 80022cc:	4807      	ldr	r0, [pc, #28]	@ (80022ec <MX_TIM4_Init+0xf0>)
 80022ce:	f00e ff7d 	bl	80111cc <HAL_TIM_PWM_ConfigChannel>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80022d8:	f000 fb0a 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80022dc:	4803      	ldr	r0, [pc, #12]	@ (80022ec <MX_TIM4_Init+0xf0>)
 80022de:	f001 fb83 	bl	80039e8 <HAL_TIM_MspPostInit>

}
 80022e2:	bf00      	nop
 80022e4:	3728      	adds	r7, #40	@ 0x28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	240012dc 	.word	0x240012dc
 80022f0:	40000800 	.word	0x40000800

080022f4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08a      	sub	sp, #40	@ 0x28
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022fa:	f107 031c 	add.w	r3, r7, #28
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	605a      	str	r2, [r3, #4]
 8002304:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002306:	463b      	mov	r3, r7
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	611a      	str	r2, [r3, #16]
 8002314:	615a      	str	r2, [r3, #20]
 8002316:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002318:	4b21      	ldr	r3, [pc, #132]	@ (80023a0 <MX_TIM5_Init+0xac>)
 800231a:	4a22      	ldr	r2, [pc, #136]	@ (80023a4 <MX_TIM5_Init+0xb0>)
 800231c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800231e:	4b20      	ldr	r3, [pc, #128]	@ (80023a0 <MX_TIM5_Init+0xac>)
 8002320:	2200      	movs	r2, #0
 8002322:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002324:	4b1e      	ldr	r3, [pc, #120]	@ (80023a0 <MX_TIM5_Init+0xac>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 800232a:	4b1d      	ldr	r3, [pc, #116]	@ (80023a0 <MX_TIM5_Init+0xac>)
 800232c:	225a      	movs	r2, #90	@ 0x5a
 800232e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002330:	4b1b      	ldr	r3, [pc, #108]	@ (80023a0 <MX_TIM5_Init+0xac>)
 8002332:	2200      	movs	r2, #0
 8002334:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002336:	4b1a      	ldr	r3, [pc, #104]	@ (80023a0 <MX_TIM5_Init+0xac>)
 8002338:	2200      	movs	r2, #0
 800233a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800233c:	4818      	ldr	r0, [pc, #96]	@ (80023a0 <MX_TIM5_Init+0xac>)
 800233e:	f00e fa7d 	bl	801083c <HAL_TIM_PWM_Init>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002348:	f000 fad2 	bl	80028f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800234c:	2300      	movs	r3, #0
 800234e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002350:	2300      	movs	r3, #0
 8002352:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002354:	f107 031c 	add.w	r3, r7, #28
 8002358:	4619      	mov	r1, r3
 800235a:	4811      	ldr	r0, [pc, #68]	@ (80023a0 <MX_TIM5_Init+0xac>)
 800235c:	f00f fd04 	bl	8011d68 <HAL_TIMEx_MasterConfigSynchronization>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002366:	f000 fac3 	bl	80028f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800236a:	2360      	movs	r3, #96	@ 0x60
 800236c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002372:	2300      	movs	r3, #0
 8002374:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002376:	2300      	movs	r3, #0
 8002378:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800237a:	463b      	mov	r3, r7
 800237c:	220c      	movs	r2, #12
 800237e:	4619      	mov	r1, r3
 8002380:	4807      	ldr	r0, [pc, #28]	@ (80023a0 <MX_TIM5_Init+0xac>)
 8002382:	f00e ff23 	bl	80111cc <HAL_TIM_PWM_ConfigChannel>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 800238c:	f000 fab0 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002390:	4803      	ldr	r0, [pc, #12]	@ (80023a0 <MX_TIM5_Init+0xac>)
 8002392:	f001 fb29 	bl	80039e8 <HAL_TIM_MspPostInit>

}
 8002396:	bf00      	nop
 8002398:	3728      	adds	r7, #40	@ 0x28
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	24001328 	.word	0x24001328
 80023a4:	40000c00 	.word	0x40000c00

080023a8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80023ac:	4b0e      	ldr	r3, [pc, #56]	@ (80023e8 <MX_TIM13_Init+0x40>)
 80023ae:	4a0f      	ldr	r2, [pc, #60]	@ (80023ec <MX_TIM13_Init+0x44>)
 80023b0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 99;
 80023b2:	4b0d      	ldr	r3, [pc, #52]	@ (80023e8 <MX_TIM13_Init+0x40>)
 80023b4:	2263      	movs	r2, #99	@ 0x63
 80023b6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b8:	4b0b      	ldr	r3, [pc, #44]	@ (80023e8 <MX_TIM13_Init+0x40>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80023be:	4b0a      	ldr	r3, [pc, #40]	@ (80023e8 <MX_TIM13_Init+0x40>)
 80023c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023c4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c6:	4b08      	ldr	r3, [pc, #32]	@ (80023e8 <MX_TIM13_Init+0x40>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023cc:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <MX_TIM13_Init+0x40>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80023d2:	4805      	ldr	r0, [pc, #20]	@ (80023e8 <MX_TIM13_Init+0x40>)
 80023d4:	f00e f9db 	bl	801078e <HAL_TIM_Base_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80023de:	f000 fa87 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	24001374 	.word	0x24001374
 80023ec:	40001c00 	.word	0x40001c00

080023f0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80023f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002430 <MX_TIM14_Init+0x40>)
 80023f6:	4a0f      	ldr	r2, [pc, #60]	@ (8002434 <MX_TIM14_Init+0x44>)
 80023f8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 99;
 80023fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002430 <MX_TIM14_Init+0x40>)
 80023fc:	2263      	movs	r2, #99	@ 0x63
 80023fe:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002400:	4b0b      	ldr	r3, [pc, #44]	@ (8002430 <MX_TIM14_Init+0x40>)
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8002406:	4b0a      	ldr	r3, [pc, #40]	@ (8002430 <MX_TIM14_Init+0x40>)
 8002408:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800240c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800240e:	4b08      	ldr	r3, [pc, #32]	@ (8002430 <MX_TIM14_Init+0x40>)
 8002410:	2200      	movs	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002414:	4b06      	ldr	r3, [pc, #24]	@ (8002430 <MX_TIM14_Init+0x40>)
 8002416:	2200      	movs	r2, #0
 8002418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800241a:	4805      	ldr	r0, [pc, #20]	@ (8002430 <MX_TIM14_Init+0x40>)
 800241c:	f00e f9b7 	bl	801078e <HAL_TIM_Base_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8002426:	f000 fa63 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	240013c0 	.word	0x240013c0
 8002434:	40002000 	.word	0x40002000

08002438 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800243c:	4b22      	ldr	r3, [pc, #136]	@ (80024c8 <MX_UART4_Init+0x90>)
 800243e:	4a23      	ldr	r2, [pc, #140]	@ (80024cc <MX_UART4_Init+0x94>)
 8002440:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002442:	4b21      	ldr	r3, [pc, #132]	@ (80024c8 <MX_UART4_Init+0x90>)
 8002444:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002448:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800244a:	4b1f      	ldr	r3, [pc, #124]	@ (80024c8 <MX_UART4_Init+0x90>)
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002450:	4b1d      	ldr	r3, [pc, #116]	@ (80024c8 <MX_UART4_Init+0x90>)
 8002452:	2200      	movs	r2, #0
 8002454:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002456:	4b1c      	ldr	r3, [pc, #112]	@ (80024c8 <MX_UART4_Init+0x90>)
 8002458:	2200      	movs	r2, #0
 800245a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800245c:	4b1a      	ldr	r3, [pc, #104]	@ (80024c8 <MX_UART4_Init+0x90>)
 800245e:	220c      	movs	r2, #12
 8002460:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002462:	4b19      	ldr	r3, [pc, #100]	@ (80024c8 <MX_UART4_Init+0x90>)
 8002464:	2200      	movs	r2, #0
 8002466:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002468:	4b17      	ldr	r3, [pc, #92]	@ (80024c8 <MX_UART4_Init+0x90>)
 800246a:	2200      	movs	r2, #0
 800246c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800246e:	4b16      	ldr	r3, [pc, #88]	@ (80024c8 <MX_UART4_Init+0x90>)
 8002470:	2200      	movs	r2, #0
 8002472:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002474:	4b14      	ldr	r3, [pc, #80]	@ (80024c8 <MX_UART4_Init+0x90>)
 8002476:	2200      	movs	r2, #0
 8002478:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800247a:	4b13      	ldr	r3, [pc, #76]	@ (80024c8 <MX_UART4_Init+0x90>)
 800247c:	2200      	movs	r2, #0
 800247e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002480:	4811      	ldr	r0, [pc, #68]	@ (80024c8 <MX_UART4_Init+0x90>)
 8002482:	f00f fd2b 	bl	8011edc <HAL_UART_Init>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800248c:	f000 fa30 	bl	80028f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002490:	2100      	movs	r1, #0
 8002492:	480d      	ldr	r0, [pc, #52]	@ (80024c8 <MX_UART4_Init+0x90>)
 8002494:	f010 fe31 	bl	80130fa <HAL_UARTEx_SetTxFifoThreshold>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800249e:	f000 fa27 	bl	80028f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024a2:	2100      	movs	r1, #0
 80024a4:	4808      	ldr	r0, [pc, #32]	@ (80024c8 <MX_UART4_Init+0x90>)
 80024a6:	f010 fe66 	bl	8013176 <HAL_UARTEx_SetRxFifoThreshold>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80024b0:	f000 fa1e 	bl	80028f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80024b4:	4804      	ldr	r0, [pc, #16]	@ (80024c8 <MX_UART4_Init+0x90>)
 80024b6:	f010 fde7 	bl	8013088 <HAL_UARTEx_DisableFifoMode>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80024c0:	f000 fa16 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80024c4:	bf00      	nop
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	24001664 	.word	0x24001664
 80024cc:	40004c00 	.word	0x40004c00

080024d0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80024d4:	4b22      	ldr	r3, [pc, #136]	@ (8002560 <MX_USART6_UART_Init+0x90>)
 80024d6:	4a23      	ldr	r2, [pc, #140]	@ (8002564 <MX_USART6_UART_Init+0x94>)
 80024d8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80024da:	4b21      	ldr	r3, [pc, #132]	@ (8002560 <MX_USART6_UART_Init+0x90>)
 80024dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024e0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80024e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002560 <MX_USART6_UART_Init+0x90>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80024e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002560 <MX_USART6_UART_Init+0x90>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80024ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002560 <MX_USART6_UART_Init+0x90>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80024f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002560 <MX_USART6_UART_Init+0x90>)
 80024f6:	220c      	movs	r2, #12
 80024f8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024fa:	4b19      	ldr	r3, [pc, #100]	@ (8002560 <MX_USART6_UART_Init+0x90>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002500:	4b17      	ldr	r3, [pc, #92]	@ (8002560 <MX_USART6_UART_Init+0x90>)
 8002502:	2200      	movs	r2, #0
 8002504:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002506:	4b16      	ldr	r3, [pc, #88]	@ (8002560 <MX_USART6_UART_Init+0x90>)
 8002508:	2200      	movs	r2, #0
 800250a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800250c:	4b14      	ldr	r3, [pc, #80]	@ (8002560 <MX_USART6_UART_Init+0x90>)
 800250e:	2200      	movs	r2, #0
 8002510:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002512:	4b13      	ldr	r3, [pc, #76]	@ (8002560 <MX_USART6_UART_Init+0x90>)
 8002514:	2200      	movs	r2, #0
 8002516:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002518:	4811      	ldr	r0, [pc, #68]	@ (8002560 <MX_USART6_UART_Init+0x90>)
 800251a:	f00f fcdf 	bl	8011edc <HAL_UART_Init>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002524:	f000 f9e4 	bl	80028f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002528:	2100      	movs	r1, #0
 800252a:	480d      	ldr	r0, [pc, #52]	@ (8002560 <MX_USART6_UART_Init+0x90>)
 800252c:	f010 fde5 	bl	80130fa <HAL_UARTEx_SetTxFifoThreshold>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002536:	f000 f9db 	bl	80028f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800253a:	2100      	movs	r1, #0
 800253c:	4808      	ldr	r0, [pc, #32]	@ (8002560 <MX_USART6_UART_Init+0x90>)
 800253e:	f010 fe1a 	bl	8013176 <HAL_UARTEx_SetRxFifoThreshold>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002548:	f000 f9d2 	bl	80028f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800254c:	4804      	ldr	r0, [pc, #16]	@ (8002560 <MX_USART6_UART_Init+0x90>)
 800254e:	f010 fd9b 	bl	8013088 <HAL_UARTEx_DisableFifoMode>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002558:	f000 f9ca 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800255c:	bf00      	nop
 800255e:	bd80      	pop	{r7, pc}
 8002560:	240016f8 	.word	0x240016f8
 8002564:	40011400 	.word	0x40011400

08002568 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800256e:	4b2d      	ldr	r3, [pc, #180]	@ (8002624 <MX_DMA_Init+0xbc>)
 8002570:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002574:	4a2b      	ldr	r2, [pc, #172]	@ (8002624 <MX_DMA_Init+0xbc>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800257e:	4b29      	ldr	r3, [pc, #164]	@ (8002624 <MX_DMA_Init+0xbc>)
 8002580:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	607b      	str	r3, [r7, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800258c:	4b25      	ldr	r3, [pc, #148]	@ (8002624 <MX_DMA_Init+0xbc>)
 800258e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002592:	4a24      	ldr	r2, [pc, #144]	@ (8002624 <MX_DMA_Init+0xbc>)
 8002594:	f043 0302 	orr.w	r3, r3, #2
 8002598:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800259c:	4b21      	ldr	r3, [pc, #132]	@ (8002624 <MX_DMA_Init+0xbc>)
 800259e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	603b      	str	r3, [r7, #0]
 80025a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2100      	movs	r1, #0
 80025ae:	200b      	movs	r0, #11
 80025b0:	f003 ff01 	bl	80063b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80025b4:	200b      	movs	r0, #11
 80025b6:	f003 ff18 	bl	80063ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80025ba:	2200      	movs	r2, #0
 80025bc:	2100      	movs	r1, #0
 80025be:	200c      	movs	r0, #12
 80025c0:	f003 fef9 	bl	80063b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80025c4:	200c      	movs	r0, #12
 80025c6:	f003 ff10 	bl	80063ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80025ca:	2200      	movs	r2, #0
 80025cc:	2100      	movs	r1, #0
 80025ce:	200d      	movs	r0, #13
 80025d0:	f003 fef1 	bl	80063b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80025d4:	200d      	movs	r0, #13
 80025d6:	f003 ff08 	bl	80063ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	2100      	movs	r1, #0
 80025de:	200e      	movs	r0, #14
 80025e0:	f003 fee9 	bl	80063b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80025e4:	200e      	movs	r0, #14
 80025e6:	f003 ff00 	bl	80063ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2100      	movs	r1, #0
 80025ee:	200f      	movs	r0, #15
 80025f0:	f003 fee1 	bl	80063b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80025f4:	200f      	movs	r0, #15
 80025f6:	f003 fef8 	bl	80063ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80025fa:	2200      	movs	r2, #0
 80025fc:	2100      	movs	r1, #0
 80025fe:	2010      	movs	r0, #16
 8002600:	f003 fed9 	bl	80063b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002604:	2010      	movs	r0, #16
 8002606:	f003 fef0 	bl	80063ea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800260a:	2200      	movs	r2, #0
 800260c:	2100      	movs	r1, #0
 800260e:	2046      	movs	r0, #70	@ 0x46
 8002610:	f003 fed1 	bl	80063b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002614:	2046      	movs	r0, #70	@ 0x46
 8002616:	f003 fee8 	bl	80063ea <HAL_NVIC_EnableIRQ>

}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	58024400 	.word	0x58024400

08002628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08c      	sub	sp, #48	@ 0x30
 800262c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262e:	f107 031c 	add.w	r3, r7, #28
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	60da      	str	r2, [r3, #12]
 800263c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800263e:	4ba4      	ldr	r3, [pc, #656]	@ (80028d0 <MX_GPIO_Init+0x2a8>)
 8002640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002644:	4aa2      	ldr	r2, [pc, #648]	@ (80028d0 <MX_GPIO_Init+0x2a8>)
 8002646:	f043 0310 	orr.w	r3, r3, #16
 800264a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800264e:	4ba0      	ldr	r3, [pc, #640]	@ (80028d0 <MX_GPIO_Init+0x2a8>)
 8002650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002654:	f003 0310 	and.w	r3, r3, #16
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800265c:	4b9c      	ldr	r3, [pc, #624]	@ (80028d0 <MX_GPIO_Init+0x2a8>)
 800265e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002662:	4a9b      	ldr	r2, [pc, #620]	@ (80028d0 <MX_GPIO_Init+0x2a8>)
 8002664:	f043 0320 	orr.w	r3, r3, #32
 8002668:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800266c:	4b98      	ldr	r3, [pc, #608]	@ (80028d0 <MX_GPIO_Init+0x2a8>)
 800266e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002672:	f003 0320 	and.w	r3, r3, #32
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800267a:	4b95      	ldr	r3, [pc, #596]	@ (80028d0 <MX_GPIO_Init+0x2a8>)
 800267c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002680:	4a93      	ldr	r2, [pc, #588]	@ (80028d0 <MX_GPIO_Init+0x2a8>)
 8002682:	f043 0304 	orr.w	r3, r3, #4
 8002686:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800268a:	4b91      	ldr	r3, [pc, #580]	@ (80028d0 <MX_GPIO_Init+0x2a8>)
 800268c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002698:	4b8d      	ldr	r3, [pc, #564]	@ (80028d0 <MX_GPIO_Init+0x2a8>)
 800269a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800269e:	4a8c      	ldr	r2, [pc, #560]	@ (80028d0 <MX_GPIO_Init+0x2a8>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026a8:	4b89      	ldr	r3, [pc, #548]	@ (80028d0 <MX_GPIO_Init+0x2a8>)
 80026aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b6:	4b86      	ldr	r3, [pc, #536]	@ (80028d0 <MX_GPIO_Init+0x2a8>)
 80026b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026bc:	4a84      	ldr	r2, [pc, #528]	@ (80028d0 <MX_GPIO_Init+0x2a8>)
 80026be:	f043 0302 	orr.w	r3, r3, #2
 80026c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026c6:	4b82      	ldr	r3, [pc, #520]	@ (80028d0 <MX_GPIO_Init+0x2a8>)
 80026c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026d4:	4b7e      	ldr	r3, [pc, #504]	@ (80028d0 <MX_GPIO_Init+0x2a8>)
 80026d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026da:	4a7d      	ldr	r2, [pc, #500]	@ (80028d0 <MX_GPIO_Init+0x2a8>)
 80026dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026e4:	4b7a      	ldr	r3, [pc, #488]	@ (80028d0 <MX_GPIO_Init+0x2a8>)
 80026e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026f2:	4b77      	ldr	r3, [pc, #476]	@ (80028d0 <MX_GPIO_Init+0x2a8>)
 80026f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026f8:	4a75      	ldr	r2, [pc, #468]	@ (80028d0 <MX_GPIO_Init+0x2a8>)
 80026fa:	f043 0308 	orr.w	r3, r3, #8
 80026fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002702:	4b73      	ldr	r3, [pc, #460]	@ (80028d0 <MX_GPIO_Init+0x2a8>)
 8002704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002708:	f003 0308 	and.w	r3, r3, #8
 800270c:	603b      	str	r3, [r7, #0]
 800270e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 8002710:	2200      	movs	r2, #0
 8002712:	f241 5104 	movw	r1, #5380	@ 0x1504
 8002716:	486f      	ldr	r0, [pc, #444]	@ (80028d4 <MX_GPIO_Init+0x2ac>)
 8002718:	f006 fc7a 	bl	8009010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 800271c:	2200      	movs	r2, #0
 800271e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002722:	486d      	ldr	r0, [pc, #436]	@ (80028d8 <MX_GPIO_Init+0x2b0>)
 8002724:	f006 fc74 	bl	8009010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002728:	2200      	movs	r2, #0
 800272a:	2130      	movs	r1, #48	@ 0x30
 800272c:	486b      	ldr	r0, [pc, #428]	@ (80028dc <MX_GPIO_Init+0x2b4>)
 800272e:	f006 fc6f 	bl	8009010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 8002732:	2200      	movs	r2, #0
 8002734:	2102      	movs	r1, #2
 8002736:	486a      	ldr	r0, [pc, #424]	@ (80028e0 <MX_GPIO_Init+0x2b8>)
 8002738:	f006 fc6a 	bl	8009010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 800273c:	2200      	movs	r2, #0
 800273e:	f44f 4128 	mov.w	r1, #43008	@ 0xa800
 8002742:	4868      	ldr	r0, [pc, #416]	@ (80028e4 <MX_GPIO_Init+0x2bc>)
 8002744:	f006 fc64 	bl	8009010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002748:	2200      	movs	r2, #0
 800274a:	210e      	movs	r1, #14
 800274c:	4866      	ldr	r0, [pc, #408]	@ (80028e8 <MX_GPIO_Init+0x2c0>)
 800274e:	f006 fc5f 	bl	8009010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0, GPIO_PIN_RESET);
 8002752:	2200      	movs	r2, #0
 8002754:	f240 3101 	movw	r1, #769	@ 0x301
 8002758:	4864      	ldr	r0, [pc, #400]	@ (80028ec <MX_GPIO_Init+0x2c4>)
 800275a:	f006 fc59 	bl	8009010 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 800275e:	f241 5304 	movw	r3, #5380	@ 0x1504
 8002762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002764:	2301      	movs	r3, #1
 8002766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276c:	2300      	movs	r3, #0
 800276e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002770:	f107 031c 	add.w	r3, r7, #28
 8002774:	4619      	mov	r1, r3
 8002776:	4857      	ldr	r0, [pc, #348]	@ (80028d4 <MX_GPIO_Init+0x2ac>)
 8002778:	f006 fa8a 	bl	8008c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|GPIO_PIN_15;
 800277c:	f248 0302 	movw	r3, #32770	@ 0x8002
 8002780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002782:	2301      	movs	r3, #1
 8002784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002786:	2300      	movs	r3, #0
 8002788:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278a:	2300      	movs	r3, #0
 800278c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278e:	f107 031c 	add.w	r3, r7, #28
 8002792:	4619      	mov	r1, r3
 8002794:	4850      	ldr	r0, [pc, #320]	@ (80028d8 <MX_GPIO_Init+0x2b0>)
 8002796:	f006 fa7b 	bl	8008c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800279a:	2330      	movs	r3, #48	@ 0x30
 800279c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800279e:	2301      	movs	r3, #1
 80027a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a6:	2300      	movs	r3, #0
 80027a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027aa:	f107 031c 	add.w	r3, r7, #28
 80027ae:	4619      	mov	r1, r3
 80027b0:	484a      	ldr	r0, [pc, #296]	@ (80028dc <MX_GPIO_Init+0x2b4>)
 80027b2:	f006 fa6d 	bl	8008c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PYRO1_Pin */
  GPIO_InitStruct.Pin = PYRO1_Pin;
 80027b6:	2302      	movs	r3, #2
 80027b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ba:	2301      	movs	r3, #1
 80027bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c2:	2300      	movs	r3, #0
 80027c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 80027c6:	f107 031c 	add.w	r3, r7, #28
 80027ca:	4619      	mov	r1, r3
 80027cc:	4844      	ldr	r0, [pc, #272]	@ (80028e0 <MX_GPIO_Init+0x2b8>)
 80027ce:	f006 fa5f 	bl	8008c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 80027d2:	2304      	movs	r3, #4
 80027d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027d6:	2300      	movs	r3, #0
 80027d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027da:	2301      	movs	r3, #1
 80027dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 80027de:	f107 031c 	add.w	r3, r7, #28
 80027e2:	4619      	mov	r1, r3
 80027e4:	483e      	ldr	r0, [pc, #248]	@ (80028e0 <MX_GPIO_Init+0x2b8>)
 80027e6:	f006 fa53 	bl	8008c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 80027ea:	f44f 4328 	mov.w	r3, #43008	@ 0xa800
 80027ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f0:	2301      	movs	r3, #1
 80027f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f8:	2300      	movs	r3, #0
 80027fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027fc:	f107 031c 	add.w	r3, r7, #28
 8002800:	4619      	mov	r1, r3
 8002802:	4838      	ldr	r0, [pc, #224]	@ (80028e4 <MX_GPIO_Init+0x2bc>)
 8002804:	f006 fa44 	bl	8008c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 8002808:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 800280c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800280e:	2300      	movs	r3, #0
 8002810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002812:	2301      	movs	r3, #1
 8002814:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002816:	f107 031c 	add.w	r3, r7, #28
 800281a:	4619      	mov	r1, r3
 800281c:	4831      	ldr	r0, [pc, #196]	@ (80028e4 <MX_GPIO_Init+0x2bc>)
 800281e:	f006 fa37 	bl	8008c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 8002822:	2301      	movs	r3, #1
 8002824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002826:	2300      	movs	r3, #0
 8002828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800282a:	2301      	movs	r3, #1
 800282c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 800282e:	f107 031c 	add.w	r3, r7, #28
 8002832:	4619      	mov	r1, r3
 8002834:	482c      	ldr	r0, [pc, #176]	@ (80028e8 <MX_GPIO_Init+0x2c0>)
 8002836:	f006 fa2b 	bl	8008c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 800283a:	230e      	movs	r3, #14
 800283c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800283e:	2301      	movs	r3, #1
 8002840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002846:	2300      	movs	r3, #0
 8002848:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800284a:	f107 031c 	add.w	r3, r7, #28
 800284e:	4619      	mov	r1, r3
 8002850:	4825      	ldr	r0, [pc, #148]	@ (80028e8 <MX_GPIO_Init+0x2c0>)
 8002852:	f006 fa1d 	bl	8008c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 8002856:	f44f 532a 	mov.w	r3, #10880	@ 0x2a80
 800285a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800285c:	2300      	movs	r3, #0
 800285e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002860:	2301      	movs	r3, #1
 8002862:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002864:	f107 031c 	add.w	r3, r7, #28
 8002868:	4619      	mov	r1, r3
 800286a:	481a      	ldr	r0, [pc, #104]	@ (80028d4 <MX_GPIO_Init+0x2ac>)
 800286c:	f006 fa10 	bl	8008c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0;
 8002870:	f240 3301 	movw	r3, #769	@ 0x301
 8002874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002876:	2301      	movs	r3, #1
 8002878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287a:	2300      	movs	r3, #0
 800287c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287e:	2300      	movs	r3, #0
 8002880:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002882:	f107 031c 	add.w	r3, r7, #28
 8002886:	4619      	mov	r1, r3
 8002888:	4818      	ldr	r0, [pc, #96]	@ (80028ec <MX_GPIO_Init+0x2c4>)
 800288a:	f006 fa01 	bl	8008c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 800288e:	2310      	movs	r3, #16
 8002890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002892:	2300      	movs	r3, #0
 8002894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 800289a:	f107 031c 	add.w	r3, r7, #28
 800289e:	4619      	mov	r1, r3
 80028a0:	4811      	ldr	r0, [pc, #68]	@ (80028e8 <MX_GPIO_Init+0x2c0>)
 80028a2:	f006 f9f5 	bl	8008c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ac:	2302      	movs	r3, #2
 80028ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b4:	2300      	movs	r3, #0
 80028b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80028b8:	2300      	movs	r3, #0
 80028ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028bc:	f107 031c 	add.w	r3, r7, #28
 80028c0:	4619      	mov	r1, r3
 80028c2:	4805      	ldr	r0, [pc, #20]	@ (80028d8 <MX_GPIO_Init+0x2b0>)
 80028c4:	f006 f9e4 	bl	8008c90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028c8:	bf00      	nop
 80028ca:	3730      	adds	r7, #48	@ 0x30
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	58024400 	.word	0x58024400
 80028d4:	58021000 	.word	0x58021000
 80028d8:	58020000 	.word	0x58020000
 80028dc:	58020800 	.word	0x58020800
 80028e0:	58020400 	.word	0x58020400
 80028e4:	58021400 	.word	0x58021400
 80028e8:	58021800 	.word	0x58021800
 80028ec:	58020c00 	.word	0x58020c00

080028f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028f4:	b672      	cpsid	i
}
 80028f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80028f8:	bf00      	nop
 80028fa:	e7fd      	b.n	80028f8 <Error_Handler+0x8>

080028fc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
void MX_RNG_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002900:	4b09      	ldr	r3, [pc, #36]	@ (8002928 <MX_RNG_Init+0x2c>)
 8002902:	4a0a      	ldr	r2, [pc, #40]	@ (800292c <MX_RNG_Init+0x30>)
 8002904:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002906:	4b08      	ldr	r3, [pc, #32]	@ (8002928 <MX_RNG_Init+0x2c>)
 8002908:	2200      	movs	r2, #0
 800290a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800290c:	4806      	ldr	r0, [pc, #24]	@ (8002928 <MX_RNG_Init+0x2c>)
 800290e:	f00b fb93 	bl	800e038 <HAL_RNG_Init>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002918:	f7ff ffea 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */
  initialized = 1;
 800291c:	4b04      	ldr	r3, [pc, #16]	@ (8002930 <MX_RNG_Init+0x34>)
 800291e:	2201      	movs	r2, #1
 8002920:	601a      	str	r2, [r3, #0]
  /* USER CODE END RNG_Init 2 */

}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	240037fc 	.word	0x240037fc
 800292c:	48021800 	.word	0x48021800
 8002930:	240037f8 	.word	0x240037f8

08002934 <rand_range>:


uint32_t rand_range(uint32_t a, uint32_t b) {
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
	if(!initialized)
 800293e:	4b1c      	ldr	r3, [pc, #112]	@ (80029b0 <rand_range+0x7c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d109      	bne.n	800295a <rand_range+0x26>
	{
		HAL_Delay(100);
 8002946:	2064      	movs	r0, #100	@ 0x64
 8002948:	f001 fc64 	bl	8004214 <HAL_Delay>
		CDC_Transmit_HS("Random not initialized!\n", strlen("Random not initialized!\n"));
 800294c:	2118      	movs	r1, #24
 800294e:	4819      	ldr	r0, [pc, #100]	@ (80029b4 <rand_range+0x80>)
 8002950:	f018 f856 	bl	801aa00 <CDC_Transmit_HS>
		return -1;
 8002954:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002958:	e026      	b.n	80029a8 <rand_range+0x74>
	}

	uint32_t rand = 0;
 800295a:	2300      	movs	r3, #0
 800295c:	60bb      	str	r3, [r7, #8]
	uint32_t MAX = 4294967295;
 800295e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002962:	60fb      	str	r3, [r7, #12]
	if(b>a && HAL_RNG_GenerateRandomNumber(&hrng, &rand) == HAL_OK)
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	429a      	cmp	r2, r3
 800296a:	d914      	bls.n	8002996 <rand_range+0x62>
 800296c:	f107 0308 	add.w	r3, r7, #8
 8002970:	4619      	mov	r1, r3
 8002972:	4811      	ldr	r0, [pc, #68]	@ (80029b8 <rand_range+0x84>)
 8002974:	f00b fc04 	bl	800e180 <HAL_RNG_GenerateRandomNumber>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10b      	bne.n	8002996 <rand_range+0x62>
	{
		return a+rand/(MAX/(b-a));
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	6839      	ldr	r1, [r7, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	1acb      	subs	r3, r1, r3
 8002986:	68f9      	ldr	r1, [r7, #12]
 8002988:	fbb1 f3f3 	udiv	r3, r1, r3
 800298c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4413      	add	r3, r2
 8002994:	e008      	b.n	80029a8 <rand_range+0x74>
	}
	else
	{
		HAL_Delay(100);
 8002996:	2064      	movs	r0, #100	@ 0x64
 8002998:	f001 fc3c 	bl	8004214 <HAL_Delay>
		CDC_Transmit_HS("rng error\n", strlen("rng error\n"));
 800299c:	210a      	movs	r1, #10
 800299e:	4807      	ldr	r0, [pc, #28]	@ (80029bc <rand_range+0x88>)
 80029a0:	f018 f82e 	bl	801aa00 <CDC_Transmit_HS>
	}
	return -1;
 80029a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	240037f8 	.word	0x240037f8
 80029b4:	080200d0 	.word	0x080200d0
 80029b8:	240037fc 	.word	0x240037fc
 80029bc:	080200ec 	.word	0x080200ec

080029c0 <disarm>:
extern uint32_t LED_Color_Data[NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3][3];
extern FATFS FatFs;
extern FIL Fil;
extern FRESULT FR_Status;

int disarm(char *state) {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 80029c8:	2200      	movs	r2, #0
 80029ca:	2102      	movs	r1, #2
 80029cc:	482d      	ldr	r0, [pc, #180]	@ (8002a84 <disarm+0xc4>)
 80029ce:	f006 fb1f 	bl	8009010 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);

	HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 80029d2:	2200      	movs	r2, #0
 80029d4:	2102      	movs	r1, #2
 80029d6:	482c      	ldr	r0, [pc, #176]	@ (8002a88 <disarm+0xc8>)
 80029d8:	f006 fb1a 	bl	8009010 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 80029dc:	2200      	movs	r2, #0
 80029de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80029e2:	482a      	ldr	r0, [pc, #168]	@ (8002a8c <disarm+0xcc>)
 80029e4:	f006 fb14 	bl	8009010 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 80029e8:	2200      	movs	r2, #0
 80029ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80029ee:	4827      	ldr	r0, [pc, #156]	@ (8002a8c <disarm+0xcc>)
 80029f0:	f006 fb0e 	bl	8009010 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 80029f4:	2200      	movs	r2, #0
 80029f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029fa:	4824      	ldr	r0, [pc, #144]	@ (8002a8c <disarm+0xcc>)
 80029fc:	f006 fb08 	bl	8009010 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 8002a00:	2200      	movs	r2, #0
 8002a02:	2102      	movs	r1, #2
 8002a04:	4822      	ldr	r0, [pc, #136]	@ (8002a90 <disarm+0xd0>)
 8002a06:	f006 fb03 	bl	8009010 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a10:	4820      	ldr	r0, [pc, #128]	@ (8002a94 <disarm+0xd4>)
 8002a12:	f006 fafd 	bl	8009010 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 8002a16:	2200      	movs	r2, #0
 8002a18:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002a1c:	481d      	ldr	r0, [pc, #116]	@ (8002a94 <disarm+0xd4>)
 8002a1e:	f006 faf7 	bl	8009010 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 8002a22:	2200      	movs	r2, #0
 8002a24:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a28:	481a      	ldr	r0, [pc, #104]	@ (8002a94 <disarm+0xd4>)
 8002a2a:	f006 faf1 	bl	8009010 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002a2e:	210c      	movs	r1, #12
 8002a30:	4819      	ldr	r0, [pc, #100]	@ (8002a98 <disarm+0xd8>)
 8002a32:	f00d ff5b 	bl	80108ec <HAL_TIM_PWM_Start>
	setServo(1, 0);
 8002a36:	2100      	movs	r1, #0
 8002a38:	2001      	movs	r0, #1
 8002a3a:	f7fe fd47 	bl	80014cc <setServo>

	LED_Color_Data[7][0] = 255;
 8002a3e:	4b17      	ldr	r3, [pc, #92]	@ (8002a9c <disarm+0xdc>)
 8002a40:	22ff      	movs	r2, #255	@ 0xff
 8002a42:	655a      	str	r2, [r3, #84]	@ 0x54
	LED_Color_Data[7][1] = 0;
 8002a44:	4b15      	ldr	r3, [pc, #84]	@ (8002a9c <disarm+0xdc>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	659a      	str	r2, [r3, #88]	@ 0x58
	LED_Color_Data[7][2] = 0;
 8002a4a:	4b14      	ldr	r3, [pc, #80]	@ (8002a9c <disarm+0xdc>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	65da      	str	r2, [r3, #92]	@ 0x5c

	LED_Color_Data[2][0] = 255;
 8002a50:	4b12      	ldr	r3, [pc, #72]	@ (8002a9c <disarm+0xdc>)
 8002a52:	22ff      	movs	r2, #255	@ 0xff
 8002a54:	619a      	str	r2, [r3, #24]
	LED_Color_Data[2][1] = 0;
 8002a56:	4b11      	ldr	r3, [pc, #68]	@ (8002a9c <disarm+0xdc>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	61da      	str	r2, [r3, #28]
	LED_Color_Data[2][2] = 0;
 8002a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a9c <disarm+0xdc>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	621a      	str	r2, [r3, #32]
	setLEDs();
 8002a62:	f7fe fd7b 	bl	800155c <setLEDs>

	strcpy(state, "DISARMED");
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	490d      	ldr	r1, [pc, #52]	@ (8002aa0 <disarm+0xe0>)
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	cb03      	ldmia	r3!, {r0, r1}
 8002a70:	6010      	str	r0, [r2, #0]
 8002a72:	6051      	str	r1, [r2, #4]
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	7213      	strb	r3, [r2, #8]
	return 0;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	58020000 	.word	0x58020000
 8002a88:	58020400 	.word	0x58020400
 8002a8c:	58021400 	.word	0x58021400
 8002a90:	58021800 	.word	0x58021800
 8002a94:	58021000 	.word	0x58021000
 8002a98:	240012dc 	.word	0x240012dc
 8002a9c:	24000cc4 	.word	0x24000cc4
 8002aa0:	080200f8 	.word	0x080200f8

08002aa4 <arm>:

int arm(char *state) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 1);
 8002aac:	2201      	movs	r2, #1
 8002aae:	2102      	movs	r1, #2
 8002ab0:	4810      	ldr	r0, [pc, #64]	@ (8002af4 <arm+0x50>)
 8002ab2:	f006 faad 	bl	8009010 <HAL_GPIO_WritePin>
//HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 1);

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002ab6:	210c      	movs	r1, #12
 8002ab8:	480f      	ldr	r0, [pc, #60]	@ (8002af8 <arm+0x54>)
 8002aba:	f00d ff17 	bl	80108ec <HAL_TIM_PWM_Start>
	setServo(1, 100);
 8002abe:	2164      	movs	r1, #100	@ 0x64
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	f7fe fd03 	bl	80014cc <setServo>

	strcpy(state, "ARMED");
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a0c      	ldr	r2, [pc, #48]	@ (8002afc <arm+0x58>)
 8002aca:	6810      	ldr	r0, [r2, #0]
 8002acc:	6018      	str	r0, [r3, #0]
 8002ace:	8892      	ldrh	r2, [r2, #4]
 8002ad0:	809a      	strh	r2, [r3, #4]
	LED_Color_Data[7][0] = 0;
 8002ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8002b00 <arm+0x5c>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	655a      	str	r2, [r3, #84]	@ 0x54
	LED_Color_Data[7][1] = 255;
 8002ad8:	4b09      	ldr	r3, [pc, #36]	@ (8002b00 <arm+0x5c>)
 8002ada:	22ff      	movs	r2, #255	@ 0xff
 8002adc:	659a      	str	r2, [r3, #88]	@ 0x58
	LED_Color_Data[7][2] = 0;
 8002ade:	4b08      	ldr	r3, [pc, #32]	@ (8002b00 <arm+0x5c>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	65da      	str	r2, [r3, #92]	@ 0x5c
	setLEDs();
 8002ae4:	f7fe fd3a 	bl	800155c <setLEDs>
	return 0;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	58020000 	.word	0x58020000
 8002af8:	240012dc 	.word	0x240012dc
 8002afc:	08020104 	.word	0x08020104
 8002b00:	24000cc4 	.word	0x24000cc4

08002b04 <pyro_check_continuity>:

void pyro_check_continuity(uint8_t CONTS[]) {
 8002b04:	b590      	push	{r4, r7, lr}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
	CONTS[0] = HAL_GPIO_ReadPin(CONT1_GPIO_Port, CONT1_Pin);
 8002b0c:	2104      	movs	r1, #4
 8002b0e:	4824      	ldr	r0, [pc, #144]	@ (8002ba0 <pyro_check_continuity+0x9c>)
 8002b10:	f006 fa66 	bl	8008fe0 <HAL_GPIO_ReadPin>
 8002b14:	4603      	mov	r3, r0
 8002b16:	461a      	mov	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	701a      	strb	r2, [r3, #0]
	CONTS[1] = HAL_GPIO_ReadPin(CONT2_GPIO_Port, CONT2_Pin);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	1c5c      	adds	r4, r3, #1
 8002b20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002b24:	481f      	ldr	r0, [pc, #124]	@ (8002ba4 <pyro_check_continuity+0xa0>)
 8002b26:	f006 fa5b 	bl	8008fe0 <HAL_GPIO_ReadPin>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	7023      	strb	r3, [r4, #0]
	CONTS[2] = HAL_GPIO_ReadPin(CONT3_GPIO_Port, CONT3_Pin);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	1c9c      	adds	r4, r3, #2
 8002b32:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002b36:	481b      	ldr	r0, [pc, #108]	@ (8002ba4 <pyro_check_continuity+0xa0>)
 8002b38:	f006 fa52 	bl	8008fe0 <HAL_GPIO_ReadPin>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	7023      	strb	r3, [r4, #0]
	CONTS[3] = HAL_GPIO_ReadPin(CONT4_GPIO_Port, CONT4_Pin);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	1cdc      	adds	r4, r3, #3
 8002b44:	2101      	movs	r1, #1
 8002b46:	4818      	ldr	r0, [pc, #96]	@ (8002ba8 <pyro_check_continuity+0xa4>)
 8002b48:	f006 fa4a 	bl	8008fe0 <HAL_GPIO_ReadPin>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	7023      	strb	r3, [r4, #0]
	CONTS[4] = HAL_GPIO_ReadPin(CONT5_GPIO_Port, CONT5_Pin);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	1d1c      	adds	r4, r3, #4
 8002b54:	2180      	movs	r1, #128	@ 0x80
 8002b56:	4815      	ldr	r0, [pc, #84]	@ (8002bac <pyro_check_continuity+0xa8>)
 8002b58:	f006 fa42 	bl	8008fe0 <HAL_GPIO_ReadPin>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	7023      	strb	r3, [r4, #0]
	CONTS[5] = HAL_GPIO_ReadPin(CONT6_GPIO_Port, CONT6_Pin);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	1d5c      	adds	r4, r3, #5
 8002b64:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002b68:	4810      	ldr	r0, [pc, #64]	@ (8002bac <pyro_check_continuity+0xa8>)
 8002b6a:	f006 fa39 	bl	8008fe0 <HAL_GPIO_ReadPin>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	7023      	strb	r3, [r4, #0]
	CONTS[6] = HAL_GPIO_ReadPin(CONT7_GPIO_Port, CONT7_Pin);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	1d9c      	adds	r4, r3, #6
 8002b76:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002b7a:	480c      	ldr	r0, [pc, #48]	@ (8002bac <pyro_check_continuity+0xa8>)
 8002b7c:	f006 fa30 	bl	8008fe0 <HAL_GPIO_ReadPin>
 8002b80:	4603      	mov	r3, r0
 8002b82:	7023      	strb	r3, [r4, #0]
	CONTS[7] = HAL_GPIO_ReadPin(CONT8_GPIO_Port, CONT8_Pin);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	1ddc      	adds	r4, r3, #7
 8002b88:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b8c:	4807      	ldr	r0, [pc, #28]	@ (8002bac <pyro_check_continuity+0xa8>)
 8002b8e:	f006 fa27 	bl	8008fe0 <HAL_GPIO_ReadPin>
 8002b92:	4603      	mov	r3, r0
 8002b94:	7023      	strb	r3, [r4, #0]
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd90      	pop	{r4, r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	58020400 	.word	0x58020400
 8002ba4:	58021400 	.word	0x58021400
 8002ba8:	58021800 	.word	0x58021800
 8002bac:	58021000 	.word	0x58021000

08002bb0 <rocketReliableReceiveHandle>:
char streamed_data[100];
char state_message[100];
//length is an arbitrary number, but it's unlikely to have more than 200
char* rocket_messages[200];

void rocketReliableReceiveHandle(char* received_packet) {
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
	strcpy(command, received_packet);
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4803      	ldr	r0, [pc, #12]	@ (8002bc8 <rocketReliableReceiveHandle+0x18>)
 8002bbc:	f01a f9dd 	bl	801cf7a <strcpy>
}
 8002bc0:	bf00      	nop
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	240039d4 	.word	0x240039d4

08002bcc <rocketStreamReceiveHandle>:

void rocketStreamReceiveHandle(char* received_packet) {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
	CDC_Transmit_HS(received_packet, strlen(received_packet));
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7fd fbeb 	bl	80003b0 <strlen>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	4619      	mov	r1, r3
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f017 ff0e 	bl	801aa00 <CDC_Transmit_HS>
}
 8002be4:	bf00      	nop
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <rocketStreamSendHandle>:

char* rocketStreamSendHandle(int remainingPacketCount) {
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
	if (strcmp(state, "ARMED") == 0) {
 8002bf4:	491d      	ldr	r1, [pc, #116]	@ (8002c6c <rocketStreamSendHandle+0x80>)
 8002bf6:	481e      	ldr	r0, [pc, #120]	@ (8002c70 <rocketStreamSendHandle+0x84>)
 8002bf8:	f7fd fbe2 	bl	80003c0 <strcmp>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d12f      	bne.n	8002c62 <rocketStreamSendHandle+0x76>
		if (strcmp(command, "FIRE") == 0) {
 8002c02:	491c      	ldr	r1, [pc, #112]	@ (8002c74 <rocketStreamSendHandle+0x88>)
 8002c04:	481c      	ldr	r0, [pc, #112]	@ (8002c78 <rocketStreamSendHandle+0x8c>)
 8002c06:	f7fd fbdb 	bl	80003c0 <strcmp>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d128      	bne.n	8002c62 <rocketStreamSendHandle+0x76>
			HAL_ADC_Start(&hadc1); // start the adc
 8002c10:	481a      	ldr	r0, [pc, #104]	@ (8002c7c <rocketStreamSendHandle+0x90>)
 8002c12:	f002 f82d 	bl	8004c70 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 8002c16:	2164      	movs	r1, #100	@ 0x64
 8002c18:	4818      	ldr	r0, [pc, #96]	@ (8002c7c <rocketStreamSendHandle+0x90>)
 8002c1a:	f002 f927 	bl	8004e6c <HAL_ADC_PollForConversion>

			uint16_t adc_val = HAL_ADC_GetValue(&hadc1); // get the adc value
 8002c1e:	4817      	ldr	r0, [pc, #92]	@ (8002c7c <rocketStreamSendHandle+0x90>)
 8002c20:	f002 fa18 	bl	8005054 <HAL_ADC_GetValue>
 8002c24:	4603      	mov	r3, r0
 8002c26:	81fb      	strh	r3, [r7, #14]
			sprintf(streamed_data, "%d, %d\n", HAL_GetTick(), adc_val);
 8002c28:	f001 fae8 	bl	80041fc <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	89fb      	ldrh	r3, [r7, #14]
 8002c30:	4913      	ldr	r1, [pc, #76]	@ (8002c80 <rocketStreamSendHandle+0x94>)
 8002c32:	4814      	ldr	r0, [pc, #80]	@ (8002c84 <rocketStreamSendHandle+0x98>)
 8002c34:	f019 f97c 	bl	801bf30 <siprintf>
			FR_Status = f_open(&Fil, "MyTextFile.txt",
 8002c38:	2232      	movs	r2, #50	@ 0x32
 8002c3a:	4913      	ldr	r1, [pc, #76]	@ (8002c88 <rocketStreamSendHandle+0x9c>)
 8002c3c:	4813      	ldr	r0, [pc, #76]	@ (8002c8c <rocketStreamSendHandle+0xa0>)
 8002c3e:	f017 f85d 	bl	8019cfc <f_open>
 8002c42:	4603      	mov	r3, r0
 8002c44:	461a      	mov	r2, r3
 8002c46:	4b12      	ldr	r3, [pc, #72]	@ (8002c90 <rocketStreamSendHandle+0xa4>)
 8002c48:	701a      	strb	r2, [r3, #0]
					FA_OPEN_APPEND | FA_WRITE);
			f_puts(streamed_data, &Fil);
 8002c4a:	4910      	ldr	r1, [pc, #64]	@ (8002c8c <rocketStreamSendHandle+0xa0>)
 8002c4c:	480d      	ldr	r0, [pc, #52]	@ (8002c84 <rocketStreamSendHandle+0x98>)
 8002c4e:	f017 fcd0 	bl	801a5f2 <f_puts>
			f_close(&Fil);
 8002c52:	480e      	ldr	r0, [pc, #56]	@ (8002c8c <rocketStreamSendHandle+0xa0>)
 8002c54:	f017 fc2c 	bl	801a4b0 <f_close>
			HAL_ADC_Stop(&hadc1); // stop adc
 8002c58:	4808      	ldr	r0, [pc, #32]	@ (8002c7c <rocketStreamSendHandle+0x90>)
 8002c5a:	f002 f8d3 	bl	8004e04 <HAL_ADC_Stop>
			return streamed_data;
 8002c5e:	4b09      	ldr	r3, [pc, #36]	@ (8002c84 <rocketStreamSendHandle+0x98>)
 8002c60:	e000      	b.n	8002c64 <rocketStreamSendHandle+0x78>
		}
	}
	return "";
 8002c62:	4b0c      	ldr	r3, [pc, #48]	@ (8002c94 <rocketStreamSendHandle+0xa8>)
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	08020104 	.word	0x08020104
 8002c70:	24000000 	.word	0x24000000
 8002c74:	0802010c 	.word	0x0802010c
 8002c78:	240039d4 	.word	0x240039d4
 8002c7c:	24000d6c 	.word	0x24000d6c
 8002c80:	08020114 	.word	0x08020114
 8002c84:	24003ad4 	.word	0x24003ad4
 8002c88:	0802011c 	.word	0x0802011c
 8002c8c:	240027c4 	.word	0x240027c4
 8002c90:	240037f4 	.word	0x240037f4
 8002c94:	0802012c 	.word	0x0802012c

08002c98 <rocketReliableSendHandle>:

struct ReliableSendConfig rocketReliableSendHandle() {
 8002c98:	b5b0      	push	{r4, r5, r7, lr}
 8002c9a:	b08a      	sub	sp, #40	@ 0x28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
	struct ReliableSendConfig config;
	int message_count=0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	627b      	str	r3, [r7, #36]	@ 0x24
	//reserve first place for the state message
	message_count++;
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	627b      	str	r3, [r7, #36]	@ 0x24
	if (strcmp(state, "DISARMED") == 0) {
 8002caa:	4984      	ldr	r1, [pc, #528]	@ (8002ebc <rocketReliableSendHandle+0x224>)
 8002cac:	4884      	ldr	r0, [pc, #528]	@ (8002ec0 <rocketReliableSendHandle+0x228>)
 8002cae:	f7fd fb87 	bl	80003c0 <strcmp>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f040 8088 	bne.w	8002dca <rocketReliableSendHandle+0x132>
		if (strcmp(command, "ARM") == 0) {
 8002cba:	4982      	ldr	r1, [pc, #520]	@ (8002ec4 <rocketReliableSendHandle+0x22c>)
 8002cbc:	4882      	ldr	r0, [pc, #520]	@ (8002ec8 <rocketReliableSendHandle+0x230>)
 8002cbe:	f7fd fb7f 	bl	80003c0 <strcmp>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d124      	bne.n	8002d12 <rocketReliableSendHandle+0x7a>

			if (!arm(state)) {
 8002cc8:	487d      	ldr	r0, [pc, #500]	@ (8002ec0 <rocketReliableSendHandle+0x228>)
 8002cca:	f7ff feeb 	bl	8002aa4 <arm>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10d      	bne.n	8002cf0 <rocketReliableSendHandle+0x58>
				strcpy(status, "ARM SUCCESS");
 8002cd4:	4b7d      	ldr	r3, [pc, #500]	@ (8002ecc <rocketReliableSendHandle+0x234>)
 8002cd6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ed0 <rocketReliableSendHandle+0x238>)
 8002cd8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cda:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 				rocket_messages[message_count] = status;
 8002cde:	4a7d      	ldr	r2, [pc, #500]	@ (8002ed4 <rocketReliableSendHandle+0x23c>)
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce2:	497a      	ldr	r1, [pc, #488]	@ (8002ecc <rocketReliableSendHandle+0x234>)
 8002ce4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				message_count++;
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cea:	3301      	adds	r3, #1
 8002cec:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cee:	e0cc      	b.n	8002e8a <rocketReliableSendHandle+0x1f2>
			} else {
				strcpy(status, "ARM UNSUCCESSFUL");
 8002cf0:	4a76      	ldr	r2, [pc, #472]	@ (8002ecc <rocketReliableSendHandle+0x234>)
 8002cf2:	4b79      	ldr	r3, [pc, #484]	@ (8002ed8 <rocketReliableSendHandle+0x240>)
 8002cf4:	4614      	mov	r4, r2
 8002cf6:	461d      	mov	r5, r3
 8002cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cfc:	682b      	ldr	r3, [r5, #0]
 8002cfe:	7023      	strb	r3, [r4, #0]
 				rocket_messages[message_count] = status;
 8002d00:	4a74      	ldr	r2, [pc, #464]	@ (8002ed4 <rocketReliableSendHandle+0x23c>)
 8002d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d04:	4971      	ldr	r1, [pc, #452]	@ (8002ecc <rocketReliableSendHandle+0x234>)
 8002d06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				message_count++;
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d10:	e0bb      	b.n	8002e8a <rocketReliableSendHandle+0x1f2>
			}
		} else if (strcmp(command, "DISARM") == 0) {
 8002d12:	4972      	ldr	r1, [pc, #456]	@ (8002edc <rocketReliableSendHandle+0x244>)
 8002d14:	486c      	ldr	r0, [pc, #432]	@ (8002ec8 <rocketReliableSendHandle+0x230>)
 8002d16:	f7fd fb53 	bl	80003c0 <strcmp>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d110      	bne.n	8002d42 <rocketReliableSendHandle+0xaa>
			strcpy(status, "ALREADY DISARMED");
 8002d20:	4a6a      	ldr	r2, [pc, #424]	@ (8002ecc <rocketReliableSendHandle+0x234>)
 8002d22:	4b6f      	ldr	r3, [pc, #444]	@ (8002ee0 <rocketReliableSendHandle+0x248>)
 8002d24:	4614      	mov	r4, r2
 8002d26:	461d      	mov	r5, r3
 8002d28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d2c:	682b      	ldr	r3, [r5, #0]
 8002d2e:	7023      	strb	r3, [r4, #0]
			rocket_messages[message_count] = status;
 8002d30:	4a68      	ldr	r2, [pc, #416]	@ (8002ed4 <rocketReliableSendHandle+0x23c>)
 8002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d34:	4965      	ldr	r1, [pc, #404]	@ (8002ecc <rocketReliableSendHandle+0x234>)
 8002d36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			message_count++;
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d40:	e0a3      	b.n	8002e8a <rocketReliableSendHandle+0x1f2>
		} else if (strcmp(command, "CONT") == 0) {
 8002d42:	4968      	ldr	r1, [pc, #416]	@ (8002ee4 <rocketReliableSendHandle+0x24c>)
 8002d44:	4860      	ldr	r0, [pc, #384]	@ (8002ec8 <rocketReliableSendHandle+0x230>)
 8002d46:	f7fd fb3b 	bl	80003c0 <strcmp>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f040 809c 	bne.w	8002e8a <rocketReliableSendHandle+0x1f2>
			uint8_t CONTS[8];
			pyro_check_continuity(CONTS);
 8002d52:	f107 0308 	add.w	r3, r7, #8
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fed4 	bl	8002b04 <pyro_check_continuity>


			for (int i = 0; i < 8; i++) {
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	623b      	str	r3, [r7, #32]
 8002d60:	e02f      	b.n	8002dc2 <rocketReliableSendHandle+0x12a>
				if (CONTS[i]) {
 8002d62:	f107 0208 	add.w	r2, r7, #8
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	4413      	add	r3, r2
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00c      	beq.n	8002d8a <rocketReliableSendHandle+0xf2>
					sprintf(continuities[i], "PYRO %d DOESN'T HAVE CONTINUITY",
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	2232      	movs	r2, #50	@ 0x32
 8002d74:	fb02 f303 	mul.w	r3, r2, r3
 8002d78:	4a5b      	ldr	r2, [pc, #364]	@ (8002ee8 <rocketReliableSendHandle+0x250>)
 8002d7a:	1898      	adds	r0, r3, r2
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	461a      	mov	r2, r3
 8002d82:	495a      	ldr	r1, [pc, #360]	@ (8002eec <rocketReliableSendHandle+0x254>)
 8002d84:	f019 f8d4 	bl	801bf30 <siprintf>
 8002d88:	e00b      	b.n	8002da2 <rocketReliableSendHandle+0x10a>
							i + 1);
				} else {
					sprintf(continuities[i], "PYRO %d HAS CONTINUITY", i + 1);
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	2232      	movs	r2, #50	@ 0x32
 8002d8e:	fb02 f303 	mul.w	r3, r2, r3
 8002d92:	4a55      	ldr	r2, [pc, #340]	@ (8002ee8 <rocketReliableSendHandle+0x250>)
 8002d94:	1898      	adds	r0, r3, r2
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	4954      	ldr	r1, [pc, #336]	@ (8002ef0 <rocketReliableSendHandle+0x258>)
 8002d9e:	f019 f8c7 	bl	801bf30 <siprintf>
				}
				rocket_messages[message_count] = continuities[i];
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	2232      	movs	r2, #50	@ 0x32
 8002da6:	fb02 f303 	mul.w	r3, r2, r3
 8002daa:	4a4f      	ldr	r2, [pc, #316]	@ (8002ee8 <rocketReliableSendHandle+0x250>)
 8002dac:	441a      	add	r2, r3
 8002dae:	4949      	ldr	r1, [pc, #292]	@ (8002ed4 <rocketReliableSendHandle+0x23c>)
 8002db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				message_count++;
 8002db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db8:	3301      	adds	r3, #1
 8002dba:	627b      	str	r3, [r7, #36]	@ 0x24
			for (int i = 0; i < 8; i++) {
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	623b      	str	r3, [r7, #32]
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	2b07      	cmp	r3, #7
 8002dc6:	ddcc      	ble.n	8002d62 <rocketReliableSendHandle+0xca>
 8002dc8:	e05f      	b.n	8002e8a <rocketReliableSendHandle+0x1f2>
			}
		}
	} else if (strcmp(state, "ARMED") == 0) {
 8002dca:	494a      	ldr	r1, [pc, #296]	@ (8002ef4 <rocketReliableSendHandle+0x25c>)
 8002dcc:	483c      	ldr	r0, [pc, #240]	@ (8002ec0 <rocketReliableSendHandle+0x228>)
 8002dce:	f7fd faf7 	bl	80003c0 <strcmp>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d14a      	bne.n	8002e6e <rocketReliableSendHandle+0x1d6>
		if (strcmp(command, "DISARM") == 0) {
 8002dd8:	4940      	ldr	r1, [pc, #256]	@ (8002edc <rocketReliableSendHandle+0x244>)
 8002dda:	483b      	ldr	r0, [pc, #236]	@ (8002ec8 <rocketReliableSendHandle+0x230>)
 8002ddc:	f7fd faf0 	bl	80003c0 <strcmp>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d128      	bne.n	8002e38 <rocketReliableSendHandle+0x1a0>
			if (!disarm(state)) {
 8002de6:	4836      	ldr	r0, [pc, #216]	@ (8002ec0 <rocketReliableSendHandle+0x228>)
 8002de8:	f7ff fdea 	bl	80029c0 <disarm>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d111      	bne.n	8002e16 <rocketReliableSendHandle+0x17e>
				strcpy(status, "DISARM SUCCESS");
 8002df2:	4a36      	ldr	r2, [pc, #216]	@ (8002ecc <rocketReliableSendHandle+0x234>)
 8002df4:	4b40      	ldr	r3, [pc, #256]	@ (8002ef8 <rocketReliableSendHandle+0x260>)
 8002df6:	4614      	mov	r4, r2
 8002df8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dfa:	c407      	stmia	r4!, {r0, r1, r2}
 8002dfc:	8023      	strh	r3, [r4, #0]
 8002dfe:	3402      	adds	r4, #2
 8002e00:	0c1b      	lsrs	r3, r3, #16
 8002e02:	7023      	strb	r3, [r4, #0]
				rocket_messages[message_count] = status;
 8002e04:	4a33      	ldr	r2, [pc, #204]	@ (8002ed4 <rocketReliableSendHandle+0x23c>)
 8002e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e08:	4930      	ldr	r1, [pc, #192]	@ (8002ecc <rocketReliableSendHandle+0x234>)
 8002e0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				message_count++;
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e10:	3301      	adds	r3, #1
 8002e12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e14:	e039      	b.n	8002e8a <rocketReliableSendHandle+0x1f2>
			} else {
				strcpy(status, "DISARM UNSUCCESS");
 8002e16:	4a2d      	ldr	r2, [pc, #180]	@ (8002ecc <rocketReliableSendHandle+0x234>)
 8002e18:	4b38      	ldr	r3, [pc, #224]	@ (8002efc <rocketReliableSendHandle+0x264>)
 8002e1a:	4614      	mov	r4, r2
 8002e1c:	461d      	mov	r5, r3
 8002e1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e22:	682b      	ldr	r3, [r5, #0]
 8002e24:	7023      	strb	r3, [r4, #0]
				rocket_messages[message_count] = status;
 8002e26:	4a2b      	ldr	r2, [pc, #172]	@ (8002ed4 <rocketReliableSendHandle+0x23c>)
 8002e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2a:	4928      	ldr	r1, [pc, #160]	@ (8002ecc <rocketReliableSendHandle+0x234>)
 8002e2c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				message_count++;
 8002e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e32:	3301      	adds	r3, #1
 8002e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e36:	e028      	b.n	8002e8a <rocketReliableSendHandle+0x1f2>
			}
		} else if (strcmp(command, "ARM") == 0) {
 8002e38:	4922      	ldr	r1, [pc, #136]	@ (8002ec4 <rocketReliableSendHandle+0x22c>)
 8002e3a:	4823      	ldr	r0, [pc, #140]	@ (8002ec8 <rocketReliableSendHandle+0x230>)
 8002e3c:	f7fd fac0 	bl	80003c0 <strcmp>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10e      	bne.n	8002e64 <rocketReliableSendHandle+0x1cc>
			strcpy(status, "ALREADY ARMED");
 8002e46:	4a21      	ldr	r2, [pc, #132]	@ (8002ecc <rocketReliableSendHandle+0x234>)
 8002e48:	4b2d      	ldr	r3, [pc, #180]	@ (8002f00 <rocketReliableSendHandle+0x268>)
 8002e4a:	4614      	mov	r4, r2
 8002e4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e4e:	c407      	stmia	r4!, {r0, r1, r2}
 8002e50:	8023      	strh	r3, [r4, #0]
			rocket_messages[message_count] = status;
 8002e52:	4a20      	ldr	r2, [pc, #128]	@ (8002ed4 <rocketReliableSendHandle+0x23c>)
 8002e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e56:	491d      	ldr	r1, [pc, #116]	@ (8002ecc <rocketReliableSendHandle+0x234>)
 8002e58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			message_count++;
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5e:	3301      	adds	r3, #1
 8002e60:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e62:	e012      	b.n	8002e8a <rocketReliableSendHandle+0x1f2>
		} else if (strcmp(command, "FIRE") == 0) {
 8002e64:	4927      	ldr	r1, [pc, #156]	@ (8002f04 <rocketReliableSendHandle+0x26c>)
 8002e66:	4818      	ldr	r0, [pc, #96]	@ (8002ec8 <rocketReliableSendHandle+0x230>)
 8002e68:	f7fd faaa 	bl	80003c0 <strcmp>
 8002e6c:	e00d      	b.n	8002e8a <rocketReliableSendHandle+0x1f2>

		}

	} else {
		strcpy(status, "state wrong!");
 8002e6e:	4a17      	ldr	r2, [pc, #92]	@ (8002ecc <rocketReliableSendHandle+0x234>)
 8002e70:	4b25      	ldr	r3, [pc, #148]	@ (8002f08 <rocketReliableSendHandle+0x270>)
 8002e72:	4614      	mov	r4, r2
 8002e74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e76:	c407      	stmia	r4!, {r0, r1, r2}
 8002e78:	7023      	strb	r3, [r4, #0]
		rocket_messages[message_count] = status;
 8002e7a:	4a16      	ldr	r2, [pc, #88]	@ (8002ed4 <rocketReliableSendHandle+0x23c>)
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7e:	4913      	ldr	r1, [pc, #76]	@ (8002ecc <rocketReliableSendHandle+0x234>)
 8002e80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		message_count++;
 8002e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e86:	3301      	adds	r3, #1
 8002e88:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	//first message is state
	sprintf(state_message, "Current state: %s\n", state);
 8002e8a:	4a0d      	ldr	r2, [pc, #52]	@ (8002ec0 <rocketReliableSendHandle+0x228>)
 8002e8c:	491f      	ldr	r1, [pc, #124]	@ (8002f0c <rocketReliableSendHandle+0x274>)
 8002e8e:	4820      	ldr	r0, [pc, #128]	@ (8002f10 <rocketReliableSendHandle+0x278>)
 8002e90:	f019 f84e 	bl	801bf30 <siprintf>
	rocket_messages[0] = state_message;
 8002e94:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed4 <rocketReliableSendHandle+0x23c>)
 8002e96:	4a1e      	ldr	r2, [pc, #120]	@ (8002f10 <rocketReliableSendHandle+0x278>)
 8002e98:	601a      	str	r2, [r3, #0]

	config.messages_count = message_count;
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9c:	61fb      	str	r3, [r7, #28]
	config.messages = rocket_messages;
 8002e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed4 <rocketReliableSendHandle+0x23c>)
 8002ea0:	61bb      	str	r3, [r7, #24]
	config.mode = RECEIVING_RELIABLE;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	613b      	str	r3, [r7, #16]
    return config;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	461c      	mov	r4, r3
 8002eaa:	f107 0310 	add.w	r3, r7, #16
 8002eae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002eb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	3728      	adds	r7, #40	@ 0x28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bdb0      	pop	{r4, r5, r7, pc}
 8002ebc:	080200f8 	.word	0x080200f8
 8002ec0:	24000000 	.word	0x24000000
 8002ec4:	08020130 	.word	0x08020130
 8002ec8:	240039d4 	.word	0x240039d4
 8002ecc:	240039a0 	.word	0x240039a0
 8002ed0:	08020134 	.word	0x08020134
 8002ed4:	24003b9c 	.word	0x24003b9c
 8002ed8:	08020140 	.word	0x08020140
 8002edc:	08020154 	.word	0x08020154
 8002ee0:	0802015c 	.word	0x0802015c
 8002ee4:	08020170 	.word	0x08020170
 8002ee8:	24003810 	.word	0x24003810
 8002eec:	08020178 	.word	0x08020178
 8002ef0:	08020198 	.word	0x08020198
 8002ef4:	08020104 	.word	0x08020104
 8002ef8:	080201b0 	.word	0x080201b0
 8002efc:	080201c0 	.word	0x080201c0
 8002f00:	080201d4 	.word	0x080201d4
 8002f04:	0802010c 	.word	0x0802010c
 8002f08:	080201e4 	.word	0x080201e4
 8002f0c:	080201f4 	.word	0x080201f4
 8002f10:	24003b38 	.word	0x24003b38

08002f14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f44 <HAL_MspInit+0x30>)
 8002f1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002f20:	4a08      	ldr	r2, [pc, #32]	@ (8002f44 <HAL_MspInit+0x30>)
 8002f22:	f043 0302 	orr.w	r3, r3, #2
 8002f26:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002f2a:	4b06      	ldr	r3, [pc, #24]	@ (8002f44 <HAL_MspInit+0x30>)
 8002f2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	607b      	str	r3, [r7, #4]
 8002f36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	58024400 	.word	0x58024400

08002f48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08c      	sub	sp, #48	@ 0x30
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f50:	f107 031c 	add.w	r3, r7, #28
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a5d      	ldr	r2, [pc, #372]	@ (80030dc <HAL_ADC_MspInit+0x194>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d159      	bne.n	800301e <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002f6a:	4b5d      	ldr	r3, [pc, #372]	@ (80030e0 <HAL_ADC_MspInit+0x198>)
 8002f6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002f70:	4a5b      	ldr	r2, [pc, #364]	@ (80030e0 <HAL_ADC_MspInit+0x198>)
 8002f72:	f043 0320 	orr.w	r3, r3, #32
 8002f76:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002f7a:	4b59      	ldr	r3, [pc, #356]	@ (80030e0 <HAL_ADC_MspInit+0x198>)
 8002f7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002f80:	f003 0320 	and.w	r3, r3, #32
 8002f84:	61bb      	str	r3, [r7, #24]
 8002f86:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f88:	4b55      	ldr	r3, [pc, #340]	@ (80030e0 <HAL_ADC_MspInit+0x198>)
 8002f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f8e:	4a54      	ldr	r2, [pc, #336]	@ (80030e0 <HAL_ADC_MspInit+0x198>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f98:	4b51      	ldr	r3, [pc, #324]	@ (80030e0 <HAL_ADC_MspInit+0x198>)
 8002f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_INP14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fa6:	2304      	movs	r3, #4
 8002fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002faa:	2303      	movs	r3, #3
 8002fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb2:	f107 031c 	add.w	r3, r7, #28
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	484a      	ldr	r0, [pc, #296]	@ (80030e4 <HAL_ADC_MspInit+0x19c>)
 8002fba:	f005 fe69 	bl	8008c90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8002fbe:	4b4a      	ldr	r3, [pc, #296]	@ (80030e8 <HAL_ADC_MspInit+0x1a0>)
 8002fc0:	4a4a      	ldr	r2, [pc, #296]	@ (80030ec <HAL_ADC_MspInit+0x1a4>)
 8002fc2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002fc4:	4b48      	ldr	r3, [pc, #288]	@ (80030e8 <HAL_ADC_MspInit+0x1a0>)
 8002fc6:	2209      	movs	r2, #9
 8002fc8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fca:	4b47      	ldr	r3, [pc, #284]	@ (80030e8 <HAL_ADC_MspInit+0x1a0>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fd0:	4b45      	ldr	r3, [pc, #276]	@ (80030e8 <HAL_ADC_MspInit+0x1a0>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002fd6:	4b44      	ldr	r3, [pc, #272]	@ (80030e8 <HAL_ADC_MspInit+0x1a0>)
 8002fd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fdc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002fde:	4b42      	ldr	r3, [pc, #264]	@ (80030e8 <HAL_ADC_MspInit+0x1a0>)
 8002fe0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002fe4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002fe6:	4b40      	ldr	r3, [pc, #256]	@ (80030e8 <HAL_ADC_MspInit+0x1a0>)
 8002fe8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002fee:	4b3e      	ldr	r3, [pc, #248]	@ (80030e8 <HAL_ADC_MspInit+0x1a0>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002ff4:	4b3c      	ldr	r3, [pc, #240]	@ (80030e8 <HAL_ADC_MspInit+0x1a0>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ffa:	4b3b      	ldr	r3, [pc, #236]	@ (80030e8 <HAL_ADC_MspInit+0x1a0>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003000:	4839      	ldr	r0, [pc, #228]	@ (80030e8 <HAL_ADC_MspInit+0x1a0>)
 8003002:	f003 fa0d 	bl	8006420 <HAL_DMA_Init>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 800300c:	f7ff fc70 	bl	80028f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a35      	ldr	r2, [pc, #212]	@ (80030e8 <HAL_ADC_MspInit+0x1a0>)
 8003014:	659a      	str	r2, [r3, #88]	@ 0x58
 8003016:	4a34      	ldr	r2, [pc, #208]	@ (80030e8 <HAL_ADC_MspInit+0x1a0>)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800301c:	e059      	b.n	80030d2 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a33      	ldr	r2, [pc, #204]	@ (80030f0 <HAL_ADC_MspInit+0x1a8>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d154      	bne.n	80030d2 <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003028:	4b2d      	ldr	r3, [pc, #180]	@ (80030e0 <HAL_ADC_MspInit+0x198>)
 800302a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800302e:	4a2c      	ldr	r2, [pc, #176]	@ (80030e0 <HAL_ADC_MspInit+0x198>)
 8003030:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003034:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003038:	4b29      	ldr	r3, [pc, #164]	@ (80030e0 <HAL_ADC_MspInit+0x198>)
 800303a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800303e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003046:	4b26      	ldr	r3, [pc, #152]	@ (80030e0 <HAL_ADC_MspInit+0x198>)
 8003048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800304c:	4a24      	ldr	r2, [pc, #144]	@ (80030e0 <HAL_ADC_MspInit+0x198>)
 800304e:	f043 0304 	orr.w	r3, r3, #4
 8003052:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003056:	4b22      	ldr	r3, [pc, #136]	@ (80030e0 <HAL_ADC_MspInit+0x198>)
 8003058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8003064:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8003068:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 800306c:	f001 f8f6 	bl	800425c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8003070:	4b20      	ldr	r3, [pc, #128]	@ (80030f4 <HAL_ADC_MspInit+0x1ac>)
 8003072:	4a21      	ldr	r2, [pc, #132]	@ (80030f8 <HAL_ADC_MspInit+0x1b0>)
 8003074:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8003076:	4b1f      	ldr	r3, [pc, #124]	@ (80030f4 <HAL_ADC_MspInit+0x1ac>)
 8003078:	2273      	movs	r2, #115	@ 0x73
 800307a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800307c:	4b1d      	ldr	r3, [pc, #116]	@ (80030f4 <HAL_ADC_MspInit+0x1ac>)
 800307e:	2200      	movs	r2, #0
 8003080:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003082:	4b1c      	ldr	r3, [pc, #112]	@ (80030f4 <HAL_ADC_MspInit+0x1ac>)
 8003084:	2200      	movs	r2, #0
 8003086:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003088:	4b1a      	ldr	r3, [pc, #104]	@ (80030f4 <HAL_ADC_MspInit+0x1ac>)
 800308a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800308e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003090:	4b18      	ldr	r3, [pc, #96]	@ (80030f4 <HAL_ADC_MspInit+0x1ac>)
 8003092:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003096:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003098:	4b16      	ldr	r3, [pc, #88]	@ (80030f4 <HAL_ADC_MspInit+0x1ac>)
 800309a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800309e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80030a0:	4b14      	ldr	r3, [pc, #80]	@ (80030f4 <HAL_ADC_MspInit+0x1ac>)
 80030a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030a6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 80030a8:	4b12      	ldr	r3, [pc, #72]	@ (80030f4 <HAL_ADC_MspInit+0x1ac>)
 80030aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80030ae:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030b0:	4b10      	ldr	r3, [pc, #64]	@ (80030f4 <HAL_ADC_MspInit+0x1ac>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80030b6:	480f      	ldr	r0, [pc, #60]	@ (80030f4 <HAL_ADC_MspInit+0x1ac>)
 80030b8:	f003 f9b2 	bl	8006420 <HAL_DMA_Init>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 80030c2:	f7ff fc15 	bl	80028f0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a0a      	ldr	r2, [pc, #40]	@ (80030f4 <HAL_ADC_MspInit+0x1ac>)
 80030ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80030cc:	4a09      	ldr	r2, [pc, #36]	@ (80030f4 <HAL_ADC_MspInit+0x1ac>)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80030d2:	bf00      	nop
 80030d4:	3730      	adds	r7, #48	@ 0x30
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40022000 	.word	0x40022000
 80030e0:	58024400 	.word	0x58024400
 80030e4:	58020000 	.word	0x58020000
 80030e8:	24000e4c 	.word	0x24000e4c
 80030ec:	40020088 	.word	0x40020088
 80030f0:	58026000 	.word	0x58026000
 80030f4:	24000ec4 	.word	0x24000ec4
 80030f8:	400204b8 	.word	0x400204b8

080030fc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b0b8      	sub	sp, #224	@ 0xe0
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003104:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	605a      	str	r2, [r3, #4]
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	60da      	str	r2, [r3, #12]
 8003112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003114:	f107 0310 	add.w	r3, r7, #16
 8003118:	22b8      	movs	r2, #184	@ 0xb8
 800311a:	2100      	movs	r1, #0
 800311c:	4618      	mov	r0, r3
 800311e:	f019 fe9f 	bl	801ce60 <memset>
  if(hfdcan->Instance==FDCAN3)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a26      	ldr	r2, [pc, #152]	@ (80031c0 <HAL_FDCAN_MspInit+0xc4>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d145      	bne.n	80031b8 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800312c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8003138:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800313c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800313e:	f107 0310 	add.w	r3, r7, #16
 8003142:	4618      	mov	r0, r3
 8003144:	f008 fb92 	bl	800b86c <HAL_RCCEx_PeriphCLKConfig>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 800314e:	f7ff fbcf 	bl	80028f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003152:	4b1c      	ldr	r3, [pc, #112]	@ (80031c4 <HAL_FDCAN_MspInit+0xc8>)
 8003154:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003158:	4a1a      	ldr	r2, [pc, #104]	@ (80031c4 <HAL_FDCAN_MspInit+0xc8>)
 800315a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800315e:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8003162:	4b18      	ldr	r3, [pc, #96]	@ (80031c4 <HAL_FDCAN_MspInit+0xc8>)
 8003164:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003170:	4b14      	ldr	r3, [pc, #80]	@ (80031c4 <HAL_FDCAN_MspInit+0xc8>)
 8003172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003176:	4a13      	ldr	r2, [pc, #76]	@ (80031c4 <HAL_FDCAN_MspInit+0xc8>)
 8003178:	f043 0320 	orr.w	r3, r3, #32
 800317c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003180:	4b10      	ldr	r3, [pc, #64]	@ (80031c4 <HAL_FDCAN_MspInit+0xc8>)
 8003182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003186:	f003 0320 	and.w	r3, r3, #32
 800318a:	60bb      	str	r3, [r7, #8]
 800318c:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800318e:	23c0      	movs	r3, #192	@ 0xc0
 8003190:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003194:	2302      	movs	r3, #2
 8003196:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319a:	2300      	movs	r3, #0
 800319c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a0:	2300      	movs	r3, #0
 80031a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 80031a6:	2302      	movs	r3, #2
 80031a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80031ac:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80031b0:	4619      	mov	r1, r3
 80031b2:	4805      	ldr	r0, [pc, #20]	@ (80031c8 <HAL_FDCAN_MspInit+0xcc>)
 80031b4:	f005 fd6c 	bl	8008c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 80031b8:	bf00      	nop
 80031ba:	37e0      	adds	r7, #224	@ 0xe0
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	4000d400 	.word	0x4000d400
 80031c4:	58024400 	.word	0x58024400
 80031c8:	58021400 	.word	0x58021400

080031cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b0b8      	sub	sp, #224	@ 0xe0
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	605a      	str	r2, [r3, #4]
 80031de:	609a      	str	r2, [r3, #8]
 80031e0:	60da      	str	r2, [r3, #12]
 80031e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031e4:	f107 0310 	add.w	r3, r7, #16
 80031e8:	22b8      	movs	r2, #184	@ 0xb8
 80031ea:	2100      	movs	r1, #0
 80031ec:	4618      	mov	r0, r3
 80031ee:	f019 fe37 	bl	801ce60 <memset>
  if(hi2c->Instance==I2C2)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a2a      	ldr	r2, [pc, #168]	@ (80032a0 <HAL_I2C_MspInit+0xd4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d14d      	bne.n	8003298 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80031fc:	f04f 0208 	mov.w	r2, #8
 8003200:	f04f 0300 	mov.w	r3, #0
 8003204:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8003208:	2300      	movs	r3, #0
 800320a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800320e:	f107 0310 	add.w	r3, r7, #16
 8003212:	4618      	mov	r0, r3
 8003214:	f008 fb2a 	bl	800b86c <HAL_RCCEx_PeriphCLKConfig>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800321e:	f7ff fb67 	bl	80028f0 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003222:	4b20      	ldr	r3, [pc, #128]	@ (80032a4 <HAL_I2C_MspInit+0xd8>)
 8003224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003228:	4a1e      	ldr	r2, [pc, #120]	@ (80032a4 <HAL_I2C_MspInit+0xd8>)
 800322a:	f043 0320 	orr.w	r3, r3, #32
 800322e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003232:	4b1c      	ldr	r3, [pc, #112]	@ (80032a4 <HAL_I2C_MspInit+0xd8>)
 8003234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003238:	f003 0320 	and.w	r3, r3, #32
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003240:	2303      	movs	r3, #3
 8003242:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003246:	2312      	movs	r3, #18
 8003248:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324c:	2300      	movs	r3, #0
 800324e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003252:	2300      	movs	r3, #0
 8003254:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003258:	2304      	movs	r3, #4
 800325a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800325e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003262:	4619      	mov	r1, r3
 8003264:	4810      	ldr	r0, [pc, #64]	@ (80032a8 <HAL_I2C_MspInit+0xdc>)
 8003266:	f005 fd13 	bl	8008c90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800326a:	4b0e      	ldr	r3, [pc, #56]	@ (80032a4 <HAL_I2C_MspInit+0xd8>)
 800326c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003270:	4a0c      	ldr	r2, [pc, #48]	@ (80032a4 <HAL_I2C_MspInit+0xd8>)
 8003272:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003276:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800327a:	4b0a      	ldr	r3, [pc, #40]	@ (80032a4 <HAL_I2C_MspInit+0xd8>)
 800327c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003280:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8003288:	2200      	movs	r2, #0
 800328a:	2101      	movs	r1, #1
 800328c:	2021      	movs	r0, #33	@ 0x21
 800328e:	f003 f892 	bl	80063b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003292:	2021      	movs	r0, #33	@ 0x21
 8003294:	f003 f8a9 	bl	80063ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003298:	bf00      	nop
 800329a:	37e0      	adds	r7, #224	@ 0xe0
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40005800 	.word	0x40005800
 80032a4:	58024400 	.word	0x58024400
 80032a8:	58021400 	.word	0x58021400

080032ac <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b0b2      	sub	sp, #200	@ 0xc8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032b4:	f107 0310 	add.w	r3, r7, #16
 80032b8:	22b8      	movs	r2, #184	@ 0xb8
 80032ba:	2100      	movs	r1, #0
 80032bc:	4618      	mov	r0, r3
 80032be:	f019 fdcf 	bl	801ce60 <memset>
  if(hrng->Instance==RNG)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a14      	ldr	r2, [pc, #80]	@ (8003318 <HAL_RNG_MspInit+0x6c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d121      	bne.n	8003310 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80032cc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80032d8:	2300      	movs	r3, #0
 80032da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032de:	f107 0310 	add.w	r3, r7, #16
 80032e2:	4618      	mov	r0, r3
 80032e4:	f008 fac2 	bl	800b86c <HAL_RCCEx_PeriphCLKConfig>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 80032ee:	f7ff faff 	bl	80028f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80032f2:	4b0a      	ldr	r3, [pc, #40]	@ (800331c <HAL_RNG_MspInit+0x70>)
 80032f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80032f8:	4a08      	ldr	r2, [pc, #32]	@ (800331c <HAL_RNG_MspInit+0x70>)
 80032fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032fe:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003302:	4b06      	ldr	r3, [pc, #24]	@ (800331c <HAL_RNG_MspInit+0x70>)
 8003304:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8003310:	bf00      	nop
 8003312:	37c8      	adds	r7, #200	@ 0xc8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	48021800 	.word	0x48021800
 800331c:	58024400 	.word	0x58024400

08003320 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b0ba      	sub	sp, #232	@ 0xe8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003328:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003338:	f107 0318 	add.w	r3, r7, #24
 800333c:	22b8      	movs	r2, #184	@ 0xb8
 800333e:	2100      	movs	r1, #0
 8003340:	4618      	mov	r0, r3
 8003342:	f019 fd8d 	bl	801ce60 <memset>
  if(hsd->Instance==SDMMC2)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a5d      	ldr	r2, [pc, #372]	@ (80034c0 <HAL_SD_MspInit+0x1a0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	f040 80b3 	bne.w	80034b8 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8003352:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800335e:	2300      	movs	r3, #0
 8003360:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003362:	f107 0318 	add.w	r3, r7, #24
 8003366:	4618      	mov	r0, r3
 8003368:	f008 fa80 	bl	800b86c <HAL_RCCEx_PeriphCLKConfig>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8003372:	f7ff fabd 	bl	80028f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8003376:	4b53      	ldr	r3, [pc, #332]	@ (80034c4 <HAL_SD_MspInit+0x1a4>)
 8003378:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800337c:	4a51      	ldr	r2, [pc, #324]	@ (80034c4 <HAL_SD_MspInit+0x1a4>)
 800337e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003382:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003386:	4b4f      	ldr	r3, [pc, #316]	@ (80034c4 <HAL_SD_MspInit+0x1a4>)
 8003388:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800338c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003394:	4b4b      	ldr	r3, [pc, #300]	@ (80034c4 <HAL_SD_MspInit+0x1a4>)
 8003396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800339a:	4a4a      	ldr	r2, [pc, #296]	@ (80034c4 <HAL_SD_MspInit+0x1a4>)
 800339c:	f043 0308 	orr.w	r3, r3, #8
 80033a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033a4:	4b47      	ldr	r3, [pc, #284]	@ (80034c4 <HAL_SD_MspInit+0x1a4>)
 80033a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	613b      	str	r3, [r7, #16]
 80033b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80033b2:	4b44      	ldr	r3, [pc, #272]	@ (80034c4 <HAL_SD_MspInit+0x1a4>)
 80033b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033b8:	4a42      	ldr	r2, [pc, #264]	@ (80034c4 <HAL_SD_MspInit+0x1a4>)
 80033ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033c2:	4b40      	ldr	r3, [pc, #256]	@ (80034c4 <HAL_SD_MspInit+0x1a4>)
 80033c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80033d0:	2340      	movs	r3, #64	@ 0x40
 80033d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d6:	2302      	movs	r3, #2
 80033d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033dc:	2300      	movs	r3, #0
 80033de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e2:	2303      	movs	r3, #3
 80033e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80033e8:	230b      	movs	r3, #11
 80033ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033ee:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80033f2:	4619      	mov	r1, r3
 80033f4:	4834      	ldr	r0, [pc, #208]	@ (80034c8 <HAL_SD_MspInit+0x1a8>)
 80033f6:	f005 fc4b 	bl	8008c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80033fa:	2380      	movs	r3, #128	@ 0x80
 80033fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003400:	2302      	movs	r3, #2
 8003402:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003406:	2301      	movs	r3, #1
 8003408:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800340c:	2303      	movs	r3, #3
 800340e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003412:	230b      	movs	r3, #11
 8003414:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003418:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800341c:	4619      	mov	r1, r3
 800341e:	482a      	ldr	r0, [pc, #168]	@ (80034c8 <HAL_SD_MspInit+0x1a8>)
 8003420:	f005 fc36 	bl	8008c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003424:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003428:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342c:	2302      	movs	r3, #2
 800342e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003432:	2301      	movs	r3, #1
 8003434:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003438:	2303      	movs	r3, #3
 800343a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800343e:	230b      	movs	r3, #11
 8003440:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003444:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003448:	4619      	mov	r1, r3
 800344a:	4820      	ldr	r0, [pc, #128]	@ (80034cc <HAL_SD_MspInit+0x1ac>)
 800344c:	f005 fc20 	bl	8008c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003450:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003454:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003458:	2302      	movs	r3, #2
 800345a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345e:	2300      	movs	r3, #0
 8003460:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003464:	2303      	movs	r3, #3
 8003466:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800346a:	230b      	movs	r3, #11
 800346c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003470:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003474:	4619      	mov	r1, r3
 8003476:	4815      	ldr	r0, [pc, #84]	@ (80034cc <HAL_SD_MspInit+0x1ac>)
 8003478:	f005 fc0a 	bl	8008c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800347c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003480:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003484:	2302      	movs	r3, #2
 8003486:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003490:	2303      	movs	r3, #3
 8003492:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8003496:	230a      	movs	r3, #10
 8003498:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800349c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80034a0:	4619      	mov	r1, r3
 80034a2:	480a      	ldr	r0, [pc, #40]	@ (80034cc <HAL_SD_MspInit+0x1ac>)
 80034a4:	f005 fbf4 	bl	8008c90 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 80034a8:	2200      	movs	r2, #0
 80034aa:	2100      	movs	r1, #0
 80034ac:	207c      	movs	r0, #124	@ 0x7c
 80034ae:	f002 ff82 	bl	80063b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 80034b2:	207c      	movs	r0, #124	@ 0x7c
 80034b4:	f002 ff99 	bl	80063ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 80034b8:	bf00      	nop
 80034ba:	37e8      	adds	r7, #232	@ 0xe8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	48022400 	.word	0x48022400
 80034c4:	58024400 	.word	0x58024400
 80034c8:	58020c00 	.word	0x58020c00
 80034cc:	58021800 	.word	0x58021800

080034d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08e      	sub	sp, #56	@ 0x38
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	605a      	str	r2, [r3, #4]
 80034e2:	609a      	str	r2, [r3, #8]
 80034e4:	60da      	str	r2, [r3, #12]
 80034e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a4f      	ldr	r2, [pc, #316]	@ (800362c <HAL_SPI_MspInit+0x15c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d12e      	bne.n	8003550 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034f2:	4b4f      	ldr	r3, [pc, #316]	@ (8003630 <HAL_SPI_MspInit+0x160>)
 80034f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034f8:	4a4d      	ldr	r2, [pc, #308]	@ (8003630 <HAL_SPI_MspInit+0x160>)
 80034fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80034fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003502:	4b4b      	ldr	r3, [pc, #300]	@ (8003630 <HAL_SPI_MspInit+0x160>)
 8003504:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003508:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800350c:	623b      	str	r3, [r7, #32]
 800350e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003510:	4b47      	ldr	r3, [pc, #284]	@ (8003630 <HAL_SPI_MspInit+0x160>)
 8003512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003516:	4a46      	ldr	r2, [pc, #280]	@ (8003630 <HAL_SPI_MspInit+0x160>)
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003520:	4b43      	ldr	r3, [pc, #268]	@ (8003630 <HAL_SPI_MspInit+0x160>)
 8003522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	61fb      	str	r3, [r7, #28]
 800352c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800352e:	23e0      	movs	r3, #224	@ 0xe0
 8003530:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003532:	2302      	movs	r3, #2
 8003534:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003536:	2300      	movs	r3, #0
 8003538:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353a:	2300      	movs	r3, #0
 800353c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800353e:	2305      	movs	r3, #5
 8003540:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003542:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003546:	4619      	mov	r1, r3
 8003548:	483a      	ldr	r0, [pc, #232]	@ (8003634 <HAL_SPI_MspInit+0x164>)
 800354a:	f005 fba1 	bl	8008c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800354e:	e068      	b.n	8003622 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a38      	ldr	r2, [pc, #224]	@ (8003638 <HAL_SPI_MspInit+0x168>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d12f      	bne.n	80035ba <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800355a:	4b35      	ldr	r3, [pc, #212]	@ (8003630 <HAL_SPI_MspInit+0x160>)
 800355c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003560:	4a33      	ldr	r2, [pc, #204]	@ (8003630 <HAL_SPI_MspInit+0x160>)
 8003562:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003566:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800356a:	4b31      	ldr	r3, [pc, #196]	@ (8003630 <HAL_SPI_MspInit+0x160>)
 800356c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003570:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003574:	61bb      	str	r3, [r7, #24]
 8003576:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003578:	4b2d      	ldr	r3, [pc, #180]	@ (8003630 <HAL_SPI_MspInit+0x160>)
 800357a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800357e:	4a2c      	ldr	r2, [pc, #176]	@ (8003630 <HAL_SPI_MspInit+0x160>)
 8003580:	f043 0302 	orr.w	r3, r3, #2
 8003584:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003588:	4b29      	ldr	r3, [pc, #164]	@ (8003630 <HAL_SPI_MspInit+0x160>)
 800358a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003596:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800359a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359c:	2302      	movs	r3, #2
 800359e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a0:	2300      	movs	r3, #0
 80035a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a4:	2300      	movs	r3, #0
 80035a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80035a8:	2305      	movs	r3, #5
 80035aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035b0:	4619      	mov	r1, r3
 80035b2:	4822      	ldr	r0, [pc, #136]	@ (800363c <HAL_SPI_MspInit+0x16c>)
 80035b4:	f005 fb6c 	bl	8008c90 <HAL_GPIO_Init>
}
 80035b8:	e033      	b.n	8003622 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a20      	ldr	r2, [pc, #128]	@ (8003640 <HAL_SPI_MspInit+0x170>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d12e      	bne.n	8003622 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80035c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003630 <HAL_SPI_MspInit+0x160>)
 80035c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035ca:	4a19      	ldr	r2, [pc, #100]	@ (8003630 <HAL_SPI_MspInit+0x160>)
 80035cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80035d4:	4b16      	ldr	r3, [pc, #88]	@ (8003630 <HAL_SPI_MspInit+0x160>)
 80035d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035e2:	4b13      	ldr	r3, [pc, #76]	@ (8003630 <HAL_SPI_MspInit+0x160>)
 80035e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035e8:	4a11      	ldr	r2, [pc, #68]	@ (8003630 <HAL_SPI_MspInit+0x160>)
 80035ea:	f043 0304 	orr.w	r3, r3, #4
 80035ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003630 <HAL_SPI_MspInit+0x160>)
 80035f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003600:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003604:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003606:	2302      	movs	r3, #2
 8003608:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360a:	2300      	movs	r3, #0
 800360c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800360e:	2300      	movs	r3, #0
 8003610:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003612:	2306      	movs	r3, #6
 8003614:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003616:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800361a:	4619      	mov	r1, r3
 800361c:	4809      	ldr	r0, [pc, #36]	@ (8003644 <HAL_SPI_MspInit+0x174>)
 800361e:	f005 fb37 	bl	8008c90 <HAL_GPIO_Init>
}
 8003622:	bf00      	nop
 8003624:	3738      	adds	r7, #56	@ 0x38
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40013000 	.word	0x40013000
 8003630:	58024400 	.word	0x58024400
 8003634:	58020000 	.word	0x58020000
 8003638:	40003800 	.word	0x40003800
 800363c:	58020400 	.word	0x58020400
 8003640:	40003c00 	.word	0x40003c00
 8003644:	58020800 	.word	0x58020800

08003648 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b08c      	sub	sp, #48	@ 0x30
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003650:	f107 031c 	add.w	r3, r7, #28
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	605a      	str	r2, [r3, #4]
 800365a:	609a      	str	r2, [r3, #8]
 800365c:	60da      	str	r2, [r3, #12]
 800365e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003668:	d15d      	bne.n	8003726 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800366a:	4b8e      	ldr	r3, [pc, #568]	@ (80038a4 <HAL_TIM_PWM_MspInit+0x25c>)
 800366c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003670:	4a8c      	ldr	r2, [pc, #560]	@ (80038a4 <HAL_TIM_PWM_MspInit+0x25c>)
 8003672:	f043 0301 	orr.w	r3, r3, #1
 8003676:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800367a:	4b8a      	ldr	r3, [pc, #552]	@ (80038a4 <HAL_TIM_PWM_MspInit+0x25c>)
 800367c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	61bb      	str	r3, [r7, #24]
 8003686:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003688:	4b86      	ldr	r3, [pc, #536]	@ (80038a4 <HAL_TIM_PWM_MspInit+0x25c>)
 800368a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800368e:	4a85      	ldr	r2, [pc, #532]	@ (80038a4 <HAL_TIM_PWM_MspInit+0x25c>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003698:	4b82      	ldr	r3, [pc, #520]	@ (80038a4 <HAL_TIM_PWM_MspInit+0x25c>)
 800369a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80036a6:	2301      	movs	r3, #1
 80036a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036aa:	2302      	movs	r3, #2
 80036ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b2:	2300      	movs	r3, #0
 80036b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036b6:	2301      	movs	r3, #1
 80036b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ba:	f107 031c 	add.w	r3, r7, #28
 80036be:	4619      	mov	r1, r3
 80036c0:	4879      	ldr	r0, [pc, #484]	@ (80038a8 <HAL_TIM_PWM_MspInit+0x260>)
 80036c2:	f005 fae5 	bl	8008c90 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 80036c6:	4b79      	ldr	r3, [pc, #484]	@ (80038ac <HAL_TIM_PWM_MspInit+0x264>)
 80036c8:	4a79      	ldr	r2, [pc, #484]	@ (80038b0 <HAL_TIM_PWM_MspInit+0x268>)
 80036ca:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 80036cc:	4b77      	ldr	r3, [pc, #476]	@ (80038ac <HAL_TIM_PWM_MspInit+0x264>)
 80036ce:	2214      	movs	r2, #20
 80036d0:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036d2:	4b76      	ldr	r3, [pc, #472]	@ (80038ac <HAL_TIM_PWM_MspInit+0x264>)
 80036d4:	2240      	movs	r2, #64	@ 0x40
 80036d6:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80036d8:	4b74      	ldr	r3, [pc, #464]	@ (80038ac <HAL_TIM_PWM_MspInit+0x264>)
 80036da:	2200      	movs	r2, #0
 80036dc:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80036de:	4b73      	ldr	r3, [pc, #460]	@ (80038ac <HAL_TIM_PWM_MspInit+0x264>)
 80036e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036e4:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80036e6:	4b71      	ldr	r3, [pc, #452]	@ (80038ac <HAL_TIM_PWM_MspInit+0x264>)
 80036e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80036ec:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80036ee:	4b6f      	ldr	r3, [pc, #444]	@ (80038ac <HAL_TIM_PWM_MspInit+0x264>)
 80036f0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80036f4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80036f6:	4b6d      	ldr	r3, [pc, #436]	@ (80038ac <HAL_TIM_PWM_MspInit+0x264>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80036fc:	4b6b      	ldr	r3, [pc, #428]	@ (80038ac <HAL_TIM_PWM_MspInit+0x264>)
 80036fe:	2200      	movs	r2, #0
 8003700:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003702:	4b6a      	ldr	r3, [pc, #424]	@ (80038ac <HAL_TIM_PWM_MspInit+0x264>)
 8003704:	2200      	movs	r2, #0
 8003706:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8003708:	4868      	ldr	r0, [pc, #416]	@ (80038ac <HAL_TIM_PWM_MspInit+0x264>)
 800370a:	f002 fe89 	bl	8006420 <HAL_DMA_Init>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8003714:	f7ff f8ec 	bl	80028f0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a64      	ldr	r2, [pc, #400]	@ (80038ac <HAL_TIM_PWM_MspInit+0x264>)
 800371c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800371e:	4a63      	ldr	r2, [pc, #396]	@ (80038ac <HAL_TIM_PWM_MspInit+0x264>)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003724:	e119      	b.n	800395a <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a62      	ldr	r2, [pc, #392]	@ (80038b4 <HAL_TIM_PWM_MspInit+0x26c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d16d      	bne.n	800380c <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003730:	4b5c      	ldr	r3, [pc, #368]	@ (80038a4 <HAL_TIM_PWM_MspInit+0x25c>)
 8003732:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003736:	4a5b      	ldr	r2, [pc, #364]	@ (80038a4 <HAL_TIM_PWM_MspInit+0x25c>)
 8003738:	f043 0302 	orr.w	r3, r3, #2
 800373c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003740:	4b58      	ldr	r3, [pc, #352]	@ (80038a4 <HAL_TIM_PWM_MspInit+0x25c>)
 8003742:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	613b      	str	r3, [r7, #16]
 800374c:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 800374e:	4b5a      	ldr	r3, [pc, #360]	@ (80038b8 <HAL_TIM_PWM_MspInit+0x270>)
 8003750:	4a5a      	ldr	r2, [pc, #360]	@ (80038bc <HAL_TIM_PWM_MspInit+0x274>)
 8003752:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8003754:	4b58      	ldr	r3, [pc, #352]	@ (80038b8 <HAL_TIM_PWM_MspInit+0x270>)
 8003756:	2218      	movs	r2, #24
 8003758:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800375a:	4b57      	ldr	r3, [pc, #348]	@ (80038b8 <HAL_TIM_PWM_MspInit+0x270>)
 800375c:	2240      	movs	r2, #64	@ 0x40
 800375e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003760:	4b55      	ldr	r3, [pc, #340]	@ (80038b8 <HAL_TIM_PWM_MspInit+0x270>)
 8003762:	2200      	movs	r2, #0
 8003764:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003766:	4b54      	ldr	r3, [pc, #336]	@ (80038b8 <HAL_TIM_PWM_MspInit+0x270>)
 8003768:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800376c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800376e:	4b52      	ldr	r3, [pc, #328]	@ (80038b8 <HAL_TIM_PWM_MspInit+0x270>)
 8003770:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003774:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003776:	4b50      	ldr	r3, [pc, #320]	@ (80038b8 <HAL_TIM_PWM_MspInit+0x270>)
 8003778:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800377c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 800377e:	4b4e      	ldr	r3, [pc, #312]	@ (80038b8 <HAL_TIM_PWM_MspInit+0x270>)
 8003780:	2200      	movs	r2, #0
 8003782:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003784:	4b4c      	ldr	r3, [pc, #304]	@ (80038b8 <HAL_TIM_PWM_MspInit+0x270>)
 8003786:	2200      	movs	r2, #0
 8003788:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800378a:	4b4b      	ldr	r3, [pc, #300]	@ (80038b8 <HAL_TIM_PWM_MspInit+0x270>)
 800378c:	2200      	movs	r2, #0
 800378e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003790:	4849      	ldr	r0, [pc, #292]	@ (80038b8 <HAL_TIM_PWM_MspInit+0x270>)
 8003792:	f002 fe45 	bl	8006420 <HAL_DMA_Init>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 800379c:	f7ff f8a8 	bl	80028f0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a45      	ldr	r2, [pc, #276]	@ (80038b8 <HAL_TIM_PWM_MspInit+0x270>)
 80037a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80037a6:	4a44      	ldr	r2, [pc, #272]	@ (80038b8 <HAL_TIM_PWM_MspInit+0x270>)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 80037ac:	4b44      	ldr	r3, [pc, #272]	@ (80038c0 <HAL_TIM_PWM_MspInit+0x278>)
 80037ae:	4a45      	ldr	r2, [pc, #276]	@ (80038c4 <HAL_TIM_PWM_MspInit+0x27c>)
 80037b0:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 80037b2:	4b43      	ldr	r3, [pc, #268]	@ (80038c0 <HAL_TIM_PWM_MspInit+0x278>)
 80037b4:	2217      	movs	r2, #23
 80037b6:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037b8:	4b41      	ldr	r3, [pc, #260]	@ (80038c0 <HAL_TIM_PWM_MspInit+0x278>)
 80037ba:	2240      	movs	r2, #64	@ 0x40
 80037bc:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80037be:	4b40      	ldr	r3, [pc, #256]	@ (80038c0 <HAL_TIM_PWM_MspInit+0x278>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80037c4:	4b3e      	ldr	r3, [pc, #248]	@ (80038c0 <HAL_TIM_PWM_MspInit+0x278>)
 80037c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037ca:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80037cc:	4b3c      	ldr	r3, [pc, #240]	@ (80038c0 <HAL_TIM_PWM_MspInit+0x278>)
 80037ce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80037d2:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80037d4:	4b3a      	ldr	r3, [pc, #232]	@ (80038c0 <HAL_TIM_PWM_MspInit+0x278>)
 80037d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80037da:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 80037dc:	4b38      	ldr	r3, [pc, #224]	@ (80038c0 <HAL_TIM_PWM_MspInit+0x278>)
 80037de:	2200      	movs	r2, #0
 80037e0:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80037e2:	4b37      	ldr	r3, [pc, #220]	@ (80038c0 <HAL_TIM_PWM_MspInit+0x278>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037e8:	4b35      	ldr	r3, [pc, #212]	@ (80038c0 <HAL_TIM_PWM_MspInit+0x278>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80037ee:	4834      	ldr	r0, [pc, #208]	@ (80038c0 <HAL_TIM_PWM_MspInit+0x278>)
 80037f0:	f002 fe16 	bl	8006420 <HAL_DMA_Init>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 80037fa:	f7ff f879 	bl	80028f0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a2f      	ldr	r2, [pc, #188]	@ (80038c0 <HAL_TIM_PWM_MspInit+0x278>)
 8003802:	625a      	str	r2, [r3, #36]	@ 0x24
 8003804:	4a2e      	ldr	r2, [pc, #184]	@ (80038c0 <HAL_TIM_PWM_MspInit+0x278>)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800380a:	e0a6      	b.n	800395a <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a2d      	ldr	r2, [pc, #180]	@ (80038c8 <HAL_TIM_PWM_MspInit+0x280>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d15e      	bne.n	80038d4 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003816:	4b23      	ldr	r3, [pc, #140]	@ (80038a4 <HAL_TIM_PWM_MspInit+0x25c>)
 8003818:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800381c:	4a21      	ldr	r2, [pc, #132]	@ (80038a4 <HAL_TIM_PWM_MspInit+0x25c>)
 800381e:	f043 0304 	orr.w	r3, r3, #4
 8003822:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003826:	4b1f      	ldr	r3, [pc, #124]	@ (80038a4 <HAL_TIM_PWM_MspInit+0x25c>)
 8003828:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8003834:	4b25      	ldr	r3, [pc, #148]	@ (80038cc <HAL_TIM_PWM_MspInit+0x284>)
 8003836:	4a26      	ldr	r2, [pc, #152]	@ (80038d0 <HAL_TIM_PWM_MspInit+0x288>)
 8003838:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 800383a:	4b24      	ldr	r3, [pc, #144]	@ (80038cc <HAL_TIM_PWM_MspInit+0x284>)
 800383c:	221f      	movs	r2, #31
 800383e:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003840:	4b22      	ldr	r3, [pc, #136]	@ (80038cc <HAL_TIM_PWM_MspInit+0x284>)
 8003842:	2240      	movs	r2, #64	@ 0x40
 8003844:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003846:	4b21      	ldr	r3, [pc, #132]	@ (80038cc <HAL_TIM_PWM_MspInit+0x284>)
 8003848:	2200      	movs	r2, #0
 800384a:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800384c:	4b1f      	ldr	r3, [pc, #124]	@ (80038cc <HAL_TIM_PWM_MspInit+0x284>)
 800384e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003852:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003854:	4b1d      	ldr	r3, [pc, #116]	@ (80038cc <HAL_TIM_PWM_MspInit+0x284>)
 8003856:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800385a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800385c:	4b1b      	ldr	r3, [pc, #108]	@ (80038cc <HAL_TIM_PWM_MspInit+0x284>)
 800385e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003862:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8003864:	4b19      	ldr	r3, [pc, #100]	@ (80038cc <HAL_TIM_PWM_MspInit+0x284>)
 8003866:	2200      	movs	r2, #0
 8003868:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800386a:	4b18      	ldr	r3, [pc, #96]	@ (80038cc <HAL_TIM_PWM_MspInit+0x284>)
 800386c:	2200      	movs	r2, #0
 800386e:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003870:	4b16      	ldr	r3, [pc, #88]	@ (80038cc <HAL_TIM_PWM_MspInit+0x284>)
 8003872:	2200      	movs	r2, #0
 8003874:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8003876:	4815      	ldr	r0, [pc, #84]	@ (80038cc <HAL_TIM_PWM_MspInit+0x284>)
 8003878:	f002 fdd2 	bl	8006420 <HAL_DMA_Init>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 8003882:	f7ff f835 	bl	80028f0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a10      	ldr	r2, [pc, #64]	@ (80038cc <HAL_TIM_PWM_MspInit+0x284>)
 800388a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800388c:	4a0f      	ldr	r2, [pc, #60]	@ (80038cc <HAL_TIM_PWM_MspInit+0x284>)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003892:	2200      	movs	r2, #0
 8003894:	2100      	movs	r1, #0
 8003896:	201e      	movs	r0, #30
 8003898:	f002 fd8d 	bl	80063b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800389c:	201e      	movs	r0, #30
 800389e:	f002 fda4 	bl	80063ea <HAL_NVIC_EnableIRQ>
}
 80038a2:	e05a      	b.n	800395a <HAL_TIM_PWM_MspInit+0x312>
 80038a4:	58024400 	.word	0x58024400
 80038a8:	58020000 	.word	0x58020000
 80038ac:	2400140c 	.word	0x2400140c
 80038b0:	40020028 	.word	0x40020028
 80038b4:	40000400 	.word	0x40000400
 80038b8:	24001484 	.word	0x24001484
 80038bc:	40020058 	.word	0x40020058
 80038c0:	240014fc 	.word	0x240014fc
 80038c4:	40020070 	.word	0x40020070
 80038c8:	40000800 	.word	0x40000800
 80038cc:	24001574 	.word	0x24001574
 80038d0:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a22      	ldr	r2, [pc, #136]	@ (8003964 <HAL_TIM_PWM_MspInit+0x31c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d13d      	bne.n	800395a <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80038de:	4b22      	ldr	r3, [pc, #136]	@ (8003968 <HAL_TIM_PWM_MspInit+0x320>)
 80038e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80038e4:	4a20      	ldr	r2, [pc, #128]	@ (8003968 <HAL_TIM_PWM_MspInit+0x320>)
 80038e6:	f043 0308 	orr.w	r3, r3, #8
 80038ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80038ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003968 <HAL_TIM_PWM_MspInit+0x320>)
 80038f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 80038fc:	4b1b      	ldr	r3, [pc, #108]	@ (800396c <HAL_TIM_PWM_MspInit+0x324>)
 80038fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003970 <HAL_TIM_PWM_MspInit+0x328>)
 8003900:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8003902:	4b1a      	ldr	r3, [pc, #104]	@ (800396c <HAL_TIM_PWM_MspInit+0x324>)
 8003904:	223a      	movs	r2, #58	@ 0x3a
 8003906:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003908:	4b18      	ldr	r3, [pc, #96]	@ (800396c <HAL_TIM_PWM_MspInit+0x324>)
 800390a:	2240      	movs	r2, #64	@ 0x40
 800390c:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800390e:	4b17      	ldr	r3, [pc, #92]	@ (800396c <HAL_TIM_PWM_MspInit+0x324>)
 8003910:	2200      	movs	r2, #0
 8003912:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003914:	4b15      	ldr	r3, [pc, #84]	@ (800396c <HAL_TIM_PWM_MspInit+0x324>)
 8003916:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800391a:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800391c:	4b13      	ldr	r3, [pc, #76]	@ (800396c <HAL_TIM_PWM_MspInit+0x324>)
 800391e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003922:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003924:	4b11      	ldr	r3, [pc, #68]	@ (800396c <HAL_TIM_PWM_MspInit+0x324>)
 8003926:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800392a:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 800392c:	4b0f      	ldr	r3, [pc, #60]	@ (800396c <HAL_TIM_PWM_MspInit+0x324>)
 800392e:	2200      	movs	r2, #0
 8003930:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8003932:	4b0e      	ldr	r3, [pc, #56]	@ (800396c <HAL_TIM_PWM_MspInit+0x324>)
 8003934:	2200      	movs	r2, #0
 8003936:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003938:	4b0c      	ldr	r3, [pc, #48]	@ (800396c <HAL_TIM_PWM_MspInit+0x324>)
 800393a:	2200      	movs	r2, #0
 800393c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 800393e:	480b      	ldr	r0, [pc, #44]	@ (800396c <HAL_TIM_PWM_MspInit+0x324>)
 8003940:	f002 fd6e 	bl	8006420 <HAL_DMA_Init>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 800394a:	f7fe ffd1 	bl	80028f0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a06      	ldr	r2, [pc, #24]	@ (800396c <HAL_TIM_PWM_MspInit+0x324>)
 8003952:	631a      	str	r2, [r3, #48]	@ 0x30
 8003954:	4a05      	ldr	r2, [pc, #20]	@ (800396c <HAL_TIM_PWM_MspInit+0x324>)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800395a:	bf00      	nop
 800395c:	3730      	adds	r7, #48	@ 0x30
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40000c00 	.word	0x40000c00
 8003968:	58024400 	.word	0x58024400
 800396c:	240015ec 	.word	0x240015ec
 8003970:	40020040 	.word	0x40020040

08003974 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a16      	ldr	r2, [pc, #88]	@ (80039dc <HAL_TIM_Base_MspInit+0x68>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d10f      	bne.n	80039a6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003986:	4b16      	ldr	r3, [pc, #88]	@ (80039e0 <HAL_TIM_Base_MspInit+0x6c>)
 8003988:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800398c:	4a14      	ldr	r2, [pc, #80]	@ (80039e0 <HAL_TIM_Base_MspInit+0x6c>)
 800398e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003992:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003996:	4b12      	ldr	r3, [pc, #72]	@ (80039e0 <HAL_TIM_Base_MspInit+0x6c>)
 8003998:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800399c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80039a4:	e013      	b.n	80039ce <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a0e      	ldr	r2, [pc, #56]	@ (80039e4 <HAL_TIM_Base_MspInit+0x70>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d10e      	bne.n	80039ce <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80039b0:	4b0b      	ldr	r3, [pc, #44]	@ (80039e0 <HAL_TIM_Base_MspInit+0x6c>)
 80039b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80039b6:	4a0a      	ldr	r2, [pc, #40]	@ (80039e0 <HAL_TIM_Base_MspInit+0x6c>)
 80039b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80039c0:	4b07      	ldr	r3, [pc, #28]	@ (80039e0 <HAL_TIM_Base_MspInit+0x6c>)
 80039c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80039c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ca:	60bb      	str	r3, [r7, #8]
 80039cc:	68bb      	ldr	r3, [r7, #8]
}
 80039ce:	bf00      	nop
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	40001c00 	.word	0x40001c00
 80039e0:	58024400 	.word	0x58024400
 80039e4:	40002000 	.word	0x40002000

080039e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08c      	sub	sp, #48	@ 0x30
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f0:	f107 031c 	add.w	r3, r7, #28
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	605a      	str	r2, [r3, #4]
 80039fa:	609a      	str	r2, [r3, #8]
 80039fc:	60da      	str	r2, [r3, #12]
 80039fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a08:	d120      	bne.n	8003a4c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a0a:	4b52      	ldr	r3, [pc, #328]	@ (8003b54 <HAL_TIM_MspPostInit+0x16c>)
 8003a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a10:	4a50      	ldr	r2, [pc, #320]	@ (8003b54 <HAL_TIM_MspPostInit+0x16c>)
 8003a12:	f043 0302 	orr.w	r3, r3, #2
 8003a16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a1a:	4b4e      	ldr	r3, [pc, #312]	@ (8003b54 <HAL_TIM_MspPostInit+0x16c>)
 8003a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	61bb      	str	r3, [r7, #24]
 8003a26:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003a28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a32:	2302      	movs	r3, #2
 8003a34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a36:	2300      	movs	r3, #0
 8003a38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a3e:	f107 031c 	add.w	r3, r7, #28
 8003a42:	4619      	mov	r1, r3
 8003a44:	4844      	ldr	r0, [pc, #272]	@ (8003b58 <HAL_TIM_MspPostInit+0x170>)
 8003a46:	f005 f923 	bl	8008c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003a4a:	e07f      	b.n	8003b4c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a42      	ldr	r2, [pc, #264]	@ (8003b5c <HAL_TIM_MspPostInit+0x174>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d11f      	bne.n	8003a96 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a56:	4b3f      	ldr	r3, [pc, #252]	@ (8003b54 <HAL_TIM_MspPostInit+0x16c>)
 8003a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a5c:	4a3d      	ldr	r2, [pc, #244]	@ (8003b54 <HAL_TIM_MspPostInit+0x16c>)
 8003a5e:	f043 0302 	orr.w	r3, r3, #2
 8003a62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a66:	4b3b      	ldr	r3, [pc, #236]	@ (8003b54 <HAL_TIM_MspPostInit+0x16c>)
 8003a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	617b      	str	r3, [r7, #20]
 8003a72:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003a74:	2330      	movs	r3, #48	@ 0x30
 8003a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a78:	2302      	movs	r3, #2
 8003a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a80:	2300      	movs	r3, #0
 8003a82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a84:	2302      	movs	r3, #2
 8003a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a88:	f107 031c 	add.w	r3, r7, #28
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4832      	ldr	r0, [pc, #200]	@ (8003b58 <HAL_TIM_MspPostInit+0x170>)
 8003a90:	f005 f8fe 	bl	8008c90 <HAL_GPIO_Init>
}
 8003a94:	e05a      	b.n	8003b4c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a31      	ldr	r2, [pc, #196]	@ (8003b60 <HAL_TIM_MspPostInit+0x178>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d131      	bne.n	8003b04 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003aa0:	4b2c      	ldr	r3, [pc, #176]	@ (8003b54 <HAL_TIM_MspPostInit+0x16c>)
 8003aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003aa6:	4a2b      	ldr	r2, [pc, #172]	@ (8003b54 <HAL_TIM_MspPostInit+0x16c>)
 8003aa8:	f043 0308 	orr.w	r3, r3, #8
 8003aac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003ab0:	4b28      	ldr	r3, [pc, #160]	@ (8003b54 <HAL_TIM_MspPostInit+0x16c>)
 8003ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003abe:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8003ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003acc:	2300      	movs	r3, #0
 8003ace:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ad4:	f107 031c 	add.w	r3, r7, #28
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4822      	ldr	r0, [pc, #136]	@ (8003b64 <HAL_TIM_MspPostInit+0x17c>)
 8003adc:	f005 f8d8 	bl	8008c90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003ae0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003aea:	2302      	movs	r3, #2
 8003aec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aee:	2300      	movs	r3, #0
 8003af0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003af2:	2302      	movs	r3, #2
 8003af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003af6:	f107 031c 	add.w	r3, r7, #28
 8003afa:	4619      	mov	r1, r3
 8003afc:	4819      	ldr	r0, [pc, #100]	@ (8003b64 <HAL_TIM_MspPostInit+0x17c>)
 8003afe:	f005 f8c7 	bl	8008c90 <HAL_GPIO_Init>
}
 8003b02:	e023      	b.n	8003b4c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a17      	ldr	r2, [pc, #92]	@ (8003b68 <HAL_TIM_MspPostInit+0x180>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d11e      	bne.n	8003b4c <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b0e:	4b11      	ldr	r3, [pc, #68]	@ (8003b54 <HAL_TIM_MspPostInit+0x16c>)
 8003b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b14:	4a0f      	ldr	r2, [pc, #60]	@ (8003b54 <HAL_TIM_MspPostInit+0x16c>)
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b54 <HAL_TIM_MspPostInit+0x16c>)
 8003b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003b2c:	2308      	movs	r3, #8
 8003b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b30:	2302      	movs	r3, #2
 8003b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b34:	2302      	movs	r3, #2
 8003b36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b40:	f107 031c 	add.w	r3, r7, #28
 8003b44:	4619      	mov	r1, r3
 8003b46:	4809      	ldr	r0, [pc, #36]	@ (8003b6c <HAL_TIM_MspPostInit+0x184>)
 8003b48:	f005 f8a2 	bl	8008c90 <HAL_GPIO_Init>
}
 8003b4c:	bf00      	nop
 8003b4e:	3730      	adds	r7, #48	@ 0x30
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	58024400 	.word	0x58024400
 8003b58:	58020400 	.word	0x58020400
 8003b5c:	40000400 	.word	0x40000400
 8003b60:	40000800 	.word	0x40000800
 8003b64:	58020c00 	.word	0x58020c00
 8003b68:	40000c00 	.word	0x40000c00
 8003b6c:	58020000 	.word	0x58020000

08003b70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b0ba      	sub	sp, #232	@ 0xe8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b78:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	605a      	str	r2, [r3, #4]
 8003b82:	609a      	str	r2, [r3, #8]
 8003b84:	60da      	str	r2, [r3, #12]
 8003b86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b88:	f107 0318 	add.w	r3, r7, #24
 8003b8c:	22b8      	movs	r2, #184	@ 0xb8
 8003b8e:	2100      	movs	r1, #0
 8003b90:	4618      	mov	r0, r3
 8003b92:	f019 f965 	bl	801ce60 <memset>
  if(huart->Instance==UART4)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a4d      	ldr	r2, [pc, #308]	@ (8003cd0 <HAL_UART_MspInit+0x160>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d147      	bne.n	8003c30 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003ba0:	f04f 0202 	mov.w	r2, #2
 8003ba4:	f04f 0300 	mov.w	r3, #0
 8003ba8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003bac:	2300      	movs	r3, #0
 8003bae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bb2:	f107 0318 	add.w	r3, r7, #24
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f007 fe58 	bl	800b86c <HAL_RCCEx_PeriphCLKConfig>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003bc2:	f7fe fe95 	bl	80028f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003bc6:	4b43      	ldr	r3, [pc, #268]	@ (8003cd4 <HAL_UART_MspInit+0x164>)
 8003bc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003bcc:	4a41      	ldr	r2, [pc, #260]	@ (8003cd4 <HAL_UART_MspInit+0x164>)
 8003bce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003bd2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003bd6:	4b3f      	ldr	r3, [pc, #252]	@ (8003cd4 <HAL_UART_MspInit+0x164>)
 8003bd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003bdc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003be0:	617b      	str	r3, [r7, #20]
 8003be2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003be4:	4b3b      	ldr	r3, [pc, #236]	@ (8003cd4 <HAL_UART_MspInit+0x164>)
 8003be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bea:	4a3a      	ldr	r2, [pc, #232]	@ (8003cd4 <HAL_UART_MspInit+0x164>)
 8003bec:	f043 0302 	orr.w	r3, r3, #2
 8003bf0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003bf4:	4b37      	ldr	r3, [pc, #220]	@ (8003cd4 <HAL_UART_MspInit+0x164>)
 8003bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	613b      	str	r3, [r7, #16]
 8003c00:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003c02:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003c06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c16:	2300      	movs	r3, #0
 8003c18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003c1c:	2308      	movs	r3, #8
 8003c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c22:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003c26:	4619      	mov	r1, r3
 8003c28:	482b      	ldr	r0, [pc, #172]	@ (8003cd8 <HAL_UART_MspInit+0x168>)
 8003c2a:	f005 f831 	bl	8008c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003c2e:	e04a      	b.n	8003cc6 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a29      	ldr	r2, [pc, #164]	@ (8003cdc <HAL_UART_MspInit+0x16c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d145      	bne.n	8003cc6 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003c3a:	f04f 0201 	mov.w	r2, #1
 8003c3e:	f04f 0300 	mov.w	r3, #0
 8003c42:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003c46:	2300      	movs	r3, #0
 8003c48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c4c:	f107 0318 	add.w	r3, r7, #24
 8003c50:	4618      	mov	r0, r3
 8003c52:	f007 fe0b 	bl	800b86c <HAL_RCCEx_PeriphCLKConfig>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003c5c:	f7fe fe48 	bl	80028f0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003c60:	4b1c      	ldr	r3, [pc, #112]	@ (8003cd4 <HAL_UART_MspInit+0x164>)
 8003c62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c66:	4a1b      	ldr	r2, [pc, #108]	@ (8003cd4 <HAL_UART_MspInit+0x164>)
 8003c68:	f043 0320 	orr.w	r3, r3, #32
 8003c6c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003c70:	4b18      	ldr	r3, [pc, #96]	@ (8003cd4 <HAL_UART_MspInit+0x164>)
 8003c72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c7e:	4b15      	ldr	r3, [pc, #84]	@ (8003cd4 <HAL_UART_MspInit+0x164>)
 8003c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c84:	4a13      	ldr	r2, [pc, #76]	@ (8003cd4 <HAL_UART_MspInit+0x164>)
 8003c86:	f043 0304 	orr.w	r3, r3, #4
 8003c8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c8e:	4b11      	ldr	r3, [pc, #68]	@ (8003cd4 <HAL_UART_MspInit+0x164>)
 8003c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c9c:	23c0      	movs	r3, #192	@ 0xc0
 8003c9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003cb4:	2307      	movs	r3, #7
 8003cb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cba:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4807      	ldr	r0, [pc, #28]	@ (8003ce0 <HAL_UART_MspInit+0x170>)
 8003cc2:	f004 ffe5 	bl	8008c90 <HAL_GPIO_Init>
}
 8003cc6:	bf00      	nop
 8003cc8:	37e8      	adds	r7, #232	@ 0xe8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40004c00 	.word	0x40004c00
 8003cd4:	58024400 	.word	0x58024400
 8003cd8:	58020400 	.word	0x58020400
 8003cdc:	40011400 	.word	0x40011400
 8003ce0:	58020800 	.word	0x58020800

08003ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ce8:	bf00      	nop
 8003cea:	e7fd      	b.n	8003ce8 <NMI_Handler+0x4>

08003cec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cf0:	bf00      	nop
 8003cf2:	e7fd      	b.n	8003cf0 <HardFault_Handler+0x4>

08003cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cf8:	bf00      	nop
 8003cfa:	e7fd      	b.n	8003cf8 <MemManage_Handler+0x4>

08003cfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d00:	bf00      	nop
 8003d02:	e7fd      	b.n	8003d00 <BusFault_Handler+0x4>

08003d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d08:	bf00      	nop
 8003d0a:	e7fd      	b.n	8003d08 <UsageFault_Handler+0x4>

08003d0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d10:	bf00      	nop
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d1e:	bf00      	nop
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d2c:	bf00      	nop
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d3a:	f000 fa4b 	bl	80041d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d3e:	bf00      	nop
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8003d48:	4802      	ldr	r0, [pc, #8]	@ (8003d54 <DMA1_Stream0_IRQHandler+0x10>)
 8003d4a:	f003 f92b 	bl	8006fa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003d4e:	bf00      	nop
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	24001574 	.word	0x24001574

08003d58 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8003d5c:	4802      	ldr	r0, [pc, #8]	@ (8003d68 <DMA1_Stream1_IRQHandler+0x10>)
 8003d5e:	f003 f921 	bl	8006fa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003d62:	bf00      	nop
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	2400140c 	.word	0x2400140c

08003d6c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003d70:	4802      	ldr	r0, [pc, #8]	@ (8003d7c <DMA1_Stream2_IRQHandler+0x10>)
 8003d72:	f003 f917 	bl	8006fa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003d76:	bf00      	nop
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	240015ec 	.word	0x240015ec

08003d80 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003d84:	4802      	ldr	r0, [pc, #8]	@ (8003d90 <DMA1_Stream3_IRQHandler+0x10>)
 8003d86:	f003 f90d 	bl	8006fa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003d8a:	bf00      	nop
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	24001484 	.word	0x24001484

08003d94 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8003d98:	4802      	ldr	r0, [pc, #8]	@ (8003da4 <DMA1_Stream4_IRQHandler+0x10>)
 8003d9a:	f003 f903 	bl	8006fa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003d9e:	bf00      	nop
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	240014fc 	.word	0x240014fc

08003da8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003dac:	4802      	ldr	r0, [pc, #8]	@ (8003db8 <DMA1_Stream5_IRQHandler+0x10>)
 8003dae:	f003 f8f9 	bl	8006fa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003db2:	bf00      	nop
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	24000e4c 	.word	0x24000e4c

08003dbc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003dc0:	4802      	ldr	r0, [pc, #8]	@ (8003dcc <TIM4_IRQHandler+0x10>)
 8003dc2:	f00d f8e3 	bl	8010f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003dc6:	bf00      	nop
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	240012dc 	.word	0x240012dc

08003dd0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003dd4:	4802      	ldr	r0, [pc, #8]	@ (8003de0 <I2C2_EV_IRQHandler+0x10>)
 8003dd6:	f005 f9c5 	bl	8009164 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003dda:	bf00      	nop
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	24000fdc 	.word	0x24000fdc

08003de4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003de8:	4802      	ldr	r0, [pc, #8]	@ (8003df4 <DMA2_Stream7_IRQHandler+0x10>)
 8003dea:	f003 f8db 	bl	8006fa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003dee:	bf00      	nop
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	24000ec4 	.word	0x24000ec4

08003df8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003dfc:	4802      	ldr	r0, [pc, #8]	@ (8003e08 <OTG_HS_IRQHandler+0x10>)
 8003dfe:	f005 fbbb 	bl	8009578 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003e02:	bf00      	nop
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	240055e8 	.word	0x240055e8

08003e0c <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8003e10:	4802      	ldr	r0, [pc, #8]	@ (8003e1c <SDMMC2_IRQHandler+0x10>)
 8003e12:	f00a fd2f 	bl	800e874 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8003e16:	bf00      	nop
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	24001030 	.word	0x24001030

08003e20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
  return 1;
 8003e24:	2301      	movs	r3, #1
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <_kill>:

int _kill(int pid, int sig)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e3a:	f019 f863 	bl	801cf04 <__errno>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2216      	movs	r2, #22
 8003e42:	601a      	str	r2, [r3, #0]
  return -1;
 8003e44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <_exit>:

void _exit (int status)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e58:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff ffe7 	bl	8003e30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e62:	bf00      	nop
 8003e64:	e7fd      	b.n	8003e62 <_exit+0x12>

08003e66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b086      	sub	sp, #24
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	60f8      	str	r0, [r7, #12]
 8003e6e:	60b9      	str	r1, [r7, #8]
 8003e70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e72:	2300      	movs	r3, #0
 8003e74:	617b      	str	r3, [r7, #20]
 8003e76:	e00a      	b.n	8003e8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003e78:	f3af 8000 	nop.w
 8003e7c:	4601      	mov	r1, r0
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	1c5a      	adds	r2, r3, #1
 8003e82:	60ba      	str	r2, [r7, #8]
 8003e84:	b2ca      	uxtb	r2, r1
 8003e86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	617b      	str	r3, [r7, #20]
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	dbf0      	blt.n	8003e78 <_read+0x12>
  }

  return len;
 8003e96:	687b      	ldr	r3, [r7, #4]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	e009      	b.n	8003ec6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	60ba      	str	r2, [r7, #8]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	617b      	str	r3, [r7, #20]
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	dbf1      	blt.n	8003eb2 <_write+0x12>
  }
  return len;
 8003ece:	687b      	ldr	r3, [r7, #4]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <_close>:

int _close(int file)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ee0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f00:	605a      	str	r2, [r3, #4]
  return 0;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <_isatty>:

int _isatty(int file)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f18:	2301      	movs	r3, #1
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b085      	sub	sp, #20
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	60f8      	str	r0, [r7, #12]
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f48:	4a14      	ldr	r2, [pc, #80]	@ (8003f9c <_sbrk+0x5c>)
 8003f4a:	4b15      	ldr	r3, [pc, #84]	@ (8003fa0 <_sbrk+0x60>)
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f54:	4b13      	ldr	r3, [pc, #76]	@ (8003fa4 <_sbrk+0x64>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d102      	bne.n	8003f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f5c:	4b11      	ldr	r3, [pc, #68]	@ (8003fa4 <_sbrk+0x64>)
 8003f5e:	4a12      	ldr	r2, [pc, #72]	@ (8003fa8 <_sbrk+0x68>)
 8003f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f62:	4b10      	ldr	r3, [pc, #64]	@ (8003fa4 <_sbrk+0x64>)
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4413      	add	r3, r2
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d207      	bcs.n	8003f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f70:	f018 ffc8 	bl	801cf04 <__errno>
 8003f74:	4603      	mov	r3, r0
 8003f76:	220c      	movs	r2, #12
 8003f78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003f7e:	e009      	b.n	8003f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f80:	4b08      	ldr	r3, [pc, #32]	@ (8003fa4 <_sbrk+0x64>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f86:	4b07      	ldr	r3, [pc, #28]	@ (8003fa4 <_sbrk+0x64>)
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	4a05      	ldr	r2, [pc, #20]	@ (8003fa4 <_sbrk+0x64>)
 8003f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f92:	68fb      	ldr	r3, [r7, #12]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	24050000 	.word	0x24050000
 8003fa0:	00000800 	.word	0x00000800
 8003fa4:	24003ebc 	.word	0x24003ebc
 8003fa8:	24005e60 	.word	0x24005e60

08003fac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003fb0:	4b32      	ldr	r3, [pc, #200]	@ (800407c <SystemInit+0xd0>)
 8003fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb6:	4a31      	ldr	r2, [pc, #196]	@ (800407c <SystemInit+0xd0>)
 8003fb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003fbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003fc0:	4b2f      	ldr	r3, [pc, #188]	@ (8004080 <SystemInit+0xd4>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 030f 	and.w	r3, r3, #15
 8003fc8:	2b06      	cmp	r3, #6
 8003fca:	d807      	bhi.n	8003fdc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003fcc:	4b2c      	ldr	r3, [pc, #176]	@ (8004080 <SystemInit+0xd4>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f023 030f 	bic.w	r3, r3, #15
 8003fd4:	4a2a      	ldr	r2, [pc, #168]	@ (8004080 <SystemInit+0xd4>)
 8003fd6:	f043 0307 	orr.w	r3, r3, #7
 8003fda:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003fdc:	4b29      	ldr	r3, [pc, #164]	@ (8004084 <SystemInit+0xd8>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a28      	ldr	r2, [pc, #160]	@ (8004084 <SystemInit+0xd8>)
 8003fe2:	f043 0301 	orr.w	r3, r3, #1
 8003fe6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003fe8:	4b26      	ldr	r3, [pc, #152]	@ (8004084 <SystemInit+0xd8>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003fee:	4b25      	ldr	r3, [pc, #148]	@ (8004084 <SystemInit+0xd8>)
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	4924      	ldr	r1, [pc, #144]	@ (8004084 <SystemInit+0xd8>)
 8003ff4:	4b24      	ldr	r3, [pc, #144]	@ (8004088 <SystemInit+0xdc>)
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003ffa:	4b21      	ldr	r3, [pc, #132]	@ (8004080 <SystemInit+0xd4>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d007      	beq.n	8004016 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004006:	4b1e      	ldr	r3, [pc, #120]	@ (8004080 <SystemInit+0xd4>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f023 030f 	bic.w	r3, r3, #15
 800400e:	4a1c      	ldr	r2, [pc, #112]	@ (8004080 <SystemInit+0xd4>)
 8004010:	f043 0307 	orr.w	r3, r3, #7
 8004014:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004016:	4b1b      	ldr	r3, [pc, #108]	@ (8004084 <SystemInit+0xd8>)
 8004018:	2200      	movs	r2, #0
 800401a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800401c:	4b19      	ldr	r3, [pc, #100]	@ (8004084 <SystemInit+0xd8>)
 800401e:	2200      	movs	r2, #0
 8004020:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004022:	4b18      	ldr	r3, [pc, #96]	@ (8004084 <SystemInit+0xd8>)
 8004024:	2200      	movs	r2, #0
 8004026:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004028:	4b16      	ldr	r3, [pc, #88]	@ (8004084 <SystemInit+0xd8>)
 800402a:	4a18      	ldr	r2, [pc, #96]	@ (800408c <SystemInit+0xe0>)
 800402c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800402e:	4b15      	ldr	r3, [pc, #84]	@ (8004084 <SystemInit+0xd8>)
 8004030:	4a17      	ldr	r2, [pc, #92]	@ (8004090 <SystemInit+0xe4>)
 8004032:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004034:	4b13      	ldr	r3, [pc, #76]	@ (8004084 <SystemInit+0xd8>)
 8004036:	4a17      	ldr	r2, [pc, #92]	@ (8004094 <SystemInit+0xe8>)
 8004038:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800403a:	4b12      	ldr	r3, [pc, #72]	@ (8004084 <SystemInit+0xd8>)
 800403c:	2200      	movs	r2, #0
 800403e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004040:	4b10      	ldr	r3, [pc, #64]	@ (8004084 <SystemInit+0xd8>)
 8004042:	4a14      	ldr	r2, [pc, #80]	@ (8004094 <SystemInit+0xe8>)
 8004044:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004046:	4b0f      	ldr	r3, [pc, #60]	@ (8004084 <SystemInit+0xd8>)
 8004048:	2200      	movs	r2, #0
 800404a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800404c:	4b0d      	ldr	r3, [pc, #52]	@ (8004084 <SystemInit+0xd8>)
 800404e:	4a11      	ldr	r2, [pc, #68]	@ (8004094 <SystemInit+0xe8>)
 8004050:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004052:	4b0c      	ldr	r3, [pc, #48]	@ (8004084 <SystemInit+0xd8>)
 8004054:	2200      	movs	r2, #0
 8004056:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004058:	4b0a      	ldr	r3, [pc, #40]	@ (8004084 <SystemInit+0xd8>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a09      	ldr	r2, [pc, #36]	@ (8004084 <SystemInit+0xd8>)
 800405e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004062:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004064:	4b07      	ldr	r3, [pc, #28]	@ (8004084 <SystemInit+0xd8>)
 8004066:	2200      	movs	r2, #0
 8004068:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800406a:	4b0b      	ldr	r3, [pc, #44]	@ (8004098 <SystemInit+0xec>)
 800406c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8004070:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004072:	bf00      	nop
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	e000ed00 	.word	0xe000ed00
 8004080:	52002000 	.word	0x52002000
 8004084:	58024400 	.word	0x58024400
 8004088:	eaf6ed7f 	.word	0xeaf6ed7f
 800408c:	02020200 	.word	0x02020200
 8004090:	01ff0000 	.word	0x01ff0000
 8004094:	01010280 	.word	0x01010280
 8004098:	52004000 	.word	0x52004000

0800409c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800409c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80040d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80040a0:	f7ff ff84 	bl	8003fac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040a4:	480c      	ldr	r0, [pc, #48]	@ (80040d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80040a6:	490d      	ldr	r1, [pc, #52]	@ (80040dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80040a8:	4a0d      	ldr	r2, [pc, #52]	@ (80040e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80040aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040ac:	e002      	b.n	80040b4 <LoopCopyDataInit>

080040ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040b2:	3304      	adds	r3, #4

080040b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040b8:	d3f9      	bcc.n	80040ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040ba:	4a0a      	ldr	r2, [pc, #40]	@ (80040e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80040bc:	4c0a      	ldr	r4, [pc, #40]	@ (80040e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80040be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040c0:	e001      	b.n	80040c6 <LoopFillZerobss>

080040c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040c4:	3204      	adds	r2, #4

080040c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040c8:	d3fb      	bcc.n	80040c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80040ca:	f018 ff21 	bl	801cf10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040ce:	f7fd fbfd 	bl	80018cc <main>
  bx  lr
 80040d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80040d4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80040d8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80040dc:	240003c8 	.word	0x240003c8
  ldr r2, =_sidata
 80040e0:	08020c3c 	.word	0x08020c3c
  ldr r2, =_sbss
 80040e4:	240003c8 	.word	0x240003c8
  ldr r4, =_ebss
 80040e8:	24005e60 	.word	0x24005e60

080040ec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040ec:	e7fe      	b.n	80040ec <ADC3_IRQHandler>
	...

080040f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040f6:	2003      	movs	r0, #3
 80040f8:	f002 f952 	bl	80063a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040fc:	f007 f9e0 	bl	800b4c0 <HAL_RCC_GetSysClockFreq>
 8004100:	4602      	mov	r2, r0
 8004102:	4b15      	ldr	r3, [pc, #84]	@ (8004158 <HAL_Init+0x68>)
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	0a1b      	lsrs	r3, r3, #8
 8004108:	f003 030f 	and.w	r3, r3, #15
 800410c:	4913      	ldr	r1, [pc, #76]	@ (800415c <HAL_Init+0x6c>)
 800410e:	5ccb      	ldrb	r3, [r1, r3]
 8004110:	f003 031f 	and.w	r3, r3, #31
 8004114:	fa22 f303 	lsr.w	r3, r2, r3
 8004118:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800411a:	4b0f      	ldr	r3, [pc, #60]	@ (8004158 <HAL_Init+0x68>)
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	4a0e      	ldr	r2, [pc, #56]	@ (800415c <HAL_Init+0x6c>)
 8004124:	5cd3      	ldrb	r3, [r2, r3]
 8004126:	f003 031f 	and.w	r3, r3, #31
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	fa22 f303 	lsr.w	r3, r2, r3
 8004130:	4a0b      	ldr	r2, [pc, #44]	@ (8004160 <HAL_Init+0x70>)
 8004132:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004134:	4a0b      	ldr	r2, [pc, #44]	@ (8004164 <HAL_Init+0x74>)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800413a:	200f      	movs	r0, #15
 800413c:	f000 f814 	bl	8004168 <HAL_InitTick>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e002      	b.n	8004150 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800414a:	f7fe fee3 	bl	8002f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	58024400 	.word	0x58024400
 800415c:	08020354 	.word	0x08020354
 8004160:	24000104 	.word	0x24000104
 8004164:	24000100 	.word	0x24000100

08004168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004170:	4b15      	ldr	r3, [pc, #84]	@ (80041c8 <HAL_InitTick+0x60>)
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e021      	b.n	80041c0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800417c:	4b13      	ldr	r3, [pc, #76]	@ (80041cc <HAL_InitTick+0x64>)
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	4b11      	ldr	r3, [pc, #68]	@ (80041c8 <HAL_InitTick+0x60>)
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	4619      	mov	r1, r3
 8004186:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800418a:	fbb3 f3f1 	udiv	r3, r3, r1
 800418e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004192:	4618      	mov	r0, r3
 8004194:	f002 f937 	bl	8006406 <HAL_SYSTICK_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e00e      	b.n	80041c0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b0f      	cmp	r3, #15
 80041a6:	d80a      	bhi.n	80041be <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041a8:	2200      	movs	r2, #0
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80041b0:	f002 f901 	bl	80063b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041b4:	4a06      	ldr	r2, [pc, #24]	@ (80041d0 <HAL_InitTick+0x68>)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	e000      	b.n	80041c0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	2400010c 	.word	0x2400010c
 80041cc:	24000100 	.word	0x24000100
 80041d0:	24000108 	.word	0x24000108

080041d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80041d8:	4b06      	ldr	r3, [pc, #24]	@ (80041f4 <HAL_IncTick+0x20>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	461a      	mov	r2, r3
 80041de:	4b06      	ldr	r3, [pc, #24]	@ (80041f8 <HAL_IncTick+0x24>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4413      	add	r3, r2
 80041e4:	4a04      	ldr	r2, [pc, #16]	@ (80041f8 <HAL_IncTick+0x24>)
 80041e6:	6013      	str	r3, [r2, #0]
}
 80041e8:	bf00      	nop
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	2400010c 	.word	0x2400010c
 80041f8:	24003ec0 	.word	0x24003ec0

080041fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  return uwTick;
 8004200:	4b03      	ldr	r3, [pc, #12]	@ (8004210 <HAL_GetTick+0x14>)
 8004202:	681b      	ldr	r3, [r3, #0]
}
 8004204:	4618      	mov	r0, r3
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	24003ec0 	.word	0x24003ec0

08004214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800421c:	f7ff ffee 	bl	80041fc <HAL_GetTick>
 8004220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800422c:	d005      	beq.n	800423a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800422e:	4b0a      	ldr	r3, [pc, #40]	@ (8004258 <HAL_Delay+0x44>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4413      	add	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800423a:	bf00      	nop
 800423c:	f7ff ffde 	bl	80041fc <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	429a      	cmp	r2, r3
 800424a:	d8f7      	bhi.n	800423c <HAL_Delay+0x28>
  {
  }
}
 800424c:	bf00      	nop
 800424e:	bf00      	nop
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	2400010c 	.word	0x2400010c

0800425c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004266:	4b07      	ldr	r3, [pc, #28]	@ (8004284 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	43db      	mvns	r3, r3
 800426e:	401a      	ands	r2, r3
 8004270:	4904      	ldr	r1, [pc, #16]	@ (8004284 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	4313      	orrs	r3, r2
 8004276:	604b      	str	r3, [r1, #4]
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	58000400 	.word	0x58000400

08004288 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	431a      	orrs	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	609a      	str	r2, [r3, #8]
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	609a      	str	r2, [r3, #8]
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	3360      	adds	r3, #96	@ 0x60
 8004302:	461a      	mov	r2, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4a10      	ldr	r2, [pc, #64]	@ (8004350 <LL_ADC_SetOffset+0x60>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d10b      	bne.n	800432c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	4313      	orrs	r3, r2
 8004322:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800432a:	e00b      	b.n	8004344 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	430b      	orrs	r3, r1
 800433e:	431a      	orrs	r2, r3
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	601a      	str	r2, [r3, #0]
}
 8004344:	bf00      	nop
 8004346:	371c      	adds	r7, #28
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	58026000 	.word	0x58026000

08004354 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	3360      	adds	r3, #96	@ 0x60
 8004362:	461a      	mov	r2, r3
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004374:	4618      	mov	r0, r3
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f003 031f 	and.w	r3, r3, #31
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	fa01 f303 	lsl.w	r3, r1, r3
 80043a0:	431a      	orrs	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	611a      	str	r2, [r3, #16]
}
 80043a6:	bf00      	nop
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
	...

080043b4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4a0c      	ldr	r2, [pc, #48]	@ (80043f4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d00e      	beq.n	80043e6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	3360      	adds	r3, #96	@ 0x60
 80043cc:	461a      	mov	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	431a      	orrs	r2, r3
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	601a      	str	r2, [r3, #0]
  }
}
 80043e6:	bf00      	nop
 80043e8:	371c      	adds	r7, #28
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	58026000 	.word	0x58026000

080043f8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4a0c      	ldr	r2, [pc, #48]	@ (8004438 <LL_ADC_SetOffsetSaturation+0x40>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d10e      	bne.n	800442a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	3360      	adds	r3, #96	@ 0x60
 8004410:	461a      	mov	r2, r3
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	431a      	orrs	r2, r3
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800442a:	bf00      	nop
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	58026000 	.word	0x58026000

0800443c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4a0c      	ldr	r2, [pc, #48]	@ (800447c <LL_ADC_SetOffsetSign+0x40>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d10e      	bne.n	800446e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	3360      	adds	r3, #96	@ 0x60
 8004454:	461a      	mov	r2, r3
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	431a      	orrs	r2, r3
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800446e:	bf00      	nop
 8004470:	371c      	adds	r7, #28
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	58026000 	.word	0x58026000

08004480 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	3360      	adds	r3, #96	@ 0x60
 8004490:	461a      	mov	r2, r3
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	4a0c      	ldr	r2, [pc, #48]	@ (80044d0 <LL_ADC_SetOffsetState+0x50>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d108      	bne.n	80044b4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	431a      	orrs	r2, r3
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80044b2:	e007      	b.n	80044c4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	431a      	orrs	r2, r3
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	601a      	str	r2, [r3, #0]
}
 80044c4:	bf00      	nop
 80044c6:	371c      	adds	r7, #28
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	58026000 	.word	0x58026000

080044d4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80044e8:	2301      	movs	r3, #1
 80044ea:	e000      	b.n	80044ee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b087      	sub	sp, #28
 80044fe:	af00      	add	r7, sp, #0
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	3330      	adds	r3, #48	@ 0x30
 800450a:	461a      	mov	r2, r3
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	0a1b      	lsrs	r3, r3, #8
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	f003 030c 	and.w	r3, r3, #12
 8004516:	4413      	add	r3, r2
 8004518:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f003 031f 	and.w	r3, r3, #31
 8004524:	211f      	movs	r1, #31
 8004526:	fa01 f303 	lsl.w	r3, r1, r3
 800452a:	43db      	mvns	r3, r3
 800452c:	401a      	ands	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	0e9b      	lsrs	r3, r3, #26
 8004532:	f003 011f 	and.w	r1, r3, #31
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	f003 031f 	and.w	r3, r3, #31
 800453c:	fa01 f303 	lsl.w	r3, r1, r3
 8004540:	431a      	orrs	r2, r3
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004546:	bf00      	nop
 8004548:	371c      	adds	r7, #28
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004552:	b480      	push	{r7}
 8004554:	b087      	sub	sp, #28
 8004556:	af00      	add	r7, sp, #0
 8004558:	60f8      	str	r0, [r7, #12]
 800455a:	60b9      	str	r1, [r7, #8]
 800455c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	3314      	adds	r3, #20
 8004562:	461a      	mov	r2, r3
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	0e5b      	lsrs	r3, r3, #25
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	f003 0304 	and.w	r3, r3, #4
 800456e:	4413      	add	r3, r2
 8004570:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	0d1b      	lsrs	r3, r3, #20
 800457a:	f003 031f 	and.w	r3, r3, #31
 800457e:	2107      	movs	r1, #7
 8004580:	fa01 f303 	lsl.w	r3, r1, r3
 8004584:	43db      	mvns	r3, r3
 8004586:	401a      	ands	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	0d1b      	lsrs	r3, r3, #20
 800458c:	f003 031f 	and.w	r3, r3, #31
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	fa01 f303 	lsl.w	r3, r1, r3
 8004596:	431a      	orrs	r2, r3
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800459c:	bf00      	nop
 800459e:	371c      	adds	r7, #28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4a1a      	ldr	r2, [pc, #104]	@ (8004620 <LL_ADC_SetChannelSingleDiff+0x78>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d115      	bne.n	80045e8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045c8:	43db      	mvns	r3, r3
 80045ca:	401a      	ands	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f003 0318 	and.w	r3, r3, #24
 80045d2:	4914      	ldr	r1, [pc, #80]	@ (8004624 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80045d4:	40d9      	lsrs	r1, r3
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	400b      	ands	r3, r1
 80045da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045de:	431a      	orrs	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80045e6:	e014      	b.n	8004612 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045f4:	43db      	mvns	r3, r3
 80045f6:	401a      	ands	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f003 0318 	and.w	r3, r3, #24
 80045fe:	4909      	ldr	r1, [pc, #36]	@ (8004624 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004600:	40d9      	lsrs	r1, r3
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	400b      	ands	r3, r1
 8004606:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800460a:	431a      	orrs	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8004612:	bf00      	nop
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	58026000 	.word	0x58026000
 8004624:	000fffff 	.word	0x000fffff

08004628 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 031f 	and.w	r3, r3, #31
}
 8004638:	4618      	mov	r0, r3
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8004654:	4618      	mov	r0, r3
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	4b04      	ldr	r3, [pc, #16]	@ (8004680 <LL_ADC_DisableDeepPowerDown+0x20>)
 800466e:	4013      	ands	r3, r2
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6093      	str	r3, [r2, #8]
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	5fffffc0 	.word	0x5fffffc0

08004684 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004694:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004698:	d101      	bne.n	800469e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800469a:	2301      	movs	r3, #1
 800469c:	e000      	b.n	80046a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	4b05      	ldr	r3, [pc, #20]	@ (80046d0 <LL_ADC_EnableInternalRegulator+0x24>)
 80046ba:	4013      	ands	r3, r2
 80046bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	6fffffc0 	.word	0x6fffffc0

080046d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046e8:	d101      	bne.n	80046ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80046ea:	2301      	movs	r3, #1
 80046ec:	e000      	b.n	80046f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	4b05      	ldr	r3, [pc, #20]	@ (8004720 <LL_ADC_Enable+0x24>)
 800470a:	4013      	ands	r3, r2
 800470c:	f043 0201 	orr.w	r2, r3, #1
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	7fffffc0 	.word	0x7fffffc0

08004724 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	4b05      	ldr	r3, [pc, #20]	@ (8004748 <LL_ADC_Disable+0x24>)
 8004732:	4013      	ands	r3, r2
 8004734:	f043 0202 	orr.w	r2, r3, #2
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	7fffffc0 	.word	0x7fffffc0

0800474c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b01      	cmp	r3, #1
 800475e:	d101      	bne.n	8004764 <LL_ADC_IsEnabled+0x18>
 8004760:	2301      	movs	r3, #1
 8004762:	e000      	b.n	8004766 <LL_ADC_IsEnabled+0x1a>
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b02      	cmp	r3, #2
 8004784:	d101      	bne.n	800478a <LL_ADC_IsDisableOngoing+0x18>
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <LL_ADC_IsDisableOngoing+0x1a>
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	4b05      	ldr	r3, [pc, #20]	@ (80047bc <LL_ADC_REG_StartConversion+0x24>)
 80047a6:	4013      	ands	r3, r2
 80047a8:	f043 0204 	orr.w	r2, r3, #4
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	7fffffc0 	.word	0x7fffffc0

080047c0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	4b05      	ldr	r3, [pc, #20]	@ (80047e4 <LL_ADC_REG_StopConversion+0x24>)
 80047ce:	4013      	ands	r3, r2
 80047d0:	f043 0210 	orr.w	r2, r3, #16
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	7fffffc0 	.word	0x7fffffc0

080047e8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d101      	bne.n	8004800 <LL_ADC_REG_IsConversionOngoing+0x18>
 80047fc:	2301      	movs	r3, #1
 80047fe:	e000      	b.n	8004802 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
	...

08004810 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	4b05      	ldr	r3, [pc, #20]	@ (8004834 <LL_ADC_INJ_StopConversion+0x24>)
 800481e:	4013      	ands	r3, r2
 8004820:	f043 0220 	orr.w	r2, r3, #32
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	7fffffc0 	.word	0x7fffffc0

08004838 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 0308 	and.w	r3, r3, #8
 8004848:	2b08      	cmp	r3, #8
 800484a:	d101      	bne.n	8004850 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800484c:	2301      	movs	r3, #1
 800484e:	e000      	b.n	8004852 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
	...

08004860 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004860:	b590      	push	{r4, r7, lr}
 8004862:	b089      	sub	sp, #36	@ 0x24
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004868:	2300      	movs	r3, #0
 800486a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800486c:	2300      	movs	r3, #0
 800486e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e1ee      	b.n	8004c58 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004884:	2b00      	cmp	r3, #0
 8004886:	d109      	bne.n	800489c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7fe fb5d 	bl	8002f48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff feef 	bl	8004684 <LL_ADC_IsDeepPowerDownEnabled>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d004      	beq.n	80048b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff fed5 	bl	8004660 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff ff0a 	bl	80046d4 <LL_ADC_IsInternalRegulatorEnabled>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d114      	bne.n	80048f0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff feee 	bl	80046ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048d0:	4b8e      	ldr	r3, [pc, #568]	@ (8004b0c <HAL_ADC_Init+0x2ac>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	099b      	lsrs	r3, r3, #6
 80048d6:	4a8e      	ldr	r2, [pc, #568]	@ (8004b10 <HAL_ADC_Init+0x2b0>)
 80048d8:	fba2 2303 	umull	r2, r3, r2, r3
 80048dc:	099b      	lsrs	r3, r3, #6
 80048de:	3301      	adds	r3, #1
 80048e0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80048e2:	e002      	b.n	80048ea <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1f9      	bne.n	80048e4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff feed 	bl	80046d4 <LL_ADC_IsInternalRegulatorEnabled>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10d      	bne.n	800491c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004904:	f043 0210 	orr.w	r2, r3, #16
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004910:	f043 0201 	orr.w	r2, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff ff61 	bl	80047e8 <LL_ADC_REG_IsConversionOngoing>
 8004926:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800492c:	f003 0310 	and.w	r3, r3, #16
 8004930:	2b00      	cmp	r3, #0
 8004932:	f040 8188 	bne.w	8004c46 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2b00      	cmp	r3, #0
 800493a:	f040 8184 	bne.w	8004c46 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004942:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004946:	f043 0202 	orr.w	r2, r3, #2
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff fefa 	bl	800474c <LL_ADC_IsEnabled>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d136      	bne.n	80049cc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a6c      	ldr	r2, [pc, #432]	@ (8004b14 <HAL_ADC_Init+0x2b4>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d004      	beq.n	8004972 <HAL_ADC_Init+0x112>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a6a      	ldr	r2, [pc, #424]	@ (8004b18 <HAL_ADC_Init+0x2b8>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d10e      	bne.n	8004990 <HAL_ADC_Init+0x130>
 8004972:	4868      	ldr	r0, [pc, #416]	@ (8004b14 <HAL_ADC_Init+0x2b4>)
 8004974:	f7ff feea 	bl	800474c <LL_ADC_IsEnabled>
 8004978:	4604      	mov	r4, r0
 800497a:	4867      	ldr	r0, [pc, #412]	@ (8004b18 <HAL_ADC_Init+0x2b8>)
 800497c:	f7ff fee6 	bl	800474c <LL_ADC_IsEnabled>
 8004980:	4603      	mov	r3, r0
 8004982:	4323      	orrs	r3, r4
 8004984:	2b00      	cmp	r3, #0
 8004986:	bf0c      	ite	eq
 8004988:	2301      	moveq	r3, #1
 800498a:	2300      	movne	r3, #0
 800498c:	b2db      	uxtb	r3, r3
 800498e:	e008      	b.n	80049a2 <HAL_ADC_Init+0x142>
 8004990:	4862      	ldr	r0, [pc, #392]	@ (8004b1c <HAL_ADC_Init+0x2bc>)
 8004992:	f7ff fedb 	bl	800474c <LL_ADC_IsEnabled>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	bf0c      	ite	eq
 800499c:	2301      	moveq	r3, #1
 800499e:	2300      	movne	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d012      	beq.n	80049cc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a5a      	ldr	r2, [pc, #360]	@ (8004b14 <HAL_ADC_Init+0x2b4>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d004      	beq.n	80049ba <HAL_ADC_Init+0x15a>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a58      	ldr	r2, [pc, #352]	@ (8004b18 <HAL_ADC_Init+0x2b8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d101      	bne.n	80049be <HAL_ADC_Init+0x15e>
 80049ba:	4a59      	ldr	r2, [pc, #356]	@ (8004b20 <HAL_ADC_Init+0x2c0>)
 80049bc:	e000      	b.n	80049c0 <HAL_ADC_Init+0x160>
 80049be:	4a59      	ldr	r2, [pc, #356]	@ (8004b24 <HAL_ADC_Init+0x2c4>)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	4619      	mov	r1, r3
 80049c6:	4610      	mov	r0, r2
 80049c8:	f7ff fc5e 	bl	8004288 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a52      	ldr	r2, [pc, #328]	@ (8004b1c <HAL_ADC_Init+0x2bc>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d129      	bne.n	8004a2a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	7e5b      	ldrb	r3, [r3, #25]
 80049da:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80049e0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80049e6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d013      	beq.n	8004a18 <HAL_ADC_Init+0x1b8>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2b0c      	cmp	r3, #12
 80049f6:	d00d      	beq.n	8004a14 <HAL_ADC_Init+0x1b4>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	2b1c      	cmp	r3, #28
 80049fe:	d007      	beq.n	8004a10 <HAL_ADC_Init+0x1b0>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2b18      	cmp	r3, #24
 8004a06:	d101      	bne.n	8004a0c <HAL_ADC_Init+0x1ac>
 8004a08:	2318      	movs	r3, #24
 8004a0a:	e006      	b.n	8004a1a <HAL_ADC_Init+0x1ba>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	e004      	b.n	8004a1a <HAL_ADC_Init+0x1ba>
 8004a10:	2310      	movs	r3, #16
 8004a12:	e002      	b.n	8004a1a <HAL_ADC_Init+0x1ba>
 8004a14:	2308      	movs	r3, #8
 8004a16:	e000      	b.n	8004a1a <HAL_ADC_Init+0x1ba>
 8004a18:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004a1a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a22:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004a24:	4313      	orrs	r3, r2
 8004a26:	61bb      	str	r3, [r7, #24]
 8004a28:	e00e      	b.n	8004a48 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	7e5b      	ldrb	r3, [r3, #25]
 8004a2e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a34:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004a3a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a42:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a44:	4313      	orrs	r3, r2
 8004a46:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d106      	bne.n	8004a60 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a56:	3b01      	subs	r3, #1
 8004a58:	045b      	lsls	r3, r3, #17
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d009      	beq.n	8004a7c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a6c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a74:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a26      	ldr	r2, [pc, #152]	@ (8004b1c <HAL_ADC_Init+0x2bc>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d115      	bne.n	8004ab2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68da      	ldr	r2, [r3, #12]
 8004a8c:	4b26      	ldr	r3, [pc, #152]	@ (8004b28 <HAL_ADC_Init+0x2c8>)
 8004a8e:	4013      	ands	r3, r2
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	6812      	ldr	r2, [r2, #0]
 8004a94:	69b9      	ldr	r1, [r7, #24]
 8004a96:	430b      	orrs	r3, r1
 8004a98:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	611a      	str	r2, [r3, #16]
 8004ab0:	e009      	b.n	8004ac6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68da      	ldr	r2, [r3, #12]
 8004ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8004b2c <HAL_ADC_Init+0x2cc>)
 8004aba:	4013      	ands	r3, r2
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6812      	ldr	r2, [r2, #0]
 8004ac0:	69b9      	ldr	r1, [r7, #24]
 8004ac2:	430b      	orrs	r3, r1
 8004ac4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7ff fe8c 	bl	80047e8 <LL_ADC_REG_IsConversionOngoing>
 8004ad0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7ff feae 	bl	8004838 <LL_ADC_INJ_IsConversionOngoing>
 8004adc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f040 808e 	bne.w	8004c02 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f040 808a 	bne.w	8004c02 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a0a      	ldr	r2, [pc, #40]	@ (8004b1c <HAL_ADC_Init+0x2bc>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d11b      	bne.n	8004b30 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	7e1b      	ldrb	r3, [r3, #24]
 8004afc:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004b04:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004b06:	4313      	orrs	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
 8004b0a:	e018      	b.n	8004b3e <HAL_ADC_Init+0x2de>
 8004b0c:	24000100 	.word	0x24000100
 8004b10:	053e2d63 	.word	0x053e2d63
 8004b14:	40022000 	.word	0x40022000
 8004b18:	40022100 	.word	0x40022100
 8004b1c:	58026000 	.word	0x58026000
 8004b20:	40022300 	.word	0x40022300
 8004b24:	58026300 	.word	0x58026300
 8004b28:	fff04007 	.word	0xfff04007
 8004b2c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	7e1b      	ldrb	r3, [r3, #24]
 8004b34:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68da      	ldr	r2, [r3, #12]
 8004b44:	4b46      	ldr	r3, [pc, #280]	@ (8004c60 <HAL_ADC_Init+0x400>)
 8004b46:	4013      	ands	r3, r2
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6812      	ldr	r2, [r2, #0]
 8004b4c:	69b9      	ldr	r1, [r7, #24]
 8004b4e:	430b      	orrs	r3, r1
 8004b50:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d137      	bne.n	8004bcc <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b60:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a3f      	ldr	r2, [pc, #252]	@ (8004c64 <HAL_ADC_Init+0x404>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d116      	bne.n	8004b9a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	691a      	ldr	r2, [r3, #16]
 8004b72:	4b3d      	ldr	r3, [pc, #244]	@ (8004c68 <HAL_ADC_Init+0x408>)
 8004b74:	4013      	ands	r3, r2
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004b7e:	4311      	orrs	r1, r2
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b84:	4311      	orrs	r1, r2
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0201 	orr.w	r2, r2, #1
 8004b96:	611a      	str	r2, [r3, #16]
 8004b98:	e020      	b.n	8004bdc <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	4b32      	ldr	r3, [pc, #200]	@ (8004c6c <HAL_ADC_Init+0x40c>)
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004ba8:	3a01      	subs	r2, #1
 8004baa:	0411      	lsls	r1, r2, #16
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004bb0:	4311      	orrs	r1, r2
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004bb6:	4311      	orrs	r1, r2
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f042 0201 	orr.w	r2, r2, #1
 8004bc8:	611a      	str	r2, [r3, #16]
 8004bca:	e007      	b.n	8004bdc <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691a      	ldr	r2, [r3, #16]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0201 	bic.w	r2, r2, #1
 8004bda:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a1b      	ldr	r2, [pc, #108]	@ (8004c64 <HAL_ADC_Init+0x404>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d002      	beq.n	8004c02 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f001 f909 	bl	8005e14 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d10c      	bne.n	8004c24 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c10:	f023 010f 	bic.w	r1, r3, #15
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	1e5a      	subs	r2, r3, #1
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c22:	e007      	b.n	8004c34 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 020f 	bic.w	r2, r2, #15
 8004c32:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c38:	f023 0303 	bic.w	r3, r3, #3
 8004c3c:	f043 0201 	orr.w	r2, r3, #1
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	661a      	str	r2, [r3, #96]	@ 0x60
 8004c44:	e007      	b.n	8004c56 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c4a:	f043 0210 	orr.w	r2, r3, #16
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004c56:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3724      	adds	r7, #36	@ 0x24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd90      	pop	{r4, r7, pc}
 8004c60:	ffffbffc 	.word	0xffffbffc
 8004c64:	58026000 	.word	0x58026000
 8004c68:	fc00f81f 	.word	0xfc00f81f
 8004c6c:	fc00f81e 	.word	0xfc00f81e

08004c70 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a5c      	ldr	r2, [pc, #368]	@ (8004df0 <HAL_ADC_Start+0x180>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d004      	beq.n	8004c8c <HAL_ADC_Start+0x1c>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a5b      	ldr	r2, [pc, #364]	@ (8004df4 <HAL_ADC_Start+0x184>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d101      	bne.n	8004c90 <HAL_ADC_Start+0x20>
 8004c8c:	4b5a      	ldr	r3, [pc, #360]	@ (8004df8 <HAL_ADC_Start+0x188>)
 8004c8e:	e000      	b.n	8004c92 <HAL_ADC_Start+0x22>
 8004c90:	4b5a      	ldr	r3, [pc, #360]	@ (8004dfc <HAL_ADC_Start+0x18c>)
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff fcc8 	bl	8004628 <LL_ADC_GetMultimode>
 8004c98:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff fda2 	bl	80047e8 <LL_ADC_REG_IsConversionOngoing>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f040 809a 	bne.w	8004de0 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d101      	bne.n	8004cba <HAL_ADC_Start+0x4a>
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	e095      	b.n	8004de6 <HAL_ADC_Start+0x176>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 ffbc 	bl	8005c40 <ADC_Enable>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004ccc:	7dfb      	ldrb	r3, [r7, #23]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f040 8081 	bne.w	8004dd6 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004cd8:	4b49      	ldr	r3, [pc, #292]	@ (8004e00 <HAL_ADC_Start+0x190>)
 8004cda:	4013      	ands	r3, r2
 8004cdc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a42      	ldr	r2, [pc, #264]	@ (8004df4 <HAL_ADC_Start+0x184>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d002      	beq.n	8004cf4 <HAL_ADC_Start+0x84>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	e000      	b.n	8004cf6 <HAL_ADC_Start+0x86>
 8004cf4:	4b3e      	ldr	r3, [pc, #248]	@ (8004df0 <HAL_ADC_Start+0x180>)
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6812      	ldr	r2, [r2, #0]
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d002      	beq.n	8004d04 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d105      	bne.n	8004d10 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d08:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d1c:	d106      	bne.n	8004d2c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d22:	f023 0206 	bic.w	r2, r3, #6
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	665a      	str	r2, [r3, #100]	@ 0x64
 8004d2a:	e002      	b.n	8004d32 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	221c      	movs	r2, #28
 8004d38:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a2b      	ldr	r2, [pc, #172]	@ (8004df4 <HAL_ADC_Start+0x184>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d002      	beq.n	8004d52 <HAL_ADC_Start+0xe2>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	e000      	b.n	8004d54 <HAL_ADC_Start+0xe4>
 8004d52:	4b27      	ldr	r3, [pc, #156]	@ (8004df0 <HAL_ADC_Start+0x180>)
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6812      	ldr	r2, [r2, #0]
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d008      	beq.n	8004d6e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d005      	beq.n	8004d6e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	2b05      	cmp	r3, #5
 8004d66:	d002      	beq.n	8004d6e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	2b09      	cmp	r3, #9
 8004d6c:	d114      	bne.n	8004d98 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d007      	beq.n	8004d8c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d80:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004d84:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff fd01 	bl	8004798 <LL_ADC_REG_StartConversion>
 8004d96:	e025      	b.n	8004de4 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d9c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a12      	ldr	r2, [pc, #72]	@ (8004df4 <HAL_ADC_Start+0x184>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d002      	beq.n	8004db4 <HAL_ADC_Start+0x144>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	e000      	b.n	8004db6 <HAL_ADC_Start+0x146>
 8004db4:	4b0e      	ldr	r3, [pc, #56]	@ (8004df0 <HAL_ADC_Start+0x180>)
 8004db6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00f      	beq.n	8004de4 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dc8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004dcc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	661a      	str	r2, [r3, #96]	@ 0x60
 8004dd4:	e006      	b.n	8004de4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8004dde:	e001      	b.n	8004de4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004de0:	2302      	movs	r3, #2
 8004de2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3718      	adds	r7, #24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	40022000 	.word	0x40022000
 8004df4:	40022100 	.word	0x40022100
 8004df8:	40022300 	.word	0x40022300
 8004dfc:	58026300 	.word	0x58026300
 8004e00:	fffff0fe 	.word	0xfffff0fe

08004e04 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d101      	bne.n	8004e1a <HAL_ADC_Stop+0x16>
 8004e16:	2302      	movs	r3, #2
 8004e18:	e021      	b.n	8004e5e <HAL_ADC_Stop+0x5a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004e22:	2103      	movs	r1, #3
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 fe4f 	bl	8005ac8 <ADC_ConversionStop>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004e2e:	7bfb      	ldrb	r3, [r7, #15]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10f      	bne.n	8004e54 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 ff8d 	bl	8005d54 <ADC_Disable>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004e3e:	7bfb      	ldrb	r3, [r7, #15]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d107      	bne.n	8004e54 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004e48:	4b07      	ldr	r3, [pc, #28]	@ (8004e68 <HAL_ADC_Stop+0x64>)
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	f043 0201 	orr.w	r2, r3, #1
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	ffffeefe 	.word	0xffffeefe

08004e6c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b088      	sub	sp, #32
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a72      	ldr	r2, [pc, #456]	@ (8005044 <HAL_ADC_PollForConversion+0x1d8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d004      	beq.n	8004e8a <HAL_ADC_PollForConversion+0x1e>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a70      	ldr	r2, [pc, #448]	@ (8005048 <HAL_ADC_PollForConversion+0x1dc>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d101      	bne.n	8004e8e <HAL_ADC_PollForConversion+0x22>
 8004e8a:	4b70      	ldr	r3, [pc, #448]	@ (800504c <HAL_ADC_PollForConversion+0x1e0>)
 8004e8c:	e000      	b.n	8004e90 <HAL_ADC_PollForConversion+0x24>
 8004e8e:	4b70      	ldr	r3, [pc, #448]	@ (8005050 <HAL_ADC_PollForConversion+0x1e4>)
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff fbc9 	bl	8004628 <LL_ADC_GetMultimode>
 8004e96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d102      	bne.n	8004ea6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004ea0:	2308      	movs	r3, #8
 8004ea2:	61fb      	str	r3, [r7, #28]
 8004ea4:	e037      	b.n	8004f16 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d005      	beq.n	8004eb8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	2b05      	cmp	r3, #5
 8004eb0:	d002      	beq.n	8004eb8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2b09      	cmp	r3, #9
 8004eb6:	d111      	bne.n	8004edc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d007      	beq.n	8004ed6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eca:	f043 0220 	orr.w	r2, r3, #32
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e0b1      	b.n	800503a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004ed6:	2304      	movs	r3, #4
 8004ed8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004eda:	e01c      	b.n	8004f16 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a58      	ldr	r2, [pc, #352]	@ (8005044 <HAL_ADC_PollForConversion+0x1d8>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d004      	beq.n	8004ef0 <HAL_ADC_PollForConversion+0x84>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a57      	ldr	r2, [pc, #348]	@ (8005048 <HAL_ADC_PollForConversion+0x1dc>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d101      	bne.n	8004ef4 <HAL_ADC_PollForConversion+0x88>
 8004ef0:	4b56      	ldr	r3, [pc, #344]	@ (800504c <HAL_ADC_PollForConversion+0x1e0>)
 8004ef2:	e000      	b.n	8004ef6 <HAL_ADC_PollForConversion+0x8a>
 8004ef4:	4b56      	ldr	r3, [pc, #344]	@ (8005050 <HAL_ADC_PollForConversion+0x1e4>)
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7ff fba4 	bl	8004644 <LL_ADC_GetMultiDMATransfer>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d007      	beq.n	8004f12 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f06:	f043 0220 	orr.w	r2, r3, #32
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e093      	b.n	800503a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004f12:	2304      	movs	r3, #4
 8004f14:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004f16:	f7ff f971 	bl	80041fc <HAL_GetTick>
 8004f1a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004f1c:	e021      	b.n	8004f62 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f24:	d01d      	beq.n	8004f62 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004f26:	f7ff f969 	bl	80041fc <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d302      	bcc.n	8004f3c <HAL_ADC_PollForConversion+0xd0>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d112      	bne.n	8004f62 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	4013      	ands	r3, r2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10b      	bne.n	8004f62 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f4e:	f043 0204 	orr.w	r2, r3, #4
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e06b      	b.n	800503a <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d0d6      	beq.n	8004f1e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f74:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7ff faa7 	bl	80044d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d01c      	beq.n	8004fc6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	7e5b      	ldrb	r3, [r3, #25]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d118      	bne.n	8004fc6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0308 	and.w	r3, r3, #8
 8004f9e:	2b08      	cmp	r3, #8
 8004fa0:	d111      	bne.n	8004fc6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fa6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d105      	bne.n	8004fc6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fbe:	f043 0201 	orr.w	r2, r3, #1
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a1f      	ldr	r2, [pc, #124]	@ (8005048 <HAL_ADC_PollForConversion+0x1dc>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d002      	beq.n	8004fd6 <HAL_ADC_PollForConversion+0x16a>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	e000      	b.n	8004fd8 <HAL_ADC_PollForConversion+0x16c>
 8004fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8005044 <HAL_ADC_PollForConversion+0x1d8>)
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6812      	ldr	r2, [r2, #0]
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d008      	beq.n	8004ff2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d005      	beq.n	8004ff2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	2b05      	cmp	r3, #5
 8004fea:	d002      	beq.n	8004ff2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	2b09      	cmp	r3, #9
 8004ff0:	d104      	bne.n	8004ffc <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	61bb      	str	r3, [r7, #24]
 8004ffa:	e00c      	b.n	8005016 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a11      	ldr	r2, [pc, #68]	@ (8005048 <HAL_ADC_PollForConversion+0x1dc>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d002      	beq.n	800500c <HAL_ADC_PollForConversion+0x1a0>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	e000      	b.n	800500e <HAL_ADC_PollForConversion+0x1a2>
 800500c:	4b0d      	ldr	r3, [pc, #52]	@ (8005044 <HAL_ADC_PollForConversion+0x1d8>)
 800500e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	2b08      	cmp	r3, #8
 800501a:	d104      	bne.n	8005026 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2208      	movs	r2, #8
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	e008      	b.n	8005038 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d103      	bne.n	8005038 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	220c      	movs	r2, #12
 8005036:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3720      	adds	r7, #32
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	40022000 	.word	0x40022000
 8005048:	40022100 	.word	0x40022100
 800504c:	40022300 	.word	0x40022300
 8005050:	58026300 	.word	0x58026300

08005054 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8005062:	4618      	mov	r0, r3
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
	...

08005070 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005070:	b590      	push	{r4, r7, lr}
 8005072:	b0b9      	sub	sp, #228	@ 0xe4
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800507a:	2300      	movs	r3, #0
 800507c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005080:	2300      	movs	r3, #0
 8005082:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800508a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	4aa9      	ldr	r2, [pc, #676]	@ (8005338 <HAL_ADC_ConfigChannel+0x2c8>)
 8005092:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800509a:	2b01      	cmp	r3, #1
 800509c:	d102      	bne.n	80050a4 <HAL_ADC_ConfigChannel+0x34>
 800509e:	2302      	movs	r3, #2
 80050a0:	f000 bcfa 	b.w	8005a98 <HAL_ADC_ConfigChannel+0xa28>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff fb99 	bl	80047e8 <LL_ADC_REG_IsConversionOngoing>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f040 84de 	bne.w	8005a7a <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a9e      	ldr	r2, [pc, #632]	@ (800533c <HAL_ADC_ConfigChannel+0x2cc>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d033      	beq.n	8005130 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d108      	bne.n	80050e6 <HAL_ADC_ConfigChannel+0x76>
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	0e9b      	lsrs	r3, r3, #26
 80050da:	f003 031f 	and.w	r3, r3, #31
 80050de:	2201      	movs	r2, #1
 80050e0:	fa02 f303 	lsl.w	r3, r2, r3
 80050e4:	e01d      	b.n	8005122 <HAL_ADC_ConfigChannel+0xb2>
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80050f2:	fa93 f3a3 	rbit	r3, r3
 80050f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80050fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80050fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005102:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800510a:	2320      	movs	r3, #32
 800510c:	e004      	b.n	8005118 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800510e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005112:	fab3 f383 	clz	r3, r3
 8005116:	b2db      	uxtb	r3, r3
 8005118:	f003 031f 	and.w	r3, r3, #31
 800511c:	2201      	movs	r2, #1
 800511e:	fa02 f303 	lsl.w	r3, r2, r3
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	6812      	ldr	r2, [r2, #0]
 8005126:	69d1      	ldr	r1, [r2, #28]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6812      	ldr	r2, [r2, #0]
 800512c:	430b      	orrs	r3, r1
 800512e:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6818      	ldr	r0, [r3, #0]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	6859      	ldr	r1, [r3, #4]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	461a      	mov	r2, r3
 800513e:	f7ff f9dc 	bl	80044fa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff fb4e 	bl	80047e8 <LL_ADC_REG_IsConversionOngoing>
 800514c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4618      	mov	r0, r3
 8005156:	f7ff fb6f 	bl	8004838 <LL_ADC_INJ_IsConversionOngoing>
 800515a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800515e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005162:	2b00      	cmp	r3, #0
 8005164:	f040 8270 	bne.w	8005648 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005168:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800516c:	2b00      	cmp	r3, #0
 800516e:	f040 826b 	bne.w	8005648 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6818      	ldr	r0, [r3, #0]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	6819      	ldr	r1, [r3, #0]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	461a      	mov	r2, r3
 8005180:	f7ff f9e7 	bl	8004552 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a6c      	ldr	r2, [pc, #432]	@ (800533c <HAL_ADC_ConfigChannel+0x2cc>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d10d      	bne.n	80051aa <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	695a      	ldr	r2, [r3, #20]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	08db      	lsrs	r3, r3, #3
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	fa02 f303 	lsl.w	r3, r2, r3
 80051a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80051a8:	e032      	b.n	8005210 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80051aa:	4b65      	ldr	r3, [pc, #404]	@ (8005340 <HAL_ADC_ConfigChannel+0x2d0>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80051b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051b6:	d10b      	bne.n	80051d0 <HAL_ADC_ConfigChannel+0x160>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	695a      	ldr	r2, [r3, #20]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	089b      	lsrs	r3, r3, #2
 80051c4:	f003 0307 	and.w	r3, r3, #7
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	fa02 f303 	lsl.w	r3, r2, r3
 80051ce:	e01d      	b.n	800520c <HAL_ADC_ConfigChannel+0x19c>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	f003 0310 	and.w	r3, r3, #16
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10b      	bne.n	80051f6 <HAL_ADC_ConfigChannel+0x186>
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	695a      	ldr	r2, [r3, #20]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	089b      	lsrs	r3, r3, #2
 80051ea:	f003 0307 	and.w	r3, r3, #7
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	fa02 f303 	lsl.w	r3, r2, r3
 80051f4:	e00a      	b.n	800520c <HAL_ADC_ConfigChannel+0x19c>
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	695a      	ldr	r2, [r3, #20]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	089b      	lsrs	r3, r3, #2
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	fa02 f303 	lsl.w	r3, r2, r3
 800520c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	2b04      	cmp	r3, #4
 8005216:	d048      	beq.n	80052aa <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6818      	ldr	r0, [r3, #0]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	6919      	ldr	r1, [r3, #16]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005228:	f7ff f862 	bl	80042f0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a42      	ldr	r2, [pc, #264]	@ (800533c <HAL_ADC_ConfigChannel+0x2cc>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d119      	bne.n	800526a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6818      	ldr	r0, [r3, #0]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	6919      	ldr	r1, [r3, #16]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	461a      	mov	r2, r3
 8005244:	f7ff f8fa 	bl	800443c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6818      	ldr	r0, [r3, #0]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	6919      	ldr	r1, [r3, #16]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d102      	bne.n	8005260 <HAL_ADC_ConfigChannel+0x1f0>
 800525a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800525e:	e000      	b.n	8005262 <HAL_ADC_ConfigChannel+0x1f2>
 8005260:	2300      	movs	r3, #0
 8005262:	461a      	mov	r2, r3
 8005264:	f7ff f8c8 	bl	80043f8 <LL_ADC_SetOffsetSaturation>
 8005268:	e1ee      	b.n	8005648 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6818      	ldr	r0, [r3, #0]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	6919      	ldr	r1, [r3, #16]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005278:	2b01      	cmp	r3, #1
 800527a:	d102      	bne.n	8005282 <HAL_ADC_ConfigChannel+0x212>
 800527c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005280:	e000      	b.n	8005284 <HAL_ADC_ConfigChannel+0x214>
 8005282:	2300      	movs	r3, #0
 8005284:	461a      	mov	r2, r3
 8005286:	f7ff f895 	bl	80043b4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6818      	ldr	r0, [r3, #0]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	6919      	ldr	r1, [r3, #16]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	7e1b      	ldrb	r3, [r3, #24]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d102      	bne.n	80052a0 <HAL_ADC_ConfigChannel+0x230>
 800529a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800529e:	e000      	b.n	80052a2 <HAL_ADC_ConfigChannel+0x232>
 80052a0:	2300      	movs	r3, #0
 80052a2:	461a      	mov	r2, r3
 80052a4:	f7ff f86c 	bl	8004380 <LL_ADC_SetDataRightShift>
 80052a8:	e1ce      	b.n	8005648 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a23      	ldr	r2, [pc, #140]	@ (800533c <HAL_ADC_ConfigChannel+0x2cc>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	f040 8181 	bne.w	80055b8 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2100      	movs	r1, #0
 80052bc:	4618      	mov	r0, r3
 80052be:	f7ff f849 	bl	8004354 <LL_ADC_GetOffsetChannel>
 80052c2:	4603      	mov	r3, r0
 80052c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10a      	bne.n	80052e2 <HAL_ADC_ConfigChannel+0x272>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2100      	movs	r1, #0
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7ff f83e 	bl	8004354 <LL_ADC_GetOffsetChannel>
 80052d8:	4603      	mov	r3, r0
 80052da:	0e9b      	lsrs	r3, r3, #26
 80052dc:	f003 021f 	and.w	r2, r3, #31
 80052e0:	e01e      	b.n	8005320 <HAL_ADC_ConfigChannel+0x2b0>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2100      	movs	r1, #0
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7ff f833 	bl	8004354 <LL_ADC_GetOffsetChannel>
 80052ee:	4603      	mov	r3, r0
 80052f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80052f8:	fa93 f3a3 	rbit	r3, r3
 80052fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8005300:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005304:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8005308:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8005310:	2320      	movs	r3, #32
 8005312:	e004      	b.n	800531e <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8005314:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005318:	fab3 f383 	clz	r3, r3
 800531c:	b2db      	uxtb	r3, r3
 800531e:	461a      	mov	r2, r3
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10b      	bne.n	8005344 <HAL_ADC_ConfigChannel+0x2d4>
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	0e9b      	lsrs	r3, r3, #26
 8005332:	f003 031f 	and.w	r3, r3, #31
 8005336:	e01e      	b.n	8005376 <HAL_ADC_ConfigChannel+0x306>
 8005338:	47ff0000 	.word	0x47ff0000
 800533c:	58026000 	.word	0x58026000
 8005340:	5c001000 	.word	0x5c001000
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800534c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005350:	fa93 f3a3 	rbit	r3, r3
 8005354:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8005358:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800535c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8005360:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8005368:	2320      	movs	r3, #32
 800536a:	e004      	b.n	8005376 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 800536c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005370:	fab3 f383 	clz	r3, r3
 8005374:	b2db      	uxtb	r3, r3
 8005376:	429a      	cmp	r2, r3
 8005378:	d106      	bne.n	8005388 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2200      	movs	r2, #0
 8005380:	2100      	movs	r1, #0
 8005382:	4618      	mov	r0, r3
 8005384:	f7ff f87c 	bl	8004480 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2101      	movs	r1, #1
 800538e:	4618      	mov	r0, r3
 8005390:	f7fe ffe0 	bl	8004354 <LL_ADC_GetOffsetChannel>
 8005394:	4603      	mov	r3, r0
 8005396:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10a      	bne.n	80053b4 <HAL_ADC_ConfigChannel+0x344>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2101      	movs	r1, #1
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7fe ffd5 	bl	8004354 <LL_ADC_GetOffsetChannel>
 80053aa:	4603      	mov	r3, r0
 80053ac:	0e9b      	lsrs	r3, r3, #26
 80053ae:	f003 021f 	and.w	r2, r3, #31
 80053b2:	e01e      	b.n	80053f2 <HAL_ADC_ConfigChannel+0x382>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2101      	movs	r1, #1
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fe ffca 	bl	8004354 <LL_ADC_GetOffsetChannel>
 80053c0:	4603      	mov	r3, r0
 80053c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80053ca:	fa93 f3a3 	rbit	r3, r3
 80053ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80053d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80053d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80053da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80053e2:	2320      	movs	r3, #32
 80053e4:	e004      	b.n	80053f0 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80053e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80053ea:	fab3 f383 	clz	r3, r3
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	461a      	mov	r2, r3
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d105      	bne.n	800540a <HAL_ADC_ConfigChannel+0x39a>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	0e9b      	lsrs	r3, r3, #26
 8005404:	f003 031f 	and.w	r3, r3, #31
 8005408:	e018      	b.n	800543c <HAL_ADC_ConfigChannel+0x3cc>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005412:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005416:	fa93 f3a3 	rbit	r3, r3
 800541a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800541e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005422:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8005426:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 800542e:	2320      	movs	r3, #32
 8005430:	e004      	b.n	800543c <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8005432:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005436:	fab3 f383 	clz	r3, r3
 800543a:	b2db      	uxtb	r3, r3
 800543c:	429a      	cmp	r2, r3
 800543e:	d106      	bne.n	800544e <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2200      	movs	r2, #0
 8005446:	2101      	movs	r1, #1
 8005448:	4618      	mov	r0, r3
 800544a:	f7ff f819 	bl	8004480 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2102      	movs	r1, #2
 8005454:	4618      	mov	r0, r3
 8005456:	f7fe ff7d 	bl	8004354 <LL_ADC_GetOffsetChannel>
 800545a:	4603      	mov	r3, r0
 800545c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10a      	bne.n	800547a <HAL_ADC_ConfigChannel+0x40a>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2102      	movs	r1, #2
 800546a:	4618      	mov	r0, r3
 800546c:	f7fe ff72 	bl	8004354 <LL_ADC_GetOffsetChannel>
 8005470:	4603      	mov	r3, r0
 8005472:	0e9b      	lsrs	r3, r3, #26
 8005474:	f003 021f 	and.w	r2, r3, #31
 8005478:	e01e      	b.n	80054b8 <HAL_ADC_ConfigChannel+0x448>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2102      	movs	r1, #2
 8005480:	4618      	mov	r0, r3
 8005482:	f7fe ff67 	bl	8004354 <LL_ADC_GetOffsetChannel>
 8005486:	4603      	mov	r3, r0
 8005488:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005490:	fa93 f3a3 	rbit	r3, r3
 8005494:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8005498:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800549c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80054a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80054a8:	2320      	movs	r3, #32
 80054aa:	e004      	b.n	80054b6 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80054ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054b0:	fab3 f383 	clz	r3, r3
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	461a      	mov	r2, r3
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d105      	bne.n	80054d0 <HAL_ADC_ConfigChannel+0x460>
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	0e9b      	lsrs	r3, r3, #26
 80054ca:	f003 031f 	and.w	r3, r3, #31
 80054ce:	e014      	b.n	80054fa <HAL_ADC_ConfigChannel+0x48a>
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80054d8:	fa93 f3a3 	rbit	r3, r3
 80054dc:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80054de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80054e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80054ec:	2320      	movs	r3, #32
 80054ee:	e004      	b.n	80054fa <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80054f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80054f4:	fab3 f383 	clz	r3, r3
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d106      	bne.n	800550c <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2200      	movs	r2, #0
 8005504:	2102      	movs	r1, #2
 8005506:	4618      	mov	r0, r3
 8005508:	f7fe ffba 	bl	8004480 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2103      	movs	r1, #3
 8005512:	4618      	mov	r0, r3
 8005514:	f7fe ff1e 	bl	8004354 <LL_ADC_GetOffsetChannel>
 8005518:	4603      	mov	r3, r0
 800551a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10a      	bne.n	8005538 <HAL_ADC_ConfigChannel+0x4c8>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2103      	movs	r1, #3
 8005528:	4618      	mov	r0, r3
 800552a:	f7fe ff13 	bl	8004354 <LL_ADC_GetOffsetChannel>
 800552e:	4603      	mov	r3, r0
 8005530:	0e9b      	lsrs	r3, r3, #26
 8005532:	f003 021f 	and.w	r2, r3, #31
 8005536:	e017      	b.n	8005568 <HAL_ADC_ConfigChannel+0x4f8>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2103      	movs	r1, #3
 800553e:	4618      	mov	r0, r3
 8005540:	f7fe ff08 	bl	8004354 <LL_ADC_GetOffsetChannel>
 8005544:	4603      	mov	r3, r0
 8005546:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005548:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800554a:	fa93 f3a3 	rbit	r3, r3
 800554e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005550:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005552:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8005554:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800555a:	2320      	movs	r3, #32
 800555c:	e003      	b.n	8005566 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800555e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005560:	fab3 f383 	clz	r3, r3
 8005564:	b2db      	uxtb	r3, r3
 8005566:	461a      	mov	r2, r3
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005570:	2b00      	cmp	r3, #0
 8005572:	d105      	bne.n	8005580 <HAL_ADC_ConfigChannel+0x510>
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	0e9b      	lsrs	r3, r3, #26
 800557a:	f003 031f 	and.w	r3, r3, #31
 800557e:	e011      	b.n	80055a4 <HAL_ADC_ConfigChannel+0x534>
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005586:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005588:	fa93 f3a3 	rbit	r3, r3
 800558c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800558e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005590:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8005592:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8005598:	2320      	movs	r3, #32
 800559a:	e003      	b.n	80055a4 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 800559c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800559e:	fab3 f383 	clz	r3, r3
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d14f      	bne.n	8005648 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2200      	movs	r2, #0
 80055ae:	2103      	movs	r1, #3
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7fe ff65 	bl	8004480 <LL_ADC_SetOffsetState>
 80055b6:	e047      	b.n	8005648 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	069b      	lsls	r3, r3, #26
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d107      	bne.n	80055dc <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80055da:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	069b      	lsls	r3, r3, #26
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d107      	bne.n	8005600 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80055fe:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005606:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	069b      	lsls	r3, r3, #26
 8005610:	429a      	cmp	r2, r3
 8005612:	d107      	bne.n	8005624 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005622:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800562a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	069b      	lsls	r3, r3, #26
 8005634:	429a      	cmp	r2, r3
 8005636:	d107      	bne.n	8005648 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005646:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4618      	mov	r0, r3
 800564e:	f7ff f87d 	bl	800474c <LL_ADC_IsEnabled>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	f040 8219 	bne.w	8005a8c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6818      	ldr	r0, [r3, #0]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	6819      	ldr	r1, [r3, #0]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	461a      	mov	r2, r3
 8005668:	f7fe ff9e 	bl	80045a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	4aa1      	ldr	r2, [pc, #644]	@ (80058f8 <HAL_ADC_ConfigChannel+0x888>)
 8005672:	4293      	cmp	r3, r2
 8005674:	f040 812e 	bne.w	80058d4 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10b      	bne.n	80056a0 <HAL_ADC_ConfigChannel+0x630>
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	0e9b      	lsrs	r3, r3, #26
 800568e:	3301      	adds	r3, #1
 8005690:	f003 031f 	and.w	r3, r3, #31
 8005694:	2b09      	cmp	r3, #9
 8005696:	bf94      	ite	ls
 8005698:	2301      	movls	r3, #1
 800569a:	2300      	movhi	r3, #0
 800569c:	b2db      	uxtb	r3, r3
 800569e:	e019      	b.n	80056d4 <HAL_ADC_ConfigChannel+0x664>
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056a8:	fa93 f3a3 	rbit	r3, r3
 80056ac:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80056ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80056b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d101      	bne.n	80056bc <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80056b8:	2320      	movs	r3, #32
 80056ba:	e003      	b.n	80056c4 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80056bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056be:	fab3 f383 	clz	r3, r3
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	3301      	adds	r3, #1
 80056c6:	f003 031f 	and.w	r3, r3, #31
 80056ca:	2b09      	cmp	r3, #9
 80056cc:	bf94      	ite	ls
 80056ce:	2301      	movls	r3, #1
 80056d0:	2300      	movhi	r3, #0
 80056d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d079      	beq.n	80057cc <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d107      	bne.n	80056f4 <HAL_ADC_ConfigChannel+0x684>
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	0e9b      	lsrs	r3, r3, #26
 80056ea:	3301      	adds	r3, #1
 80056ec:	069b      	lsls	r3, r3, #26
 80056ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80056f2:	e015      	b.n	8005720 <HAL_ADC_ConfigChannel+0x6b0>
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056fc:	fa93 f3a3 	rbit	r3, r3
 8005700:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8005702:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005704:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8005706:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 800570c:	2320      	movs	r3, #32
 800570e:	e003      	b.n	8005718 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8005710:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005712:	fab3 f383 	clz	r3, r3
 8005716:	b2db      	uxtb	r3, r3
 8005718:	3301      	adds	r3, #1
 800571a:	069b      	lsls	r3, r3, #26
 800571c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005728:	2b00      	cmp	r3, #0
 800572a:	d109      	bne.n	8005740 <HAL_ADC_ConfigChannel+0x6d0>
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	0e9b      	lsrs	r3, r3, #26
 8005732:	3301      	adds	r3, #1
 8005734:	f003 031f 	and.w	r3, r3, #31
 8005738:	2101      	movs	r1, #1
 800573a:	fa01 f303 	lsl.w	r3, r1, r3
 800573e:	e017      	b.n	8005770 <HAL_ADC_ConfigChannel+0x700>
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005746:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005748:	fa93 f3a3 	rbit	r3, r3
 800574c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800574e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005750:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8005752:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005754:	2b00      	cmp	r3, #0
 8005756:	d101      	bne.n	800575c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8005758:	2320      	movs	r3, #32
 800575a:	e003      	b.n	8005764 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 800575c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800575e:	fab3 f383 	clz	r3, r3
 8005762:	b2db      	uxtb	r3, r3
 8005764:	3301      	adds	r3, #1
 8005766:	f003 031f 	and.w	r3, r3, #31
 800576a:	2101      	movs	r1, #1
 800576c:	fa01 f303 	lsl.w	r3, r1, r3
 8005770:	ea42 0103 	orr.w	r1, r2, r3
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10a      	bne.n	8005796 <HAL_ADC_ConfigChannel+0x726>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	0e9b      	lsrs	r3, r3, #26
 8005786:	3301      	adds	r3, #1
 8005788:	f003 021f 	and.w	r2, r3, #31
 800578c:	4613      	mov	r3, r2
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	4413      	add	r3, r2
 8005792:	051b      	lsls	r3, r3, #20
 8005794:	e018      	b.n	80057c8 <HAL_ADC_ConfigChannel+0x758>
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800579c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800579e:	fa93 f3a3 	rbit	r3, r3
 80057a2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80057a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80057a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80057ae:	2320      	movs	r3, #32
 80057b0:	e003      	b.n	80057ba <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80057b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b4:	fab3 f383 	clz	r3, r3
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	3301      	adds	r3, #1
 80057bc:	f003 021f 	and.w	r2, r3, #31
 80057c0:	4613      	mov	r3, r2
 80057c2:	005b      	lsls	r3, r3, #1
 80057c4:	4413      	add	r3, r2
 80057c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057c8:	430b      	orrs	r3, r1
 80057ca:	e07e      	b.n	80058ca <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d107      	bne.n	80057e8 <HAL_ADC_ConfigChannel+0x778>
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	0e9b      	lsrs	r3, r3, #26
 80057de:	3301      	adds	r3, #1
 80057e0:	069b      	lsls	r3, r3, #26
 80057e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80057e6:	e015      	b.n	8005814 <HAL_ADC_ConfigChannel+0x7a4>
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f0:	fa93 f3a3 	rbit	r3, r3
 80057f4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80057f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80057fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8005800:	2320      	movs	r3, #32
 8005802:	e003      	b.n	800580c <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8005804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005806:	fab3 f383 	clz	r3, r3
 800580a:	b2db      	uxtb	r3, r3
 800580c:	3301      	adds	r3, #1
 800580e:	069b      	lsls	r3, r3, #26
 8005810:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800581c:	2b00      	cmp	r3, #0
 800581e:	d109      	bne.n	8005834 <HAL_ADC_ConfigChannel+0x7c4>
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	0e9b      	lsrs	r3, r3, #26
 8005826:	3301      	adds	r3, #1
 8005828:	f003 031f 	and.w	r3, r3, #31
 800582c:	2101      	movs	r1, #1
 800582e:	fa01 f303 	lsl.w	r3, r1, r3
 8005832:	e017      	b.n	8005864 <HAL_ADC_ConfigChannel+0x7f4>
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	fa93 f3a3 	rbit	r3, r3
 8005840:	61bb      	str	r3, [r7, #24]
  return result;
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 800584c:	2320      	movs	r3, #32
 800584e:	e003      	b.n	8005858 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	fab3 f383 	clz	r3, r3
 8005856:	b2db      	uxtb	r3, r3
 8005858:	3301      	adds	r3, #1
 800585a:	f003 031f 	and.w	r3, r3, #31
 800585e:	2101      	movs	r1, #1
 8005860:	fa01 f303 	lsl.w	r3, r1, r3
 8005864:	ea42 0103 	orr.w	r1, r2, r3
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10d      	bne.n	8005890 <HAL_ADC_ConfigChannel+0x820>
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	0e9b      	lsrs	r3, r3, #26
 800587a:	3301      	adds	r3, #1
 800587c:	f003 021f 	and.w	r2, r3, #31
 8005880:	4613      	mov	r3, r2
 8005882:	005b      	lsls	r3, r3, #1
 8005884:	4413      	add	r3, r2
 8005886:	3b1e      	subs	r3, #30
 8005888:	051b      	lsls	r3, r3, #20
 800588a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800588e:	e01b      	b.n	80058c8 <HAL_ADC_ConfigChannel+0x858>
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	fa93 f3a3 	rbit	r3, r3
 800589c:	60fb      	str	r3, [r7, #12]
  return result;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80058a8:	2320      	movs	r3, #32
 80058aa:	e003      	b.n	80058b4 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	fab3 f383 	clz	r3, r3
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	3301      	adds	r3, #1
 80058b6:	f003 021f 	and.w	r2, r3, #31
 80058ba:	4613      	mov	r3, r2
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	4413      	add	r3, r2
 80058c0:	3b1e      	subs	r3, #30
 80058c2:	051b      	lsls	r3, r3, #20
 80058c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058c8:	430b      	orrs	r3, r1
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	6892      	ldr	r2, [r2, #8]
 80058ce:	4619      	mov	r1, r3
 80058d0:	f7fe fe3f 	bl	8004552 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f280 80d7 	bge.w	8005a8c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a06      	ldr	r2, [pc, #24]	@ (80058fc <HAL_ADC_ConfigChannel+0x88c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d004      	beq.n	80058f2 <HAL_ADC_ConfigChannel+0x882>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a04      	ldr	r2, [pc, #16]	@ (8005900 <HAL_ADC_ConfigChannel+0x890>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d10a      	bne.n	8005908 <HAL_ADC_ConfigChannel+0x898>
 80058f2:	4b04      	ldr	r3, [pc, #16]	@ (8005904 <HAL_ADC_ConfigChannel+0x894>)
 80058f4:	e009      	b.n	800590a <HAL_ADC_ConfigChannel+0x89a>
 80058f6:	bf00      	nop
 80058f8:	47ff0000 	.word	0x47ff0000
 80058fc:	40022000 	.word	0x40022000
 8005900:	40022100 	.word	0x40022100
 8005904:	40022300 	.word	0x40022300
 8005908:	4b65      	ldr	r3, [pc, #404]	@ (8005aa0 <HAL_ADC_ConfigChannel+0xa30>)
 800590a:	4618      	mov	r0, r3
 800590c:	f7fe fce2 	bl	80042d4 <LL_ADC_GetCommonPathInternalCh>
 8005910:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a62      	ldr	r2, [pc, #392]	@ (8005aa4 <HAL_ADC_ConfigChannel+0xa34>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d004      	beq.n	8005928 <HAL_ADC_ConfigChannel+0x8b8>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a61      	ldr	r2, [pc, #388]	@ (8005aa8 <HAL_ADC_ConfigChannel+0xa38>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d10e      	bne.n	8005946 <HAL_ADC_ConfigChannel+0x8d6>
 8005928:	485e      	ldr	r0, [pc, #376]	@ (8005aa4 <HAL_ADC_ConfigChannel+0xa34>)
 800592a:	f7fe ff0f 	bl	800474c <LL_ADC_IsEnabled>
 800592e:	4604      	mov	r4, r0
 8005930:	485d      	ldr	r0, [pc, #372]	@ (8005aa8 <HAL_ADC_ConfigChannel+0xa38>)
 8005932:	f7fe ff0b 	bl	800474c <LL_ADC_IsEnabled>
 8005936:	4603      	mov	r3, r0
 8005938:	4323      	orrs	r3, r4
 800593a:	2b00      	cmp	r3, #0
 800593c:	bf0c      	ite	eq
 800593e:	2301      	moveq	r3, #1
 8005940:	2300      	movne	r3, #0
 8005942:	b2db      	uxtb	r3, r3
 8005944:	e008      	b.n	8005958 <HAL_ADC_ConfigChannel+0x8e8>
 8005946:	4859      	ldr	r0, [pc, #356]	@ (8005aac <HAL_ADC_ConfigChannel+0xa3c>)
 8005948:	f7fe ff00 	bl	800474c <LL_ADC_IsEnabled>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	bf0c      	ite	eq
 8005952:	2301      	moveq	r3, #1
 8005954:	2300      	movne	r3, #0
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 8084 	beq.w	8005a66 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a53      	ldr	r2, [pc, #332]	@ (8005ab0 <HAL_ADC_ConfigChannel+0xa40>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d132      	bne.n	80059ce <HAL_ADC_ConfigChannel+0x95e>
 8005968:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800596c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d12c      	bne.n	80059ce <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a4c      	ldr	r2, [pc, #304]	@ (8005aac <HAL_ADC_ConfigChannel+0xa3c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	f040 8086 	bne.w	8005a8c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a47      	ldr	r2, [pc, #284]	@ (8005aa4 <HAL_ADC_ConfigChannel+0xa34>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d004      	beq.n	8005994 <HAL_ADC_ConfigChannel+0x924>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a46      	ldr	r2, [pc, #280]	@ (8005aa8 <HAL_ADC_ConfigChannel+0xa38>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d101      	bne.n	8005998 <HAL_ADC_ConfigChannel+0x928>
 8005994:	4a47      	ldr	r2, [pc, #284]	@ (8005ab4 <HAL_ADC_ConfigChannel+0xa44>)
 8005996:	e000      	b.n	800599a <HAL_ADC_ConfigChannel+0x92a>
 8005998:	4a41      	ldr	r2, [pc, #260]	@ (8005aa0 <HAL_ADC_ConfigChannel+0xa30>)
 800599a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800599e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80059a2:	4619      	mov	r1, r3
 80059a4:	4610      	mov	r0, r2
 80059a6:	f7fe fc82 	bl	80042ae <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80059aa:	4b43      	ldr	r3, [pc, #268]	@ (8005ab8 <HAL_ADC_ConfigChannel+0xa48>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	099b      	lsrs	r3, r3, #6
 80059b0:	4a42      	ldr	r2, [pc, #264]	@ (8005abc <HAL_ADC_ConfigChannel+0xa4c>)
 80059b2:	fba2 2303 	umull	r2, r3, r2, r3
 80059b6:	099b      	lsrs	r3, r3, #6
 80059b8:	3301      	adds	r3, #1
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80059be:	e002      	b.n	80059c6 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1f9      	bne.n	80059c0 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80059cc:	e05e      	b.n	8005a8c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a3b      	ldr	r2, [pc, #236]	@ (8005ac0 <HAL_ADC_ConfigChannel+0xa50>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d120      	bne.n	8005a1a <HAL_ADC_ConfigChannel+0x9aa>
 80059d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d11a      	bne.n	8005a1a <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a30      	ldr	r2, [pc, #192]	@ (8005aac <HAL_ADC_ConfigChannel+0xa3c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d14e      	bne.n	8005a8c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a2c      	ldr	r2, [pc, #176]	@ (8005aa4 <HAL_ADC_ConfigChannel+0xa34>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d004      	beq.n	8005a02 <HAL_ADC_ConfigChannel+0x992>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a2a      	ldr	r2, [pc, #168]	@ (8005aa8 <HAL_ADC_ConfigChannel+0xa38>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d101      	bne.n	8005a06 <HAL_ADC_ConfigChannel+0x996>
 8005a02:	4a2c      	ldr	r2, [pc, #176]	@ (8005ab4 <HAL_ADC_ConfigChannel+0xa44>)
 8005a04:	e000      	b.n	8005a08 <HAL_ADC_ConfigChannel+0x998>
 8005a06:	4a26      	ldr	r2, [pc, #152]	@ (8005aa0 <HAL_ADC_ConfigChannel+0xa30>)
 8005a08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a0c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a10:	4619      	mov	r1, r3
 8005a12:	4610      	mov	r0, r2
 8005a14:	f7fe fc4b 	bl	80042ae <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a18:	e038      	b.n	8005a8c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a29      	ldr	r2, [pc, #164]	@ (8005ac4 <HAL_ADC_ConfigChannel+0xa54>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d133      	bne.n	8005a8c <HAL_ADC_ConfigChannel+0xa1c>
 8005a24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d12d      	bne.n	8005a8c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a1d      	ldr	r2, [pc, #116]	@ (8005aac <HAL_ADC_ConfigChannel+0xa3c>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d128      	bne.n	8005a8c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a19      	ldr	r2, [pc, #100]	@ (8005aa4 <HAL_ADC_ConfigChannel+0xa34>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d004      	beq.n	8005a4e <HAL_ADC_ConfigChannel+0x9de>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a17      	ldr	r2, [pc, #92]	@ (8005aa8 <HAL_ADC_ConfigChannel+0xa38>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d101      	bne.n	8005a52 <HAL_ADC_ConfigChannel+0x9e2>
 8005a4e:	4a19      	ldr	r2, [pc, #100]	@ (8005ab4 <HAL_ADC_ConfigChannel+0xa44>)
 8005a50:	e000      	b.n	8005a54 <HAL_ADC_ConfigChannel+0x9e4>
 8005a52:	4a13      	ldr	r2, [pc, #76]	@ (8005aa0 <HAL_ADC_ConfigChannel+0xa30>)
 8005a54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a58:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	4610      	mov	r0, r2
 8005a60:	f7fe fc25 	bl	80042ae <LL_ADC_SetCommonPathInternalCh>
 8005a64:	e012      	b.n	8005a8c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a6a:	f043 0220 	orr.w	r2, r3, #32
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8005a78:	e008      	b.n	8005a8c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a7e:	f043 0220 	orr.w	r2, r3, #32
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005a94:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	37e4      	adds	r7, #228	@ 0xe4
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd90      	pop	{r4, r7, pc}
 8005aa0:	58026300 	.word	0x58026300
 8005aa4:	40022000 	.word	0x40022000
 8005aa8:	40022100 	.word	0x40022100
 8005aac:	58026000 	.word	0x58026000
 8005ab0:	c7520000 	.word	0xc7520000
 8005ab4:	40022300 	.word	0x40022300
 8005ab8:	24000100 	.word	0x24000100
 8005abc:	053e2d63 	.word	0x053e2d63
 8005ac0:	c3210000 	.word	0xc3210000
 8005ac4:	cb840000 	.word	0xcb840000

08005ac8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b088      	sub	sp, #32
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fe fe82 	bl	80047e8 <LL_ADC_REG_IsConversionOngoing>
 8005ae4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fe fea4 	bl	8004838 <LL_ADC_INJ_IsConversionOngoing>
 8005af0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d103      	bne.n	8005b00 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 8098 	beq.w	8005c30 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d02a      	beq.n	8005b64 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	7e5b      	ldrb	r3, [r3, #25]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d126      	bne.n	8005b64 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	7e1b      	ldrb	r3, [r3, #24]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d122      	bne.n	8005b64 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005b22:	e014      	b.n	8005b4e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	4a45      	ldr	r2, [pc, #276]	@ (8005c3c <ADC_ConversionStop+0x174>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d90d      	bls.n	8005b48 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b30:	f043 0210 	orr.w	r2, r3, #16
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b3c:	f043 0201 	orr.w	r2, r3, #1
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e074      	b.n	8005c32 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b58:	2b40      	cmp	r3, #64	@ 0x40
 8005b5a:	d1e3      	bne.n	8005b24 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2240      	movs	r2, #64	@ 0x40
 8005b62:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d014      	beq.n	8005b94 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fe fe3a 	bl	80047e8 <LL_ADC_REG_IsConversionOngoing>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00c      	beq.n	8005b94 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fe fdf7 	bl	8004772 <LL_ADC_IsDisableOngoing>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d104      	bne.n	8005b94 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fe fe16 	bl	80047c0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d014      	beq.n	8005bc4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7fe fe4a 	bl	8004838 <LL_ADC_INJ_IsConversionOngoing>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00c      	beq.n	8005bc4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fe fddf 	bl	8004772 <LL_ADC_IsDisableOngoing>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d104      	bne.n	8005bc4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fe fe26 	bl	8004810 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d005      	beq.n	8005bd6 <ADC_ConversionStop+0x10e>
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	2b03      	cmp	r3, #3
 8005bce:	d105      	bne.n	8005bdc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005bd0:	230c      	movs	r3, #12
 8005bd2:	617b      	str	r3, [r7, #20]
        break;
 8005bd4:	e005      	b.n	8005be2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005bd6:	2308      	movs	r3, #8
 8005bd8:	617b      	str	r3, [r7, #20]
        break;
 8005bda:	e002      	b.n	8005be2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005bdc:	2304      	movs	r3, #4
 8005bde:	617b      	str	r3, [r7, #20]
        break;
 8005be0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005be2:	f7fe fb0b 	bl	80041fc <HAL_GetTick>
 8005be6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005be8:	e01b      	b.n	8005c22 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005bea:	f7fe fb07 	bl	80041fc <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b05      	cmp	r3, #5
 8005bf6:	d914      	bls.n	8005c22 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689a      	ldr	r2, [r3, #8]
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	4013      	ands	r3, r2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00d      	beq.n	8005c22 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c0a:	f043 0210 	orr.w	r2, r3, #16
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c16:	f043 0201 	orr.w	r2, r3, #1
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e007      	b.n	8005c32 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1dc      	bne.n	8005bea <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3720      	adds	r7, #32
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	000cdbff 	.word	0x000cdbff

08005c40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7fe fd7d 	bl	800474c <LL_ADC_IsEnabled>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d16e      	bne.n	8005d36 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689a      	ldr	r2, [r3, #8]
 8005c5e:	4b38      	ldr	r3, [pc, #224]	@ (8005d40 <ADC_Enable+0x100>)
 8005c60:	4013      	ands	r3, r2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00d      	beq.n	8005c82 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c6a:	f043 0210 	orr.w	r2, r3, #16
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c76:	f043 0201 	orr.w	r2, r3, #1
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e05a      	b.n	8005d38 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fe fd38 	bl	80046fc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005c8c:	f7fe fab6 	bl	80041fc <HAL_GetTick>
 8005c90:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a2b      	ldr	r2, [pc, #172]	@ (8005d44 <ADC_Enable+0x104>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d004      	beq.n	8005ca6 <ADC_Enable+0x66>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a29      	ldr	r2, [pc, #164]	@ (8005d48 <ADC_Enable+0x108>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d101      	bne.n	8005caa <ADC_Enable+0x6a>
 8005ca6:	4b29      	ldr	r3, [pc, #164]	@ (8005d4c <ADC_Enable+0x10c>)
 8005ca8:	e000      	b.n	8005cac <ADC_Enable+0x6c>
 8005caa:	4b29      	ldr	r3, [pc, #164]	@ (8005d50 <ADC_Enable+0x110>)
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7fe fcbb 	bl	8004628 <LL_ADC_GetMultimode>
 8005cb2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a23      	ldr	r2, [pc, #140]	@ (8005d48 <ADC_Enable+0x108>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d002      	beq.n	8005cc4 <ADC_Enable+0x84>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	e000      	b.n	8005cc6 <ADC_Enable+0x86>
 8005cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8005d44 <ADC_Enable+0x104>)
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	6812      	ldr	r2, [r2, #0]
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d02c      	beq.n	8005d28 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d130      	bne.n	8005d36 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005cd4:	e028      	b.n	8005d28 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fe fd36 	bl	800474c <LL_ADC_IsEnabled>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d104      	bne.n	8005cf0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7fe fd06 	bl	80046fc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005cf0:	f7fe fa84 	bl	80041fc <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d914      	bls.n	8005d28 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d00d      	beq.n	8005d28 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d10:	f043 0210 	orr.w	r2, r3, #16
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d1c:	f043 0201 	orr.w	r2, r3, #1
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e007      	b.n	8005d38 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d1cf      	bne.n	8005cd6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	8000003f 	.word	0x8000003f
 8005d44:	40022000 	.word	0x40022000
 8005d48:	40022100 	.word	0x40022100
 8005d4c:	40022300 	.word	0x40022300
 8005d50:	58026300 	.word	0x58026300

08005d54 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7fe fd06 	bl	8004772 <LL_ADC_IsDisableOngoing>
 8005d66:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7fe fced 	bl	800474c <LL_ADC_IsEnabled>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d047      	beq.n	8005e08 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d144      	bne.n	8005e08 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f003 030d 	and.w	r3, r3, #13
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d10c      	bne.n	8005da6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7fe fcc7 	bl	8004724 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2203      	movs	r2, #3
 8005d9c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005d9e:	f7fe fa2d 	bl	80041fc <HAL_GetTick>
 8005da2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005da4:	e029      	b.n	8005dfa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005daa:	f043 0210 	orr.w	r2, r3, #16
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005db6:	f043 0201 	orr.w	r2, r3, #1
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e023      	b.n	8005e0a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005dc2:	f7fe fa1b 	bl	80041fc <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d914      	bls.n	8005dfa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00d      	beq.n	8005dfa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005de2:	f043 0210 	orr.w	r2, r3, #16
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dee:	f043 0201 	orr.w	r2, r3, #1
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e007      	b.n	8005e0a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1dc      	bne.n	8005dc2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
	...

08005e14 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a6c      	ldr	r2, [pc, #432]	@ (8005fd4 <ADC_ConfigureBoostMode+0x1c0>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d004      	beq.n	8005e30 <ADC_ConfigureBoostMode+0x1c>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a6b      	ldr	r2, [pc, #428]	@ (8005fd8 <ADC_ConfigureBoostMode+0x1c4>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d109      	bne.n	8005e44 <ADC_ConfigureBoostMode+0x30>
 8005e30:	4b6a      	ldr	r3, [pc, #424]	@ (8005fdc <ADC_ConfigureBoostMode+0x1c8>)
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	bf14      	ite	ne
 8005e3c:	2301      	movne	r3, #1
 8005e3e:	2300      	moveq	r3, #0
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	e008      	b.n	8005e56 <ADC_ConfigureBoostMode+0x42>
 8005e44:	4b66      	ldr	r3, [pc, #408]	@ (8005fe0 <ADC_ConfigureBoostMode+0x1cc>)
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	bf14      	ite	ne
 8005e50:	2301      	movne	r3, #1
 8005e52:	2300      	moveq	r3, #0
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d01c      	beq.n	8005e94 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005e5a:	f005 fcab 	bl	800b7b4 <HAL_RCC_GetHCLKFreq>
 8005e5e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e68:	d010      	beq.n	8005e8c <ADC_ConfigureBoostMode+0x78>
 8005e6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e6e:	d873      	bhi.n	8005f58 <ADC_ConfigureBoostMode+0x144>
 8005e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e74:	d002      	beq.n	8005e7c <ADC_ConfigureBoostMode+0x68>
 8005e76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e7a:	d16d      	bne.n	8005f58 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	0c1b      	lsrs	r3, r3, #16
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e88:	60fb      	str	r3, [r7, #12]
        break;
 8005e8a:	e068      	b.n	8005f5e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	089b      	lsrs	r3, r3, #2
 8005e90:	60fb      	str	r3, [r7, #12]
        break;
 8005e92:	e064      	b.n	8005f5e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005e94:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005e98:	f04f 0100 	mov.w	r1, #0
 8005e9c:	f006 fe86 	bl	800cbac <HAL_RCCEx_GetPeriphCLKFreq>
 8005ea0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005eaa:	d051      	beq.n	8005f50 <ADC_ConfigureBoostMode+0x13c>
 8005eac:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005eb0:	d854      	bhi.n	8005f5c <ADC_ConfigureBoostMode+0x148>
 8005eb2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005eb6:	d047      	beq.n	8005f48 <ADC_ConfigureBoostMode+0x134>
 8005eb8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005ebc:	d84e      	bhi.n	8005f5c <ADC_ConfigureBoostMode+0x148>
 8005ebe:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005ec2:	d03d      	beq.n	8005f40 <ADC_ConfigureBoostMode+0x12c>
 8005ec4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005ec8:	d848      	bhi.n	8005f5c <ADC_ConfigureBoostMode+0x148>
 8005eca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ece:	d033      	beq.n	8005f38 <ADC_ConfigureBoostMode+0x124>
 8005ed0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ed4:	d842      	bhi.n	8005f5c <ADC_ConfigureBoostMode+0x148>
 8005ed6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005eda:	d029      	beq.n	8005f30 <ADC_ConfigureBoostMode+0x11c>
 8005edc:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005ee0:	d83c      	bhi.n	8005f5c <ADC_ConfigureBoostMode+0x148>
 8005ee2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005ee6:	d01a      	beq.n	8005f1e <ADC_ConfigureBoostMode+0x10a>
 8005ee8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005eec:	d836      	bhi.n	8005f5c <ADC_ConfigureBoostMode+0x148>
 8005eee:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005ef2:	d014      	beq.n	8005f1e <ADC_ConfigureBoostMode+0x10a>
 8005ef4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005ef8:	d830      	bhi.n	8005f5c <ADC_ConfigureBoostMode+0x148>
 8005efa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005efe:	d00e      	beq.n	8005f1e <ADC_ConfigureBoostMode+0x10a>
 8005f00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f04:	d82a      	bhi.n	8005f5c <ADC_ConfigureBoostMode+0x148>
 8005f06:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005f0a:	d008      	beq.n	8005f1e <ADC_ConfigureBoostMode+0x10a>
 8005f0c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005f10:	d824      	bhi.n	8005f5c <ADC_ConfigureBoostMode+0x148>
 8005f12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f16:	d002      	beq.n	8005f1e <ADC_ConfigureBoostMode+0x10a>
 8005f18:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005f1c:	d11e      	bne.n	8005f5c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	0c9b      	lsrs	r3, r3, #18
 8005f24:	005b      	lsls	r3, r3, #1
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2c:	60fb      	str	r3, [r7, #12]
        break;
 8005f2e:	e016      	b.n	8005f5e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	091b      	lsrs	r3, r3, #4
 8005f34:	60fb      	str	r3, [r7, #12]
        break;
 8005f36:	e012      	b.n	8005f5e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	095b      	lsrs	r3, r3, #5
 8005f3c:	60fb      	str	r3, [r7, #12]
        break;
 8005f3e:	e00e      	b.n	8005f5e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	099b      	lsrs	r3, r3, #6
 8005f44:	60fb      	str	r3, [r7, #12]
        break;
 8005f46:	e00a      	b.n	8005f5e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	09db      	lsrs	r3, r3, #7
 8005f4c:	60fb      	str	r3, [r7, #12]
        break;
 8005f4e:	e006      	b.n	8005f5e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	0a1b      	lsrs	r3, r3, #8
 8005f54:	60fb      	str	r3, [r7, #12]
        break;
 8005f56:	e002      	b.n	8005f5e <ADC_ConfigureBoostMode+0x14a>
        break;
 8005f58:	bf00      	nop
 8005f5a:	e000      	b.n	8005f5e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005f5c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	085b      	lsrs	r3, r3, #1
 8005f62:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	4a1f      	ldr	r2, [pc, #124]	@ (8005fe4 <ADC_ConfigureBoostMode+0x1d0>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d808      	bhi.n	8005f7e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005f7a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005f7c:	e025      	b.n	8005fca <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	4a19      	ldr	r2, [pc, #100]	@ (8005fe8 <ADC_ConfigureBoostMode+0x1d4>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d80a      	bhi.n	8005f9c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f98:	609a      	str	r2, [r3, #8]
}
 8005f9a:	e016      	b.n	8005fca <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	4a13      	ldr	r2, [pc, #76]	@ (8005fec <ADC_ConfigureBoostMode+0x1d8>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d80a      	bhi.n	8005fba <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fb6:	609a      	str	r2, [r3, #8]
}
 8005fb8:	e007      	b.n	8005fca <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689a      	ldr	r2, [r3, #8]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005fc8:	609a      	str	r2, [r3, #8]
}
 8005fca:	bf00      	nop
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	40022000 	.word	0x40022000
 8005fd8:	40022100 	.word	0x40022100
 8005fdc:	40022300 	.word	0x40022300
 8005fe0:	58026300 	.word	0x58026300
 8005fe4:	005f5e10 	.word	0x005f5e10
 8005fe8:	00bebc20 	.word	0x00bebc20
 8005fec:	017d7840 	.word	0x017d7840

08005ff0 <LL_ADC_IsEnabled>:
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b01      	cmp	r3, #1
 8006002:	d101      	bne.n	8006008 <LL_ADC_IsEnabled+0x18>
 8006004:	2301      	movs	r3, #1
 8006006:	e000      	b.n	800600a <LL_ADC_IsEnabled+0x1a>
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <LL_ADC_REG_IsConversionOngoing>:
{
 8006016:	b480      	push	{r7}
 8006018:	b083      	sub	sp, #12
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f003 0304 	and.w	r3, r3, #4
 8006026:	2b04      	cmp	r3, #4
 8006028:	d101      	bne.n	800602e <LL_ADC_REG_IsConversionOngoing+0x18>
 800602a:	2301      	movs	r3, #1
 800602c:	e000      	b.n	8006030 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800603c:	b590      	push	{r4, r7, lr}
 800603e:	b0a3      	sub	sp, #140	@ 0x8c
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006046:	2300      	movs	r3, #0
 8006048:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006052:	2b01      	cmp	r3, #1
 8006054:	d101      	bne.n	800605a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006056:	2302      	movs	r3, #2
 8006058:	e0c1      	b.n	80061de <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006062:	2300      	movs	r3, #0
 8006064:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006066:	2300      	movs	r3, #0
 8006068:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a5e      	ldr	r2, [pc, #376]	@ (80061e8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d102      	bne.n	800607a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006074:	4b5d      	ldr	r3, [pc, #372]	@ (80061ec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006076:	60fb      	str	r3, [r7, #12]
 8006078:	e001      	b.n	800607e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800607a:	2300      	movs	r3, #0
 800607c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10b      	bne.n	800609c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006088:	f043 0220 	orr.w	r2, r3, #32
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e0a0      	b.n	80061de <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	4618      	mov	r0, r3
 80060a0:	f7ff ffb9 	bl	8006016 <LL_ADC_REG_IsConversionOngoing>
 80060a4:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7ff ffb2 	bl	8006016 <LL_ADC_REG_IsConversionOngoing>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f040 8081 	bne.w	80061bc <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80060ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d17c      	bne.n	80061bc <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a48      	ldr	r2, [pc, #288]	@ (80061e8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d004      	beq.n	80060d6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a46      	ldr	r2, [pc, #280]	@ (80061ec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d101      	bne.n	80060da <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80060d6:	4b46      	ldr	r3, [pc, #280]	@ (80061f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80060d8:	e000      	b.n	80060dc <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80060da:	4b46      	ldr	r3, [pc, #280]	@ (80061f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80060dc:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d039      	beq.n	800615a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80060e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	431a      	orrs	r2, r3
 80060f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80060f6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a3a      	ldr	r2, [pc, #232]	@ (80061e8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d004      	beq.n	800610c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a39      	ldr	r2, [pc, #228]	@ (80061ec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d10e      	bne.n	800612a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800610c:	4836      	ldr	r0, [pc, #216]	@ (80061e8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800610e:	f7ff ff6f 	bl	8005ff0 <LL_ADC_IsEnabled>
 8006112:	4604      	mov	r4, r0
 8006114:	4835      	ldr	r0, [pc, #212]	@ (80061ec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006116:	f7ff ff6b 	bl	8005ff0 <LL_ADC_IsEnabled>
 800611a:	4603      	mov	r3, r0
 800611c:	4323      	orrs	r3, r4
 800611e:	2b00      	cmp	r3, #0
 8006120:	bf0c      	ite	eq
 8006122:	2301      	moveq	r3, #1
 8006124:	2300      	movne	r3, #0
 8006126:	b2db      	uxtb	r3, r3
 8006128:	e008      	b.n	800613c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800612a:	4833      	ldr	r0, [pc, #204]	@ (80061f8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800612c:	f7ff ff60 	bl	8005ff0 <LL_ADC_IsEnabled>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	bf0c      	ite	eq
 8006136:	2301      	moveq	r3, #1
 8006138:	2300      	movne	r3, #0
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	d047      	beq.n	80061d0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006140:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	4b2d      	ldr	r3, [pc, #180]	@ (80061fc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006146:	4013      	ands	r3, r2
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	6811      	ldr	r1, [r2, #0]
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	6892      	ldr	r2, [r2, #8]
 8006150:	430a      	orrs	r2, r1
 8006152:	431a      	orrs	r2, r3
 8006154:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006156:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006158:	e03a      	b.n	80061d0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800615a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006162:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006164:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a1f      	ldr	r2, [pc, #124]	@ (80061e8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d004      	beq.n	800617a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a1d      	ldr	r2, [pc, #116]	@ (80061ec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d10e      	bne.n	8006198 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800617a:	481b      	ldr	r0, [pc, #108]	@ (80061e8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800617c:	f7ff ff38 	bl	8005ff0 <LL_ADC_IsEnabled>
 8006180:	4604      	mov	r4, r0
 8006182:	481a      	ldr	r0, [pc, #104]	@ (80061ec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006184:	f7ff ff34 	bl	8005ff0 <LL_ADC_IsEnabled>
 8006188:	4603      	mov	r3, r0
 800618a:	4323      	orrs	r3, r4
 800618c:	2b00      	cmp	r3, #0
 800618e:	bf0c      	ite	eq
 8006190:	2301      	moveq	r3, #1
 8006192:	2300      	movne	r3, #0
 8006194:	b2db      	uxtb	r3, r3
 8006196:	e008      	b.n	80061aa <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8006198:	4817      	ldr	r0, [pc, #92]	@ (80061f8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800619a:	f7ff ff29 	bl	8005ff0 <LL_ADC_IsEnabled>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	bf0c      	ite	eq
 80061a4:	2301      	moveq	r3, #1
 80061a6:	2300      	movne	r3, #0
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d010      	beq.n	80061d0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80061ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80061b0:	689a      	ldr	r2, [r3, #8]
 80061b2:	4b12      	ldr	r3, [pc, #72]	@ (80061fc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80061b4:	4013      	ands	r3, r2
 80061b6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80061b8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80061ba:	e009      	b.n	80061d0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061c0:	f043 0220 	orr.w	r2, r3, #32
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80061ce:	e000      	b.n	80061d2 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80061d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80061da:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80061de:	4618      	mov	r0, r3
 80061e0:	378c      	adds	r7, #140	@ 0x8c
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd90      	pop	{r4, r7, pc}
 80061e6:	bf00      	nop
 80061e8:	40022000 	.word	0x40022000
 80061ec:	40022100 	.word	0x40022100
 80061f0:	40022300 	.word	0x40022300
 80061f4:	58026300 	.word	0x58026300
 80061f8:	58026000 	.word	0x58026000
 80061fc:	fffff0e0 	.word	0xfffff0e0

08006200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f003 0307 	and.w	r3, r3, #7
 800620e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006210:	4b0b      	ldr	r3, [pc, #44]	@ (8006240 <__NVIC_SetPriorityGrouping+0x40>)
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800621c:	4013      	ands	r3, r2
 800621e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006228:	4b06      	ldr	r3, [pc, #24]	@ (8006244 <__NVIC_SetPriorityGrouping+0x44>)
 800622a:	4313      	orrs	r3, r2
 800622c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800622e:	4a04      	ldr	r2, [pc, #16]	@ (8006240 <__NVIC_SetPriorityGrouping+0x40>)
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	60d3      	str	r3, [r2, #12]
}
 8006234:	bf00      	nop
 8006236:	3714      	adds	r7, #20
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr
 8006240:	e000ed00 	.word	0xe000ed00
 8006244:	05fa0000 	.word	0x05fa0000

08006248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006248:	b480      	push	{r7}
 800624a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800624c:	4b04      	ldr	r3, [pc, #16]	@ (8006260 <__NVIC_GetPriorityGrouping+0x18>)
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	0a1b      	lsrs	r3, r3, #8
 8006252:	f003 0307 	and.w	r3, r3, #7
}
 8006256:	4618      	mov	r0, r3
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	e000ed00 	.word	0xe000ed00

08006264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	4603      	mov	r3, r0
 800626c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800626e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006272:	2b00      	cmp	r3, #0
 8006274:	db0b      	blt.n	800628e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006276:	88fb      	ldrh	r3, [r7, #6]
 8006278:	f003 021f 	and.w	r2, r3, #31
 800627c:	4907      	ldr	r1, [pc, #28]	@ (800629c <__NVIC_EnableIRQ+0x38>)
 800627e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006282:	095b      	lsrs	r3, r3, #5
 8006284:	2001      	movs	r0, #1
 8006286:	fa00 f202 	lsl.w	r2, r0, r2
 800628a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800628e:	bf00      	nop
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	e000e100 	.word	0xe000e100

080062a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	4603      	mov	r3, r0
 80062a8:	6039      	str	r1, [r7, #0]
 80062aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80062ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	db0a      	blt.n	80062ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	b2da      	uxtb	r2, r3
 80062b8:	490c      	ldr	r1, [pc, #48]	@ (80062ec <__NVIC_SetPriority+0x4c>)
 80062ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062be:	0112      	lsls	r2, r2, #4
 80062c0:	b2d2      	uxtb	r2, r2
 80062c2:	440b      	add	r3, r1
 80062c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80062c8:	e00a      	b.n	80062e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	4908      	ldr	r1, [pc, #32]	@ (80062f0 <__NVIC_SetPriority+0x50>)
 80062d0:	88fb      	ldrh	r3, [r7, #6]
 80062d2:	f003 030f 	and.w	r3, r3, #15
 80062d6:	3b04      	subs	r3, #4
 80062d8:	0112      	lsls	r2, r2, #4
 80062da:	b2d2      	uxtb	r2, r2
 80062dc:	440b      	add	r3, r1
 80062de:	761a      	strb	r2, [r3, #24]
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr
 80062ec:	e000e100 	.word	0xe000e100
 80062f0:	e000ed00 	.word	0xe000ed00

080062f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b089      	sub	sp, #36	@ 0x24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f003 0307 	and.w	r3, r3, #7
 8006306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	f1c3 0307 	rsb	r3, r3, #7
 800630e:	2b04      	cmp	r3, #4
 8006310:	bf28      	it	cs
 8006312:	2304      	movcs	r3, #4
 8006314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	3304      	adds	r3, #4
 800631a:	2b06      	cmp	r3, #6
 800631c:	d902      	bls.n	8006324 <NVIC_EncodePriority+0x30>
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	3b03      	subs	r3, #3
 8006322:	e000      	b.n	8006326 <NVIC_EncodePriority+0x32>
 8006324:	2300      	movs	r3, #0
 8006326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006328:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	fa02 f303 	lsl.w	r3, r2, r3
 8006332:	43da      	mvns	r2, r3
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	401a      	ands	r2, r3
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800633c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	fa01 f303 	lsl.w	r3, r1, r3
 8006346:	43d9      	mvns	r1, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800634c:	4313      	orrs	r3, r2
         );
}
 800634e:	4618      	mov	r0, r3
 8006350:	3724      	adds	r7, #36	@ 0x24
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
	...

0800635c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	3b01      	subs	r3, #1
 8006368:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800636c:	d301      	bcc.n	8006372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800636e:	2301      	movs	r3, #1
 8006370:	e00f      	b.n	8006392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006372:	4a0a      	ldr	r2, [pc, #40]	@ (800639c <SysTick_Config+0x40>)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	3b01      	subs	r3, #1
 8006378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800637a:	210f      	movs	r1, #15
 800637c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006380:	f7ff ff8e 	bl	80062a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006384:	4b05      	ldr	r3, [pc, #20]	@ (800639c <SysTick_Config+0x40>)
 8006386:	2200      	movs	r2, #0
 8006388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800638a:	4b04      	ldr	r3, [pc, #16]	@ (800639c <SysTick_Config+0x40>)
 800638c:	2207      	movs	r2, #7
 800638e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	e000e010 	.word	0xe000e010

080063a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f7ff ff29 	bl	8006200 <__NVIC_SetPriorityGrouping>
}
 80063ae:	bf00      	nop
 80063b0:	3708      	adds	r7, #8
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b086      	sub	sp, #24
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	4603      	mov	r3, r0
 80063be:	60b9      	str	r1, [r7, #8]
 80063c0:	607a      	str	r2, [r7, #4]
 80063c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80063c4:	f7ff ff40 	bl	8006248 <__NVIC_GetPriorityGrouping>
 80063c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	68b9      	ldr	r1, [r7, #8]
 80063ce:	6978      	ldr	r0, [r7, #20]
 80063d0:	f7ff ff90 	bl	80062f4 <NVIC_EncodePriority>
 80063d4:	4602      	mov	r2, r0
 80063d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80063da:	4611      	mov	r1, r2
 80063dc:	4618      	mov	r0, r3
 80063de:	f7ff ff5f 	bl	80062a0 <__NVIC_SetPriority>
}
 80063e2:	bf00      	nop
 80063e4:	3718      	adds	r7, #24
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b082      	sub	sp, #8
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	4603      	mov	r3, r0
 80063f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80063f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7ff ff33 	bl	8006264 <__NVIC_EnableIRQ>
}
 80063fe:	bf00      	nop
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b082      	sub	sp, #8
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7ff ffa4 	bl	800635c <SysTick_Config>
 8006414:	4603      	mov	r3, r0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
	...

08006420 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006428:	f7fd fee8 	bl	80041fc <HAL_GetTick>
 800642c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d101      	bne.n	8006438 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e312      	b.n	8006a5e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a66      	ldr	r2, [pc, #408]	@ (80065d8 <HAL_DMA_Init+0x1b8>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d04a      	beq.n	80064d8 <HAL_DMA_Init+0xb8>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a65      	ldr	r2, [pc, #404]	@ (80065dc <HAL_DMA_Init+0x1bc>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d045      	beq.n	80064d8 <HAL_DMA_Init+0xb8>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a63      	ldr	r2, [pc, #396]	@ (80065e0 <HAL_DMA_Init+0x1c0>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d040      	beq.n	80064d8 <HAL_DMA_Init+0xb8>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a62      	ldr	r2, [pc, #392]	@ (80065e4 <HAL_DMA_Init+0x1c4>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d03b      	beq.n	80064d8 <HAL_DMA_Init+0xb8>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a60      	ldr	r2, [pc, #384]	@ (80065e8 <HAL_DMA_Init+0x1c8>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d036      	beq.n	80064d8 <HAL_DMA_Init+0xb8>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a5f      	ldr	r2, [pc, #380]	@ (80065ec <HAL_DMA_Init+0x1cc>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d031      	beq.n	80064d8 <HAL_DMA_Init+0xb8>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a5d      	ldr	r2, [pc, #372]	@ (80065f0 <HAL_DMA_Init+0x1d0>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d02c      	beq.n	80064d8 <HAL_DMA_Init+0xb8>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a5c      	ldr	r2, [pc, #368]	@ (80065f4 <HAL_DMA_Init+0x1d4>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d027      	beq.n	80064d8 <HAL_DMA_Init+0xb8>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a5a      	ldr	r2, [pc, #360]	@ (80065f8 <HAL_DMA_Init+0x1d8>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d022      	beq.n	80064d8 <HAL_DMA_Init+0xb8>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a59      	ldr	r2, [pc, #356]	@ (80065fc <HAL_DMA_Init+0x1dc>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d01d      	beq.n	80064d8 <HAL_DMA_Init+0xb8>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a57      	ldr	r2, [pc, #348]	@ (8006600 <HAL_DMA_Init+0x1e0>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d018      	beq.n	80064d8 <HAL_DMA_Init+0xb8>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a56      	ldr	r2, [pc, #344]	@ (8006604 <HAL_DMA_Init+0x1e4>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d013      	beq.n	80064d8 <HAL_DMA_Init+0xb8>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a54      	ldr	r2, [pc, #336]	@ (8006608 <HAL_DMA_Init+0x1e8>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d00e      	beq.n	80064d8 <HAL_DMA_Init+0xb8>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a53      	ldr	r2, [pc, #332]	@ (800660c <HAL_DMA_Init+0x1ec>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d009      	beq.n	80064d8 <HAL_DMA_Init+0xb8>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a51      	ldr	r2, [pc, #324]	@ (8006610 <HAL_DMA_Init+0x1f0>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d004      	beq.n	80064d8 <HAL_DMA_Init+0xb8>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a50      	ldr	r2, [pc, #320]	@ (8006614 <HAL_DMA_Init+0x1f4>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d101      	bne.n	80064dc <HAL_DMA_Init+0xbc>
 80064d8:	2301      	movs	r3, #1
 80064da:	e000      	b.n	80064de <HAL_DMA_Init+0xbe>
 80064dc:	2300      	movs	r3, #0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f000 813c 	beq.w	800675c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2202      	movs	r2, #2
 80064e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a37      	ldr	r2, [pc, #220]	@ (80065d8 <HAL_DMA_Init+0x1b8>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d04a      	beq.n	8006594 <HAL_DMA_Init+0x174>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a36      	ldr	r2, [pc, #216]	@ (80065dc <HAL_DMA_Init+0x1bc>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d045      	beq.n	8006594 <HAL_DMA_Init+0x174>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a34      	ldr	r2, [pc, #208]	@ (80065e0 <HAL_DMA_Init+0x1c0>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d040      	beq.n	8006594 <HAL_DMA_Init+0x174>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a33      	ldr	r2, [pc, #204]	@ (80065e4 <HAL_DMA_Init+0x1c4>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d03b      	beq.n	8006594 <HAL_DMA_Init+0x174>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a31      	ldr	r2, [pc, #196]	@ (80065e8 <HAL_DMA_Init+0x1c8>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d036      	beq.n	8006594 <HAL_DMA_Init+0x174>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a30      	ldr	r2, [pc, #192]	@ (80065ec <HAL_DMA_Init+0x1cc>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d031      	beq.n	8006594 <HAL_DMA_Init+0x174>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a2e      	ldr	r2, [pc, #184]	@ (80065f0 <HAL_DMA_Init+0x1d0>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d02c      	beq.n	8006594 <HAL_DMA_Init+0x174>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a2d      	ldr	r2, [pc, #180]	@ (80065f4 <HAL_DMA_Init+0x1d4>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d027      	beq.n	8006594 <HAL_DMA_Init+0x174>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a2b      	ldr	r2, [pc, #172]	@ (80065f8 <HAL_DMA_Init+0x1d8>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d022      	beq.n	8006594 <HAL_DMA_Init+0x174>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a2a      	ldr	r2, [pc, #168]	@ (80065fc <HAL_DMA_Init+0x1dc>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d01d      	beq.n	8006594 <HAL_DMA_Init+0x174>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a28      	ldr	r2, [pc, #160]	@ (8006600 <HAL_DMA_Init+0x1e0>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d018      	beq.n	8006594 <HAL_DMA_Init+0x174>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a27      	ldr	r2, [pc, #156]	@ (8006604 <HAL_DMA_Init+0x1e4>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d013      	beq.n	8006594 <HAL_DMA_Init+0x174>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a25      	ldr	r2, [pc, #148]	@ (8006608 <HAL_DMA_Init+0x1e8>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d00e      	beq.n	8006594 <HAL_DMA_Init+0x174>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a24      	ldr	r2, [pc, #144]	@ (800660c <HAL_DMA_Init+0x1ec>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d009      	beq.n	8006594 <HAL_DMA_Init+0x174>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a22      	ldr	r2, [pc, #136]	@ (8006610 <HAL_DMA_Init+0x1f0>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d004      	beq.n	8006594 <HAL_DMA_Init+0x174>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a21      	ldr	r2, [pc, #132]	@ (8006614 <HAL_DMA_Init+0x1f4>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d108      	bne.n	80065a6 <HAL_DMA_Init+0x186>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0201 	bic.w	r2, r2, #1
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	e007      	b.n	80065b6 <HAL_DMA_Init+0x196>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 0201 	bic.w	r2, r2, #1
 80065b4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80065b6:	e02f      	b.n	8006618 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80065b8:	f7fd fe20 	bl	80041fc <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	2b05      	cmp	r3, #5
 80065c4:	d928      	bls.n	8006618 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2220      	movs	r2, #32
 80065ca:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2203      	movs	r2, #3
 80065d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e242      	b.n	8006a5e <HAL_DMA_Init+0x63e>
 80065d8:	40020010 	.word	0x40020010
 80065dc:	40020028 	.word	0x40020028
 80065e0:	40020040 	.word	0x40020040
 80065e4:	40020058 	.word	0x40020058
 80065e8:	40020070 	.word	0x40020070
 80065ec:	40020088 	.word	0x40020088
 80065f0:	400200a0 	.word	0x400200a0
 80065f4:	400200b8 	.word	0x400200b8
 80065f8:	40020410 	.word	0x40020410
 80065fc:	40020428 	.word	0x40020428
 8006600:	40020440 	.word	0x40020440
 8006604:	40020458 	.word	0x40020458
 8006608:	40020470 	.word	0x40020470
 800660c:	40020488 	.word	0x40020488
 8006610:	400204a0 	.word	0x400204a0
 8006614:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1c8      	bne.n	80065b8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	4b83      	ldr	r3, [pc, #524]	@ (8006840 <HAL_DMA_Init+0x420>)
 8006632:	4013      	ands	r3, r2
 8006634:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800663e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800664a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006656:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a1b      	ldr	r3, [r3, #32]
 800665c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	4313      	orrs	r3, r2
 8006662:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006668:	2b04      	cmp	r3, #4
 800666a:	d107      	bne.n	800667c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006674:	4313      	orrs	r3, r2
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	4313      	orrs	r3, r2
 800667a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	2b28      	cmp	r3, #40	@ 0x28
 8006682:	d903      	bls.n	800668c <HAL_DMA_Init+0x26c>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	2b2e      	cmp	r3, #46	@ 0x2e
 800668a:	d91f      	bls.n	80066cc <HAL_DMA_Init+0x2ac>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	2b3e      	cmp	r3, #62	@ 0x3e
 8006692:	d903      	bls.n	800669c <HAL_DMA_Init+0x27c>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	2b42      	cmp	r3, #66	@ 0x42
 800669a:	d917      	bls.n	80066cc <HAL_DMA_Init+0x2ac>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	2b46      	cmp	r3, #70	@ 0x46
 80066a2:	d903      	bls.n	80066ac <HAL_DMA_Init+0x28c>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	2b48      	cmp	r3, #72	@ 0x48
 80066aa:	d90f      	bls.n	80066cc <HAL_DMA_Init+0x2ac>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	2b4e      	cmp	r3, #78	@ 0x4e
 80066b2:	d903      	bls.n	80066bc <HAL_DMA_Init+0x29c>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	2b52      	cmp	r3, #82	@ 0x52
 80066ba:	d907      	bls.n	80066cc <HAL_DMA_Init+0x2ac>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	2b73      	cmp	r3, #115	@ 0x73
 80066c2:	d905      	bls.n	80066d0 <HAL_DMA_Init+0x2b0>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	2b77      	cmp	r3, #119	@ 0x77
 80066ca:	d801      	bhi.n	80066d0 <HAL_DMA_Init+0x2b0>
 80066cc:	2301      	movs	r3, #1
 80066ce:	e000      	b.n	80066d2 <HAL_DMA_Init+0x2b2>
 80066d0:	2300      	movs	r3, #0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066dc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f023 0307 	bic.w	r3, r3, #7
 80066f4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006704:	2b04      	cmp	r3, #4
 8006706:	d117      	bne.n	8006738 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	4313      	orrs	r3, r2
 8006710:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00e      	beq.n	8006738 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f001 fdca 	bl	80082b4 <DMA_CheckFifoParam>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d008      	beq.n	8006738 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2240      	movs	r2, #64	@ 0x40
 800672a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e192      	b.n	8006a5e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f001 fd05 	bl	8008150 <DMA_CalcBaseAndBitshift>
 8006746:	4603      	mov	r3, r0
 8006748:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800674e:	f003 031f 	and.w	r3, r3, #31
 8006752:	223f      	movs	r2, #63	@ 0x3f
 8006754:	409a      	lsls	r2, r3
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	609a      	str	r2, [r3, #8]
 800675a:	e0c8      	b.n	80068ee <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a38      	ldr	r2, [pc, #224]	@ (8006844 <HAL_DMA_Init+0x424>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d022      	beq.n	80067ac <HAL_DMA_Init+0x38c>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a37      	ldr	r2, [pc, #220]	@ (8006848 <HAL_DMA_Init+0x428>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d01d      	beq.n	80067ac <HAL_DMA_Init+0x38c>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a35      	ldr	r2, [pc, #212]	@ (800684c <HAL_DMA_Init+0x42c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d018      	beq.n	80067ac <HAL_DMA_Init+0x38c>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a34      	ldr	r2, [pc, #208]	@ (8006850 <HAL_DMA_Init+0x430>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d013      	beq.n	80067ac <HAL_DMA_Init+0x38c>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a32      	ldr	r2, [pc, #200]	@ (8006854 <HAL_DMA_Init+0x434>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d00e      	beq.n	80067ac <HAL_DMA_Init+0x38c>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a31      	ldr	r2, [pc, #196]	@ (8006858 <HAL_DMA_Init+0x438>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d009      	beq.n	80067ac <HAL_DMA_Init+0x38c>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a2f      	ldr	r2, [pc, #188]	@ (800685c <HAL_DMA_Init+0x43c>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d004      	beq.n	80067ac <HAL_DMA_Init+0x38c>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a2e      	ldr	r2, [pc, #184]	@ (8006860 <HAL_DMA_Init+0x440>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d101      	bne.n	80067b0 <HAL_DMA_Init+0x390>
 80067ac:	2301      	movs	r3, #1
 80067ae:	e000      	b.n	80067b2 <HAL_DMA_Init+0x392>
 80067b0:	2300      	movs	r3, #0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 8092 	beq.w	80068dc <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a21      	ldr	r2, [pc, #132]	@ (8006844 <HAL_DMA_Init+0x424>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d021      	beq.n	8006806 <HAL_DMA_Init+0x3e6>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a20      	ldr	r2, [pc, #128]	@ (8006848 <HAL_DMA_Init+0x428>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d01c      	beq.n	8006806 <HAL_DMA_Init+0x3e6>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a1e      	ldr	r2, [pc, #120]	@ (800684c <HAL_DMA_Init+0x42c>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d017      	beq.n	8006806 <HAL_DMA_Init+0x3e6>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a1d      	ldr	r2, [pc, #116]	@ (8006850 <HAL_DMA_Init+0x430>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d012      	beq.n	8006806 <HAL_DMA_Init+0x3e6>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a1b      	ldr	r2, [pc, #108]	@ (8006854 <HAL_DMA_Init+0x434>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d00d      	beq.n	8006806 <HAL_DMA_Init+0x3e6>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a1a      	ldr	r2, [pc, #104]	@ (8006858 <HAL_DMA_Init+0x438>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d008      	beq.n	8006806 <HAL_DMA_Init+0x3e6>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a18      	ldr	r2, [pc, #96]	@ (800685c <HAL_DMA_Init+0x43c>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d003      	beq.n	8006806 <HAL_DMA_Init+0x3e6>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a17      	ldr	r2, [pc, #92]	@ (8006860 <HAL_DMA_Init+0x440>)
 8006804:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2202      	movs	r2, #2
 800680a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	4b10      	ldr	r3, [pc, #64]	@ (8006864 <HAL_DMA_Init+0x444>)
 8006822:	4013      	ands	r3, r2
 8006824:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	2b40      	cmp	r3, #64	@ 0x40
 800682c:	d01c      	beq.n	8006868 <HAL_DMA_Init+0x448>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	2b80      	cmp	r3, #128	@ 0x80
 8006834:	d102      	bne.n	800683c <HAL_DMA_Init+0x41c>
 8006836:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800683a:	e016      	b.n	800686a <HAL_DMA_Init+0x44a>
 800683c:	2300      	movs	r3, #0
 800683e:	e014      	b.n	800686a <HAL_DMA_Init+0x44a>
 8006840:	fe10803f 	.word	0xfe10803f
 8006844:	58025408 	.word	0x58025408
 8006848:	5802541c 	.word	0x5802541c
 800684c:	58025430 	.word	0x58025430
 8006850:	58025444 	.word	0x58025444
 8006854:	58025458 	.word	0x58025458
 8006858:	5802546c 	.word	0x5802546c
 800685c:	58025480 	.word	0x58025480
 8006860:	58025494 	.word	0x58025494
 8006864:	fffe000f 	.word	0xfffe000f
 8006868:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	68d2      	ldr	r2, [r2, #12]
 800686e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006870:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006878:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006880:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006888:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006890:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006898:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	4313      	orrs	r3, r2
 800689e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	461a      	mov	r2, r3
 80068ae:	4b6e      	ldr	r3, [pc, #440]	@ (8006a68 <HAL_DMA_Init+0x648>)
 80068b0:	4413      	add	r3, r2
 80068b2:	4a6e      	ldr	r2, [pc, #440]	@ (8006a6c <HAL_DMA_Init+0x64c>)
 80068b4:	fba2 2303 	umull	r2, r3, r2, r3
 80068b8:	091b      	lsrs	r3, r3, #4
 80068ba:	009a      	lsls	r2, r3, #2
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f001 fc45 	bl	8008150 <DMA_CalcBaseAndBitshift>
 80068c6:	4603      	mov	r3, r0
 80068c8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068ce:	f003 031f 	and.w	r3, r3, #31
 80068d2:	2201      	movs	r2, #1
 80068d4:	409a      	lsls	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	605a      	str	r2, [r3, #4]
 80068da:	e008      	b.n	80068ee <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2240      	movs	r2, #64	@ 0x40
 80068e0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2203      	movs	r2, #3
 80068e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e0b7      	b.n	8006a5e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a5f      	ldr	r2, [pc, #380]	@ (8006a70 <HAL_DMA_Init+0x650>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d072      	beq.n	80069de <HAL_DMA_Init+0x5be>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a5d      	ldr	r2, [pc, #372]	@ (8006a74 <HAL_DMA_Init+0x654>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d06d      	beq.n	80069de <HAL_DMA_Init+0x5be>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a5c      	ldr	r2, [pc, #368]	@ (8006a78 <HAL_DMA_Init+0x658>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d068      	beq.n	80069de <HAL_DMA_Init+0x5be>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a5a      	ldr	r2, [pc, #360]	@ (8006a7c <HAL_DMA_Init+0x65c>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d063      	beq.n	80069de <HAL_DMA_Init+0x5be>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a59      	ldr	r2, [pc, #356]	@ (8006a80 <HAL_DMA_Init+0x660>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d05e      	beq.n	80069de <HAL_DMA_Init+0x5be>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a57      	ldr	r2, [pc, #348]	@ (8006a84 <HAL_DMA_Init+0x664>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d059      	beq.n	80069de <HAL_DMA_Init+0x5be>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a56      	ldr	r2, [pc, #344]	@ (8006a88 <HAL_DMA_Init+0x668>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d054      	beq.n	80069de <HAL_DMA_Init+0x5be>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a54      	ldr	r2, [pc, #336]	@ (8006a8c <HAL_DMA_Init+0x66c>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d04f      	beq.n	80069de <HAL_DMA_Init+0x5be>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a53      	ldr	r2, [pc, #332]	@ (8006a90 <HAL_DMA_Init+0x670>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d04a      	beq.n	80069de <HAL_DMA_Init+0x5be>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a51      	ldr	r2, [pc, #324]	@ (8006a94 <HAL_DMA_Init+0x674>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d045      	beq.n	80069de <HAL_DMA_Init+0x5be>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a50      	ldr	r2, [pc, #320]	@ (8006a98 <HAL_DMA_Init+0x678>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d040      	beq.n	80069de <HAL_DMA_Init+0x5be>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a4e      	ldr	r2, [pc, #312]	@ (8006a9c <HAL_DMA_Init+0x67c>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d03b      	beq.n	80069de <HAL_DMA_Init+0x5be>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a4d      	ldr	r2, [pc, #308]	@ (8006aa0 <HAL_DMA_Init+0x680>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d036      	beq.n	80069de <HAL_DMA_Init+0x5be>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a4b      	ldr	r2, [pc, #300]	@ (8006aa4 <HAL_DMA_Init+0x684>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d031      	beq.n	80069de <HAL_DMA_Init+0x5be>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a4a      	ldr	r2, [pc, #296]	@ (8006aa8 <HAL_DMA_Init+0x688>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d02c      	beq.n	80069de <HAL_DMA_Init+0x5be>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a48      	ldr	r2, [pc, #288]	@ (8006aac <HAL_DMA_Init+0x68c>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d027      	beq.n	80069de <HAL_DMA_Init+0x5be>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a47      	ldr	r2, [pc, #284]	@ (8006ab0 <HAL_DMA_Init+0x690>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d022      	beq.n	80069de <HAL_DMA_Init+0x5be>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a45      	ldr	r2, [pc, #276]	@ (8006ab4 <HAL_DMA_Init+0x694>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d01d      	beq.n	80069de <HAL_DMA_Init+0x5be>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a44      	ldr	r2, [pc, #272]	@ (8006ab8 <HAL_DMA_Init+0x698>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d018      	beq.n	80069de <HAL_DMA_Init+0x5be>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a42      	ldr	r2, [pc, #264]	@ (8006abc <HAL_DMA_Init+0x69c>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d013      	beq.n	80069de <HAL_DMA_Init+0x5be>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a41      	ldr	r2, [pc, #260]	@ (8006ac0 <HAL_DMA_Init+0x6a0>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d00e      	beq.n	80069de <HAL_DMA_Init+0x5be>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a3f      	ldr	r2, [pc, #252]	@ (8006ac4 <HAL_DMA_Init+0x6a4>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d009      	beq.n	80069de <HAL_DMA_Init+0x5be>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a3e      	ldr	r2, [pc, #248]	@ (8006ac8 <HAL_DMA_Init+0x6a8>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d004      	beq.n	80069de <HAL_DMA_Init+0x5be>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a3c      	ldr	r2, [pc, #240]	@ (8006acc <HAL_DMA_Init+0x6ac>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d101      	bne.n	80069e2 <HAL_DMA_Init+0x5c2>
 80069de:	2301      	movs	r3, #1
 80069e0:	e000      	b.n	80069e4 <HAL_DMA_Init+0x5c4>
 80069e2:	2300      	movs	r3, #0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d032      	beq.n	8006a4e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f001 fcdf 	bl	80083ac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	2b80      	cmp	r3, #128	@ 0x80
 80069f4:	d102      	bne.n	80069fc <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006a10:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d010      	beq.n	8006a3c <HAL_DMA_Init+0x61c>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	2b08      	cmp	r3, #8
 8006a20:	d80c      	bhi.n	8006a3c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f001 fd5c 	bl	80084e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006a38:	605a      	str	r2, [r3, #4]
 8006a3a:	e008      	b.n	8006a4e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3718      	adds	r7, #24
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	a7fdabf8 	.word	0xa7fdabf8
 8006a6c:	cccccccd 	.word	0xcccccccd
 8006a70:	40020010 	.word	0x40020010
 8006a74:	40020028 	.word	0x40020028
 8006a78:	40020040 	.word	0x40020040
 8006a7c:	40020058 	.word	0x40020058
 8006a80:	40020070 	.word	0x40020070
 8006a84:	40020088 	.word	0x40020088
 8006a88:	400200a0 	.word	0x400200a0
 8006a8c:	400200b8 	.word	0x400200b8
 8006a90:	40020410 	.word	0x40020410
 8006a94:	40020428 	.word	0x40020428
 8006a98:	40020440 	.word	0x40020440
 8006a9c:	40020458 	.word	0x40020458
 8006aa0:	40020470 	.word	0x40020470
 8006aa4:	40020488 	.word	0x40020488
 8006aa8:	400204a0 	.word	0x400204a0
 8006aac:	400204b8 	.word	0x400204b8
 8006ab0:	58025408 	.word	0x58025408
 8006ab4:	5802541c 	.word	0x5802541c
 8006ab8:	58025430 	.word	0x58025430
 8006abc:	58025444 	.word	0x58025444
 8006ac0:	58025458 	.word	0x58025458
 8006ac4:	5802546c 	.word	0x5802546c
 8006ac8:	58025480 	.word	0x58025480
 8006acc:	58025494 	.word	0x58025494

08006ad0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
 8006adc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e226      	b.n	8006f3a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d101      	bne.n	8006afa <HAL_DMA_Start_IT+0x2a>
 8006af6:	2302      	movs	r3, #2
 8006af8:	e21f      	b.n	8006f3a <HAL_DMA_Start_IT+0x46a>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	f040 820a 	bne.w	8006f24 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2202      	movs	r2, #2
 8006b14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a68      	ldr	r2, [pc, #416]	@ (8006cc4 <HAL_DMA_Start_IT+0x1f4>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d04a      	beq.n	8006bbe <HAL_DMA_Start_IT+0xee>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a66      	ldr	r2, [pc, #408]	@ (8006cc8 <HAL_DMA_Start_IT+0x1f8>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d045      	beq.n	8006bbe <HAL_DMA_Start_IT+0xee>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a65      	ldr	r2, [pc, #404]	@ (8006ccc <HAL_DMA_Start_IT+0x1fc>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d040      	beq.n	8006bbe <HAL_DMA_Start_IT+0xee>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a63      	ldr	r2, [pc, #396]	@ (8006cd0 <HAL_DMA_Start_IT+0x200>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d03b      	beq.n	8006bbe <HAL_DMA_Start_IT+0xee>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a62      	ldr	r2, [pc, #392]	@ (8006cd4 <HAL_DMA_Start_IT+0x204>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d036      	beq.n	8006bbe <HAL_DMA_Start_IT+0xee>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a60      	ldr	r2, [pc, #384]	@ (8006cd8 <HAL_DMA_Start_IT+0x208>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d031      	beq.n	8006bbe <HAL_DMA_Start_IT+0xee>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a5f      	ldr	r2, [pc, #380]	@ (8006cdc <HAL_DMA_Start_IT+0x20c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d02c      	beq.n	8006bbe <HAL_DMA_Start_IT+0xee>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a5d      	ldr	r2, [pc, #372]	@ (8006ce0 <HAL_DMA_Start_IT+0x210>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d027      	beq.n	8006bbe <HAL_DMA_Start_IT+0xee>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a5c      	ldr	r2, [pc, #368]	@ (8006ce4 <HAL_DMA_Start_IT+0x214>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d022      	beq.n	8006bbe <HAL_DMA_Start_IT+0xee>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a5a      	ldr	r2, [pc, #360]	@ (8006ce8 <HAL_DMA_Start_IT+0x218>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d01d      	beq.n	8006bbe <HAL_DMA_Start_IT+0xee>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a59      	ldr	r2, [pc, #356]	@ (8006cec <HAL_DMA_Start_IT+0x21c>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d018      	beq.n	8006bbe <HAL_DMA_Start_IT+0xee>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a57      	ldr	r2, [pc, #348]	@ (8006cf0 <HAL_DMA_Start_IT+0x220>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d013      	beq.n	8006bbe <HAL_DMA_Start_IT+0xee>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a56      	ldr	r2, [pc, #344]	@ (8006cf4 <HAL_DMA_Start_IT+0x224>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d00e      	beq.n	8006bbe <HAL_DMA_Start_IT+0xee>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a54      	ldr	r2, [pc, #336]	@ (8006cf8 <HAL_DMA_Start_IT+0x228>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d009      	beq.n	8006bbe <HAL_DMA_Start_IT+0xee>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a53      	ldr	r2, [pc, #332]	@ (8006cfc <HAL_DMA_Start_IT+0x22c>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d004      	beq.n	8006bbe <HAL_DMA_Start_IT+0xee>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a51      	ldr	r2, [pc, #324]	@ (8006d00 <HAL_DMA_Start_IT+0x230>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d108      	bne.n	8006bd0 <HAL_DMA_Start_IT+0x100>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f022 0201 	bic.w	r2, r2, #1
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	e007      	b.n	8006be0 <HAL_DMA_Start_IT+0x110>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0201 	bic.w	r2, r2, #1
 8006bde:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	68b9      	ldr	r1, [r7, #8]
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f001 f906 	bl	8007df8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a34      	ldr	r2, [pc, #208]	@ (8006cc4 <HAL_DMA_Start_IT+0x1f4>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d04a      	beq.n	8006c8c <HAL_DMA_Start_IT+0x1bc>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a33      	ldr	r2, [pc, #204]	@ (8006cc8 <HAL_DMA_Start_IT+0x1f8>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d045      	beq.n	8006c8c <HAL_DMA_Start_IT+0x1bc>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a31      	ldr	r2, [pc, #196]	@ (8006ccc <HAL_DMA_Start_IT+0x1fc>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d040      	beq.n	8006c8c <HAL_DMA_Start_IT+0x1bc>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a30      	ldr	r2, [pc, #192]	@ (8006cd0 <HAL_DMA_Start_IT+0x200>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d03b      	beq.n	8006c8c <HAL_DMA_Start_IT+0x1bc>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a2e      	ldr	r2, [pc, #184]	@ (8006cd4 <HAL_DMA_Start_IT+0x204>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d036      	beq.n	8006c8c <HAL_DMA_Start_IT+0x1bc>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a2d      	ldr	r2, [pc, #180]	@ (8006cd8 <HAL_DMA_Start_IT+0x208>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d031      	beq.n	8006c8c <HAL_DMA_Start_IT+0x1bc>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a2b      	ldr	r2, [pc, #172]	@ (8006cdc <HAL_DMA_Start_IT+0x20c>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d02c      	beq.n	8006c8c <HAL_DMA_Start_IT+0x1bc>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a2a      	ldr	r2, [pc, #168]	@ (8006ce0 <HAL_DMA_Start_IT+0x210>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d027      	beq.n	8006c8c <HAL_DMA_Start_IT+0x1bc>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a28      	ldr	r2, [pc, #160]	@ (8006ce4 <HAL_DMA_Start_IT+0x214>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d022      	beq.n	8006c8c <HAL_DMA_Start_IT+0x1bc>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a27      	ldr	r2, [pc, #156]	@ (8006ce8 <HAL_DMA_Start_IT+0x218>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d01d      	beq.n	8006c8c <HAL_DMA_Start_IT+0x1bc>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a25      	ldr	r2, [pc, #148]	@ (8006cec <HAL_DMA_Start_IT+0x21c>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d018      	beq.n	8006c8c <HAL_DMA_Start_IT+0x1bc>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a24      	ldr	r2, [pc, #144]	@ (8006cf0 <HAL_DMA_Start_IT+0x220>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d013      	beq.n	8006c8c <HAL_DMA_Start_IT+0x1bc>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a22      	ldr	r2, [pc, #136]	@ (8006cf4 <HAL_DMA_Start_IT+0x224>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d00e      	beq.n	8006c8c <HAL_DMA_Start_IT+0x1bc>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a21      	ldr	r2, [pc, #132]	@ (8006cf8 <HAL_DMA_Start_IT+0x228>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d009      	beq.n	8006c8c <HAL_DMA_Start_IT+0x1bc>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a1f      	ldr	r2, [pc, #124]	@ (8006cfc <HAL_DMA_Start_IT+0x22c>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d004      	beq.n	8006c8c <HAL_DMA_Start_IT+0x1bc>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a1e      	ldr	r2, [pc, #120]	@ (8006d00 <HAL_DMA_Start_IT+0x230>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d101      	bne.n	8006c90 <HAL_DMA_Start_IT+0x1c0>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e000      	b.n	8006c92 <HAL_DMA_Start_IT+0x1c2>
 8006c90:	2300      	movs	r3, #0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d036      	beq.n	8006d04 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f023 021e 	bic.w	r2, r3, #30
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f042 0216 	orr.w	r2, r2, #22
 8006ca8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d03e      	beq.n	8006d30 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f042 0208 	orr.w	r2, r2, #8
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	e035      	b.n	8006d30 <HAL_DMA_Start_IT+0x260>
 8006cc4:	40020010 	.word	0x40020010
 8006cc8:	40020028 	.word	0x40020028
 8006ccc:	40020040 	.word	0x40020040
 8006cd0:	40020058 	.word	0x40020058
 8006cd4:	40020070 	.word	0x40020070
 8006cd8:	40020088 	.word	0x40020088
 8006cdc:	400200a0 	.word	0x400200a0
 8006ce0:	400200b8 	.word	0x400200b8
 8006ce4:	40020410 	.word	0x40020410
 8006ce8:	40020428 	.word	0x40020428
 8006cec:	40020440 	.word	0x40020440
 8006cf0:	40020458 	.word	0x40020458
 8006cf4:	40020470 	.word	0x40020470
 8006cf8:	40020488 	.word	0x40020488
 8006cfc:	400204a0 	.word	0x400204a0
 8006d00:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f023 020e 	bic.w	r2, r3, #14
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f042 020a 	orr.w	r2, r2, #10
 8006d16:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d007      	beq.n	8006d30 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f042 0204 	orr.w	r2, r2, #4
 8006d2e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a83      	ldr	r2, [pc, #524]	@ (8006f44 <HAL_DMA_Start_IT+0x474>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d072      	beq.n	8006e20 <HAL_DMA_Start_IT+0x350>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a82      	ldr	r2, [pc, #520]	@ (8006f48 <HAL_DMA_Start_IT+0x478>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d06d      	beq.n	8006e20 <HAL_DMA_Start_IT+0x350>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a80      	ldr	r2, [pc, #512]	@ (8006f4c <HAL_DMA_Start_IT+0x47c>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d068      	beq.n	8006e20 <HAL_DMA_Start_IT+0x350>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a7f      	ldr	r2, [pc, #508]	@ (8006f50 <HAL_DMA_Start_IT+0x480>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d063      	beq.n	8006e20 <HAL_DMA_Start_IT+0x350>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a7d      	ldr	r2, [pc, #500]	@ (8006f54 <HAL_DMA_Start_IT+0x484>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d05e      	beq.n	8006e20 <HAL_DMA_Start_IT+0x350>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a7c      	ldr	r2, [pc, #496]	@ (8006f58 <HAL_DMA_Start_IT+0x488>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d059      	beq.n	8006e20 <HAL_DMA_Start_IT+0x350>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a7a      	ldr	r2, [pc, #488]	@ (8006f5c <HAL_DMA_Start_IT+0x48c>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d054      	beq.n	8006e20 <HAL_DMA_Start_IT+0x350>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a79      	ldr	r2, [pc, #484]	@ (8006f60 <HAL_DMA_Start_IT+0x490>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d04f      	beq.n	8006e20 <HAL_DMA_Start_IT+0x350>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a77      	ldr	r2, [pc, #476]	@ (8006f64 <HAL_DMA_Start_IT+0x494>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d04a      	beq.n	8006e20 <HAL_DMA_Start_IT+0x350>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a76      	ldr	r2, [pc, #472]	@ (8006f68 <HAL_DMA_Start_IT+0x498>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d045      	beq.n	8006e20 <HAL_DMA_Start_IT+0x350>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a74      	ldr	r2, [pc, #464]	@ (8006f6c <HAL_DMA_Start_IT+0x49c>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d040      	beq.n	8006e20 <HAL_DMA_Start_IT+0x350>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a73      	ldr	r2, [pc, #460]	@ (8006f70 <HAL_DMA_Start_IT+0x4a0>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d03b      	beq.n	8006e20 <HAL_DMA_Start_IT+0x350>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a71      	ldr	r2, [pc, #452]	@ (8006f74 <HAL_DMA_Start_IT+0x4a4>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d036      	beq.n	8006e20 <HAL_DMA_Start_IT+0x350>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a70      	ldr	r2, [pc, #448]	@ (8006f78 <HAL_DMA_Start_IT+0x4a8>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d031      	beq.n	8006e20 <HAL_DMA_Start_IT+0x350>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a6e      	ldr	r2, [pc, #440]	@ (8006f7c <HAL_DMA_Start_IT+0x4ac>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d02c      	beq.n	8006e20 <HAL_DMA_Start_IT+0x350>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a6d      	ldr	r2, [pc, #436]	@ (8006f80 <HAL_DMA_Start_IT+0x4b0>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d027      	beq.n	8006e20 <HAL_DMA_Start_IT+0x350>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a6b      	ldr	r2, [pc, #428]	@ (8006f84 <HAL_DMA_Start_IT+0x4b4>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d022      	beq.n	8006e20 <HAL_DMA_Start_IT+0x350>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a6a      	ldr	r2, [pc, #424]	@ (8006f88 <HAL_DMA_Start_IT+0x4b8>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d01d      	beq.n	8006e20 <HAL_DMA_Start_IT+0x350>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a68      	ldr	r2, [pc, #416]	@ (8006f8c <HAL_DMA_Start_IT+0x4bc>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d018      	beq.n	8006e20 <HAL_DMA_Start_IT+0x350>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a67      	ldr	r2, [pc, #412]	@ (8006f90 <HAL_DMA_Start_IT+0x4c0>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d013      	beq.n	8006e20 <HAL_DMA_Start_IT+0x350>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a65      	ldr	r2, [pc, #404]	@ (8006f94 <HAL_DMA_Start_IT+0x4c4>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d00e      	beq.n	8006e20 <HAL_DMA_Start_IT+0x350>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a64      	ldr	r2, [pc, #400]	@ (8006f98 <HAL_DMA_Start_IT+0x4c8>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d009      	beq.n	8006e20 <HAL_DMA_Start_IT+0x350>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a62      	ldr	r2, [pc, #392]	@ (8006f9c <HAL_DMA_Start_IT+0x4cc>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d004      	beq.n	8006e20 <HAL_DMA_Start_IT+0x350>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a61      	ldr	r2, [pc, #388]	@ (8006fa0 <HAL_DMA_Start_IT+0x4d0>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d101      	bne.n	8006e24 <HAL_DMA_Start_IT+0x354>
 8006e20:	2301      	movs	r3, #1
 8006e22:	e000      	b.n	8006e26 <HAL_DMA_Start_IT+0x356>
 8006e24:	2300      	movs	r3, #0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d01a      	beq.n	8006e60 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d007      	beq.n	8006e48 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e46:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d007      	beq.n	8006e60 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e5e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a37      	ldr	r2, [pc, #220]	@ (8006f44 <HAL_DMA_Start_IT+0x474>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d04a      	beq.n	8006f00 <HAL_DMA_Start_IT+0x430>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a36      	ldr	r2, [pc, #216]	@ (8006f48 <HAL_DMA_Start_IT+0x478>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d045      	beq.n	8006f00 <HAL_DMA_Start_IT+0x430>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a34      	ldr	r2, [pc, #208]	@ (8006f4c <HAL_DMA_Start_IT+0x47c>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d040      	beq.n	8006f00 <HAL_DMA_Start_IT+0x430>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a33      	ldr	r2, [pc, #204]	@ (8006f50 <HAL_DMA_Start_IT+0x480>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d03b      	beq.n	8006f00 <HAL_DMA_Start_IT+0x430>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a31      	ldr	r2, [pc, #196]	@ (8006f54 <HAL_DMA_Start_IT+0x484>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d036      	beq.n	8006f00 <HAL_DMA_Start_IT+0x430>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a30      	ldr	r2, [pc, #192]	@ (8006f58 <HAL_DMA_Start_IT+0x488>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d031      	beq.n	8006f00 <HAL_DMA_Start_IT+0x430>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a2e      	ldr	r2, [pc, #184]	@ (8006f5c <HAL_DMA_Start_IT+0x48c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d02c      	beq.n	8006f00 <HAL_DMA_Start_IT+0x430>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a2d      	ldr	r2, [pc, #180]	@ (8006f60 <HAL_DMA_Start_IT+0x490>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d027      	beq.n	8006f00 <HAL_DMA_Start_IT+0x430>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a2b      	ldr	r2, [pc, #172]	@ (8006f64 <HAL_DMA_Start_IT+0x494>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d022      	beq.n	8006f00 <HAL_DMA_Start_IT+0x430>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a2a      	ldr	r2, [pc, #168]	@ (8006f68 <HAL_DMA_Start_IT+0x498>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d01d      	beq.n	8006f00 <HAL_DMA_Start_IT+0x430>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a28      	ldr	r2, [pc, #160]	@ (8006f6c <HAL_DMA_Start_IT+0x49c>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d018      	beq.n	8006f00 <HAL_DMA_Start_IT+0x430>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a27      	ldr	r2, [pc, #156]	@ (8006f70 <HAL_DMA_Start_IT+0x4a0>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d013      	beq.n	8006f00 <HAL_DMA_Start_IT+0x430>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a25      	ldr	r2, [pc, #148]	@ (8006f74 <HAL_DMA_Start_IT+0x4a4>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d00e      	beq.n	8006f00 <HAL_DMA_Start_IT+0x430>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a24      	ldr	r2, [pc, #144]	@ (8006f78 <HAL_DMA_Start_IT+0x4a8>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d009      	beq.n	8006f00 <HAL_DMA_Start_IT+0x430>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a22      	ldr	r2, [pc, #136]	@ (8006f7c <HAL_DMA_Start_IT+0x4ac>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d004      	beq.n	8006f00 <HAL_DMA_Start_IT+0x430>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a21      	ldr	r2, [pc, #132]	@ (8006f80 <HAL_DMA_Start_IT+0x4b0>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d108      	bne.n	8006f12 <HAL_DMA_Start_IT+0x442>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f042 0201 	orr.w	r2, r2, #1
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	e012      	b.n	8006f38 <HAL_DMA_Start_IT+0x468>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f042 0201 	orr.w	r2, r2, #1
 8006f20:	601a      	str	r2, [r3, #0]
 8006f22:	e009      	b.n	8006f38 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f2a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3718      	adds	r7, #24
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	40020010 	.word	0x40020010
 8006f48:	40020028 	.word	0x40020028
 8006f4c:	40020040 	.word	0x40020040
 8006f50:	40020058 	.word	0x40020058
 8006f54:	40020070 	.word	0x40020070
 8006f58:	40020088 	.word	0x40020088
 8006f5c:	400200a0 	.word	0x400200a0
 8006f60:	400200b8 	.word	0x400200b8
 8006f64:	40020410 	.word	0x40020410
 8006f68:	40020428 	.word	0x40020428
 8006f6c:	40020440 	.word	0x40020440
 8006f70:	40020458 	.word	0x40020458
 8006f74:	40020470 	.word	0x40020470
 8006f78:	40020488 	.word	0x40020488
 8006f7c:	400204a0 	.word	0x400204a0
 8006f80:	400204b8 	.word	0x400204b8
 8006f84:	58025408 	.word	0x58025408
 8006f88:	5802541c 	.word	0x5802541c
 8006f8c:	58025430 	.word	0x58025430
 8006f90:	58025444 	.word	0x58025444
 8006f94:	58025458 	.word	0x58025458
 8006f98:	5802546c 	.word	0x5802546c
 8006f9c:	58025480 	.word	0x58025480
 8006fa0:	58025494 	.word	0x58025494

08006fa4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b08a      	sub	sp, #40	@ 0x28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006fac:	2300      	movs	r3, #0
 8006fae:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006fb0:	4b67      	ldr	r3, [pc, #412]	@ (8007150 <HAL_DMA_IRQHandler+0x1ac>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a67      	ldr	r2, [pc, #412]	@ (8007154 <HAL_DMA_IRQHandler+0x1b0>)
 8006fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fba:	0a9b      	lsrs	r3, r3, #10
 8006fbc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fc2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fc8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006fca:	6a3b      	ldr	r3, [r7, #32]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a5f      	ldr	r2, [pc, #380]	@ (8007158 <HAL_DMA_IRQHandler+0x1b4>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d04a      	beq.n	8007076 <HAL_DMA_IRQHandler+0xd2>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a5d      	ldr	r2, [pc, #372]	@ (800715c <HAL_DMA_IRQHandler+0x1b8>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d045      	beq.n	8007076 <HAL_DMA_IRQHandler+0xd2>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a5c      	ldr	r2, [pc, #368]	@ (8007160 <HAL_DMA_IRQHandler+0x1bc>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d040      	beq.n	8007076 <HAL_DMA_IRQHandler+0xd2>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a5a      	ldr	r2, [pc, #360]	@ (8007164 <HAL_DMA_IRQHandler+0x1c0>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d03b      	beq.n	8007076 <HAL_DMA_IRQHandler+0xd2>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a59      	ldr	r2, [pc, #356]	@ (8007168 <HAL_DMA_IRQHandler+0x1c4>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d036      	beq.n	8007076 <HAL_DMA_IRQHandler+0xd2>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a57      	ldr	r2, [pc, #348]	@ (800716c <HAL_DMA_IRQHandler+0x1c8>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d031      	beq.n	8007076 <HAL_DMA_IRQHandler+0xd2>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a56      	ldr	r2, [pc, #344]	@ (8007170 <HAL_DMA_IRQHandler+0x1cc>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d02c      	beq.n	8007076 <HAL_DMA_IRQHandler+0xd2>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a54      	ldr	r2, [pc, #336]	@ (8007174 <HAL_DMA_IRQHandler+0x1d0>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d027      	beq.n	8007076 <HAL_DMA_IRQHandler+0xd2>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a53      	ldr	r2, [pc, #332]	@ (8007178 <HAL_DMA_IRQHandler+0x1d4>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d022      	beq.n	8007076 <HAL_DMA_IRQHandler+0xd2>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a51      	ldr	r2, [pc, #324]	@ (800717c <HAL_DMA_IRQHandler+0x1d8>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d01d      	beq.n	8007076 <HAL_DMA_IRQHandler+0xd2>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a50      	ldr	r2, [pc, #320]	@ (8007180 <HAL_DMA_IRQHandler+0x1dc>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d018      	beq.n	8007076 <HAL_DMA_IRQHandler+0xd2>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a4e      	ldr	r2, [pc, #312]	@ (8007184 <HAL_DMA_IRQHandler+0x1e0>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d013      	beq.n	8007076 <HAL_DMA_IRQHandler+0xd2>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a4d      	ldr	r2, [pc, #308]	@ (8007188 <HAL_DMA_IRQHandler+0x1e4>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d00e      	beq.n	8007076 <HAL_DMA_IRQHandler+0xd2>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a4b      	ldr	r2, [pc, #300]	@ (800718c <HAL_DMA_IRQHandler+0x1e8>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d009      	beq.n	8007076 <HAL_DMA_IRQHandler+0xd2>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a4a      	ldr	r2, [pc, #296]	@ (8007190 <HAL_DMA_IRQHandler+0x1ec>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d004      	beq.n	8007076 <HAL_DMA_IRQHandler+0xd2>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a48      	ldr	r2, [pc, #288]	@ (8007194 <HAL_DMA_IRQHandler+0x1f0>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d101      	bne.n	800707a <HAL_DMA_IRQHandler+0xd6>
 8007076:	2301      	movs	r3, #1
 8007078:	e000      	b.n	800707c <HAL_DMA_IRQHandler+0xd8>
 800707a:	2300      	movs	r3, #0
 800707c:	2b00      	cmp	r3, #0
 800707e:	f000 842b 	beq.w	80078d8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007086:	f003 031f 	and.w	r3, r3, #31
 800708a:	2208      	movs	r2, #8
 800708c:	409a      	lsls	r2, r3
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	4013      	ands	r3, r2
 8007092:	2b00      	cmp	r3, #0
 8007094:	f000 80a2 	beq.w	80071dc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a2e      	ldr	r2, [pc, #184]	@ (8007158 <HAL_DMA_IRQHandler+0x1b4>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d04a      	beq.n	8007138 <HAL_DMA_IRQHandler+0x194>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a2d      	ldr	r2, [pc, #180]	@ (800715c <HAL_DMA_IRQHandler+0x1b8>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d045      	beq.n	8007138 <HAL_DMA_IRQHandler+0x194>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a2b      	ldr	r2, [pc, #172]	@ (8007160 <HAL_DMA_IRQHandler+0x1bc>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d040      	beq.n	8007138 <HAL_DMA_IRQHandler+0x194>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a2a      	ldr	r2, [pc, #168]	@ (8007164 <HAL_DMA_IRQHandler+0x1c0>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d03b      	beq.n	8007138 <HAL_DMA_IRQHandler+0x194>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a28      	ldr	r2, [pc, #160]	@ (8007168 <HAL_DMA_IRQHandler+0x1c4>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d036      	beq.n	8007138 <HAL_DMA_IRQHandler+0x194>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a27      	ldr	r2, [pc, #156]	@ (800716c <HAL_DMA_IRQHandler+0x1c8>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d031      	beq.n	8007138 <HAL_DMA_IRQHandler+0x194>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a25      	ldr	r2, [pc, #148]	@ (8007170 <HAL_DMA_IRQHandler+0x1cc>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d02c      	beq.n	8007138 <HAL_DMA_IRQHandler+0x194>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a24      	ldr	r2, [pc, #144]	@ (8007174 <HAL_DMA_IRQHandler+0x1d0>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d027      	beq.n	8007138 <HAL_DMA_IRQHandler+0x194>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a22      	ldr	r2, [pc, #136]	@ (8007178 <HAL_DMA_IRQHandler+0x1d4>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d022      	beq.n	8007138 <HAL_DMA_IRQHandler+0x194>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a21      	ldr	r2, [pc, #132]	@ (800717c <HAL_DMA_IRQHandler+0x1d8>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d01d      	beq.n	8007138 <HAL_DMA_IRQHandler+0x194>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a1f      	ldr	r2, [pc, #124]	@ (8007180 <HAL_DMA_IRQHandler+0x1dc>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d018      	beq.n	8007138 <HAL_DMA_IRQHandler+0x194>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a1e      	ldr	r2, [pc, #120]	@ (8007184 <HAL_DMA_IRQHandler+0x1e0>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d013      	beq.n	8007138 <HAL_DMA_IRQHandler+0x194>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a1c      	ldr	r2, [pc, #112]	@ (8007188 <HAL_DMA_IRQHandler+0x1e4>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d00e      	beq.n	8007138 <HAL_DMA_IRQHandler+0x194>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a1b      	ldr	r2, [pc, #108]	@ (800718c <HAL_DMA_IRQHandler+0x1e8>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d009      	beq.n	8007138 <HAL_DMA_IRQHandler+0x194>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a19      	ldr	r2, [pc, #100]	@ (8007190 <HAL_DMA_IRQHandler+0x1ec>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d004      	beq.n	8007138 <HAL_DMA_IRQHandler+0x194>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a18      	ldr	r2, [pc, #96]	@ (8007194 <HAL_DMA_IRQHandler+0x1f0>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d12f      	bne.n	8007198 <HAL_DMA_IRQHandler+0x1f4>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0304 	and.w	r3, r3, #4
 8007142:	2b00      	cmp	r3, #0
 8007144:	bf14      	ite	ne
 8007146:	2301      	movne	r3, #1
 8007148:	2300      	moveq	r3, #0
 800714a:	b2db      	uxtb	r3, r3
 800714c:	e02e      	b.n	80071ac <HAL_DMA_IRQHandler+0x208>
 800714e:	bf00      	nop
 8007150:	24000100 	.word	0x24000100
 8007154:	1b4e81b5 	.word	0x1b4e81b5
 8007158:	40020010 	.word	0x40020010
 800715c:	40020028 	.word	0x40020028
 8007160:	40020040 	.word	0x40020040
 8007164:	40020058 	.word	0x40020058
 8007168:	40020070 	.word	0x40020070
 800716c:	40020088 	.word	0x40020088
 8007170:	400200a0 	.word	0x400200a0
 8007174:	400200b8 	.word	0x400200b8
 8007178:	40020410 	.word	0x40020410
 800717c:	40020428 	.word	0x40020428
 8007180:	40020440 	.word	0x40020440
 8007184:	40020458 	.word	0x40020458
 8007188:	40020470 	.word	0x40020470
 800718c:	40020488 	.word	0x40020488
 8007190:	400204a0 	.word	0x400204a0
 8007194:	400204b8 	.word	0x400204b8
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0308 	and.w	r3, r3, #8
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	bf14      	ite	ne
 80071a6:	2301      	movne	r3, #1
 80071a8:	2300      	moveq	r3, #0
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d015      	beq.n	80071dc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f022 0204 	bic.w	r2, r2, #4
 80071be:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071c4:	f003 031f 	and.w	r3, r3, #31
 80071c8:	2208      	movs	r2, #8
 80071ca:	409a      	lsls	r2, r3
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071d4:	f043 0201 	orr.w	r2, r3, #1
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071e0:	f003 031f 	and.w	r3, r3, #31
 80071e4:	69ba      	ldr	r2, [r7, #24]
 80071e6:	fa22 f303 	lsr.w	r3, r2, r3
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d06e      	beq.n	80072d0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a69      	ldr	r2, [pc, #420]	@ (800739c <HAL_DMA_IRQHandler+0x3f8>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d04a      	beq.n	8007292 <HAL_DMA_IRQHandler+0x2ee>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a67      	ldr	r2, [pc, #412]	@ (80073a0 <HAL_DMA_IRQHandler+0x3fc>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d045      	beq.n	8007292 <HAL_DMA_IRQHandler+0x2ee>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a66      	ldr	r2, [pc, #408]	@ (80073a4 <HAL_DMA_IRQHandler+0x400>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d040      	beq.n	8007292 <HAL_DMA_IRQHandler+0x2ee>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a64      	ldr	r2, [pc, #400]	@ (80073a8 <HAL_DMA_IRQHandler+0x404>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d03b      	beq.n	8007292 <HAL_DMA_IRQHandler+0x2ee>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a63      	ldr	r2, [pc, #396]	@ (80073ac <HAL_DMA_IRQHandler+0x408>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d036      	beq.n	8007292 <HAL_DMA_IRQHandler+0x2ee>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a61      	ldr	r2, [pc, #388]	@ (80073b0 <HAL_DMA_IRQHandler+0x40c>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d031      	beq.n	8007292 <HAL_DMA_IRQHandler+0x2ee>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a60      	ldr	r2, [pc, #384]	@ (80073b4 <HAL_DMA_IRQHandler+0x410>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d02c      	beq.n	8007292 <HAL_DMA_IRQHandler+0x2ee>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a5e      	ldr	r2, [pc, #376]	@ (80073b8 <HAL_DMA_IRQHandler+0x414>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d027      	beq.n	8007292 <HAL_DMA_IRQHandler+0x2ee>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a5d      	ldr	r2, [pc, #372]	@ (80073bc <HAL_DMA_IRQHandler+0x418>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d022      	beq.n	8007292 <HAL_DMA_IRQHandler+0x2ee>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a5b      	ldr	r2, [pc, #364]	@ (80073c0 <HAL_DMA_IRQHandler+0x41c>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d01d      	beq.n	8007292 <HAL_DMA_IRQHandler+0x2ee>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a5a      	ldr	r2, [pc, #360]	@ (80073c4 <HAL_DMA_IRQHandler+0x420>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d018      	beq.n	8007292 <HAL_DMA_IRQHandler+0x2ee>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a58      	ldr	r2, [pc, #352]	@ (80073c8 <HAL_DMA_IRQHandler+0x424>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d013      	beq.n	8007292 <HAL_DMA_IRQHandler+0x2ee>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a57      	ldr	r2, [pc, #348]	@ (80073cc <HAL_DMA_IRQHandler+0x428>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d00e      	beq.n	8007292 <HAL_DMA_IRQHandler+0x2ee>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a55      	ldr	r2, [pc, #340]	@ (80073d0 <HAL_DMA_IRQHandler+0x42c>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d009      	beq.n	8007292 <HAL_DMA_IRQHandler+0x2ee>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a54      	ldr	r2, [pc, #336]	@ (80073d4 <HAL_DMA_IRQHandler+0x430>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d004      	beq.n	8007292 <HAL_DMA_IRQHandler+0x2ee>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a52      	ldr	r2, [pc, #328]	@ (80073d8 <HAL_DMA_IRQHandler+0x434>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d10a      	bne.n	80072a8 <HAL_DMA_IRQHandler+0x304>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	695b      	ldr	r3, [r3, #20]
 8007298:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800729c:	2b00      	cmp	r3, #0
 800729e:	bf14      	ite	ne
 80072a0:	2301      	movne	r3, #1
 80072a2:	2300      	moveq	r3, #0
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	e003      	b.n	80072b0 <HAL_DMA_IRQHandler+0x30c>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2300      	movs	r3, #0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00d      	beq.n	80072d0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072b8:	f003 031f 	and.w	r3, r3, #31
 80072bc:	2201      	movs	r2, #1
 80072be:	409a      	lsls	r2, r3
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072c8:	f043 0202 	orr.w	r2, r3, #2
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072d4:	f003 031f 	and.w	r3, r3, #31
 80072d8:	2204      	movs	r2, #4
 80072da:	409a      	lsls	r2, r3
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	4013      	ands	r3, r2
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f000 808f 	beq.w	8007404 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a2c      	ldr	r2, [pc, #176]	@ (800739c <HAL_DMA_IRQHandler+0x3f8>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d04a      	beq.n	8007386 <HAL_DMA_IRQHandler+0x3e2>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a2a      	ldr	r2, [pc, #168]	@ (80073a0 <HAL_DMA_IRQHandler+0x3fc>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d045      	beq.n	8007386 <HAL_DMA_IRQHandler+0x3e2>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a29      	ldr	r2, [pc, #164]	@ (80073a4 <HAL_DMA_IRQHandler+0x400>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d040      	beq.n	8007386 <HAL_DMA_IRQHandler+0x3e2>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a27      	ldr	r2, [pc, #156]	@ (80073a8 <HAL_DMA_IRQHandler+0x404>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d03b      	beq.n	8007386 <HAL_DMA_IRQHandler+0x3e2>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a26      	ldr	r2, [pc, #152]	@ (80073ac <HAL_DMA_IRQHandler+0x408>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d036      	beq.n	8007386 <HAL_DMA_IRQHandler+0x3e2>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a24      	ldr	r2, [pc, #144]	@ (80073b0 <HAL_DMA_IRQHandler+0x40c>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d031      	beq.n	8007386 <HAL_DMA_IRQHandler+0x3e2>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a23      	ldr	r2, [pc, #140]	@ (80073b4 <HAL_DMA_IRQHandler+0x410>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d02c      	beq.n	8007386 <HAL_DMA_IRQHandler+0x3e2>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a21      	ldr	r2, [pc, #132]	@ (80073b8 <HAL_DMA_IRQHandler+0x414>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d027      	beq.n	8007386 <HAL_DMA_IRQHandler+0x3e2>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a20      	ldr	r2, [pc, #128]	@ (80073bc <HAL_DMA_IRQHandler+0x418>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d022      	beq.n	8007386 <HAL_DMA_IRQHandler+0x3e2>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a1e      	ldr	r2, [pc, #120]	@ (80073c0 <HAL_DMA_IRQHandler+0x41c>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d01d      	beq.n	8007386 <HAL_DMA_IRQHandler+0x3e2>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a1d      	ldr	r2, [pc, #116]	@ (80073c4 <HAL_DMA_IRQHandler+0x420>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d018      	beq.n	8007386 <HAL_DMA_IRQHandler+0x3e2>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a1b      	ldr	r2, [pc, #108]	@ (80073c8 <HAL_DMA_IRQHandler+0x424>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d013      	beq.n	8007386 <HAL_DMA_IRQHandler+0x3e2>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a1a      	ldr	r2, [pc, #104]	@ (80073cc <HAL_DMA_IRQHandler+0x428>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d00e      	beq.n	8007386 <HAL_DMA_IRQHandler+0x3e2>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a18      	ldr	r2, [pc, #96]	@ (80073d0 <HAL_DMA_IRQHandler+0x42c>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d009      	beq.n	8007386 <HAL_DMA_IRQHandler+0x3e2>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a17      	ldr	r2, [pc, #92]	@ (80073d4 <HAL_DMA_IRQHandler+0x430>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d004      	beq.n	8007386 <HAL_DMA_IRQHandler+0x3e2>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a15      	ldr	r2, [pc, #84]	@ (80073d8 <HAL_DMA_IRQHandler+0x434>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d12a      	bne.n	80073dc <HAL_DMA_IRQHandler+0x438>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 0302 	and.w	r3, r3, #2
 8007390:	2b00      	cmp	r3, #0
 8007392:	bf14      	ite	ne
 8007394:	2301      	movne	r3, #1
 8007396:	2300      	moveq	r3, #0
 8007398:	b2db      	uxtb	r3, r3
 800739a:	e023      	b.n	80073e4 <HAL_DMA_IRQHandler+0x440>
 800739c:	40020010 	.word	0x40020010
 80073a0:	40020028 	.word	0x40020028
 80073a4:	40020040 	.word	0x40020040
 80073a8:	40020058 	.word	0x40020058
 80073ac:	40020070 	.word	0x40020070
 80073b0:	40020088 	.word	0x40020088
 80073b4:	400200a0 	.word	0x400200a0
 80073b8:	400200b8 	.word	0x400200b8
 80073bc:	40020410 	.word	0x40020410
 80073c0:	40020428 	.word	0x40020428
 80073c4:	40020440 	.word	0x40020440
 80073c8:	40020458 	.word	0x40020458
 80073cc:	40020470 	.word	0x40020470
 80073d0:	40020488 	.word	0x40020488
 80073d4:	400204a0 	.word	0x400204a0
 80073d8:	400204b8 	.word	0x400204b8
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2300      	movs	r3, #0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00d      	beq.n	8007404 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073ec:	f003 031f 	and.w	r3, r3, #31
 80073f0:	2204      	movs	r2, #4
 80073f2:	409a      	lsls	r2, r3
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073fc:	f043 0204 	orr.w	r2, r3, #4
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007408:	f003 031f 	and.w	r3, r3, #31
 800740c:	2210      	movs	r2, #16
 800740e:	409a      	lsls	r2, r3
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	4013      	ands	r3, r2
 8007414:	2b00      	cmp	r3, #0
 8007416:	f000 80a6 	beq.w	8007566 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a85      	ldr	r2, [pc, #532]	@ (8007634 <HAL_DMA_IRQHandler+0x690>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d04a      	beq.n	80074ba <HAL_DMA_IRQHandler+0x516>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a83      	ldr	r2, [pc, #524]	@ (8007638 <HAL_DMA_IRQHandler+0x694>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d045      	beq.n	80074ba <HAL_DMA_IRQHandler+0x516>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a82      	ldr	r2, [pc, #520]	@ (800763c <HAL_DMA_IRQHandler+0x698>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d040      	beq.n	80074ba <HAL_DMA_IRQHandler+0x516>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a80      	ldr	r2, [pc, #512]	@ (8007640 <HAL_DMA_IRQHandler+0x69c>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d03b      	beq.n	80074ba <HAL_DMA_IRQHandler+0x516>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a7f      	ldr	r2, [pc, #508]	@ (8007644 <HAL_DMA_IRQHandler+0x6a0>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d036      	beq.n	80074ba <HAL_DMA_IRQHandler+0x516>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a7d      	ldr	r2, [pc, #500]	@ (8007648 <HAL_DMA_IRQHandler+0x6a4>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d031      	beq.n	80074ba <HAL_DMA_IRQHandler+0x516>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a7c      	ldr	r2, [pc, #496]	@ (800764c <HAL_DMA_IRQHandler+0x6a8>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d02c      	beq.n	80074ba <HAL_DMA_IRQHandler+0x516>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a7a      	ldr	r2, [pc, #488]	@ (8007650 <HAL_DMA_IRQHandler+0x6ac>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d027      	beq.n	80074ba <HAL_DMA_IRQHandler+0x516>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a79      	ldr	r2, [pc, #484]	@ (8007654 <HAL_DMA_IRQHandler+0x6b0>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d022      	beq.n	80074ba <HAL_DMA_IRQHandler+0x516>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a77      	ldr	r2, [pc, #476]	@ (8007658 <HAL_DMA_IRQHandler+0x6b4>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d01d      	beq.n	80074ba <HAL_DMA_IRQHandler+0x516>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a76      	ldr	r2, [pc, #472]	@ (800765c <HAL_DMA_IRQHandler+0x6b8>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d018      	beq.n	80074ba <HAL_DMA_IRQHandler+0x516>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a74      	ldr	r2, [pc, #464]	@ (8007660 <HAL_DMA_IRQHandler+0x6bc>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d013      	beq.n	80074ba <HAL_DMA_IRQHandler+0x516>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a73      	ldr	r2, [pc, #460]	@ (8007664 <HAL_DMA_IRQHandler+0x6c0>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d00e      	beq.n	80074ba <HAL_DMA_IRQHandler+0x516>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a71      	ldr	r2, [pc, #452]	@ (8007668 <HAL_DMA_IRQHandler+0x6c4>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d009      	beq.n	80074ba <HAL_DMA_IRQHandler+0x516>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a70      	ldr	r2, [pc, #448]	@ (800766c <HAL_DMA_IRQHandler+0x6c8>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d004      	beq.n	80074ba <HAL_DMA_IRQHandler+0x516>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a6e      	ldr	r2, [pc, #440]	@ (8007670 <HAL_DMA_IRQHandler+0x6cc>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d10a      	bne.n	80074d0 <HAL_DMA_IRQHandler+0x52c>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0308 	and.w	r3, r3, #8
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	bf14      	ite	ne
 80074c8:	2301      	movne	r3, #1
 80074ca:	2300      	moveq	r3, #0
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	e009      	b.n	80074e4 <HAL_DMA_IRQHandler+0x540>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0304 	and.w	r3, r3, #4
 80074da:	2b00      	cmp	r3, #0
 80074dc:	bf14      	ite	ne
 80074de:	2301      	movne	r3, #1
 80074e0:	2300      	moveq	r3, #0
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d03e      	beq.n	8007566 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ec:	f003 031f 	and.w	r3, r3, #31
 80074f0:	2210      	movs	r2, #16
 80074f2:	409a      	lsls	r2, r3
 80074f4:	6a3b      	ldr	r3, [r7, #32]
 80074f6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d018      	beq.n	8007538 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d108      	bne.n	8007526 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007518:	2b00      	cmp	r3, #0
 800751a:	d024      	beq.n	8007566 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	4798      	blx	r3
 8007524:	e01f      	b.n	8007566 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800752a:	2b00      	cmp	r3, #0
 800752c:	d01b      	beq.n	8007566 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	4798      	blx	r3
 8007536:	e016      	b.n	8007566 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007542:	2b00      	cmp	r3, #0
 8007544:	d107      	bne.n	8007556 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f022 0208 	bic.w	r2, r2, #8
 8007554:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800756a:	f003 031f 	and.w	r3, r3, #31
 800756e:	2220      	movs	r2, #32
 8007570:	409a      	lsls	r2, r3
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	4013      	ands	r3, r2
 8007576:	2b00      	cmp	r3, #0
 8007578:	f000 8110 	beq.w	800779c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a2c      	ldr	r2, [pc, #176]	@ (8007634 <HAL_DMA_IRQHandler+0x690>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d04a      	beq.n	800761c <HAL_DMA_IRQHandler+0x678>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a2b      	ldr	r2, [pc, #172]	@ (8007638 <HAL_DMA_IRQHandler+0x694>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d045      	beq.n	800761c <HAL_DMA_IRQHandler+0x678>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a29      	ldr	r2, [pc, #164]	@ (800763c <HAL_DMA_IRQHandler+0x698>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d040      	beq.n	800761c <HAL_DMA_IRQHandler+0x678>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a28      	ldr	r2, [pc, #160]	@ (8007640 <HAL_DMA_IRQHandler+0x69c>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d03b      	beq.n	800761c <HAL_DMA_IRQHandler+0x678>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a26      	ldr	r2, [pc, #152]	@ (8007644 <HAL_DMA_IRQHandler+0x6a0>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d036      	beq.n	800761c <HAL_DMA_IRQHandler+0x678>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a25      	ldr	r2, [pc, #148]	@ (8007648 <HAL_DMA_IRQHandler+0x6a4>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d031      	beq.n	800761c <HAL_DMA_IRQHandler+0x678>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a23      	ldr	r2, [pc, #140]	@ (800764c <HAL_DMA_IRQHandler+0x6a8>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d02c      	beq.n	800761c <HAL_DMA_IRQHandler+0x678>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a22      	ldr	r2, [pc, #136]	@ (8007650 <HAL_DMA_IRQHandler+0x6ac>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d027      	beq.n	800761c <HAL_DMA_IRQHandler+0x678>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a20      	ldr	r2, [pc, #128]	@ (8007654 <HAL_DMA_IRQHandler+0x6b0>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d022      	beq.n	800761c <HAL_DMA_IRQHandler+0x678>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a1f      	ldr	r2, [pc, #124]	@ (8007658 <HAL_DMA_IRQHandler+0x6b4>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d01d      	beq.n	800761c <HAL_DMA_IRQHandler+0x678>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a1d      	ldr	r2, [pc, #116]	@ (800765c <HAL_DMA_IRQHandler+0x6b8>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d018      	beq.n	800761c <HAL_DMA_IRQHandler+0x678>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a1c      	ldr	r2, [pc, #112]	@ (8007660 <HAL_DMA_IRQHandler+0x6bc>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d013      	beq.n	800761c <HAL_DMA_IRQHandler+0x678>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a1a      	ldr	r2, [pc, #104]	@ (8007664 <HAL_DMA_IRQHandler+0x6c0>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d00e      	beq.n	800761c <HAL_DMA_IRQHandler+0x678>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a19      	ldr	r2, [pc, #100]	@ (8007668 <HAL_DMA_IRQHandler+0x6c4>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d009      	beq.n	800761c <HAL_DMA_IRQHandler+0x678>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a17      	ldr	r2, [pc, #92]	@ (800766c <HAL_DMA_IRQHandler+0x6c8>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d004      	beq.n	800761c <HAL_DMA_IRQHandler+0x678>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a16      	ldr	r2, [pc, #88]	@ (8007670 <HAL_DMA_IRQHandler+0x6cc>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d12b      	bne.n	8007674 <HAL_DMA_IRQHandler+0x6d0>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0310 	and.w	r3, r3, #16
 8007626:	2b00      	cmp	r3, #0
 8007628:	bf14      	ite	ne
 800762a:	2301      	movne	r3, #1
 800762c:	2300      	moveq	r3, #0
 800762e:	b2db      	uxtb	r3, r3
 8007630:	e02a      	b.n	8007688 <HAL_DMA_IRQHandler+0x6e4>
 8007632:	bf00      	nop
 8007634:	40020010 	.word	0x40020010
 8007638:	40020028 	.word	0x40020028
 800763c:	40020040 	.word	0x40020040
 8007640:	40020058 	.word	0x40020058
 8007644:	40020070 	.word	0x40020070
 8007648:	40020088 	.word	0x40020088
 800764c:	400200a0 	.word	0x400200a0
 8007650:	400200b8 	.word	0x400200b8
 8007654:	40020410 	.word	0x40020410
 8007658:	40020428 	.word	0x40020428
 800765c:	40020440 	.word	0x40020440
 8007660:	40020458 	.word	0x40020458
 8007664:	40020470 	.word	0x40020470
 8007668:	40020488 	.word	0x40020488
 800766c:	400204a0 	.word	0x400204a0
 8007670:	400204b8 	.word	0x400204b8
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0302 	and.w	r3, r3, #2
 800767e:	2b00      	cmp	r3, #0
 8007680:	bf14      	ite	ne
 8007682:	2301      	movne	r3, #1
 8007684:	2300      	moveq	r3, #0
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 8087 	beq.w	800779c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007692:	f003 031f 	and.w	r3, r3, #31
 8007696:	2220      	movs	r2, #32
 8007698:	409a      	lsls	r2, r3
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b04      	cmp	r3, #4
 80076a8:	d139      	bne.n	800771e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 0216 	bic.w	r2, r2, #22
 80076b8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	695a      	ldr	r2, [r3, #20]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80076c8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d103      	bne.n	80076da <HAL_DMA_IRQHandler+0x736>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d007      	beq.n	80076ea <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f022 0208 	bic.w	r2, r2, #8
 80076e8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076ee:	f003 031f 	and.w	r3, r3, #31
 80076f2:	223f      	movs	r2, #63	@ 0x3f
 80076f4:	409a      	lsls	r2, r3
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800770e:	2b00      	cmp	r3, #0
 8007710:	f000 834a 	beq.w	8007da8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	4798      	blx	r3
          }
          return;
 800771c:	e344      	b.n	8007da8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d018      	beq.n	800775e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d108      	bne.n	800774c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800773e:	2b00      	cmp	r3, #0
 8007740:	d02c      	beq.n	800779c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	4798      	blx	r3
 800774a:	e027      	b.n	800779c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007750:	2b00      	cmp	r3, #0
 8007752:	d023      	beq.n	800779c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	4798      	blx	r3
 800775c:	e01e      	b.n	800779c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10f      	bne.n	800778c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f022 0210 	bic.w	r2, r2, #16
 800777a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007790:	2b00      	cmp	r3, #0
 8007792:	d003      	beq.n	800779c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f000 8306 	beq.w	8007db2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077aa:	f003 0301 	and.w	r3, r3, #1
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f000 8088 	beq.w	80078c4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2204      	movs	r2, #4
 80077b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a7a      	ldr	r2, [pc, #488]	@ (80079ac <HAL_DMA_IRQHandler+0xa08>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d04a      	beq.n	800785c <HAL_DMA_IRQHandler+0x8b8>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a79      	ldr	r2, [pc, #484]	@ (80079b0 <HAL_DMA_IRQHandler+0xa0c>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d045      	beq.n	800785c <HAL_DMA_IRQHandler+0x8b8>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a77      	ldr	r2, [pc, #476]	@ (80079b4 <HAL_DMA_IRQHandler+0xa10>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d040      	beq.n	800785c <HAL_DMA_IRQHandler+0x8b8>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a76      	ldr	r2, [pc, #472]	@ (80079b8 <HAL_DMA_IRQHandler+0xa14>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d03b      	beq.n	800785c <HAL_DMA_IRQHandler+0x8b8>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a74      	ldr	r2, [pc, #464]	@ (80079bc <HAL_DMA_IRQHandler+0xa18>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d036      	beq.n	800785c <HAL_DMA_IRQHandler+0x8b8>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a73      	ldr	r2, [pc, #460]	@ (80079c0 <HAL_DMA_IRQHandler+0xa1c>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d031      	beq.n	800785c <HAL_DMA_IRQHandler+0x8b8>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a71      	ldr	r2, [pc, #452]	@ (80079c4 <HAL_DMA_IRQHandler+0xa20>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d02c      	beq.n	800785c <HAL_DMA_IRQHandler+0x8b8>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a70      	ldr	r2, [pc, #448]	@ (80079c8 <HAL_DMA_IRQHandler+0xa24>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d027      	beq.n	800785c <HAL_DMA_IRQHandler+0x8b8>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a6e      	ldr	r2, [pc, #440]	@ (80079cc <HAL_DMA_IRQHandler+0xa28>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d022      	beq.n	800785c <HAL_DMA_IRQHandler+0x8b8>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a6d      	ldr	r2, [pc, #436]	@ (80079d0 <HAL_DMA_IRQHandler+0xa2c>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d01d      	beq.n	800785c <HAL_DMA_IRQHandler+0x8b8>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a6b      	ldr	r2, [pc, #428]	@ (80079d4 <HAL_DMA_IRQHandler+0xa30>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d018      	beq.n	800785c <HAL_DMA_IRQHandler+0x8b8>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a6a      	ldr	r2, [pc, #424]	@ (80079d8 <HAL_DMA_IRQHandler+0xa34>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d013      	beq.n	800785c <HAL_DMA_IRQHandler+0x8b8>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a68      	ldr	r2, [pc, #416]	@ (80079dc <HAL_DMA_IRQHandler+0xa38>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d00e      	beq.n	800785c <HAL_DMA_IRQHandler+0x8b8>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a67      	ldr	r2, [pc, #412]	@ (80079e0 <HAL_DMA_IRQHandler+0xa3c>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d009      	beq.n	800785c <HAL_DMA_IRQHandler+0x8b8>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a65      	ldr	r2, [pc, #404]	@ (80079e4 <HAL_DMA_IRQHandler+0xa40>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d004      	beq.n	800785c <HAL_DMA_IRQHandler+0x8b8>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a64      	ldr	r2, [pc, #400]	@ (80079e8 <HAL_DMA_IRQHandler+0xa44>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d108      	bne.n	800786e <HAL_DMA_IRQHandler+0x8ca>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f022 0201 	bic.w	r2, r2, #1
 800786a:	601a      	str	r2, [r3, #0]
 800786c:	e007      	b.n	800787e <HAL_DMA_IRQHandler+0x8da>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f022 0201 	bic.w	r2, r2, #1
 800787c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	3301      	adds	r3, #1
 8007882:	60fb      	str	r3, [r7, #12]
 8007884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007886:	429a      	cmp	r2, r3
 8007888:	d307      	bcc.n	800789a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0301 	and.w	r3, r3, #1
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1f2      	bne.n	800787e <HAL_DMA_IRQHandler+0x8da>
 8007898:	e000      	b.n	800789c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800789a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0301 	and.w	r3, r3, #1
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d004      	beq.n	80078b4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2203      	movs	r2, #3
 80078ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80078b2:	e003      	b.n	80078bc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f000 8272 	beq.w	8007db2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	4798      	blx	r3
 80078d6:	e26c      	b.n	8007db2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a43      	ldr	r2, [pc, #268]	@ (80079ec <HAL_DMA_IRQHandler+0xa48>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d022      	beq.n	8007928 <HAL_DMA_IRQHandler+0x984>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a42      	ldr	r2, [pc, #264]	@ (80079f0 <HAL_DMA_IRQHandler+0xa4c>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d01d      	beq.n	8007928 <HAL_DMA_IRQHandler+0x984>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a40      	ldr	r2, [pc, #256]	@ (80079f4 <HAL_DMA_IRQHandler+0xa50>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d018      	beq.n	8007928 <HAL_DMA_IRQHandler+0x984>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a3f      	ldr	r2, [pc, #252]	@ (80079f8 <HAL_DMA_IRQHandler+0xa54>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d013      	beq.n	8007928 <HAL_DMA_IRQHandler+0x984>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a3d      	ldr	r2, [pc, #244]	@ (80079fc <HAL_DMA_IRQHandler+0xa58>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d00e      	beq.n	8007928 <HAL_DMA_IRQHandler+0x984>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a3c      	ldr	r2, [pc, #240]	@ (8007a00 <HAL_DMA_IRQHandler+0xa5c>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d009      	beq.n	8007928 <HAL_DMA_IRQHandler+0x984>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a3a      	ldr	r2, [pc, #232]	@ (8007a04 <HAL_DMA_IRQHandler+0xa60>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d004      	beq.n	8007928 <HAL_DMA_IRQHandler+0x984>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a39      	ldr	r2, [pc, #228]	@ (8007a08 <HAL_DMA_IRQHandler+0xa64>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d101      	bne.n	800792c <HAL_DMA_IRQHandler+0x988>
 8007928:	2301      	movs	r3, #1
 800792a:	e000      	b.n	800792e <HAL_DMA_IRQHandler+0x98a>
 800792c:	2300      	movs	r3, #0
 800792e:	2b00      	cmp	r3, #0
 8007930:	f000 823f 	beq.w	8007db2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007940:	f003 031f 	and.w	r3, r3, #31
 8007944:	2204      	movs	r2, #4
 8007946:	409a      	lsls	r2, r3
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	4013      	ands	r3, r2
 800794c:	2b00      	cmp	r3, #0
 800794e:	f000 80cd 	beq.w	8007aec <HAL_DMA_IRQHandler+0xb48>
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	f003 0304 	and.w	r3, r3, #4
 8007958:	2b00      	cmp	r3, #0
 800795a:	f000 80c7 	beq.w	8007aec <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007962:	f003 031f 	and.w	r3, r3, #31
 8007966:	2204      	movs	r2, #4
 8007968:	409a      	lsls	r2, r3
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d049      	beq.n	8007a0c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d109      	bne.n	8007996 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007986:	2b00      	cmp	r3, #0
 8007988:	f000 8210 	beq.w	8007dac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007994:	e20a      	b.n	8007dac <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800799a:	2b00      	cmp	r3, #0
 800799c:	f000 8206 	beq.w	8007dac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079a8:	e200      	b.n	8007dac <HAL_DMA_IRQHandler+0xe08>
 80079aa:	bf00      	nop
 80079ac:	40020010 	.word	0x40020010
 80079b0:	40020028 	.word	0x40020028
 80079b4:	40020040 	.word	0x40020040
 80079b8:	40020058 	.word	0x40020058
 80079bc:	40020070 	.word	0x40020070
 80079c0:	40020088 	.word	0x40020088
 80079c4:	400200a0 	.word	0x400200a0
 80079c8:	400200b8 	.word	0x400200b8
 80079cc:	40020410 	.word	0x40020410
 80079d0:	40020428 	.word	0x40020428
 80079d4:	40020440 	.word	0x40020440
 80079d8:	40020458 	.word	0x40020458
 80079dc:	40020470 	.word	0x40020470
 80079e0:	40020488 	.word	0x40020488
 80079e4:	400204a0 	.word	0x400204a0
 80079e8:	400204b8 	.word	0x400204b8
 80079ec:	58025408 	.word	0x58025408
 80079f0:	5802541c 	.word	0x5802541c
 80079f4:	58025430 	.word	0x58025430
 80079f8:	58025444 	.word	0x58025444
 80079fc:	58025458 	.word	0x58025458
 8007a00:	5802546c 	.word	0x5802546c
 8007a04:	58025480 	.word	0x58025480
 8007a08:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	f003 0320 	and.w	r3, r3, #32
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d160      	bne.n	8007ad8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a7f      	ldr	r2, [pc, #508]	@ (8007c18 <HAL_DMA_IRQHandler+0xc74>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d04a      	beq.n	8007ab6 <HAL_DMA_IRQHandler+0xb12>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a7d      	ldr	r2, [pc, #500]	@ (8007c1c <HAL_DMA_IRQHandler+0xc78>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d045      	beq.n	8007ab6 <HAL_DMA_IRQHandler+0xb12>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a7c      	ldr	r2, [pc, #496]	@ (8007c20 <HAL_DMA_IRQHandler+0xc7c>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d040      	beq.n	8007ab6 <HAL_DMA_IRQHandler+0xb12>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a7a      	ldr	r2, [pc, #488]	@ (8007c24 <HAL_DMA_IRQHandler+0xc80>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d03b      	beq.n	8007ab6 <HAL_DMA_IRQHandler+0xb12>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a79      	ldr	r2, [pc, #484]	@ (8007c28 <HAL_DMA_IRQHandler+0xc84>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d036      	beq.n	8007ab6 <HAL_DMA_IRQHandler+0xb12>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a77      	ldr	r2, [pc, #476]	@ (8007c2c <HAL_DMA_IRQHandler+0xc88>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d031      	beq.n	8007ab6 <HAL_DMA_IRQHandler+0xb12>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a76      	ldr	r2, [pc, #472]	@ (8007c30 <HAL_DMA_IRQHandler+0xc8c>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d02c      	beq.n	8007ab6 <HAL_DMA_IRQHandler+0xb12>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a74      	ldr	r2, [pc, #464]	@ (8007c34 <HAL_DMA_IRQHandler+0xc90>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d027      	beq.n	8007ab6 <HAL_DMA_IRQHandler+0xb12>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a73      	ldr	r2, [pc, #460]	@ (8007c38 <HAL_DMA_IRQHandler+0xc94>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d022      	beq.n	8007ab6 <HAL_DMA_IRQHandler+0xb12>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a71      	ldr	r2, [pc, #452]	@ (8007c3c <HAL_DMA_IRQHandler+0xc98>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d01d      	beq.n	8007ab6 <HAL_DMA_IRQHandler+0xb12>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a70      	ldr	r2, [pc, #448]	@ (8007c40 <HAL_DMA_IRQHandler+0xc9c>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d018      	beq.n	8007ab6 <HAL_DMA_IRQHandler+0xb12>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a6e      	ldr	r2, [pc, #440]	@ (8007c44 <HAL_DMA_IRQHandler+0xca0>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d013      	beq.n	8007ab6 <HAL_DMA_IRQHandler+0xb12>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a6d      	ldr	r2, [pc, #436]	@ (8007c48 <HAL_DMA_IRQHandler+0xca4>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d00e      	beq.n	8007ab6 <HAL_DMA_IRQHandler+0xb12>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a6b      	ldr	r2, [pc, #428]	@ (8007c4c <HAL_DMA_IRQHandler+0xca8>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d009      	beq.n	8007ab6 <HAL_DMA_IRQHandler+0xb12>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a6a      	ldr	r2, [pc, #424]	@ (8007c50 <HAL_DMA_IRQHandler+0xcac>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d004      	beq.n	8007ab6 <HAL_DMA_IRQHandler+0xb12>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a68      	ldr	r2, [pc, #416]	@ (8007c54 <HAL_DMA_IRQHandler+0xcb0>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d108      	bne.n	8007ac8 <HAL_DMA_IRQHandler+0xb24>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f022 0208 	bic.w	r2, r2, #8
 8007ac4:	601a      	str	r2, [r3, #0]
 8007ac6:	e007      	b.n	8007ad8 <HAL_DMA_IRQHandler+0xb34>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f022 0204 	bic.w	r2, r2, #4
 8007ad6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 8165 	beq.w	8007dac <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007aea:	e15f      	b.n	8007dac <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007af0:	f003 031f 	and.w	r3, r3, #31
 8007af4:	2202      	movs	r2, #2
 8007af6:	409a      	lsls	r2, r3
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	4013      	ands	r3, r2
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f000 80c5 	beq.w	8007c8c <HAL_DMA_IRQHandler+0xce8>
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	f003 0302 	and.w	r3, r3, #2
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f000 80bf 	beq.w	8007c8c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b12:	f003 031f 	and.w	r3, r3, #31
 8007b16:	2202      	movs	r2, #2
 8007b18:	409a      	lsls	r2, r3
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d018      	beq.n	8007b5a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d109      	bne.n	8007b46 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f000 813a 	beq.w	8007db0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b44:	e134      	b.n	8007db0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	f000 8130 	beq.w	8007db0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b58:	e12a      	b.n	8007db0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	f003 0320 	and.w	r3, r3, #32
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f040 8089 	bne.w	8007c78 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a2b      	ldr	r2, [pc, #172]	@ (8007c18 <HAL_DMA_IRQHandler+0xc74>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d04a      	beq.n	8007c06 <HAL_DMA_IRQHandler+0xc62>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a29      	ldr	r2, [pc, #164]	@ (8007c1c <HAL_DMA_IRQHandler+0xc78>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d045      	beq.n	8007c06 <HAL_DMA_IRQHandler+0xc62>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a28      	ldr	r2, [pc, #160]	@ (8007c20 <HAL_DMA_IRQHandler+0xc7c>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d040      	beq.n	8007c06 <HAL_DMA_IRQHandler+0xc62>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a26      	ldr	r2, [pc, #152]	@ (8007c24 <HAL_DMA_IRQHandler+0xc80>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d03b      	beq.n	8007c06 <HAL_DMA_IRQHandler+0xc62>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a25      	ldr	r2, [pc, #148]	@ (8007c28 <HAL_DMA_IRQHandler+0xc84>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d036      	beq.n	8007c06 <HAL_DMA_IRQHandler+0xc62>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a23      	ldr	r2, [pc, #140]	@ (8007c2c <HAL_DMA_IRQHandler+0xc88>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d031      	beq.n	8007c06 <HAL_DMA_IRQHandler+0xc62>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a22      	ldr	r2, [pc, #136]	@ (8007c30 <HAL_DMA_IRQHandler+0xc8c>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d02c      	beq.n	8007c06 <HAL_DMA_IRQHandler+0xc62>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a20      	ldr	r2, [pc, #128]	@ (8007c34 <HAL_DMA_IRQHandler+0xc90>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d027      	beq.n	8007c06 <HAL_DMA_IRQHandler+0xc62>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a1f      	ldr	r2, [pc, #124]	@ (8007c38 <HAL_DMA_IRQHandler+0xc94>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d022      	beq.n	8007c06 <HAL_DMA_IRQHandler+0xc62>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8007c3c <HAL_DMA_IRQHandler+0xc98>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d01d      	beq.n	8007c06 <HAL_DMA_IRQHandler+0xc62>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a1c      	ldr	r2, [pc, #112]	@ (8007c40 <HAL_DMA_IRQHandler+0xc9c>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d018      	beq.n	8007c06 <HAL_DMA_IRQHandler+0xc62>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a1a      	ldr	r2, [pc, #104]	@ (8007c44 <HAL_DMA_IRQHandler+0xca0>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d013      	beq.n	8007c06 <HAL_DMA_IRQHandler+0xc62>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a19      	ldr	r2, [pc, #100]	@ (8007c48 <HAL_DMA_IRQHandler+0xca4>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d00e      	beq.n	8007c06 <HAL_DMA_IRQHandler+0xc62>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a17      	ldr	r2, [pc, #92]	@ (8007c4c <HAL_DMA_IRQHandler+0xca8>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d009      	beq.n	8007c06 <HAL_DMA_IRQHandler+0xc62>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a16      	ldr	r2, [pc, #88]	@ (8007c50 <HAL_DMA_IRQHandler+0xcac>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d004      	beq.n	8007c06 <HAL_DMA_IRQHandler+0xc62>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a14      	ldr	r2, [pc, #80]	@ (8007c54 <HAL_DMA_IRQHandler+0xcb0>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d128      	bne.n	8007c58 <HAL_DMA_IRQHandler+0xcb4>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f022 0214 	bic.w	r2, r2, #20
 8007c14:	601a      	str	r2, [r3, #0]
 8007c16:	e027      	b.n	8007c68 <HAL_DMA_IRQHandler+0xcc4>
 8007c18:	40020010 	.word	0x40020010
 8007c1c:	40020028 	.word	0x40020028
 8007c20:	40020040 	.word	0x40020040
 8007c24:	40020058 	.word	0x40020058
 8007c28:	40020070 	.word	0x40020070
 8007c2c:	40020088 	.word	0x40020088
 8007c30:	400200a0 	.word	0x400200a0
 8007c34:	400200b8 	.word	0x400200b8
 8007c38:	40020410 	.word	0x40020410
 8007c3c:	40020428 	.word	0x40020428
 8007c40:	40020440 	.word	0x40020440
 8007c44:	40020458 	.word	0x40020458
 8007c48:	40020470 	.word	0x40020470
 8007c4c:	40020488 	.word	0x40020488
 8007c50:	400204a0 	.word	0x400204a0
 8007c54:	400204b8 	.word	0x400204b8
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f022 020a 	bic.w	r2, r2, #10
 8007c66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 8097 	beq.w	8007db0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c8a:	e091      	b.n	8007db0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c90:	f003 031f 	and.w	r3, r3, #31
 8007c94:	2208      	movs	r2, #8
 8007c96:	409a      	lsls	r2, r3
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f000 8088 	beq.w	8007db2 <HAL_DMA_IRQHandler+0xe0e>
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	f003 0308 	and.w	r3, r3, #8
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f000 8082 	beq.w	8007db2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a41      	ldr	r2, [pc, #260]	@ (8007db8 <HAL_DMA_IRQHandler+0xe14>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d04a      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xdaa>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a3f      	ldr	r2, [pc, #252]	@ (8007dbc <HAL_DMA_IRQHandler+0xe18>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d045      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xdaa>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a3e      	ldr	r2, [pc, #248]	@ (8007dc0 <HAL_DMA_IRQHandler+0xe1c>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d040      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xdaa>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a3c      	ldr	r2, [pc, #240]	@ (8007dc4 <HAL_DMA_IRQHandler+0xe20>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d03b      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xdaa>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a3b      	ldr	r2, [pc, #236]	@ (8007dc8 <HAL_DMA_IRQHandler+0xe24>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d036      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xdaa>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a39      	ldr	r2, [pc, #228]	@ (8007dcc <HAL_DMA_IRQHandler+0xe28>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d031      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xdaa>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a38      	ldr	r2, [pc, #224]	@ (8007dd0 <HAL_DMA_IRQHandler+0xe2c>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d02c      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xdaa>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a36      	ldr	r2, [pc, #216]	@ (8007dd4 <HAL_DMA_IRQHandler+0xe30>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d027      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xdaa>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a35      	ldr	r2, [pc, #212]	@ (8007dd8 <HAL_DMA_IRQHandler+0xe34>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d022      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xdaa>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a33      	ldr	r2, [pc, #204]	@ (8007ddc <HAL_DMA_IRQHandler+0xe38>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d01d      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xdaa>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a32      	ldr	r2, [pc, #200]	@ (8007de0 <HAL_DMA_IRQHandler+0xe3c>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d018      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xdaa>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a30      	ldr	r2, [pc, #192]	@ (8007de4 <HAL_DMA_IRQHandler+0xe40>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d013      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xdaa>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a2f      	ldr	r2, [pc, #188]	@ (8007de8 <HAL_DMA_IRQHandler+0xe44>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d00e      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xdaa>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a2d      	ldr	r2, [pc, #180]	@ (8007dec <HAL_DMA_IRQHandler+0xe48>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d009      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xdaa>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a2c      	ldr	r2, [pc, #176]	@ (8007df0 <HAL_DMA_IRQHandler+0xe4c>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d004      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xdaa>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a2a      	ldr	r2, [pc, #168]	@ (8007df4 <HAL_DMA_IRQHandler+0xe50>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d108      	bne.n	8007d60 <HAL_DMA_IRQHandler+0xdbc>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f022 021c 	bic.w	r2, r2, #28
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	e007      	b.n	8007d70 <HAL_DMA_IRQHandler+0xdcc>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f022 020e 	bic.w	r2, r2, #14
 8007d6e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d74:	f003 031f 	and.w	r3, r3, #31
 8007d78:	2201      	movs	r2, #1
 8007d7a:	409a      	lsls	r2, r3
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d009      	beq.n	8007db2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	4798      	blx	r3
 8007da6:	e004      	b.n	8007db2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007da8:	bf00      	nop
 8007daa:	e002      	b.n	8007db2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007dac:	bf00      	nop
 8007dae:	e000      	b.n	8007db2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007db0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007db2:	3728      	adds	r7, #40	@ 0x28
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	40020010 	.word	0x40020010
 8007dbc:	40020028 	.word	0x40020028
 8007dc0:	40020040 	.word	0x40020040
 8007dc4:	40020058 	.word	0x40020058
 8007dc8:	40020070 	.word	0x40020070
 8007dcc:	40020088 	.word	0x40020088
 8007dd0:	400200a0 	.word	0x400200a0
 8007dd4:	400200b8 	.word	0x400200b8
 8007dd8:	40020410 	.word	0x40020410
 8007ddc:	40020428 	.word	0x40020428
 8007de0:	40020440 	.word	0x40020440
 8007de4:	40020458 	.word	0x40020458
 8007de8:	40020470 	.word	0x40020470
 8007dec:	40020488 	.word	0x40020488
 8007df0:	400204a0 	.word	0x400204a0
 8007df4:	400204b8 	.word	0x400204b8

08007df8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b087      	sub	sp, #28
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
 8007e04:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e0a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e10:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a7f      	ldr	r2, [pc, #508]	@ (8008014 <DMA_SetConfig+0x21c>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d072      	beq.n	8007f02 <DMA_SetConfig+0x10a>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a7d      	ldr	r2, [pc, #500]	@ (8008018 <DMA_SetConfig+0x220>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d06d      	beq.n	8007f02 <DMA_SetConfig+0x10a>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a7c      	ldr	r2, [pc, #496]	@ (800801c <DMA_SetConfig+0x224>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d068      	beq.n	8007f02 <DMA_SetConfig+0x10a>
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a7a      	ldr	r2, [pc, #488]	@ (8008020 <DMA_SetConfig+0x228>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d063      	beq.n	8007f02 <DMA_SetConfig+0x10a>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a79      	ldr	r2, [pc, #484]	@ (8008024 <DMA_SetConfig+0x22c>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d05e      	beq.n	8007f02 <DMA_SetConfig+0x10a>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a77      	ldr	r2, [pc, #476]	@ (8008028 <DMA_SetConfig+0x230>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d059      	beq.n	8007f02 <DMA_SetConfig+0x10a>
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a76      	ldr	r2, [pc, #472]	@ (800802c <DMA_SetConfig+0x234>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d054      	beq.n	8007f02 <DMA_SetConfig+0x10a>
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a74      	ldr	r2, [pc, #464]	@ (8008030 <DMA_SetConfig+0x238>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d04f      	beq.n	8007f02 <DMA_SetConfig+0x10a>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a73      	ldr	r2, [pc, #460]	@ (8008034 <DMA_SetConfig+0x23c>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d04a      	beq.n	8007f02 <DMA_SetConfig+0x10a>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a71      	ldr	r2, [pc, #452]	@ (8008038 <DMA_SetConfig+0x240>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d045      	beq.n	8007f02 <DMA_SetConfig+0x10a>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a70      	ldr	r2, [pc, #448]	@ (800803c <DMA_SetConfig+0x244>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d040      	beq.n	8007f02 <DMA_SetConfig+0x10a>
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a6e      	ldr	r2, [pc, #440]	@ (8008040 <DMA_SetConfig+0x248>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d03b      	beq.n	8007f02 <DMA_SetConfig+0x10a>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a6d      	ldr	r2, [pc, #436]	@ (8008044 <DMA_SetConfig+0x24c>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d036      	beq.n	8007f02 <DMA_SetConfig+0x10a>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a6b      	ldr	r2, [pc, #428]	@ (8008048 <DMA_SetConfig+0x250>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d031      	beq.n	8007f02 <DMA_SetConfig+0x10a>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a6a      	ldr	r2, [pc, #424]	@ (800804c <DMA_SetConfig+0x254>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d02c      	beq.n	8007f02 <DMA_SetConfig+0x10a>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a68      	ldr	r2, [pc, #416]	@ (8008050 <DMA_SetConfig+0x258>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d027      	beq.n	8007f02 <DMA_SetConfig+0x10a>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a67      	ldr	r2, [pc, #412]	@ (8008054 <DMA_SetConfig+0x25c>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d022      	beq.n	8007f02 <DMA_SetConfig+0x10a>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a65      	ldr	r2, [pc, #404]	@ (8008058 <DMA_SetConfig+0x260>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d01d      	beq.n	8007f02 <DMA_SetConfig+0x10a>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a64      	ldr	r2, [pc, #400]	@ (800805c <DMA_SetConfig+0x264>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d018      	beq.n	8007f02 <DMA_SetConfig+0x10a>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a62      	ldr	r2, [pc, #392]	@ (8008060 <DMA_SetConfig+0x268>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d013      	beq.n	8007f02 <DMA_SetConfig+0x10a>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a61      	ldr	r2, [pc, #388]	@ (8008064 <DMA_SetConfig+0x26c>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d00e      	beq.n	8007f02 <DMA_SetConfig+0x10a>
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a5f      	ldr	r2, [pc, #380]	@ (8008068 <DMA_SetConfig+0x270>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d009      	beq.n	8007f02 <DMA_SetConfig+0x10a>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a5e      	ldr	r2, [pc, #376]	@ (800806c <DMA_SetConfig+0x274>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d004      	beq.n	8007f02 <DMA_SetConfig+0x10a>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a5c      	ldr	r2, [pc, #368]	@ (8008070 <DMA_SetConfig+0x278>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d101      	bne.n	8007f06 <DMA_SetConfig+0x10e>
 8007f02:	2301      	movs	r3, #1
 8007f04:	e000      	b.n	8007f08 <DMA_SetConfig+0x110>
 8007f06:	2300      	movs	r3, #0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d00d      	beq.n	8007f28 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007f14:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d004      	beq.n	8007f28 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007f26:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a39      	ldr	r2, [pc, #228]	@ (8008014 <DMA_SetConfig+0x21c>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d04a      	beq.n	8007fc8 <DMA_SetConfig+0x1d0>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a38      	ldr	r2, [pc, #224]	@ (8008018 <DMA_SetConfig+0x220>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d045      	beq.n	8007fc8 <DMA_SetConfig+0x1d0>
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a36      	ldr	r2, [pc, #216]	@ (800801c <DMA_SetConfig+0x224>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d040      	beq.n	8007fc8 <DMA_SetConfig+0x1d0>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a35      	ldr	r2, [pc, #212]	@ (8008020 <DMA_SetConfig+0x228>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d03b      	beq.n	8007fc8 <DMA_SetConfig+0x1d0>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a33      	ldr	r2, [pc, #204]	@ (8008024 <DMA_SetConfig+0x22c>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d036      	beq.n	8007fc8 <DMA_SetConfig+0x1d0>
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a32      	ldr	r2, [pc, #200]	@ (8008028 <DMA_SetConfig+0x230>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d031      	beq.n	8007fc8 <DMA_SetConfig+0x1d0>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a30      	ldr	r2, [pc, #192]	@ (800802c <DMA_SetConfig+0x234>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d02c      	beq.n	8007fc8 <DMA_SetConfig+0x1d0>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a2f      	ldr	r2, [pc, #188]	@ (8008030 <DMA_SetConfig+0x238>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d027      	beq.n	8007fc8 <DMA_SetConfig+0x1d0>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a2d      	ldr	r2, [pc, #180]	@ (8008034 <DMA_SetConfig+0x23c>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d022      	beq.n	8007fc8 <DMA_SetConfig+0x1d0>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a2c      	ldr	r2, [pc, #176]	@ (8008038 <DMA_SetConfig+0x240>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d01d      	beq.n	8007fc8 <DMA_SetConfig+0x1d0>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a2a      	ldr	r2, [pc, #168]	@ (800803c <DMA_SetConfig+0x244>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d018      	beq.n	8007fc8 <DMA_SetConfig+0x1d0>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a29      	ldr	r2, [pc, #164]	@ (8008040 <DMA_SetConfig+0x248>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d013      	beq.n	8007fc8 <DMA_SetConfig+0x1d0>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a27      	ldr	r2, [pc, #156]	@ (8008044 <DMA_SetConfig+0x24c>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d00e      	beq.n	8007fc8 <DMA_SetConfig+0x1d0>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a26      	ldr	r2, [pc, #152]	@ (8008048 <DMA_SetConfig+0x250>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d009      	beq.n	8007fc8 <DMA_SetConfig+0x1d0>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a24      	ldr	r2, [pc, #144]	@ (800804c <DMA_SetConfig+0x254>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d004      	beq.n	8007fc8 <DMA_SetConfig+0x1d0>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a23      	ldr	r2, [pc, #140]	@ (8008050 <DMA_SetConfig+0x258>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d101      	bne.n	8007fcc <DMA_SetConfig+0x1d4>
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e000      	b.n	8007fce <DMA_SetConfig+0x1d6>
 8007fcc:	2300      	movs	r3, #0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d059      	beq.n	8008086 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fd6:	f003 031f 	and.w	r3, r3, #31
 8007fda:	223f      	movs	r2, #63	@ 0x3f
 8007fdc:	409a      	lsls	r2, r3
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007ff0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	683a      	ldr	r2, [r7, #0]
 8007ff8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	2b40      	cmp	r3, #64	@ 0x40
 8008000:	d138      	bne.n	8008074 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008012:	e086      	b.n	8008122 <DMA_SetConfig+0x32a>
 8008014:	40020010 	.word	0x40020010
 8008018:	40020028 	.word	0x40020028
 800801c:	40020040 	.word	0x40020040
 8008020:	40020058 	.word	0x40020058
 8008024:	40020070 	.word	0x40020070
 8008028:	40020088 	.word	0x40020088
 800802c:	400200a0 	.word	0x400200a0
 8008030:	400200b8 	.word	0x400200b8
 8008034:	40020410 	.word	0x40020410
 8008038:	40020428 	.word	0x40020428
 800803c:	40020440 	.word	0x40020440
 8008040:	40020458 	.word	0x40020458
 8008044:	40020470 	.word	0x40020470
 8008048:	40020488 	.word	0x40020488
 800804c:	400204a0 	.word	0x400204a0
 8008050:	400204b8 	.word	0x400204b8
 8008054:	58025408 	.word	0x58025408
 8008058:	5802541c 	.word	0x5802541c
 800805c:	58025430 	.word	0x58025430
 8008060:	58025444 	.word	0x58025444
 8008064:	58025458 	.word	0x58025458
 8008068:	5802546c 	.word	0x5802546c
 800806c:	58025480 	.word	0x58025480
 8008070:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	60da      	str	r2, [r3, #12]
}
 8008084:	e04d      	b.n	8008122 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a29      	ldr	r2, [pc, #164]	@ (8008130 <DMA_SetConfig+0x338>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d022      	beq.n	80080d6 <DMA_SetConfig+0x2de>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a27      	ldr	r2, [pc, #156]	@ (8008134 <DMA_SetConfig+0x33c>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d01d      	beq.n	80080d6 <DMA_SetConfig+0x2de>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a26      	ldr	r2, [pc, #152]	@ (8008138 <DMA_SetConfig+0x340>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d018      	beq.n	80080d6 <DMA_SetConfig+0x2de>
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a24      	ldr	r2, [pc, #144]	@ (800813c <DMA_SetConfig+0x344>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d013      	beq.n	80080d6 <DMA_SetConfig+0x2de>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a23      	ldr	r2, [pc, #140]	@ (8008140 <DMA_SetConfig+0x348>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d00e      	beq.n	80080d6 <DMA_SetConfig+0x2de>
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a21      	ldr	r2, [pc, #132]	@ (8008144 <DMA_SetConfig+0x34c>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d009      	beq.n	80080d6 <DMA_SetConfig+0x2de>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a20      	ldr	r2, [pc, #128]	@ (8008148 <DMA_SetConfig+0x350>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d004      	beq.n	80080d6 <DMA_SetConfig+0x2de>
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a1e      	ldr	r2, [pc, #120]	@ (800814c <DMA_SetConfig+0x354>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d101      	bne.n	80080da <DMA_SetConfig+0x2e2>
 80080d6:	2301      	movs	r3, #1
 80080d8:	e000      	b.n	80080dc <DMA_SetConfig+0x2e4>
 80080da:	2300      	movs	r3, #0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d020      	beq.n	8008122 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080e4:	f003 031f 	and.w	r3, r3, #31
 80080e8:	2201      	movs	r2, #1
 80080ea:	409a      	lsls	r2, r3
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	683a      	ldr	r2, [r7, #0]
 80080f6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	2b40      	cmp	r3, #64	@ 0x40
 80080fe:	d108      	bne.n	8008112 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	60da      	str	r2, [r3, #12]
}
 8008110:	e007      	b.n	8008122 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	60da      	str	r2, [r3, #12]
}
 8008122:	bf00      	nop
 8008124:	371c      	adds	r7, #28
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	58025408 	.word	0x58025408
 8008134:	5802541c 	.word	0x5802541c
 8008138:	58025430 	.word	0x58025430
 800813c:	58025444 	.word	0x58025444
 8008140:	58025458 	.word	0x58025458
 8008144:	5802546c 	.word	0x5802546c
 8008148:	58025480 	.word	0x58025480
 800814c:	58025494 	.word	0x58025494

08008150 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a42      	ldr	r2, [pc, #264]	@ (8008268 <DMA_CalcBaseAndBitshift+0x118>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d04a      	beq.n	80081f8 <DMA_CalcBaseAndBitshift+0xa8>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a41      	ldr	r2, [pc, #260]	@ (800826c <DMA_CalcBaseAndBitshift+0x11c>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d045      	beq.n	80081f8 <DMA_CalcBaseAndBitshift+0xa8>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a3f      	ldr	r2, [pc, #252]	@ (8008270 <DMA_CalcBaseAndBitshift+0x120>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d040      	beq.n	80081f8 <DMA_CalcBaseAndBitshift+0xa8>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a3e      	ldr	r2, [pc, #248]	@ (8008274 <DMA_CalcBaseAndBitshift+0x124>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d03b      	beq.n	80081f8 <DMA_CalcBaseAndBitshift+0xa8>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a3c      	ldr	r2, [pc, #240]	@ (8008278 <DMA_CalcBaseAndBitshift+0x128>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d036      	beq.n	80081f8 <DMA_CalcBaseAndBitshift+0xa8>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a3b      	ldr	r2, [pc, #236]	@ (800827c <DMA_CalcBaseAndBitshift+0x12c>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d031      	beq.n	80081f8 <DMA_CalcBaseAndBitshift+0xa8>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a39      	ldr	r2, [pc, #228]	@ (8008280 <DMA_CalcBaseAndBitshift+0x130>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d02c      	beq.n	80081f8 <DMA_CalcBaseAndBitshift+0xa8>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a38      	ldr	r2, [pc, #224]	@ (8008284 <DMA_CalcBaseAndBitshift+0x134>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d027      	beq.n	80081f8 <DMA_CalcBaseAndBitshift+0xa8>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a36      	ldr	r2, [pc, #216]	@ (8008288 <DMA_CalcBaseAndBitshift+0x138>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d022      	beq.n	80081f8 <DMA_CalcBaseAndBitshift+0xa8>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a35      	ldr	r2, [pc, #212]	@ (800828c <DMA_CalcBaseAndBitshift+0x13c>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d01d      	beq.n	80081f8 <DMA_CalcBaseAndBitshift+0xa8>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a33      	ldr	r2, [pc, #204]	@ (8008290 <DMA_CalcBaseAndBitshift+0x140>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d018      	beq.n	80081f8 <DMA_CalcBaseAndBitshift+0xa8>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a32      	ldr	r2, [pc, #200]	@ (8008294 <DMA_CalcBaseAndBitshift+0x144>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d013      	beq.n	80081f8 <DMA_CalcBaseAndBitshift+0xa8>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a30      	ldr	r2, [pc, #192]	@ (8008298 <DMA_CalcBaseAndBitshift+0x148>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d00e      	beq.n	80081f8 <DMA_CalcBaseAndBitshift+0xa8>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a2f      	ldr	r2, [pc, #188]	@ (800829c <DMA_CalcBaseAndBitshift+0x14c>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d009      	beq.n	80081f8 <DMA_CalcBaseAndBitshift+0xa8>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a2d      	ldr	r2, [pc, #180]	@ (80082a0 <DMA_CalcBaseAndBitshift+0x150>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d004      	beq.n	80081f8 <DMA_CalcBaseAndBitshift+0xa8>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a2c      	ldr	r2, [pc, #176]	@ (80082a4 <DMA_CalcBaseAndBitshift+0x154>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d101      	bne.n	80081fc <DMA_CalcBaseAndBitshift+0xac>
 80081f8:	2301      	movs	r3, #1
 80081fa:	e000      	b.n	80081fe <DMA_CalcBaseAndBitshift+0xae>
 80081fc:	2300      	movs	r3, #0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d024      	beq.n	800824c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	b2db      	uxtb	r3, r3
 8008208:	3b10      	subs	r3, #16
 800820a:	4a27      	ldr	r2, [pc, #156]	@ (80082a8 <DMA_CalcBaseAndBitshift+0x158>)
 800820c:	fba2 2303 	umull	r2, r3, r2, r3
 8008210:	091b      	lsrs	r3, r3, #4
 8008212:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f003 0307 	and.w	r3, r3, #7
 800821a:	4a24      	ldr	r2, [pc, #144]	@ (80082ac <DMA_CalcBaseAndBitshift+0x15c>)
 800821c:	5cd3      	ldrb	r3, [r2, r3]
 800821e:	461a      	mov	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2b03      	cmp	r3, #3
 8008228:	d908      	bls.n	800823c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	461a      	mov	r2, r3
 8008230:	4b1f      	ldr	r3, [pc, #124]	@ (80082b0 <DMA_CalcBaseAndBitshift+0x160>)
 8008232:	4013      	ands	r3, r2
 8008234:	1d1a      	adds	r2, r3, #4
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	659a      	str	r2, [r3, #88]	@ 0x58
 800823a:	e00d      	b.n	8008258 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	461a      	mov	r2, r3
 8008242:	4b1b      	ldr	r3, [pc, #108]	@ (80082b0 <DMA_CalcBaseAndBitshift+0x160>)
 8008244:	4013      	ands	r3, r2
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	6593      	str	r3, [r2, #88]	@ 0x58
 800824a:	e005      	b.n	8008258 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800825c:	4618      	mov	r0, r3
 800825e:	3714      	adds	r7, #20
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr
 8008268:	40020010 	.word	0x40020010
 800826c:	40020028 	.word	0x40020028
 8008270:	40020040 	.word	0x40020040
 8008274:	40020058 	.word	0x40020058
 8008278:	40020070 	.word	0x40020070
 800827c:	40020088 	.word	0x40020088
 8008280:	400200a0 	.word	0x400200a0
 8008284:	400200b8 	.word	0x400200b8
 8008288:	40020410 	.word	0x40020410
 800828c:	40020428 	.word	0x40020428
 8008290:	40020440 	.word	0x40020440
 8008294:	40020458 	.word	0x40020458
 8008298:	40020470 	.word	0x40020470
 800829c:	40020488 	.word	0x40020488
 80082a0:	400204a0 	.word	0x400204a0
 80082a4:	400204b8 	.word	0x400204b8
 80082a8:	aaaaaaab 	.word	0xaaaaaaab
 80082ac:	08020364 	.word	0x08020364
 80082b0:	fffffc00 	.word	0xfffffc00

080082b4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d120      	bne.n	800830a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082cc:	2b03      	cmp	r3, #3
 80082ce:	d858      	bhi.n	8008382 <DMA_CheckFifoParam+0xce>
 80082d0:	a201      	add	r2, pc, #4	@ (adr r2, 80082d8 <DMA_CheckFifoParam+0x24>)
 80082d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d6:	bf00      	nop
 80082d8:	080082e9 	.word	0x080082e9
 80082dc:	080082fb 	.word	0x080082fb
 80082e0:	080082e9 	.word	0x080082e9
 80082e4:	08008383 	.word	0x08008383
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d048      	beq.n	8008386 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80082f8:	e045      	b.n	8008386 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008302:	d142      	bne.n	800838a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008308:	e03f      	b.n	800838a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008312:	d123      	bne.n	800835c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008318:	2b03      	cmp	r3, #3
 800831a:	d838      	bhi.n	800838e <DMA_CheckFifoParam+0xda>
 800831c:	a201      	add	r2, pc, #4	@ (adr r2, 8008324 <DMA_CheckFifoParam+0x70>)
 800831e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008322:	bf00      	nop
 8008324:	08008335 	.word	0x08008335
 8008328:	0800833b 	.word	0x0800833b
 800832c:	08008335 	.word	0x08008335
 8008330:	0800834d 	.word	0x0800834d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	73fb      	strb	r3, [r7, #15]
        break;
 8008338:	e030      	b.n	800839c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800833e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008342:	2b00      	cmp	r3, #0
 8008344:	d025      	beq.n	8008392 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800834a:	e022      	b.n	8008392 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008350:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008354:	d11f      	bne.n	8008396 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800835a:	e01c      	b.n	8008396 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008360:	2b02      	cmp	r3, #2
 8008362:	d902      	bls.n	800836a <DMA_CheckFifoParam+0xb6>
 8008364:	2b03      	cmp	r3, #3
 8008366:	d003      	beq.n	8008370 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008368:	e018      	b.n	800839c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	73fb      	strb	r3, [r7, #15]
        break;
 800836e:	e015      	b.n	800839c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008374:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00e      	beq.n	800839a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	73fb      	strb	r3, [r7, #15]
    break;
 8008380:	e00b      	b.n	800839a <DMA_CheckFifoParam+0xe6>
        break;
 8008382:	bf00      	nop
 8008384:	e00a      	b.n	800839c <DMA_CheckFifoParam+0xe8>
        break;
 8008386:	bf00      	nop
 8008388:	e008      	b.n	800839c <DMA_CheckFifoParam+0xe8>
        break;
 800838a:	bf00      	nop
 800838c:	e006      	b.n	800839c <DMA_CheckFifoParam+0xe8>
        break;
 800838e:	bf00      	nop
 8008390:	e004      	b.n	800839c <DMA_CheckFifoParam+0xe8>
        break;
 8008392:	bf00      	nop
 8008394:	e002      	b.n	800839c <DMA_CheckFifoParam+0xe8>
        break;
 8008396:	bf00      	nop
 8008398:	e000      	b.n	800839c <DMA_CheckFifoParam+0xe8>
    break;
 800839a:	bf00      	nop
    }
  }

  return status;
 800839c:	7bfb      	ldrb	r3, [r7, #15]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3714      	adds	r7, #20
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop

080083ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a38      	ldr	r2, [pc, #224]	@ (80084a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d022      	beq.n	800840a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a36      	ldr	r2, [pc, #216]	@ (80084a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d01d      	beq.n	800840a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a35      	ldr	r2, [pc, #212]	@ (80084a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d018      	beq.n	800840a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a33      	ldr	r2, [pc, #204]	@ (80084ac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d013      	beq.n	800840a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a32      	ldr	r2, [pc, #200]	@ (80084b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d00e      	beq.n	800840a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a30      	ldr	r2, [pc, #192]	@ (80084b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d009      	beq.n	800840a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a2f      	ldr	r2, [pc, #188]	@ (80084b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d004      	beq.n	800840a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a2d      	ldr	r2, [pc, #180]	@ (80084bc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d101      	bne.n	800840e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800840a:	2301      	movs	r3, #1
 800840c:	e000      	b.n	8008410 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800840e:	2300      	movs	r3, #0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d01a      	beq.n	800844a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	b2db      	uxtb	r3, r3
 800841a:	3b08      	subs	r3, #8
 800841c:	4a28      	ldr	r2, [pc, #160]	@ (80084c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800841e:	fba2 2303 	umull	r2, r3, r2, r3
 8008422:	091b      	lsrs	r3, r3, #4
 8008424:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	4b26      	ldr	r3, [pc, #152]	@ (80084c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800842a:	4413      	add	r3, r2
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	461a      	mov	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4a24      	ldr	r2, [pc, #144]	@ (80084c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008438:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f003 031f 	and.w	r3, r3, #31
 8008440:	2201      	movs	r2, #1
 8008442:	409a      	lsls	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008448:	e024      	b.n	8008494 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	b2db      	uxtb	r3, r3
 8008450:	3b10      	subs	r3, #16
 8008452:	4a1e      	ldr	r2, [pc, #120]	@ (80084cc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008454:	fba2 2303 	umull	r2, r3, r2, r3
 8008458:	091b      	lsrs	r3, r3, #4
 800845a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	4a1c      	ldr	r2, [pc, #112]	@ (80084d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d806      	bhi.n	8008472 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	4a1b      	ldr	r2, [pc, #108]	@ (80084d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d902      	bls.n	8008472 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	3308      	adds	r3, #8
 8008470:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	4b18      	ldr	r3, [pc, #96]	@ (80084d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008476:	4413      	add	r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	461a      	mov	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a16      	ldr	r2, [pc, #88]	@ (80084dc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008484:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f003 031f 	and.w	r3, r3, #31
 800848c:	2201      	movs	r2, #1
 800848e:	409a      	lsls	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008494:	bf00      	nop
 8008496:	3714      	adds	r7, #20
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr
 80084a0:	58025408 	.word	0x58025408
 80084a4:	5802541c 	.word	0x5802541c
 80084a8:	58025430 	.word	0x58025430
 80084ac:	58025444 	.word	0x58025444
 80084b0:	58025458 	.word	0x58025458
 80084b4:	5802546c 	.word	0x5802546c
 80084b8:	58025480 	.word	0x58025480
 80084bc:	58025494 	.word	0x58025494
 80084c0:	cccccccd 	.word	0xcccccccd
 80084c4:	16009600 	.word	0x16009600
 80084c8:	58025880 	.word	0x58025880
 80084cc:	aaaaaaab 	.word	0xaaaaaaab
 80084d0:	400204b8 	.word	0x400204b8
 80084d4:	4002040f 	.word	0x4002040f
 80084d8:	10008200 	.word	0x10008200
 80084dc:	40020880 	.word	0x40020880

080084e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d04a      	beq.n	800858c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2b08      	cmp	r3, #8
 80084fa:	d847      	bhi.n	800858c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a25      	ldr	r2, [pc, #148]	@ (8008598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d022      	beq.n	800854c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a24      	ldr	r2, [pc, #144]	@ (800859c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d01d      	beq.n	800854c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a22      	ldr	r2, [pc, #136]	@ (80085a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d018      	beq.n	800854c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a21      	ldr	r2, [pc, #132]	@ (80085a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d013      	beq.n	800854c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a1f      	ldr	r2, [pc, #124]	@ (80085a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d00e      	beq.n	800854c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a1e      	ldr	r2, [pc, #120]	@ (80085ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d009      	beq.n	800854c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a1c      	ldr	r2, [pc, #112]	@ (80085b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d004      	beq.n	800854c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a1b      	ldr	r2, [pc, #108]	@ (80085b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d101      	bne.n	8008550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800854c:	2301      	movs	r3, #1
 800854e:	e000      	b.n	8008552 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008550:	2300      	movs	r3, #0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00a      	beq.n	800856c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	4b17      	ldr	r3, [pc, #92]	@ (80085b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800855a:	4413      	add	r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	461a      	mov	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a15      	ldr	r2, [pc, #84]	@ (80085bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008568:	671a      	str	r2, [r3, #112]	@ 0x70
 800856a:	e009      	b.n	8008580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	4b14      	ldr	r3, [pc, #80]	@ (80085c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008570:	4413      	add	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	461a      	mov	r2, r3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a11      	ldr	r2, [pc, #68]	@ (80085c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800857e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	3b01      	subs	r3, #1
 8008584:	2201      	movs	r2, #1
 8008586:	409a      	lsls	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800858c:	bf00      	nop
 800858e:	3714      	adds	r7, #20
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr
 8008598:	58025408 	.word	0x58025408
 800859c:	5802541c 	.word	0x5802541c
 80085a0:	58025430 	.word	0x58025430
 80085a4:	58025444 	.word	0x58025444
 80085a8:	58025458 	.word	0x58025458
 80085ac:	5802546c 	.word	0x5802546c
 80085b0:	58025480 	.word	0x58025480
 80085b4:	58025494 	.word	0x58025494
 80085b8:	1600963f 	.word	0x1600963f
 80085bc:	58025940 	.word	0x58025940
 80085c0:	1000823f 	.word	0x1000823f
 80085c4:	40020940 	.word	0x40020940

080085c8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b098      	sub	sp, #96	@ 0x60
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80085d0:	4a84      	ldr	r2, [pc, #528]	@ (80087e4 <HAL_FDCAN_Init+0x21c>)
 80085d2:	f107 030c 	add.w	r3, r7, #12
 80085d6:	4611      	mov	r1, r2
 80085d8:	224c      	movs	r2, #76	@ 0x4c
 80085da:	4618      	mov	r0, r3
 80085dc:	f014 fcbf 	bl	801cf5e <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d101      	bne.n	80085ea <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	e1c6      	b.n	8008978 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a7e      	ldr	r2, [pc, #504]	@ (80087e8 <HAL_FDCAN_Init+0x220>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d106      	bne.n	8008602 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80085fc:	461a      	mov	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008608:	b2db      	uxtb	r3, r3
 800860a:	2b00      	cmp	r3, #0
 800860c:	d106      	bne.n	800861c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7fa fd70 	bl	80030fc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	699a      	ldr	r2, [r3, #24]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f022 0210 	bic.w	r2, r2, #16
 800862a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800862c:	f7fb fde6 	bl	80041fc <HAL_GetTick>
 8008630:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008632:	e014      	b.n	800865e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008634:	f7fb fde2 	bl	80041fc <HAL_GetTick>
 8008638:	4602      	mov	r2, r0
 800863a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	2b0a      	cmp	r3, #10
 8008640:	d90d      	bls.n	800865e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008648:	f043 0201 	orr.w	r2, r3, #1
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2203      	movs	r2, #3
 8008656:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e18c      	b.n	8008978 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	699b      	ldr	r3, [r3, #24]
 8008664:	f003 0308 	and.w	r3, r3, #8
 8008668:	2b08      	cmp	r3, #8
 800866a:	d0e3      	beq.n	8008634 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	699a      	ldr	r2, [r3, #24]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f042 0201 	orr.w	r2, r2, #1
 800867a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800867c:	f7fb fdbe 	bl	80041fc <HAL_GetTick>
 8008680:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008682:	e014      	b.n	80086ae <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008684:	f7fb fdba 	bl	80041fc <HAL_GetTick>
 8008688:	4602      	mov	r2, r0
 800868a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	2b0a      	cmp	r3, #10
 8008690:	d90d      	bls.n	80086ae <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008698:	f043 0201 	orr.w	r2, r3, #1
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2203      	movs	r2, #3
 80086a6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	e164      	b.n	8008978 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	699b      	ldr	r3, [r3, #24]
 80086b4:	f003 0301 	and.w	r3, r3, #1
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d0e3      	beq.n	8008684 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	699a      	ldr	r2, [r3, #24]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f042 0202 	orr.w	r2, r2, #2
 80086ca:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	7c1b      	ldrb	r3, [r3, #16]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d108      	bne.n	80086e6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	699a      	ldr	r2, [r3, #24]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80086e2:	619a      	str	r2, [r3, #24]
 80086e4:	e007      	b.n	80086f6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	699a      	ldr	r2, [r3, #24]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086f4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	7c5b      	ldrb	r3, [r3, #17]
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d108      	bne.n	8008710 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	699a      	ldr	r2, [r3, #24]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800870c:	619a      	str	r2, [r3, #24]
 800870e:	e007      	b.n	8008720 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	699a      	ldr	r2, [r3, #24]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800871e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	7c9b      	ldrb	r3, [r3, #18]
 8008724:	2b01      	cmp	r3, #1
 8008726:	d108      	bne.n	800873a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	699a      	ldr	r2, [r3, #24]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008736:	619a      	str	r2, [r3, #24]
 8008738:	e007      	b.n	800874a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	699a      	ldr	r2, [r3, #24]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008748:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	699b      	ldr	r3, [r3, #24]
 8008750:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	689a      	ldr	r2, [r3, #8]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	430a      	orrs	r2, r1
 800875e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	699a      	ldr	r2, [r3, #24]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800876e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	691a      	ldr	r2, [r3, #16]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f022 0210 	bic.w	r2, r2, #16
 800877e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d108      	bne.n	800879a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	699a      	ldr	r2, [r3, #24]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f042 0204 	orr.w	r2, r2, #4
 8008796:	619a      	str	r2, [r3, #24]
 8008798:	e030      	b.n	80087fc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d02c      	beq.n	80087fc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	2b02      	cmp	r3, #2
 80087a8:	d020      	beq.n	80087ec <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	699a      	ldr	r2, [r3, #24]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80087b8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	691a      	ldr	r2, [r3, #16]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f042 0210 	orr.w	r2, r2, #16
 80087c8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	2b03      	cmp	r3, #3
 80087d0:	d114      	bne.n	80087fc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	699a      	ldr	r2, [r3, #24]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f042 0220 	orr.w	r2, r2, #32
 80087e0:	619a      	str	r2, [r3, #24]
 80087e2:	e00b      	b.n	80087fc <HAL_FDCAN_Init+0x234>
 80087e4:	08020208 	.word	0x08020208
 80087e8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	699a      	ldr	r2, [r3, #24]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f042 0220 	orr.w	r2, r2, #32
 80087fa:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	3b01      	subs	r3, #1
 8008802:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	69db      	ldr	r3, [r3, #28]
 8008808:	3b01      	subs	r3, #1
 800880a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800880c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a1b      	ldr	r3, [r3, #32]
 8008812:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008814:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	695b      	ldr	r3, [r3, #20]
 800881c:	3b01      	subs	r3, #1
 800881e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008824:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008826:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008830:	d115      	bne.n	800885e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008836:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800883c:	3b01      	subs	r3, #1
 800883e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008840:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008846:	3b01      	subs	r3, #1
 8008848:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800884a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008852:	3b01      	subs	r3, #1
 8008854:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800885a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800885c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00a      	beq.n	800887c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	430a      	orrs	r2, r1
 8008878:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008884:	4413      	add	r3, r2
 8008886:	2b00      	cmp	r3, #0
 8008888:	d011      	beq.n	80088ae <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008892:	f023 0107 	bic.w	r1, r3, #7
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	3360      	adds	r3, #96	@ 0x60
 800889e:	443b      	add	r3, r7
 80088a0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	430a      	orrs	r2, r1
 80088aa:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d011      	beq.n	80088da <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80088be:	f023 0107 	bic.w	r1, r3, #7
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	3360      	adds	r3, #96	@ 0x60
 80088ca:	443b      	add	r3, r7
 80088cc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	430a      	orrs	r2, r1
 80088d6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d012      	beq.n	8008908 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80088ea:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	3360      	adds	r3, #96	@ 0x60
 80088f6:	443b      	add	r3, r7
 80088f8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80088fc:	011a      	lsls	r2, r3, #4
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	430a      	orrs	r2, r1
 8008904:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800890c:	2b00      	cmp	r3, #0
 800890e:	d012      	beq.n	8008936 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008918:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	3360      	adds	r3, #96	@ 0x60
 8008924:	443b      	add	r3, r7
 8008926:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800892a:	021a      	lsls	r2, r3, #8
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	430a      	orrs	r2, r1
 8008932:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a11      	ldr	r2, [pc, #68]	@ (8008980 <HAL_FDCAN_Init+0x3b8>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d107      	bne.n	8008950 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	689a      	ldr	r2, [r3, #8]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	f022 0203 	bic.w	r2, r2, #3
 800894e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 f80b 	bl	8008984 <FDCAN_CalcultateRamBlockAddresses>
 800896e:	4603      	mov	r3, r0
 8008970:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8008974:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8008978:	4618      	mov	r0, r3
 800897a:	3760      	adds	r7, #96	@ 0x60
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	4000a000 	.word	0x4000a000

08008984 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008990:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800899a:	4ba7      	ldr	r3, [pc, #668]	@ (8008c38 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800899c:	4013      	ands	r3, r2
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	0091      	lsls	r1, r2, #2
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	6812      	ldr	r2, [r2, #0]
 80089a6:	430b      	orrs	r3, r1
 80089a8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089b4:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089bc:	041a      	lsls	r2, r3, #16
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	430a      	orrs	r2, r1
 80089c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	4413      	add	r3, r2
 80089d0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80089da:	4b97      	ldr	r3, [pc, #604]	@ (8008c38 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80089dc:	4013      	ands	r3, r2
 80089de:	68ba      	ldr	r2, [r7, #8]
 80089e0:	0091      	lsls	r1, r2, #2
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	6812      	ldr	r2, [r2, #0]
 80089e6:	430b      	orrs	r3, r1
 80089e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089f4:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089fc:	041a      	lsls	r2, r3, #16
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	430a      	orrs	r2, r1
 8008a04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a0c:	005b      	lsls	r3, r3, #1
 8008a0e:	68ba      	ldr	r2, [r7, #8]
 8008a10:	4413      	add	r3, r2
 8008a12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008a1c:	4b86      	ldr	r3, [pc, #536]	@ (8008c38 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008a1e:	4013      	ands	r3, r2
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	0091      	lsls	r1, r2, #2
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	6812      	ldr	r2, [r2, #0]
 8008a28:	430b      	orrs	r3, r1
 8008a2a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008a36:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a3e:	041a      	lsls	r2, r3, #16
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	430a      	orrs	r2, r1
 8008a46:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008a52:	fb02 f303 	mul.w	r3, r2, r3
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	4413      	add	r3, r2
 8008a5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8008a64:	4b74      	ldr	r3, [pc, #464]	@ (8008c38 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008a66:	4013      	ands	r3, r2
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	0091      	lsls	r1, r2, #2
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	6812      	ldr	r2, [r2, #0]
 8008a70:	430b      	orrs	r3, r1
 8008a72:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008a7e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a86:	041a      	lsls	r2, r3, #16
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	430a      	orrs	r2, r1
 8008a8e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008a9a:	fb02 f303 	mul.w	r3, r2, r3
 8008a9e:	68ba      	ldr	r2, [r7, #8]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8008aac:	4b62      	ldr	r3, [pc, #392]	@ (8008c38 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008aae:	4013      	ands	r3, r2
 8008ab0:	68ba      	ldr	r2, [r7, #8]
 8008ab2:	0091      	lsls	r1, r2, #2
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	6812      	ldr	r2, [r2, #0]
 8008ab8:	430b      	orrs	r3, r1
 8008aba:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008ac6:	fb02 f303 	mul.w	r3, r2, r3
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	4413      	add	r3, r2
 8008ace:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8008ad8:	4b57      	ldr	r3, [pc, #348]	@ (8008c38 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008ada:	4013      	ands	r3, r2
 8008adc:	68ba      	ldr	r2, [r7, #8]
 8008ade:	0091      	lsls	r1, r2, #2
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	6812      	ldr	r2, [r2, #0]
 8008ae4:	430b      	orrs	r3, r1
 8008ae6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008af2:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008afa:	041a      	lsls	r2, r3, #16
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	430a      	orrs	r2, r1
 8008b02:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b0a:	005b      	lsls	r3, r3, #1
 8008b0c:	68ba      	ldr	r2, [r7, #8]
 8008b0e:	4413      	add	r3, r2
 8008b10:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8008b1a:	4b47      	ldr	r3, [pc, #284]	@ (8008c38 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	0091      	lsls	r1, r2, #2
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	6812      	ldr	r2, [r2, #0]
 8008b26:	430b      	orrs	r3, r1
 8008b28:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008b34:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b3c:	041a      	lsls	r2, r3, #16
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	430a      	orrs	r2, r1
 8008b44:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008b50:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b58:	061a      	lsls	r2, r3, #24
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b68:	4b34      	ldr	r3, [pc, #208]	@ (8008c3c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8008b6a:	4413      	add	r3, r2
 8008b6c:	009a      	lsls	r2, r3, #2
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	441a      	add	r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b8a:	00db      	lsls	r3, r3, #3
 8008b8c:	441a      	add	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b9a:	6879      	ldr	r1, [r7, #4]
 8008b9c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8008b9e:	fb01 f303 	mul.w	r3, r1, r3
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	441a      	add	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bb2:	6879      	ldr	r1, [r7, #4]
 8008bb4:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8008bb6:	fb01 f303 	mul.w	r3, r1, r3
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	441a      	add	r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bca:	6879      	ldr	r1, [r7, #4]
 8008bcc:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8008bce:	fb01 f303 	mul.w	r3, r1, r3
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	441a      	add	r2, r3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008be6:	00db      	lsls	r3, r3, #3
 8008be8:	441a      	add	r2, r3
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bfa:	6879      	ldr	r1, [r7, #4]
 8008bfc:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008bfe:	fb01 f303 	mul.w	r3, r1, r3
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	441a      	add	r2, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c16:	6879      	ldr	r1, [r7, #4]
 8008c18:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008c1a:	fb01 f303 	mul.w	r3, r1, r3
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	441a      	add	r2, r3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c2e:	4a04      	ldr	r2, [pc, #16]	@ (8008c40 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d915      	bls.n	8008c60 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008c34:	e006      	b.n	8008c44 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8008c36:	bf00      	nop
 8008c38:	ffff0003 	.word	0xffff0003
 8008c3c:	10002b00 	.word	0x10002b00
 8008c40:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c4a:	f043 0220 	orr.w	r2, r3, #32
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2203      	movs	r2, #3
 8008c58:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e010      	b.n	8008c82 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c64:	60fb      	str	r3, [r7, #12]
 8008c66:	e005      	b.n	8008c74 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	3304      	adds	r3, #4
 8008c72:	60fb      	str	r3, [r7, #12]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d3f3      	bcc.n	8008c68 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3714      	adds	r7, #20
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop

08008c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b089      	sub	sp, #36	@ 0x24
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008c9e:	4b86      	ldr	r3, [pc, #536]	@ (8008eb8 <HAL_GPIO_Init+0x228>)
 8008ca0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008ca2:	e18c      	b.n	8008fbe <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	2101      	movs	r1, #1
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	fa01 f303 	lsl.w	r3, r1, r3
 8008cb0:	4013      	ands	r3, r2
 8008cb2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	f000 817e 	beq.w	8008fb8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	f003 0303 	and.w	r3, r3, #3
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d005      	beq.n	8008cd4 <HAL_GPIO_Init+0x44>
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	f003 0303 	and.w	r3, r3, #3
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d130      	bne.n	8008d36 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	005b      	lsls	r3, r3, #1
 8008cde:	2203      	movs	r2, #3
 8008ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce4:	43db      	mvns	r3, r3
 8008ce6:	69ba      	ldr	r2, [r7, #24]
 8008ce8:	4013      	ands	r3, r2
 8008cea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	68da      	ldr	r2, [r3, #12]
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	005b      	lsls	r3, r3, #1
 8008cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf8:	69ba      	ldr	r2, [r7, #24]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	69ba      	ldr	r2, [r7, #24]
 8008d02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d12:	43db      	mvns	r3, r3
 8008d14:	69ba      	ldr	r2, [r7, #24]
 8008d16:	4013      	ands	r3, r2
 8008d18:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	091b      	lsrs	r3, r3, #4
 8008d20:	f003 0201 	and.w	r2, r3, #1
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	fa02 f303 	lsl.w	r3, r2, r3
 8008d2a:	69ba      	ldr	r2, [r7, #24]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	69ba      	ldr	r2, [r7, #24]
 8008d34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	f003 0303 	and.w	r3, r3, #3
 8008d3e:	2b03      	cmp	r3, #3
 8008d40:	d017      	beq.n	8008d72 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	005b      	lsls	r3, r3, #1
 8008d4c:	2203      	movs	r2, #3
 8008d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d52:	43db      	mvns	r3, r3
 8008d54:	69ba      	ldr	r2, [r7, #24]
 8008d56:	4013      	ands	r3, r2
 8008d58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	689a      	ldr	r2, [r3, #8]
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	005b      	lsls	r3, r3, #1
 8008d62:	fa02 f303 	lsl.w	r3, r2, r3
 8008d66:	69ba      	ldr	r2, [r7, #24]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	69ba      	ldr	r2, [r7, #24]
 8008d70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	f003 0303 	and.w	r3, r3, #3
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d123      	bne.n	8008dc6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	08da      	lsrs	r2, r3, #3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	3208      	adds	r2, #8
 8008d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	f003 0307 	and.w	r3, r3, #7
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	220f      	movs	r2, #15
 8008d96:	fa02 f303 	lsl.w	r3, r2, r3
 8008d9a:	43db      	mvns	r3, r3
 8008d9c:	69ba      	ldr	r2, [r7, #24]
 8008d9e:	4013      	ands	r3, r2
 8008da0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	691a      	ldr	r2, [r3, #16]
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	f003 0307 	and.w	r3, r3, #7
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	fa02 f303 	lsl.w	r3, r2, r3
 8008db2:	69ba      	ldr	r2, [r7, #24]
 8008db4:	4313      	orrs	r3, r2
 8008db6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	08da      	lsrs	r2, r3, #3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	3208      	adds	r2, #8
 8008dc0:	69b9      	ldr	r1, [r7, #24]
 8008dc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	005b      	lsls	r3, r3, #1
 8008dd0:	2203      	movs	r2, #3
 8008dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008dd6:	43db      	mvns	r3, r3
 8008dd8:	69ba      	ldr	r2, [r7, #24]
 8008dda:	4013      	ands	r3, r2
 8008ddc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	f003 0203 	and.w	r2, r3, #3
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	005b      	lsls	r3, r3, #1
 8008dea:	fa02 f303 	lsl.w	r3, r2, r3
 8008dee:	69ba      	ldr	r2, [r7, #24]
 8008df0:	4313      	orrs	r3, r2
 8008df2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	69ba      	ldr	r2, [r7, #24]
 8008df8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	f000 80d8 	beq.w	8008fb8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e08:	4b2c      	ldr	r3, [pc, #176]	@ (8008ebc <HAL_GPIO_Init+0x22c>)
 8008e0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008e0e:	4a2b      	ldr	r2, [pc, #172]	@ (8008ebc <HAL_GPIO_Init+0x22c>)
 8008e10:	f043 0302 	orr.w	r3, r3, #2
 8008e14:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008e18:	4b28      	ldr	r3, [pc, #160]	@ (8008ebc <HAL_GPIO_Init+0x22c>)
 8008e1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008e1e:	f003 0302 	and.w	r3, r3, #2
 8008e22:	60fb      	str	r3, [r7, #12]
 8008e24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008e26:	4a26      	ldr	r2, [pc, #152]	@ (8008ec0 <HAL_GPIO_Init+0x230>)
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	089b      	lsrs	r3, r3, #2
 8008e2c:	3302      	adds	r3, #2
 8008e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	f003 0303 	and.w	r3, r3, #3
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	220f      	movs	r2, #15
 8008e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e42:	43db      	mvns	r3, r3
 8008e44:	69ba      	ldr	r2, [r7, #24]
 8008e46:	4013      	ands	r3, r2
 8008e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a1d      	ldr	r2, [pc, #116]	@ (8008ec4 <HAL_GPIO_Init+0x234>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d04a      	beq.n	8008ee8 <HAL_GPIO_Init+0x258>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a1c      	ldr	r2, [pc, #112]	@ (8008ec8 <HAL_GPIO_Init+0x238>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d02b      	beq.n	8008eb2 <HAL_GPIO_Init+0x222>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a1b      	ldr	r2, [pc, #108]	@ (8008ecc <HAL_GPIO_Init+0x23c>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d025      	beq.n	8008eae <HAL_GPIO_Init+0x21e>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a1a      	ldr	r2, [pc, #104]	@ (8008ed0 <HAL_GPIO_Init+0x240>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d01f      	beq.n	8008eaa <HAL_GPIO_Init+0x21a>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a19      	ldr	r2, [pc, #100]	@ (8008ed4 <HAL_GPIO_Init+0x244>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d019      	beq.n	8008ea6 <HAL_GPIO_Init+0x216>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a18      	ldr	r2, [pc, #96]	@ (8008ed8 <HAL_GPIO_Init+0x248>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d013      	beq.n	8008ea2 <HAL_GPIO_Init+0x212>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a17      	ldr	r2, [pc, #92]	@ (8008edc <HAL_GPIO_Init+0x24c>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d00d      	beq.n	8008e9e <HAL_GPIO_Init+0x20e>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a16      	ldr	r2, [pc, #88]	@ (8008ee0 <HAL_GPIO_Init+0x250>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d007      	beq.n	8008e9a <HAL_GPIO_Init+0x20a>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a15      	ldr	r2, [pc, #84]	@ (8008ee4 <HAL_GPIO_Init+0x254>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d101      	bne.n	8008e96 <HAL_GPIO_Init+0x206>
 8008e92:	2309      	movs	r3, #9
 8008e94:	e029      	b.n	8008eea <HAL_GPIO_Init+0x25a>
 8008e96:	230a      	movs	r3, #10
 8008e98:	e027      	b.n	8008eea <HAL_GPIO_Init+0x25a>
 8008e9a:	2307      	movs	r3, #7
 8008e9c:	e025      	b.n	8008eea <HAL_GPIO_Init+0x25a>
 8008e9e:	2306      	movs	r3, #6
 8008ea0:	e023      	b.n	8008eea <HAL_GPIO_Init+0x25a>
 8008ea2:	2305      	movs	r3, #5
 8008ea4:	e021      	b.n	8008eea <HAL_GPIO_Init+0x25a>
 8008ea6:	2304      	movs	r3, #4
 8008ea8:	e01f      	b.n	8008eea <HAL_GPIO_Init+0x25a>
 8008eaa:	2303      	movs	r3, #3
 8008eac:	e01d      	b.n	8008eea <HAL_GPIO_Init+0x25a>
 8008eae:	2302      	movs	r3, #2
 8008eb0:	e01b      	b.n	8008eea <HAL_GPIO_Init+0x25a>
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e019      	b.n	8008eea <HAL_GPIO_Init+0x25a>
 8008eb6:	bf00      	nop
 8008eb8:	58000080 	.word	0x58000080
 8008ebc:	58024400 	.word	0x58024400
 8008ec0:	58000400 	.word	0x58000400
 8008ec4:	58020000 	.word	0x58020000
 8008ec8:	58020400 	.word	0x58020400
 8008ecc:	58020800 	.word	0x58020800
 8008ed0:	58020c00 	.word	0x58020c00
 8008ed4:	58021000 	.word	0x58021000
 8008ed8:	58021400 	.word	0x58021400
 8008edc:	58021800 	.word	0x58021800
 8008ee0:	58021c00 	.word	0x58021c00
 8008ee4:	58022400 	.word	0x58022400
 8008ee8:	2300      	movs	r3, #0
 8008eea:	69fa      	ldr	r2, [r7, #28]
 8008eec:	f002 0203 	and.w	r2, r2, #3
 8008ef0:	0092      	lsls	r2, r2, #2
 8008ef2:	4093      	lsls	r3, r2
 8008ef4:	69ba      	ldr	r2, [r7, #24]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008efa:	4938      	ldr	r1, [pc, #224]	@ (8008fdc <HAL_GPIO_Init+0x34c>)
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	089b      	lsrs	r3, r3, #2
 8008f00:	3302      	adds	r3, #2
 8008f02:	69ba      	ldr	r2, [r7, #24]
 8008f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008f08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	43db      	mvns	r3, r3
 8008f14:	69ba      	ldr	r2, [r7, #24]
 8008f16:	4013      	ands	r3, r2
 8008f18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d003      	beq.n	8008f2e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008f26:	69ba      	ldr	r2, [r7, #24]
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008f2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008f36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	43db      	mvns	r3, r3
 8008f42:	69ba      	ldr	r2, [r7, #24]
 8008f44:	4013      	ands	r3, r2
 8008f46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d003      	beq.n	8008f5c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008f54:	69ba      	ldr	r2, [r7, #24]
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008f5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	43db      	mvns	r3, r3
 8008f6e:	69ba      	ldr	r2, [r7, #24]
 8008f70:	4013      	ands	r3, r2
 8008f72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d003      	beq.n	8008f88 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008f80:	69ba      	ldr	r2, [r7, #24]
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	69ba      	ldr	r2, [r7, #24]
 8008f8c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	43db      	mvns	r3, r3
 8008f98:	69ba      	ldr	r2, [r7, #24]
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d003      	beq.n	8008fb2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008faa:	69ba      	ldr	r2, [r7, #24]
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	69ba      	ldr	r2, [r7, #24]
 8008fb6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f47f ae6b 	bne.w	8008ca4 <HAL_GPIO_Init+0x14>
  }
}
 8008fce:	bf00      	nop
 8008fd0:	bf00      	nop
 8008fd2:	3724      	adds	r7, #36	@ 0x24
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr
 8008fdc:	58000400 	.word	0x58000400

08008fe0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	460b      	mov	r3, r1
 8008fea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	691a      	ldr	r2, [r3, #16]
 8008ff0:	887b      	ldrh	r3, [r7, #2]
 8008ff2:	4013      	ands	r3, r2
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d002      	beq.n	8008ffe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	73fb      	strb	r3, [r7, #15]
 8008ffc:	e001      	b.n	8009002 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008ffe:	2300      	movs	r3, #0
 8009000:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009002:	7bfb      	ldrb	r3, [r7, #15]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3714      	adds	r7, #20
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	460b      	mov	r3, r1
 800901a:	807b      	strh	r3, [r7, #2]
 800901c:	4613      	mov	r3, r2
 800901e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009020:	787b      	ldrb	r3, [r7, #1]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d003      	beq.n	800902e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009026:	887a      	ldrh	r2, [r7, #2]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800902c:	e003      	b.n	8009036 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800902e:	887b      	ldrh	r3, [r7, #2]
 8009030:	041a      	lsls	r2, r3, #16
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	619a      	str	r2, [r3, #24]
}
 8009036:	bf00      	nop
 8009038:	370c      	adds	r7, #12
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr
	...

08009044 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d101      	bne.n	8009056 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	e07f      	b.n	8009156 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800905c:	b2db      	uxtb	r3, r3
 800905e:	2b00      	cmp	r3, #0
 8009060:	d106      	bne.n	8009070 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f7fa f8ae 	bl	80031cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2224      	movs	r2, #36	@ 0x24
 8009074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f022 0201 	bic.w	r2, r2, #1
 8009086:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	685a      	ldr	r2, [r3, #4]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009094:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	689a      	ldr	r2, [r3, #8]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80090a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d107      	bne.n	80090be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	689a      	ldr	r2, [r3, #8]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80090ba:	609a      	str	r2, [r3, #8]
 80090bc:	e006      	b.n	80090cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	689a      	ldr	r2, [r3, #8]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80090ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	2b02      	cmp	r3, #2
 80090d2:	d104      	bne.n	80090de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80090dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	6859      	ldr	r1, [r3, #4]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	4b1d      	ldr	r3, [pc, #116]	@ (8009160 <HAL_I2C_Init+0x11c>)
 80090ea:	430b      	orrs	r3, r1
 80090ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	68da      	ldr	r2, [r3, #12]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80090fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	691a      	ldr	r2, [r3, #16]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	695b      	ldr	r3, [r3, #20]
 8009106:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	699b      	ldr	r3, [r3, #24]
 800910e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	430a      	orrs	r2, r1
 8009116:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	69d9      	ldr	r1, [r3, #28]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6a1a      	ldr	r2, [r3, #32]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	430a      	orrs	r2, r1
 8009126:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f042 0201 	orr.w	r2, r2, #1
 8009136:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2220      	movs	r2, #32
 8009142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009154:	2300      	movs	r3, #0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3708      	adds	r7, #8
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	02008000 	.word	0x02008000

08009164 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	699b      	ldr	r3, [r3, #24]
 8009172:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009180:	2b00      	cmp	r3, #0
 8009182:	d005      	beq.n	8009190 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009188:	68ba      	ldr	r2, [r7, #8]
 800918a:	68f9      	ldr	r1, [r7, #12]
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	4798      	blx	r3
  }
}
 8009190:	bf00      	nop
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	2b20      	cmp	r3, #32
 80091ac:	d138      	bne.n	8009220 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d101      	bne.n	80091bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80091b8:	2302      	movs	r3, #2
 80091ba:	e032      	b.n	8009222 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2224      	movs	r2, #36	@ 0x24
 80091c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f022 0201 	bic.w	r2, r2, #1
 80091da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80091ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	6819      	ldr	r1, [r3, #0]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	683a      	ldr	r2, [r7, #0]
 80091f8:	430a      	orrs	r2, r1
 80091fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f042 0201 	orr.w	r2, r2, #1
 800920a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2220      	movs	r2, #32
 8009210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800921c:	2300      	movs	r3, #0
 800921e:	e000      	b.n	8009222 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009220:	2302      	movs	r3, #2
  }
}
 8009222:	4618      	mov	r0, r3
 8009224:	370c      	adds	r7, #12
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr

0800922e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800922e:	b480      	push	{r7}
 8009230:	b085      	sub	sp, #20
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
 8009236:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800923e:	b2db      	uxtb	r3, r3
 8009240:	2b20      	cmp	r3, #32
 8009242:	d139      	bne.n	80092b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800924a:	2b01      	cmp	r3, #1
 800924c:	d101      	bne.n	8009252 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800924e:	2302      	movs	r3, #2
 8009250:	e033      	b.n	80092ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2201      	movs	r2, #1
 8009256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2224      	movs	r2, #36	@ 0x24
 800925e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f022 0201 	bic.w	r2, r2, #1
 8009270:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009280:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	021b      	lsls	r3, r3, #8
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	4313      	orrs	r3, r2
 800928a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f042 0201 	orr.w	r2, r2, #1
 80092a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2220      	movs	r2, #32
 80092a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80092b4:	2300      	movs	r3, #0
 80092b6:	e000      	b.n	80092ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80092b8:	2302      	movs	r3, #2
  }
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3714      	adds	r7, #20
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr

080092c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80092c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092c8:	b08f      	sub	sp, #60	@ 0x3c
 80092ca:	af0a      	add	r7, sp, #40	@ 0x28
 80092cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d101      	bne.n	80092d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
 80092d6:	e116      	b.n	8009506 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d106      	bne.n	80092f8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f011 fccc 	bl	801ac90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2203      	movs	r2, #3
 80092fc:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009308:	2b00      	cmp	r3, #0
 800930a:	d102      	bne.n	8009312 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4618      	mov	r0, r3
 8009318:	f00a fea5 	bl	8014066 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	603b      	str	r3, [r7, #0]
 8009322:	687e      	ldr	r6, [r7, #4]
 8009324:	466d      	mov	r5, sp
 8009326:	f106 0410 	add.w	r4, r6, #16
 800932a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800932c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800932e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009330:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009332:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009336:	e885 0003 	stmia.w	r5, {r0, r1}
 800933a:	1d33      	adds	r3, r6, #4
 800933c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800933e:	6838      	ldr	r0, [r7, #0]
 8009340:	f00a fd70 	bl	8013e24 <USB_CoreInit>
 8009344:	4603      	mov	r3, r0
 8009346:	2b00      	cmp	r3, #0
 8009348:	d005      	beq.n	8009356 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2202      	movs	r2, #2
 800934e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e0d7      	b.n	8009506 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2100      	movs	r1, #0
 800935c:	4618      	mov	r0, r3
 800935e:	f00a fe93 	bl	8014088 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009362:	2300      	movs	r3, #0
 8009364:	73fb      	strb	r3, [r7, #15]
 8009366:	e04a      	b.n	80093fe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009368:	7bfa      	ldrb	r2, [r7, #15]
 800936a:	6879      	ldr	r1, [r7, #4]
 800936c:	4613      	mov	r3, r2
 800936e:	00db      	lsls	r3, r3, #3
 8009370:	4413      	add	r3, r2
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	440b      	add	r3, r1
 8009376:	333d      	adds	r3, #61	@ 0x3d
 8009378:	2201      	movs	r2, #1
 800937a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800937c:	7bfa      	ldrb	r2, [r7, #15]
 800937e:	6879      	ldr	r1, [r7, #4]
 8009380:	4613      	mov	r3, r2
 8009382:	00db      	lsls	r3, r3, #3
 8009384:	4413      	add	r3, r2
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	440b      	add	r3, r1
 800938a:	333c      	adds	r3, #60	@ 0x3c
 800938c:	7bfa      	ldrb	r2, [r7, #15]
 800938e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009390:	7bfa      	ldrb	r2, [r7, #15]
 8009392:	7bfb      	ldrb	r3, [r7, #15]
 8009394:	b298      	uxth	r0, r3
 8009396:	6879      	ldr	r1, [r7, #4]
 8009398:	4613      	mov	r3, r2
 800939a:	00db      	lsls	r3, r3, #3
 800939c:	4413      	add	r3, r2
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	440b      	add	r3, r1
 80093a2:	3356      	adds	r3, #86	@ 0x56
 80093a4:	4602      	mov	r2, r0
 80093a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80093a8:	7bfa      	ldrb	r2, [r7, #15]
 80093aa:	6879      	ldr	r1, [r7, #4]
 80093ac:	4613      	mov	r3, r2
 80093ae:	00db      	lsls	r3, r3, #3
 80093b0:	4413      	add	r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	440b      	add	r3, r1
 80093b6:	3340      	adds	r3, #64	@ 0x40
 80093b8:	2200      	movs	r2, #0
 80093ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80093bc:	7bfa      	ldrb	r2, [r7, #15]
 80093be:	6879      	ldr	r1, [r7, #4]
 80093c0:	4613      	mov	r3, r2
 80093c2:	00db      	lsls	r3, r3, #3
 80093c4:	4413      	add	r3, r2
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	440b      	add	r3, r1
 80093ca:	3344      	adds	r3, #68	@ 0x44
 80093cc:	2200      	movs	r2, #0
 80093ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80093d0:	7bfa      	ldrb	r2, [r7, #15]
 80093d2:	6879      	ldr	r1, [r7, #4]
 80093d4:	4613      	mov	r3, r2
 80093d6:	00db      	lsls	r3, r3, #3
 80093d8:	4413      	add	r3, r2
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	440b      	add	r3, r1
 80093de:	3348      	adds	r3, #72	@ 0x48
 80093e0:	2200      	movs	r2, #0
 80093e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80093e4:	7bfa      	ldrb	r2, [r7, #15]
 80093e6:	6879      	ldr	r1, [r7, #4]
 80093e8:	4613      	mov	r3, r2
 80093ea:	00db      	lsls	r3, r3, #3
 80093ec:	4413      	add	r3, r2
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	440b      	add	r3, r1
 80093f2:	334c      	adds	r3, #76	@ 0x4c
 80093f4:	2200      	movs	r2, #0
 80093f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093f8:	7bfb      	ldrb	r3, [r7, #15]
 80093fa:	3301      	adds	r3, #1
 80093fc:	73fb      	strb	r3, [r7, #15]
 80093fe:	7bfa      	ldrb	r2, [r7, #15]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	429a      	cmp	r2, r3
 8009406:	d3af      	bcc.n	8009368 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009408:	2300      	movs	r3, #0
 800940a:	73fb      	strb	r3, [r7, #15]
 800940c:	e044      	b.n	8009498 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800940e:	7bfa      	ldrb	r2, [r7, #15]
 8009410:	6879      	ldr	r1, [r7, #4]
 8009412:	4613      	mov	r3, r2
 8009414:	00db      	lsls	r3, r3, #3
 8009416:	4413      	add	r3, r2
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	440b      	add	r3, r1
 800941c:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8009420:	2200      	movs	r2, #0
 8009422:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009424:	7bfa      	ldrb	r2, [r7, #15]
 8009426:	6879      	ldr	r1, [r7, #4]
 8009428:	4613      	mov	r3, r2
 800942a:	00db      	lsls	r3, r3, #3
 800942c:	4413      	add	r3, r2
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	440b      	add	r3, r1
 8009432:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8009436:	7bfa      	ldrb	r2, [r7, #15]
 8009438:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800943a:	7bfa      	ldrb	r2, [r7, #15]
 800943c:	6879      	ldr	r1, [r7, #4]
 800943e:	4613      	mov	r3, r2
 8009440:	00db      	lsls	r3, r3, #3
 8009442:	4413      	add	r3, r2
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	440b      	add	r3, r1
 8009448:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800944c:	2200      	movs	r2, #0
 800944e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009450:	7bfa      	ldrb	r2, [r7, #15]
 8009452:	6879      	ldr	r1, [r7, #4]
 8009454:	4613      	mov	r3, r2
 8009456:	00db      	lsls	r3, r3, #3
 8009458:	4413      	add	r3, r2
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	440b      	add	r3, r1
 800945e:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8009462:	2200      	movs	r2, #0
 8009464:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009466:	7bfa      	ldrb	r2, [r7, #15]
 8009468:	6879      	ldr	r1, [r7, #4]
 800946a:	4613      	mov	r3, r2
 800946c:	00db      	lsls	r3, r3, #3
 800946e:	4413      	add	r3, r2
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	440b      	add	r3, r1
 8009474:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8009478:	2200      	movs	r2, #0
 800947a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800947c:	7bfa      	ldrb	r2, [r7, #15]
 800947e:	6879      	ldr	r1, [r7, #4]
 8009480:	4613      	mov	r3, r2
 8009482:	00db      	lsls	r3, r3, #3
 8009484:	4413      	add	r3, r2
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	440b      	add	r3, r1
 800948a:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800948e:	2200      	movs	r2, #0
 8009490:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009492:	7bfb      	ldrb	r3, [r7, #15]
 8009494:	3301      	adds	r3, #1
 8009496:	73fb      	strb	r3, [r7, #15]
 8009498:	7bfa      	ldrb	r2, [r7, #15]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d3b5      	bcc.n	800940e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	603b      	str	r3, [r7, #0]
 80094a8:	687e      	ldr	r6, [r7, #4]
 80094aa:	466d      	mov	r5, sp
 80094ac:	f106 0410 	add.w	r4, r6, #16
 80094b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80094b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80094b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80094b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80094b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80094bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80094c0:	1d33      	adds	r3, r6, #4
 80094c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80094c4:	6838      	ldr	r0, [r7, #0]
 80094c6:	f00a fe2b 	bl	8014120 <USB_DevInit>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d005      	beq.n	80094dc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2202      	movs	r2, #2
 80094d4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80094d8:	2301      	movs	r3, #1
 80094da:	e014      	b.n	8009506 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2201      	movs	r2, #1
 80094e8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d102      	bne.n	80094fa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f001 f96f 	bl	800a7d8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4618      	mov	r0, r3
 8009500:	f00b fe6d 	bl	80151de <USB_DevDisconnect>

  return HAL_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3714      	adds	r7, #20
 800950a:	46bd      	mov	sp, r7
 800950c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800950e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b084      	sub	sp, #16
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8009522:	2b01      	cmp	r3, #1
 8009524:	d101      	bne.n	800952a <HAL_PCD_Start+0x1c>
 8009526:	2302      	movs	r3, #2
 8009528:	e022      	b.n	8009570 <HAL_PCD_Start+0x62>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2201      	movs	r2, #1
 800952e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800953a:	2b00      	cmp	r3, #0
 800953c:	d109      	bne.n	8009552 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8009542:	2b01      	cmp	r3, #1
 8009544:	d105      	bne.n	8009552 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800954a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4618      	mov	r0, r3
 8009558:	f00a fd74 	bl	8014044 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4618      	mov	r0, r3
 8009562:	f00b fe1b 	bl	801519c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800956e:	2300      	movs	r3, #0
}
 8009570:	4618      	mov	r0, r3
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009578:	b590      	push	{r4, r7, lr}
 800957a:	b08d      	sub	sp, #52	@ 0x34
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009586:	6a3b      	ldr	r3, [r7, #32]
 8009588:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4618      	mov	r0, r3
 8009590:	f00b fed9 	bl	8015346 <USB_GetMode>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	f040 84b7 	bne.w	8009f0a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4618      	mov	r0, r3
 80095a2:	f00b fe3d 	bl	8015220 <USB_ReadInterrupts>
 80095a6:	4603      	mov	r3, r0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f000 84ad 	beq.w	8009f08 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	0a1b      	lsrs	r3, r3, #8
 80095b8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4618      	mov	r0, r3
 80095c8:	f00b fe2a 	bl	8015220 <USB_ReadInterrupts>
 80095cc:	4603      	mov	r3, r0
 80095ce:	f003 0302 	and.w	r3, r3, #2
 80095d2:	2b02      	cmp	r3, #2
 80095d4:	d107      	bne.n	80095e6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	695a      	ldr	r2, [r3, #20]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f002 0202 	and.w	r2, r2, #2
 80095e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4618      	mov	r0, r3
 80095ec:	f00b fe18 	bl	8015220 <USB_ReadInterrupts>
 80095f0:	4603      	mov	r3, r0
 80095f2:	f003 0310 	and.w	r3, r3, #16
 80095f6:	2b10      	cmp	r3, #16
 80095f8:	d161      	bne.n	80096be <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	699a      	ldr	r2, [r3, #24]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f022 0210 	bic.w	r2, r2, #16
 8009608:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800960a:	6a3b      	ldr	r3, [r7, #32]
 800960c:	6a1b      	ldr	r3, [r3, #32]
 800960e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	f003 020f 	and.w	r2, r3, #15
 8009616:	4613      	mov	r3, r2
 8009618:	00db      	lsls	r3, r3, #3
 800961a:	4413      	add	r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	4413      	add	r3, r2
 8009626:	3304      	adds	r3, #4
 8009628:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	0c5b      	lsrs	r3, r3, #17
 800962e:	f003 030f 	and.w	r3, r3, #15
 8009632:	2b02      	cmp	r3, #2
 8009634:	d124      	bne.n	8009680 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009636:	69ba      	ldr	r2, [r7, #24]
 8009638:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800963c:	4013      	ands	r3, r2
 800963e:	2b00      	cmp	r3, #0
 8009640:	d035      	beq.n	80096ae <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	091b      	lsrs	r3, r3, #4
 800964a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800964c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009650:	b29b      	uxth	r3, r3
 8009652:	461a      	mov	r2, r3
 8009654:	6a38      	ldr	r0, [r7, #32]
 8009656:	f00b fc4f 	bl	8014ef8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	68da      	ldr	r2, [r3, #12]
 800965e:	69bb      	ldr	r3, [r7, #24]
 8009660:	091b      	lsrs	r3, r3, #4
 8009662:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009666:	441a      	add	r2, r3
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	695a      	ldr	r2, [r3, #20]
 8009670:	69bb      	ldr	r3, [r7, #24]
 8009672:	091b      	lsrs	r3, r3, #4
 8009674:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009678:	441a      	add	r2, r3
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	615a      	str	r2, [r3, #20]
 800967e:	e016      	b.n	80096ae <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	0c5b      	lsrs	r3, r3, #17
 8009684:	f003 030f 	and.w	r3, r3, #15
 8009688:	2b06      	cmp	r3, #6
 800968a:	d110      	bne.n	80096ae <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8009692:	2208      	movs	r2, #8
 8009694:	4619      	mov	r1, r3
 8009696:	6a38      	ldr	r0, [r7, #32]
 8009698:	f00b fc2e 	bl	8014ef8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	695a      	ldr	r2, [r3, #20]
 80096a0:	69bb      	ldr	r3, [r7, #24]
 80096a2:	091b      	lsrs	r3, r3, #4
 80096a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80096a8:	441a      	add	r2, r3
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	699a      	ldr	r2, [r3, #24]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f042 0210 	orr.w	r2, r2, #16
 80096bc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4618      	mov	r0, r3
 80096c4:	f00b fdac 	bl	8015220 <USB_ReadInterrupts>
 80096c8:	4603      	mov	r3, r0
 80096ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80096ce:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80096d2:	f040 80a7 	bne.w	8009824 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80096d6:	2300      	movs	r3, #0
 80096d8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4618      	mov	r0, r3
 80096e0:	f00b fdb1 	bl	8015246 <USB_ReadDevAllOutEpInterrupt>
 80096e4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80096e6:	e099      	b.n	800981c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80096e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ea:	f003 0301 	and.w	r3, r3, #1
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	f000 808e 	beq.w	8009810 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096fa:	b2d2      	uxtb	r2, r2
 80096fc:	4611      	mov	r1, r2
 80096fe:	4618      	mov	r0, r3
 8009700:	f00b fdd5 	bl	80152ae <USB_ReadDevOutEPInterrupt>
 8009704:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	f003 0301 	and.w	r3, r3, #1
 800970c:	2b00      	cmp	r3, #0
 800970e:	d00c      	beq.n	800972a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009712:	015a      	lsls	r2, r3, #5
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	4413      	add	r3, r2
 8009718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800971c:	461a      	mov	r2, r3
 800971e:	2301      	movs	r3, #1
 8009720:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009722:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 fed1 	bl	800a4cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	f003 0308 	and.w	r3, r3, #8
 8009730:	2b00      	cmp	r3, #0
 8009732:	d00c      	beq.n	800974e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009736:	015a      	lsls	r2, r3, #5
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	4413      	add	r3, r2
 800973c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009740:	461a      	mov	r2, r3
 8009742:	2308      	movs	r3, #8
 8009744:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009746:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 ffa7 	bl	800a69c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	f003 0310 	and.w	r3, r3, #16
 8009754:	2b00      	cmp	r3, #0
 8009756:	d008      	beq.n	800976a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975a:	015a      	lsls	r2, r3, #5
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	4413      	add	r3, r2
 8009760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009764:	461a      	mov	r2, r3
 8009766:	2310      	movs	r3, #16
 8009768:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	f003 0302 	and.w	r3, r3, #2
 8009770:	2b00      	cmp	r3, #0
 8009772:	d030      	beq.n	80097d6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009774:	6a3b      	ldr	r3, [r7, #32]
 8009776:	695b      	ldr	r3, [r3, #20]
 8009778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800977c:	2b80      	cmp	r3, #128	@ 0x80
 800977e:	d109      	bne.n	8009794 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	69fa      	ldr	r2, [r7, #28]
 800978a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800978e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009792:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8009794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009796:	4613      	mov	r3, r2
 8009798:	00db      	lsls	r3, r3, #3
 800979a:	4413      	add	r3, r2
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	4413      	add	r3, r2
 80097a6:	3304      	adds	r3, #4
 80097a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	78db      	ldrb	r3, [r3, #3]
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d108      	bne.n	80097c4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	2200      	movs	r2, #0
 80097b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80097b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	4619      	mov	r1, r3
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f011 fb5e 	bl	801ae80 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80097c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097c6:	015a      	lsls	r2, r3, #5
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	4413      	add	r3, r2
 80097cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097d0:	461a      	mov	r2, r3
 80097d2:	2302      	movs	r3, #2
 80097d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	f003 0320 	and.w	r3, r3, #32
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d008      	beq.n	80097f2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80097e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e2:	015a      	lsls	r2, r3, #5
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	4413      	add	r3, r2
 80097e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097ec:	461a      	mov	r2, r3
 80097ee:	2320      	movs	r3, #32
 80097f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d009      	beq.n	8009810 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80097fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097fe:	015a      	lsls	r2, r3, #5
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	4413      	add	r3, r2
 8009804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009808:	461a      	mov	r2, r3
 800980a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800980e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009812:	3301      	adds	r3, #1
 8009814:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8009816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009818:	085b      	lsrs	r3, r3, #1
 800981a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800981c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800981e:	2b00      	cmp	r3, #0
 8009820:	f47f af62 	bne.w	80096e8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4618      	mov	r0, r3
 800982a:	f00b fcf9 	bl	8015220 <USB_ReadInterrupts>
 800982e:	4603      	mov	r3, r0
 8009830:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009834:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009838:	f040 80db 	bne.w	80099f2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4618      	mov	r0, r3
 8009842:	f00b fd1a 	bl	801527a <USB_ReadDevAllInEpInterrupt>
 8009846:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8009848:	2300      	movs	r3, #0
 800984a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800984c:	e0cd      	b.n	80099ea <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800984e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009850:	f003 0301 	and.w	r3, r3, #1
 8009854:	2b00      	cmp	r3, #0
 8009856:	f000 80c2 	beq.w	80099de <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009860:	b2d2      	uxtb	r2, r2
 8009862:	4611      	mov	r1, r2
 8009864:	4618      	mov	r0, r3
 8009866:	f00b fd40 	bl	80152ea <USB_ReadDevInEPInterrupt>
 800986a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	f003 0301 	and.w	r3, r3, #1
 8009872:	2b00      	cmp	r3, #0
 8009874:	d057      	beq.n	8009926 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009878:	f003 030f 	and.w	r3, r3, #15
 800987c:	2201      	movs	r2, #1
 800987e:	fa02 f303 	lsl.w	r3, r2, r3
 8009882:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800988a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	43db      	mvns	r3, r3
 8009890:	69f9      	ldr	r1, [r7, #28]
 8009892:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009896:	4013      	ands	r3, r2
 8009898:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800989a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800989c:	015a      	lsls	r2, r3, #5
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	4413      	add	r3, r2
 80098a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098a6:	461a      	mov	r2, r3
 80098a8:	2301      	movs	r3, #1
 80098aa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d132      	bne.n	800991a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80098b4:	6879      	ldr	r1, [r7, #4]
 80098b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098b8:	4613      	mov	r3, r2
 80098ba:	00db      	lsls	r3, r3, #3
 80098bc:	4413      	add	r3, r2
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	440b      	add	r3, r1
 80098c2:	3348      	adds	r3, #72	@ 0x48
 80098c4:	6819      	ldr	r1, [r3, #0]
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098ca:	4613      	mov	r3, r2
 80098cc:	00db      	lsls	r3, r3, #3
 80098ce:	4413      	add	r3, r2
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	4403      	add	r3, r0
 80098d4:	3344      	adds	r3, #68	@ 0x44
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4419      	add	r1, r3
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098de:	4613      	mov	r3, r2
 80098e0:	00db      	lsls	r3, r3, #3
 80098e2:	4413      	add	r3, r2
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	4403      	add	r3, r0
 80098e8:	3348      	adds	r3, #72	@ 0x48
 80098ea:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80098ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d113      	bne.n	800991a <HAL_PCD_IRQHandler+0x3a2>
 80098f2:	6879      	ldr	r1, [r7, #4]
 80098f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098f6:	4613      	mov	r3, r2
 80098f8:	00db      	lsls	r3, r3, #3
 80098fa:	4413      	add	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	440b      	add	r3, r1
 8009900:	334c      	adds	r3, #76	@ 0x4c
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d108      	bne.n	800991a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6818      	ldr	r0, [r3, #0]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8009912:	461a      	mov	r2, r3
 8009914:	2101      	movs	r1, #1
 8009916:	f00b fd49 	bl	80153ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800991a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800991c:	b2db      	uxtb	r3, r3
 800991e:	4619      	mov	r1, r3
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f011 fa28 	bl	801ad76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	f003 0308 	and.w	r3, r3, #8
 800992c:	2b00      	cmp	r3, #0
 800992e:	d008      	beq.n	8009942 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009932:	015a      	lsls	r2, r3, #5
 8009934:	69fb      	ldr	r3, [r7, #28]
 8009936:	4413      	add	r3, r2
 8009938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800993c:	461a      	mov	r2, r3
 800993e:	2308      	movs	r3, #8
 8009940:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	f003 0310 	and.w	r3, r3, #16
 8009948:	2b00      	cmp	r3, #0
 800994a:	d008      	beq.n	800995e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800994c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800994e:	015a      	lsls	r2, r3, #5
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	4413      	add	r3, r2
 8009954:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009958:	461a      	mov	r2, r3
 800995a:	2310      	movs	r3, #16
 800995c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009964:	2b00      	cmp	r3, #0
 8009966:	d008      	beq.n	800997a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800996a:	015a      	lsls	r2, r3, #5
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	4413      	add	r3, r2
 8009970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009974:	461a      	mov	r2, r3
 8009976:	2340      	movs	r3, #64	@ 0x40
 8009978:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	f003 0302 	and.w	r3, r3, #2
 8009980:	2b00      	cmp	r3, #0
 8009982:	d023      	beq.n	80099cc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009984:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009986:	6a38      	ldr	r0, [r7, #32]
 8009988:	f00a fd28 	bl	80143dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800998c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800998e:	4613      	mov	r3, r2
 8009990:	00db      	lsls	r3, r3, #3
 8009992:	4413      	add	r3, r2
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	3338      	adds	r3, #56	@ 0x38
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	4413      	add	r3, r2
 800999c:	3304      	adds	r3, #4
 800999e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	78db      	ldrb	r3, [r3, #3]
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d108      	bne.n	80099ba <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	2200      	movs	r2, #0
 80099ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80099ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	4619      	mov	r1, r3
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f011 fa75 	bl	801aea4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80099ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099bc:	015a      	lsls	r2, r3, #5
 80099be:	69fb      	ldr	r3, [r7, #28]
 80099c0:	4413      	add	r3, r2
 80099c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099c6:	461a      	mov	r2, r3
 80099c8:	2302      	movs	r3, #2
 80099ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d003      	beq.n	80099de <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80099d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 fcea 	bl	800a3b2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80099de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e0:	3301      	adds	r3, #1
 80099e2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80099e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e6:	085b      	lsrs	r3, r3, #1
 80099e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80099ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	f47f af2e 	bne.w	800984e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4618      	mov	r0, r3
 80099f8:	f00b fc12 	bl	8015220 <USB_ReadInterrupts>
 80099fc:	4603      	mov	r3, r0
 80099fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a06:	d122      	bne.n	8009a4e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	69fa      	ldr	r2, [r7, #28]
 8009a12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a16:	f023 0301 	bic.w	r3, r3, #1
 8009a1a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d108      	bne.n	8009a38 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009a2e:	2100      	movs	r1, #0
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 fef5 	bl	800a820 <HAL_PCDEx_LPM_Callback>
 8009a36:	e002      	b.n	8009a3e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f011 fa13 	bl	801ae64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	695a      	ldr	r2, [r3, #20]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8009a4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4618      	mov	r0, r3
 8009a54:	f00b fbe4 	bl	8015220 <USB_ReadInterrupts>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a62:	d112      	bne.n	8009a8a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	f003 0301 	and.w	r3, r3, #1
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d102      	bne.n	8009a7a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f011 f9cf 	bl	801ae18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	695a      	ldr	r2, [r3, #20]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8009a88:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f00b fbc6 	bl	8015220 <USB_ReadInterrupts>
 8009a94:	4603      	mov	r3, r0
 8009a96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a9e:	d121      	bne.n	8009ae4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	695a      	ldr	r2, [r3, #20]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8009aae:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d111      	bne.n	8009ade <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2201      	movs	r2, #1
 8009abe:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ac8:	089b      	lsrs	r3, r3, #2
 8009aca:	f003 020f 	and.w	r2, r3, #15
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009ad4:	2101      	movs	r1, #1
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 fea2 	bl	800a820 <HAL_PCDEx_LPM_Callback>
 8009adc:	e002      	b.n	8009ae4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f011 f99a 	bl	801ae18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f00b fb99 	bl	8015220 <USB_ReadInterrupts>
 8009aee:	4603      	mov	r3, r0
 8009af0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009af4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009af8:	f040 80b7 	bne.w	8009c6a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	69fa      	ldr	r2, [r7, #28]
 8009b06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b0a:	f023 0301 	bic.w	r3, r3, #1
 8009b0e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2110      	movs	r1, #16
 8009b16:	4618      	mov	r0, r3
 8009b18:	f00a fc60 	bl	80143dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b20:	e046      	b.n	8009bb0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b24:	015a      	lsls	r2, r3, #5
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	4413      	add	r3, r2
 8009b2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b2e:	461a      	mov	r2, r3
 8009b30:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009b34:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b38:	015a      	lsls	r2, r3, #5
 8009b3a:	69fb      	ldr	r3, [r7, #28]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b46:	0151      	lsls	r1, r2, #5
 8009b48:	69fa      	ldr	r2, [r7, #28]
 8009b4a:	440a      	add	r2, r1
 8009b4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b50:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009b54:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b58:	015a      	lsls	r2, r3, #5
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b62:	461a      	mov	r2, r3
 8009b64:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009b68:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b6c:	015a      	lsls	r2, r3, #5
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	4413      	add	r3, r2
 8009b72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b7a:	0151      	lsls	r1, r2, #5
 8009b7c:	69fa      	ldr	r2, [r7, #28]
 8009b7e:	440a      	add	r2, r1
 8009b80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b84:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009b88:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b8c:	015a      	lsls	r2, r3, #5
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	4413      	add	r3, r2
 8009b92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b9a:	0151      	lsls	r1, r2, #5
 8009b9c:	69fa      	ldr	r2, [r7, #28]
 8009b9e:	440a      	add	r2, r1
 8009ba0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ba4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009ba8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bac:	3301      	adds	r3, #1
 8009bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d3b3      	bcc.n	8009b22 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bc0:	69db      	ldr	r3, [r3, #28]
 8009bc2:	69fa      	ldr	r2, [r7, #28]
 8009bc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009bc8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8009bcc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d016      	beq.n	8009c04 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009be0:	69fa      	ldr	r2, [r7, #28]
 8009be2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009be6:	f043 030b 	orr.w	r3, r3, #11
 8009bea:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bf6:	69fa      	ldr	r2, [r7, #28]
 8009bf8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009bfc:	f043 030b 	orr.w	r3, r3, #11
 8009c00:	6453      	str	r3, [r2, #68]	@ 0x44
 8009c02:	e015      	b.n	8009c30 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c0a:	695a      	ldr	r2, [r3, #20]
 8009c0c:	69fb      	ldr	r3, [r7, #28]
 8009c0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c12:	4619      	mov	r1, r3
 8009c14:	f242 032b 	movw	r3, #8235	@ 0x202b
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	69fa      	ldr	r2, [r7, #28]
 8009c26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009c2a:	f043 030b 	orr.w	r3, r3, #11
 8009c2e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009c30:	69fb      	ldr	r3, [r7, #28]
 8009c32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	69fa      	ldr	r2, [r7, #28]
 8009c3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009c3e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009c42:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6818      	ldr	r0, [r3, #0]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009c54:	461a      	mov	r2, r3
 8009c56:	f00b fba9 	bl	80153ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	695a      	ldr	r2, [r3, #20]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8009c68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f00b fad6 	bl	8015220 <USB_ReadInterrupts>
 8009c74:	4603      	mov	r3, r0
 8009c76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009c7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c7e:	d124      	bne.n	8009cca <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4618      	mov	r0, r3
 8009c86:	f00b fb6d 	bl	8015364 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f00a fc21 	bl	80144d6 <USB_GetDevSpeed>
 8009c94:	4603      	mov	r3, r0
 8009c96:	461a      	mov	r2, r3
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681c      	ldr	r4, [r3, #0]
 8009ca0:	f001 fd88 	bl	800b7b4 <HAL_RCC_GetHCLKFreq>
 8009ca4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	461a      	mov	r2, r3
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f00a f926 	bl	8013f00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f011 f886 	bl	801adc6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	695a      	ldr	r2, [r3, #20]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8009cc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f00b faa6 	bl	8015220 <USB_ReadInterrupts>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	f003 0308 	and.w	r3, r3, #8
 8009cda:	2b08      	cmp	r3, #8
 8009cdc:	d10a      	bne.n	8009cf4 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f011 f863 	bl	801adaa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	695a      	ldr	r2, [r3, #20]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f002 0208 	and.w	r2, r2, #8
 8009cf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f00b fa91 	bl	8015220 <USB_ReadInterrupts>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d04:	2b80      	cmp	r3, #128	@ 0x80
 8009d06:	d122      	bne.n	8009d4e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009d08:	6a3b      	ldr	r3, [r7, #32]
 8009d0a:	699b      	ldr	r3, [r3, #24]
 8009d0c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009d10:	6a3b      	ldr	r3, [r7, #32]
 8009d12:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009d14:	2301      	movs	r3, #1
 8009d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d18:	e014      	b.n	8009d44 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009d1a:	6879      	ldr	r1, [r7, #4]
 8009d1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d1e:	4613      	mov	r3, r2
 8009d20:	00db      	lsls	r3, r3, #3
 8009d22:	4413      	add	r3, r2
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	440b      	add	r3, r1
 8009d28:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d105      	bne.n	8009d3e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	4619      	mov	r1, r3
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 fb09 	bl	800a350 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d40:	3301      	adds	r3, #1
 8009d42:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d3e5      	bcc.n	8009d1a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4618      	mov	r0, r3
 8009d54:	f00b fa64 	bl	8015220 <USB_ReadInterrupts>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009d5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d62:	d13b      	bne.n	8009ddc <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009d64:	2301      	movs	r3, #1
 8009d66:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d68:	e02b      	b.n	8009dc2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d6c:	015a      	lsls	r2, r3, #5
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	4413      	add	r3, r2
 8009d72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009d7a:	6879      	ldr	r1, [r7, #4]
 8009d7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d7e:	4613      	mov	r3, r2
 8009d80:	00db      	lsls	r3, r3, #3
 8009d82:	4413      	add	r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	440b      	add	r3, r1
 8009d88:	3340      	adds	r3, #64	@ 0x40
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d115      	bne.n	8009dbc <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009d90:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	da12      	bge.n	8009dbc <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009d96:	6879      	ldr	r1, [r7, #4]
 8009d98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	00db      	lsls	r3, r3, #3
 8009d9e:	4413      	add	r3, r2
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	440b      	add	r3, r1
 8009da4:	333f      	adds	r3, #63	@ 0x3f
 8009da6:	2201      	movs	r2, #1
 8009da8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	4619      	mov	r1, r3
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 faca 	bl	800a350 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d3ce      	bcc.n	8009d6a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	695a      	ldr	r2, [r3, #20]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8009dda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4618      	mov	r0, r3
 8009de2:	f00b fa1d 	bl	8015220 <USB_ReadInterrupts>
 8009de6:	4603      	mov	r3, r0
 8009de8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009dec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009df0:	d155      	bne.n	8009e9e <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009df2:	2301      	movs	r3, #1
 8009df4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009df6:	e045      	b.n	8009e84 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dfa:	015a      	lsls	r2, r3, #5
 8009dfc:	69fb      	ldr	r3, [r7, #28]
 8009dfe:	4413      	add	r3, r2
 8009e00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009e08:	6879      	ldr	r1, [r7, #4]
 8009e0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e0c:	4613      	mov	r3, r2
 8009e0e:	00db      	lsls	r3, r3, #3
 8009e10:	4413      	add	r3, r2
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	440b      	add	r3, r1
 8009e16:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d12e      	bne.n	8009e7e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009e20:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	da2b      	bge.n	8009e7e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009e26:	69bb      	ldr	r3, [r7, #24]
 8009e28:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8009e32:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d121      	bne.n	8009e7e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009e3a:	6879      	ldr	r1, [r7, #4]
 8009e3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e3e:	4613      	mov	r3, r2
 8009e40:	00db      	lsls	r3, r3, #3
 8009e42:	4413      	add	r3, r2
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	440b      	add	r3, r1
 8009e48:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009e50:	6a3b      	ldr	r3, [r7, #32]
 8009e52:	699b      	ldr	r3, [r3, #24]
 8009e54:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009e58:	6a3b      	ldr	r3, [r7, #32]
 8009e5a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009e5c:	6a3b      	ldr	r3, [r7, #32]
 8009e5e:	695b      	ldr	r3, [r3, #20]
 8009e60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d10a      	bne.n	8009e7e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009e68:	69fb      	ldr	r3, [r7, #28]
 8009e6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	69fa      	ldr	r2, [r7, #28]
 8009e72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009e76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009e7a:	6053      	str	r3, [r2, #4]
            break;
 8009e7c:	e007      	b.n	8009e8e <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e80:	3301      	adds	r3, #1
 8009e82:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d3b4      	bcc.n	8009df8 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	695a      	ldr	r2, [r3, #20]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8009e9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f00b f9bc 	bl	8015220 <USB_ReadInterrupts>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009eae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009eb2:	d10a      	bne.n	8009eca <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f011 f807 	bl	801aec8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	695a      	ldr	r2, [r3, #20]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8009ec8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f00b f9a6 	bl	8015220 <USB_ReadInterrupts>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	f003 0304 	and.w	r3, r3, #4
 8009eda:	2b04      	cmp	r3, #4
 8009edc:	d115      	bne.n	8009f0a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009ee6:	69bb      	ldr	r3, [r7, #24]
 8009ee8:	f003 0304 	and.w	r3, r3, #4
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d002      	beq.n	8009ef6 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f010 fff7 	bl	801aee4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	6859      	ldr	r1, [r3, #4]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	69ba      	ldr	r2, [r7, #24]
 8009f02:	430a      	orrs	r2, r1
 8009f04:	605a      	str	r2, [r3, #4]
 8009f06:	e000      	b.n	8009f0a <HAL_PCD_IRQHandler+0x992>
      return;
 8009f08:	bf00      	nop
    }
  }
}
 8009f0a:	3734      	adds	r7, #52	@ 0x34
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd90      	pop	{r4, r7, pc}

08009f10 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	460b      	mov	r3, r1
 8009f1a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d101      	bne.n	8009f2a <HAL_PCD_SetAddress+0x1a>
 8009f26:	2302      	movs	r3, #2
 8009f28:	e013      	b.n	8009f52 <HAL_PCD_SetAddress+0x42>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	78fa      	ldrb	r2, [r7, #3]
 8009f36:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	78fa      	ldrb	r2, [r7, #3]
 8009f40:	4611      	mov	r1, r2
 8009f42:	4618      	mov	r0, r3
 8009f44:	f00b f904 	bl	8015150 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3708      	adds	r7, #8
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}

08009f5a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b084      	sub	sp, #16
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
 8009f62:	4608      	mov	r0, r1
 8009f64:	4611      	mov	r1, r2
 8009f66:	461a      	mov	r2, r3
 8009f68:	4603      	mov	r3, r0
 8009f6a:	70fb      	strb	r3, [r7, #3]
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	803b      	strh	r3, [r7, #0]
 8009f70:	4613      	mov	r3, r2
 8009f72:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009f74:	2300      	movs	r3, #0
 8009f76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009f78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	da0f      	bge.n	8009fa0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f80:	78fb      	ldrb	r3, [r7, #3]
 8009f82:	f003 020f 	and.w	r2, r3, #15
 8009f86:	4613      	mov	r3, r2
 8009f88:	00db      	lsls	r3, r3, #3
 8009f8a:	4413      	add	r3, r2
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	3338      	adds	r3, #56	@ 0x38
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	4413      	add	r3, r2
 8009f94:	3304      	adds	r3, #4
 8009f96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	705a      	strb	r2, [r3, #1]
 8009f9e:	e00f      	b.n	8009fc0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009fa0:	78fb      	ldrb	r3, [r7, #3]
 8009fa2:	f003 020f 	and.w	r2, r3, #15
 8009fa6:	4613      	mov	r3, r2
 8009fa8:	00db      	lsls	r3, r3, #3
 8009faa:	4413      	add	r3, r2
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	3304      	adds	r3, #4
 8009fb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009fc0:	78fb      	ldrb	r3, [r7, #3]
 8009fc2:	f003 030f 	and.w	r3, r3, #15
 8009fc6:	b2da      	uxtb	r2, r3
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009fcc:	883a      	ldrh	r2, [r7, #0]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	78ba      	ldrb	r2, [r7, #2]
 8009fd6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	785b      	ldrb	r3, [r3, #1]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d004      	beq.n	8009fea <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009fea:	78bb      	ldrb	r3, [r7, #2]
 8009fec:	2b02      	cmp	r3, #2
 8009fee:	d102      	bne.n	8009ff6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d101      	bne.n	800a004 <HAL_PCD_EP_Open+0xaa>
 800a000:	2302      	movs	r3, #2
 800a002:	e00e      	b.n	800a022 <HAL_PCD_EP_Open+0xc8>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	68f9      	ldr	r1, [r7, #12]
 800a012:	4618      	mov	r0, r3
 800a014:	f00a fa84 	bl	8014520 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 800a020:	7afb      	ldrb	r3, [r7, #11]
}
 800a022:	4618      	mov	r0, r3
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b084      	sub	sp, #16
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
 800a032:	460b      	mov	r3, r1
 800a034:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a036:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	da0f      	bge.n	800a05e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a03e:	78fb      	ldrb	r3, [r7, #3]
 800a040:	f003 020f 	and.w	r2, r3, #15
 800a044:	4613      	mov	r3, r2
 800a046:	00db      	lsls	r3, r3, #3
 800a048:	4413      	add	r3, r2
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	3338      	adds	r3, #56	@ 0x38
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	4413      	add	r3, r2
 800a052:	3304      	adds	r3, #4
 800a054:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2201      	movs	r2, #1
 800a05a:	705a      	strb	r2, [r3, #1]
 800a05c:	e00f      	b.n	800a07e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a05e:	78fb      	ldrb	r3, [r7, #3]
 800a060:	f003 020f 	and.w	r2, r3, #15
 800a064:	4613      	mov	r3, r2
 800a066:	00db      	lsls	r3, r3, #3
 800a068:	4413      	add	r3, r2
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	4413      	add	r3, r2
 800a074:	3304      	adds	r3, #4
 800a076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2200      	movs	r2, #0
 800a07c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a07e:	78fb      	ldrb	r3, [r7, #3]
 800a080:	f003 030f 	and.w	r3, r3, #15
 800a084:	b2da      	uxtb	r2, r3
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800a090:	2b01      	cmp	r3, #1
 800a092:	d101      	bne.n	800a098 <HAL_PCD_EP_Close+0x6e>
 800a094:	2302      	movs	r3, #2
 800a096:	e00e      	b.n	800a0b6 <HAL_PCD_EP_Close+0x8c>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	68f9      	ldr	r1, [r7, #12]
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f00a fac2 	bl	8014630 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b086      	sub	sp, #24
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	60f8      	str	r0, [r7, #12]
 800a0c6:	607a      	str	r2, [r7, #4]
 800a0c8:	603b      	str	r3, [r7, #0]
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a0ce:	7afb      	ldrb	r3, [r7, #11]
 800a0d0:	f003 020f 	and.w	r2, r3, #15
 800a0d4:	4613      	mov	r3, r2
 800a0d6:	00db      	lsls	r3, r3, #3
 800a0d8:	4413      	add	r3, r2
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800a0e0:	68fa      	ldr	r2, [r7, #12]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	3304      	adds	r3, #4
 800a0e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	683a      	ldr	r2, [r7, #0]
 800a0f2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a100:	7afb      	ldrb	r3, [r7, #11]
 800a102:	f003 030f 	and.w	r3, r3, #15
 800a106:	b2da      	uxtb	r2, r3
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	2b01      	cmp	r3, #1
 800a112:	d102      	bne.n	800a11a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6818      	ldr	r0, [r3, #0]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	68db      	ldr	r3, [r3, #12]
 800a122:	b2db      	uxtb	r3, r3
 800a124:	461a      	mov	r2, r3
 800a126:	6979      	ldr	r1, [r7, #20]
 800a128:	f00a fb5e 	bl	80147e8 <USB_EPStartXfer>

  return HAL_OK;
 800a12c:	2300      	movs	r3, #0
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3718      	adds	r7, #24
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}

0800a136 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a136:	b480      	push	{r7}
 800a138:	b083      	sub	sp, #12
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
 800a13e:	460b      	mov	r3, r1
 800a140:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a142:	78fb      	ldrb	r3, [r7, #3]
 800a144:	f003 020f 	and.w	r2, r3, #15
 800a148:	6879      	ldr	r1, [r7, #4]
 800a14a:	4613      	mov	r3, r2
 800a14c:	00db      	lsls	r3, r3, #3
 800a14e:	4413      	add	r3, r2
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	440b      	add	r3, r1
 800a154:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 800a158:	681b      	ldr	r3, [r3, #0]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	370c      	adds	r7, #12
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr

0800a166 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a166:	b580      	push	{r7, lr}
 800a168:	b086      	sub	sp, #24
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	60f8      	str	r0, [r7, #12]
 800a16e:	607a      	str	r2, [r7, #4]
 800a170:	603b      	str	r3, [r7, #0]
 800a172:	460b      	mov	r3, r1
 800a174:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a176:	7afb      	ldrb	r3, [r7, #11]
 800a178:	f003 020f 	and.w	r2, r3, #15
 800a17c:	4613      	mov	r3, r2
 800a17e:	00db      	lsls	r3, r3, #3
 800a180:	4413      	add	r3, r2
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	3338      	adds	r3, #56	@ 0x38
 800a186:	68fa      	ldr	r2, [r7, #12]
 800a188:	4413      	add	r3, r2
 800a18a:	3304      	adds	r3, #4
 800a18c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	683a      	ldr	r2, [r7, #0]
 800a198:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	2200      	movs	r2, #0
 800a19e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a1a6:	7afb      	ldrb	r3, [r7, #11]
 800a1a8:	f003 030f 	and.w	r3, r3, #15
 800a1ac:	b2da      	uxtb	r2, r3
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d102      	bne.n	800a1c0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	6818      	ldr	r0, [r3, #0]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	6979      	ldr	r1, [r7, #20]
 800a1ce:	f00a fb0b 	bl	80147e8 <USB_EPStartXfer>

  return HAL_OK;
 800a1d2:	2300      	movs	r3, #0
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3718      	adds	r7, #24
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a1e8:	78fb      	ldrb	r3, [r7, #3]
 800a1ea:	f003 020f 	and.w	r2, r3, #15
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d901      	bls.n	800a1fa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e050      	b.n	800a29c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a1fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	da0f      	bge.n	800a222 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a202:	78fb      	ldrb	r3, [r7, #3]
 800a204:	f003 020f 	and.w	r2, r3, #15
 800a208:	4613      	mov	r3, r2
 800a20a:	00db      	lsls	r3, r3, #3
 800a20c:	4413      	add	r3, r2
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	3338      	adds	r3, #56	@ 0x38
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	4413      	add	r3, r2
 800a216:	3304      	adds	r3, #4
 800a218:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2201      	movs	r2, #1
 800a21e:	705a      	strb	r2, [r3, #1]
 800a220:	e00d      	b.n	800a23e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a222:	78fa      	ldrb	r2, [r7, #3]
 800a224:	4613      	mov	r3, r2
 800a226:	00db      	lsls	r3, r3, #3
 800a228:	4413      	add	r3, r2
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	4413      	add	r3, r2
 800a234:	3304      	adds	r3, #4
 800a236:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2200      	movs	r2, #0
 800a23c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2201      	movs	r2, #1
 800a242:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a244:	78fb      	ldrb	r3, [r7, #3]
 800a246:	f003 030f 	and.w	r3, r3, #15
 800a24a:	b2da      	uxtb	r2, r3
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800a256:	2b01      	cmp	r3, #1
 800a258:	d101      	bne.n	800a25e <HAL_PCD_EP_SetStall+0x82>
 800a25a:	2302      	movs	r3, #2
 800a25c:	e01e      	b.n	800a29c <HAL_PCD_EP_SetStall+0xc0>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2201      	movs	r2, #1
 800a262:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	68f9      	ldr	r1, [r7, #12]
 800a26c:	4618      	mov	r0, r3
 800a26e:	f00a fe9b 	bl	8014fa8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a272:	78fb      	ldrb	r3, [r7, #3]
 800a274:	f003 030f 	and.w	r3, r3, #15
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d10a      	bne.n	800a292 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6818      	ldr	r0, [r3, #0]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	b2d9      	uxtb	r1, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800a28c:	461a      	mov	r2, r3
 800a28e:	f00b f88d 	bl	80153ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3710      	adds	r7, #16
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a2b0:	78fb      	ldrb	r3, [r7, #3]
 800a2b2:	f003 020f 	and.w	r2, r3, #15
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d901      	bls.n	800a2c2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e042      	b.n	800a348 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a2c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	da0f      	bge.n	800a2ea <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a2ca:	78fb      	ldrb	r3, [r7, #3]
 800a2cc:	f003 020f 	and.w	r2, r3, #15
 800a2d0:	4613      	mov	r3, r2
 800a2d2:	00db      	lsls	r3, r3, #3
 800a2d4:	4413      	add	r3, r2
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	3338      	adds	r3, #56	@ 0x38
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	4413      	add	r3, r2
 800a2de:	3304      	adds	r3, #4
 800a2e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	705a      	strb	r2, [r3, #1]
 800a2e8:	e00f      	b.n	800a30a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a2ea:	78fb      	ldrb	r3, [r7, #3]
 800a2ec:	f003 020f 	and.w	r2, r3, #15
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	00db      	lsls	r3, r3, #3
 800a2f4:	4413      	add	r3, r2
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	4413      	add	r3, r2
 800a300:	3304      	adds	r3, #4
 800a302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2200      	movs	r2, #0
 800a308:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2200      	movs	r2, #0
 800a30e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a310:	78fb      	ldrb	r3, [r7, #3]
 800a312:	f003 030f 	and.w	r3, r3, #15
 800a316:	b2da      	uxtb	r2, r3
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800a322:	2b01      	cmp	r3, #1
 800a324:	d101      	bne.n	800a32a <HAL_PCD_EP_ClrStall+0x86>
 800a326:	2302      	movs	r3, #2
 800a328:	e00e      	b.n	800a348 <HAL_PCD_EP_ClrStall+0xa4>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2201      	movs	r2, #1
 800a32e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68f9      	ldr	r1, [r7, #12]
 800a338:	4618      	mov	r0, r3
 800a33a:	f00a fea3 	bl	8015084 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800a346:	2300      	movs	r3, #0
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3710      	adds	r7, #16
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	460b      	mov	r3, r1
 800a35a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a35c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a360:	2b00      	cmp	r3, #0
 800a362:	da0c      	bge.n	800a37e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a364:	78fb      	ldrb	r3, [r7, #3]
 800a366:	f003 020f 	and.w	r2, r3, #15
 800a36a:	4613      	mov	r3, r2
 800a36c:	00db      	lsls	r3, r3, #3
 800a36e:	4413      	add	r3, r2
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	3338      	adds	r3, #56	@ 0x38
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	4413      	add	r3, r2
 800a378:	3304      	adds	r3, #4
 800a37a:	60fb      	str	r3, [r7, #12]
 800a37c:	e00c      	b.n	800a398 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a37e:	78fb      	ldrb	r3, [r7, #3]
 800a380:	f003 020f 	and.w	r2, r3, #15
 800a384:	4613      	mov	r3, r2
 800a386:	00db      	lsls	r3, r3, #3
 800a388:	4413      	add	r3, r2
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	4413      	add	r3, r2
 800a394:	3304      	adds	r3, #4
 800a396:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68f9      	ldr	r1, [r7, #12]
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f00a fcc2 	bl	8014d28 <USB_EPStopXfer>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a3a8:	7afb      	ldrb	r3, [r7, #11]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3710      	adds	r7, #16
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b08a      	sub	sp, #40	@ 0x28
 800a3b6:	af02      	add	r7, sp, #8
 800a3b8:	6078      	str	r0, [r7, #4]
 800a3ba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a3c6:	683a      	ldr	r2, [r7, #0]
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	00db      	lsls	r3, r3, #3
 800a3cc:	4413      	add	r3, r2
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	3338      	adds	r3, #56	@ 0x38
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	3304      	adds	r3, #4
 800a3d8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	695a      	ldr	r2, [r3, #20]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d901      	bls.n	800a3ea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	e06c      	b.n	800a4c4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	691a      	ldr	r2, [r3, #16]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	695b      	ldr	r3, [r3, #20]
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	689b      	ldr	r3, [r3, #8]
 800a3fa:	69fa      	ldr	r2, [r7, #28]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d902      	bls.n	800a406 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	3303      	adds	r3, #3
 800a40a:	089b      	lsrs	r3, r3, #2
 800a40c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a40e:	e02b      	b.n	800a468 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	691a      	ldr	r2, [r3, #16]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	695b      	ldr	r3, [r3, #20]
 800a418:	1ad3      	subs	r3, r2, r3
 800a41a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	69fa      	ldr	r2, [r7, #28]
 800a422:	429a      	cmp	r2, r3
 800a424:	d902      	bls.n	800a42c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	689b      	ldr	r3, [r3, #8]
 800a42a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	3303      	adds	r3, #3
 800a430:	089b      	lsrs	r3, r3, #2
 800a432:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	68d9      	ldr	r1, [r3, #12]
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	b2da      	uxtb	r2, r3
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a444:	b2db      	uxtb	r3, r3
 800a446:	9300      	str	r3, [sp, #0]
 800a448:	4603      	mov	r3, r0
 800a44a:	6978      	ldr	r0, [r7, #20]
 800a44c:	f00a fd16 	bl	8014e7c <USB_WritePacket>

    ep->xfer_buff  += len;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	68da      	ldr	r2, [r3, #12]
 800a454:	69fb      	ldr	r3, [r7, #28]
 800a456:	441a      	add	r2, r3
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	695a      	ldr	r2, [r3, #20]
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	441a      	add	r2, r3
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	015a      	lsls	r2, r3, #5
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	4413      	add	r3, r2
 800a470:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a474:	699b      	ldr	r3, [r3, #24]
 800a476:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a478:	69ba      	ldr	r2, [r7, #24]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d809      	bhi.n	800a492 <PCD_WriteEmptyTxFifo+0xe0>
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	695a      	ldr	r2, [r3, #20]
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a486:	429a      	cmp	r2, r3
 800a488:	d203      	bcs.n	800a492 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	691b      	ldr	r3, [r3, #16]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d1be      	bne.n	800a410 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	691a      	ldr	r2, [r3, #16]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	695b      	ldr	r3, [r3, #20]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d811      	bhi.n	800a4c2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	f003 030f 	and.w	r3, r3, #15
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a4aa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	43db      	mvns	r3, r3
 800a4b8:	6939      	ldr	r1, [r7, #16]
 800a4ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a4be:	4013      	ands	r3, r2
 800a4c0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800a4c2:	2300      	movs	r3, #0
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3720      	adds	r7, #32
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b088      	sub	sp, #32
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a4e0:	69fb      	ldr	r3, [r7, #28]
 800a4e2:	333c      	adds	r3, #60	@ 0x3c
 800a4e4:	3304      	adds	r3, #4
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	015a      	lsls	r2, r3, #5
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d17b      	bne.n	800a5fa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	f003 0308 	and.w	r3, r3, #8
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d015      	beq.n	800a538 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	4a61      	ldr	r2, [pc, #388]	@ (800a694 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a510:	4293      	cmp	r3, r2
 800a512:	f240 80b9 	bls.w	800a688 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f000 80b3 	beq.w	800a688 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	015a      	lsls	r2, r3, #5
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	4413      	add	r3, r2
 800a52a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a52e:	461a      	mov	r2, r3
 800a530:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a534:	6093      	str	r3, [r2, #8]
 800a536:	e0a7      	b.n	800a688 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	f003 0320 	and.w	r3, r3, #32
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d009      	beq.n	800a556 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	015a      	lsls	r2, r3, #5
 800a546:	69bb      	ldr	r3, [r7, #24]
 800a548:	4413      	add	r3, r2
 800a54a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a54e:	461a      	mov	r2, r3
 800a550:	2320      	movs	r3, #32
 800a552:	6093      	str	r3, [r2, #8]
 800a554:	e098      	b.n	800a688 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f040 8093 	bne.w	800a688 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	4a4b      	ldr	r2, [pc, #300]	@ (800a694 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d90f      	bls.n	800a58a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a570:	2b00      	cmp	r3, #0
 800a572:	d00a      	beq.n	800a58a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	015a      	lsls	r2, r3, #5
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	4413      	add	r3, r2
 800a57c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a580:	461a      	mov	r2, r3
 800a582:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a586:	6093      	str	r3, [r2, #8]
 800a588:	e07e      	b.n	800a688 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a58a:	683a      	ldr	r2, [r7, #0]
 800a58c:	4613      	mov	r3, r2
 800a58e:	00db      	lsls	r3, r3, #3
 800a590:	4413      	add	r3, r2
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	4413      	add	r3, r2
 800a59c:	3304      	adds	r3, #4
 800a59e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6a1a      	ldr	r2, [r3, #32]
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	0159      	lsls	r1, r3, #5
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	440b      	add	r3, r1
 800a5ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5b0:	691b      	ldr	r3, [r3, #16]
 800a5b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5b6:	1ad2      	subs	r2, r2, r3
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d114      	bne.n	800a5ec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d109      	bne.n	800a5de <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6818      	ldr	r0, [r3, #0]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	2101      	movs	r1, #1
 800a5d8:	f00a fee8 	bl	80153ac <USB_EP0_OutStart>
 800a5dc:	e006      	b.n	800a5ec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	68da      	ldr	r2, [r3, #12]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	695b      	ldr	r3, [r3, #20]
 800a5e6:	441a      	add	r2, r3
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f010 fba4 	bl	801ad40 <HAL_PCD_DataOutStageCallback>
 800a5f8:	e046      	b.n	800a688 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	4a26      	ldr	r2, [pc, #152]	@ (800a698 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d124      	bne.n	800a64c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d00a      	beq.n	800a622 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	015a      	lsls	r2, r3, #5
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	4413      	add	r3, r2
 800a614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a618:	461a      	mov	r2, r3
 800a61a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a61e:	6093      	str	r3, [r2, #8]
 800a620:	e032      	b.n	800a688 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	f003 0320 	and.w	r3, r3, #32
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d008      	beq.n	800a63e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	015a      	lsls	r2, r3, #5
 800a630:	69bb      	ldr	r3, [r7, #24]
 800a632:	4413      	add	r3, r2
 800a634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a638:	461a      	mov	r2, r3
 800a63a:	2320      	movs	r3, #32
 800a63c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	b2db      	uxtb	r3, r3
 800a642:	4619      	mov	r1, r3
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f010 fb7b 	bl	801ad40 <HAL_PCD_DataOutStageCallback>
 800a64a:	e01d      	b.n	800a688 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d114      	bne.n	800a67c <PCD_EP_OutXfrComplete_int+0x1b0>
 800a652:	6879      	ldr	r1, [r7, #4]
 800a654:	683a      	ldr	r2, [r7, #0]
 800a656:	4613      	mov	r3, r2
 800a658:	00db      	lsls	r3, r3, #3
 800a65a:	4413      	add	r3, r2
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	440b      	add	r3, r1
 800a660:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d108      	bne.n	800a67c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6818      	ldr	r0, [r3, #0]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800a674:	461a      	mov	r2, r3
 800a676:	2100      	movs	r1, #0
 800a678:	f00a fe98 	bl	80153ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	4619      	mov	r1, r3
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f010 fb5c 	bl	801ad40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3720      	adds	r7, #32
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	4f54300a 	.word	0x4f54300a
 800a698:	4f54310a 	.word	0x4f54310a

0800a69c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b086      	sub	sp, #24
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	333c      	adds	r3, #60	@ 0x3c
 800a6b4:	3304      	adds	r3, #4
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	015a      	lsls	r2, r3, #5
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	4413      	add	r3, r2
 800a6c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	4a15      	ldr	r2, [pc, #84]	@ (800a724 <PCD_EP_OutSetupPacket_int+0x88>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d90e      	bls.n	800a6f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d009      	beq.n	800a6f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	015a      	lsls	r2, r3, #5
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a6ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f010 fb13 	bl	801ad1c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	4a0a      	ldr	r2, [pc, #40]	@ (800a724 <PCD_EP_OutSetupPacket_int+0x88>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d90c      	bls.n	800a718 <PCD_EP_OutSetupPacket_int+0x7c>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	68db      	ldr	r3, [r3, #12]
 800a702:	2b01      	cmp	r3, #1
 800a704:	d108      	bne.n	800a718 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6818      	ldr	r0, [r3, #0]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800a710:	461a      	mov	r2, r3
 800a712:	2101      	movs	r1, #1
 800a714:	f00a fe4a 	bl	80153ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a718:	2300      	movs	r3, #0
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3718      	adds	r7, #24
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	4f54300a 	.word	0x4f54300a

0800a728 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a728:	b480      	push	{r7}
 800a72a:	b085      	sub	sp, #20
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	460b      	mov	r3, r1
 800a732:	70fb      	strb	r3, [r7, #3]
 800a734:	4613      	mov	r3, r2
 800a736:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a73e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a740:	78fb      	ldrb	r3, [r7, #3]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d107      	bne.n	800a756 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a746:	883b      	ldrh	r3, [r7, #0]
 800a748:	0419      	lsls	r1, r3, #16
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	68ba      	ldr	r2, [r7, #8]
 800a750:	430a      	orrs	r2, r1
 800a752:	629a      	str	r2, [r3, #40]	@ 0x28
 800a754:	e028      	b.n	800a7a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a75c:	0c1b      	lsrs	r3, r3, #16
 800a75e:	68ba      	ldr	r2, [r7, #8]
 800a760:	4413      	add	r3, r2
 800a762:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a764:	2300      	movs	r3, #0
 800a766:	73fb      	strb	r3, [r7, #15]
 800a768:	e00d      	b.n	800a786 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	7bfb      	ldrb	r3, [r7, #15]
 800a770:	3340      	adds	r3, #64	@ 0x40
 800a772:	009b      	lsls	r3, r3, #2
 800a774:	4413      	add	r3, r2
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	0c1b      	lsrs	r3, r3, #16
 800a77a:	68ba      	ldr	r2, [r7, #8]
 800a77c:	4413      	add	r3, r2
 800a77e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a780:	7bfb      	ldrb	r3, [r7, #15]
 800a782:	3301      	adds	r3, #1
 800a784:	73fb      	strb	r3, [r7, #15]
 800a786:	7bfa      	ldrb	r2, [r7, #15]
 800a788:	78fb      	ldrb	r3, [r7, #3]
 800a78a:	3b01      	subs	r3, #1
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d3ec      	bcc.n	800a76a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a790:	883b      	ldrh	r3, [r7, #0]
 800a792:	0418      	lsls	r0, r3, #16
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6819      	ldr	r1, [r3, #0]
 800a798:	78fb      	ldrb	r3, [r7, #3]
 800a79a:	3b01      	subs	r3, #1
 800a79c:	68ba      	ldr	r2, [r7, #8]
 800a79e:	4302      	orrs	r2, r0
 800a7a0:	3340      	adds	r3, #64	@ 0x40
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	440b      	add	r3, r1
 800a7a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3714      	adds	r7, #20
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr

0800a7b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a7b6:	b480      	push	{r7}
 800a7b8:	b083      	sub	sp, #12
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
 800a7be:	460b      	mov	r3, r1
 800a7c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	887a      	ldrh	r2, [r7, #2]
 800a7c8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800a7ca:	2300      	movs	r3, #0
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	699b      	ldr	r3, [r3, #24]
 800a7fa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a806:	4b05      	ldr	r3, [pc, #20]	@ (800a81c <HAL_PCDEx_ActivateLPM+0x44>)
 800a808:	4313      	orrs	r3, r2
 800a80a:	68fa      	ldr	r2, [r7, #12]
 800a80c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800a80e:	2300      	movs	r3, #0
}
 800a810:	4618      	mov	r0, r3
 800a812:	3714      	adds	r7, #20
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr
 800a81c:	10000003 	.word	0x10000003

0800a820 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a820:	b480      	push	{r7}
 800a822:	b083      	sub	sp, #12
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	460b      	mov	r3, r1
 800a82a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a82c:	bf00      	nop
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a840:	4b19      	ldr	r3, [pc, #100]	@ (800a8a8 <HAL_PWREx_ConfigSupply+0x70>)
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	f003 0304 	and.w	r3, r3, #4
 800a848:	2b04      	cmp	r3, #4
 800a84a:	d00a      	beq.n	800a862 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a84c:	4b16      	ldr	r3, [pc, #88]	@ (800a8a8 <HAL_PWREx_ConfigSupply+0x70>)
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	f003 0307 	and.w	r3, r3, #7
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	429a      	cmp	r2, r3
 800a858:	d001      	beq.n	800a85e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	e01f      	b.n	800a89e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a85e:	2300      	movs	r3, #0
 800a860:	e01d      	b.n	800a89e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a862:	4b11      	ldr	r3, [pc, #68]	@ (800a8a8 <HAL_PWREx_ConfigSupply+0x70>)
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	f023 0207 	bic.w	r2, r3, #7
 800a86a:	490f      	ldr	r1, [pc, #60]	@ (800a8a8 <HAL_PWREx_ConfigSupply+0x70>)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	4313      	orrs	r3, r2
 800a870:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a872:	f7f9 fcc3 	bl	80041fc <HAL_GetTick>
 800a876:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a878:	e009      	b.n	800a88e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a87a:	f7f9 fcbf 	bl	80041fc <HAL_GetTick>
 800a87e:	4602      	mov	r2, r0
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	1ad3      	subs	r3, r2, r3
 800a884:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a888:	d901      	bls.n	800a88e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a88a:	2301      	movs	r3, #1
 800a88c:	e007      	b.n	800a89e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a88e:	4b06      	ldr	r3, [pc, #24]	@ (800a8a8 <HAL_PWREx_ConfigSupply+0x70>)
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a896:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a89a:	d1ee      	bne.n	800a87a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	58024800 	.word	0x58024800

0800a8ac <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a8b0:	4b05      	ldr	r3, [pc, #20]	@ (800a8c8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	4a04      	ldr	r2, [pc, #16]	@ (800a8c8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a8b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a8ba:	60d3      	str	r3, [r2, #12]
}
 800a8bc:	bf00      	nop
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr
 800a8c6:	bf00      	nop
 800a8c8:	58024800 	.word	0x58024800

0800a8cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b08c      	sub	sp, #48	@ 0x30
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d101      	bne.n	800a8de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	e3c8      	b.n	800b070 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f003 0301 	and.w	r3, r3, #1
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	f000 8087 	beq.w	800a9fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a8ec:	4b88      	ldr	r3, [pc, #544]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800a8ee:	691b      	ldr	r3, [r3, #16]
 800a8f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a8f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a8f6:	4b86      	ldr	r3, [pc, #536]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800a8f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a8fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8fe:	2b10      	cmp	r3, #16
 800a900:	d007      	beq.n	800a912 <HAL_RCC_OscConfig+0x46>
 800a902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a904:	2b18      	cmp	r3, #24
 800a906:	d110      	bne.n	800a92a <HAL_RCC_OscConfig+0x5e>
 800a908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a90a:	f003 0303 	and.w	r3, r3, #3
 800a90e:	2b02      	cmp	r3, #2
 800a910:	d10b      	bne.n	800a92a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a912:	4b7f      	ldr	r3, [pc, #508]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d06c      	beq.n	800a9f8 <HAL_RCC_OscConfig+0x12c>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d168      	bne.n	800a9f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	e3a2      	b.n	800b070 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a932:	d106      	bne.n	800a942 <HAL_RCC_OscConfig+0x76>
 800a934:	4b76      	ldr	r3, [pc, #472]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a75      	ldr	r2, [pc, #468]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800a93a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a93e:	6013      	str	r3, [r2, #0]
 800a940:	e02e      	b.n	800a9a0 <HAL_RCC_OscConfig+0xd4>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d10c      	bne.n	800a964 <HAL_RCC_OscConfig+0x98>
 800a94a:	4b71      	ldr	r3, [pc, #452]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4a70      	ldr	r2, [pc, #448]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800a950:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a954:	6013      	str	r3, [r2, #0]
 800a956:	4b6e      	ldr	r3, [pc, #440]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a6d      	ldr	r2, [pc, #436]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800a95c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a960:	6013      	str	r3, [r2, #0]
 800a962:	e01d      	b.n	800a9a0 <HAL_RCC_OscConfig+0xd4>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a96c:	d10c      	bne.n	800a988 <HAL_RCC_OscConfig+0xbc>
 800a96e:	4b68      	ldr	r3, [pc, #416]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4a67      	ldr	r2, [pc, #412]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800a974:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a978:	6013      	str	r3, [r2, #0]
 800a97a:	4b65      	ldr	r3, [pc, #404]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a64      	ldr	r2, [pc, #400]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800a980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a984:	6013      	str	r3, [r2, #0]
 800a986:	e00b      	b.n	800a9a0 <HAL_RCC_OscConfig+0xd4>
 800a988:	4b61      	ldr	r3, [pc, #388]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4a60      	ldr	r2, [pc, #384]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800a98e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a992:	6013      	str	r3, [r2, #0]
 800a994:	4b5e      	ldr	r3, [pc, #376]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4a5d      	ldr	r2, [pc, #372]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800a99a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a99e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d013      	beq.n	800a9d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9a8:	f7f9 fc28 	bl	80041fc <HAL_GetTick>
 800a9ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a9ae:	e008      	b.n	800a9c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9b0:	f7f9 fc24 	bl	80041fc <HAL_GetTick>
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b8:	1ad3      	subs	r3, r2, r3
 800a9ba:	2b64      	cmp	r3, #100	@ 0x64
 800a9bc:	d901      	bls.n	800a9c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a9be:	2303      	movs	r3, #3
 800a9c0:	e356      	b.n	800b070 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a9c2:	4b53      	ldr	r3, [pc, #332]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d0f0      	beq.n	800a9b0 <HAL_RCC_OscConfig+0xe4>
 800a9ce:	e014      	b.n	800a9fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9d0:	f7f9 fc14 	bl	80041fc <HAL_GetTick>
 800a9d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a9d6:	e008      	b.n	800a9ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9d8:	f7f9 fc10 	bl	80041fc <HAL_GetTick>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e0:	1ad3      	subs	r3, r2, r3
 800a9e2:	2b64      	cmp	r3, #100	@ 0x64
 800a9e4:	d901      	bls.n	800a9ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a9e6:	2303      	movs	r3, #3
 800a9e8:	e342      	b.n	800b070 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a9ea:	4b49      	ldr	r3, [pc, #292]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d1f0      	bne.n	800a9d8 <HAL_RCC_OscConfig+0x10c>
 800a9f6:	e000      	b.n	800a9fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a9f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f003 0302 	and.w	r3, r3, #2
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	f000 808c 	beq.w	800ab20 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa08:	4b41      	ldr	r3, [pc, #260]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800aa0a:	691b      	ldr	r3, [r3, #16]
 800aa0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aa10:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aa12:	4b3f      	ldr	r3, [pc, #252]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800aa14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa16:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800aa18:	6a3b      	ldr	r3, [r7, #32]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d007      	beq.n	800aa2e <HAL_RCC_OscConfig+0x162>
 800aa1e:	6a3b      	ldr	r3, [r7, #32]
 800aa20:	2b18      	cmp	r3, #24
 800aa22:	d137      	bne.n	800aa94 <HAL_RCC_OscConfig+0x1c8>
 800aa24:	69fb      	ldr	r3, [r7, #28]
 800aa26:	f003 0303 	and.w	r3, r3, #3
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d132      	bne.n	800aa94 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aa2e:	4b38      	ldr	r3, [pc, #224]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f003 0304 	and.w	r3, r3, #4
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d005      	beq.n	800aa46 <HAL_RCC_OscConfig+0x17a>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d101      	bne.n	800aa46 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800aa42:	2301      	movs	r3, #1
 800aa44:	e314      	b.n	800b070 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aa46:	4b32      	ldr	r3, [pc, #200]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f023 0219 	bic.w	r2, r3, #25
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	492f      	ldr	r1, [pc, #188]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800aa54:	4313      	orrs	r3, r2
 800aa56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa58:	f7f9 fbd0 	bl	80041fc <HAL_GetTick>
 800aa5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa5e:	e008      	b.n	800aa72 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa60:	f7f9 fbcc 	bl	80041fc <HAL_GetTick>
 800aa64:	4602      	mov	r2, r0
 800aa66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa68:	1ad3      	subs	r3, r2, r3
 800aa6a:	2b02      	cmp	r3, #2
 800aa6c:	d901      	bls.n	800aa72 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800aa6e:	2303      	movs	r3, #3
 800aa70:	e2fe      	b.n	800b070 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa72:	4b27      	ldr	r3, [pc, #156]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f003 0304 	and.w	r3, r3, #4
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d0f0      	beq.n	800aa60 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa7e:	4b24      	ldr	r3, [pc, #144]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	691b      	ldr	r3, [r3, #16]
 800aa8a:	061b      	lsls	r3, r3, #24
 800aa8c:	4920      	ldr	r1, [pc, #128]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aa92:	e045      	b.n	800ab20 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d026      	beq.n	800aaea <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aa9c:	4b1c      	ldr	r3, [pc, #112]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f023 0219 	bic.w	r2, r3, #25
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	68db      	ldr	r3, [r3, #12]
 800aaa8:	4919      	ldr	r1, [pc, #100]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaae:	f7f9 fba5 	bl	80041fc <HAL_GetTick>
 800aab2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aab4:	e008      	b.n	800aac8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aab6:	f7f9 fba1 	bl	80041fc <HAL_GetTick>
 800aaba:	4602      	mov	r2, r0
 800aabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aabe:	1ad3      	subs	r3, r2, r3
 800aac0:	2b02      	cmp	r3, #2
 800aac2:	d901      	bls.n	800aac8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800aac4:	2303      	movs	r3, #3
 800aac6:	e2d3      	b.n	800b070 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aac8:	4b11      	ldr	r3, [pc, #68]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f003 0304 	and.w	r3, r3, #4
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d0f0      	beq.n	800aab6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aad4:	4b0e      	ldr	r3, [pc, #56]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	691b      	ldr	r3, [r3, #16]
 800aae0:	061b      	lsls	r3, r3, #24
 800aae2:	490b      	ldr	r1, [pc, #44]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800aae4:	4313      	orrs	r3, r2
 800aae6:	604b      	str	r3, [r1, #4]
 800aae8:	e01a      	b.n	800ab20 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aaea:	4b09      	ldr	r3, [pc, #36]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a08      	ldr	r2, [pc, #32]	@ (800ab10 <HAL_RCC_OscConfig+0x244>)
 800aaf0:	f023 0301 	bic.w	r3, r3, #1
 800aaf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaf6:	f7f9 fb81 	bl	80041fc <HAL_GetTick>
 800aafa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aafc:	e00a      	b.n	800ab14 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aafe:	f7f9 fb7d 	bl	80041fc <HAL_GetTick>
 800ab02:	4602      	mov	r2, r0
 800ab04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab06:	1ad3      	subs	r3, r2, r3
 800ab08:	2b02      	cmp	r3, #2
 800ab0a:	d903      	bls.n	800ab14 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800ab0c:	2303      	movs	r3, #3
 800ab0e:	e2af      	b.n	800b070 <HAL_RCC_OscConfig+0x7a4>
 800ab10:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ab14:	4b96      	ldr	r3, [pc, #600]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f003 0304 	and.w	r3, r3, #4
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d1ee      	bne.n	800aafe <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f003 0310 	and.w	r3, r3, #16
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d06a      	beq.n	800ac02 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ab2c:	4b90      	ldr	r3, [pc, #576]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800ab2e:	691b      	ldr	r3, [r3, #16]
 800ab30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ab34:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ab36:	4b8e      	ldr	r3, [pc, #568]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800ab38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab3a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ab3c:	69bb      	ldr	r3, [r7, #24]
 800ab3e:	2b08      	cmp	r3, #8
 800ab40:	d007      	beq.n	800ab52 <HAL_RCC_OscConfig+0x286>
 800ab42:	69bb      	ldr	r3, [r7, #24]
 800ab44:	2b18      	cmp	r3, #24
 800ab46:	d11b      	bne.n	800ab80 <HAL_RCC_OscConfig+0x2b4>
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	f003 0303 	and.w	r3, r3, #3
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d116      	bne.n	800ab80 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ab52:	4b87      	ldr	r3, [pc, #540]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d005      	beq.n	800ab6a <HAL_RCC_OscConfig+0x29e>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	69db      	ldr	r3, [r3, #28]
 800ab62:	2b80      	cmp	r3, #128	@ 0x80
 800ab64:	d001      	beq.n	800ab6a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800ab66:	2301      	movs	r3, #1
 800ab68:	e282      	b.n	800b070 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ab6a:	4b81      	ldr	r3, [pc, #516]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800ab6c:	68db      	ldr	r3, [r3, #12]
 800ab6e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6a1b      	ldr	r3, [r3, #32]
 800ab76:	061b      	lsls	r3, r3, #24
 800ab78:	497d      	ldr	r1, [pc, #500]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ab7e:	e040      	b.n	800ac02 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	69db      	ldr	r3, [r3, #28]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d023      	beq.n	800abd0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800ab88:	4b79      	ldr	r3, [pc, #484]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4a78      	ldr	r2, [pc, #480]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800ab8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab94:	f7f9 fb32 	bl	80041fc <HAL_GetTick>
 800ab98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ab9a:	e008      	b.n	800abae <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ab9c:	f7f9 fb2e 	bl	80041fc <HAL_GetTick>
 800aba0:	4602      	mov	r2, r0
 800aba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aba4:	1ad3      	subs	r3, r2, r3
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	d901      	bls.n	800abae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800abaa:	2303      	movs	r3, #3
 800abac:	e260      	b.n	800b070 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800abae:	4b70      	ldr	r3, [pc, #448]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d0f0      	beq.n	800ab9c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800abba:	4b6d      	ldr	r3, [pc, #436]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6a1b      	ldr	r3, [r3, #32]
 800abc6:	061b      	lsls	r3, r3, #24
 800abc8:	4969      	ldr	r1, [pc, #420]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800abca:	4313      	orrs	r3, r2
 800abcc:	60cb      	str	r3, [r1, #12]
 800abce:	e018      	b.n	800ac02 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800abd0:	4b67      	ldr	r3, [pc, #412]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a66      	ldr	r2, [pc, #408]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800abd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800abda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abdc:	f7f9 fb0e 	bl	80041fc <HAL_GetTick>
 800abe0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800abe2:	e008      	b.n	800abf6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800abe4:	f7f9 fb0a 	bl	80041fc <HAL_GetTick>
 800abe8:	4602      	mov	r2, r0
 800abea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abec:	1ad3      	subs	r3, r2, r3
 800abee:	2b02      	cmp	r3, #2
 800abf0:	d901      	bls.n	800abf6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800abf2:	2303      	movs	r3, #3
 800abf4:	e23c      	b.n	800b070 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800abf6:	4b5e      	ldr	r3, [pc, #376]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d1f0      	bne.n	800abe4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f003 0308 	and.w	r3, r3, #8
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d036      	beq.n	800ac7c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	695b      	ldr	r3, [r3, #20]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d019      	beq.n	800ac4a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ac16:	4b56      	ldr	r3, [pc, #344]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800ac18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac1a:	4a55      	ldr	r2, [pc, #340]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800ac1c:	f043 0301 	orr.w	r3, r3, #1
 800ac20:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac22:	f7f9 faeb 	bl	80041fc <HAL_GetTick>
 800ac26:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ac28:	e008      	b.n	800ac3c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ac2a:	f7f9 fae7 	bl	80041fc <HAL_GetTick>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac32:	1ad3      	subs	r3, r2, r3
 800ac34:	2b02      	cmp	r3, #2
 800ac36:	d901      	bls.n	800ac3c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800ac38:	2303      	movs	r3, #3
 800ac3a:	e219      	b.n	800b070 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ac3c:	4b4c      	ldr	r3, [pc, #304]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800ac3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac40:	f003 0302 	and.w	r3, r3, #2
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d0f0      	beq.n	800ac2a <HAL_RCC_OscConfig+0x35e>
 800ac48:	e018      	b.n	800ac7c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ac4a:	4b49      	ldr	r3, [pc, #292]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800ac4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac4e:	4a48      	ldr	r2, [pc, #288]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800ac50:	f023 0301 	bic.w	r3, r3, #1
 800ac54:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac56:	f7f9 fad1 	bl	80041fc <HAL_GetTick>
 800ac5a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ac5c:	e008      	b.n	800ac70 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ac5e:	f7f9 facd 	bl	80041fc <HAL_GetTick>
 800ac62:	4602      	mov	r2, r0
 800ac64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac66:	1ad3      	subs	r3, r2, r3
 800ac68:	2b02      	cmp	r3, #2
 800ac6a:	d901      	bls.n	800ac70 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800ac6c:	2303      	movs	r3, #3
 800ac6e:	e1ff      	b.n	800b070 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ac70:	4b3f      	ldr	r3, [pc, #252]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800ac72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac74:	f003 0302 	and.w	r3, r3, #2
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d1f0      	bne.n	800ac5e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f003 0320 	and.w	r3, r3, #32
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d036      	beq.n	800acf6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	699b      	ldr	r3, [r3, #24]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d019      	beq.n	800acc4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ac90:	4b37      	ldr	r3, [pc, #220]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4a36      	ldr	r2, [pc, #216]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800ac96:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ac9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ac9c:	f7f9 faae 	bl	80041fc <HAL_GetTick>
 800aca0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aca2:	e008      	b.n	800acb6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aca4:	f7f9 faaa 	bl	80041fc <HAL_GetTick>
 800aca8:	4602      	mov	r2, r0
 800acaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acac:	1ad3      	subs	r3, r2, r3
 800acae:	2b02      	cmp	r3, #2
 800acb0:	d901      	bls.n	800acb6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800acb2:	2303      	movs	r3, #3
 800acb4:	e1dc      	b.n	800b070 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800acb6:	4b2e      	ldr	r3, [pc, #184]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d0f0      	beq.n	800aca4 <HAL_RCC_OscConfig+0x3d8>
 800acc2:	e018      	b.n	800acf6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800acc4:	4b2a      	ldr	r3, [pc, #168]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a29      	ldr	r2, [pc, #164]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800acca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800acce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800acd0:	f7f9 fa94 	bl	80041fc <HAL_GetTick>
 800acd4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800acd6:	e008      	b.n	800acea <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800acd8:	f7f9 fa90 	bl	80041fc <HAL_GetTick>
 800acdc:	4602      	mov	r2, r0
 800acde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace0:	1ad3      	subs	r3, r2, r3
 800ace2:	2b02      	cmp	r3, #2
 800ace4:	d901      	bls.n	800acea <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800ace6:	2303      	movs	r3, #3
 800ace8:	e1c2      	b.n	800b070 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800acea:	4b21      	ldr	r3, [pc, #132]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d1f0      	bne.n	800acd8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f003 0304 	and.w	r3, r3, #4
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	f000 8086 	beq.w	800ae10 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ad04:	4b1b      	ldr	r3, [pc, #108]	@ (800ad74 <HAL_RCC_OscConfig+0x4a8>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4a1a      	ldr	r2, [pc, #104]	@ (800ad74 <HAL_RCC_OscConfig+0x4a8>)
 800ad0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ad10:	f7f9 fa74 	bl	80041fc <HAL_GetTick>
 800ad14:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad16:	e008      	b.n	800ad2a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ad18:	f7f9 fa70 	bl	80041fc <HAL_GetTick>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad20:	1ad3      	subs	r3, r2, r3
 800ad22:	2b64      	cmp	r3, #100	@ 0x64
 800ad24:	d901      	bls.n	800ad2a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800ad26:	2303      	movs	r3, #3
 800ad28:	e1a2      	b.n	800b070 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad2a:	4b12      	ldr	r3, [pc, #72]	@ (800ad74 <HAL_RCC_OscConfig+0x4a8>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d0f0      	beq.n	800ad18 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	689b      	ldr	r3, [r3, #8]
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d106      	bne.n	800ad4c <HAL_RCC_OscConfig+0x480>
 800ad3e:	4b0c      	ldr	r3, [pc, #48]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800ad40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad42:	4a0b      	ldr	r2, [pc, #44]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800ad44:	f043 0301 	orr.w	r3, r3, #1
 800ad48:	6713      	str	r3, [r2, #112]	@ 0x70
 800ad4a:	e032      	b.n	800adb2 <HAL_RCC_OscConfig+0x4e6>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	689b      	ldr	r3, [r3, #8]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d111      	bne.n	800ad78 <HAL_RCC_OscConfig+0x4ac>
 800ad54:	4b06      	ldr	r3, [pc, #24]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800ad56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad58:	4a05      	ldr	r2, [pc, #20]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800ad5a:	f023 0301 	bic.w	r3, r3, #1
 800ad5e:	6713      	str	r3, [r2, #112]	@ 0x70
 800ad60:	4b03      	ldr	r3, [pc, #12]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800ad62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad64:	4a02      	ldr	r2, [pc, #8]	@ (800ad70 <HAL_RCC_OscConfig+0x4a4>)
 800ad66:	f023 0304 	bic.w	r3, r3, #4
 800ad6a:	6713      	str	r3, [r2, #112]	@ 0x70
 800ad6c:	e021      	b.n	800adb2 <HAL_RCC_OscConfig+0x4e6>
 800ad6e:	bf00      	nop
 800ad70:	58024400 	.word	0x58024400
 800ad74:	58024800 	.word	0x58024800
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	689b      	ldr	r3, [r3, #8]
 800ad7c:	2b05      	cmp	r3, #5
 800ad7e:	d10c      	bne.n	800ad9a <HAL_RCC_OscConfig+0x4ce>
 800ad80:	4b83      	ldr	r3, [pc, #524]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800ad82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad84:	4a82      	ldr	r2, [pc, #520]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800ad86:	f043 0304 	orr.w	r3, r3, #4
 800ad8a:	6713      	str	r3, [r2, #112]	@ 0x70
 800ad8c:	4b80      	ldr	r3, [pc, #512]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800ad8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad90:	4a7f      	ldr	r2, [pc, #508]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800ad92:	f043 0301 	orr.w	r3, r3, #1
 800ad96:	6713      	str	r3, [r2, #112]	@ 0x70
 800ad98:	e00b      	b.n	800adb2 <HAL_RCC_OscConfig+0x4e6>
 800ad9a:	4b7d      	ldr	r3, [pc, #500]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800ad9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad9e:	4a7c      	ldr	r2, [pc, #496]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800ada0:	f023 0301 	bic.w	r3, r3, #1
 800ada4:	6713      	str	r3, [r2, #112]	@ 0x70
 800ada6:	4b7a      	ldr	r3, [pc, #488]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800ada8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adaa:	4a79      	ldr	r2, [pc, #484]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800adac:	f023 0304 	bic.w	r3, r3, #4
 800adb0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	689b      	ldr	r3, [r3, #8]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d015      	beq.n	800ade6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adba:	f7f9 fa1f 	bl	80041fc <HAL_GetTick>
 800adbe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800adc0:	e00a      	b.n	800add8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800adc2:	f7f9 fa1b 	bl	80041fc <HAL_GetTick>
 800adc6:	4602      	mov	r2, r0
 800adc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adca:	1ad3      	subs	r3, r2, r3
 800adcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800add0:	4293      	cmp	r3, r2
 800add2:	d901      	bls.n	800add8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800add4:	2303      	movs	r3, #3
 800add6:	e14b      	b.n	800b070 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800add8:	4b6d      	ldr	r3, [pc, #436]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800adda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800addc:	f003 0302 	and.w	r3, r3, #2
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d0ee      	beq.n	800adc2 <HAL_RCC_OscConfig+0x4f6>
 800ade4:	e014      	b.n	800ae10 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ade6:	f7f9 fa09 	bl	80041fc <HAL_GetTick>
 800adea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800adec:	e00a      	b.n	800ae04 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800adee:	f7f9 fa05 	bl	80041fc <HAL_GetTick>
 800adf2:	4602      	mov	r2, r0
 800adf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf6:	1ad3      	subs	r3, r2, r3
 800adf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d901      	bls.n	800ae04 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800ae00:	2303      	movs	r3, #3
 800ae02:	e135      	b.n	800b070 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ae04:	4b62      	ldr	r3, [pc, #392]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800ae06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae08:	f003 0302 	and.w	r3, r3, #2
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d1ee      	bne.n	800adee <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	f000 812a 	beq.w	800b06e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ae1a:	4b5d      	ldr	r3, [pc, #372]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800ae1c:	691b      	ldr	r3, [r3, #16]
 800ae1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ae22:	2b18      	cmp	r3, #24
 800ae24:	f000 80ba 	beq.w	800af9c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae2c:	2b02      	cmp	r3, #2
 800ae2e:	f040 8095 	bne.w	800af5c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae32:	4b57      	ldr	r3, [pc, #348]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4a56      	ldr	r2, [pc, #344]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800ae38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ae3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae3e:	f7f9 f9dd 	bl	80041fc <HAL_GetTick>
 800ae42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ae44:	e008      	b.n	800ae58 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae46:	f7f9 f9d9 	bl	80041fc <HAL_GetTick>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae4e:	1ad3      	subs	r3, r2, r3
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d901      	bls.n	800ae58 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800ae54:	2303      	movs	r3, #3
 800ae56:	e10b      	b.n	800b070 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ae58:	4b4d      	ldr	r3, [pc, #308]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d1f0      	bne.n	800ae46 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ae64:	4b4a      	ldr	r3, [pc, #296]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800ae66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ae68:	4b4a      	ldr	r3, [pc, #296]	@ (800af94 <HAL_RCC_OscConfig+0x6c8>)
 800ae6a:	4013      	ands	r3, r2
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ae74:	0112      	lsls	r2, r2, #4
 800ae76:	430a      	orrs	r2, r1
 800ae78:	4945      	ldr	r1, [pc, #276]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	628b      	str	r3, [r1, #40]	@ 0x28
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae82:	3b01      	subs	r3, #1
 800ae84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae8c:	3b01      	subs	r3, #1
 800ae8e:	025b      	lsls	r3, r3, #9
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	431a      	orrs	r2, r3
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae98:	3b01      	subs	r3, #1
 800ae9a:	041b      	lsls	r3, r3, #16
 800ae9c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800aea0:	431a      	orrs	r2, r3
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aea6:	3b01      	subs	r3, #1
 800aea8:	061b      	lsls	r3, r3, #24
 800aeaa:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800aeae:	4938      	ldr	r1, [pc, #224]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800aeb4:	4b36      	ldr	r3, [pc, #216]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800aeb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeb8:	4a35      	ldr	r2, [pc, #212]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800aeba:	f023 0301 	bic.w	r3, r3, #1
 800aebe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800aec0:	4b33      	ldr	r3, [pc, #204]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800aec2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aec4:	4b34      	ldr	r3, [pc, #208]	@ (800af98 <HAL_RCC_OscConfig+0x6cc>)
 800aec6:	4013      	ands	r3, r2
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800aecc:	00d2      	lsls	r2, r2, #3
 800aece:	4930      	ldr	r1, [pc, #192]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800aed0:	4313      	orrs	r3, r2
 800aed2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800aed4:	4b2e      	ldr	r3, [pc, #184]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800aed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aed8:	f023 020c 	bic.w	r2, r3, #12
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aee0:	492b      	ldr	r1, [pc, #172]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800aee2:	4313      	orrs	r3, r2
 800aee4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800aee6:	4b2a      	ldr	r3, [pc, #168]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800aee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeea:	f023 0202 	bic.w	r2, r3, #2
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aef2:	4927      	ldr	r1, [pc, #156]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800aef4:	4313      	orrs	r3, r2
 800aef6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800aef8:	4b25      	ldr	r3, [pc, #148]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800aefa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aefc:	4a24      	ldr	r2, [pc, #144]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800aefe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800af02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af04:	4b22      	ldr	r3, [pc, #136]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800af06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af08:	4a21      	ldr	r2, [pc, #132]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800af0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800af0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800af10:	4b1f      	ldr	r3, [pc, #124]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800af12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af14:	4a1e      	ldr	r2, [pc, #120]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800af16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800af1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800af1c:	4b1c      	ldr	r3, [pc, #112]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800af1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af20:	4a1b      	ldr	r2, [pc, #108]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800af22:	f043 0301 	orr.w	r3, r3, #1
 800af26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800af28:	4b19      	ldr	r3, [pc, #100]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a18      	ldr	r2, [pc, #96]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800af2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800af32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af34:	f7f9 f962 	bl	80041fc <HAL_GetTick>
 800af38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800af3a:	e008      	b.n	800af4e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af3c:	f7f9 f95e 	bl	80041fc <HAL_GetTick>
 800af40:	4602      	mov	r2, r0
 800af42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af44:	1ad3      	subs	r3, r2, r3
 800af46:	2b02      	cmp	r3, #2
 800af48:	d901      	bls.n	800af4e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800af4a:	2303      	movs	r3, #3
 800af4c:	e090      	b.n	800b070 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800af4e:	4b10      	ldr	r3, [pc, #64]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af56:	2b00      	cmp	r3, #0
 800af58:	d0f0      	beq.n	800af3c <HAL_RCC_OscConfig+0x670>
 800af5a:	e088      	b.n	800b06e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af5c:	4b0c      	ldr	r3, [pc, #48]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4a0b      	ldr	r2, [pc, #44]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800af62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800af66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af68:	f7f9 f948 	bl	80041fc <HAL_GetTick>
 800af6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800af6e:	e008      	b.n	800af82 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af70:	f7f9 f944 	bl	80041fc <HAL_GetTick>
 800af74:	4602      	mov	r2, r0
 800af76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af78:	1ad3      	subs	r3, r2, r3
 800af7a:	2b02      	cmp	r3, #2
 800af7c:	d901      	bls.n	800af82 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800af7e:	2303      	movs	r3, #3
 800af80:	e076      	b.n	800b070 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800af82:	4b03      	ldr	r3, [pc, #12]	@ (800af90 <HAL_RCC_OscConfig+0x6c4>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d1f0      	bne.n	800af70 <HAL_RCC_OscConfig+0x6a4>
 800af8e:	e06e      	b.n	800b06e <HAL_RCC_OscConfig+0x7a2>
 800af90:	58024400 	.word	0x58024400
 800af94:	fffffc0c 	.word	0xfffffc0c
 800af98:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800af9c:	4b36      	ldr	r3, [pc, #216]	@ (800b078 <HAL_RCC_OscConfig+0x7ac>)
 800af9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afa0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800afa2:	4b35      	ldr	r3, [pc, #212]	@ (800b078 <HAL_RCC_OscConfig+0x7ac>)
 800afa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afa6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afac:	2b01      	cmp	r3, #1
 800afae:	d031      	beq.n	800b014 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	f003 0203 	and.w	r2, r3, #3
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800afba:	429a      	cmp	r2, r3
 800afbc:	d12a      	bne.n	800b014 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	091b      	lsrs	r3, r3, #4
 800afc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800afca:	429a      	cmp	r2, r3
 800afcc:	d122      	bne.n	800b014 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afd8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800afda:	429a      	cmp	r2, r3
 800afdc:	d11a      	bne.n	800b014 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	0a5b      	lsrs	r3, r3, #9
 800afe2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800afec:	429a      	cmp	r2, r3
 800afee:	d111      	bne.n	800b014 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	0c1b      	lsrs	r3, r3, #16
 800aff4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800affc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800affe:	429a      	cmp	r2, r3
 800b000:	d108      	bne.n	800b014 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	0e1b      	lsrs	r3, r3, #24
 800b006:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b00e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b010:	429a      	cmp	r2, r3
 800b012:	d001      	beq.n	800b018 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800b014:	2301      	movs	r3, #1
 800b016:	e02b      	b.n	800b070 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b018:	4b17      	ldr	r3, [pc, #92]	@ (800b078 <HAL_RCC_OscConfig+0x7ac>)
 800b01a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b01c:	08db      	lsrs	r3, r3, #3
 800b01e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b022:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b028:	693a      	ldr	r2, [r7, #16]
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d01f      	beq.n	800b06e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b02e:	4b12      	ldr	r3, [pc, #72]	@ (800b078 <HAL_RCC_OscConfig+0x7ac>)
 800b030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b032:	4a11      	ldr	r2, [pc, #68]	@ (800b078 <HAL_RCC_OscConfig+0x7ac>)
 800b034:	f023 0301 	bic.w	r3, r3, #1
 800b038:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b03a:	f7f9 f8df 	bl	80041fc <HAL_GetTick>
 800b03e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b040:	bf00      	nop
 800b042:	f7f9 f8db 	bl	80041fc <HAL_GetTick>
 800b046:	4602      	mov	r2, r0
 800b048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d0f9      	beq.n	800b042 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b04e:	4b0a      	ldr	r3, [pc, #40]	@ (800b078 <HAL_RCC_OscConfig+0x7ac>)
 800b050:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b052:	4b0a      	ldr	r3, [pc, #40]	@ (800b07c <HAL_RCC_OscConfig+0x7b0>)
 800b054:	4013      	ands	r3, r2
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b05a:	00d2      	lsls	r2, r2, #3
 800b05c:	4906      	ldr	r1, [pc, #24]	@ (800b078 <HAL_RCC_OscConfig+0x7ac>)
 800b05e:	4313      	orrs	r3, r2
 800b060:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b062:	4b05      	ldr	r3, [pc, #20]	@ (800b078 <HAL_RCC_OscConfig+0x7ac>)
 800b064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b066:	4a04      	ldr	r2, [pc, #16]	@ (800b078 <HAL_RCC_OscConfig+0x7ac>)
 800b068:	f043 0301 	orr.w	r3, r3, #1
 800b06c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b06e:	2300      	movs	r3, #0
}
 800b070:	4618      	mov	r0, r3
 800b072:	3730      	adds	r7, #48	@ 0x30
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}
 800b078:	58024400 	.word	0x58024400
 800b07c:	ffff0007 	.word	0xffff0007

0800b080 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b086      	sub	sp, #24
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d101      	bne.n	800b094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b090:	2301      	movs	r3, #1
 800b092:	e19c      	b.n	800b3ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b094:	4b8a      	ldr	r3, [pc, #552]	@ (800b2c0 <HAL_RCC_ClockConfig+0x240>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f003 030f 	and.w	r3, r3, #15
 800b09c:	683a      	ldr	r2, [r7, #0]
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d910      	bls.n	800b0c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b0a2:	4b87      	ldr	r3, [pc, #540]	@ (800b2c0 <HAL_RCC_ClockConfig+0x240>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f023 020f 	bic.w	r2, r3, #15
 800b0aa:	4985      	ldr	r1, [pc, #532]	@ (800b2c0 <HAL_RCC_ClockConfig+0x240>)
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b0b2:	4b83      	ldr	r3, [pc, #524]	@ (800b2c0 <HAL_RCC_ClockConfig+0x240>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f003 030f 	and.w	r3, r3, #15
 800b0ba:	683a      	ldr	r2, [r7, #0]
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d001      	beq.n	800b0c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e184      	b.n	800b3ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f003 0304 	and.w	r3, r3, #4
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d010      	beq.n	800b0f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	691a      	ldr	r2, [r3, #16]
 800b0d4:	4b7b      	ldr	r3, [pc, #492]	@ (800b2c4 <HAL_RCC_ClockConfig+0x244>)
 800b0d6:	699b      	ldr	r3, [r3, #24]
 800b0d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d908      	bls.n	800b0f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b0e0:	4b78      	ldr	r3, [pc, #480]	@ (800b2c4 <HAL_RCC_ClockConfig+0x244>)
 800b0e2:	699b      	ldr	r3, [r3, #24]
 800b0e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	691b      	ldr	r3, [r3, #16]
 800b0ec:	4975      	ldr	r1, [pc, #468]	@ (800b2c4 <HAL_RCC_ClockConfig+0x244>)
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f003 0308 	and.w	r3, r3, #8
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d010      	beq.n	800b120 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	695a      	ldr	r2, [r3, #20]
 800b102:	4b70      	ldr	r3, [pc, #448]	@ (800b2c4 <HAL_RCC_ClockConfig+0x244>)
 800b104:	69db      	ldr	r3, [r3, #28]
 800b106:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d908      	bls.n	800b120 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b10e:	4b6d      	ldr	r3, [pc, #436]	@ (800b2c4 <HAL_RCC_ClockConfig+0x244>)
 800b110:	69db      	ldr	r3, [r3, #28]
 800b112:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	695b      	ldr	r3, [r3, #20]
 800b11a:	496a      	ldr	r1, [pc, #424]	@ (800b2c4 <HAL_RCC_ClockConfig+0x244>)
 800b11c:	4313      	orrs	r3, r2
 800b11e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f003 0310 	and.w	r3, r3, #16
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d010      	beq.n	800b14e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	699a      	ldr	r2, [r3, #24]
 800b130:	4b64      	ldr	r3, [pc, #400]	@ (800b2c4 <HAL_RCC_ClockConfig+0x244>)
 800b132:	69db      	ldr	r3, [r3, #28]
 800b134:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b138:	429a      	cmp	r2, r3
 800b13a:	d908      	bls.n	800b14e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b13c:	4b61      	ldr	r3, [pc, #388]	@ (800b2c4 <HAL_RCC_ClockConfig+0x244>)
 800b13e:	69db      	ldr	r3, [r3, #28]
 800b140:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	699b      	ldr	r3, [r3, #24]
 800b148:	495e      	ldr	r1, [pc, #376]	@ (800b2c4 <HAL_RCC_ClockConfig+0x244>)
 800b14a:	4313      	orrs	r3, r2
 800b14c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f003 0320 	and.w	r3, r3, #32
 800b156:	2b00      	cmp	r3, #0
 800b158:	d010      	beq.n	800b17c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	69da      	ldr	r2, [r3, #28]
 800b15e:	4b59      	ldr	r3, [pc, #356]	@ (800b2c4 <HAL_RCC_ClockConfig+0x244>)
 800b160:	6a1b      	ldr	r3, [r3, #32]
 800b162:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b166:	429a      	cmp	r2, r3
 800b168:	d908      	bls.n	800b17c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b16a:	4b56      	ldr	r3, [pc, #344]	@ (800b2c4 <HAL_RCC_ClockConfig+0x244>)
 800b16c:	6a1b      	ldr	r3, [r3, #32]
 800b16e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	69db      	ldr	r3, [r3, #28]
 800b176:	4953      	ldr	r1, [pc, #332]	@ (800b2c4 <HAL_RCC_ClockConfig+0x244>)
 800b178:	4313      	orrs	r3, r2
 800b17a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f003 0302 	and.w	r3, r3, #2
 800b184:	2b00      	cmp	r3, #0
 800b186:	d010      	beq.n	800b1aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	68da      	ldr	r2, [r3, #12]
 800b18c:	4b4d      	ldr	r3, [pc, #308]	@ (800b2c4 <HAL_RCC_ClockConfig+0x244>)
 800b18e:	699b      	ldr	r3, [r3, #24]
 800b190:	f003 030f 	and.w	r3, r3, #15
 800b194:	429a      	cmp	r2, r3
 800b196:	d908      	bls.n	800b1aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b198:	4b4a      	ldr	r3, [pc, #296]	@ (800b2c4 <HAL_RCC_ClockConfig+0x244>)
 800b19a:	699b      	ldr	r3, [r3, #24]
 800b19c:	f023 020f 	bic.w	r2, r3, #15
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	4947      	ldr	r1, [pc, #284]	@ (800b2c4 <HAL_RCC_ClockConfig+0x244>)
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f003 0301 	and.w	r3, r3, #1
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d055      	beq.n	800b262 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b1b6:	4b43      	ldr	r3, [pc, #268]	@ (800b2c4 <HAL_RCC_ClockConfig+0x244>)
 800b1b8:	699b      	ldr	r3, [r3, #24]
 800b1ba:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	4940      	ldr	r1, [pc, #256]	@ (800b2c4 <HAL_RCC_ClockConfig+0x244>)
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	2b02      	cmp	r3, #2
 800b1ce:	d107      	bne.n	800b1e0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b1d0:	4b3c      	ldr	r3, [pc, #240]	@ (800b2c4 <HAL_RCC_ClockConfig+0x244>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d121      	bne.n	800b220 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	e0f6      	b.n	800b3ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	2b03      	cmp	r3, #3
 800b1e6:	d107      	bne.n	800b1f8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b1e8:	4b36      	ldr	r3, [pc, #216]	@ (800b2c4 <HAL_RCC_ClockConfig+0x244>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d115      	bne.n	800b220 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	e0ea      	b.n	800b3ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d107      	bne.n	800b210 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b200:	4b30      	ldr	r3, [pc, #192]	@ (800b2c4 <HAL_RCC_ClockConfig+0x244>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d109      	bne.n	800b220 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b20c:	2301      	movs	r3, #1
 800b20e:	e0de      	b.n	800b3ce <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b210:	4b2c      	ldr	r3, [pc, #176]	@ (800b2c4 <HAL_RCC_ClockConfig+0x244>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f003 0304 	and.w	r3, r3, #4
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d101      	bne.n	800b220 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b21c:	2301      	movs	r3, #1
 800b21e:	e0d6      	b.n	800b3ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b220:	4b28      	ldr	r3, [pc, #160]	@ (800b2c4 <HAL_RCC_ClockConfig+0x244>)
 800b222:	691b      	ldr	r3, [r3, #16]
 800b224:	f023 0207 	bic.w	r2, r3, #7
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	4925      	ldr	r1, [pc, #148]	@ (800b2c4 <HAL_RCC_ClockConfig+0x244>)
 800b22e:	4313      	orrs	r3, r2
 800b230:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b232:	f7f8 ffe3 	bl	80041fc <HAL_GetTick>
 800b236:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b238:	e00a      	b.n	800b250 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b23a:	f7f8 ffdf 	bl	80041fc <HAL_GetTick>
 800b23e:	4602      	mov	r2, r0
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	1ad3      	subs	r3, r2, r3
 800b244:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b248:	4293      	cmp	r3, r2
 800b24a:	d901      	bls.n	800b250 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b24c:	2303      	movs	r3, #3
 800b24e:	e0be      	b.n	800b3ce <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b250:	4b1c      	ldr	r3, [pc, #112]	@ (800b2c4 <HAL_RCC_ClockConfig+0x244>)
 800b252:	691b      	ldr	r3, [r3, #16]
 800b254:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	00db      	lsls	r3, r3, #3
 800b25e:	429a      	cmp	r2, r3
 800b260:	d1eb      	bne.n	800b23a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f003 0302 	and.w	r3, r3, #2
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d010      	beq.n	800b290 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	68da      	ldr	r2, [r3, #12]
 800b272:	4b14      	ldr	r3, [pc, #80]	@ (800b2c4 <HAL_RCC_ClockConfig+0x244>)
 800b274:	699b      	ldr	r3, [r3, #24]
 800b276:	f003 030f 	and.w	r3, r3, #15
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d208      	bcs.n	800b290 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b27e:	4b11      	ldr	r3, [pc, #68]	@ (800b2c4 <HAL_RCC_ClockConfig+0x244>)
 800b280:	699b      	ldr	r3, [r3, #24]
 800b282:	f023 020f 	bic.w	r2, r3, #15
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	68db      	ldr	r3, [r3, #12]
 800b28a:	490e      	ldr	r1, [pc, #56]	@ (800b2c4 <HAL_RCC_ClockConfig+0x244>)
 800b28c:	4313      	orrs	r3, r2
 800b28e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b290:	4b0b      	ldr	r3, [pc, #44]	@ (800b2c0 <HAL_RCC_ClockConfig+0x240>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f003 030f 	and.w	r3, r3, #15
 800b298:	683a      	ldr	r2, [r7, #0]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d214      	bcs.n	800b2c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b29e:	4b08      	ldr	r3, [pc, #32]	@ (800b2c0 <HAL_RCC_ClockConfig+0x240>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f023 020f 	bic.w	r2, r3, #15
 800b2a6:	4906      	ldr	r1, [pc, #24]	@ (800b2c0 <HAL_RCC_ClockConfig+0x240>)
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2ae:	4b04      	ldr	r3, [pc, #16]	@ (800b2c0 <HAL_RCC_ClockConfig+0x240>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f003 030f 	and.w	r3, r3, #15
 800b2b6:	683a      	ldr	r2, [r7, #0]
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d005      	beq.n	800b2c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	e086      	b.n	800b3ce <HAL_RCC_ClockConfig+0x34e>
 800b2c0:	52002000 	.word	0x52002000
 800b2c4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f003 0304 	and.w	r3, r3, #4
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d010      	beq.n	800b2f6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	691a      	ldr	r2, [r3, #16]
 800b2d8:	4b3f      	ldr	r3, [pc, #252]	@ (800b3d8 <HAL_RCC_ClockConfig+0x358>)
 800b2da:	699b      	ldr	r3, [r3, #24]
 800b2dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d208      	bcs.n	800b2f6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b2e4:	4b3c      	ldr	r3, [pc, #240]	@ (800b3d8 <HAL_RCC_ClockConfig+0x358>)
 800b2e6:	699b      	ldr	r3, [r3, #24]
 800b2e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	691b      	ldr	r3, [r3, #16]
 800b2f0:	4939      	ldr	r1, [pc, #228]	@ (800b3d8 <HAL_RCC_ClockConfig+0x358>)
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f003 0308 	and.w	r3, r3, #8
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d010      	beq.n	800b324 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	695a      	ldr	r2, [r3, #20]
 800b306:	4b34      	ldr	r3, [pc, #208]	@ (800b3d8 <HAL_RCC_ClockConfig+0x358>)
 800b308:	69db      	ldr	r3, [r3, #28]
 800b30a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b30e:	429a      	cmp	r2, r3
 800b310:	d208      	bcs.n	800b324 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b312:	4b31      	ldr	r3, [pc, #196]	@ (800b3d8 <HAL_RCC_ClockConfig+0x358>)
 800b314:	69db      	ldr	r3, [r3, #28]
 800b316:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	695b      	ldr	r3, [r3, #20]
 800b31e:	492e      	ldr	r1, [pc, #184]	@ (800b3d8 <HAL_RCC_ClockConfig+0x358>)
 800b320:	4313      	orrs	r3, r2
 800b322:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f003 0310 	and.w	r3, r3, #16
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d010      	beq.n	800b352 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	699a      	ldr	r2, [r3, #24]
 800b334:	4b28      	ldr	r3, [pc, #160]	@ (800b3d8 <HAL_RCC_ClockConfig+0x358>)
 800b336:	69db      	ldr	r3, [r3, #28]
 800b338:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d208      	bcs.n	800b352 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b340:	4b25      	ldr	r3, [pc, #148]	@ (800b3d8 <HAL_RCC_ClockConfig+0x358>)
 800b342:	69db      	ldr	r3, [r3, #28]
 800b344:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	699b      	ldr	r3, [r3, #24]
 800b34c:	4922      	ldr	r1, [pc, #136]	@ (800b3d8 <HAL_RCC_ClockConfig+0x358>)
 800b34e:	4313      	orrs	r3, r2
 800b350:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f003 0320 	and.w	r3, r3, #32
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d010      	beq.n	800b380 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	69da      	ldr	r2, [r3, #28]
 800b362:	4b1d      	ldr	r3, [pc, #116]	@ (800b3d8 <HAL_RCC_ClockConfig+0x358>)
 800b364:	6a1b      	ldr	r3, [r3, #32]
 800b366:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d208      	bcs.n	800b380 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b36e:	4b1a      	ldr	r3, [pc, #104]	@ (800b3d8 <HAL_RCC_ClockConfig+0x358>)
 800b370:	6a1b      	ldr	r3, [r3, #32]
 800b372:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	69db      	ldr	r3, [r3, #28]
 800b37a:	4917      	ldr	r1, [pc, #92]	@ (800b3d8 <HAL_RCC_ClockConfig+0x358>)
 800b37c:	4313      	orrs	r3, r2
 800b37e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b380:	f000 f89e 	bl	800b4c0 <HAL_RCC_GetSysClockFreq>
 800b384:	4602      	mov	r2, r0
 800b386:	4b14      	ldr	r3, [pc, #80]	@ (800b3d8 <HAL_RCC_ClockConfig+0x358>)
 800b388:	699b      	ldr	r3, [r3, #24]
 800b38a:	0a1b      	lsrs	r3, r3, #8
 800b38c:	f003 030f 	and.w	r3, r3, #15
 800b390:	4912      	ldr	r1, [pc, #72]	@ (800b3dc <HAL_RCC_ClockConfig+0x35c>)
 800b392:	5ccb      	ldrb	r3, [r1, r3]
 800b394:	f003 031f 	and.w	r3, r3, #31
 800b398:	fa22 f303 	lsr.w	r3, r2, r3
 800b39c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b39e:	4b0e      	ldr	r3, [pc, #56]	@ (800b3d8 <HAL_RCC_ClockConfig+0x358>)
 800b3a0:	699b      	ldr	r3, [r3, #24]
 800b3a2:	f003 030f 	and.w	r3, r3, #15
 800b3a6:	4a0d      	ldr	r2, [pc, #52]	@ (800b3dc <HAL_RCC_ClockConfig+0x35c>)
 800b3a8:	5cd3      	ldrb	r3, [r2, r3]
 800b3aa:	f003 031f 	and.w	r3, r3, #31
 800b3ae:	693a      	ldr	r2, [r7, #16]
 800b3b0:	fa22 f303 	lsr.w	r3, r2, r3
 800b3b4:	4a0a      	ldr	r2, [pc, #40]	@ (800b3e0 <HAL_RCC_ClockConfig+0x360>)
 800b3b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b3b8:	4a0a      	ldr	r2, [pc, #40]	@ (800b3e4 <HAL_RCC_ClockConfig+0x364>)
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b3be:	4b0a      	ldr	r3, [pc, #40]	@ (800b3e8 <HAL_RCC_ClockConfig+0x368>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7f8 fed0 	bl	8004168 <HAL_InitTick>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b3cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3718      	adds	r7, #24
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	bf00      	nop
 800b3d8:	58024400 	.word	0x58024400
 800b3dc:	08020354 	.word	0x08020354
 800b3e0:	24000104 	.word	0x24000104
 800b3e4:	24000100 	.word	0x24000100
 800b3e8:	24000108 	.word	0x24000108

0800b3ec <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b08c      	sub	sp, #48	@ 0x30
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	60b9      	str	r1, [r7, #8]
 800b3f6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d12a      	bne.n	800b454 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b3fe:	4b2d      	ldr	r3, [pc, #180]	@ (800b4b4 <HAL_RCC_MCOConfig+0xc8>)
 800b400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b404:	4a2b      	ldr	r2, [pc, #172]	@ (800b4b4 <HAL_RCC_MCOConfig+0xc8>)
 800b406:	f043 0301 	orr.w	r3, r3, #1
 800b40a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b40e:	4b29      	ldr	r3, [pc, #164]	@ (800b4b4 <HAL_RCC_MCOConfig+0xc8>)
 800b410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b414:	f003 0301 	and.w	r3, r3, #1
 800b418:	61bb      	str	r3, [r7, #24]
 800b41a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b41c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b422:	2302      	movs	r3, #2
 800b424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b426:	2303      	movs	r3, #3
 800b428:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b42a:	2300      	movs	r3, #0
 800b42c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b42e:	2300      	movs	r3, #0
 800b430:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b432:	f107 031c 	add.w	r3, r7, #28
 800b436:	4619      	mov	r1, r3
 800b438:	481f      	ldr	r0, [pc, #124]	@ (800b4b8 <HAL_RCC_MCOConfig+0xcc>)
 800b43a:	f7fd fc29 	bl	8008c90 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b43e:	4b1d      	ldr	r3, [pc, #116]	@ (800b4b4 <HAL_RCC_MCOConfig+0xc8>)
 800b440:	691b      	ldr	r3, [r3, #16]
 800b442:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 800b446:	68b9      	ldr	r1, [r7, #8]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	430b      	orrs	r3, r1
 800b44c:	4919      	ldr	r1, [pc, #100]	@ (800b4b4 <HAL_RCC_MCOConfig+0xc8>)
 800b44e:	4313      	orrs	r3, r2
 800b450:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800b452:	e02a      	b.n	800b4aa <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800b454:	4b17      	ldr	r3, [pc, #92]	@ (800b4b4 <HAL_RCC_MCOConfig+0xc8>)
 800b456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b45a:	4a16      	ldr	r2, [pc, #88]	@ (800b4b4 <HAL_RCC_MCOConfig+0xc8>)
 800b45c:	f043 0304 	orr.w	r3, r3, #4
 800b460:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b464:	4b13      	ldr	r3, [pc, #76]	@ (800b4b4 <HAL_RCC_MCOConfig+0xc8>)
 800b466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b46a:	f003 0304 	and.w	r3, r3, #4
 800b46e:	617b      	str	r3, [r7, #20]
 800b470:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b472:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b478:	2302      	movs	r3, #2
 800b47a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b47c:	2303      	movs	r3, #3
 800b47e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b480:	2300      	movs	r3, #0
 800b482:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b484:	2300      	movs	r3, #0
 800b486:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b488:	f107 031c 	add.w	r3, r7, #28
 800b48c:	4619      	mov	r1, r3
 800b48e:	480b      	ldr	r0, [pc, #44]	@ (800b4bc <HAL_RCC_MCOConfig+0xd0>)
 800b490:	f7fd fbfe 	bl	8008c90 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b494:	4b07      	ldr	r3, [pc, #28]	@ (800b4b4 <HAL_RCC_MCOConfig+0xc8>)
 800b496:	691b      	ldr	r3, [r3, #16]
 800b498:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	01d9      	lsls	r1, r3, #7
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	430b      	orrs	r3, r1
 800b4a4:	4903      	ldr	r1, [pc, #12]	@ (800b4b4 <HAL_RCC_MCOConfig+0xc8>)
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	610b      	str	r3, [r1, #16]
}
 800b4aa:	bf00      	nop
 800b4ac:	3730      	adds	r7, #48	@ 0x30
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	58024400 	.word	0x58024400
 800b4b8:	58020000 	.word	0x58020000
 800b4bc:	58020800 	.word	0x58020800

0800b4c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b089      	sub	sp, #36	@ 0x24
 800b4c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b4c6:	4bb3      	ldr	r3, [pc, #716]	@ (800b794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4c8:	691b      	ldr	r3, [r3, #16]
 800b4ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b4ce:	2b18      	cmp	r3, #24
 800b4d0:	f200 8155 	bhi.w	800b77e <HAL_RCC_GetSysClockFreq+0x2be>
 800b4d4:	a201      	add	r2, pc, #4	@ (adr r2, 800b4dc <HAL_RCC_GetSysClockFreq+0x1c>)
 800b4d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4da:	bf00      	nop
 800b4dc:	0800b541 	.word	0x0800b541
 800b4e0:	0800b77f 	.word	0x0800b77f
 800b4e4:	0800b77f 	.word	0x0800b77f
 800b4e8:	0800b77f 	.word	0x0800b77f
 800b4ec:	0800b77f 	.word	0x0800b77f
 800b4f0:	0800b77f 	.word	0x0800b77f
 800b4f4:	0800b77f 	.word	0x0800b77f
 800b4f8:	0800b77f 	.word	0x0800b77f
 800b4fc:	0800b567 	.word	0x0800b567
 800b500:	0800b77f 	.word	0x0800b77f
 800b504:	0800b77f 	.word	0x0800b77f
 800b508:	0800b77f 	.word	0x0800b77f
 800b50c:	0800b77f 	.word	0x0800b77f
 800b510:	0800b77f 	.word	0x0800b77f
 800b514:	0800b77f 	.word	0x0800b77f
 800b518:	0800b77f 	.word	0x0800b77f
 800b51c:	0800b56d 	.word	0x0800b56d
 800b520:	0800b77f 	.word	0x0800b77f
 800b524:	0800b77f 	.word	0x0800b77f
 800b528:	0800b77f 	.word	0x0800b77f
 800b52c:	0800b77f 	.word	0x0800b77f
 800b530:	0800b77f 	.word	0x0800b77f
 800b534:	0800b77f 	.word	0x0800b77f
 800b538:	0800b77f 	.word	0x0800b77f
 800b53c:	0800b573 	.word	0x0800b573
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b540:	4b94      	ldr	r3, [pc, #592]	@ (800b794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f003 0320 	and.w	r3, r3, #32
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d009      	beq.n	800b560 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b54c:	4b91      	ldr	r3, [pc, #580]	@ (800b794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	08db      	lsrs	r3, r3, #3
 800b552:	f003 0303 	and.w	r3, r3, #3
 800b556:	4a90      	ldr	r2, [pc, #576]	@ (800b798 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b558:	fa22 f303 	lsr.w	r3, r2, r3
 800b55c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b55e:	e111      	b.n	800b784 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b560:	4b8d      	ldr	r3, [pc, #564]	@ (800b798 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b562:	61bb      	str	r3, [r7, #24]
      break;
 800b564:	e10e      	b.n	800b784 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b566:	4b8d      	ldr	r3, [pc, #564]	@ (800b79c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b568:	61bb      	str	r3, [r7, #24]
      break;
 800b56a:	e10b      	b.n	800b784 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b56c:	4b8c      	ldr	r3, [pc, #560]	@ (800b7a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b56e:	61bb      	str	r3, [r7, #24]
      break;
 800b570:	e108      	b.n	800b784 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b572:	4b88      	ldr	r3, [pc, #544]	@ (800b794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b576:	f003 0303 	and.w	r3, r3, #3
 800b57a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b57c:	4b85      	ldr	r3, [pc, #532]	@ (800b794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b57e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b580:	091b      	lsrs	r3, r3, #4
 800b582:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b586:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b588:	4b82      	ldr	r3, [pc, #520]	@ (800b794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b58a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b58c:	f003 0301 	and.w	r3, r3, #1
 800b590:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b592:	4b80      	ldr	r3, [pc, #512]	@ (800b794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b596:	08db      	lsrs	r3, r3, #3
 800b598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b59c:	68fa      	ldr	r2, [r7, #12]
 800b59e:	fb02 f303 	mul.w	r3, r2, r3
 800b5a2:	ee07 3a90 	vmov	s15, r3
 800b5a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	f000 80e1 	beq.w	800b778 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	2b02      	cmp	r3, #2
 800b5ba:	f000 8083 	beq.w	800b6c4 <HAL_RCC_GetSysClockFreq+0x204>
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	2b02      	cmp	r3, #2
 800b5c2:	f200 80a1 	bhi.w	800b708 <HAL_RCC_GetSysClockFreq+0x248>
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d003      	beq.n	800b5d4 <HAL_RCC_GetSysClockFreq+0x114>
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	2b01      	cmp	r3, #1
 800b5d0:	d056      	beq.n	800b680 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b5d2:	e099      	b.n	800b708 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5d4:	4b6f      	ldr	r3, [pc, #444]	@ (800b794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f003 0320 	and.w	r3, r3, #32
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d02d      	beq.n	800b63c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5e0:	4b6c      	ldr	r3, [pc, #432]	@ (800b794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	08db      	lsrs	r3, r3, #3
 800b5e6:	f003 0303 	and.w	r3, r3, #3
 800b5ea:	4a6b      	ldr	r2, [pc, #428]	@ (800b798 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b5ec:	fa22 f303 	lsr.w	r3, r2, r3
 800b5f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	ee07 3a90 	vmov	s15, r3
 800b5f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	ee07 3a90 	vmov	s15, r3
 800b602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b60a:	4b62      	ldr	r3, [pc, #392]	@ (800b794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b60c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b60e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b612:	ee07 3a90 	vmov	s15, r3
 800b616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b61a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b61e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800b7a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b62a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b62e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b632:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b636:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b63a:	e087      	b.n	800b74c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	ee07 3a90 	vmov	s15, r3
 800b642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b646:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800b7a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b64a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b64e:	4b51      	ldr	r3, [pc, #324]	@ (800b794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b656:	ee07 3a90 	vmov	s15, r3
 800b65a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b65e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b662:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800b7a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b66a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b66e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b67a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b67e:	e065      	b.n	800b74c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	ee07 3a90 	vmov	s15, r3
 800b686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b68a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800b7ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800b68e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b692:	4b40      	ldr	r3, [pc, #256]	@ (800b794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b69a:	ee07 3a90 	vmov	s15, r3
 800b69e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6a2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b6a6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b7a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b6aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b6c2:	e043      	b.n	800b74c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	ee07 3a90 	vmov	s15, r3
 800b6ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800b7b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b6d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6d6:	4b2f      	ldr	r3, [pc, #188]	@ (800b794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6de:	ee07 3a90 	vmov	s15, r3
 800b6e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6e6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b6ea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800b7a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b6ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b702:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b706:	e021      	b.n	800b74c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	ee07 3a90 	vmov	s15, r3
 800b70e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b712:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b7ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800b716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b71a:	4b1e      	ldr	r3, [pc, #120]	@ (800b794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b71c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b71e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b722:	ee07 3a90 	vmov	s15, r3
 800b726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b72a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b72e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800b7a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b73a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b73e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b742:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b746:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b74a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b74c:	4b11      	ldr	r3, [pc, #68]	@ (800b794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b74e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b750:	0a5b      	lsrs	r3, r3, #9
 800b752:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b756:	3301      	adds	r3, #1
 800b758:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	ee07 3a90 	vmov	s15, r3
 800b760:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b764:	edd7 6a07 	vldr	s13, [r7, #28]
 800b768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b76c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b770:	ee17 3a90 	vmov	r3, s15
 800b774:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b776:	e005      	b.n	800b784 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b778:	2300      	movs	r3, #0
 800b77a:	61bb      	str	r3, [r7, #24]
      break;
 800b77c:	e002      	b.n	800b784 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b77e:	4b07      	ldr	r3, [pc, #28]	@ (800b79c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b780:	61bb      	str	r3, [r7, #24]
      break;
 800b782:	bf00      	nop
  }

  return sysclockfreq;
 800b784:	69bb      	ldr	r3, [r7, #24]
}
 800b786:	4618      	mov	r0, r3
 800b788:	3724      	adds	r7, #36	@ 0x24
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr
 800b792:	bf00      	nop
 800b794:	58024400 	.word	0x58024400
 800b798:	03d09000 	.word	0x03d09000
 800b79c:	003d0900 	.word	0x003d0900
 800b7a0:	02faf080 	.word	0x02faf080
 800b7a4:	46000000 	.word	0x46000000
 800b7a8:	4c742400 	.word	0x4c742400
 800b7ac:	4a742400 	.word	0x4a742400
 800b7b0:	4c3ebc20 	.word	0x4c3ebc20

0800b7b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b7ba:	f7ff fe81 	bl	800b4c0 <HAL_RCC_GetSysClockFreq>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	4b10      	ldr	r3, [pc, #64]	@ (800b804 <HAL_RCC_GetHCLKFreq+0x50>)
 800b7c2:	699b      	ldr	r3, [r3, #24]
 800b7c4:	0a1b      	lsrs	r3, r3, #8
 800b7c6:	f003 030f 	and.w	r3, r3, #15
 800b7ca:	490f      	ldr	r1, [pc, #60]	@ (800b808 <HAL_RCC_GetHCLKFreq+0x54>)
 800b7cc:	5ccb      	ldrb	r3, [r1, r3]
 800b7ce:	f003 031f 	and.w	r3, r3, #31
 800b7d2:	fa22 f303 	lsr.w	r3, r2, r3
 800b7d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b7d8:	4b0a      	ldr	r3, [pc, #40]	@ (800b804 <HAL_RCC_GetHCLKFreq+0x50>)
 800b7da:	699b      	ldr	r3, [r3, #24]
 800b7dc:	f003 030f 	and.w	r3, r3, #15
 800b7e0:	4a09      	ldr	r2, [pc, #36]	@ (800b808 <HAL_RCC_GetHCLKFreq+0x54>)
 800b7e2:	5cd3      	ldrb	r3, [r2, r3]
 800b7e4:	f003 031f 	and.w	r3, r3, #31
 800b7e8:	687a      	ldr	r2, [r7, #4]
 800b7ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b7ee:	4a07      	ldr	r2, [pc, #28]	@ (800b80c <HAL_RCC_GetHCLKFreq+0x58>)
 800b7f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b7f2:	4a07      	ldr	r2, [pc, #28]	@ (800b810 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b7f8:	4b04      	ldr	r3, [pc, #16]	@ (800b80c <HAL_RCC_GetHCLKFreq+0x58>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3708      	adds	r7, #8
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}
 800b804:	58024400 	.word	0x58024400
 800b808:	08020354 	.word	0x08020354
 800b80c:	24000104 	.word	0x24000104
 800b810:	24000100 	.word	0x24000100

0800b814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b818:	f7ff ffcc 	bl	800b7b4 <HAL_RCC_GetHCLKFreq>
 800b81c:	4602      	mov	r2, r0
 800b81e:	4b06      	ldr	r3, [pc, #24]	@ (800b838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b820:	69db      	ldr	r3, [r3, #28]
 800b822:	091b      	lsrs	r3, r3, #4
 800b824:	f003 0307 	and.w	r3, r3, #7
 800b828:	4904      	ldr	r1, [pc, #16]	@ (800b83c <HAL_RCC_GetPCLK1Freq+0x28>)
 800b82a:	5ccb      	ldrb	r3, [r1, r3]
 800b82c:	f003 031f 	and.w	r3, r3, #31
 800b830:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b834:	4618      	mov	r0, r3
 800b836:	bd80      	pop	{r7, pc}
 800b838:	58024400 	.word	0x58024400
 800b83c:	08020354 	.word	0x08020354

0800b840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b844:	f7ff ffb6 	bl	800b7b4 <HAL_RCC_GetHCLKFreq>
 800b848:	4602      	mov	r2, r0
 800b84a:	4b06      	ldr	r3, [pc, #24]	@ (800b864 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b84c:	69db      	ldr	r3, [r3, #28]
 800b84e:	0a1b      	lsrs	r3, r3, #8
 800b850:	f003 0307 	and.w	r3, r3, #7
 800b854:	4904      	ldr	r1, [pc, #16]	@ (800b868 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b856:	5ccb      	ldrb	r3, [r1, r3]
 800b858:	f003 031f 	and.w	r3, r3, #31
 800b85c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b860:	4618      	mov	r0, r3
 800b862:	bd80      	pop	{r7, pc}
 800b864:	58024400 	.word	0x58024400
 800b868:	08020354 	.word	0x08020354

0800b86c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b86c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b870:	b0c6      	sub	sp, #280	@ 0x118
 800b872:	af00      	add	r7, sp, #0
 800b874:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b878:	2300      	movs	r3, #0
 800b87a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b87e:	2300      	movs	r3, #0
 800b880:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800b890:	2500      	movs	r5, #0
 800b892:	ea54 0305 	orrs.w	r3, r4, r5
 800b896:	d049      	beq.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b89c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b89e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b8a2:	d02f      	beq.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b8a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b8a8:	d828      	bhi.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b8aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b8ae:	d01a      	beq.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b8b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b8b4:	d822      	bhi.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d003      	beq.n	800b8c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b8ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b8be:	d007      	beq.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b8c0:	e01c      	b.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8c2:	4bab      	ldr	r3, [pc, #684]	@ (800bb70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b8c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8c6:	4aaa      	ldr	r2, [pc, #680]	@ (800bb70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b8c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b8cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b8ce:	e01a      	b.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b8d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8d4:	3308      	adds	r3, #8
 800b8d6:	2102      	movs	r1, #2
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f002 fa49 	bl	800dd70 <RCCEx_PLL2_Config>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b8e4:	e00f      	b.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b8e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8ea:	3328      	adds	r3, #40	@ 0x28
 800b8ec:	2102      	movs	r1, #2
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f002 faf0 	bl	800ded4 <RCCEx_PLL3_Config>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b8fa:	e004      	b.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b902:	e000      	b.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b904:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b906:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d10a      	bne.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b90e:	4b98      	ldr	r3, [pc, #608]	@ (800bb70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b912:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b91a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b91c:	4a94      	ldr	r2, [pc, #592]	@ (800bb70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b91e:	430b      	orrs	r3, r1
 800b920:	6513      	str	r3, [r2, #80]	@ 0x50
 800b922:	e003      	b.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b924:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b928:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b92c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b934:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800b938:	f04f 0900 	mov.w	r9, #0
 800b93c:	ea58 0309 	orrs.w	r3, r8, r9
 800b940:	d047      	beq.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b948:	2b04      	cmp	r3, #4
 800b94a:	d82a      	bhi.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b94c:	a201      	add	r2, pc, #4	@ (adr r2, 800b954 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b952:	bf00      	nop
 800b954:	0800b969 	.word	0x0800b969
 800b958:	0800b977 	.word	0x0800b977
 800b95c:	0800b98d 	.word	0x0800b98d
 800b960:	0800b9ab 	.word	0x0800b9ab
 800b964:	0800b9ab 	.word	0x0800b9ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b968:	4b81      	ldr	r3, [pc, #516]	@ (800bb70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b96a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b96c:	4a80      	ldr	r2, [pc, #512]	@ (800bb70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b96e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b972:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b974:	e01a      	b.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b97a:	3308      	adds	r3, #8
 800b97c:	2100      	movs	r1, #0
 800b97e:	4618      	mov	r0, r3
 800b980:	f002 f9f6 	bl	800dd70 <RCCEx_PLL2_Config>
 800b984:	4603      	mov	r3, r0
 800b986:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b98a:	e00f      	b.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b98c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b990:	3328      	adds	r3, #40	@ 0x28
 800b992:	2100      	movs	r1, #0
 800b994:	4618      	mov	r0, r3
 800b996:	f002 fa9d 	bl	800ded4 <RCCEx_PLL3_Config>
 800b99a:	4603      	mov	r3, r0
 800b99c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b9a0:	e004      	b.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b9a8:	e000      	b.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b9aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d10a      	bne.n	800b9ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b9b4:	4b6e      	ldr	r3, [pc, #440]	@ (800bb70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b9b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9b8:	f023 0107 	bic.w	r1, r3, #7
 800b9bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9c2:	4a6b      	ldr	r2, [pc, #428]	@ (800bb70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b9c4:	430b      	orrs	r3, r1
 800b9c6:	6513      	str	r3, [r2, #80]	@ 0x50
 800b9c8:	e003      	b.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b9ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b9d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9da:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800b9de:	f04f 0b00 	mov.w	fp, #0
 800b9e2:	ea5a 030b 	orrs.w	r3, sl, fp
 800b9e6:	d05b      	beq.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b9e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b9f0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800b9f4:	d03b      	beq.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800b9f6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800b9fa:	d834      	bhi.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b9fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ba00:	d037      	beq.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800ba02:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ba06:	d82e      	bhi.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ba08:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ba0c:	d033      	beq.n	800ba76 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800ba0e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ba12:	d828      	bhi.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ba14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ba18:	d01a      	beq.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800ba1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ba1e:	d822      	bhi.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d003      	beq.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800ba24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ba28:	d007      	beq.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800ba2a:	e01c      	b.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba2c:	4b50      	ldr	r3, [pc, #320]	@ (800bb70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba30:	4a4f      	ldr	r2, [pc, #316]	@ (800bb70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba38:	e01e      	b.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba3e:	3308      	adds	r3, #8
 800ba40:	2100      	movs	r1, #0
 800ba42:	4618      	mov	r0, r3
 800ba44:	f002 f994 	bl	800dd70 <RCCEx_PLL2_Config>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ba4e:	e013      	b.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba54:	3328      	adds	r3, #40	@ 0x28
 800ba56:	2100      	movs	r1, #0
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f002 fa3b 	bl	800ded4 <RCCEx_PLL3_Config>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba64:	e008      	b.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ba66:	2301      	movs	r3, #1
 800ba68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ba6c:	e004      	b.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ba6e:	bf00      	nop
 800ba70:	e002      	b.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ba72:	bf00      	nop
 800ba74:	e000      	b.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ba76:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d10b      	bne.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ba80:	4b3b      	ldr	r3, [pc, #236]	@ (800bb70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba84:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800ba88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ba90:	4a37      	ldr	r2, [pc, #220]	@ (800bb70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba92:	430b      	orrs	r3, r1
 800ba94:	6593      	str	r3, [r2, #88]	@ 0x58
 800ba96:	e003      	b.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800baa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800baac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bab0:	2300      	movs	r3, #0
 800bab2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800bab6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800baba:	460b      	mov	r3, r1
 800babc:	4313      	orrs	r3, r2
 800babe:	d05d      	beq.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800bac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bac4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bac8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800bacc:	d03b      	beq.n	800bb46 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800bace:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800bad2:	d834      	bhi.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bad4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bad8:	d037      	beq.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800bada:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bade:	d82e      	bhi.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bae0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bae4:	d033      	beq.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800bae6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800baea:	d828      	bhi.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800baec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800baf0:	d01a      	beq.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800baf2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800baf6:	d822      	bhi.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d003      	beq.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800bafc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bb00:	d007      	beq.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800bb02:	e01c      	b.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb04:	4b1a      	ldr	r3, [pc, #104]	@ (800bb70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb08:	4a19      	ldr	r2, [pc, #100]	@ (800bb70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bb10:	e01e      	b.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb16:	3308      	adds	r3, #8
 800bb18:	2100      	movs	r1, #0
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f002 f928 	bl	800dd70 <RCCEx_PLL2_Config>
 800bb20:	4603      	mov	r3, r0
 800bb22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bb26:	e013      	b.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bb28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb2c:	3328      	adds	r3, #40	@ 0x28
 800bb2e:	2100      	movs	r1, #0
 800bb30:	4618      	mov	r0, r3
 800bb32:	f002 f9cf 	bl	800ded4 <RCCEx_PLL3_Config>
 800bb36:	4603      	mov	r3, r0
 800bb38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bb3c:	e008      	b.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bb44:	e004      	b.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bb46:	bf00      	nop
 800bb48:	e002      	b.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bb4a:	bf00      	nop
 800bb4c:	e000      	b.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bb4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d10d      	bne.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bb58:	4b05      	ldr	r3, [pc, #20]	@ (800bb70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb5c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800bb60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb64:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bb68:	4a01      	ldr	r2, [pc, #4]	@ (800bb70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb6a:	430b      	orrs	r3, r1
 800bb6c:	6593      	str	r3, [r2, #88]	@ 0x58
 800bb6e:	e005      	b.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0x310>
 800bb70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800bb7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb84:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800bb88:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bb92:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800bb96:	460b      	mov	r3, r1
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	d03a      	beq.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800bb9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bba2:	2b30      	cmp	r3, #48	@ 0x30
 800bba4:	d01f      	beq.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800bba6:	2b30      	cmp	r3, #48	@ 0x30
 800bba8:	d819      	bhi.n	800bbde <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bbaa:	2b20      	cmp	r3, #32
 800bbac:	d00c      	beq.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800bbae:	2b20      	cmp	r3, #32
 800bbb0:	d815      	bhi.n	800bbde <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d019      	beq.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800bbb6:	2b10      	cmp	r3, #16
 800bbb8:	d111      	bne.n	800bbde <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbba:	4baa      	ldr	r3, [pc, #680]	@ (800be64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbbe:	4aa9      	ldr	r2, [pc, #676]	@ (800be64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bbc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bbc6:	e011      	b.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bbc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbcc:	3308      	adds	r3, #8
 800bbce:	2102      	movs	r1, #2
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f002 f8cd 	bl	800dd70 <RCCEx_PLL2_Config>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bbdc:	e006      	b.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bbde:	2301      	movs	r3, #1
 800bbe0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bbe4:	e002      	b.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bbe6:	bf00      	nop
 800bbe8:	e000      	b.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bbea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d10a      	bne.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800bbf4:	4b9b      	ldr	r3, [pc, #620]	@ (800be64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bbf8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800bbfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc02:	4a98      	ldr	r2, [pc, #608]	@ (800be64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc04:	430b      	orrs	r3, r1
 800bc06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bc08:	e003      	b.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bc12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800bc1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bc22:	2300      	movs	r3, #0
 800bc24:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bc28:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	d051      	beq.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800bc32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bc38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bc3c:	d035      	beq.n	800bcaa <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800bc3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bc42:	d82e      	bhi.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bc44:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bc48:	d031      	beq.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0x442>
 800bc4a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bc4e:	d828      	bhi.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bc50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc54:	d01a      	beq.n	800bc8c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800bc56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc5a:	d822      	bhi.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d003      	beq.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800bc60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc64:	d007      	beq.n	800bc76 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800bc66:	e01c      	b.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc68:	4b7e      	ldr	r3, [pc, #504]	@ (800be64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc6c:	4a7d      	ldr	r2, [pc, #500]	@ (800be64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bc74:	e01c      	b.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc7a:	3308      	adds	r3, #8
 800bc7c:	2100      	movs	r1, #0
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f002 f876 	bl	800dd70 <RCCEx_PLL2_Config>
 800bc84:	4603      	mov	r3, r0
 800bc86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bc8a:	e011      	b.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bc8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc90:	3328      	adds	r3, #40	@ 0x28
 800bc92:	2100      	movs	r1, #0
 800bc94:	4618      	mov	r0, r3
 800bc96:	f002 f91d 	bl	800ded4 <RCCEx_PLL3_Config>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bca0:	e006      	b.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bca2:	2301      	movs	r3, #1
 800bca4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bca8:	e002      	b.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bcaa:	bf00      	nop
 800bcac:	e000      	b.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bcae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d10a      	bne.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bcb8:	4b6a      	ldr	r3, [pc, #424]	@ (800be64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bcba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bcbc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800bcc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bcc6:	4a67      	ldr	r2, [pc, #412]	@ (800be64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bcc8:	430b      	orrs	r3, r1
 800bcca:	6513      	str	r3, [r2, #80]	@ 0x50
 800bccc:	e003      	b.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcd2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bcd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcde:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800bce2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bce6:	2300      	movs	r3, #0
 800bce8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bcec:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	d053      	beq.n	800bd9e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bcf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bcfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bd00:	d033      	beq.n	800bd6a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800bd02:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bd06:	d82c      	bhi.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bd08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bd0c:	d02f      	beq.n	800bd6e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800bd0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bd12:	d826      	bhi.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bd14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bd18:	d02b      	beq.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800bd1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bd1e:	d820      	bhi.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bd20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd24:	d012      	beq.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800bd26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd2a:	d81a      	bhi.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d022      	beq.n	800bd76 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800bd30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd34:	d115      	bne.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd3a:	3308      	adds	r3, #8
 800bd3c:	2101      	movs	r1, #1
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f002 f816 	bl	800dd70 <RCCEx_PLL2_Config>
 800bd44:	4603      	mov	r3, r0
 800bd46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bd4a:	e015      	b.n	800bd78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd50:	3328      	adds	r3, #40	@ 0x28
 800bd52:	2101      	movs	r1, #1
 800bd54:	4618      	mov	r0, r3
 800bd56:	f002 f8bd 	bl	800ded4 <RCCEx_PLL3_Config>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bd60:	e00a      	b.n	800bd78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd62:	2301      	movs	r3, #1
 800bd64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bd68:	e006      	b.n	800bd78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bd6a:	bf00      	nop
 800bd6c:	e004      	b.n	800bd78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bd6e:	bf00      	nop
 800bd70:	e002      	b.n	800bd78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bd72:	bf00      	nop
 800bd74:	e000      	b.n	800bd78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bd76:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d10a      	bne.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bd80:	4b38      	ldr	r3, [pc, #224]	@ (800be64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd84:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800bd88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd8e:	4a35      	ldr	r2, [pc, #212]	@ (800be64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd90:	430b      	orrs	r3, r1
 800bd92:	6513      	str	r3, [r2, #80]	@ 0x50
 800bd94:	e003      	b.n	800bd9e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd9a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bd9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800bdaa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bdae:	2300      	movs	r3, #0
 800bdb0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bdb4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bdb8:	460b      	mov	r3, r1
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	d058      	beq.n	800be70 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bdbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bdc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bdca:	d033      	beq.n	800be34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800bdcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bdd0:	d82c      	bhi.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bdd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bdd6:	d02f      	beq.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800bdd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bddc:	d826      	bhi.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bdde:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bde2:	d02b      	beq.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800bde4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bde8:	d820      	bhi.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bdea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bdee:	d012      	beq.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800bdf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bdf4:	d81a      	bhi.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d022      	beq.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bdfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bdfe:	d115      	bne.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be04:	3308      	adds	r3, #8
 800be06:	2101      	movs	r1, #1
 800be08:	4618      	mov	r0, r3
 800be0a:	f001 ffb1 	bl	800dd70 <RCCEx_PLL2_Config>
 800be0e:	4603      	mov	r3, r0
 800be10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800be14:	e015      	b.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be1a:	3328      	adds	r3, #40	@ 0x28
 800be1c:	2101      	movs	r1, #1
 800be1e:	4618      	mov	r0, r3
 800be20:	f002 f858 	bl	800ded4 <RCCEx_PLL3_Config>
 800be24:	4603      	mov	r3, r0
 800be26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800be2a:	e00a      	b.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800be2c:	2301      	movs	r3, #1
 800be2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800be32:	e006      	b.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800be34:	bf00      	nop
 800be36:	e004      	b.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800be38:	bf00      	nop
 800be3a:	e002      	b.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800be3c:	bf00      	nop
 800be3e:	e000      	b.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800be40:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be46:	2b00      	cmp	r3, #0
 800be48:	d10e      	bne.n	800be68 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800be4a:	4b06      	ldr	r3, [pc, #24]	@ (800be64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be4e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800be52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800be5a:	4a02      	ldr	r2, [pc, #8]	@ (800be64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be5c:	430b      	orrs	r3, r1
 800be5e:	6593      	str	r3, [r2, #88]	@ 0x58
 800be60:	e006      	b.n	800be70 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800be62:	bf00      	nop
 800be64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800be70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be78:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800be7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800be80:	2300      	movs	r3, #0
 800be82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800be86:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800be8a:	460b      	mov	r3, r1
 800be8c:	4313      	orrs	r3, r2
 800be8e:	d037      	beq.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800be90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800be9a:	d00e      	beq.n	800beba <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800be9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bea0:	d816      	bhi.n	800bed0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d018      	beq.n	800bed8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bea6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800beaa:	d111      	bne.n	800bed0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800beac:	4bc4      	ldr	r3, [pc, #784]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800beae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beb0:	4ac3      	ldr	r2, [pc, #780]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800beb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800beb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800beb8:	e00f      	b.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800beba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bebe:	3308      	adds	r3, #8
 800bec0:	2101      	movs	r1, #1
 800bec2:	4618      	mov	r0, r3
 800bec4:	f001 ff54 	bl	800dd70 <RCCEx_PLL2_Config>
 800bec8:	4603      	mov	r3, r0
 800beca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bece:	e004      	b.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bed0:	2301      	movs	r3, #1
 800bed2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bed6:	e000      	b.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800beda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d10a      	bne.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bee2:	4bb7      	ldr	r3, [pc, #732]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bee4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bee6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800beea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800beee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bef0:	4ab3      	ldr	r2, [pc, #716]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bef2:	430b      	orrs	r3, r1
 800bef4:	6513      	str	r3, [r2, #80]	@ 0x50
 800bef6:	e003      	b.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bef8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800befc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bf00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf08:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800bf0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bf10:	2300      	movs	r3, #0
 800bf12:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bf16:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800bf1a:	460b      	mov	r3, r1
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	d039      	beq.n	800bf94 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bf20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf26:	2b03      	cmp	r3, #3
 800bf28:	d81c      	bhi.n	800bf64 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bf2a:	a201      	add	r2, pc, #4	@ (adr r2, 800bf30 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bf2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf30:	0800bf6d 	.word	0x0800bf6d
 800bf34:	0800bf41 	.word	0x0800bf41
 800bf38:	0800bf4f 	.word	0x0800bf4f
 800bf3c:	0800bf6d 	.word	0x0800bf6d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf40:	4b9f      	ldr	r3, [pc, #636]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf44:	4a9e      	ldr	r2, [pc, #632]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bf4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bf4c:	e00f      	b.n	800bf6e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bf4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf52:	3308      	adds	r3, #8
 800bf54:	2102      	movs	r1, #2
 800bf56:	4618      	mov	r0, r3
 800bf58:	f001 ff0a 	bl	800dd70 <RCCEx_PLL2_Config>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bf62:	e004      	b.n	800bf6e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bf64:	2301      	movs	r3, #1
 800bf66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bf6a:	e000      	b.n	800bf6e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800bf6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d10a      	bne.n	800bf8c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bf76:	4b92      	ldr	r3, [pc, #584]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf7a:	f023 0103 	bic.w	r1, r3, #3
 800bf7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf84:	4a8e      	ldr	r2, [pc, #568]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf86:	430b      	orrs	r3, r1
 800bf88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bf8a:	e003      	b.n	800bf94 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bf94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800bfa0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bfaa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800bfae:	460b      	mov	r3, r1
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	f000 8099 	beq.w	800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bfb6:	4b83      	ldr	r3, [pc, #524]	@ (800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4a82      	ldr	r2, [pc, #520]	@ (800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bfbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bfc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bfc2:	f7f8 f91b 	bl	80041fc <HAL_GetTick>
 800bfc6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bfca:	e00b      	b.n	800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bfcc:	f7f8 f916 	bl	80041fc <HAL_GetTick>
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800bfd6:	1ad3      	subs	r3, r2, r3
 800bfd8:	2b64      	cmp	r3, #100	@ 0x64
 800bfda:	d903      	bls.n	800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800bfdc:	2303      	movs	r3, #3
 800bfde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bfe2:	e005      	b.n	800bff0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bfe4:	4b77      	ldr	r3, [pc, #476]	@ (800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d0ed      	beq.n	800bfcc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800bff0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d173      	bne.n	800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bff8:	4b71      	ldr	r3, [pc, #452]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bffa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800bffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c000:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c004:	4053      	eors	r3, r2
 800c006:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d015      	beq.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c00e:	4b6c      	ldr	r3, [pc, #432]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c012:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c016:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c01a:	4b69      	ldr	r3, [pc, #420]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c01c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c01e:	4a68      	ldr	r2, [pc, #416]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c024:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c026:	4b66      	ldr	r3, [pc, #408]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c02a:	4a65      	ldr	r2, [pc, #404]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c02c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c030:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c032:	4a63      	ldr	r2, [pc, #396]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c034:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c038:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c03a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c03e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c042:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c046:	d118      	bne.n	800c07a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c048:	f7f8 f8d8 	bl	80041fc <HAL_GetTick>
 800c04c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c050:	e00d      	b.n	800c06e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c052:	f7f8 f8d3 	bl	80041fc <HAL_GetTick>
 800c056:	4602      	mov	r2, r0
 800c058:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c05c:	1ad2      	subs	r2, r2, r3
 800c05e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c062:	429a      	cmp	r2, r3
 800c064:	d903      	bls.n	800c06e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800c066:	2303      	movs	r3, #3
 800c068:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800c06c:	e005      	b.n	800c07a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c06e:	4b54      	ldr	r3, [pc, #336]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c072:	f003 0302 	and.w	r3, r3, #2
 800c076:	2b00      	cmp	r3, #0
 800c078:	d0eb      	beq.n	800c052 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800c07a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d129      	bne.n	800c0d6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c086:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c08a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c08e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c092:	d10e      	bne.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800c094:	4b4a      	ldr	r3, [pc, #296]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c096:	691b      	ldr	r3, [r3, #16]
 800c098:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800c09c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c0a4:	091a      	lsrs	r2, r3, #4
 800c0a6:	4b48      	ldr	r3, [pc, #288]	@ (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800c0a8:	4013      	ands	r3, r2
 800c0aa:	4a45      	ldr	r2, [pc, #276]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0ac:	430b      	orrs	r3, r1
 800c0ae:	6113      	str	r3, [r2, #16]
 800c0b0:	e005      	b.n	800c0be <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c0b2:	4b43      	ldr	r3, [pc, #268]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0b4:	691b      	ldr	r3, [r3, #16]
 800c0b6:	4a42      	ldr	r2, [pc, #264]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0b8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c0bc:	6113      	str	r3, [r2, #16]
 800c0be:	4b40      	ldr	r3, [pc, #256]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0c0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c0c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c0ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c0ce:	4a3c      	ldr	r2, [pc, #240]	@ (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0d0:	430b      	orrs	r3, r1
 800c0d2:	6713      	str	r3, [r2, #112]	@ 0x70
 800c0d4:	e008      	b.n	800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c0d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c0da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800c0de:	e003      	b.n	800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c0e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c0e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f0:	f002 0301 	and.w	r3, r2, #1
 800c0f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c0fe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800c102:	460b      	mov	r3, r1
 800c104:	4313      	orrs	r3, r2
 800c106:	f000 808f 	beq.w	800c228 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c10a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c10e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c110:	2b28      	cmp	r3, #40	@ 0x28
 800c112:	d871      	bhi.n	800c1f8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c114:	a201      	add	r2, pc, #4	@ (adr r2, 800c11c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c11a:	bf00      	nop
 800c11c:	0800c201 	.word	0x0800c201
 800c120:	0800c1f9 	.word	0x0800c1f9
 800c124:	0800c1f9 	.word	0x0800c1f9
 800c128:	0800c1f9 	.word	0x0800c1f9
 800c12c:	0800c1f9 	.word	0x0800c1f9
 800c130:	0800c1f9 	.word	0x0800c1f9
 800c134:	0800c1f9 	.word	0x0800c1f9
 800c138:	0800c1f9 	.word	0x0800c1f9
 800c13c:	0800c1cd 	.word	0x0800c1cd
 800c140:	0800c1f9 	.word	0x0800c1f9
 800c144:	0800c1f9 	.word	0x0800c1f9
 800c148:	0800c1f9 	.word	0x0800c1f9
 800c14c:	0800c1f9 	.word	0x0800c1f9
 800c150:	0800c1f9 	.word	0x0800c1f9
 800c154:	0800c1f9 	.word	0x0800c1f9
 800c158:	0800c1f9 	.word	0x0800c1f9
 800c15c:	0800c1e3 	.word	0x0800c1e3
 800c160:	0800c1f9 	.word	0x0800c1f9
 800c164:	0800c1f9 	.word	0x0800c1f9
 800c168:	0800c1f9 	.word	0x0800c1f9
 800c16c:	0800c1f9 	.word	0x0800c1f9
 800c170:	0800c1f9 	.word	0x0800c1f9
 800c174:	0800c1f9 	.word	0x0800c1f9
 800c178:	0800c1f9 	.word	0x0800c1f9
 800c17c:	0800c201 	.word	0x0800c201
 800c180:	0800c1f9 	.word	0x0800c1f9
 800c184:	0800c1f9 	.word	0x0800c1f9
 800c188:	0800c1f9 	.word	0x0800c1f9
 800c18c:	0800c1f9 	.word	0x0800c1f9
 800c190:	0800c1f9 	.word	0x0800c1f9
 800c194:	0800c1f9 	.word	0x0800c1f9
 800c198:	0800c1f9 	.word	0x0800c1f9
 800c19c:	0800c201 	.word	0x0800c201
 800c1a0:	0800c1f9 	.word	0x0800c1f9
 800c1a4:	0800c1f9 	.word	0x0800c1f9
 800c1a8:	0800c1f9 	.word	0x0800c1f9
 800c1ac:	0800c1f9 	.word	0x0800c1f9
 800c1b0:	0800c1f9 	.word	0x0800c1f9
 800c1b4:	0800c1f9 	.word	0x0800c1f9
 800c1b8:	0800c1f9 	.word	0x0800c1f9
 800c1bc:	0800c201 	.word	0x0800c201
 800c1c0:	58024400 	.word	0x58024400
 800c1c4:	58024800 	.word	0x58024800
 800c1c8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c1cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1d0:	3308      	adds	r3, #8
 800c1d2:	2101      	movs	r1, #1
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f001 fdcb 	bl	800dd70 <RCCEx_PLL2_Config>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c1e0:	e00f      	b.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c1e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1e6:	3328      	adds	r3, #40	@ 0x28
 800c1e8:	2101      	movs	r1, #1
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f001 fe72 	bl	800ded4 <RCCEx_PLL3_Config>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c1f6:	e004      	b.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c1fe:	e000      	b.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c200:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c202:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c206:	2b00      	cmp	r3, #0
 800c208:	d10a      	bne.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c20a:	4bbf      	ldr	r3, [pc, #764]	@ (800c508 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c20c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c20e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800c212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c216:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c218:	4abb      	ldr	r2, [pc, #748]	@ (800c508 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c21a:	430b      	orrs	r3, r1
 800c21c:	6553      	str	r3, [r2, #84]	@ 0x54
 800c21e:	e003      	b.n	800c228 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c220:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c224:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c230:	f002 0302 	and.w	r3, r2, #2
 800c234:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c238:	2300      	movs	r3, #0
 800c23a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c23e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c242:	460b      	mov	r3, r1
 800c244:	4313      	orrs	r3, r2
 800c246:	d041      	beq.n	800c2cc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c24c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c24e:	2b05      	cmp	r3, #5
 800c250:	d824      	bhi.n	800c29c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800c252:	a201      	add	r2, pc, #4	@ (adr r2, 800c258 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800c254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c258:	0800c2a5 	.word	0x0800c2a5
 800c25c:	0800c271 	.word	0x0800c271
 800c260:	0800c287 	.word	0x0800c287
 800c264:	0800c2a5 	.word	0x0800c2a5
 800c268:	0800c2a5 	.word	0x0800c2a5
 800c26c:	0800c2a5 	.word	0x0800c2a5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c274:	3308      	adds	r3, #8
 800c276:	2101      	movs	r1, #1
 800c278:	4618      	mov	r0, r3
 800c27a:	f001 fd79 	bl	800dd70 <RCCEx_PLL2_Config>
 800c27e:	4603      	mov	r3, r0
 800c280:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c284:	e00f      	b.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c28a:	3328      	adds	r3, #40	@ 0x28
 800c28c:	2101      	movs	r1, #1
 800c28e:	4618      	mov	r0, r3
 800c290:	f001 fe20 	bl	800ded4 <RCCEx_PLL3_Config>
 800c294:	4603      	mov	r3, r0
 800c296:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c29a:	e004      	b.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c29c:	2301      	movs	r3, #1
 800c29e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c2a2:	e000      	b.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800c2a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c2a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d10a      	bne.n	800c2c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c2ae:	4b96      	ldr	r3, [pc, #600]	@ (800c508 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c2b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2b2:	f023 0107 	bic.w	r1, r3, #7
 800c2b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c2bc:	4a92      	ldr	r2, [pc, #584]	@ (800c508 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c2be:	430b      	orrs	r3, r1
 800c2c0:	6553      	str	r3, [r2, #84]	@ 0x54
 800c2c2:	e003      	b.n	800c2cc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c2c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c2cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d4:	f002 0304 	and.w	r3, r2, #4
 800c2d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c2dc:	2300      	movs	r3, #0
 800c2de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c2e2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c2e6:	460b      	mov	r3, r1
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	d044      	beq.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c2ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2f4:	2b05      	cmp	r3, #5
 800c2f6:	d825      	bhi.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800c2f8:	a201      	add	r2, pc, #4	@ (adr r2, 800c300 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800c2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2fe:	bf00      	nop
 800c300:	0800c34d 	.word	0x0800c34d
 800c304:	0800c319 	.word	0x0800c319
 800c308:	0800c32f 	.word	0x0800c32f
 800c30c:	0800c34d 	.word	0x0800c34d
 800c310:	0800c34d 	.word	0x0800c34d
 800c314:	0800c34d 	.word	0x0800c34d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c31c:	3308      	adds	r3, #8
 800c31e:	2101      	movs	r1, #1
 800c320:	4618      	mov	r0, r3
 800c322:	f001 fd25 	bl	800dd70 <RCCEx_PLL2_Config>
 800c326:	4603      	mov	r3, r0
 800c328:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c32c:	e00f      	b.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c32e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c332:	3328      	adds	r3, #40	@ 0x28
 800c334:	2101      	movs	r1, #1
 800c336:	4618      	mov	r0, r3
 800c338:	f001 fdcc 	bl	800ded4 <RCCEx_PLL3_Config>
 800c33c:	4603      	mov	r3, r0
 800c33e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c342:	e004      	b.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c344:	2301      	movs	r3, #1
 800c346:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c34a:	e000      	b.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c34c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c34e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c352:	2b00      	cmp	r3, #0
 800c354:	d10b      	bne.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c356:	4b6c      	ldr	r3, [pc, #432]	@ (800c508 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c35a:	f023 0107 	bic.w	r1, r3, #7
 800c35e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c366:	4a68      	ldr	r2, [pc, #416]	@ (800c508 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c368:	430b      	orrs	r3, r1
 800c36a:	6593      	str	r3, [r2, #88]	@ 0x58
 800c36c:	e003      	b.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c36e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c372:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37e:	f002 0320 	and.w	r3, r2, #32
 800c382:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c386:	2300      	movs	r3, #0
 800c388:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c38c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c390:	460b      	mov	r3, r1
 800c392:	4313      	orrs	r3, r2
 800c394:	d055      	beq.n	800c442 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c39a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c39e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c3a2:	d033      	beq.n	800c40c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800c3a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c3a8:	d82c      	bhi.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c3aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3ae:	d02f      	beq.n	800c410 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c3b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3b4:	d826      	bhi.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c3b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c3ba:	d02b      	beq.n	800c414 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c3bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c3c0:	d820      	bhi.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c3c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c3c6:	d012      	beq.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c3c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c3cc:	d81a      	bhi.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d022      	beq.n	800c418 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c3d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c3d6:	d115      	bne.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c3d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3dc:	3308      	adds	r3, #8
 800c3de:	2100      	movs	r1, #0
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f001 fcc5 	bl	800dd70 <RCCEx_PLL2_Config>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c3ec:	e015      	b.n	800c41a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c3ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3f2:	3328      	adds	r3, #40	@ 0x28
 800c3f4:	2102      	movs	r1, #2
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f001 fd6c 	bl	800ded4 <RCCEx_PLL3_Config>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c402:	e00a      	b.n	800c41a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c404:	2301      	movs	r3, #1
 800c406:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c40a:	e006      	b.n	800c41a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c40c:	bf00      	nop
 800c40e:	e004      	b.n	800c41a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c410:	bf00      	nop
 800c412:	e002      	b.n	800c41a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c414:	bf00      	nop
 800c416:	e000      	b.n	800c41a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c418:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c41a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d10b      	bne.n	800c43a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c422:	4b39      	ldr	r3, [pc, #228]	@ (800c508 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c426:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c42a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c42e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c432:	4a35      	ldr	r2, [pc, #212]	@ (800c508 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c434:	430b      	orrs	r3, r1
 800c436:	6553      	str	r3, [r2, #84]	@ 0x54
 800c438:	e003      	b.n	800c442 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c43a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c43e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c442:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c44e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c452:	2300      	movs	r3, #0
 800c454:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c458:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c45c:	460b      	mov	r3, r1
 800c45e:	4313      	orrs	r3, r2
 800c460:	d058      	beq.n	800c514 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c466:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c46a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c46e:	d033      	beq.n	800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c470:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c474:	d82c      	bhi.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c476:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c47a:	d02f      	beq.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c47c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c480:	d826      	bhi.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c482:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c486:	d02b      	beq.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c488:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c48c:	d820      	bhi.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c48e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c492:	d012      	beq.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c494:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c498:	d81a      	bhi.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d022      	beq.n	800c4e4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c49e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c4a2:	d115      	bne.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c4a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4a8:	3308      	adds	r3, #8
 800c4aa:	2100      	movs	r1, #0
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f001 fc5f 	bl	800dd70 <RCCEx_PLL2_Config>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c4b8:	e015      	b.n	800c4e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c4ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4be:	3328      	adds	r3, #40	@ 0x28
 800c4c0:	2102      	movs	r1, #2
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f001 fd06 	bl	800ded4 <RCCEx_PLL3_Config>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c4ce:	e00a      	b.n	800c4e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c4d6:	e006      	b.n	800c4e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c4d8:	bf00      	nop
 800c4da:	e004      	b.n	800c4e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c4dc:	bf00      	nop
 800c4de:	e002      	b.n	800c4e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c4e0:	bf00      	nop
 800c4e2:	e000      	b.n	800c4e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c4e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d10e      	bne.n	800c50c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c4ee:	4b06      	ldr	r3, [pc, #24]	@ (800c508 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c4f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4f2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800c4f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c4fe:	4a02      	ldr	r2, [pc, #8]	@ (800c508 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c500:	430b      	orrs	r3, r1
 800c502:	6593      	str	r3, [r2, #88]	@ 0x58
 800c504:	e006      	b.n	800c514 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800c506:	bf00      	nop
 800c508:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c50c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c510:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800c520:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c524:	2300      	movs	r3, #0
 800c526:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c52a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c52e:	460b      	mov	r3, r1
 800c530:	4313      	orrs	r3, r2
 800c532:	d055      	beq.n	800c5e0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c538:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c53c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c540:	d033      	beq.n	800c5aa <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c542:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c546:	d82c      	bhi.n	800c5a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c548:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c54c:	d02f      	beq.n	800c5ae <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c54e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c552:	d826      	bhi.n	800c5a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c554:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c558:	d02b      	beq.n	800c5b2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c55a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c55e:	d820      	bhi.n	800c5a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c560:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c564:	d012      	beq.n	800c58c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c566:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c56a:	d81a      	bhi.n	800c5a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d022      	beq.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c570:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c574:	d115      	bne.n	800c5a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c57a:	3308      	adds	r3, #8
 800c57c:	2100      	movs	r1, #0
 800c57e:	4618      	mov	r0, r3
 800c580:	f001 fbf6 	bl	800dd70 <RCCEx_PLL2_Config>
 800c584:	4603      	mov	r3, r0
 800c586:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c58a:	e015      	b.n	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c58c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c590:	3328      	adds	r3, #40	@ 0x28
 800c592:	2102      	movs	r1, #2
 800c594:	4618      	mov	r0, r3
 800c596:	f001 fc9d 	bl	800ded4 <RCCEx_PLL3_Config>
 800c59a:	4603      	mov	r3, r0
 800c59c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c5a0:	e00a      	b.n	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c5a8:	e006      	b.n	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c5aa:	bf00      	nop
 800c5ac:	e004      	b.n	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c5ae:	bf00      	nop
 800c5b0:	e002      	b.n	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c5b2:	bf00      	nop
 800c5b4:	e000      	b.n	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c5b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d10b      	bne.n	800c5d8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c5c0:	4ba0      	ldr	r3, [pc, #640]	@ (800c844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c5c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5c4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c5c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c5d0:	4a9c      	ldr	r2, [pc, #624]	@ (800c844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c5d2:	430b      	orrs	r3, r1
 800c5d4:	6593      	str	r3, [r2, #88]	@ 0x58
 800c5d6:	e003      	b.n	800c5e0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c5e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e8:	f002 0308 	and.w	r3, r2, #8
 800c5ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c5f6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c5fa:	460b      	mov	r3, r1
 800c5fc:	4313      	orrs	r3, r2
 800c5fe:	d01e      	beq.n	800c63e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c608:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c60c:	d10c      	bne.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c60e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c612:	3328      	adds	r3, #40	@ 0x28
 800c614:	2102      	movs	r1, #2
 800c616:	4618      	mov	r0, r3
 800c618:	f001 fc5c 	bl	800ded4 <RCCEx_PLL3_Config>
 800c61c:	4603      	mov	r3, r0
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d002      	beq.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c622:	2301      	movs	r3, #1
 800c624:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c628:	4b86      	ldr	r3, [pc, #536]	@ (800c844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c62a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c62c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c634:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c638:	4a82      	ldr	r2, [pc, #520]	@ (800c844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c63a:	430b      	orrs	r3, r1
 800c63c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c63e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c646:	f002 0310 	and.w	r3, r2, #16
 800c64a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c64e:	2300      	movs	r3, #0
 800c650:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c654:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c658:	460b      	mov	r3, r1
 800c65a:	4313      	orrs	r3, r2
 800c65c:	d01e      	beq.n	800c69c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c65e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c662:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c666:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c66a:	d10c      	bne.n	800c686 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c66c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c670:	3328      	adds	r3, #40	@ 0x28
 800c672:	2102      	movs	r1, #2
 800c674:	4618      	mov	r0, r3
 800c676:	f001 fc2d 	bl	800ded4 <RCCEx_PLL3_Config>
 800c67a:	4603      	mov	r3, r0
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d002      	beq.n	800c686 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c680:	2301      	movs	r3, #1
 800c682:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c686:	4b6f      	ldr	r3, [pc, #444]	@ (800c844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c68a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c68e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c692:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c696:	4a6b      	ldr	r2, [pc, #428]	@ (800c844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c698:	430b      	orrs	r3, r1
 800c69a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c69c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c6a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c6ae:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c6b2:	460b      	mov	r3, r1
 800c6b4:	4313      	orrs	r3, r2
 800c6b6:	d03e      	beq.n	800c736 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c6b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c6c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c6c4:	d022      	beq.n	800c70c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c6c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c6ca:	d81b      	bhi.n	800c704 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d003      	beq.n	800c6d8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c6d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c6d4:	d00b      	beq.n	800c6ee <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c6d6:	e015      	b.n	800c704 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c6d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6dc:	3308      	adds	r3, #8
 800c6de:	2100      	movs	r1, #0
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f001 fb45 	bl	800dd70 <RCCEx_PLL2_Config>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c6ec:	e00f      	b.n	800c70e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c6ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6f2:	3328      	adds	r3, #40	@ 0x28
 800c6f4:	2102      	movs	r1, #2
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f001 fbec 	bl	800ded4 <RCCEx_PLL3_Config>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c702:	e004      	b.n	800c70e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c704:	2301      	movs	r3, #1
 800c706:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c70a:	e000      	b.n	800c70e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c70c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c70e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c712:	2b00      	cmp	r3, #0
 800c714:	d10b      	bne.n	800c72e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c716:	4b4b      	ldr	r3, [pc, #300]	@ (800c844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c71a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c71e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c722:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c726:	4a47      	ldr	r2, [pc, #284]	@ (800c844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c728:	430b      	orrs	r3, r1
 800c72a:	6593      	str	r3, [r2, #88]	@ 0x58
 800c72c:	e003      	b.n	800c736 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c72e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c732:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c73e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c742:	673b      	str	r3, [r7, #112]	@ 0x70
 800c744:	2300      	movs	r3, #0
 800c746:	677b      	str	r3, [r7, #116]	@ 0x74
 800c748:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c74c:	460b      	mov	r3, r1
 800c74e:	4313      	orrs	r3, r2
 800c750:	d03b      	beq.n	800c7ca <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c756:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c75a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c75e:	d01f      	beq.n	800c7a0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c760:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c764:	d818      	bhi.n	800c798 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800c766:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c76a:	d003      	beq.n	800c774 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c76c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c770:	d007      	beq.n	800c782 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800c772:	e011      	b.n	800c798 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c774:	4b33      	ldr	r3, [pc, #204]	@ (800c844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c778:	4a32      	ldr	r2, [pc, #200]	@ (800c844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c77a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c77e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c780:	e00f      	b.n	800c7a2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c786:	3328      	adds	r3, #40	@ 0x28
 800c788:	2101      	movs	r1, #1
 800c78a:	4618      	mov	r0, r3
 800c78c:	f001 fba2 	bl	800ded4 <RCCEx_PLL3_Config>
 800c790:	4603      	mov	r3, r0
 800c792:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800c796:	e004      	b.n	800c7a2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c798:	2301      	movs	r3, #1
 800c79a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c79e:	e000      	b.n	800c7a2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800c7a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d10b      	bne.n	800c7c2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c7aa:	4b26      	ldr	r3, [pc, #152]	@ (800c844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c7ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c7b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c7ba:	4a22      	ldr	r2, [pc, #136]	@ (800c844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c7bc:	430b      	orrs	r3, r1
 800c7be:	6553      	str	r3, [r2, #84]	@ 0x54
 800c7c0:	e003      	b.n	800c7ca <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c7ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800c7d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c7d8:	2300      	movs	r3, #0
 800c7da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c7dc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	d034      	beq.n	800c850 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c7e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d003      	beq.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800c7f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c7f4:	d007      	beq.n	800c806 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800c7f6:	e011      	b.n	800c81c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c7f8:	4b12      	ldr	r3, [pc, #72]	@ (800c844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c7fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7fc:	4a11      	ldr	r2, [pc, #68]	@ (800c844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c7fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c802:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c804:	e00e      	b.n	800c824 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c80a:	3308      	adds	r3, #8
 800c80c:	2102      	movs	r1, #2
 800c80e:	4618      	mov	r0, r3
 800c810:	f001 faae 	bl	800dd70 <RCCEx_PLL2_Config>
 800c814:	4603      	mov	r3, r0
 800c816:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c81a:	e003      	b.n	800c824 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800c81c:	2301      	movs	r3, #1
 800c81e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c822:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c824:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d10d      	bne.n	800c848 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c82c:	4b05      	ldr	r3, [pc, #20]	@ (800c844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c82e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c830:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c83a:	4a02      	ldr	r2, [pc, #8]	@ (800c844 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c83c:	430b      	orrs	r3, r1
 800c83e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c840:	e006      	b.n	800c850 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800c842:	bf00      	nop
 800c844:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c848:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c84c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c858:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800c85c:	663b      	str	r3, [r7, #96]	@ 0x60
 800c85e:	2300      	movs	r3, #0
 800c860:	667b      	str	r3, [r7, #100]	@ 0x64
 800c862:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c866:	460b      	mov	r3, r1
 800c868:	4313      	orrs	r3, r2
 800c86a:	d00c      	beq.n	800c886 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c86c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c870:	3328      	adds	r3, #40	@ 0x28
 800c872:	2102      	movs	r1, #2
 800c874:	4618      	mov	r0, r3
 800c876:	f001 fb2d 	bl	800ded4 <RCCEx_PLL3_Config>
 800c87a:	4603      	mov	r3, r0
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d002      	beq.n	800c886 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800c880:	2301      	movs	r3, #1
 800c882:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800c892:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c894:	2300      	movs	r3, #0
 800c896:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c898:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c89c:	460b      	mov	r3, r1
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	d036      	beq.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c8a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c8a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c8ac:	d018      	beq.n	800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800c8ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c8b2:	d811      	bhi.n	800c8d8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c8b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c8b8:	d014      	beq.n	800c8e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800c8ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c8be:	d80b      	bhi.n	800c8d8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d011      	beq.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800c8c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c8c8:	d106      	bne.n	800c8d8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c8ca:	4bb7      	ldr	r3, [pc, #732]	@ (800cba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c8cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8ce:	4ab6      	ldr	r2, [pc, #728]	@ (800cba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c8d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c8d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c8d6:	e008      	b.n	800c8ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c8d8:	2301      	movs	r3, #1
 800c8da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c8de:	e004      	b.n	800c8ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c8e0:	bf00      	nop
 800c8e2:	e002      	b.n	800c8ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c8e4:	bf00      	nop
 800c8e6:	e000      	b.n	800c8ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c8e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c8ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d10a      	bne.n	800c908 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c8f2:	4bad      	ldr	r3, [pc, #692]	@ (800cba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c8f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c8f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c8fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c900:	4aa9      	ldr	r2, [pc, #676]	@ (800cba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c902:	430b      	orrs	r3, r1
 800c904:	6553      	str	r3, [r2, #84]	@ 0x54
 800c906:	e003      	b.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c908:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c90c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c918:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c91c:	653b      	str	r3, [r7, #80]	@ 0x50
 800c91e:	2300      	movs	r3, #0
 800c920:	657b      	str	r3, [r7, #84]	@ 0x54
 800c922:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c926:	460b      	mov	r3, r1
 800c928:	4313      	orrs	r3, r2
 800c92a:	d009      	beq.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c92c:	4b9e      	ldr	r3, [pc, #632]	@ (800cba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c92e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c930:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c93a:	4a9b      	ldr	r2, [pc, #620]	@ (800cba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c93c:	430b      	orrs	r3, r1
 800c93e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c948:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800c94c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c94e:	2300      	movs	r3, #0
 800c950:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c952:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800c956:	460b      	mov	r3, r1
 800c958:	4313      	orrs	r3, r2
 800c95a:	d009      	beq.n	800c970 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c95c:	4b92      	ldr	r3, [pc, #584]	@ (800cba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c95e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c960:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800c964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c968:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c96a:	4a8f      	ldr	r2, [pc, #572]	@ (800cba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c96c:	430b      	orrs	r3, r1
 800c96e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c978:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800c97c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c97e:	2300      	movs	r3, #0
 800c980:	647b      	str	r3, [r7, #68]	@ 0x44
 800c982:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800c986:	460b      	mov	r3, r1
 800c988:	4313      	orrs	r3, r2
 800c98a:	d00e      	beq.n	800c9aa <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c98c:	4b86      	ldr	r3, [pc, #536]	@ (800cba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c98e:	691b      	ldr	r3, [r3, #16]
 800c990:	4a85      	ldr	r2, [pc, #532]	@ (800cba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c992:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c996:	6113      	str	r3, [r2, #16]
 800c998:	4b83      	ldr	r3, [pc, #524]	@ (800cba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c99a:	6919      	ldr	r1, [r3, #16]
 800c99c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c9a4:	4a80      	ldr	r2, [pc, #512]	@ (800cba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9a6:	430b      	orrs	r3, r1
 800c9a8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c9aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800c9b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c9bc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	4313      	orrs	r3, r2
 800c9c4:	d009      	beq.n	800c9da <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c9c6:	4b78      	ldr	r3, [pc, #480]	@ (800cba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c9ca:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c9ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9d4:	4a74      	ldr	r2, [pc, #464]	@ (800cba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9d6:	430b      	orrs	r3, r1
 800c9d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c9da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800c9e6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9ec:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	d00a      	beq.n	800ca0c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c9f6:	4b6c      	ldr	r3, [pc, #432]	@ (800cba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9fa:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800c9fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca06:	4a68      	ldr	r2, [pc, #416]	@ (800cba8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca08:	430b      	orrs	r3, r1
 800ca0a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ca0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca14:	2100      	movs	r1, #0
 800ca16:	62b9      	str	r1, [r7, #40]	@ 0x28
 800ca18:	f003 0301 	and.w	r3, r3, #1
 800ca1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ca1e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800ca22:	460b      	mov	r3, r1
 800ca24:	4313      	orrs	r3, r2
 800ca26:	d011      	beq.n	800ca4c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ca28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca2c:	3308      	adds	r3, #8
 800ca2e:	2100      	movs	r1, #0
 800ca30:	4618      	mov	r0, r3
 800ca32:	f001 f99d 	bl	800dd70 <RCCEx_PLL2_Config>
 800ca36:	4603      	mov	r3, r0
 800ca38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ca3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d003      	beq.n	800ca4c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ca4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca54:	2100      	movs	r1, #0
 800ca56:	6239      	str	r1, [r7, #32]
 800ca58:	f003 0302 	and.w	r3, r3, #2
 800ca5c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca5e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ca62:	460b      	mov	r3, r1
 800ca64:	4313      	orrs	r3, r2
 800ca66:	d011      	beq.n	800ca8c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ca68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca6c:	3308      	adds	r3, #8
 800ca6e:	2101      	movs	r1, #1
 800ca70:	4618      	mov	r0, r3
 800ca72:	f001 f97d 	bl	800dd70 <RCCEx_PLL2_Config>
 800ca76:	4603      	mov	r3, r0
 800ca78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ca7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d003      	beq.n	800ca8c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ca8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca94:	2100      	movs	r1, #0
 800ca96:	61b9      	str	r1, [r7, #24]
 800ca98:	f003 0304 	and.w	r3, r3, #4
 800ca9c:	61fb      	str	r3, [r7, #28]
 800ca9e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800caa2:	460b      	mov	r3, r1
 800caa4:	4313      	orrs	r3, r2
 800caa6:	d011      	beq.n	800cacc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800caa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caac:	3308      	adds	r3, #8
 800caae:	2102      	movs	r1, #2
 800cab0:	4618      	mov	r0, r3
 800cab2:	f001 f95d 	bl	800dd70 <RCCEx_PLL2_Config>
 800cab6:	4603      	mov	r3, r0
 800cab8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cabc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d003      	beq.n	800cacc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cac4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cac8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800cacc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad4:	2100      	movs	r1, #0
 800cad6:	6139      	str	r1, [r7, #16]
 800cad8:	f003 0308 	and.w	r3, r3, #8
 800cadc:	617b      	str	r3, [r7, #20]
 800cade:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800cae2:	460b      	mov	r3, r1
 800cae4:	4313      	orrs	r3, r2
 800cae6:	d011      	beq.n	800cb0c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caec:	3328      	adds	r3, #40	@ 0x28
 800caee:	2100      	movs	r1, #0
 800caf0:	4618      	mov	r0, r3
 800caf2:	f001 f9ef 	bl	800ded4 <RCCEx_PLL3_Config>
 800caf6:	4603      	mov	r3, r0
 800caf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800cafc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d003      	beq.n	800cb0c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800cb0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb14:	2100      	movs	r1, #0
 800cb16:	60b9      	str	r1, [r7, #8]
 800cb18:	f003 0310 	and.w	r3, r3, #16
 800cb1c:	60fb      	str	r3, [r7, #12]
 800cb1e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cb22:	460b      	mov	r3, r1
 800cb24:	4313      	orrs	r3, r2
 800cb26:	d011      	beq.n	800cb4c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cb28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb2c:	3328      	adds	r3, #40	@ 0x28
 800cb2e:	2101      	movs	r1, #1
 800cb30:	4618      	mov	r0, r3
 800cb32:	f001 f9cf 	bl	800ded4 <RCCEx_PLL3_Config>
 800cb36:	4603      	mov	r3, r0
 800cb38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cb3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d003      	beq.n	800cb4c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800cb4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb54:	2100      	movs	r1, #0
 800cb56:	6039      	str	r1, [r7, #0]
 800cb58:	f003 0320 	and.w	r3, r3, #32
 800cb5c:	607b      	str	r3, [r7, #4]
 800cb5e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cb62:	460b      	mov	r3, r1
 800cb64:	4313      	orrs	r3, r2
 800cb66:	d011      	beq.n	800cb8c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cb68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb6c:	3328      	adds	r3, #40	@ 0x28
 800cb6e:	2102      	movs	r1, #2
 800cb70:	4618      	mov	r0, r3
 800cb72:	f001 f9af 	bl	800ded4 <RCCEx_PLL3_Config>
 800cb76:	4603      	mov	r3, r0
 800cb78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cb7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d003      	beq.n	800cb8c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800cb8c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d101      	bne.n	800cb98 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800cb94:	2300      	movs	r3, #0
 800cb96:	e000      	b.n	800cb9a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800cb98:	2301      	movs	r3, #1
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800cba0:	46bd      	mov	sp, r7
 800cba2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cba6:	bf00      	nop
 800cba8:	58024400 	.word	0x58024400

0800cbac <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b090      	sub	sp, #64	@ 0x40
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800cbb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbba:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800cbbe:	430b      	orrs	r3, r1
 800cbc0:	f040 8094 	bne.w	800ccec <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800cbc4:	4b9b      	ldr	r3, [pc, #620]	@ (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cbc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cbc8:	f003 0307 	and.w	r3, r3, #7
 800cbcc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800cbce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd0:	2b04      	cmp	r3, #4
 800cbd2:	f200 8087 	bhi.w	800cce4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800cbd6:	a201      	add	r2, pc, #4	@ (adr r2, 800cbdc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800cbd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbdc:	0800cbf1 	.word	0x0800cbf1
 800cbe0:	0800cc19 	.word	0x0800cc19
 800cbe4:	0800cc41 	.word	0x0800cc41
 800cbe8:	0800ccdd 	.word	0x0800ccdd
 800cbec:	0800cc69 	.word	0x0800cc69
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cbf0:	4b90      	ldr	r3, [pc, #576]	@ (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cbf8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cbfc:	d108      	bne.n	800cc10 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cbfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cc02:	4618      	mov	r0, r3
 800cc04:	f000 ff62 	bl	800dacc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc0c:	f000 bc93 	b.w	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc10:	2300      	movs	r3, #0
 800cc12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc14:	f000 bc8f 	b.w	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc18:	4b86      	ldr	r3, [pc, #536]	@ (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cc20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cc24:	d108      	bne.n	800cc38 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc26:	f107 0318 	add.w	r3, r7, #24
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f000 fca6 	bl	800d57c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cc30:	69bb      	ldr	r3, [r7, #24]
 800cc32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc34:	f000 bc7f 	b.w	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc3c:	f000 bc7b 	b.w	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc40:	4b7c      	ldr	r3, [pc, #496]	@ (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cc48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cc4c:	d108      	bne.n	800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc4e:	f107 030c 	add.w	r3, r7, #12
 800cc52:	4618      	mov	r0, r3
 800cc54:	f000 fde6 	bl	800d824 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc5c:	f000 bc6b 	b.w	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc60:	2300      	movs	r3, #0
 800cc62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc64:	f000 bc67 	b.w	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc68:	4b72      	ldr	r3, [pc, #456]	@ (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc6c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cc70:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc72:	4b70      	ldr	r3, [pc, #448]	@ (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f003 0304 	and.w	r3, r3, #4
 800cc7a:	2b04      	cmp	r3, #4
 800cc7c:	d10c      	bne.n	800cc98 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800cc7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d109      	bne.n	800cc98 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc84:	4b6b      	ldr	r3, [pc, #428]	@ (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	08db      	lsrs	r3, r3, #3
 800cc8a:	f003 0303 	and.w	r3, r3, #3
 800cc8e:	4a6a      	ldr	r2, [pc, #424]	@ (800ce38 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800cc90:	fa22 f303 	lsr.w	r3, r2, r3
 800cc94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc96:	e01f      	b.n	800ccd8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cc98:	4b66      	ldr	r3, [pc, #408]	@ (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cca0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cca4:	d106      	bne.n	800ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800cca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cca8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ccac:	d102      	bne.n	800ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ccae:	4b63      	ldr	r3, [pc, #396]	@ (800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800ccb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ccb2:	e011      	b.n	800ccd8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ccb4:	4b5f      	ldr	r3, [pc, #380]	@ (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ccbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ccc0:	d106      	bne.n	800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ccc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ccc8:	d102      	bne.n	800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ccca:	4b5d      	ldr	r3, [pc, #372]	@ (800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ccce:	e003      	b.n	800ccd8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ccd4:	f000 bc2f 	b.w	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ccd8:	f000 bc2d 	b.w	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ccdc:	4b59      	ldr	r3, [pc, #356]	@ (800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ccde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cce0:	f000 bc29 	b.w	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800cce4:	2300      	movs	r3, #0
 800cce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cce8:	f000 bc25 	b.w	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ccec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccf0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800ccf4:	430b      	orrs	r3, r1
 800ccf6:	f040 80a7 	bne.w	800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ccfa:	4b4e      	ldr	r3, [pc, #312]	@ (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ccfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ccfe:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800cd02:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800cd04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd06:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cd0a:	d054      	beq.n	800cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800cd0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd0e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cd12:	f200 808b 	bhi.w	800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cd16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd18:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800cd1c:	f000 8083 	beq.w	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800cd20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd22:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800cd26:	f200 8081 	bhi.w	800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cd2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cd30:	d02f      	beq.n	800cd92 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800cd32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cd38:	d878      	bhi.n	800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cd3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d004      	beq.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800cd40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cd46:	d012      	beq.n	800cd6e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800cd48:	e070      	b.n	800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cd4a:	4b3a      	ldr	r3, [pc, #232]	@ (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cd52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cd56:	d107      	bne.n	800cd68 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cd58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f000 feb5 	bl	800dacc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cd62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd66:	e3e6      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd6c:	e3e3      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd6e:	4b31      	ldr	r3, [pc, #196]	@ (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cd76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cd7a:	d107      	bne.n	800cd8c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd7c:	f107 0318 	add.w	r3, r7, #24
 800cd80:	4618      	mov	r0, r3
 800cd82:	f000 fbfb 	bl	800d57c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cd86:	69bb      	ldr	r3, [r7, #24]
 800cd88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd8a:	e3d4      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd90:	e3d1      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd92:	4b28      	ldr	r3, [pc, #160]	@ (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cd9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd9e:	d107      	bne.n	800cdb0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cda0:	f107 030c 	add.w	r3, r7, #12
 800cda4:	4618      	mov	r0, r3
 800cda6:	f000 fd3d 	bl	800d824 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdae:	e3c2      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdb4:	e3bf      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cdb6:	4b1f      	ldr	r3, [pc, #124]	@ (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cdb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cdba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cdbe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cdc0:	4b1c      	ldr	r3, [pc, #112]	@ (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f003 0304 	and.w	r3, r3, #4
 800cdc8:	2b04      	cmp	r3, #4
 800cdca:	d10c      	bne.n	800cde6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800cdcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d109      	bne.n	800cde6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cdd2:	4b18      	ldr	r3, [pc, #96]	@ (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	08db      	lsrs	r3, r3, #3
 800cdd8:	f003 0303 	and.w	r3, r3, #3
 800cddc:	4a16      	ldr	r2, [pc, #88]	@ (800ce38 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800cdde:	fa22 f303 	lsr.w	r3, r2, r3
 800cde2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cde4:	e01e      	b.n	800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cde6:	4b13      	ldr	r3, [pc, #76]	@ (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cdee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cdf2:	d106      	bne.n	800ce02 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800cdf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdf6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cdfa:	d102      	bne.n	800ce02 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cdfc:	4b0f      	ldr	r3, [pc, #60]	@ (800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800cdfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce00:	e010      	b.n	800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ce02:	4b0c      	ldr	r3, [pc, #48]	@ (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ce0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ce0e:	d106      	bne.n	800ce1e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800ce10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ce16:	d102      	bne.n	800ce1e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ce18:	4b09      	ldr	r3, [pc, #36]	@ (800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ce1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce1c:	e002      	b.n	800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ce22:	e388      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ce24:	e387      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ce26:	4b07      	ldr	r3, [pc, #28]	@ (800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ce28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce2a:	e384      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce30:	e381      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ce32:	bf00      	nop
 800ce34:	58024400 	.word	0x58024400
 800ce38:	03d09000 	.word	0x03d09000
 800ce3c:	003d0900 	.word	0x003d0900
 800ce40:	02faf080 	.word	0x02faf080
 800ce44:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ce48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce4c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800ce50:	430b      	orrs	r3, r1
 800ce52:	f040 809c 	bne.w	800cf8e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ce56:	4b9e      	ldr	r3, [pc, #632]	@ (800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce5a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800ce5e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ce60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ce66:	d054      	beq.n	800cf12 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800ce68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ce6e:	f200 808b 	bhi.w	800cf88 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ce72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce74:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ce78:	f000 8083 	beq.w	800cf82 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800ce7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce7e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ce82:	f200 8081 	bhi.w	800cf88 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ce86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ce8c:	d02f      	beq.n	800ceee <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800ce8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ce94:	d878      	bhi.n	800cf88 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ce96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d004      	beq.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800ce9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cea2:	d012      	beq.n	800ceca <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800cea4:	e070      	b.n	800cf88 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cea6:	4b8a      	ldr	r3, [pc, #552]	@ (800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ceae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ceb2:	d107      	bne.n	800cec4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ceb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f000 fe07 	bl	800dacc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cec2:	e338      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cec4:	2300      	movs	r3, #0
 800cec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cec8:	e335      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ceca:	4b81      	ldr	r3, [pc, #516]	@ (800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ced2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ced6:	d107      	bne.n	800cee8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ced8:	f107 0318 	add.w	r3, r7, #24
 800cedc:	4618      	mov	r0, r3
 800cede:	f000 fb4d 	bl	800d57c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cee2:	69bb      	ldr	r3, [r7, #24]
 800cee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cee6:	e326      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cee8:	2300      	movs	r3, #0
 800ceea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ceec:	e323      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ceee:	4b78      	ldr	r3, [pc, #480]	@ (800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cef6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cefa:	d107      	bne.n	800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cefc:	f107 030c 	add.w	r3, r7, #12
 800cf00:	4618      	mov	r0, r3
 800cf02:	f000 fc8f 	bl	800d824 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf0a:	e314      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf10:	e311      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cf12:	4b6f      	ldr	r3, [pc, #444]	@ (800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cf16:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cf1a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cf1c:	4b6c      	ldr	r3, [pc, #432]	@ (800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f003 0304 	and.w	r3, r3, #4
 800cf24:	2b04      	cmp	r3, #4
 800cf26:	d10c      	bne.n	800cf42 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800cf28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d109      	bne.n	800cf42 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf2e:	4b68      	ldr	r3, [pc, #416]	@ (800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	08db      	lsrs	r3, r3, #3
 800cf34:	f003 0303 	and.w	r3, r3, #3
 800cf38:	4a66      	ldr	r2, [pc, #408]	@ (800d0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800cf3a:	fa22 f303 	lsr.w	r3, r2, r3
 800cf3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf40:	e01e      	b.n	800cf80 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cf42:	4b63      	ldr	r3, [pc, #396]	@ (800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cf4e:	d106      	bne.n	800cf5e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800cf50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf56:	d102      	bne.n	800cf5e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cf58:	4b5f      	ldr	r3, [pc, #380]	@ (800d0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800cf5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf5c:	e010      	b.n	800cf80 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cf5e:	4b5c      	ldr	r3, [pc, #368]	@ (800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cf66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf6a:	d106      	bne.n	800cf7a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800cf6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cf72:	d102      	bne.n	800cf7a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cf74:	4b59      	ldr	r3, [pc, #356]	@ (800d0dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cf76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf78:	e002      	b.n	800cf80 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cf7e:	e2da      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cf80:	e2d9      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cf82:	4b57      	ldr	r3, [pc, #348]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cf84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf86:	e2d6      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf8c:	e2d3      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cf8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf92:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800cf96:	430b      	orrs	r3, r1
 800cf98:	f040 80a7 	bne.w	800d0ea <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800cf9c:	4b4c      	ldr	r3, [pc, #304]	@ (800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cfa0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800cfa4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800cfa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfa8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cfac:	d055      	beq.n	800d05a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800cfae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cfb4:	f200 8096 	bhi.w	800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cfb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cfbe:	f000 8084 	beq.w	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800cfc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfc4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cfc8:	f200 808c 	bhi.w	800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cfcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cfd2:	d030      	beq.n	800d036 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800cfd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cfda:	f200 8083 	bhi.w	800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cfde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d004      	beq.n	800cfee <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800cfe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfe6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cfea:	d012      	beq.n	800d012 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800cfec:	e07a      	b.n	800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cfee:	4b38      	ldr	r3, [pc, #224]	@ (800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cff6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cffa:	d107      	bne.n	800d00c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cffc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d000:	4618      	mov	r0, r3
 800d002:	f000 fd63 	bl	800dacc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d00a:	e294      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d00c:	2300      	movs	r3, #0
 800d00e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d010:	e291      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d012:	4b2f      	ldr	r3, [pc, #188]	@ (800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d01a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d01e:	d107      	bne.n	800d030 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d020:	f107 0318 	add.w	r3, r7, #24
 800d024:	4618      	mov	r0, r3
 800d026:	f000 faa9 	bl	800d57c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d02a:	69bb      	ldr	r3, [r7, #24]
 800d02c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d02e:	e282      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d030:	2300      	movs	r3, #0
 800d032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d034:	e27f      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d036:	4b26      	ldr	r3, [pc, #152]	@ (800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d03e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d042:	d107      	bne.n	800d054 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d044:	f107 030c 	add.w	r3, r7, #12
 800d048:	4618      	mov	r0, r3
 800d04a:	f000 fbeb 	bl	800d824 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d052:	e270      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d054:	2300      	movs	r3, #0
 800d056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d058:	e26d      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d05a:	4b1d      	ldr	r3, [pc, #116]	@ (800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d05c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d05e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d062:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d064:	4b1a      	ldr	r3, [pc, #104]	@ (800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f003 0304 	and.w	r3, r3, #4
 800d06c:	2b04      	cmp	r3, #4
 800d06e:	d10c      	bne.n	800d08a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800d070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d072:	2b00      	cmp	r3, #0
 800d074:	d109      	bne.n	800d08a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d076:	4b16      	ldr	r3, [pc, #88]	@ (800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	08db      	lsrs	r3, r3, #3
 800d07c:	f003 0303 	and.w	r3, r3, #3
 800d080:	4a14      	ldr	r2, [pc, #80]	@ (800d0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d082:	fa22 f303 	lsr.w	r3, r2, r3
 800d086:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d088:	e01e      	b.n	800d0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d08a:	4b11      	ldr	r3, [pc, #68]	@ (800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d096:	d106      	bne.n	800d0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800d098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d09a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d09e:	d102      	bne.n	800d0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d0a0:	4b0d      	ldr	r3, [pc, #52]	@ (800d0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d0a4:	e010      	b.n	800d0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d0a6:	4b0a      	ldr	r3, [pc, #40]	@ (800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d0ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d0b2:	d106      	bne.n	800d0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800d0b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d0ba:	d102      	bne.n	800d0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d0bc:	4b07      	ldr	r3, [pc, #28]	@ (800d0dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d0c0:	e002      	b.n	800d0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d0c6:	e236      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d0c8:	e235      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d0ca:	4b05      	ldr	r3, [pc, #20]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d0cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0ce:	e232      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d0d0:	58024400 	.word	0x58024400
 800d0d4:	03d09000 	.word	0x03d09000
 800d0d8:	003d0900 	.word	0x003d0900
 800d0dc:	02faf080 	.word	0x02faf080
 800d0e0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0e8:	e225      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800d0ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0ee:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800d0f2:	430b      	orrs	r3, r1
 800d0f4:	f040 8085 	bne.w	800d202 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800d0f8:	4b9c      	ldr	r3, [pc, #624]	@ (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d0fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0fc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800d100:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800d102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d104:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d108:	d06b      	beq.n	800d1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800d10a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d10c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d110:	d874      	bhi.n	800d1fc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d114:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d118:	d056      	beq.n	800d1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800d11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d11c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d120:	d86c      	bhi.n	800d1fc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d124:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d128:	d03b      	beq.n	800d1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800d12a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d12c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d130:	d864      	bhi.n	800d1fc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d134:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d138:	d021      	beq.n	800d17e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800d13a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d13c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d140:	d85c      	bhi.n	800d1fc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d144:	2b00      	cmp	r3, #0
 800d146:	d004      	beq.n	800d152 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800d148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d14a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d14e:	d004      	beq.n	800d15a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800d150:	e054      	b.n	800d1fc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800d152:	f7fe fb5f 	bl	800b814 <HAL_RCC_GetPCLK1Freq>
 800d156:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d158:	e1ed      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d15a:	4b84      	ldr	r3, [pc, #528]	@ (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d162:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d166:	d107      	bne.n	800d178 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d168:	f107 0318 	add.w	r3, r7, #24
 800d16c:	4618      	mov	r0, r3
 800d16e:	f000 fa05 	bl	800d57c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d172:	69fb      	ldr	r3, [r7, #28]
 800d174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d176:	e1de      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d178:	2300      	movs	r3, #0
 800d17a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d17c:	e1db      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d17e:	4b7b      	ldr	r3, [pc, #492]	@ (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d186:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d18a:	d107      	bne.n	800d19c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d18c:	f107 030c 	add.w	r3, r7, #12
 800d190:	4618      	mov	r0, r3
 800d192:	f000 fb47 	bl	800d824 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d19a:	e1cc      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d19c:	2300      	movs	r3, #0
 800d19e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1a0:	e1c9      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d1a2:	4b72      	ldr	r3, [pc, #456]	@ (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f003 0304 	and.w	r3, r3, #4
 800d1aa:	2b04      	cmp	r3, #4
 800d1ac:	d109      	bne.n	800d1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d1ae:	4b6f      	ldr	r3, [pc, #444]	@ (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	08db      	lsrs	r3, r3, #3
 800d1b4:	f003 0303 	and.w	r3, r3, #3
 800d1b8:	4a6d      	ldr	r2, [pc, #436]	@ (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d1ba:	fa22 f303 	lsr.w	r3, r2, r3
 800d1be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1c0:	e1b9      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1c6:	e1b6      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d1c8:	4b68      	ldr	r3, [pc, #416]	@ (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d1d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d1d4:	d102      	bne.n	800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800d1d6:	4b67      	ldr	r3, [pc, #412]	@ (800d374 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d1d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1da:	e1ac      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1e0:	e1a9      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d1e2:	4b62      	ldr	r3, [pc, #392]	@ (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d1ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d1ee:	d102      	bne.n	800d1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800d1f0:	4b61      	ldr	r3, [pc, #388]	@ (800d378 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d1f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1f4:	e19f      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1fa:	e19c      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d200:	e199      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d202:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d206:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800d20a:	430b      	orrs	r3, r1
 800d20c:	d173      	bne.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d20e:	4b57      	ldr	r3, [pc, #348]	@ (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d212:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d216:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d21a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d21e:	d02f      	beq.n	800d280 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800d220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d222:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d226:	d863      	bhi.n	800d2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800d228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d004      	beq.n	800d238 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800d22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d234:	d012      	beq.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800d236:	e05b      	b.n	800d2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d238:	4b4c      	ldr	r3, [pc, #304]	@ (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d240:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d244:	d107      	bne.n	800d256 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d246:	f107 0318 	add.w	r3, r7, #24
 800d24a:	4618      	mov	r0, r3
 800d24c:	f000 f996 	bl	800d57c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d250:	69bb      	ldr	r3, [r7, #24]
 800d252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d254:	e16f      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d256:	2300      	movs	r3, #0
 800d258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d25a:	e16c      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d25c:	4b43      	ldr	r3, [pc, #268]	@ (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d264:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d268:	d107      	bne.n	800d27a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d26a:	f107 030c 	add.w	r3, r7, #12
 800d26e:	4618      	mov	r0, r3
 800d270:	f000 fad8 	bl	800d824 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d278:	e15d      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d27a:	2300      	movs	r3, #0
 800d27c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d27e:	e15a      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d280:	4b3a      	ldr	r3, [pc, #232]	@ (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d284:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d288:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d28a:	4b38      	ldr	r3, [pc, #224]	@ (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f003 0304 	and.w	r3, r3, #4
 800d292:	2b04      	cmp	r3, #4
 800d294:	d10c      	bne.n	800d2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800d296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d109      	bne.n	800d2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d29c:	4b33      	ldr	r3, [pc, #204]	@ (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	08db      	lsrs	r3, r3, #3
 800d2a2:	f003 0303 	and.w	r3, r3, #3
 800d2a6:	4a32      	ldr	r2, [pc, #200]	@ (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d2a8:	fa22 f303 	lsr.w	r3, r2, r3
 800d2ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d2ae:	e01e      	b.n	800d2ee <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d2b0:	4b2e      	ldr	r3, [pc, #184]	@ (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d2b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d2bc:	d106      	bne.n	800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800d2be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d2c4:	d102      	bne.n	800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d2c6:	4b2b      	ldr	r3, [pc, #172]	@ (800d374 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d2c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d2ca:	e010      	b.n	800d2ee <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d2cc:	4b27      	ldr	r3, [pc, #156]	@ (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d2d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d2d8:	d106      	bne.n	800d2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800d2da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d2e0:	d102      	bne.n	800d2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d2e2:	4b25      	ldr	r3, [pc, #148]	@ (800d378 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d2e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d2e6:	e002      	b.n	800d2ee <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d2ec:	e123      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d2ee:	e122      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2f4:	e11f      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d2f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2fa:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800d2fe:	430b      	orrs	r3, r1
 800d300:	d13c      	bne.n	800d37c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d302:	4b1a      	ldr	r3, [pc, #104]	@ (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d306:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d30a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d004      	beq.n	800d31c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800d312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d318:	d012      	beq.n	800d340 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800d31a:	e023      	b.n	800d364 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d31c:	4b13      	ldr	r3, [pc, #76]	@ (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d324:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d328:	d107      	bne.n	800d33a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d32a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d32e:	4618      	mov	r0, r3
 800d330:	f000 fbcc 	bl	800dacc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d338:	e0fd      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d33a:	2300      	movs	r3, #0
 800d33c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d33e:	e0fa      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d340:	4b0a      	ldr	r3, [pc, #40]	@ (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d348:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d34c:	d107      	bne.n	800d35e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d34e:	f107 0318 	add.w	r3, r7, #24
 800d352:	4618      	mov	r0, r3
 800d354:	f000 f912 	bl	800d57c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d358:	6a3b      	ldr	r3, [r7, #32]
 800d35a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d35c:	e0eb      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d35e:	2300      	movs	r3, #0
 800d360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d362:	e0e8      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d364:	2300      	movs	r3, #0
 800d366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d368:	e0e5      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d36a:	bf00      	nop
 800d36c:	58024400 	.word	0x58024400
 800d370:	03d09000 	.word	0x03d09000
 800d374:	003d0900 	.word	0x003d0900
 800d378:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d37c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d380:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800d384:	430b      	orrs	r3, r1
 800d386:	f040 8085 	bne.w	800d494 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d38a:	4b6d      	ldr	r3, [pc, #436]	@ (800d540 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d38c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d38e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800d392:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d396:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d39a:	d06b      	beq.n	800d474 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800d39c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d39e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d3a2:	d874      	bhi.n	800d48e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d3aa:	d056      	beq.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800d3ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d3b2:	d86c      	bhi.n	800d48e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d3b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d3ba:	d03b      	beq.n	800d434 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800d3bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d3c2:	d864      	bhi.n	800d48e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d3c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d3ca:	d021      	beq.n	800d410 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800d3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d3d2:	d85c      	bhi.n	800d48e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d3d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d004      	beq.n	800d3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800d3da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d3e0:	d004      	beq.n	800d3ec <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800d3e2:	e054      	b.n	800d48e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d3e4:	f000 f8b4 	bl	800d550 <HAL_RCCEx_GetD3PCLK1Freq>
 800d3e8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d3ea:	e0a4      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d3ec:	4b54      	ldr	r3, [pc, #336]	@ (800d540 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d3f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d3f8:	d107      	bne.n	800d40a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3fa:	f107 0318 	add.w	r3, r7, #24
 800d3fe:	4618      	mov	r0, r3
 800d400:	f000 f8bc 	bl	800d57c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d404:	69fb      	ldr	r3, [r7, #28]
 800d406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d408:	e095      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d40a:	2300      	movs	r3, #0
 800d40c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d40e:	e092      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d410:	4b4b      	ldr	r3, [pc, #300]	@ (800d540 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d418:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d41c:	d107      	bne.n	800d42e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d41e:	f107 030c 	add.w	r3, r7, #12
 800d422:	4618      	mov	r0, r3
 800d424:	f000 f9fe 	bl	800d824 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d42c:	e083      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d42e:	2300      	movs	r3, #0
 800d430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d432:	e080      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d434:	4b42      	ldr	r3, [pc, #264]	@ (800d540 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f003 0304 	and.w	r3, r3, #4
 800d43c:	2b04      	cmp	r3, #4
 800d43e:	d109      	bne.n	800d454 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d440:	4b3f      	ldr	r3, [pc, #252]	@ (800d540 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	08db      	lsrs	r3, r3, #3
 800d446:	f003 0303 	and.w	r3, r3, #3
 800d44a:	4a3e      	ldr	r2, [pc, #248]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800d44c:	fa22 f303 	lsr.w	r3, r2, r3
 800d450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d452:	e070      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d454:	2300      	movs	r3, #0
 800d456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d458:	e06d      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d45a:	4b39      	ldr	r3, [pc, #228]	@ (800d540 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d462:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d466:	d102      	bne.n	800d46e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800d468:	4b37      	ldr	r3, [pc, #220]	@ (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d46a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d46c:	e063      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d46e:	2300      	movs	r3, #0
 800d470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d472:	e060      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d474:	4b32      	ldr	r3, [pc, #200]	@ (800d540 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d47c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d480:	d102      	bne.n	800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800d482:	4b32      	ldr	r3, [pc, #200]	@ (800d54c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d486:	e056      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d488:	2300      	movs	r3, #0
 800d48a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d48c:	e053      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d48e:	2300      	movs	r3, #0
 800d490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d492:	e050      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d494:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d498:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800d49c:	430b      	orrs	r3, r1
 800d49e:	d148      	bne.n	800d532 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d4a0:	4b27      	ldr	r3, [pc, #156]	@ (800d540 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d4a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d4a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d4a8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d4aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d4b0:	d02a      	beq.n	800d508 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800d4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d4b8:	d838      	bhi.n	800d52c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800d4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d004      	beq.n	800d4ca <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800d4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d4c6:	d00d      	beq.n	800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800d4c8:	e030      	b.n	800d52c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d4ca:	4b1d      	ldr	r3, [pc, #116]	@ (800d540 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d4d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d4d6:	d102      	bne.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800d4d8:	4b1c      	ldr	r3, [pc, #112]	@ (800d54c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d4da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d4dc:	e02b      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4e2:	e028      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d4e4:	4b16      	ldr	r3, [pc, #88]	@ (800d540 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d4ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d4f0:	d107      	bne.n	800d502 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d4f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f000 fae8 	bl	800dacc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d500:	e019      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d502:	2300      	movs	r3, #0
 800d504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d506:	e016      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d508:	4b0d      	ldr	r3, [pc, #52]	@ (800d540 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d510:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d514:	d107      	bne.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d516:	f107 0318 	add.w	r3, r7, #24
 800d51a:	4618      	mov	r0, r3
 800d51c:	f000 f82e 	bl	800d57c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d520:	69fb      	ldr	r3, [r7, #28]
 800d522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d524:	e007      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d526:	2300      	movs	r3, #0
 800d528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d52a:	e004      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d52c:	2300      	movs	r3, #0
 800d52e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d530:	e001      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800d532:	2300      	movs	r3, #0
 800d534:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800d536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d538:	4618      	mov	r0, r3
 800d53a:	3740      	adds	r7, #64	@ 0x40
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	58024400 	.word	0x58024400
 800d544:	03d09000 	.word	0x03d09000
 800d548:	003d0900 	.word	0x003d0900
 800d54c:	02faf080 	.word	0x02faf080

0800d550 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d554:	f7fe f92e 	bl	800b7b4 <HAL_RCC_GetHCLKFreq>
 800d558:	4602      	mov	r2, r0
 800d55a:	4b06      	ldr	r3, [pc, #24]	@ (800d574 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d55c:	6a1b      	ldr	r3, [r3, #32]
 800d55e:	091b      	lsrs	r3, r3, #4
 800d560:	f003 0307 	and.w	r3, r3, #7
 800d564:	4904      	ldr	r1, [pc, #16]	@ (800d578 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d566:	5ccb      	ldrb	r3, [r1, r3]
 800d568:	f003 031f 	and.w	r3, r3, #31
 800d56c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d570:	4618      	mov	r0, r3
 800d572:	bd80      	pop	{r7, pc}
 800d574:	58024400 	.word	0x58024400
 800d578:	08020354 	.word	0x08020354

0800d57c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d57c:	b480      	push	{r7}
 800d57e:	b089      	sub	sp, #36	@ 0x24
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d584:	4ba1      	ldr	r3, [pc, #644]	@ (800d80c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d588:	f003 0303 	and.w	r3, r3, #3
 800d58c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d58e:	4b9f      	ldr	r3, [pc, #636]	@ (800d80c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d592:	0b1b      	lsrs	r3, r3, #12
 800d594:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d598:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d59a:	4b9c      	ldr	r3, [pc, #624]	@ (800d80c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d59c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d59e:	091b      	lsrs	r3, r3, #4
 800d5a0:	f003 0301 	and.w	r3, r3, #1
 800d5a4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d5a6:	4b99      	ldr	r3, [pc, #612]	@ (800d80c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5aa:	08db      	lsrs	r3, r3, #3
 800d5ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d5b0:	693a      	ldr	r2, [r7, #16]
 800d5b2:	fb02 f303 	mul.w	r3, r2, r3
 800d5b6:	ee07 3a90 	vmov	s15, r3
 800d5ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	f000 8111 	beq.w	800d7ec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d5ca:	69bb      	ldr	r3, [r7, #24]
 800d5cc:	2b02      	cmp	r3, #2
 800d5ce:	f000 8083 	beq.w	800d6d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d5d2:	69bb      	ldr	r3, [r7, #24]
 800d5d4:	2b02      	cmp	r3, #2
 800d5d6:	f200 80a1 	bhi.w	800d71c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d5da:	69bb      	ldr	r3, [r7, #24]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d003      	beq.n	800d5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d5e0:	69bb      	ldr	r3, [r7, #24]
 800d5e2:	2b01      	cmp	r3, #1
 800d5e4:	d056      	beq.n	800d694 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d5e6:	e099      	b.n	800d71c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d5e8:	4b88      	ldr	r3, [pc, #544]	@ (800d80c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f003 0320 	and.w	r3, r3, #32
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d02d      	beq.n	800d650 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d5f4:	4b85      	ldr	r3, [pc, #532]	@ (800d80c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	08db      	lsrs	r3, r3, #3
 800d5fa:	f003 0303 	and.w	r3, r3, #3
 800d5fe:	4a84      	ldr	r2, [pc, #528]	@ (800d810 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d600:	fa22 f303 	lsr.w	r3, r2, r3
 800d604:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	ee07 3a90 	vmov	s15, r3
 800d60c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	ee07 3a90 	vmov	s15, r3
 800d616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d61a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d61e:	4b7b      	ldr	r3, [pc, #492]	@ (800d80c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d626:	ee07 3a90 	vmov	s15, r3
 800d62a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d62e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d632:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d814 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d63a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d63e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d64a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d64e:	e087      	b.n	800d760 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d650:	697b      	ldr	r3, [r7, #20]
 800d652:	ee07 3a90 	vmov	s15, r3
 800d656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d65a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d818 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d65e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d662:	4b6a      	ldr	r3, [pc, #424]	@ (800d80c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d66a:	ee07 3a90 	vmov	s15, r3
 800d66e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d672:	ed97 6a03 	vldr	s12, [r7, #12]
 800d676:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d814 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d67a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d67e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d682:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d68a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d68e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d692:	e065      	b.n	800d760 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	ee07 3a90 	vmov	s15, r3
 800d69a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d69e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d81c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d6a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6a6:	4b59      	ldr	r3, [pc, #356]	@ (800d80c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d6a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6ae:	ee07 3a90 	vmov	s15, r3
 800d6b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6ba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d814 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d6be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d6ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6d6:	e043      	b.n	800d760 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	ee07 3a90 	vmov	s15, r3
 800d6de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6e2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d820 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d6e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6ea:	4b48      	ldr	r3, [pc, #288]	@ (800d80c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d6ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6f2:	ee07 3a90 	vmov	s15, r3
 800d6f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6fe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d814 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d70a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d70e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d712:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d716:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d71a:	e021      	b.n	800d760 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d71c:	697b      	ldr	r3, [r7, #20]
 800d71e:	ee07 3a90 	vmov	s15, r3
 800d722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d726:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d81c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d72a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d72e:	4b37      	ldr	r3, [pc, #220]	@ (800d80c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d736:	ee07 3a90 	vmov	s15, r3
 800d73a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d73e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d742:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d814 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d74a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d74e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d75a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d75e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d760:	4b2a      	ldr	r3, [pc, #168]	@ (800d80c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d764:	0a5b      	lsrs	r3, r3, #9
 800d766:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d76a:	ee07 3a90 	vmov	s15, r3
 800d76e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d772:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d776:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d77a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d77e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d786:	ee17 2a90 	vmov	r2, s15
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d78e:	4b1f      	ldr	r3, [pc, #124]	@ (800d80c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d792:	0c1b      	lsrs	r3, r3, #16
 800d794:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d798:	ee07 3a90 	vmov	s15, r3
 800d79c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d7a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7b4:	ee17 2a90 	vmov	r2, s15
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d7bc:	4b13      	ldr	r3, [pc, #76]	@ (800d80c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d7be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7c0:	0e1b      	lsrs	r3, r3, #24
 800d7c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d7c6:	ee07 3a90 	vmov	s15, r3
 800d7ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d7d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7e2:	ee17 2a90 	vmov	r2, s15
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d7ea:	e008      	b.n	800d7fe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	609a      	str	r2, [r3, #8]
}
 800d7fe:	bf00      	nop
 800d800:	3724      	adds	r7, #36	@ 0x24
 800d802:	46bd      	mov	sp, r7
 800d804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d808:	4770      	bx	lr
 800d80a:	bf00      	nop
 800d80c:	58024400 	.word	0x58024400
 800d810:	03d09000 	.word	0x03d09000
 800d814:	46000000 	.word	0x46000000
 800d818:	4c742400 	.word	0x4c742400
 800d81c:	4a742400 	.word	0x4a742400
 800d820:	4c3ebc20 	.word	0x4c3ebc20

0800d824 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d824:	b480      	push	{r7}
 800d826:	b089      	sub	sp, #36	@ 0x24
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d82c:	4ba1      	ldr	r3, [pc, #644]	@ (800dab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d82e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d830:	f003 0303 	and.w	r3, r3, #3
 800d834:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d836:	4b9f      	ldr	r3, [pc, #636]	@ (800dab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d83a:	0d1b      	lsrs	r3, r3, #20
 800d83c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d840:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d842:	4b9c      	ldr	r3, [pc, #624]	@ (800dab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d846:	0a1b      	lsrs	r3, r3, #8
 800d848:	f003 0301 	and.w	r3, r3, #1
 800d84c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d84e:	4b99      	ldr	r3, [pc, #612]	@ (800dab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d852:	08db      	lsrs	r3, r3, #3
 800d854:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d858:	693a      	ldr	r2, [r7, #16]
 800d85a:	fb02 f303 	mul.w	r3, r2, r3
 800d85e:	ee07 3a90 	vmov	s15, r3
 800d862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d866:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	f000 8111 	beq.w	800da94 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d872:	69bb      	ldr	r3, [r7, #24]
 800d874:	2b02      	cmp	r3, #2
 800d876:	f000 8083 	beq.w	800d980 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d87a:	69bb      	ldr	r3, [r7, #24]
 800d87c:	2b02      	cmp	r3, #2
 800d87e:	f200 80a1 	bhi.w	800d9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d882:	69bb      	ldr	r3, [r7, #24]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d003      	beq.n	800d890 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d888:	69bb      	ldr	r3, [r7, #24]
 800d88a:	2b01      	cmp	r3, #1
 800d88c:	d056      	beq.n	800d93c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d88e:	e099      	b.n	800d9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d890:	4b88      	ldr	r3, [pc, #544]	@ (800dab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	f003 0320 	and.w	r3, r3, #32
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d02d      	beq.n	800d8f8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d89c:	4b85      	ldr	r3, [pc, #532]	@ (800dab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	08db      	lsrs	r3, r3, #3
 800d8a2:	f003 0303 	and.w	r3, r3, #3
 800d8a6:	4a84      	ldr	r2, [pc, #528]	@ (800dab8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d8a8:	fa22 f303 	lsr.w	r3, r2, r3
 800d8ac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	ee07 3a90 	vmov	s15, r3
 800d8b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8b8:	697b      	ldr	r3, [r7, #20]
 800d8ba:	ee07 3a90 	vmov	s15, r3
 800d8be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8c6:	4b7b      	ldr	r3, [pc, #492]	@ (800dab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8ce:	ee07 3a90 	vmov	s15, r3
 800d8d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d8da:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800dabc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d8de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d8ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d8f6:	e087      	b.n	800da08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	ee07 3a90 	vmov	s15, r3
 800d8fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d902:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800dac0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d90a:	4b6a      	ldr	r3, [pc, #424]	@ (800dab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d90c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d90e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d912:	ee07 3a90 	vmov	s15, r3
 800d916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d91a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d91e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800dabc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d92a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d92e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d932:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d936:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d93a:	e065      	b.n	800da08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	ee07 3a90 	vmov	s15, r3
 800d942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d946:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800dac4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d94a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d94e:	4b59      	ldr	r3, [pc, #356]	@ (800dab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d956:	ee07 3a90 	vmov	s15, r3
 800d95a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d95e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d962:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800dabc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d96a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d96e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d97a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d97e:	e043      	b.n	800da08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	ee07 3a90 	vmov	s15, r3
 800d986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d98a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800dac8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d98e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d992:	4b48      	ldr	r3, [pc, #288]	@ (800dab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d99a:	ee07 3a90 	vmov	s15, r3
 800d99e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9a6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800dabc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d9aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d9b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9c2:	e021      	b.n	800da08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	ee07 3a90 	vmov	s15, r3
 800d9ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9ce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800dac4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d9d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9d6:	4b37      	ldr	r3, [pc, #220]	@ (800dab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d9d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9de:	ee07 3a90 	vmov	s15, r3
 800d9e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9ea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800dabc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d9ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d9fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da06:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800da08:	4b2a      	ldr	r3, [pc, #168]	@ (800dab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da0c:	0a5b      	lsrs	r3, r3, #9
 800da0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da12:	ee07 3a90 	vmov	s15, r3
 800da16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800da1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da22:	edd7 6a07 	vldr	s13, [r7, #28]
 800da26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da2e:	ee17 2a90 	vmov	r2, s15
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800da36:	4b1f      	ldr	r3, [pc, #124]	@ (800dab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da3a:	0c1b      	lsrs	r3, r3, #16
 800da3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da40:	ee07 3a90 	vmov	s15, r3
 800da44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800da4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da50:	edd7 6a07 	vldr	s13, [r7, #28]
 800da54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da5c:	ee17 2a90 	vmov	r2, s15
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800da64:	4b13      	ldr	r3, [pc, #76]	@ (800dab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da68:	0e1b      	lsrs	r3, r3, #24
 800da6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da6e:	ee07 3a90 	vmov	s15, r3
 800da72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800da7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da7e:	edd7 6a07 	vldr	s13, [r7, #28]
 800da82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da8a:	ee17 2a90 	vmov	r2, s15
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800da92:	e008      	b.n	800daa6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2200      	movs	r2, #0
 800da98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2200      	movs	r2, #0
 800da9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2200      	movs	r2, #0
 800daa4:	609a      	str	r2, [r3, #8]
}
 800daa6:	bf00      	nop
 800daa8:	3724      	adds	r7, #36	@ 0x24
 800daaa:	46bd      	mov	sp, r7
 800daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab0:	4770      	bx	lr
 800dab2:	bf00      	nop
 800dab4:	58024400 	.word	0x58024400
 800dab8:	03d09000 	.word	0x03d09000
 800dabc:	46000000 	.word	0x46000000
 800dac0:	4c742400 	.word	0x4c742400
 800dac4:	4a742400 	.word	0x4a742400
 800dac8:	4c3ebc20 	.word	0x4c3ebc20

0800dacc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800dacc:	b480      	push	{r7}
 800dace:	b089      	sub	sp, #36	@ 0x24
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dad4:	4ba0      	ldr	r3, [pc, #640]	@ (800dd58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dad8:	f003 0303 	and.w	r3, r3, #3
 800dadc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800dade:	4b9e      	ldr	r3, [pc, #632]	@ (800dd58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dae2:	091b      	lsrs	r3, r3, #4
 800dae4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dae8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800daea:	4b9b      	ldr	r3, [pc, #620]	@ (800dd58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800daec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800daee:	f003 0301 	and.w	r3, r3, #1
 800daf2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800daf4:	4b98      	ldr	r3, [pc, #608]	@ (800dd58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800daf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800daf8:	08db      	lsrs	r3, r3, #3
 800dafa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dafe:	693a      	ldr	r2, [r7, #16]
 800db00:	fb02 f303 	mul.w	r3, r2, r3
 800db04:	ee07 3a90 	vmov	s15, r3
 800db08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db0c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	2b00      	cmp	r3, #0
 800db14:	f000 8111 	beq.w	800dd3a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800db18:	69bb      	ldr	r3, [r7, #24]
 800db1a:	2b02      	cmp	r3, #2
 800db1c:	f000 8083 	beq.w	800dc26 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800db20:	69bb      	ldr	r3, [r7, #24]
 800db22:	2b02      	cmp	r3, #2
 800db24:	f200 80a1 	bhi.w	800dc6a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800db28:	69bb      	ldr	r3, [r7, #24]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d003      	beq.n	800db36 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800db2e:	69bb      	ldr	r3, [r7, #24]
 800db30:	2b01      	cmp	r3, #1
 800db32:	d056      	beq.n	800dbe2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800db34:	e099      	b.n	800dc6a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db36:	4b88      	ldr	r3, [pc, #544]	@ (800dd58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f003 0320 	and.w	r3, r3, #32
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d02d      	beq.n	800db9e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800db42:	4b85      	ldr	r3, [pc, #532]	@ (800dd58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	08db      	lsrs	r3, r3, #3
 800db48:	f003 0303 	and.w	r3, r3, #3
 800db4c:	4a83      	ldr	r2, [pc, #524]	@ (800dd5c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800db4e:	fa22 f303 	lsr.w	r3, r2, r3
 800db52:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	ee07 3a90 	vmov	s15, r3
 800db5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	ee07 3a90 	vmov	s15, r3
 800db64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db6c:	4b7a      	ldr	r3, [pc, #488]	@ (800dd58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db74:	ee07 3a90 	vmov	s15, r3
 800db78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db7c:	ed97 6a03 	vldr	s12, [r7, #12]
 800db80:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800dd60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800db84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800db90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db98:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800db9c:	e087      	b.n	800dcae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	ee07 3a90 	vmov	s15, r3
 800dba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dba8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800dd64 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800dbac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dbb0:	4b69      	ldr	r3, [pc, #420]	@ (800dd58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dbb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbb8:	ee07 3a90 	vmov	s15, r3
 800dbbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dbc0:	ed97 6a03 	vldr	s12, [r7, #12]
 800dbc4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800dd60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dbc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dbcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dbd0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dbd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dbd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbdc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dbe0:	e065      	b.n	800dcae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dbe2:	697b      	ldr	r3, [r7, #20]
 800dbe4:	ee07 3a90 	vmov	s15, r3
 800dbe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbec:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800dd68 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800dbf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dbf4:	4b58      	ldr	r3, [pc, #352]	@ (800dd58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dbf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbfc:	ee07 3a90 	vmov	s15, r3
 800dc00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc04:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc08:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800dd60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dc0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dc18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dc24:	e043      	b.n	800dcae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	ee07 3a90 	vmov	s15, r3
 800dc2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc30:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800dd6c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800dc34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc38:	4b47      	ldr	r3, [pc, #284]	@ (800dd58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc40:	ee07 3a90 	vmov	s15, r3
 800dc44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc48:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc4c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800dd60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dc50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dc5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dc68:	e021      	b.n	800dcae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	ee07 3a90 	vmov	s15, r3
 800dc70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc74:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800dd64 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800dc78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc7c:	4b36      	ldr	r3, [pc, #216]	@ (800dd58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc84:	ee07 3a90 	vmov	s15, r3
 800dc88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc8c:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc90:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800dd60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dc94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dca0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dca8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dcac:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800dcae:	4b2a      	ldr	r3, [pc, #168]	@ (800dd58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dcb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dcb2:	0a5b      	lsrs	r3, r3, #9
 800dcb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dcb8:	ee07 3a90 	vmov	s15, r3
 800dcbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcc0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dcc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dcc8:	edd7 6a07 	vldr	s13, [r7, #28]
 800dccc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dcd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dcd4:	ee17 2a90 	vmov	r2, s15
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800dcdc:	4b1e      	ldr	r3, [pc, #120]	@ (800dd58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dcde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dce0:	0c1b      	lsrs	r3, r3, #16
 800dce2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dce6:	ee07 3a90 	vmov	s15, r3
 800dcea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dcf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dcf6:	edd7 6a07 	vldr	s13, [r7, #28]
 800dcfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dcfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd02:	ee17 2a90 	vmov	r2, s15
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800dd0a:	4b13      	ldr	r3, [pc, #76]	@ (800dd58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd0e:	0e1b      	lsrs	r3, r3, #24
 800dd10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd14:	ee07 3a90 	vmov	s15, r3
 800dd18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dd20:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dd24:	edd7 6a07 	vldr	s13, [r7, #28]
 800dd28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd30:	ee17 2a90 	vmov	r2, s15
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800dd38:	e008      	b.n	800dd4c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2200      	movs	r2, #0
 800dd44:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2200      	movs	r2, #0
 800dd4a:	609a      	str	r2, [r3, #8]
}
 800dd4c:	bf00      	nop
 800dd4e:	3724      	adds	r7, #36	@ 0x24
 800dd50:	46bd      	mov	sp, r7
 800dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd56:	4770      	bx	lr
 800dd58:	58024400 	.word	0x58024400
 800dd5c:	03d09000 	.word	0x03d09000
 800dd60:	46000000 	.word	0x46000000
 800dd64:	4c742400 	.word	0x4c742400
 800dd68:	4a742400 	.word	0x4a742400
 800dd6c:	4c3ebc20 	.word	0x4c3ebc20

0800dd70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b084      	sub	sp, #16
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dd7e:	4b53      	ldr	r3, [pc, #332]	@ (800decc <RCCEx_PLL2_Config+0x15c>)
 800dd80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd82:	f003 0303 	and.w	r3, r3, #3
 800dd86:	2b03      	cmp	r3, #3
 800dd88:	d101      	bne.n	800dd8e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	e099      	b.n	800dec2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800dd8e:	4b4f      	ldr	r3, [pc, #316]	@ (800decc <RCCEx_PLL2_Config+0x15c>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	4a4e      	ldr	r2, [pc, #312]	@ (800decc <RCCEx_PLL2_Config+0x15c>)
 800dd94:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dd98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd9a:	f7f6 fa2f 	bl	80041fc <HAL_GetTick>
 800dd9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dda0:	e008      	b.n	800ddb4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dda2:	f7f6 fa2b 	bl	80041fc <HAL_GetTick>
 800dda6:	4602      	mov	r2, r0
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	1ad3      	subs	r3, r2, r3
 800ddac:	2b02      	cmp	r3, #2
 800ddae:	d901      	bls.n	800ddb4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ddb0:	2303      	movs	r3, #3
 800ddb2:	e086      	b.n	800dec2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ddb4:	4b45      	ldr	r3, [pc, #276]	@ (800decc <RCCEx_PLL2_Config+0x15c>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d1f0      	bne.n	800dda2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ddc0:	4b42      	ldr	r3, [pc, #264]	@ (800decc <RCCEx_PLL2_Config+0x15c>)
 800ddc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddc4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	031b      	lsls	r3, r3, #12
 800ddce:	493f      	ldr	r1, [pc, #252]	@ (800decc <RCCEx_PLL2_Config+0x15c>)
 800ddd0:	4313      	orrs	r3, r2
 800ddd2:	628b      	str	r3, [r1, #40]	@ 0x28
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	685b      	ldr	r3, [r3, #4]
 800ddd8:	3b01      	subs	r3, #1
 800ddda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	689b      	ldr	r3, [r3, #8]
 800dde2:	3b01      	subs	r3, #1
 800dde4:	025b      	lsls	r3, r3, #9
 800dde6:	b29b      	uxth	r3, r3
 800dde8:	431a      	orrs	r2, r3
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	68db      	ldr	r3, [r3, #12]
 800ddee:	3b01      	subs	r3, #1
 800ddf0:	041b      	lsls	r3, r3, #16
 800ddf2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ddf6:	431a      	orrs	r2, r3
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	691b      	ldr	r3, [r3, #16]
 800ddfc:	3b01      	subs	r3, #1
 800ddfe:	061b      	lsls	r3, r3, #24
 800de00:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800de04:	4931      	ldr	r1, [pc, #196]	@ (800decc <RCCEx_PLL2_Config+0x15c>)
 800de06:	4313      	orrs	r3, r2
 800de08:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800de0a:	4b30      	ldr	r3, [pc, #192]	@ (800decc <RCCEx_PLL2_Config+0x15c>)
 800de0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de0e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	695b      	ldr	r3, [r3, #20]
 800de16:	492d      	ldr	r1, [pc, #180]	@ (800decc <RCCEx_PLL2_Config+0x15c>)
 800de18:	4313      	orrs	r3, r2
 800de1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800de1c:	4b2b      	ldr	r3, [pc, #172]	@ (800decc <RCCEx_PLL2_Config+0x15c>)
 800de1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de20:	f023 0220 	bic.w	r2, r3, #32
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	699b      	ldr	r3, [r3, #24]
 800de28:	4928      	ldr	r1, [pc, #160]	@ (800decc <RCCEx_PLL2_Config+0x15c>)
 800de2a:	4313      	orrs	r3, r2
 800de2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800de2e:	4b27      	ldr	r3, [pc, #156]	@ (800decc <RCCEx_PLL2_Config+0x15c>)
 800de30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de32:	4a26      	ldr	r2, [pc, #152]	@ (800decc <RCCEx_PLL2_Config+0x15c>)
 800de34:	f023 0310 	bic.w	r3, r3, #16
 800de38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800de3a:	4b24      	ldr	r3, [pc, #144]	@ (800decc <RCCEx_PLL2_Config+0x15c>)
 800de3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800de3e:	4b24      	ldr	r3, [pc, #144]	@ (800ded0 <RCCEx_PLL2_Config+0x160>)
 800de40:	4013      	ands	r3, r2
 800de42:	687a      	ldr	r2, [r7, #4]
 800de44:	69d2      	ldr	r2, [r2, #28]
 800de46:	00d2      	lsls	r2, r2, #3
 800de48:	4920      	ldr	r1, [pc, #128]	@ (800decc <RCCEx_PLL2_Config+0x15c>)
 800de4a:	4313      	orrs	r3, r2
 800de4c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800de4e:	4b1f      	ldr	r3, [pc, #124]	@ (800decc <RCCEx_PLL2_Config+0x15c>)
 800de50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de52:	4a1e      	ldr	r2, [pc, #120]	@ (800decc <RCCEx_PLL2_Config+0x15c>)
 800de54:	f043 0310 	orr.w	r3, r3, #16
 800de58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d106      	bne.n	800de6e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800de60:	4b1a      	ldr	r3, [pc, #104]	@ (800decc <RCCEx_PLL2_Config+0x15c>)
 800de62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de64:	4a19      	ldr	r2, [pc, #100]	@ (800decc <RCCEx_PLL2_Config+0x15c>)
 800de66:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800de6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800de6c:	e00f      	b.n	800de8e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	2b01      	cmp	r3, #1
 800de72:	d106      	bne.n	800de82 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800de74:	4b15      	ldr	r3, [pc, #84]	@ (800decc <RCCEx_PLL2_Config+0x15c>)
 800de76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de78:	4a14      	ldr	r2, [pc, #80]	@ (800decc <RCCEx_PLL2_Config+0x15c>)
 800de7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800de7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800de80:	e005      	b.n	800de8e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800de82:	4b12      	ldr	r3, [pc, #72]	@ (800decc <RCCEx_PLL2_Config+0x15c>)
 800de84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de86:	4a11      	ldr	r2, [pc, #68]	@ (800decc <RCCEx_PLL2_Config+0x15c>)
 800de88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800de8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800de8e:	4b0f      	ldr	r3, [pc, #60]	@ (800decc <RCCEx_PLL2_Config+0x15c>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	4a0e      	ldr	r2, [pc, #56]	@ (800decc <RCCEx_PLL2_Config+0x15c>)
 800de94:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800de98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de9a:	f7f6 f9af 	bl	80041fc <HAL_GetTick>
 800de9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dea0:	e008      	b.n	800deb4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dea2:	f7f6 f9ab 	bl	80041fc <HAL_GetTick>
 800dea6:	4602      	mov	r2, r0
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	1ad3      	subs	r3, r2, r3
 800deac:	2b02      	cmp	r3, #2
 800deae:	d901      	bls.n	800deb4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800deb0:	2303      	movs	r3, #3
 800deb2:	e006      	b.n	800dec2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800deb4:	4b05      	ldr	r3, [pc, #20]	@ (800decc <RCCEx_PLL2_Config+0x15c>)
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800debc:	2b00      	cmp	r3, #0
 800debe:	d0f0      	beq.n	800dea2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800dec0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	3710      	adds	r7, #16
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}
 800deca:	bf00      	nop
 800decc:	58024400 	.word	0x58024400
 800ded0:	ffff0007 	.word	0xffff0007

0800ded4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b084      	sub	sp, #16
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
 800dedc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dede:	2300      	movs	r3, #0
 800dee0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dee2:	4b53      	ldr	r3, [pc, #332]	@ (800e030 <RCCEx_PLL3_Config+0x15c>)
 800dee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dee6:	f003 0303 	and.w	r3, r3, #3
 800deea:	2b03      	cmp	r3, #3
 800deec:	d101      	bne.n	800def2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800deee:	2301      	movs	r3, #1
 800def0:	e099      	b.n	800e026 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800def2:	4b4f      	ldr	r3, [pc, #316]	@ (800e030 <RCCEx_PLL3_Config+0x15c>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	4a4e      	ldr	r2, [pc, #312]	@ (800e030 <RCCEx_PLL3_Config+0x15c>)
 800def8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800defc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800defe:	f7f6 f97d 	bl	80041fc <HAL_GetTick>
 800df02:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800df04:	e008      	b.n	800df18 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800df06:	f7f6 f979 	bl	80041fc <HAL_GetTick>
 800df0a:	4602      	mov	r2, r0
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	1ad3      	subs	r3, r2, r3
 800df10:	2b02      	cmp	r3, #2
 800df12:	d901      	bls.n	800df18 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800df14:	2303      	movs	r3, #3
 800df16:	e086      	b.n	800e026 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800df18:	4b45      	ldr	r3, [pc, #276]	@ (800e030 <RCCEx_PLL3_Config+0x15c>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800df20:	2b00      	cmp	r3, #0
 800df22:	d1f0      	bne.n	800df06 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800df24:	4b42      	ldr	r3, [pc, #264]	@ (800e030 <RCCEx_PLL3_Config+0x15c>)
 800df26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df28:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	051b      	lsls	r3, r3, #20
 800df32:	493f      	ldr	r1, [pc, #252]	@ (800e030 <RCCEx_PLL3_Config+0x15c>)
 800df34:	4313      	orrs	r3, r2
 800df36:	628b      	str	r3, [r1, #40]	@ 0x28
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	685b      	ldr	r3, [r3, #4]
 800df3c:	3b01      	subs	r3, #1
 800df3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	689b      	ldr	r3, [r3, #8]
 800df46:	3b01      	subs	r3, #1
 800df48:	025b      	lsls	r3, r3, #9
 800df4a:	b29b      	uxth	r3, r3
 800df4c:	431a      	orrs	r2, r3
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	68db      	ldr	r3, [r3, #12]
 800df52:	3b01      	subs	r3, #1
 800df54:	041b      	lsls	r3, r3, #16
 800df56:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800df5a:	431a      	orrs	r2, r3
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	691b      	ldr	r3, [r3, #16]
 800df60:	3b01      	subs	r3, #1
 800df62:	061b      	lsls	r3, r3, #24
 800df64:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800df68:	4931      	ldr	r1, [pc, #196]	@ (800e030 <RCCEx_PLL3_Config+0x15c>)
 800df6a:	4313      	orrs	r3, r2
 800df6c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800df6e:	4b30      	ldr	r3, [pc, #192]	@ (800e030 <RCCEx_PLL3_Config+0x15c>)
 800df70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df72:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	695b      	ldr	r3, [r3, #20]
 800df7a:	492d      	ldr	r1, [pc, #180]	@ (800e030 <RCCEx_PLL3_Config+0x15c>)
 800df7c:	4313      	orrs	r3, r2
 800df7e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800df80:	4b2b      	ldr	r3, [pc, #172]	@ (800e030 <RCCEx_PLL3_Config+0x15c>)
 800df82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df84:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	699b      	ldr	r3, [r3, #24]
 800df8c:	4928      	ldr	r1, [pc, #160]	@ (800e030 <RCCEx_PLL3_Config+0x15c>)
 800df8e:	4313      	orrs	r3, r2
 800df90:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800df92:	4b27      	ldr	r3, [pc, #156]	@ (800e030 <RCCEx_PLL3_Config+0x15c>)
 800df94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df96:	4a26      	ldr	r2, [pc, #152]	@ (800e030 <RCCEx_PLL3_Config+0x15c>)
 800df98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800df9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800df9e:	4b24      	ldr	r3, [pc, #144]	@ (800e030 <RCCEx_PLL3_Config+0x15c>)
 800dfa0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dfa2:	4b24      	ldr	r3, [pc, #144]	@ (800e034 <RCCEx_PLL3_Config+0x160>)
 800dfa4:	4013      	ands	r3, r2
 800dfa6:	687a      	ldr	r2, [r7, #4]
 800dfa8:	69d2      	ldr	r2, [r2, #28]
 800dfaa:	00d2      	lsls	r2, r2, #3
 800dfac:	4920      	ldr	r1, [pc, #128]	@ (800e030 <RCCEx_PLL3_Config+0x15c>)
 800dfae:	4313      	orrs	r3, r2
 800dfb0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800dfb2:	4b1f      	ldr	r3, [pc, #124]	@ (800e030 <RCCEx_PLL3_Config+0x15c>)
 800dfb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfb6:	4a1e      	ldr	r2, [pc, #120]	@ (800e030 <RCCEx_PLL3_Config+0x15c>)
 800dfb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dfbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d106      	bne.n	800dfd2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dfc4:	4b1a      	ldr	r3, [pc, #104]	@ (800e030 <RCCEx_PLL3_Config+0x15c>)
 800dfc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfc8:	4a19      	ldr	r2, [pc, #100]	@ (800e030 <RCCEx_PLL3_Config+0x15c>)
 800dfca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800dfce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dfd0:	e00f      	b.n	800dff2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	2b01      	cmp	r3, #1
 800dfd6:	d106      	bne.n	800dfe6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800dfd8:	4b15      	ldr	r3, [pc, #84]	@ (800e030 <RCCEx_PLL3_Config+0x15c>)
 800dfda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfdc:	4a14      	ldr	r2, [pc, #80]	@ (800e030 <RCCEx_PLL3_Config+0x15c>)
 800dfde:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800dfe2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dfe4:	e005      	b.n	800dff2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800dfe6:	4b12      	ldr	r3, [pc, #72]	@ (800e030 <RCCEx_PLL3_Config+0x15c>)
 800dfe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfea:	4a11      	ldr	r2, [pc, #68]	@ (800e030 <RCCEx_PLL3_Config+0x15c>)
 800dfec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dff0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800dff2:	4b0f      	ldr	r3, [pc, #60]	@ (800e030 <RCCEx_PLL3_Config+0x15c>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	4a0e      	ldr	r2, [pc, #56]	@ (800e030 <RCCEx_PLL3_Config+0x15c>)
 800dff8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dffc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dffe:	f7f6 f8fd 	bl	80041fc <HAL_GetTick>
 800e002:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e004:	e008      	b.n	800e018 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e006:	f7f6 f8f9 	bl	80041fc <HAL_GetTick>
 800e00a:	4602      	mov	r2, r0
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	1ad3      	subs	r3, r2, r3
 800e010:	2b02      	cmp	r3, #2
 800e012:	d901      	bls.n	800e018 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e014:	2303      	movs	r3, #3
 800e016:	e006      	b.n	800e026 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e018:	4b05      	ldr	r3, [pc, #20]	@ (800e030 <RCCEx_PLL3_Config+0x15c>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e020:	2b00      	cmp	r3, #0
 800e022:	d0f0      	beq.n	800e006 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e024:	7bfb      	ldrb	r3, [r7, #15]
}
 800e026:	4618      	mov	r0, r3
 800e028:	3710      	adds	r7, #16
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}
 800e02e:	bf00      	nop
 800e030:	58024400 	.word	0x58024400
 800e034:	ffff0007 	.word	0xffff0007

0800e038 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b084      	sub	sp, #16
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d101      	bne.n	800e04a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800e046:	2301      	movs	r3, #1
 800e048:	e092      	b.n	800e170 <HAL_RNG_Init+0x138>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	7a5b      	ldrb	r3, [r3, #9]
 800e04e:	b2db      	uxtb	r3, r3
 800e050:	2b00      	cmp	r3, #0
 800e052:	d105      	bne.n	800e060 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2200      	movs	r2, #0
 800e058:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f7f5 f926 	bl	80032ac <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2202      	movs	r2, #2
 800e064:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	681a      	ldr	r2, [r3, #0]
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	f022 0204 	bic.w	r2, r2, #4
 800e074:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	681a      	ldr	r2, [r3, #0]
 800e07c:	4b3e      	ldr	r3, [pc, #248]	@ (800e178 <HAL_RNG_Init+0x140>)
 800e07e:	4013      	ands	r3, r2
 800e080:	687a      	ldr	r2, [r7, #4]
 800e082:	6852      	ldr	r2, [r2, #4]
 800e084:	431a      	orrs	r2, r3
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800e08e:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	4a39      	ldr	r2, [pc, #228]	@ (800e17c <HAL_RNG_Init+0x144>)
 800e096:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	f247 2274 	movw	r2, #29300	@ 0x7274
 800e0a0:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	681a      	ldr	r2, [r3, #0]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800e0b0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e0b2:	f7f6 f8a3 	bl	80041fc <HAL_GetTick>
 800e0b6:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800e0b8:	e016      	b.n	800e0e8 <HAL_RNG_Init+0xb0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800e0ba:	f7f6 f89f 	bl	80041fc <HAL_GetTick>
 800e0be:	4602      	mov	r2, r0
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	1ad3      	subs	r3, r2, r3
 800e0c4:	2b02      	cmp	r3, #2
 800e0c6:	d90f      	bls.n	800e0e8 <HAL_RNG_Init+0xb0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e0d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e0d6:	d107      	bne.n	800e0e8 <HAL_RNG_Init+0xb0>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2201      	movs	r2, #1
 800e0dc:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	2202      	movs	r2, #2
 800e0e2:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	e043      	b.n	800e170 <HAL_RNG_Init+0x138>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e0f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e0f6:	d0e0      	beq.n	800e0ba <HAL_RNG_Init+0x82>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	681a      	ldr	r2, [r3, #0]
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	f042 0204 	orr.w	r2, r2, #4
 800e106:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	685b      	ldr	r3, [r3, #4]
 800e10e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e112:	2b40      	cmp	r3, #64	@ 0x40
 800e114:	d104      	bne.n	800e120 <HAL_RNG_Init+0xe8>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2204      	movs	r2, #4
 800e11a:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800e11c:	2301      	movs	r3, #1
 800e11e:	e027      	b.n	800e170 <HAL_RNG_Init+0x138>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800e120:	f7f6 f86c 	bl	80041fc <HAL_GetTick>
 800e124:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800e126:	e015      	b.n	800e154 <HAL_RNG_Init+0x11c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800e128:	f7f6 f868 	bl	80041fc <HAL_GetTick>
 800e12c:	4602      	mov	r2, r0
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	1ad3      	subs	r3, r2, r3
 800e132:	2b02      	cmp	r3, #2
 800e134:	d90e      	bls.n	800e154 <HAL_RNG_Init+0x11c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	685b      	ldr	r3, [r3, #4]
 800e13c:	f003 0304 	and.w	r3, r3, #4
 800e140:	2b04      	cmp	r3, #4
 800e142:	d107      	bne.n	800e154 <HAL_RNG_Init+0x11c>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2204      	movs	r2, #4
 800e148:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2202      	movs	r2, #2
 800e14e:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800e150:	2301      	movs	r3, #1
 800e152:	e00d      	b.n	800e170 <HAL_RNG_Init+0x138>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	685b      	ldr	r3, [r3, #4]
 800e15a:	f003 0304 	and.w	r3, r3, #4
 800e15e:	2b04      	cmp	r3, #4
 800e160:	d0e2      	beq.n	800e128 <HAL_RNG_Init+0xf0>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2201      	movs	r2, #1
 800e166:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2200      	movs	r2, #0
 800e16c:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800e16e:	2300      	movs	r3, #0
}
 800e170:	4618      	mov	r0, r3
 800e172:	3710      	adds	r7, #16
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}
 800e178:	bfffffdf 	.word	0xbfffffdf
 800e17c:	17590abc 	.word	0x17590abc

0800e180 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b084      	sub	sp, #16
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e18a:	2300      	movs	r3, #0
 800e18c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	7a1b      	ldrb	r3, [r3, #8]
 800e192:	2b01      	cmp	r3, #1
 800e194:	d101      	bne.n	800e19a <HAL_RNG_GenerateRandomNumber+0x1a>
 800e196:	2302      	movs	r3, #2
 800e198:	e06d      	b.n	800e276 <HAL_RNG_GenerateRandomNumber+0xf6>
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2201      	movs	r2, #1
 800e19e:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	7a5b      	ldrb	r3, [r3, #9]
 800e1a4:	b2db      	uxtb	r3, r3
 800e1a6:	2b01      	cmp	r3, #1
 800e1a8:	d15c      	bne.n	800e264 <HAL_RNG_GenerateRandomNumber+0xe4>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	2202      	movs	r2, #2
 800e1ae:	725a      	strb	r2, [r3, #9]
#if defined(RNG_CR_CONDRST)
    /* Check if there is a seed error */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	685b      	ldr	r3, [r3, #4]
 800e1b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1ba:	2b40      	cmp	r3, #64	@ 0x40
 800e1bc:	d10c      	bne.n	800e1d8 <HAL_RNG_GenerateRandomNumber+0x58>
    {
      /* Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2208      	movs	r2, #8
 800e1c2:	60da      	str	r2, [r3, #12]
      /* Reset from seed error */
      status = RNG_RecoverSeedError(hrng);
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	f000 f864 	bl	800e292 <RNG_RecoverSeedError>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_ERROR)
 800e1ce:	7bfb      	ldrb	r3, [r7, #15]
 800e1d0:	2b01      	cmp	r3, #1
 800e1d2:	d101      	bne.n	800e1d8 <HAL_RNG_GenerateRandomNumber+0x58>
      {
        return status;
 800e1d4:	7bfb      	ldrb	r3, [r7, #15]
 800e1d6:	e04e      	b.n	800e276 <HAL_RNG_GenerateRandomNumber+0xf6>
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800e1d8:	f7f6 f810 	bl	80041fc <HAL_GetTick>
 800e1dc:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800e1de:	e018      	b.n	800e212 <HAL_RNG_GenerateRandomNumber+0x92>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800e1e0:	f7f6 f80c 	bl	80041fc <HAL_GetTick>
 800e1e4:	4602      	mov	r2, r0
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	1ad3      	subs	r3, r2, r3
 800e1ea:	2b02      	cmp	r3, #2
 800e1ec:	d911      	bls.n	800e212 <HAL_RNG_GenerateRandomNumber+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	685b      	ldr	r3, [r3, #4]
 800e1f4:	f003 0301 	and.w	r3, r3, #1
 800e1f8:	2b01      	cmp	r3, #1
 800e1fa:	d00a      	beq.n	800e212 <HAL_RNG_GenerateRandomNumber+0x92>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2201      	movs	r2, #1
 800e200:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2202      	movs	r2, #2
 800e206:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2200      	movs	r2, #0
 800e20c:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800e20e:	2301      	movs	r3, #1
 800e210:	e031      	b.n	800e276 <HAL_RNG_GenerateRandomNumber+0xf6>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	685b      	ldr	r3, [r3, #4]
 800e218:	f003 0301 	and.w	r3, r3, #1
 800e21c:	2b01      	cmp	r3, #1
 800e21e:	d1df      	bne.n	800e1e0 <HAL_RNG_GenerateRandomNumber+0x60>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	689a      	ldr	r2, [r3, #8]
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	611a      	str	r2, [r3, #16]
#if defined(RNG_CR_CONDRST)
    /* In case of seed error, the value available in the RNG_DR register must not
       be used as it may not have enough entropy */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	685b      	ldr	r3, [r3, #4]
 800e230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e234:	2b40      	cmp	r3, #64	@ 0x40
 800e236:	d10d      	bne.n	800e254 <HAL_RNG_GenerateRandomNumber+0xd4>
    {
      /* Update the error code and status */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2208      	movs	r2, #8
 800e23c:	60da      	str	r2, [r3, #12]
      status = HAL_ERROR;
 800e23e:	2301      	movs	r3, #1
 800e240:	73fb      	strb	r3, [r7, #15]
      /* Clear bit DRDY */
      CLEAR_BIT(hrng->Instance->SR, RNG_FLAG_DRDY);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	685a      	ldr	r2, [r3, #4]
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f022 0201 	bic.w	r2, r2, #1
 800e250:	605a      	str	r2, [r3, #4]
 800e252:	e003      	b.n	800e25c <HAL_RNG_GenerateRandomNumber+0xdc>
    }
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	691a      	ldr	r2, [r3, #16]
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	601a      	str	r2, [r3, #0]
    }
#else
    *random32bit = hrng->RandomNumber;

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2201      	movs	r2, #1
 800e260:	725a      	strb	r2, [r3, #9]
 800e262:	e004      	b.n	800e26e <HAL_RNG_GenerateRandomNumber+0xee>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2204      	movs	r2, #4
 800e268:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800e26a:	2301      	movs	r3, #1
 800e26c:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2200      	movs	r2, #0
 800e272:	721a      	strb	r2, [r3, #8]

  return status;
 800e274:	7bfb      	ldrb	r3, [r7, #15]
}
 800e276:	4618      	mov	r0, r3
 800e278:	3710      	adds	r7, #16
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}

0800e27e <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800e27e:	b480      	push	{r7}
 800e280:	b083      	sub	sp, #12
 800e282:	af00      	add	r7, sp, #0
 800e284:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800e286:	bf00      	nop
 800e288:	370c      	adds	r7, #12
 800e28a:	46bd      	mov	sp, r7
 800e28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e290:	4770      	bx	lr

0800e292 <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 800e292:	b580      	push	{r7, lr}
 800e294:	b084      	sub	sp, #16
 800e296:	af00      	add	r7, sp, #0
 800e298:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e29a:	2300      	movs	r3, #0
 800e29c:	60fb      	str	r3, [r7, #12]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	685b      	ldr	r3, [r3, #4]
 800e2a4:	f003 0304 	and.w	r3, r3, #4
 800e2a8:	2b04      	cmp	r3, #4
 800e2aa:	d008      	beq.n	800e2be <RNG_RecoverSeedError+0x2c>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	685a      	ldr	r2, [r3, #4]
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e2ba:	605a      	str	r2, [r3, #4]
 800e2bc:	e05f      	b.n	800e37e <RNG_RecoverSeedError+0xec>
  }
  else  /* Sequence to fully recover from a seed error*/
  {
    /* Writing bit CONDRST=1*/
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	681a      	ldr	r2, [r3, #0]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800e2cc:	601a      	str	r2, [r3, #0]
    /* Writing bit CONDRST=0*/
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	681a      	ldr	r2, [r3, #0]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800e2dc:	601a      	str	r2, [r3, #0]

    /* Wait for conditioning reset process to be completed */
    count = RNG_TIMEOUT_VALUE;
 800e2de:	2302      	movs	r3, #2
 800e2e0:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	3b01      	subs	r3, #1
 800e2e6:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d110      	bne.n	800e310 <RNG_RecoverSeedError+0x7e>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2201      	movs	r2, #1
 800e2f2:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	68db      	ldr	r3, [r3, #12]
 800e2f8:	f043 0202 	orr.w	r2, r3, #2
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2200      	movs	r2, #0
 800e304:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f7ff ffb9 	bl	800e27e <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800e30c:	2301      	movs	r3, #1
 800e30e:	e03d      	b.n	800e38c <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e31a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e31e:	d0e0      	beq.n	800e2e2 <RNG_RecoverSeedError+0x50>

    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	685b      	ldr	r3, [r3, #4]
 800e326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e32a:	2b40      	cmp	r3, #64	@ 0x40
 800e32c:	d107      	bne.n	800e33e <RNG_RecoverSeedError+0xac>
    {
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	685a      	ldr	r2, [r3, #4]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e33c:	605a      	str	r2, [r3, #4]
    }

    /* Wait for SECS to be cleared */
    count = RNG_TIMEOUT_VALUE;
 800e33e:	2302      	movs	r3, #2
 800e340:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	3b01      	subs	r3, #1
 800e346:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d110      	bne.n	800e370 <RNG_RecoverSeedError+0xde>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2201      	movs	r2, #1
 800e352:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	68db      	ldr	r3, [r3, #12]
 800e358:	f043 0202 	orr.w	r2, r3, #2
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2200      	movs	r2, #0
 800e364:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f7ff ff89 	bl	800e27e <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800e36c:	2301      	movs	r3, #1
 800e36e:	e00d      	b.n	800e38c <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	685b      	ldr	r3, [r3, #4]
 800e376:	f003 0304 	and.w	r3, r3, #4
 800e37a:	2b04      	cmp	r3, #4
 800e37c:	d0e1      	beq.n	800e342 <RNG_RecoverSeedError+0xb0>
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	68db      	ldr	r3, [r3, #12]
 800e382:	f023 0208 	bic.w	r2, r3, #8
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 800e38a:	2300      	movs	r3, #0
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3710      	adds	r7, #16
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}

0800e394 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b08a      	sub	sp, #40	@ 0x28
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d101      	bne.n	800e3a6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	e075      	b.n	800e492 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e3ac:	b2db      	uxtb	r3, r3
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d105      	bne.n	800e3be <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f7f4 ffb1 	bl	8003320 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2204      	movs	r2, #4
 800e3c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f000 f868 	bl	800e49c <HAL_SD_InitCard>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d001      	beq.n	800e3d6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	e05d      	b.n	800e492 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800e3d6:	f107 0308 	add.w	r3, r7, #8
 800e3da:	4619      	mov	r1, r3
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f000 fdaf 	bl	800ef40 <HAL_SD_GetCardStatus>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d001      	beq.n	800e3ec <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	e052      	b.n	800e492 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800e3ec:	7e3b      	ldrb	r3, [r7, #24]
 800e3ee:	b2db      	uxtb	r3, r3
 800e3f0:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800e3f2:	7e7b      	ldrb	r3, [r7, #25]
 800e3f4:	b2db      	uxtb	r3, r3
 800e3f6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3fc:	2b01      	cmp	r3, #1
 800e3fe:	d10a      	bne.n	800e416 <HAL_SD_Init+0x82>
 800e400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e402:	2b00      	cmp	r3, #0
 800e404:	d102      	bne.n	800e40c <HAL_SD_Init+0x78>
 800e406:	6a3b      	ldr	r3, [r7, #32]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d004      	beq.n	800e416 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e412:	659a      	str	r2, [r3, #88]	@ 0x58
 800e414:	e00b      	b.n	800e42e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e41a:	2b01      	cmp	r3, #1
 800e41c:	d104      	bne.n	800e428 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e424:	659a      	str	r2, [r3, #88]	@ 0x58
 800e426:	e002      	b.n	800e42e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2200      	movs	r2, #0
 800e42c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	68db      	ldr	r3, [r3, #12]
 800e432:	4619      	mov	r1, r3
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	f000 fe6d 	bl	800f114 <HAL_SD_ConfigWideBusOperation>
 800e43a:	4603      	mov	r3, r0
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d001      	beq.n	800e444 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800e440:	2301      	movs	r3, #1
 800e442:	e026      	b.n	800e492 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800e444:	f7f5 feda 	bl	80041fc <HAL_GetTick>
 800e448:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e44a:	e011      	b.n	800e470 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e44c:	f7f5 fed6 	bl	80041fc <HAL_GetTick>
 800e450:	4602      	mov	r2, r0
 800e452:	69fb      	ldr	r3, [r7, #28]
 800e454:	1ad3      	subs	r3, r2, r3
 800e456:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e45a:	d109      	bne.n	800e470 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e462:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2201      	movs	r2, #1
 800e468:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800e46c:	2303      	movs	r3, #3
 800e46e:	e010      	b.n	800e492 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f000 ff61 	bl	800f338 <HAL_SD_GetCardState>
 800e476:	4603      	mov	r3, r0
 800e478:	2b04      	cmp	r3, #4
 800e47a:	d1e7      	bne.n	800e44c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2200      	movs	r2, #0
 800e480:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	2200      	movs	r2, #0
 800e486:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2201      	movs	r2, #1
 800e48c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800e490:	2300      	movs	r3, #0
}
 800e492:	4618      	mov	r0, r3
 800e494:	3728      	adds	r7, #40	@ 0x28
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}
	...

0800e49c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e49c:	b590      	push	{r4, r7, lr}
 800e49e:	b08d      	sub	sp, #52	@ 0x34
 800e4a0:	af02      	add	r7, sp, #8
 800e4a2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e4b4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800e4b8:	f04f 0100 	mov.w	r1, #0
 800e4bc:	f7fe fb76 	bl	800cbac <HAL_RCCEx_GetPeriphCLKFreq>
 800e4c0:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800e4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d109      	bne.n	800e4dc <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2201      	movs	r2, #1
 800e4cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800e4d6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800e4d8:	2301      	movs	r3, #1
 800e4da:	e070      	b.n	800e5be <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800e4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4de:	0a1b      	lsrs	r3, r3, #8
 800e4e0:	4a39      	ldr	r2, [pc, #228]	@ (800e5c8 <HAL_SD_InitCard+0x12c>)
 800e4e2:	fba2 2303 	umull	r2, r3, r2, r3
 800e4e6:	091b      	lsrs	r3, r3, #4
 800e4e8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681c      	ldr	r4, [r3, #0]
 800e4ee:	466a      	mov	r2, sp
 800e4f0:	f107 0318 	add.w	r3, r7, #24
 800e4f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e4f8:	e882 0003 	stmia.w	r2, {r0, r1}
 800e4fc:	f107 030c 	add.w	r3, r7, #12
 800e500:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e502:	4620      	mov	r0, r4
 800e504:	f004 fec4 	bl	8013290 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	4618      	mov	r0, r3
 800e50e:	f004 ff07 	bl	8013320 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800e512:	69fb      	ldr	r3, [r7, #28]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d005      	beq.n	800e524 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800e518:	69fb      	ldr	r3, [r7, #28]
 800e51a:	005b      	lsls	r3, r3, #1
 800e51c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e51e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e522:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800e524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e526:	2b00      	cmp	r3, #0
 800e528:	d007      	beq.n	800e53a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800e52a:	4a28      	ldr	r2, [pc, #160]	@ (800e5cc <HAL_SD_InitCard+0x130>)
 800e52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e52e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e532:	3301      	adds	r3, #1
 800e534:	4618      	mov	r0, r3
 800e536:	f7f5 fe6d 	bl	8004214 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f000 ffea 	bl	800f514 <SD_PowerON>
 800e540:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e542:	6a3b      	ldr	r3, [r7, #32]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d00b      	beq.n	800e560 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2201      	movs	r2, #1
 800e54c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e554:	6a3b      	ldr	r3, [r7, #32]
 800e556:	431a      	orrs	r2, r3
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800e55c:	2301      	movs	r3, #1
 800e55e:	e02e      	b.n	800e5be <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f000 ff09 	bl	800f378 <SD_InitCard>
 800e566:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e568:	6a3b      	ldr	r3, [r7, #32]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d00b      	beq.n	800e586 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2201      	movs	r2, #1
 800e572:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e57a:	6a3b      	ldr	r3, [r7, #32]
 800e57c:	431a      	orrs	r2, r3
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800e582:	2301      	movs	r3, #1
 800e584:	e01b      	b.n	800e5be <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e58e:	4618      	mov	r0, r3
 800e590:	f004 ff5c 	bl	801344c <SDMMC_CmdBlockLength>
 800e594:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e596:	6a3b      	ldr	r3, [r7, #32]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d00f      	beq.n	800e5bc <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	4a0b      	ldr	r2, [pc, #44]	@ (800e5d0 <HAL_SD_InitCard+0x134>)
 800e5a2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e5a8:	6a3b      	ldr	r3, [r7, #32]
 800e5aa:	431a      	orrs	r2, r3
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2201      	movs	r2, #1
 800e5b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	e000      	b.n	800e5be <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800e5bc:	2300      	movs	r3, #0
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	372c      	adds	r7, #44	@ 0x2c
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd90      	pop	{r4, r7, pc}
 800e5c6:	bf00      	nop
 800e5c8:	014f8b59 	.word	0x014f8b59
 800e5cc:	00012110 	.word	0x00012110
 800e5d0:	1fe00fff 	.word	0x1fe00fff

0800e5d4 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b08c      	sub	sp, #48	@ 0x30
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	60f8      	str	r0, [r7, #12]
 800e5dc:	60b9      	str	r1, [r7, #8]
 800e5de:	607a      	str	r2, [r7, #4]
 800e5e0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d107      	bne.n	800e5fc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e5f0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	e08d      	b.n	800e718 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e602:	b2db      	uxtb	r3, r3
 800e604:	2b01      	cmp	r3, #1
 800e606:	f040 8086 	bne.w	800e716 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	2200      	movs	r2, #0
 800e60e:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e610:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	441a      	add	r2, r3
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e61a:	429a      	cmp	r2, r3
 800e61c:	d907      	bls.n	800e62e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e622:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800e62a:	2301      	movs	r3, #1
 800e62c:	e074      	b.n	800e718 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	2203      	movs	r2, #3
 800e632:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	2200      	movs	r2, #0
 800e63c:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	68ba      	ldr	r2, [r7, #8]
 800e642:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	025a      	lsls	r2, r3, #9
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e650:	2b01      	cmp	r3, #1
 800e652:	d002      	beq.n	800e65a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800e654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e656:	025b      	lsls	r3, r3, #9
 800e658:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e65a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e65e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	025b      	lsls	r3, r3, #9
 800e664:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e666:	2390      	movs	r3, #144	@ 0x90
 800e668:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e66a:	2302      	movs	r3, #2
 800e66c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e66e:	2300      	movs	r3, #0
 800e670:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e672:	2300      	movs	r3, #0
 800e674:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	f107 0210 	add.w	r2, r7, #16
 800e67e:	4611      	mov	r1, r2
 800e680:	4618      	mov	r0, r3
 800e682:	f004 feb7 	bl	80133f4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	68da      	ldr	r2, [r3, #12]
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e694:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	68ba      	ldr	r2, [r7, #8]
 800e69c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	2b01      	cmp	r3, #1
 800e6aa:	d90a      	bls.n	800e6c2 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	2282      	movs	r2, #130	@ 0x82
 800e6b0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f004 ff0d 	bl	80134d8 <SDMMC_CmdReadMultiBlock>
 800e6be:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800e6c0:	e009      	b.n	800e6d6 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	2281      	movs	r2, #129	@ 0x81
 800e6c6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f004 fedf 	bl	8013492 <SDMMC_CmdReadSingleBlock>
 800e6d4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e6d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d012      	beq.n	800e702 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	4a0f      	ldr	r2, [pc, #60]	@ (800e720 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800e6e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e6e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6ea:	431a      	orrs	r2, r3
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	2201      	movs	r2, #1
 800e6f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800e6fe:	2301      	movs	r3, #1
 800e700:	e00a      	b.n	800e718 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800e710:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800e712:	2300      	movs	r3, #0
 800e714:	e000      	b.n	800e718 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e716:	2302      	movs	r3, #2
  }
}
 800e718:	4618      	mov	r0, r3
 800e71a:	3730      	adds	r7, #48	@ 0x30
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}
 800e720:	1fe00fff 	.word	0x1fe00fff

0800e724 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b08c      	sub	sp, #48	@ 0x30
 800e728:	af00      	add	r7, sp, #0
 800e72a:	60f8      	str	r0, [r7, #12]
 800e72c:	60b9      	str	r1, [r7, #8]
 800e72e:	607a      	str	r2, [r7, #4]
 800e730:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d107      	bne.n	800e74c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e740:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800e748:	2301      	movs	r3, #1
 800e74a:	e08d      	b.n	800e868 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e752:	b2db      	uxtb	r3, r3
 800e754:	2b01      	cmp	r3, #1
 800e756:	f040 8086 	bne.w	800e866 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	2200      	movs	r2, #0
 800e75e:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e760:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	441a      	add	r2, r3
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e76a:	429a      	cmp	r2, r3
 800e76c:	d907      	bls.n	800e77e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e772:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800e77a:	2301      	movs	r3, #1
 800e77c:	e074      	b.n	800e868 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	2203      	movs	r2, #3
 800e782:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	2200      	movs	r2, #0
 800e78c:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	68ba      	ldr	r2, [r7, #8]
 800e792:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	025a      	lsls	r2, r3, #9
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7a0:	2b01      	cmp	r3, #1
 800e7a2:	d002      	beq.n	800e7aa <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800e7a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7a6:	025b      	lsls	r3, r3, #9
 800e7a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e7aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e7ae:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	025b      	lsls	r3, r3, #9
 800e7b4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e7b6:	2390      	movs	r3, #144	@ 0x90
 800e7b8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	f107 0210 	add.w	r2, r7, #16
 800e7ce:	4611      	mov	r1, r2
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f004 fe0f 	bl	80133f4 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	68da      	ldr	r2, [r3, #12]
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e7e4:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	68ba      	ldr	r2, [r7, #8]
 800e7ec:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	d90a      	bls.n	800e812 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	22a0      	movs	r2, #160	@ 0xa0
 800e800:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e808:	4618      	mov	r0, r3
 800e80a:	f004 feab 	bl	8013564 <SDMMC_CmdWriteMultiBlock>
 800e80e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800e810:	e009      	b.n	800e826 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	2290      	movs	r2, #144	@ 0x90
 800e816:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e81e:	4618      	mov	r0, r3
 800e820:	f004 fe7d 	bl	801351e <SDMMC_CmdWriteSingleBlock>
 800e824:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d012      	beq.n	800e852 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	4a0f      	ldr	r2, [pc, #60]	@ (800e870 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800e832:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e83a:	431a      	orrs	r2, r3
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	2201      	movs	r2, #1
 800e844:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	2200      	movs	r2, #0
 800e84c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800e84e:	2301      	movs	r3, #1
 800e850:	e00a      	b.n	800e868 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800e860:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800e862:	2300      	movs	r3, #0
 800e864:	e000      	b.n	800e868 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e866:	2302      	movs	r3, #2
  }
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3730      	adds	r7, #48	@ 0x30
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}
 800e870:	1fe00fff 	.word	0x1fe00fff

0800e874 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b084      	sub	sp, #16
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e880:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e888:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d008      	beq.n	800e8a2 <HAL_SD_IRQHandler+0x2e>
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	f003 0308 	and.w	r3, r3, #8
 800e896:	2b00      	cmp	r3, #0
 800e898:	d003      	beq.n	800e8a2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f001 f926 	bl	800faec <SD_Read_IT>
 800e8a0:	e19a      	b.n	800ebd8 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e8a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	f000 80ac 	beq.w	800ea0a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e8ba:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681a      	ldr	r2, [r3, #0]
 800e8c6:	4b59      	ldr	r3, [pc, #356]	@ (800ea2c <HAL_SD_IRQHandler+0x1b8>)
 800e8c8:	400b      	ands	r3, r1
 800e8ca:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800e8da:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	68da      	ldr	r2, [r3, #12]
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e8ea:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	f003 0308 	and.w	r3, r3, #8
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d038      	beq.n	800e968 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	f003 0302 	and.w	r3, r3, #2
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d104      	bne.n	800e90a <HAL_SD_IRQHandler+0x96>
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	f003 0320 	and.w	r3, r3, #32
 800e906:	2b00      	cmp	r3, #0
 800e908:	d011      	beq.n	800e92e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	4618      	mov	r0, r3
 800e910:	f004 fe4c 	bl	80135ac <SDMMC_CmdStopTransfer>
 800e914:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d008      	beq.n	800e92e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	431a      	orrs	r2, r3
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f000 f95b 	bl	800ebe4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	4a3f      	ldr	r2, [pc, #252]	@ (800ea30 <HAL_SD_IRQHandler+0x1bc>)
 800e934:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2201      	movs	r2, #1
 800e93a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2200      	movs	r2, #0
 800e942:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	f003 0301 	and.w	r3, r3, #1
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d104      	bne.n	800e958 <HAL_SD_IRQHandler+0xe4>
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	f003 0302 	and.w	r3, r3, #2
 800e954:	2b00      	cmp	r3, #0
 800e956:	d003      	beq.n	800e960 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800e958:	6878      	ldr	r0, [r7, #4]
 800e95a:	f006 fe55 	bl	8015608 <HAL_SD_RxCpltCallback>
 800e95e:	e13b      	b.n	800ebd8 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f006 fe47 	bl	80155f4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e966:	e137      	b.n	800ebd8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e96e:	2b00      	cmp	r3, #0
 800e970:	f000 8132 	beq.w	800ebd8 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	2200      	movs	r2, #0
 800e97a:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	2200      	movs	r2, #0
 800e982:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	2200      	movs	r2, #0
 800e98a:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	f003 0302 	and.w	r3, r3, #2
 800e992:	2b00      	cmp	r3, #0
 800e994:	d104      	bne.n	800e9a0 <HAL_SD_IRQHandler+0x12c>
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	f003 0320 	and.w	r3, r3, #32
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d011      	beq.n	800e9c4 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f004 fe01 	bl	80135ac <SDMMC_CmdStopTransfer>
 800e9aa:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d008      	beq.n	800e9c4 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e9b6:	68bb      	ldr	r3, [r7, #8]
 800e9b8:	431a      	orrs	r2, r3
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f000 f910 	bl	800ebe4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2201      	movs	r2, #1
 800e9c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	f003 0310 	and.w	r3, r3, #16
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d104      	bne.n	800e9e6 <HAL_SD_IRQHandler+0x172>
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	f003 0320 	and.w	r3, r3, #32
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d002      	beq.n	800e9ec <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	f006 fe04 	bl	80155f4 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	f003 0301 	and.w	r3, r3, #1
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d105      	bne.n	800ea02 <HAL_SD_IRQHandler+0x18e>
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	f003 0302 	and.w	r3, r3, #2
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	f000 80eb 	beq.w	800ebd8 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f006 fe00 	bl	8015608 <HAL_SD_RxCpltCallback>
}
 800ea08:	e0e6      	b.n	800ebd8 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d00d      	beq.n	800ea34 <HAL_SD_IRQHandler+0x1c0>
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	f003 0308 	and.w	r3, r3, #8
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d008      	beq.n	800ea34 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f001 f8a8 	bl	800fb78 <SD_Write_IT>
 800ea28:	e0d6      	b.n	800ebd8 <HAL_SD_IRQHandler+0x364>
 800ea2a:	bf00      	nop
 800ea2c:	ffff3ec5 	.word	0xffff3ec5
 800ea30:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea3a:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	f000 809d 	beq.w	800eb7e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea4a:	f003 0302 	and.w	r3, r3, #2
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d005      	beq.n	800ea5e <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea56:	f043 0202 	orr.w	r2, r3, #2
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea64:	f003 0308 	and.w	r3, r3, #8
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d005      	beq.n	800ea78 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea70:	f043 0208 	orr.w	r2, r3, #8
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea7e:	f003 0320 	and.w	r3, r3, #32
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d005      	beq.n	800ea92 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea8a:	f043 0220 	orr.w	r2, r3, #32
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea98:	f003 0310 	and.w	r3, r3, #16
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d005      	beq.n	800eaac <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eaa4:	f043 0210 	orr.w	r2, r3, #16
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	4a4b      	ldr	r2, [pc, #300]	@ (800ebe0 <HAL_SD_IRQHandler+0x36c>)
 800eab2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800eac2:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	68da      	ldr	r2, [r3, #12]
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ead2:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800eae2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	68da      	ldr	r2, [r3, #12]
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800eaf2:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f004 fd57 	bl	80135ac <SDMMC_CmdStopTransfer>
 800eafe:	4602      	mov	r2, r0
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb04:	431a      	orrs	r2, r3
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	68da      	ldr	r2, [r3, #12]
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800eb18:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800eb22:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	f003 0308 	and.w	r3, r3, #8
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d00a      	beq.n	800eb44 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2201      	movs	r2, #1
 800eb32:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f000 f851 	bl	800ebe4 <HAL_SD_ErrorCallback>
}
 800eb42:	e049      	b.n	800ebd8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d044      	beq.n	800ebd8 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d040      	beq.n	800ebd8 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800eb64:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2201      	movs	r2, #1
 800eb72:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f000 f834 	bl	800ebe4 <HAL_SD_ErrorCallback>
}
 800eb7c:	e02c      	b.n	800ebd8 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d025      	beq.n	800ebd8 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb94:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb9c:	f003 0304 	and.w	r3, r3, #4
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d10c      	bne.n	800ebbe <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	f003 0320 	and.w	r3, r3, #32
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d003      	beq.n	800ebb6 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800ebae:	6878      	ldr	r0, [r7, #4]
 800ebb0:	f001 f84a 	bl	800fc48 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800ebb4:	e010      	b.n	800ebd8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	f001 f832 	bl	800fc20 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800ebbc:	e00c      	b.n	800ebd8 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	f003 0320 	and.w	r3, r3, #32
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d003      	beq.n	800ebd0 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f001 f833 	bl	800fc34 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800ebce:	e003      	b.n	800ebd8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f001 f81b 	bl	800fc0c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800ebd6:	e7ff      	b.n	800ebd8 <HAL_SD_IRQHandler+0x364>
 800ebd8:	bf00      	nop
 800ebda:	3710      	adds	r7, #16
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}
 800ebe0:	18000f3a 	.word	0x18000f3a

0800ebe4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800ebe4:	b480      	push	{r7}
 800ebe6:	b083      	sub	sp, #12
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800ebec:	bf00      	nop
 800ebee:	370c      	adds	r7, #12
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf6:	4770      	bx	lr

0800ebf8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b083      	sub	sp, #12
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ec06:	0f9b      	lsrs	r3, r3, #30
 800ec08:	b2da      	uxtb	r2, r3
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ec12:	0e9b      	lsrs	r3, r3, #26
 800ec14:	b2db      	uxtb	r3, r3
 800ec16:	f003 030f 	and.w	r3, r3, #15
 800ec1a:	b2da      	uxtb	r2, r3
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ec24:	0e1b      	lsrs	r3, r3, #24
 800ec26:	b2db      	uxtb	r3, r3
 800ec28:	f003 0303 	and.w	r3, r3, #3
 800ec2c:	b2da      	uxtb	r2, r3
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ec36:	0c1b      	lsrs	r3, r3, #16
 800ec38:	b2da      	uxtb	r2, r3
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ec42:	0a1b      	lsrs	r3, r3, #8
 800ec44:	b2da      	uxtb	r2, r3
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ec4e:	b2da      	uxtb	r2, r3
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ec58:	0d1b      	lsrs	r3, r3, #20
 800ec5a:	b29a      	uxth	r2, r3
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ec64:	0c1b      	lsrs	r3, r3, #16
 800ec66:	b2db      	uxtb	r3, r3
 800ec68:	f003 030f 	and.w	r3, r3, #15
 800ec6c:	b2da      	uxtb	r2, r3
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ec76:	0bdb      	lsrs	r3, r3, #15
 800ec78:	b2db      	uxtb	r3, r3
 800ec7a:	f003 0301 	and.w	r3, r3, #1
 800ec7e:	b2da      	uxtb	r2, r3
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ec88:	0b9b      	lsrs	r3, r3, #14
 800ec8a:	b2db      	uxtb	r3, r3
 800ec8c:	f003 0301 	and.w	r3, r3, #1
 800ec90:	b2da      	uxtb	r2, r3
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ec9a:	0b5b      	lsrs	r3, r3, #13
 800ec9c:	b2db      	uxtb	r3, r3
 800ec9e:	f003 0301 	and.w	r3, r3, #1
 800eca2:	b2da      	uxtb	r2, r3
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ecac:	0b1b      	lsrs	r3, r3, #12
 800ecae:	b2db      	uxtb	r3, r3
 800ecb0:	f003 0301 	and.w	r3, r3, #1
 800ecb4:	b2da      	uxtb	r2, r3
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d163      	bne.n	800ed90 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eccc:	009a      	lsls	r2, r3, #2
 800ecce:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800ecd2:	4013      	ands	r3, r2
 800ecd4:	687a      	ldr	r2, [r7, #4]
 800ecd6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800ecd8:	0f92      	lsrs	r2, r2, #30
 800ecda:	431a      	orrs	r2, r3
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ece4:	0edb      	lsrs	r3, r3, #27
 800ece6:	b2db      	uxtb	r3, r3
 800ece8:	f003 0307 	and.w	r3, r3, #7
 800ecec:	b2da      	uxtb	r2, r3
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ecf6:	0e1b      	lsrs	r3, r3, #24
 800ecf8:	b2db      	uxtb	r3, r3
 800ecfa:	f003 0307 	and.w	r3, r3, #7
 800ecfe:	b2da      	uxtb	r2, r3
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ed08:	0d5b      	lsrs	r3, r3, #21
 800ed0a:	b2db      	uxtb	r3, r3
 800ed0c:	f003 0307 	and.w	r3, r3, #7
 800ed10:	b2da      	uxtb	r2, r3
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ed1a:	0c9b      	lsrs	r3, r3, #18
 800ed1c:	b2db      	uxtb	r3, r3
 800ed1e:	f003 0307 	and.w	r3, r3, #7
 800ed22:	b2da      	uxtb	r2, r3
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ed2c:	0bdb      	lsrs	r3, r3, #15
 800ed2e:	b2db      	uxtb	r3, r3
 800ed30:	f003 0307 	and.w	r3, r3, #7
 800ed34:	b2da      	uxtb	r2, r3
 800ed36:	683b      	ldr	r3, [r7, #0]
 800ed38:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	691b      	ldr	r3, [r3, #16]
 800ed3e:	1c5a      	adds	r2, r3, #1
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	7e1b      	ldrb	r3, [r3, #24]
 800ed48:	b2db      	uxtb	r3, r3
 800ed4a:	f003 0307 	and.w	r3, r3, #7
 800ed4e:	3302      	adds	r3, #2
 800ed50:	2201      	movs	r2, #1
 800ed52:	fa02 f303 	lsl.w	r3, r2, r3
 800ed56:	687a      	ldr	r2, [r7, #4]
 800ed58:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ed5a:	fb03 f202 	mul.w	r2, r3, r2
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	7a1b      	ldrb	r3, [r3, #8]
 800ed66:	b2db      	uxtb	r3, r3
 800ed68:	f003 030f 	and.w	r3, r3, #15
 800ed6c:	2201      	movs	r2, #1
 800ed6e:	409a      	lsls	r2, r3
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ed78:	687a      	ldr	r2, [r7, #4]
 800ed7a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800ed7c:	0a52      	lsrs	r2, r2, #9
 800ed7e:	fb03 f202 	mul.w	r2, r3, r2
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ed8c:	655a      	str	r2, [r3, #84]	@ 0x54
 800ed8e:	e031      	b.n	800edf4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed94:	2b01      	cmp	r3, #1
 800ed96:	d11d      	bne.n	800edd4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ed9c:	041b      	lsls	r3, r3, #16
 800ed9e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eda6:	0c1b      	lsrs	r3, r3, #16
 800eda8:	431a      	orrs	r2, r3
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	691b      	ldr	r3, [r3, #16]
 800edb2:	3301      	adds	r3, #1
 800edb4:	029a      	lsls	r2, r3, #10
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800edc8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	655a      	str	r2, [r3, #84]	@ 0x54
 800edd2:	e00f      	b.n	800edf4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	4a58      	ldr	r2, [pc, #352]	@ (800ef3c <HAL_SD_GetCardCSD+0x344>)
 800edda:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ede0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2201      	movs	r2, #1
 800edec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800edf0:	2301      	movs	r3, #1
 800edf2:	e09d      	b.n	800ef30 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800edf8:	0b9b      	lsrs	r3, r3, #14
 800edfa:	b2db      	uxtb	r3, r3
 800edfc:	f003 0301 	and.w	r3, r3, #1
 800ee00:	b2da      	uxtb	r2, r3
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ee0a:	09db      	lsrs	r3, r3, #7
 800ee0c:	b2db      	uxtb	r3, r3
 800ee0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ee12:	b2da      	uxtb	r2, r3
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ee1c:	b2db      	uxtb	r3, r3
 800ee1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ee22:	b2da      	uxtb	r2, r3
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ee2c:	0fdb      	lsrs	r3, r3, #31
 800ee2e:	b2da      	uxtb	r2, r3
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ee38:	0f5b      	lsrs	r3, r3, #29
 800ee3a:	b2db      	uxtb	r3, r3
 800ee3c:	f003 0303 	and.w	r3, r3, #3
 800ee40:	b2da      	uxtb	r2, r3
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ee4a:	0e9b      	lsrs	r3, r3, #26
 800ee4c:	b2db      	uxtb	r3, r3
 800ee4e:	f003 0307 	and.w	r3, r3, #7
 800ee52:	b2da      	uxtb	r2, r3
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ee5c:	0d9b      	lsrs	r3, r3, #22
 800ee5e:	b2db      	uxtb	r3, r3
 800ee60:	f003 030f 	and.w	r3, r3, #15
 800ee64:	b2da      	uxtb	r2, r3
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ee6e:	0d5b      	lsrs	r3, r3, #21
 800ee70:	b2db      	uxtb	r3, r3
 800ee72:	f003 0301 	and.w	r3, r3, #1
 800ee76:	b2da      	uxtb	r2, r3
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	2200      	movs	r2, #0
 800ee82:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ee8a:	0c1b      	lsrs	r3, r3, #16
 800ee8c:	b2db      	uxtb	r3, r3
 800ee8e:	f003 0301 	and.w	r3, r3, #1
 800ee92:	b2da      	uxtb	r2, r3
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ee9e:	0bdb      	lsrs	r3, r3, #15
 800eea0:	b2db      	uxtb	r3, r3
 800eea2:	f003 0301 	and.w	r3, r3, #1
 800eea6:	b2da      	uxtb	r2, r3
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eeb2:	0b9b      	lsrs	r3, r3, #14
 800eeb4:	b2db      	uxtb	r3, r3
 800eeb6:	f003 0301 	and.w	r3, r3, #1
 800eeba:	b2da      	uxtb	r2, r3
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eec6:	0b5b      	lsrs	r3, r3, #13
 800eec8:	b2db      	uxtb	r3, r3
 800eeca:	f003 0301 	and.w	r3, r3, #1
 800eece:	b2da      	uxtb	r2, r3
 800eed0:	683b      	ldr	r3, [r7, #0]
 800eed2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eeda:	0b1b      	lsrs	r3, r3, #12
 800eedc:	b2db      	uxtb	r3, r3
 800eede:	f003 0301 	and.w	r3, r3, #1
 800eee2:	b2da      	uxtb	r2, r3
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eeee:	0a9b      	lsrs	r3, r3, #10
 800eef0:	b2db      	uxtb	r3, r3
 800eef2:	f003 0303 	and.w	r3, r3, #3
 800eef6:	b2da      	uxtb	r2, r3
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ef02:	0a1b      	lsrs	r3, r3, #8
 800ef04:	b2db      	uxtb	r3, r3
 800ef06:	f003 0303 	and.w	r3, r3, #3
 800ef0a:	b2da      	uxtb	r2, r3
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ef16:	085b      	lsrs	r3, r3, #1
 800ef18:	b2db      	uxtb	r3, r3
 800ef1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ef1e:	b2da      	uxtb	r2, r3
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	2201      	movs	r2, #1
 800ef2a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800ef2e:	2300      	movs	r3, #0
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	370c      	adds	r7, #12
 800ef34:	46bd      	mov	sp, r7
 800ef36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3a:	4770      	bx	lr
 800ef3c:	1fe00fff 	.word	0x1fe00fff

0800ef40 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b094      	sub	sp, #80	@ 0x50
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
 800ef48:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ef56:	b2db      	uxtb	r3, r3
 800ef58:	2b03      	cmp	r3, #3
 800ef5a:	d101      	bne.n	800ef60 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	e0a7      	b.n	800f0b0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800ef60:	f107 0308 	add.w	r3, r7, #8
 800ef64:	4619      	mov	r1, r3
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f000 fb62 	bl	800f630 <SD_SendSDStatus>
 800ef6c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ef6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d011      	beq.n	800ef98 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	4a4f      	ldr	r2, [pc, #316]	@ (800f0b8 <HAL_SD_GetCardStatus+0x178>)
 800ef7a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ef80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef82:	431a      	orrs	r2, r3
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800ef90:	2301      	movs	r3, #1
 800ef92:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800ef96:	e070      	b.n	800f07a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	099b      	lsrs	r3, r3, #6
 800ef9c:	b2db      	uxtb	r3, r3
 800ef9e:	f003 0303 	and.w	r3, r3, #3
 800efa2:	b2da      	uxtb	r2, r3
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	095b      	lsrs	r3, r3, #5
 800efac:	b2db      	uxtb	r3, r3
 800efae:	f003 0301 	and.w	r3, r3, #1
 800efb2:	b2da      	uxtb	r2, r3
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	0a1b      	lsrs	r3, r3, #8
 800efbc:	b29b      	uxth	r3, r3
 800efbe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800efc2:	b29a      	uxth	r2, r3
 800efc4:	68bb      	ldr	r3, [r7, #8]
 800efc6:	0e1b      	lsrs	r3, r3, #24
 800efc8:	b29b      	uxth	r3, r3
 800efca:	4313      	orrs	r3, r2
 800efcc:	b29a      	uxth	r2, r3
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	061a      	lsls	r2, r3, #24
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	021b      	lsls	r3, r3, #8
 800efda:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800efde:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	0a1b      	lsrs	r3, r3, #8
 800efe4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800efe8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	0e1b      	lsrs	r3, r3, #24
 800efee:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800eff4:	693b      	ldr	r3, [r7, #16]
 800eff6:	b2da      	uxtb	r2, r3
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800effc:	693b      	ldr	r3, [r7, #16]
 800effe:	0a1b      	lsrs	r3, r3, #8
 800f000:	b2da      	uxtb	r2, r3
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	0d1b      	lsrs	r3, r3, #20
 800f00a:	b2db      	uxtb	r3, r3
 800f00c:	f003 030f 	and.w	r3, r3, #15
 800f010:	b2da      	uxtb	r2, r3
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800f016:	693b      	ldr	r3, [r7, #16]
 800f018:	0c1b      	lsrs	r3, r3, #16
 800f01a:	b29b      	uxth	r3, r3
 800f01c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800f020:	b29a      	uxth	r2, r3
 800f022:	697b      	ldr	r3, [r7, #20]
 800f024:	b29b      	uxth	r3, r3
 800f026:	b2db      	uxtb	r3, r3
 800f028:	b29b      	uxth	r3, r3
 800f02a:	4313      	orrs	r3, r2
 800f02c:	b29a      	uxth	r2, r3
 800f02e:	683b      	ldr	r3, [r7, #0]
 800f030:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	0a9b      	lsrs	r3, r3, #10
 800f036:	b2db      	uxtb	r3, r3
 800f038:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f03c:	b2da      	uxtb	r2, r3
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800f042:	697b      	ldr	r3, [r7, #20]
 800f044:	0a1b      	lsrs	r3, r3, #8
 800f046:	b2db      	uxtb	r3, r3
 800f048:	f003 0303 	and.w	r3, r3, #3
 800f04c:	b2da      	uxtb	r2, r3
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	091b      	lsrs	r3, r3, #4
 800f056:	b2db      	uxtb	r3, r3
 800f058:	f003 030f 	and.w	r3, r3, #15
 800f05c:	b2da      	uxtb	r2, r3
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800f062:	697b      	ldr	r3, [r7, #20]
 800f064:	b2db      	uxtb	r3, r3
 800f066:	f003 030f 	and.w	r3, r3, #15
 800f06a:	b2da      	uxtb	r2, r3
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800f070:	69bb      	ldr	r3, [r7, #24]
 800f072:	0e1b      	lsrs	r3, r3, #24
 800f074:	b2da      	uxtb	r2, r3
 800f076:	683b      	ldr	r3, [r7, #0]
 800f078:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f082:	4618      	mov	r0, r3
 800f084:	f004 f9e2 	bl	801344c <SDMMC_CmdBlockLength>
 800f088:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800f08a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d00d      	beq.n	800f0ac <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	4a08      	ldr	r2, [pc, #32]	@ (800f0b8 <HAL_SD_GetCardStatus+0x178>)
 800f096:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f09c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2201      	movs	r2, #1
 800f0a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800f0ac:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	3750      	adds	r7, #80	@ 0x50
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}
 800f0b8:	1fe00fff 	.word	0x1fe00fff

0800f0bc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800f0bc:	b480      	push	{r7}
 800f0be:	b083      	sub	sp, #12
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
 800f0c4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800f106:	2300      	movs	r3, #0
}
 800f108:	4618      	mov	r0, r3
 800f10a:	370c      	adds	r7, #12
 800f10c:	46bd      	mov	sp, r7
 800f10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f112:	4770      	bx	lr

0800f114 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800f114:	b590      	push	{r4, r7, lr}
 800f116:	b08d      	sub	sp, #52	@ 0x34
 800f118:	af02      	add	r7, sp, #8
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800f11e:	2300      	movs	r3, #0
 800f120:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2203      	movs	r2, #3
 800f128:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f130:	2b03      	cmp	r3, #3
 800f132:	d02e      	beq.n	800f192 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f13a:	d106      	bne.n	800f14a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f140:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	635a      	str	r2, [r3, #52]	@ 0x34
 800f148:	e029      	b.n	800f19e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f150:	d10a      	bne.n	800f168 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f000 fb64 	bl	800f820 <SD_WideBus_Enable>
 800f158:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f15e:	6a3b      	ldr	r3, [r7, #32]
 800f160:	431a      	orrs	r2, r3
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	635a      	str	r2, [r3, #52]	@ 0x34
 800f166:	e01a      	b.n	800f19e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d10a      	bne.n	800f184 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800f16e:	6878      	ldr	r0, [r7, #4]
 800f170:	f000 fba1 	bl	800f8b6 <SD_WideBus_Disable>
 800f174:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f17a:	6a3b      	ldr	r3, [r7, #32]
 800f17c:	431a      	orrs	r2, r3
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	635a      	str	r2, [r3, #52]	@ 0x34
 800f182:	e00c      	b.n	800f19e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f188:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	635a      	str	r2, [r3, #52]	@ 0x34
 800f190:	e005      	b.n	800f19e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f196:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d007      	beq.n	800f1b6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	4a5f      	ldr	r2, [pc, #380]	@ (800f328 <HAL_SD_ConfigWideBusOperation+0x214>)
 800f1ac:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800f1ae:	2301      	movs	r3, #1
 800f1b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f1b4:	e096      	b.n	800f2e4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800f1b6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800f1ba:	f04f 0100 	mov.w	r1, #0
 800f1be:	f7fd fcf5 	bl	800cbac <HAL_RCCEx_GetPeriphCLKFreq>
 800f1c2:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800f1c4:	69fb      	ldr	r3, [r7, #28]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	f000 8083 	beq.w	800f2d2 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	685b      	ldr	r3, [r3, #4]
 800f1d0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	689b      	ldr	r3, [r3, #8]
 800f1d6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	691b      	ldr	r3, [r3, #16]
 800f1e0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	695a      	ldr	r2, [r3, #20]
 800f1e6:	69fb      	ldr	r3, [r7, #28]
 800f1e8:	4950      	ldr	r1, [pc, #320]	@ (800f32c <HAL_SD_ConfigWideBusOperation+0x218>)
 800f1ea:	fba1 1303 	umull	r1, r3, r1, r3
 800f1ee:	0e1b      	lsrs	r3, r3, #24
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d303      	bcc.n	800f1fc <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	695b      	ldr	r3, [r3, #20]
 800f1f8:	61bb      	str	r3, [r7, #24]
 800f1fa:	e05a      	b.n	800f2b2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f200:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f204:	d103      	bne.n	800f20e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	695b      	ldr	r3, [r3, #20]
 800f20a:	61bb      	str	r3, [r7, #24]
 800f20c:	e051      	b.n	800f2b2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f212:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f216:	d126      	bne.n	800f266 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	695b      	ldr	r3, [r3, #20]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d10e      	bne.n	800f23e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800f220:	69fb      	ldr	r3, [r7, #28]
 800f222:	4a43      	ldr	r2, [pc, #268]	@ (800f330 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800f224:	4293      	cmp	r3, r2
 800f226:	d906      	bls.n	800f236 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800f228:	69fb      	ldr	r3, [r7, #28]
 800f22a:	4a40      	ldr	r2, [pc, #256]	@ (800f32c <HAL_SD_ConfigWideBusOperation+0x218>)
 800f22c:	fba2 2303 	umull	r2, r3, r2, r3
 800f230:	0e5b      	lsrs	r3, r3, #25
 800f232:	61bb      	str	r3, [r7, #24]
 800f234:	e03d      	b.n	800f2b2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	695b      	ldr	r3, [r3, #20]
 800f23a:	61bb      	str	r3, [r7, #24]
 800f23c:	e039      	b.n	800f2b2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	695b      	ldr	r3, [r3, #20]
 800f242:	005b      	lsls	r3, r3, #1
 800f244:	69fa      	ldr	r2, [r7, #28]
 800f246:	fbb2 f3f3 	udiv	r3, r2, r3
 800f24a:	4a39      	ldr	r2, [pc, #228]	@ (800f330 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800f24c:	4293      	cmp	r3, r2
 800f24e:	d906      	bls.n	800f25e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800f250:	69fb      	ldr	r3, [r7, #28]
 800f252:	4a36      	ldr	r2, [pc, #216]	@ (800f32c <HAL_SD_ConfigWideBusOperation+0x218>)
 800f254:	fba2 2303 	umull	r2, r3, r2, r3
 800f258:	0e5b      	lsrs	r3, r3, #25
 800f25a:	61bb      	str	r3, [r7, #24]
 800f25c:	e029      	b.n	800f2b2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	695b      	ldr	r3, [r3, #20]
 800f262:	61bb      	str	r3, [r7, #24]
 800f264:	e025      	b.n	800f2b2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	695b      	ldr	r3, [r3, #20]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d10e      	bne.n	800f28c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800f26e:	69fb      	ldr	r3, [r7, #28]
 800f270:	4a30      	ldr	r2, [pc, #192]	@ (800f334 <HAL_SD_ConfigWideBusOperation+0x220>)
 800f272:	4293      	cmp	r3, r2
 800f274:	d906      	bls.n	800f284 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800f276:	69fb      	ldr	r3, [r7, #28]
 800f278:	4a2c      	ldr	r2, [pc, #176]	@ (800f32c <HAL_SD_ConfigWideBusOperation+0x218>)
 800f27a:	fba2 2303 	umull	r2, r3, r2, r3
 800f27e:	0e1b      	lsrs	r3, r3, #24
 800f280:	61bb      	str	r3, [r7, #24]
 800f282:	e016      	b.n	800f2b2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	695b      	ldr	r3, [r3, #20]
 800f288:	61bb      	str	r3, [r7, #24]
 800f28a:	e012      	b.n	800f2b2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	695b      	ldr	r3, [r3, #20]
 800f290:	005b      	lsls	r3, r3, #1
 800f292:	69fa      	ldr	r2, [r7, #28]
 800f294:	fbb2 f3f3 	udiv	r3, r2, r3
 800f298:	4a26      	ldr	r2, [pc, #152]	@ (800f334 <HAL_SD_ConfigWideBusOperation+0x220>)
 800f29a:	4293      	cmp	r3, r2
 800f29c:	d906      	bls.n	800f2ac <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800f29e:	69fb      	ldr	r3, [r7, #28]
 800f2a0:	4a22      	ldr	r2, [pc, #136]	@ (800f32c <HAL_SD_ConfigWideBusOperation+0x218>)
 800f2a2:	fba2 2303 	umull	r2, r3, r2, r3
 800f2a6:	0e1b      	lsrs	r3, r3, #24
 800f2a8:	61bb      	str	r3, [r7, #24]
 800f2aa:	e002      	b.n	800f2b2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	695b      	ldr	r3, [r3, #20]
 800f2b0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681c      	ldr	r4, [r3, #0]
 800f2b6:	466a      	mov	r2, sp
 800f2b8:	f107 0314 	add.w	r3, r7, #20
 800f2bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f2c0:	e882 0003 	stmia.w	r2, {r0, r1}
 800f2c4:	f107 0308 	add.w	r3, r7, #8
 800f2c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f2ca:	4620      	mov	r0, r4
 800f2cc:	f003 ffe0 	bl	8013290 <SDMMC_Init>
 800f2d0:	e008      	b.n	800f2e4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2d6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800f2de:	2301      	movs	r3, #1
 800f2e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	f004 f8ad 	bl	801344c <SDMMC_CmdBlockLength>
 800f2f2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f2f4:	6a3b      	ldr	r3, [r7, #32]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d00c      	beq.n	800f314 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	4a0a      	ldr	r2, [pc, #40]	@ (800f328 <HAL_SD_ConfigWideBusOperation+0x214>)
 800f300:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f306:	6a3b      	ldr	r3, [r7, #32]
 800f308:	431a      	orrs	r2, r3
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800f30e:	2301      	movs	r3, #1
 800f310:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2201      	movs	r2, #1
 800f318:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800f31c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800f320:	4618      	mov	r0, r3
 800f322:	372c      	adds	r7, #44	@ 0x2c
 800f324:	46bd      	mov	sp, r7
 800f326:	bd90      	pop	{r4, r7, pc}
 800f328:	1fe00fff 	.word	0x1fe00fff
 800f32c:	55e63b89 	.word	0x55e63b89
 800f330:	02faf080 	.word	0x02faf080
 800f334:	017d7840 	.word	0x017d7840

0800f338 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b086      	sub	sp, #24
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800f340:	2300      	movs	r3, #0
 800f342:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800f344:	f107 030c 	add.w	r3, r7, #12
 800f348:	4619      	mov	r1, r3
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f000 fa40 	bl	800f7d0 <SD_SendStatus>
 800f350:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d005      	beq.n	800f364 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	431a      	orrs	r2, r3
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	0a5b      	lsrs	r3, r3, #9
 800f368:	f003 030f 	and.w	r3, r3, #15
 800f36c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800f36e:	693b      	ldr	r3, [r7, #16]
}
 800f370:	4618      	mov	r0, r3
 800f372:	3718      	adds	r7, #24
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}

0800f378 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b090      	sub	sp, #64	@ 0x40
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800f380:	2300      	movs	r3, #0
 800f382:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800f384:	f7f4 ff3a 	bl	80041fc <HAL_GetTick>
 800f388:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	4618      	mov	r0, r3
 800f390:	f003 ffd7 	bl	8013342 <SDMMC_GetPowerState>
 800f394:	4603      	mov	r3, r0
 800f396:	2b00      	cmp	r3, #0
 800f398:	d102      	bne.n	800f3a0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f39a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800f39e:	e0b5      	b.n	800f50c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3a4:	2b03      	cmp	r3, #3
 800f3a6:	d02e      	beq.n	800f406 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f004 fa22 	bl	80137f6 <SDMMC_CmdSendCID>
 800f3b2:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800f3b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d001      	beq.n	800f3be <SD_InitCard+0x46>
    {
      return errorstate;
 800f3ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3bc:	e0a6      	b.n	800f50c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	2100      	movs	r1, #0
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f004 f802 	bl	80133ce <SDMMC_GetResponse>
 800f3ca:	4602      	mov	r2, r0
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	2104      	movs	r1, #4
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f003 fff9 	bl	80133ce <SDMMC_GetResponse>
 800f3dc:	4602      	mov	r2, r0
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	2108      	movs	r1, #8
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f003 fff0 	bl	80133ce <SDMMC_GetResponse>
 800f3ee:	4602      	mov	r2, r0
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	210c      	movs	r1, #12
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f003 ffe7 	bl	80133ce <SDMMC_GetResponse>
 800f400:	4602      	mov	r2, r0
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f40a:	2b03      	cmp	r3, #3
 800f40c:	d01d      	beq.n	800f44a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800f40e:	e019      	b.n	800f444 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	f107 020a 	add.w	r2, r7, #10
 800f418:	4611      	mov	r1, r2
 800f41a:	4618      	mov	r0, r3
 800f41c:	f004 fa2a 	bl	8013874 <SDMMC_CmdSetRelAdd>
 800f420:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800f422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f424:	2b00      	cmp	r3, #0
 800f426:	d001      	beq.n	800f42c <SD_InitCard+0xb4>
      {
        return errorstate;
 800f428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f42a:	e06f      	b.n	800f50c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800f42c:	f7f4 fee6 	bl	80041fc <HAL_GetTick>
 800f430:	4602      	mov	r2, r0
 800f432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f434:	1ad3      	subs	r3, r2, r3
 800f436:	f241 3287 	movw	r2, #4999	@ 0x1387
 800f43a:	4293      	cmp	r3, r2
 800f43c:	d902      	bls.n	800f444 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800f43e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f442:	e063      	b.n	800f50c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800f444:	897b      	ldrh	r3, [r7, #10]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d0e2      	beq.n	800f410 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f44e:	2b03      	cmp	r3, #3
 800f450:	d036      	beq.n	800f4c0 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800f452:	897b      	ldrh	r3, [r7, #10]
 800f454:	461a      	mov	r2, r3
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681a      	ldr	r2, [r3, #0]
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f462:	041b      	lsls	r3, r3, #16
 800f464:	4619      	mov	r1, r3
 800f466:	4610      	mov	r0, r2
 800f468:	f004 f9e4 	bl	8013834 <SDMMC_CmdSendCSD>
 800f46c:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800f46e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f470:	2b00      	cmp	r3, #0
 800f472:	d001      	beq.n	800f478 <SD_InitCard+0x100>
    {
      return errorstate;
 800f474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f476:	e049      	b.n	800f50c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	2100      	movs	r1, #0
 800f47e:	4618      	mov	r0, r3
 800f480:	f003 ffa5 	bl	80133ce <SDMMC_GetResponse>
 800f484:	4602      	mov	r2, r0
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	2104      	movs	r1, #4
 800f490:	4618      	mov	r0, r3
 800f492:	f003 ff9c 	bl	80133ce <SDMMC_GetResponse>
 800f496:	4602      	mov	r2, r0
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	2108      	movs	r1, #8
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f003 ff93 	bl	80133ce <SDMMC_GetResponse>
 800f4a8:	4602      	mov	r2, r0
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	210c      	movs	r1, #12
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	f003 ff8a 	bl	80133ce <SDMMC_GetResponse>
 800f4ba:	4602      	mov	r2, r0
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	2104      	movs	r1, #4
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f003 ff81 	bl	80133ce <SDMMC_GetResponse>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	0d1a      	lsrs	r2, r3, #20
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800f4d4:	f107 030c 	add.w	r3, r7, #12
 800f4d8:	4619      	mov	r1, r3
 800f4da:	6878      	ldr	r0, [r7, #4]
 800f4dc:	f7ff fb8c 	bl	800ebf8 <HAL_SD_GetCardCSD>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d002      	beq.n	800f4ec <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f4e6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800f4ea:	e00f      	b.n	800f50c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681a      	ldr	r2, [r3, #0]
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f4f4:	041b      	lsls	r3, r3, #16
 800f4f6:	4619      	mov	r1, r3
 800f4f8:	4610      	mov	r0, r2
 800f4fa:	f004 f893 	bl	8013624 <SDMMC_CmdSelDesel>
 800f4fe:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800f500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f502:	2b00      	cmp	r3, #0
 800f504:	d001      	beq.n	800f50a <SD_InitCard+0x192>
  {
    return errorstate;
 800f506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f508:	e000      	b.n	800f50c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800f50a:	2300      	movs	r3, #0
}
 800f50c:	4618      	mov	r0, r3
 800f50e:	3740      	adds	r7, #64	@ 0x40
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}

0800f514 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b086      	sub	sp, #24
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f51c:	2300      	movs	r3, #0
 800f51e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800f520:	2300      	movs	r3, #0
 800f522:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800f524:	2300      	movs	r3, #0
 800f526:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	4618      	mov	r0, r3
 800f52e:	f004 f89c 	bl	801366a <SDMMC_CmdGoIdleState>
 800f532:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d001      	beq.n	800f53e <SD_PowerON+0x2a>
  {
    return errorstate;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	e072      	b.n	800f624 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	4618      	mov	r0, r3
 800f544:	f004 f8af 	bl	80136a6 <SDMMC_CmdOperCond>
 800f548:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f550:	d10d      	bne.n	800f56e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	2200      	movs	r2, #0
 800f556:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	4618      	mov	r0, r3
 800f55e:	f004 f884 	bl	801366a <SDMMC_CmdGoIdleState>
 800f562:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d004      	beq.n	800f574 <SD_PowerON+0x60>
    {
      return errorstate;
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	e05a      	b.n	800f624 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	2201      	movs	r2, #1
 800f572:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f578:	2b01      	cmp	r3, #1
 800f57a:	d137      	bne.n	800f5ec <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	2100      	movs	r1, #0
 800f582:	4618      	mov	r0, r3
 800f584:	f004 f8af 	bl	80136e6 <SDMMC_CmdAppCommand>
 800f588:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d02d      	beq.n	800f5ec <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f590:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800f594:	e046      	b.n	800f624 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	2100      	movs	r1, #0
 800f59c:	4618      	mov	r0, r3
 800f59e:	f004 f8a2 	bl	80136e6 <SDMMC_CmdAppCommand>
 800f5a2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d001      	beq.n	800f5ae <SD_PowerON+0x9a>
    {
      return errorstate;
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	e03a      	b.n	800f624 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	491e      	ldr	r1, [pc, #120]	@ (800f62c <SD_PowerON+0x118>)
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f004 f8b9 	bl	801372c <SDMMC_CmdAppOperCommand>
 800f5ba:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d002      	beq.n	800f5c8 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f5c2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800f5c6:	e02d      	b.n	800f624 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	2100      	movs	r1, #0
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f003 fefd 	bl	80133ce <SDMMC_GetResponse>
 800f5d4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800f5d6:	697b      	ldr	r3, [r7, #20]
 800f5d8:	0fdb      	lsrs	r3, r3, #31
 800f5da:	2b01      	cmp	r3, #1
 800f5dc:	d101      	bne.n	800f5e2 <SD_PowerON+0xce>
 800f5de:	2301      	movs	r3, #1
 800f5e0:	e000      	b.n	800f5e4 <SD_PowerON+0xd0>
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	613b      	str	r3, [r7, #16]

    count++;
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	3301      	adds	r3, #1
 800f5ea:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f5f2:	4293      	cmp	r3, r2
 800f5f4:	d802      	bhi.n	800f5fc <SD_PowerON+0xe8>
 800f5f6:	693b      	ldr	r3, [r7, #16]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d0cc      	beq.n	800f596 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f602:	4293      	cmp	r3, r2
 800f604:	d902      	bls.n	800f60c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f606:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f60a:	e00b      	b.n	800f624 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2200      	movs	r2, #0
 800f610:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d002      	beq.n	800f622 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2201      	movs	r2, #1
 800f620:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800f622:	2300      	movs	r3, #0
}
 800f624:	4618      	mov	r0, r3
 800f626:	3718      	adds	r7, #24
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}
 800f62c:	c1100000 	.word	0xc1100000

0800f630 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b08c      	sub	sp, #48	@ 0x30
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
 800f638:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f63a:	f7f4 fddf 	bl	80041fc <HAL_GetTick>
 800f63e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	2100      	movs	r1, #0
 800f64a:	4618      	mov	r0, r3
 800f64c:	f003 febf 	bl	80133ce <SDMMC_GetResponse>
 800f650:	4603      	mov	r3, r0
 800f652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f656:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f65a:	d102      	bne.n	800f662 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f65c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f660:	e0b0      	b.n	800f7c4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	2140      	movs	r1, #64	@ 0x40
 800f668:	4618      	mov	r0, r3
 800f66a:	f003 feef 	bl	801344c <SDMMC_CmdBlockLength>
 800f66e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f670:	6a3b      	ldr	r3, [r7, #32]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d005      	beq.n	800f682 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800f67e:	6a3b      	ldr	r3, [r7, #32]
 800f680:	e0a0      	b.n	800f7c4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681a      	ldr	r2, [r3, #0]
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f68a:	041b      	lsls	r3, r3, #16
 800f68c:	4619      	mov	r1, r3
 800f68e:	4610      	mov	r0, r2
 800f690:	f004 f829 	bl	80136e6 <SDMMC_CmdAppCommand>
 800f694:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f696:	6a3b      	ldr	r3, [r7, #32]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d005      	beq.n	800f6a8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800f6a4:	6a3b      	ldr	r3, [r7, #32]
 800f6a6:	e08d      	b.n	800f7c4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f6a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f6ac:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800f6ae:	2340      	movs	r3, #64	@ 0x40
 800f6b0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800f6b2:	2360      	movs	r3, #96	@ 0x60
 800f6b4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f6b6:	2302      	movs	r3, #2
 800f6b8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f6be:	2301      	movs	r3, #1
 800f6c0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	f107 0208 	add.w	r2, r7, #8
 800f6ca:	4611      	mov	r1, r2
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f003 fe91 	bl	80133f4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f004 f911 	bl	80138fe <SDMMC_CmdStatusRegister>
 800f6dc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f6de:	6a3b      	ldr	r3, [r7, #32]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d02b      	beq.n	800f73c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800f6ec:	6a3b      	ldr	r3, [r7, #32]
 800f6ee:	e069      	b.n	800f7c4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f6f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d013      	beq.n	800f726 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800f6fe:	2300      	movs	r3, #0
 800f700:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f702:	e00d      	b.n	800f720 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	4618      	mov	r0, r3
 800f70a:	f003 fdeb 	bl	80132e4 <SDMMC_ReadFIFO>
 800f70e:	4602      	mov	r2, r0
 800f710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f712:	601a      	str	r2, [r3, #0]
        pData++;
 800f714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f716:	3304      	adds	r3, #4
 800f718:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800f71a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f71c:	3301      	adds	r3, #1
 800f71e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f722:	2b07      	cmp	r3, #7
 800f724:	d9ee      	bls.n	800f704 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f726:	f7f4 fd69 	bl	80041fc <HAL_GetTick>
 800f72a:	4602      	mov	r2, r0
 800f72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f72e:	1ad3      	subs	r3, r2, r3
 800f730:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f734:	d102      	bne.n	800f73c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f736:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f73a:	e043      	b.n	800f7c4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f742:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800f746:	2b00      	cmp	r3, #0
 800f748:	d0d2      	beq.n	800f6f0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f750:	f003 0308 	and.w	r3, r3, #8
 800f754:	2b00      	cmp	r3, #0
 800f756:	d001      	beq.n	800f75c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f758:	2308      	movs	r3, #8
 800f75a:	e033      	b.n	800f7c4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f762:	f003 0302 	and.w	r3, r3, #2
 800f766:	2b00      	cmp	r3, #0
 800f768:	d001      	beq.n	800f76e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f76a:	2302      	movs	r3, #2
 800f76c:	e02a      	b.n	800f7c4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f774:	f003 0320 	and.w	r3, r3, #32
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d017      	beq.n	800f7ac <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800f77c:	2320      	movs	r3, #32
 800f77e:	e021      	b.n	800f7c4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	4618      	mov	r0, r3
 800f786:	f003 fdad 	bl	80132e4 <SDMMC_ReadFIFO>
 800f78a:	4602      	mov	r2, r0
 800f78c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f78e:	601a      	str	r2, [r3, #0]
    pData++;
 800f790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f792:	3304      	adds	r3, #4
 800f794:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f796:	f7f4 fd31 	bl	80041fc <HAL_GetTick>
 800f79a:	4602      	mov	r2, r0
 800f79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f79e:	1ad3      	subs	r3, r2, r3
 800f7a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f7a4:	d102      	bne.n	800f7ac <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f7a6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f7aa:	e00b      	b.n	800f7c4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f7b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d1e2      	bne.n	800f780 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	4a03      	ldr	r2, [pc, #12]	@ (800f7cc <SD_SendSDStatus+0x19c>)
 800f7c0:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800f7c2:	2300      	movs	r3, #0
}
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	3730      	adds	r7, #48	@ 0x30
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	bd80      	pop	{r7, pc}
 800f7cc:	18000f3a 	.word	0x18000f3a

0800f7d0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b084      	sub	sp, #16
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
 800f7d8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d102      	bne.n	800f7e6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f7e0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f7e4:	e018      	b.n	800f818 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681a      	ldr	r2, [r3, #0]
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f7ee:	041b      	lsls	r3, r3, #16
 800f7f0:	4619      	mov	r1, r3
 800f7f2:	4610      	mov	r0, r2
 800f7f4:	f004 f860 	bl	80138b8 <SDMMC_CmdSendStatus>
 800f7f8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d001      	beq.n	800f804 <SD_SendStatus+0x34>
  {
    return errorstate;
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	e009      	b.n	800f818 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	2100      	movs	r1, #0
 800f80a:	4618      	mov	r0, r3
 800f80c:	f003 fddf 	bl	80133ce <SDMMC_GetResponse>
 800f810:	4602      	mov	r2, r0
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f816:	2300      	movs	r3, #0
}
 800f818:	4618      	mov	r0, r3
 800f81a:	3710      	adds	r7, #16
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}

0800f820 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b086      	sub	sp, #24
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f828:	2300      	movs	r3, #0
 800f82a:	60fb      	str	r3, [r7, #12]
 800f82c:	2300      	movs	r3, #0
 800f82e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	2100      	movs	r1, #0
 800f836:	4618      	mov	r0, r3
 800f838:	f003 fdc9 	bl	80133ce <SDMMC_GetResponse>
 800f83c:	4603      	mov	r3, r0
 800f83e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f842:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f846:	d102      	bne.n	800f84e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f848:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f84c:	e02f      	b.n	800f8ae <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f84e:	f107 030c 	add.w	r3, r7, #12
 800f852:	4619      	mov	r1, r3
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f000 f879 	bl	800f94c <SD_FindSCR>
 800f85a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f85c:	697b      	ldr	r3, [r7, #20]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d001      	beq.n	800f866 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	e023      	b.n	800f8ae <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f866:	693b      	ldr	r3, [r7, #16]
 800f868:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d01c      	beq.n	800f8aa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681a      	ldr	r2, [r3, #0]
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f878:	041b      	lsls	r3, r3, #16
 800f87a:	4619      	mov	r1, r3
 800f87c:	4610      	mov	r0, r2
 800f87e:	f003 ff32 	bl	80136e6 <SDMMC_CmdAppCommand>
 800f882:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f884:	697b      	ldr	r3, [r7, #20]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d001      	beq.n	800f88e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f88a:	697b      	ldr	r3, [r7, #20]
 800f88c:	e00f      	b.n	800f8ae <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	2102      	movs	r1, #2
 800f894:	4618      	mov	r0, r3
 800f896:	f003 ff69 	bl	801376c <SDMMC_CmdBusWidth>
 800f89a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f89c:	697b      	ldr	r3, [r7, #20]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d001      	beq.n	800f8a6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f8a2:	697b      	ldr	r3, [r7, #20]
 800f8a4:	e003      	b.n	800f8ae <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	e001      	b.n	800f8ae <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f8aa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	3718      	adds	r7, #24
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}

0800f8b6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f8b6:	b580      	push	{r7, lr}
 800f8b8:	b086      	sub	sp, #24
 800f8ba:	af00      	add	r7, sp, #0
 800f8bc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f8be:	2300      	movs	r3, #0
 800f8c0:	60fb      	str	r3, [r7, #12]
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	2100      	movs	r1, #0
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	f003 fd7e 	bl	80133ce <SDMMC_GetResponse>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f8d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f8dc:	d102      	bne.n	800f8e4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f8de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f8e2:	e02f      	b.n	800f944 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f8e4:	f107 030c 	add.w	r3, r7, #12
 800f8e8:	4619      	mov	r1, r3
 800f8ea:	6878      	ldr	r0, [r7, #4]
 800f8ec:	f000 f82e 	bl	800f94c <SD_FindSCR>
 800f8f0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f8f2:	697b      	ldr	r3, [r7, #20]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d001      	beq.n	800f8fc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f8f8:	697b      	ldr	r3, [r7, #20]
 800f8fa:	e023      	b.n	800f944 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f902:	2b00      	cmp	r3, #0
 800f904:	d01c      	beq.n	800f940 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681a      	ldr	r2, [r3, #0]
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f90e:	041b      	lsls	r3, r3, #16
 800f910:	4619      	mov	r1, r3
 800f912:	4610      	mov	r0, r2
 800f914:	f003 fee7 	bl	80136e6 <SDMMC_CmdAppCommand>
 800f918:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f91a:	697b      	ldr	r3, [r7, #20]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d001      	beq.n	800f924 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f920:	697b      	ldr	r3, [r7, #20]
 800f922:	e00f      	b.n	800f944 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	2100      	movs	r1, #0
 800f92a:	4618      	mov	r0, r3
 800f92c:	f003 ff1e 	bl	801376c <SDMMC_CmdBusWidth>
 800f930:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f932:	697b      	ldr	r3, [r7, #20]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d001      	beq.n	800f93c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f938:	697b      	ldr	r3, [r7, #20]
 800f93a:	e003      	b.n	800f944 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f93c:	2300      	movs	r3, #0
 800f93e:	e001      	b.n	800f944 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f940:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800f944:	4618      	mov	r0, r3
 800f946:	3718      	adds	r7, #24
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}

0800f94c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b08e      	sub	sp, #56	@ 0x38
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
 800f954:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f956:	f7f4 fc51 	bl	80041fc <HAL_GetTick>
 800f95a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800f95c:	2300      	movs	r3, #0
 800f95e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800f960:	2300      	movs	r3, #0
 800f962:	60bb      	str	r3, [r7, #8]
 800f964:	2300      	movs	r3, #0
 800f966:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	2108      	movs	r1, #8
 800f972:	4618      	mov	r0, r3
 800f974:	f003 fd6a 	bl	801344c <SDMMC_CmdBlockLength>
 800f978:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f97a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d001      	beq.n	800f984 <SD_FindSCR+0x38>
  {
    return errorstate;
 800f980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f982:	e0ad      	b.n	800fae0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681a      	ldr	r2, [r3, #0]
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f98c:	041b      	lsls	r3, r3, #16
 800f98e:	4619      	mov	r1, r3
 800f990:	4610      	mov	r0, r2
 800f992:	f003 fea8 	bl	80136e6 <SDMMC_CmdAppCommand>
 800f996:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d001      	beq.n	800f9a2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800f99e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9a0:	e09e      	b.n	800fae0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f9a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f9a6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f9a8:	2308      	movs	r3, #8
 800f9aa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800f9ac:	2330      	movs	r3, #48	@ 0x30
 800f9ae:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f9b0:	2302      	movs	r3, #2
 800f9b2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f9b8:	2301      	movs	r3, #1
 800f9ba:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	f107 0210 	add.w	r2, r7, #16
 800f9c4:	4611      	mov	r1, r2
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f003 fd14 	bl	80133f4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f003 feee 	bl	80137b2 <SDMMC_CmdSendSCR>
 800f9d6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d027      	beq.n	800fa2e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800f9de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9e0:	e07e      	b.n	800fae0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f9e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d113      	bne.n	800fa18 <SD_FindSCR+0xcc>
 800f9f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d110      	bne.n	800fa18 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f003 fc72 	bl	80132e4 <SDMMC_ReadFIFO>
 800fa00:	4603      	mov	r3, r0
 800fa02:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f003 fc6b 	bl	80132e4 <SDMMC_ReadFIFO>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	60fb      	str	r3, [r7, #12]
      index++;
 800fa12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa14:	3301      	adds	r3, #1
 800fa16:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800fa18:	f7f4 fbf0 	bl	80041fc <HAL_GetTick>
 800fa1c:	4602      	mov	r2, r0
 800fa1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa20:	1ad3      	subs	r3, r2, r3
 800fa22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fa26:	d102      	bne.n	800fa2e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800fa28:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fa2c:	e058      	b.n	800fae0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fa34:	f240 532a 	movw	r3, #1322	@ 0x52a
 800fa38:	4013      	ands	r3, r2
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d0d1      	beq.n	800f9e2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa44:	f003 0308 	and.w	r3, r3, #8
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d005      	beq.n	800fa58 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	2208      	movs	r2, #8
 800fa52:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800fa54:	2308      	movs	r3, #8
 800fa56:	e043      	b.n	800fae0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa5e:	f003 0302 	and.w	r3, r3, #2
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d005      	beq.n	800fa72 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	2202      	movs	r2, #2
 800fa6c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800fa6e:	2302      	movs	r3, #2
 800fa70:	e036      	b.n	800fae0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa78:	f003 0320 	and.w	r3, r3, #32
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d005      	beq.n	800fa8c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	2220      	movs	r2, #32
 800fa86:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800fa88:	2320      	movs	r3, #32
 800fa8a:	e029      	b.n	800fae0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	4a15      	ldr	r2, [pc, #84]	@ (800fae8 <SD_FindSCR+0x19c>)
 800fa92:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	061a      	lsls	r2, r3, #24
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	021b      	lsls	r3, r3, #8
 800fa9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800faa0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	0a1b      	lsrs	r3, r3, #8
 800faa6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800faaa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	0e1b      	lsrs	r3, r3, #24
 800fab0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800fab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fab4:	601a      	str	r2, [r3, #0]
    scr++;
 800fab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fab8:	3304      	adds	r3, #4
 800faba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800fabc:	68bb      	ldr	r3, [r7, #8]
 800fabe:	061a      	lsls	r2, r3, #24
 800fac0:	68bb      	ldr	r3, [r7, #8]
 800fac2:	021b      	lsls	r3, r3, #8
 800fac4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800fac8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	0a1b      	lsrs	r3, r3, #8
 800face:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800fad2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	0e1b      	lsrs	r3, r3, #24
 800fad8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800fada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fadc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800fade:	2300      	movs	r3, #0
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3738      	adds	r7, #56	@ 0x38
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}
 800fae8:	18000f3a 	.word	0x18000f3a

0800faec <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b086      	sub	sp, #24
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800faf8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fafe:	2b1f      	cmp	r3, #31
 800fb00:	d936      	bls.n	800fb70 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800fb02:	2300      	movs	r3, #0
 800fb04:	617b      	str	r3, [r7, #20]
 800fb06:	e027      	b.n	800fb58 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f003 fbe9 	bl	80132e4 <SDMMC_ReadFIFO>
 800fb12:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	b2da      	uxtb	r2, r3
 800fb18:	693b      	ldr	r3, [r7, #16]
 800fb1a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fb1c:	693b      	ldr	r3, [r7, #16]
 800fb1e:	3301      	adds	r3, #1
 800fb20:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	0a1b      	lsrs	r3, r3, #8
 800fb26:	b2da      	uxtb	r2, r3
 800fb28:	693b      	ldr	r3, [r7, #16]
 800fb2a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fb2c:	693b      	ldr	r3, [r7, #16]
 800fb2e:	3301      	adds	r3, #1
 800fb30:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	0c1b      	lsrs	r3, r3, #16
 800fb36:	b2da      	uxtb	r2, r3
 800fb38:	693b      	ldr	r3, [r7, #16]
 800fb3a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fb3c:	693b      	ldr	r3, [r7, #16]
 800fb3e:	3301      	adds	r3, #1
 800fb40:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	0e1b      	lsrs	r3, r3, #24
 800fb46:	b2da      	uxtb	r2, r3
 800fb48:	693b      	ldr	r3, [r7, #16]
 800fb4a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fb4c:	693b      	ldr	r3, [r7, #16]
 800fb4e:	3301      	adds	r3, #1
 800fb50:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	3301      	adds	r3, #1
 800fb56:	617b      	str	r3, [r7, #20]
 800fb58:	697b      	ldr	r3, [r7, #20]
 800fb5a:	2b07      	cmp	r3, #7
 800fb5c:	d9d4      	bls.n	800fb08 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	693a      	ldr	r2, [r7, #16]
 800fb62:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb68:	f1a3 0220 	sub.w	r2, r3, #32
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800fb70:	bf00      	nop
 800fb72:	3718      	adds	r7, #24
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}

0800fb78 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b086      	sub	sp, #24
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	69db      	ldr	r3, [r3, #28]
 800fb84:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6a1b      	ldr	r3, [r3, #32]
 800fb8a:	2b1f      	cmp	r3, #31
 800fb8c:	d93a      	bls.n	800fc04 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800fb8e:	2300      	movs	r3, #0
 800fb90:	617b      	str	r3, [r7, #20]
 800fb92:	e02b      	b.n	800fbec <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800fb94:	693b      	ldr	r3, [r7, #16]
 800fb96:	781b      	ldrb	r3, [r3, #0]
 800fb98:	60fb      	str	r3, [r7, #12]
      tmp++;
 800fb9a:	693b      	ldr	r3, [r7, #16]
 800fb9c:	3301      	adds	r3, #1
 800fb9e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800fba0:	693b      	ldr	r3, [r7, #16]
 800fba2:	781b      	ldrb	r3, [r3, #0]
 800fba4:	021a      	lsls	r2, r3, #8
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	4313      	orrs	r3, r2
 800fbaa:	60fb      	str	r3, [r7, #12]
      tmp++;
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	3301      	adds	r3, #1
 800fbb0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800fbb2:	693b      	ldr	r3, [r7, #16]
 800fbb4:	781b      	ldrb	r3, [r3, #0]
 800fbb6:	041a      	lsls	r2, r3, #16
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	4313      	orrs	r3, r2
 800fbbc:	60fb      	str	r3, [r7, #12]
      tmp++;
 800fbbe:	693b      	ldr	r3, [r7, #16]
 800fbc0:	3301      	adds	r3, #1
 800fbc2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800fbc4:	693b      	ldr	r3, [r7, #16]
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	061a      	lsls	r2, r3, #24
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	4313      	orrs	r3, r2
 800fbce:	60fb      	str	r3, [r7, #12]
      tmp++;
 800fbd0:	693b      	ldr	r3, [r7, #16]
 800fbd2:	3301      	adds	r3, #1
 800fbd4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	f107 020c 	add.w	r2, r7, #12
 800fbde:	4611      	mov	r1, r2
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f003 fb8c 	bl	80132fe <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	3301      	adds	r3, #1
 800fbea:	617b      	str	r3, [r7, #20]
 800fbec:	697b      	ldr	r3, [r7, #20]
 800fbee:	2b07      	cmp	r3, #7
 800fbf0:	d9d0      	bls.n	800fb94 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	693a      	ldr	r2, [r7, #16]
 800fbf6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	6a1b      	ldr	r3, [r3, #32]
 800fbfc:	f1a3 0220 	sub.w	r2, r3, #32
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	621a      	str	r2, [r3, #32]
  }
}
 800fc04:	bf00      	nop
 800fc06:	3718      	adds	r7, #24
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bd80      	pop	{r7, pc}

0800fc0c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800fc0c:	b480      	push	{r7}
 800fc0e:	b083      	sub	sp, #12
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800fc14:	bf00      	nop
 800fc16:	370c      	adds	r7, #12
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1e:	4770      	bx	lr

0800fc20 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800fc20:	b480      	push	{r7}
 800fc22:	b083      	sub	sp, #12
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800fc28:	bf00      	nop
 800fc2a:	370c      	adds	r7, #12
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc32:	4770      	bx	lr

0800fc34 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800fc34:	b480      	push	{r7}
 800fc36:	b083      	sub	sp, #12
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800fc3c:	bf00      	nop
 800fc3e:	370c      	adds	r7, #12
 800fc40:	46bd      	mov	sp, r7
 800fc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc46:	4770      	bx	lr

0800fc48 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800fc48:	b480      	push	{r7}
 800fc4a:	b083      	sub	sp, #12
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800fc50:	bf00      	nop
 800fc52:	370c      	adds	r7, #12
 800fc54:	46bd      	mov	sp, r7
 800fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5a:	4770      	bx	lr

0800fc5c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b084      	sub	sp, #16
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d101      	bne.n	800fc6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800fc6a:	2301      	movs	r3, #1
 800fc6c:	e10f      	b.n	800fe8e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	2200      	movs	r2, #0
 800fc72:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	4a87      	ldr	r2, [pc, #540]	@ (800fe98 <HAL_SPI_Init+0x23c>)
 800fc7a:	4293      	cmp	r3, r2
 800fc7c:	d00f      	beq.n	800fc9e <HAL_SPI_Init+0x42>
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	4a86      	ldr	r2, [pc, #536]	@ (800fe9c <HAL_SPI_Init+0x240>)
 800fc84:	4293      	cmp	r3, r2
 800fc86:	d00a      	beq.n	800fc9e <HAL_SPI_Init+0x42>
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	4a84      	ldr	r2, [pc, #528]	@ (800fea0 <HAL_SPI_Init+0x244>)
 800fc8e:	4293      	cmp	r3, r2
 800fc90:	d005      	beq.n	800fc9e <HAL_SPI_Init+0x42>
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	68db      	ldr	r3, [r3, #12]
 800fc96:	2b0f      	cmp	r3, #15
 800fc98:	d901      	bls.n	800fc9e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800fc9a:	2301      	movs	r3, #1
 800fc9c:	e0f7      	b.n	800fe8e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800fc9e:	6878      	ldr	r0, [r7, #4]
 800fca0:	f000 fd5a 	bl	8010758 <SPI_GetPacketSize>
 800fca4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	4a7b      	ldr	r2, [pc, #492]	@ (800fe98 <HAL_SPI_Init+0x23c>)
 800fcac:	4293      	cmp	r3, r2
 800fcae:	d00c      	beq.n	800fcca <HAL_SPI_Init+0x6e>
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	4a79      	ldr	r2, [pc, #484]	@ (800fe9c <HAL_SPI_Init+0x240>)
 800fcb6:	4293      	cmp	r3, r2
 800fcb8:	d007      	beq.n	800fcca <HAL_SPI_Init+0x6e>
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	4a78      	ldr	r2, [pc, #480]	@ (800fea0 <HAL_SPI_Init+0x244>)
 800fcc0:	4293      	cmp	r3, r2
 800fcc2:	d002      	beq.n	800fcca <HAL_SPI_Init+0x6e>
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	2b08      	cmp	r3, #8
 800fcc8:	d811      	bhi.n	800fcee <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800fcce:	4a72      	ldr	r2, [pc, #456]	@ (800fe98 <HAL_SPI_Init+0x23c>)
 800fcd0:	4293      	cmp	r3, r2
 800fcd2:	d009      	beq.n	800fce8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	4a70      	ldr	r2, [pc, #448]	@ (800fe9c <HAL_SPI_Init+0x240>)
 800fcda:	4293      	cmp	r3, r2
 800fcdc:	d004      	beq.n	800fce8 <HAL_SPI_Init+0x8c>
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	4a6f      	ldr	r2, [pc, #444]	@ (800fea0 <HAL_SPI_Init+0x244>)
 800fce4:	4293      	cmp	r3, r2
 800fce6:	d104      	bne.n	800fcf2 <HAL_SPI_Init+0x96>
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	2b10      	cmp	r3, #16
 800fcec:	d901      	bls.n	800fcf2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800fcee:	2301      	movs	r3, #1
 800fcf0:	e0cd      	b.n	800fe8e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800fcf8:	b2db      	uxtb	r3, r3
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d106      	bne.n	800fd0c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	2200      	movs	r2, #0
 800fd02:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f7f3 fbe2 	bl	80034d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2202      	movs	r2, #2
 800fd10:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	681a      	ldr	r2, [r3, #0]
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	f022 0201 	bic.w	r2, r2, #1
 800fd22:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	689b      	ldr	r3, [r3, #8]
 800fd2a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800fd2e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	699b      	ldr	r3, [r3, #24]
 800fd34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800fd38:	d119      	bne.n	800fd6e <HAL_SPI_Init+0x112>
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	685b      	ldr	r3, [r3, #4]
 800fd3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fd42:	d103      	bne.n	800fd4c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d008      	beq.n	800fd5e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d10c      	bne.n	800fd6e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800fd58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fd5c:	d107      	bne.n	800fd6e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	681a      	ldr	r2, [r3, #0]
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800fd6c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	685b      	ldr	r3, [r3, #4]
 800fd72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d00f      	beq.n	800fd9a <HAL_SPI_Init+0x13e>
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	68db      	ldr	r3, [r3, #12]
 800fd7e:	2b06      	cmp	r3, #6
 800fd80:	d90b      	bls.n	800fd9a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	430a      	orrs	r2, r1
 800fd96:	601a      	str	r2, [r3, #0]
 800fd98:	e007      	b.n	800fdaa <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	681a      	ldr	r2, [r3, #0]
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800fda8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	69da      	ldr	r2, [r3, #28]
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fdb2:	431a      	orrs	r2, r3
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	431a      	orrs	r2, r3
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fdbc:	ea42 0103 	orr.w	r1, r2, r3
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	68da      	ldr	r2, [r3, #12]
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	430a      	orrs	r2, r1
 800fdca:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdd4:	431a      	orrs	r2, r3
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdda:	431a      	orrs	r2, r3
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	699b      	ldr	r3, [r3, #24]
 800fde0:	431a      	orrs	r2, r3
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	691b      	ldr	r3, [r3, #16]
 800fde6:	431a      	orrs	r2, r3
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	695b      	ldr	r3, [r3, #20]
 800fdec:	431a      	orrs	r2, r3
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	6a1b      	ldr	r3, [r3, #32]
 800fdf2:	431a      	orrs	r2, r3
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	685b      	ldr	r3, [r3, #4]
 800fdf8:	431a      	orrs	r2, r3
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fdfe:	431a      	orrs	r2, r3
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	689b      	ldr	r3, [r3, #8]
 800fe04:	431a      	orrs	r2, r3
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fe0a:	ea42 0103 	orr.w	r1, r2, r3
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	430a      	orrs	r2, r1
 800fe18:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	685b      	ldr	r3, [r3, #4]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d113      	bne.n	800fe4a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	689b      	ldr	r3, [r3, #8]
 800fe28:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fe34:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	689b      	ldr	r3, [r3, #8]
 800fe3c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800fe48:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	f022 0201 	bic.w	r2, r2, #1
 800fe58:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	685b      	ldr	r3, [r3, #4]
 800fe5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d00a      	beq.n	800fe7c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	68db      	ldr	r3, [r3, #12]
 800fe6c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	430a      	orrs	r2, r1
 800fe7a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2200      	movs	r2, #0
 800fe80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2201      	movs	r2, #1
 800fe88:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800fe8c:	2300      	movs	r3, #0
}
 800fe8e:	4618      	mov	r0, r3
 800fe90:	3710      	adds	r7, #16
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}
 800fe96:	bf00      	nop
 800fe98:	40013000 	.word	0x40013000
 800fe9c:	40003800 	.word	0x40003800
 800fea0:	40003c00 	.word	0x40003c00

0800fea4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b08a      	sub	sp, #40	@ 0x28
 800fea8:	af02      	add	r7, sp, #8
 800feaa:	60f8      	str	r0, [r7, #12]
 800feac:	60b9      	str	r1, [r7, #8]
 800feae:	603b      	str	r3, [r7, #0]
 800feb0:	4613      	mov	r3, r2
 800feb2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	3320      	adds	r3, #32
 800feba:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800febc:	2300      	movs	r3, #0
 800febe:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800fec6:	2b01      	cmp	r3, #1
 800fec8:	d101      	bne.n	800fece <HAL_SPI_Transmit+0x2a>
 800feca:	2302      	movs	r3, #2
 800fecc:	e1e1      	b.n	8010292 <HAL_SPI_Transmit+0x3ee>
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	2201      	movs	r2, #1
 800fed2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fed6:	f7f4 f991 	bl	80041fc <HAL_GetTick>
 800feda:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800fee2:	b2db      	uxtb	r3, r3
 800fee4:	2b01      	cmp	r3, #1
 800fee6:	d007      	beq.n	800fef8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800fee8:	2302      	movs	r3, #2
 800feea:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	2200      	movs	r2, #0
 800fef0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800fef4:	7efb      	ldrb	r3, [r7, #27]
 800fef6:	e1cc      	b.n	8010292 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d002      	beq.n	800ff04 <HAL_SPI_Transmit+0x60>
 800fefe:	88fb      	ldrh	r3, [r7, #6]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d107      	bne.n	800ff14 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800ff04:	2301      	movs	r3, #1
 800ff06:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800ff10:	7efb      	ldrb	r3, [r7, #27]
 800ff12:	e1be      	b.n	8010292 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	2203      	movs	r2, #3
 800ff18:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	2200      	movs	r2, #0
 800ff20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	68ba      	ldr	r2, [r7, #8]
 800ff28:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	88fa      	ldrh	r2, [r7, #6]
 800ff2e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	88fa      	ldrh	r2, [r7, #6]
 800ff36:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	2200      	movs	r2, #0
 800ff44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	2200      	movs	r2, #0
 800ff54:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	2200      	movs	r2, #0
 800ff5a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	689b      	ldr	r3, [r3, #8]
 800ff60:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800ff64:	d108      	bne.n	800ff78 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	681a      	ldr	r2, [r3, #0]
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ff74:	601a      	str	r2, [r3, #0]
 800ff76:	e009      	b.n	800ff8c <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	68db      	ldr	r3, [r3, #12]
 800ff7e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800ff8a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	685a      	ldr	r2, [r3, #4]
 800ff92:	4b96      	ldr	r3, [pc, #600]	@ (80101ec <HAL_SPI_Transmit+0x348>)
 800ff94:	4013      	ands	r3, r2
 800ff96:	88f9      	ldrh	r1, [r7, #6]
 800ff98:	68fa      	ldr	r2, [r7, #12]
 800ff9a:	6812      	ldr	r2, [r2, #0]
 800ff9c:	430b      	orrs	r3, r1
 800ff9e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	681a      	ldr	r2, [r3, #0]
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	f042 0201 	orr.w	r2, r2, #1
 800ffae:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	685b      	ldr	r3, [r3, #4]
 800ffb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ffb8:	d107      	bne.n	800ffca <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	681a      	ldr	r2, [r3, #0]
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ffc8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	68db      	ldr	r3, [r3, #12]
 800ffce:	2b0f      	cmp	r3, #15
 800ffd0:	d947      	bls.n	8010062 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ffd2:	e03f      	b.n	8010054 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	695b      	ldr	r3, [r3, #20]
 800ffda:	f003 0302 	and.w	r3, r3, #2
 800ffde:	2b02      	cmp	r3, #2
 800ffe0:	d114      	bne.n	801000c <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	6812      	ldr	r2, [r2, #0]
 800ffec:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fff2:	1d1a      	adds	r2, r3, #4
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fffe:	b29b      	uxth	r3, r3
 8010000:	3b01      	subs	r3, #1
 8010002:	b29a      	uxth	r2, r3
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801000a:	e023      	b.n	8010054 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801000c:	f7f4 f8f6 	bl	80041fc <HAL_GetTick>
 8010010:	4602      	mov	r2, r0
 8010012:	697b      	ldr	r3, [r7, #20]
 8010014:	1ad3      	subs	r3, r2, r3
 8010016:	683a      	ldr	r2, [r7, #0]
 8010018:	429a      	cmp	r2, r3
 801001a:	d803      	bhi.n	8010024 <HAL_SPI_Transmit+0x180>
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010022:	d102      	bne.n	801002a <HAL_SPI_Transmit+0x186>
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d114      	bne.n	8010054 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801002a:	68f8      	ldr	r0, [r7, #12]
 801002c:	f000 fac6 	bl	80105bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	2200      	movs	r2, #0
 8010034:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801003e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	2201      	movs	r2, #1
 801004c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 8010050:	2303      	movs	r3, #3
 8010052:	e11e      	b.n	8010292 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801005a:	b29b      	uxth	r3, r3
 801005c:	2b00      	cmp	r3, #0
 801005e:	d1b9      	bne.n	800ffd4 <HAL_SPI_Transmit+0x130>
 8010060:	e0f1      	b.n	8010246 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	68db      	ldr	r3, [r3, #12]
 8010066:	2b07      	cmp	r3, #7
 8010068:	f240 80e6 	bls.w	8010238 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 801006c:	e05d      	b.n	801012a <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	695b      	ldr	r3, [r3, #20]
 8010074:	f003 0302 	and.w	r3, r3, #2
 8010078:	2b02      	cmp	r3, #2
 801007a:	d132      	bne.n	80100e2 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010082:	b29b      	uxth	r3, r3
 8010084:	2b01      	cmp	r3, #1
 8010086:	d918      	bls.n	80100ba <HAL_SPI_Transmit+0x216>
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801008c:	2b00      	cmp	r3, #0
 801008e:	d014      	beq.n	80100ba <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	6812      	ldr	r2, [r2, #0]
 801009a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80100a0:	1d1a      	adds	r2, r3, #4
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80100ac:	b29b      	uxth	r3, r3
 80100ae:	3b02      	subs	r3, #2
 80100b0:	b29a      	uxth	r2, r3
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80100b8:	e037      	b.n	801012a <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80100be:	881a      	ldrh	r2, [r3, #0]
 80100c0:	69fb      	ldr	r3, [r7, #28]
 80100c2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80100c8:	1c9a      	adds	r2, r3, #2
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80100d4:	b29b      	uxth	r3, r3
 80100d6:	3b01      	subs	r3, #1
 80100d8:	b29a      	uxth	r2, r3
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80100e0:	e023      	b.n	801012a <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80100e2:	f7f4 f88b 	bl	80041fc <HAL_GetTick>
 80100e6:	4602      	mov	r2, r0
 80100e8:	697b      	ldr	r3, [r7, #20]
 80100ea:	1ad3      	subs	r3, r2, r3
 80100ec:	683a      	ldr	r2, [r7, #0]
 80100ee:	429a      	cmp	r2, r3
 80100f0:	d803      	bhi.n	80100fa <HAL_SPI_Transmit+0x256>
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80100f8:	d102      	bne.n	8010100 <HAL_SPI_Transmit+0x25c>
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d114      	bne.n	801012a <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010100:	68f8      	ldr	r0, [r7, #12]
 8010102:	f000 fa5b 	bl	80105bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	2200      	movs	r2, #0
 801010a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010114:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	2201      	movs	r2, #1
 8010122:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 8010126:	2303      	movs	r3, #3
 8010128:	e0b3      	b.n	8010292 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010130:	b29b      	uxth	r3, r3
 8010132:	2b00      	cmp	r3, #0
 8010134:	d19b      	bne.n	801006e <HAL_SPI_Transmit+0x1ca>
 8010136:	e086      	b.n	8010246 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	695b      	ldr	r3, [r3, #20]
 801013e:	f003 0302 	and.w	r3, r3, #2
 8010142:	2b02      	cmp	r3, #2
 8010144:	d154      	bne.n	80101f0 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801014c:	b29b      	uxth	r3, r3
 801014e:	2b03      	cmp	r3, #3
 8010150:	d918      	bls.n	8010184 <HAL_SPI_Transmit+0x2e0>
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010156:	2b40      	cmp	r3, #64	@ 0x40
 8010158:	d914      	bls.n	8010184 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	6812      	ldr	r2, [r2, #0]
 8010164:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801016a:	1d1a      	adds	r2, r3, #4
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010176:	b29b      	uxth	r3, r3
 8010178:	3b04      	subs	r3, #4
 801017a:	b29a      	uxth	r2, r3
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010182:	e059      	b.n	8010238 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801018a:	b29b      	uxth	r3, r3
 801018c:	2b01      	cmp	r3, #1
 801018e:	d917      	bls.n	80101c0 <HAL_SPI_Transmit+0x31c>
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010194:	2b00      	cmp	r3, #0
 8010196:	d013      	beq.n	80101c0 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801019c:	881a      	ldrh	r2, [r3, #0]
 801019e:	69fb      	ldr	r3, [r7, #28]
 80101a0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80101a6:	1c9a      	adds	r2, r3, #2
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80101b2:	b29b      	uxth	r3, r3
 80101b4:	3b02      	subs	r3, #2
 80101b6:	b29a      	uxth	r2, r3
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80101be:	e03b      	b.n	8010238 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	3320      	adds	r3, #32
 80101ca:	7812      	ldrb	r2, [r2, #0]
 80101cc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80101d2:	1c5a      	adds	r2, r3, #1
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80101de:	b29b      	uxth	r3, r3
 80101e0:	3b01      	subs	r3, #1
 80101e2:	b29a      	uxth	r2, r3
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80101ea:	e025      	b.n	8010238 <HAL_SPI_Transmit+0x394>
 80101ec:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80101f0:	f7f4 f804 	bl	80041fc <HAL_GetTick>
 80101f4:	4602      	mov	r2, r0
 80101f6:	697b      	ldr	r3, [r7, #20]
 80101f8:	1ad3      	subs	r3, r2, r3
 80101fa:	683a      	ldr	r2, [r7, #0]
 80101fc:	429a      	cmp	r2, r3
 80101fe:	d803      	bhi.n	8010208 <HAL_SPI_Transmit+0x364>
 8010200:	683b      	ldr	r3, [r7, #0]
 8010202:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010206:	d102      	bne.n	801020e <HAL_SPI_Transmit+0x36a>
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d114      	bne.n	8010238 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801020e:	68f8      	ldr	r0, [r7, #12]
 8010210:	f000 f9d4 	bl	80105bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	2200      	movs	r2, #0
 8010218:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010222:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	2201      	movs	r2, #1
 8010230:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 8010234:	2303      	movs	r3, #3
 8010236:	e02c      	b.n	8010292 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801023e:	b29b      	uxth	r3, r3
 8010240:	2b00      	cmp	r3, #0
 8010242:	f47f af79 	bne.w	8010138 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8010246:	697b      	ldr	r3, [r7, #20]
 8010248:	9300      	str	r3, [sp, #0]
 801024a:	683b      	ldr	r3, [r7, #0]
 801024c:	2200      	movs	r2, #0
 801024e:	2108      	movs	r1, #8
 8010250:	68f8      	ldr	r0, [r7, #12]
 8010252:	f000 fa53 	bl	80106fc <SPI_WaitOnFlagUntilTimeout>
 8010256:	4603      	mov	r3, r0
 8010258:	2b00      	cmp	r3, #0
 801025a:	d007      	beq.n	801026c <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010262:	f043 0220 	orr.w	r2, r3, #32
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 801026c:	68f8      	ldr	r0, [r7, #12]
 801026e:	f000 f9a5 	bl	80105bc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	2200      	movs	r2, #0
 8010276:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  hspi->State = HAL_SPI_STATE_READY;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	2201      	movs	r2, #1
 801027e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010288:	2b00      	cmp	r3, #0
 801028a:	d001      	beq.n	8010290 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 801028c:	2301      	movs	r3, #1
 801028e:	e000      	b.n	8010292 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8010290:	7efb      	ldrb	r3, [r7, #27]
}
 8010292:	4618      	mov	r0, r3
 8010294:	3720      	adds	r7, #32
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}
 801029a:	bf00      	nop

0801029c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b088      	sub	sp, #32
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	60f8      	str	r0, [r7, #12]
 80102a4:	60b9      	str	r1, [r7, #8]
 80102a6:	603b      	str	r3, [r7, #0]
 80102a8:	4613      	mov	r3, r2
 80102aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80102ac:	2300      	movs	r3, #0
 80102ae:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	3330      	adds	r3, #48	@ 0x30
 80102b6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80102be:	2b01      	cmp	r3, #1
 80102c0:	d101      	bne.n	80102c6 <HAL_SPI_Receive+0x2a>
 80102c2:	2302      	movs	r3, #2
 80102c4:	e173      	b.n	80105ae <HAL_SPI_Receive+0x312>
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	2201      	movs	r2, #1
 80102ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80102ce:	f7f3 ff95 	bl	80041fc <HAL_GetTick>
 80102d2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80102da:	b2db      	uxtb	r3, r3
 80102dc:	2b01      	cmp	r3, #1
 80102de:	d007      	beq.n	80102f0 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 80102e0:	2302      	movs	r3, #2
 80102e2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	2200      	movs	r2, #0
 80102e8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 80102ec:	7ffb      	ldrb	r3, [r7, #31]
 80102ee:	e15e      	b.n	80105ae <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d002      	beq.n	80102fc <HAL_SPI_Receive+0x60>
 80102f6:	88fb      	ldrh	r3, [r7, #6]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d107      	bne.n	801030c <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 80102fc:	2301      	movs	r3, #1
 80102fe:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	2200      	movs	r2, #0
 8010304:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 8010308:	7ffb      	ldrb	r3, [r7, #31]
 801030a:	e150      	b.n	80105ae <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	2204      	movs	r2, #4
 8010310:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	2200      	movs	r2, #0
 8010318:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	68ba      	ldr	r2, [r7, #8]
 8010320:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	88fa      	ldrh	r2, [r7, #6]
 8010326:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	88fa      	ldrh	r2, [r7, #6]
 801032e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	2200      	movs	r2, #0
 8010336:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	2200      	movs	r2, #0
 801033c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	2200      	movs	r2, #0
 8010344:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	2200      	movs	r2, #0
 801034c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	2200      	movs	r2, #0
 8010352:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	689b      	ldr	r3, [r3, #8]
 8010358:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 801035c:	d108      	bne.n	8010370 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	681a      	ldr	r2, [r3, #0]
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801036c:	601a      	str	r2, [r3, #0]
 801036e:	e009      	b.n	8010384 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	68db      	ldr	r3, [r3, #12]
 8010376:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8010382:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	685a      	ldr	r2, [r3, #4]
 801038a:	4b8b      	ldr	r3, [pc, #556]	@ (80105b8 <HAL_SPI_Receive+0x31c>)
 801038c:	4013      	ands	r3, r2
 801038e:	88f9      	ldrh	r1, [r7, #6]
 8010390:	68fa      	ldr	r2, [r7, #12]
 8010392:	6812      	ldr	r2, [r2, #0]
 8010394:	430b      	orrs	r3, r1
 8010396:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	681a      	ldr	r2, [r3, #0]
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	f042 0201 	orr.w	r2, r2, #1
 80103a6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	685b      	ldr	r3, [r3, #4]
 80103ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80103b0:	d107      	bne.n	80103c2 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	681a      	ldr	r2, [r3, #0]
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80103c0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	68db      	ldr	r3, [r3, #12]
 80103c6:	2b0f      	cmp	r3, #15
 80103c8:	d948      	bls.n	801045c <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80103ca:	e040      	b.n	801044e <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	695a      	ldr	r2, [r3, #20]
 80103d2:	f248 0308 	movw	r3, #32776	@ 0x8008
 80103d6:	4013      	ands	r3, r2
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d014      	beq.n	8010406 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	681a      	ldr	r2, [r3, #0]
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80103e4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80103e6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80103ec:	1d1a      	adds	r2, r3, #4
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80103f8:	b29b      	uxth	r3, r3
 80103fa:	3b01      	subs	r3, #1
 80103fc:	b29a      	uxth	r2, r3
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010404:	e023      	b.n	801044e <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010406:	f7f3 fef9 	bl	80041fc <HAL_GetTick>
 801040a:	4602      	mov	r2, r0
 801040c:	697b      	ldr	r3, [r7, #20]
 801040e:	1ad3      	subs	r3, r2, r3
 8010410:	683a      	ldr	r2, [r7, #0]
 8010412:	429a      	cmp	r2, r3
 8010414:	d803      	bhi.n	801041e <HAL_SPI_Receive+0x182>
 8010416:	683b      	ldr	r3, [r7, #0]
 8010418:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801041c:	d102      	bne.n	8010424 <HAL_SPI_Receive+0x188>
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d114      	bne.n	801044e <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010424:	68f8      	ldr	r0, [r7, #12]
 8010426:	f000 f8c9 	bl	80105bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	2200      	movs	r2, #0
 801042e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010438:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	2201      	movs	r2, #1
 8010446:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 801044a:	2303      	movs	r3, #3
 801044c:	e0af      	b.n	80105ae <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010454:	b29b      	uxth	r3, r3
 8010456:	2b00      	cmp	r3, #0
 8010458:	d1b8      	bne.n	80103cc <HAL_SPI_Receive+0x130>
 801045a:	e095      	b.n	8010588 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	68db      	ldr	r3, [r3, #12]
 8010460:	2b07      	cmp	r3, #7
 8010462:	f240 808b 	bls.w	801057c <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8010466:	e03f      	b.n	80104e8 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	695b      	ldr	r3, [r3, #20]
 801046e:	f003 0301 	and.w	r3, r3, #1
 8010472:	2b01      	cmp	r3, #1
 8010474:	d114      	bne.n	80104a0 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801047a:	69ba      	ldr	r2, [r7, #24]
 801047c:	8812      	ldrh	r2, [r2, #0]
 801047e:	b292      	uxth	r2, r2
 8010480:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010486:	1c9a      	adds	r2, r3, #2
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010492:	b29b      	uxth	r3, r3
 8010494:	3b01      	subs	r3, #1
 8010496:	b29a      	uxth	r2, r3
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801049e:	e023      	b.n	80104e8 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80104a0:	f7f3 feac 	bl	80041fc <HAL_GetTick>
 80104a4:	4602      	mov	r2, r0
 80104a6:	697b      	ldr	r3, [r7, #20]
 80104a8:	1ad3      	subs	r3, r2, r3
 80104aa:	683a      	ldr	r2, [r7, #0]
 80104ac:	429a      	cmp	r2, r3
 80104ae:	d803      	bhi.n	80104b8 <HAL_SPI_Receive+0x21c>
 80104b0:	683b      	ldr	r3, [r7, #0]
 80104b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80104b6:	d102      	bne.n	80104be <HAL_SPI_Receive+0x222>
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d114      	bne.n	80104e8 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80104be:	68f8      	ldr	r0, [r7, #12]
 80104c0:	f000 f87c 	bl	80105bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	2200      	movs	r2, #0
 80104c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80104d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	2201      	movs	r2, #1
 80104e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 80104e4:	2303      	movs	r3, #3
 80104e6:	e062      	b.n	80105ae <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80104ee:	b29b      	uxth	r3, r3
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d1b9      	bne.n	8010468 <HAL_SPI_Receive+0x1cc>
 80104f4:	e048      	b.n	8010588 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	695b      	ldr	r3, [r3, #20]
 80104fc:	f003 0301 	and.w	r3, r3, #1
 8010500:	2b01      	cmp	r3, #1
 8010502:	d117      	bne.n	8010534 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010510:	7812      	ldrb	r2, [r2, #0]
 8010512:	b2d2      	uxtb	r2, r2
 8010514:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801051a:	1c5a      	adds	r2, r3, #1
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010526:	b29b      	uxth	r3, r3
 8010528:	3b01      	subs	r3, #1
 801052a:	b29a      	uxth	r2, r3
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010532:	e023      	b.n	801057c <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010534:	f7f3 fe62 	bl	80041fc <HAL_GetTick>
 8010538:	4602      	mov	r2, r0
 801053a:	697b      	ldr	r3, [r7, #20]
 801053c:	1ad3      	subs	r3, r2, r3
 801053e:	683a      	ldr	r2, [r7, #0]
 8010540:	429a      	cmp	r2, r3
 8010542:	d803      	bhi.n	801054c <HAL_SPI_Receive+0x2b0>
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801054a:	d102      	bne.n	8010552 <HAL_SPI_Receive+0x2b6>
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d114      	bne.n	801057c <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010552:	68f8      	ldr	r0, [r7, #12]
 8010554:	f000 f832 	bl	80105bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	2200      	movs	r2, #0
 801055c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010566:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	2201      	movs	r2, #1
 8010574:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 8010578:	2303      	movs	r3, #3
 801057a:	e018      	b.n	80105ae <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010582:	b29b      	uxth	r3, r3
 8010584:	2b00      	cmp	r3, #0
 8010586:	d1b6      	bne.n	80104f6 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010588:	68f8      	ldr	r0, [r7, #12]
 801058a:	f000 f817 	bl	80105bc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	2200      	movs	r2, #0
 8010592:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	2201      	movs	r2, #1
 801059a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d001      	beq.n	80105ac <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 80105a8:	2301      	movs	r3, #1
 80105aa:	e000      	b.n	80105ae <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 80105ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80105ae:	4618      	mov	r0, r3
 80105b0:	3720      	adds	r7, #32
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd80      	pop	{r7, pc}
 80105b6:	bf00      	nop
 80105b8:	ffff0000 	.word	0xffff0000

080105bc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80105bc:	b480      	push	{r7}
 80105be:	b085      	sub	sp, #20
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	695b      	ldr	r3, [r3, #20]
 80105ca:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	699a      	ldr	r2, [r3, #24]
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	f042 0208 	orr.w	r2, r2, #8
 80105da:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	699a      	ldr	r2, [r3, #24]
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	f042 0210 	orr.w	r2, r2, #16
 80105ea:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	681a      	ldr	r2, [r3, #0]
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	f022 0201 	bic.w	r2, r2, #1
 80105fa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	6919      	ldr	r1, [r3, #16]
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681a      	ldr	r2, [r3, #0]
 8010606:	4b3c      	ldr	r3, [pc, #240]	@ (80106f8 <SPI_CloseTransfer+0x13c>)
 8010608:	400b      	ands	r3, r1
 801060a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	689a      	ldr	r2, [r3, #8]
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801061a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010622:	b2db      	uxtb	r3, r3
 8010624:	2b04      	cmp	r3, #4
 8010626:	d014      	beq.n	8010652 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	f003 0320 	and.w	r3, r3, #32
 801062e:	2b00      	cmp	r3, #0
 8010630:	d00f      	beq.n	8010652 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010638:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	699a      	ldr	r2, [r3, #24]
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	f042 0220 	orr.w	r2, r2, #32
 8010650:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010658:	b2db      	uxtb	r3, r3
 801065a:	2b03      	cmp	r3, #3
 801065c:	d014      	beq.n	8010688 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010664:	2b00      	cmp	r3, #0
 8010666:	d00f      	beq.n	8010688 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801066e:	f043 0204 	orr.w	r2, r3, #4
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	699a      	ldr	r2, [r3, #24]
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010686:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801068e:	2b00      	cmp	r3, #0
 8010690:	d00f      	beq.n	80106b2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010698:	f043 0201 	orr.w	r2, r3, #1
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	699a      	ldr	r2, [r3, #24]
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80106b0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d00f      	beq.n	80106dc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80106c2:	f043 0208 	orr.w	r2, r3, #8
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	699a      	ldr	r2, [r3, #24]
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80106da:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2200      	movs	r2, #0
 80106e0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2200      	movs	r2, #0
 80106e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80106ec:	bf00      	nop
 80106ee:	3714      	adds	r7, #20
 80106f0:	46bd      	mov	sp, r7
 80106f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f6:	4770      	bx	lr
 80106f8:	fffffc90 	.word	0xfffffc90

080106fc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b084      	sub	sp, #16
 8010700:	af00      	add	r7, sp, #0
 8010702:	60f8      	str	r0, [r7, #12]
 8010704:	60b9      	str	r1, [r7, #8]
 8010706:	603b      	str	r3, [r7, #0]
 8010708:	4613      	mov	r3, r2
 801070a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 801070c:	e010      	b.n	8010730 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801070e:	f7f3 fd75 	bl	80041fc <HAL_GetTick>
 8010712:	4602      	mov	r2, r0
 8010714:	69bb      	ldr	r3, [r7, #24]
 8010716:	1ad3      	subs	r3, r2, r3
 8010718:	683a      	ldr	r2, [r7, #0]
 801071a:	429a      	cmp	r2, r3
 801071c:	d803      	bhi.n	8010726 <SPI_WaitOnFlagUntilTimeout+0x2a>
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010724:	d102      	bne.n	801072c <SPI_WaitOnFlagUntilTimeout+0x30>
 8010726:	683b      	ldr	r3, [r7, #0]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d101      	bne.n	8010730 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 801072c:	2303      	movs	r3, #3
 801072e:	e00f      	b.n	8010750 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	695a      	ldr	r2, [r3, #20]
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	4013      	ands	r3, r2
 801073a:	68ba      	ldr	r2, [r7, #8]
 801073c:	429a      	cmp	r2, r3
 801073e:	bf0c      	ite	eq
 8010740:	2301      	moveq	r3, #1
 8010742:	2300      	movne	r3, #0
 8010744:	b2db      	uxtb	r3, r3
 8010746:	461a      	mov	r2, r3
 8010748:	79fb      	ldrb	r3, [r7, #7]
 801074a:	429a      	cmp	r2, r3
 801074c:	d0df      	beq.n	801070e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 801074e:	2300      	movs	r3, #0
}
 8010750:	4618      	mov	r0, r3
 8010752:	3710      	adds	r7, #16
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}

08010758 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8010758:	b480      	push	{r7}
 801075a:	b085      	sub	sp, #20
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010764:	095b      	lsrs	r3, r3, #5
 8010766:	3301      	adds	r3, #1
 8010768:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	68db      	ldr	r3, [r3, #12]
 801076e:	3301      	adds	r3, #1
 8010770:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8010772:	68bb      	ldr	r3, [r7, #8]
 8010774:	3307      	adds	r3, #7
 8010776:	08db      	lsrs	r3, r3, #3
 8010778:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801077a:	68bb      	ldr	r3, [r7, #8]
 801077c:	68fa      	ldr	r2, [r7, #12]
 801077e:	fb02 f303 	mul.w	r3, r2, r3
}
 8010782:	4618      	mov	r0, r3
 8010784:	3714      	adds	r7, #20
 8010786:	46bd      	mov	sp, r7
 8010788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078c:	4770      	bx	lr

0801078e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801078e:	b580      	push	{r7, lr}
 8010790:	b082      	sub	sp, #8
 8010792:	af00      	add	r7, sp, #0
 8010794:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d101      	bne.n	80107a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801079c:	2301      	movs	r3, #1
 801079e:	e049      	b.n	8010834 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80107a6:	b2db      	uxtb	r3, r3
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d106      	bne.n	80107ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	2200      	movs	r2, #0
 80107b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80107b4:	6878      	ldr	r0, [r7, #4]
 80107b6:	f7f3 f8dd 	bl	8003974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	2202      	movs	r2, #2
 80107be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	681a      	ldr	r2, [r3, #0]
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	3304      	adds	r3, #4
 80107ca:	4619      	mov	r1, r3
 80107cc:	4610      	mov	r0, r2
 80107ce:	f000 ff29 	bl	8011624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	2201      	movs	r2, #1
 80107d6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	2201      	movs	r2, #1
 80107de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	2201      	movs	r2, #1
 80107e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2201      	movs	r2, #1
 80107ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2201      	movs	r2, #1
 80107f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	2201      	movs	r2, #1
 80107fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	2201      	movs	r2, #1
 8010806:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2201      	movs	r2, #1
 801080e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	2201      	movs	r2, #1
 8010816:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2201      	movs	r2, #1
 801081e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	2201      	movs	r2, #1
 8010826:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	2201      	movs	r2, #1
 801082e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010832:	2300      	movs	r3, #0
}
 8010834:	4618      	mov	r0, r3
 8010836:	3708      	adds	r7, #8
 8010838:	46bd      	mov	sp, r7
 801083a:	bd80      	pop	{r7, pc}

0801083c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b082      	sub	sp, #8
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d101      	bne.n	801084e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801084a:	2301      	movs	r3, #1
 801084c:	e049      	b.n	80108e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010854:	b2db      	uxtb	r3, r3
 8010856:	2b00      	cmp	r3, #0
 8010858:	d106      	bne.n	8010868 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	2200      	movs	r2, #0
 801085e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010862:	6878      	ldr	r0, [r7, #4]
 8010864:	f7f2 fef0 	bl	8003648 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	2202      	movs	r2, #2
 801086c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681a      	ldr	r2, [r3, #0]
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	3304      	adds	r3, #4
 8010878:	4619      	mov	r1, r3
 801087a:	4610      	mov	r0, r2
 801087c:	f000 fed2 	bl	8011624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2201      	movs	r2, #1
 8010884:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	2201      	movs	r2, #1
 801088c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2201      	movs	r2, #1
 8010894:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	2201      	movs	r2, #1
 801089c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	2201      	movs	r2, #1
 80108a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2201      	movs	r2, #1
 80108ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	2201      	movs	r2, #1
 80108b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	2201      	movs	r2, #1
 80108bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2201      	movs	r2, #1
 80108c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2201      	movs	r2, #1
 80108cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2201      	movs	r2, #1
 80108d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	2201      	movs	r2, #1
 80108dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80108e0:	2300      	movs	r3, #0
}
 80108e2:	4618      	mov	r0, r3
 80108e4:	3708      	adds	r7, #8
 80108e6:	46bd      	mov	sp, r7
 80108e8:	bd80      	pop	{r7, pc}
	...

080108ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b084      	sub	sp, #16
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
 80108f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d109      	bne.n	8010910 <HAL_TIM_PWM_Start+0x24>
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010902:	b2db      	uxtb	r3, r3
 8010904:	2b01      	cmp	r3, #1
 8010906:	bf14      	ite	ne
 8010908:	2301      	movne	r3, #1
 801090a:	2300      	moveq	r3, #0
 801090c:	b2db      	uxtb	r3, r3
 801090e:	e03c      	b.n	801098a <HAL_TIM_PWM_Start+0x9e>
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	2b04      	cmp	r3, #4
 8010914:	d109      	bne.n	801092a <HAL_TIM_PWM_Start+0x3e>
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 801091c:	b2db      	uxtb	r3, r3
 801091e:	2b01      	cmp	r3, #1
 8010920:	bf14      	ite	ne
 8010922:	2301      	movne	r3, #1
 8010924:	2300      	moveq	r3, #0
 8010926:	b2db      	uxtb	r3, r3
 8010928:	e02f      	b.n	801098a <HAL_TIM_PWM_Start+0x9e>
 801092a:	683b      	ldr	r3, [r7, #0]
 801092c:	2b08      	cmp	r3, #8
 801092e:	d109      	bne.n	8010944 <HAL_TIM_PWM_Start+0x58>
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010936:	b2db      	uxtb	r3, r3
 8010938:	2b01      	cmp	r3, #1
 801093a:	bf14      	ite	ne
 801093c:	2301      	movne	r3, #1
 801093e:	2300      	moveq	r3, #0
 8010940:	b2db      	uxtb	r3, r3
 8010942:	e022      	b.n	801098a <HAL_TIM_PWM_Start+0x9e>
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	2b0c      	cmp	r3, #12
 8010948:	d109      	bne.n	801095e <HAL_TIM_PWM_Start+0x72>
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010950:	b2db      	uxtb	r3, r3
 8010952:	2b01      	cmp	r3, #1
 8010954:	bf14      	ite	ne
 8010956:	2301      	movne	r3, #1
 8010958:	2300      	moveq	r3, #0
 801095a:	b2db      	uxtb	r3, r3
 801095c:	e015      	b.n	801098a <HAL_TIM_PWM_Start+0x9e>
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	2b10      	cmp	r3, #16
 8010962:	d109      	bne.n	8010978 <HAL_TIM_PWM_Start+0x8c>
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801096a:	b2db      	uxtb	r3, r3
 801096c:	2b01      	cmp	r3, #1
 801096e:	bf14      	ite	ne
 8010970:	2301      	movne	r3, #1
 8010972:	2300      	moveq	r3, #0
 8010974:	b2db      	uxtb	r3, r3
 8010976:	e008      	b.n	801098a <HAL_TIM_PWM_Start+0x9e>
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801097e:	b2db      	uxtb	r3, r3
 8010980:	2b01      	cmp	r3, #1
 8010982:	bf14      	ite	ne
 8010984:	2301      	movne	r3, #1
 8010986:	2300      	moveq	r3, #0
 8010988:	b2db      	uxtb	r3, r3
 801098a:	2b00      	cmp	r3, #0
 801098c:	d001      	beq.n	8010992 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801098e:	2301      	movs	r3, #1
 8010990:	e0ab      	b.n	8010aea <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010992:	683b      	ldr	r3, [r7, #0]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d104      	bne.n	80109a2 <HAL_TIM_PWM_Start+0xb6>
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2202      	movs	r2, #2
 801099c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80109a0:	e023      	b.n	80109ea <HAL_TIM_PWM_Start+0xfe>
 80109a2:	683b      	ldr	r3, [r7, #0]
 80109a4:	2b04      	cmp	r3, #4
 80109a6:	d104      	bne.n	80109b2 <HAL_TIM_PWM_Start+0xc6>
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	2202      	movs	r2, #2
 80109ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80109b0:	e01b      	b.n	80109ea <HAL_TIM_PWM_Start+0xfe>
 80109b2:	683b      	ldr	r3, [r7, #0]
 80109b4:	2b08      	cmp	r3, #8
 80109b6:	d104      	bne.n	80109c2 <HAL_TIM_PWM_Start+0xd6>
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	2202      	movs	r2, #2
 80109bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80109c0:	e013      	b.n	80109ea <HAL_TIM_PWM_Start+0xfe>
 80109c2:	683b      	ldr	r3, [r7, #0]
 80109c4:	2b0c      	cmp	r3, #12
 80109c6:	d104      	bne.n	80109d2 <HAL_TIM_PWM_Start+0xe6>
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2202      	movs	r2, #2
 80109cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80109d0:	e00b      	b.n	80109ea <HAL_TIM_PWM_Start+0xfe>
 80109d2:	683b      	ldr	r3, [r7, #0]
 80109d4:	2b10      	cmp	r3, #16
 80109d6:	d104      	bne.n	80109e2 <HAL_TIM_PWM_Start+0xf6>
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	2202      	movs	r2, #2
 80109dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80109e0:	e003      	b.n	80109ea <HAL_TIM_PWM_Start+0xfe>
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	2202      	movs	r2, #2
 80109e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	2201      	movs	r2, #1
 80109f0:	6839      	ldr	r1, [r7, #0]
 80109f2:	4618      	mov	r0, r3
 80109f4:	f001 f992 	bl	8011d1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	4a3d      	ldr	r2, [pc, #244]	@ (8010af4 <HAL_TIM_PWM_Start+0x208>)
 80109fe:	4293      	cmp	r3, r2
 8010a00:	d013      	beq.n	8010a2a <HAL_TIM_PWM_Start+0x13e>
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	4a3c      	ldr	r2, [pc, #240]	@ (8010af8 <HAL_TIM_PWM_Start+0x20c>)
 8010a08:	4293      	cmp	r3, r2
 8010a0a:	d00e      	beq.n	8010a2a <HAL_TIM_PWM_Start+0x13e>
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	4a3a      	ldr	r2, [pc, #232]	@ (8010afc <HAL_TIM_PWM_Start+0x210>)
 8010a12:	4293      	cmp	r3, r2
 8010a14:	d009      	beq.n	8010a2a <HAL_TIM_PWM_Start+0x13e>
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	4a39      	ldr	r2, [pc, #228]	@ (8010b00 <HAL_TIM_PWM_Start+0x214>)
 8010a1c:	4293      	cmp	r3, r2
 8010a1e:	d004      	beq.n	8010a2a <HAL_TIM_PWM_Start+0x13e>
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	4a37      	ldr	r2, [pc, #220]	@ (8010b04 <HAL_TIM_PWM_Start+0x218>)
 8010a26:	4293      	cmp	r3, r2
 8010a28:	d101      	bne.n	8010a2e <HAL_TIM_PWM_Start+0x142>
 8010a2a:	2301      	movs	r3, #1
 8010a2c:	e000      	b.n	8010a30 <HAL_TIM_PWM_Start+0x144>
 8010a2e:	2300      	movs	r3, #0
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d007      	beq.n	8010a44 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8010a42:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	4a2a      	ldr	r2, [pc, #168]	@ (8010af4 <HAL_TIM_PWM_Start+0x208>)
 8010a4a:	4293      	cmp	r3, r2
 8010a4c:	d02c      	beq.n	8010aa8 <HAL_TIM_PWM_Start+0x1bc>
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010a56:	d027      	beq.n	8010aa8 <HAL_TIM_PWM_Start+0x1bc>
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	4a2a      	ldr	r2, [pc, #168]	@ (8010b08 <HAL_TIM_PWM_Start+0x21c>)
 8010a5e:	4293      	cmp	r3, r2
 8010a60:	d022      	beq.n	8010aa8 <HAL_TIM_PWM_Start+0x1bc>
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	4a29      	ldr	r2, [pc, #164]	@ (8010b0c <HAL_TIM_PWM_Start+0x220>)
 8010a68:	4293      	cmp	r3, r2
 8010a6a:	d01d      	beq.n	8010aa8 <HAL_TIM_PWM_Start+0x1bc>
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	4a27      	ldr	r2, [pc, #156]	@ (8010b10 <HAL_TIM_PWM_Start+0x224>)
 8010a72:	4293      	cmp	r3, r2
 8010a74:	d018      	beq.n	8010aa8 <HAL_TIM_PWM_Start+0x1bc>
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	4a1f      	ldr	r2, [pc, #124]	@ (8010af8 <HAL_TIM_PWM_Start+0x20c>)
 8010a7c:	4293      	cmp	r3, r2
 8010a7e:	d013      	beq.n	8010aa8 <HAL_TIM_PWM_Start+0x1bc>
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	4a23      	ldr	r2, [pc, #140]	@ (8010b14 <HAL_TIM_PWM_Start+0x228>)
 8010a86:	4293      	cmp	r3, r2
 8010a88:	d00e      	beq.n	8010aa8 <HAL_TIM_PWM_Start+0x1bc>
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	4a1b      	ldr	r2, [pc, #108]	@ (8010afc <HAL_TIM_PWM_Start+0x210>)
 8010a90:	4293      	cmp	r3, r2
 8010a92:	d009      	beq.n	8010aa8 <HAL_TIM_PWM_Start+0x1bc>
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	4a1f      	ldr	r2, [pc, #124]	@ (8010b18 <HAL_TIM_PWM_Start+0x22c>)
 8010a9a:	4293      	cmp	r3, r2
 8010a9c:	d004      	beq.n	8010aa8 <HAL_TIM_PWM_Start+0x1bc>
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	4a1e      	ldr	r2, [pc, #120]	@ (8010b1c <HAL_TIM_PWM_Start+0x230>)
 8010aa4:	4293      	cmp	r3, r2
 8010aa6:	d115      	bne.n	8010ad4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	689a      	ldr	r2, [r3, #8]
 8010aae:	4b1c      	ldr	r3, [pc, #112]	@ (8010b20 <HAL_TIM_PWM_Start+0x234>)
 8010ab0:	4013      	ands	r3, r2
 8010ab2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	2b06      	cmp	r3, #6
 8010ab8:	d015      	beq.n	8010ae6 <HAL_TIM_PWM_Start+0x1fa>
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010ac0:	d011      	beq.n	8010ae6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	681a      	ldr	r2, [r3, #0]
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	f042 0201 	orr.w	r2, r2, #1
 8010ad0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ad2:	e008      	b.n	8010ae6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	681a      	ldr	r2, [r3, #0]
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	f042 0201 	orr.w	r2, r2, #1
 8010ae2:	601a      	str	r2, [r3, #0]
 8010ae4:	e000      	b.n	8010ae8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ae6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010ae8:	2300      	movs	r3, #0
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3710      	adds	r7, #16
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}
 8010af2:	bf00      	nop
 8010af4:	40010000 	.word	0x40010000
 8010af8:	40010400 	.word	0x40010400
 8010afc:	40014000 	.word	0x40014000
 8010b00:	40014400 	.word	0x40014400
 8010b04:	40014800 	.word	0x40014800
 8010b08:	40000400 	.word	0x40000400
 8010b0c:	40000800 	.word	0x40000800
 8010b10:	40000c00 	.word	0x40000c00
 8010b14:	40001800 	.word	0x40001800
 8010b18:	4000e000 	.word	0x4000e000
 8010b1c:	4000e400 	.word	0x4000e400
 8010b20:	00010007 	.word	0x00010007

08010b24 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b086      	sub	sp, #24
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	60f8      	str	r0, [r7, #12]
 8010b2c:	60b9      	str	r1, [r7, #8]
 8010b2e:	607a      	str	r2, [r7, #4]
 8010b30:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8010b32:	2300      	movs	r3, #0
 8010b34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8010b36:	68bb      	ldr	r3, [r7, #8]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d109      	bne.n	8010b50 <HAL_TIM_PWM_Start_DMA+0x2c>
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010b42:	b2db      	uxtb	r3, r3
 8010b44:	2b02      	cmp	r3, #2
 8010b46:	bf0c      	ite	eq
 8010b48:	2301      	moveq	r3, #1
 8010b4a:	2300      	movne	r3, #0
 8010b4c:	b2db      	uxtb	r3, r3
 8010b4e:	e03c      	b.n	8010bca <HAL_TIM_PWM_Start_DMA+0xa6>
 8010b50:	68bb      	ldr	r3, [r7, #8]
 8010b52:	2b04      	cmp	r3, #4
 8010b54:	d109      	bne.n	8010b6a <HAL_TIM_PWM_Start_DMA+0x46>
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8010b5c:	b2db      	uxtb	r3, r3
 8010b5e:	2b02      	cmp	r3, #2
 8010b60:	bf0c      	ite	eq
 8010b62:	2301      	moveq	r3, #1
 8010b64:	2300      	movne	r3, #0
 8010b66:	b2db      	uxtb	r3, r3
 8010b68:	e02f      	b.n	8010bca <HAL_TIM_PWM_Start_DMA+0xa6>
 8010b6a:	68bb      	ldr	r3, [r7, #8]
 8010b6c:	2b08      	cmp	r3, #8
 8010b6e:	d109      	bne.n	8010b84 <HAL_TIM_PWM_Start_DMA+0x60>
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010b76:	b2db      	uxtb	r3, r3
 8010b78:	2b02      	cmp	r3, #2
 8010b7a:	bf0c      	ite	eq
 8010b7c:	2301      	moveq	r3, #1
 8010b7e:	2300      	movne	r3, #0
 8010b80:	b2db      	uxtb	r3, r3
 8010b82:	e022      	b.n	8010bca <HAL_TIM_PWM_Start_DMA+0xa6>
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	2b0c      	cmp	r3, #12
 8010b88:	d109      	bne.n	8010b9e <HAL_TIM_PWM_Start_DMA+0x7a>
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010b90:	b2db      	uxtb	r3, r3
 8010b92:	2b02      	cmp	r3, #2
 8010b94:	bf0c      	ite	eq
 8010b96:	2301      	moveq	r3, #1
 8010b98:	2300      	movne	r3, #0
 8010b9a:	b2db      	uxtb	r3, r3
 8010b9c:	e015      	b.n	8010bca <HAL_TIM_PWM_Start_DMA+0xa6>
 8010b9e:	68bb      	ldr	r3, [r7, #8]
 8010ba0:	2b10      	cmp	r3, #16
 8010ba2:	d109      	bne.n	8010bb8 <HAL_TIM_PWM_Start_DMA+0x94>
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010baa:	b2db      	uxtb	r3, r3
 8010bac:	2b02      	cmp	r3, #2
 8010bae:	bf0c      	ite	eq
 8010bb0:	2301      	moveq	r3, #1
 8010bb2:	2300      	movne	r3, #0
 8010bb4:	b2db      	uxtb	r3, r3
 8010bb6:	e008      	b.n	8010bca <HAL_TIM_PWM_Start_DMA+0xa6>
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010bbe:	b2db      	uxtb	r3, r3
 8010bc0:	2b02      	cmp	r3, #2
 8010bc2:	bf0c      	ite	eq
 8010bc4:	2301      	moveq	r3, #1
 8010bc6:	2300      	movne	r3, #0
 8010bc8:	b2db      	uxtb	r3, r3
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d001      	beq.n	8010bd2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8010bce:	2302      	movs	r3, #2
 8010bd0:	e1ba      	b.n	8010f48 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8010bd2:	68bb      	ldr	r3, [r7, #8]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d109      	bne.n	8010bec <HAL_TIM_PWM_Start_DMA+0xc8>
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010bde:	b2db      	uxtb	r3, r3
 8010be0:	2b01      	cmp	r3, #1
 8010be2:	bf0c      	ite	eq
 8010be4:	2301      	moveq	r3, #1
 8010be6:	2300      	movne	r3, #0
 8010be8:	b2db      	uxtb	r3, r3
 8010bea:	e03c      	b.n	8010c66 <HAL_TIM_PWM_Start_DMA+0x142>
 8010bec:	68bb      	ldr	r3, [r7, #8]
 8010bee:	2b04      	cmp	r3, #4
 8010bf0:	d109      	bne.n	8010c06 <HAL_TIM_PWM_Start_DMA+0xe2>
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8010bf8:	b2db      	uxtb	r3, r3
 8010bfa:	2b01      	cmp	r3, #1
 8010bfc:	bf0c      	ite	eq
 8010bfe:	2301      	moveq	r3, #1
 8010c00:	2300      	movne	r3, #0
 8010c02:	b2db      	uxtb	r3, r3
 8010c04:	e02f      	b.n	8010c66 <HAL_TIM_PWM_Start_DMA+0x142>
 8010c06:	68bb      	ldr	r3, [r7, #8]
 8010c08:	2b08      	cmp	r3, #8
 8010c0a:	d109      	bne.n	8010c20 <HAL_TIM_PWM_Start_DMA+0xfc>
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010c12:	b2db      	uxtb	r3, r3
 8010c14:	2b01      	cmp	r3, #1
 8010c16:	bf0c      	ite	eq
 8010c18:	2301      	moveq	r3, #1
 8010c1a:	2300      	movne	r3, #0
 8010c1c:	b2db      	uxtb	r3, r3
 8010c1e:	e022      	b.n	8010c66 <HAL_TIM_PWM_Start_DMA+0x142>
 8010c20:	68bb      	ldr	r3, [r7, #8]
 8010c22:	2b0c      	cmp	r3, #12
 8010c24:	d109      	bne.n	8010c3a <HAL_TIM_PWM_Start_DMA+0x116>
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010c2c:	b2db      	uxtb	r3, r3
 8010c2e:	2b01      	cmp	r3, #1
 8010c30:	bf0c      	ite	eq
 8010c32:	2301      	moveq	r3, #1
 8010c34:	2300      	movne	r3, #0
 8010c36:	b2db      	uxtb	r3, r3
 8010c38:	e015      	b.n	8010c66 <HAL_TIM_PWM_Start_DMA+0x142>
 8010c3a:	68bb      	ldr	r3, [r7, #8]
 8010c3c:	2b10      	cmp	r3, #16
 8010c3e:	d109      	bne.n	8010c54 <HAL_TIM_PWM_Start_DMA+0x130>
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010c46:	b2db      	uxtb	r3, r3
 8010c48:	2b01      	cmp	r3, #1
 8010c4a:	bf0c      	ite	eq
 8010c4c:	2301      	moveq	r3, #1
 8010c4e:	2300      	movne	r3, #0
 8010c50:	b2db      	uxtb	r3, r3
 8010c52:	e008      	b.n	8010c66 <HAL_TIM_PWM_Start_DMA+0x142>
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010c5a:	b2db      	uxtb	r3, r3
 8010c5c:	2b01      	cmp	r3, #1
 8010c5e:	bf0c      	ite	eq
 8010c60:	2301      	moveq	r3, #1
 8010c62:	2300      	movne	r3, #0
 8010c64:	b2db      	uxtb	r3, r3
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d034      	beq.n	8010cd4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d002      	beq.n	8010c76 <HAL_TIM_PWM_Start_DMA+0x152>
 8010c70:	887b      	ldrh	r3, [r7, #2]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d101      	bne.n	8010c7a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8010c76:	2301      	movs	r3, #1
 8010c78:	e166      	b.n	8010f48 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010c7a:	68bb      	ldr	r3, [r7, #8]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d104      	bne.n	8010c8a <HAL_TIM_PWM_Start_DMA+0x166>
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	2202      	movs	r2, #2
 8010c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010c88:	e026      	b.n	8010cd8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010c8a:	68bb      	ldr	r3, [r7, #8]
 8010c8c:	2b04      	cmp	r3, #4
 8010c8e:	d104      	bne.n	8010c9a <HAL_TIM_PWM_Start_DMA+0x176>
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	2202      	movs	r2, #2
 8010c94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010c98:	e01e      	b.n	8010cd8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010c9a:	68bb      	ldr	r3, [r7, #8]
 8010c9c:	2b08      	cmp	r3, #8
 8010c9e:	d104      	bne.n	8010caa <HAL_TIM_PWM_Start_DMA+0x186>
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	2202      	movs	r2, #2
 8010ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010ca8:	e016      	b.n	8010cd8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010caa:	68bb      	ldr	r3, [r7, #8]
 8010cac:	2b0c      	cmp	r3, #12
 8010cae:	d104      	bne.n	8010cba <HAL_TIM_PWM_Start_DMA+0x196>
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	2202      	movs	r2, #2
 8010cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010cb8:	e00e      	b.n	8010cd8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010cba:	68bb      	ldr	r3, [r7, #8]
 8010cbc:	2b10      	cmp	r3, #16
 8010cbe:	d104      	bne.n	8010cca <HAL_TIM_PWM_Start_DMA+0x1a6>
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	2202      	movs	r2, #2
 8010cc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010cc8:	e006      	b.n	8010cd8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	2202      	movs	r2, #2
 8010cce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010cd2:	e001      	b.n	8010cd8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8010cd4:	2301      	movs	r3, #1
 8010cd6:	e137      	b.n	8010f48 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 8010cd8:	68bb      	ldr	r3, [r7, #8]
 8010cda:	2b0c      	cmp	r3, #12
 8010cdc:	f200 80ae 	bhi.w	8010e3c <HAL_TIM_PWM_Start_DMA+0x318>
 8010ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8010ce8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8010ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ce6:	bf00      	nop
 8010ce8:	08010d1d 	.word	0x08010d1d
 8010cec:	08010e3d 	.word	0x08010e3d
 8010cf0:	08010e3d 	.word	0x08010e3d
 8010cf4:	08010e3d 	.word	0x08010e3d
 8010cf8:	08010d65 	.word	0x08010d65
 8010cfc:	08010e3d 	.word	0x08010e3d
 8010d00:	08010e3d 	.word	0x08010e3d
 8010d04:	08010e3d 	.word	0x08010e3d
 8010d08:	08010dad 	.word	0x08010dad
 8010d0c:	08010e3d 	.word	0x08010e3d
 8010d10:	08010e3d 	.word	0x08010e3d
 8010d14:	08010e3d 	.word	0x08010e3d
 8010d18:	08010df5 	.word	0x08010df5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d20:	4a8b      	ldr	r2, [pc, #556]	@ (8010f50 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010d22:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d28:	4a8a      	ldr	r2, [pc, #552]	@ (8010f54 <HAL_TIM_PWM_Start_DMA+0x430>)
 8010d2a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d30:	4a89      	ldr	r2, [pc, #548]	@ (8010f58 <HAL_TIM_PWM_Start_DMA+0x434>)
 8010d32:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8010d38:	6879      	ldr	r1, [r7, #4]
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	3334      	adds	r3, #52	@ 0x34
 8010d40:	461a      	mov	r2, r3
 8010d42:	887b      	ldrh	r3, [r7, #2]
 8010d44:	f7f5 fec4 	bl	8006ad0 <HAL_DMA_Start_IT>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d001      	beq.n	8010d52 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010d4e:	2301      	movs	r3, #1
 8010d50:	e0fa      	b.n	8010f48 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	68da      	ldr	r2, [r3, #12]
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010d60:	60da      	str	r2, [r3, #12]
      break;
 8010d62:	e06e      	b.n	8010e42 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d68:	4a79      	ldr	r2, [pc, #484]	@ (8010f50 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010d6a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d70:	4a78      	ldr	r2, [pc, #480]	@ (8010f54 <HAL_TIM_PWM_Start_DMA+0x430>)
 8010d72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d78:	4a77      	ldr	r2, [pc, #476]	@ (8010f58 <HAL_TIM_PWM_Start_DMA+0x434>)
 8010d7a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8010d80:	6879      	ldr	r1, [r7, #4]
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	3338      	adds	r3, #56	@ 0x38
 8010d88:	461a      	mov	r2, r3
 8010d8a:	887b      	ldrh	r3, [r7, #2]
 8010d8c:	f7f5 fea0 	bl	8006ad0 <HAL_DMA_Start_IT>
 8010d90:	4603      	mov	r3, r0
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d001      	beq.n	8010d9a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010d96:	2301      	movs	r3, #1
 8010d98:	e0d6      	b.n	8010f48 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	68da      	ldr	r2, [r3, #12]
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8010da8:	60da      	str	r2, [r3, #12]
      break;
 8010daa:	e04a      	b.n	8010e42 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010db0:	4a67      	ldr	r2, [pc, #412]	@ (8010f50 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010db2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010db8:	4a66      	ldr	r2, [pc, #408]	@ (8010f54 <HAL_TIM_PWM_Start_DMA+0x430>)
 8010dba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dc0:	4a65      	ldr	r2, [pc, #404]	@ (8010f58 <HAL_TIM_PWM_Start_DMA+0x434>)
 8010dc2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8010dc8:	6879      	ldr	r1, [r7, #4]
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	333c      	adds	r3, #60	@ 0x3c
 8010dd0:	461a      	mov	r2, r3
 8010dd2:	887b      	ldrh	r3, [r7, #2]
 8010dd4:	f7f5 fe7c 	bl	8006ad0 <HAL_DMA_Start_IT>
 8010dd8:	4603      	mov	r3, r0
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d001      	beq.n	8010de2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010dde:	2301      	movs	r3, #1
 8010de0:	e0b2      	b.n	8010f48 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	68da      	ldr	r2, [r3, #12]
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010df0:	60da      	str	r2, [r3, #12]
      break;
 8010df2:	e026      	b.n	8010e42 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010df8:	4a55      	ldr	r2, [pc, #340]	@ (8010f50 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010dfa:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010e00:	4a54      	ldr	r2, [pc, #336]	@ (8010f54 <HAL_TIM_PWM_Start_DMA+0x430>)
 8010e02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010e08:	4a53      	ldr	r2, [pc, #332]	@ (8010f58 <HAL_TIM_PWM_Start_DMA+0x434>)
 8010e0a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8010e10:	6879      	ldr	r1, [r7, #4]
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	3340      	adds	r3, #64	@ 0x40
 8010e18:	461a      	mov	r2, r3
 8010e1a:	887b      	ldrh	r3, [r7, #2]
 8010e1c:	f7f5 fe58 	bl	8006ad0 <HAL_DMA_Start_IT>
 8010e20:	4603      	mov	r3, r0
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d001      	beq.n	8010e2a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010e26:	2301      	movs	r3, #1
 8010e28:	e08e      	b.n	8010f48 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	68da      	ldr	r2, [r3, #12]
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8010e38:	60da      	str	r2, [r3, #12]
      break;
 8010e3a:	e002      	b.n	8010e42 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8010e3c:	2301      	movs	r3, #1
 8010e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8010e40:	bf00      	nop
  }

  if (status == HAL_OK)
 8010e42:	7dfb      	ldrb	r3, [r7, #23]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d17e      	bne.n	8010f46 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	2201      	movs	r2, #1
 8010e4e:	68b9      	ldr	r1, [r7, #8]
 8010e50:	4618      	mov	r0, r3
 8010e52:	f000 ff63 	bl	8011d1c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	4a40      	ldr	r2, [pc, #256]	@ (8010f5c <HAL_TIM_PWM_Start_DMA+0x438>)
 8010e5c:	4293      	cmp	r3, r2
 8010e5e:	d013      	beq.n	8010e88 <HAL_TIM_PWM_Start_DMA+0x364>
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	4a3e      	ldr	r2, [pc, #248]	@ (8010f60 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8010e66:	4293      	cmp	r3, r2
 8010e68:	d00e      	beq.n	8010e88 <HAL_TIM_PWM_Start_DMA+0x364>
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	4a3d      	ldr	r2, [pc, #244]	@ (8010f64 <HAL_TIM_PWM_Start_DMA+0x440>)
 8010e70:	4293      	cmp	r3, r2
 8010e72:	d009      	beq.n	8010e88 <HAL_TIM_PWM_Start_DMA+0x364>
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	4a3b      	ldr	r2, [pc, #236]	@ (8010f68 <HAL_TIM_PWM_Start_DMA+0x444>)
 8010e7a:	4293      	cmp	r3, r2
 8010e7c:	d004      	beq.n	8010e88 <HAL_TIM_PWM_Start_DMA+0x364>
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	4a3a      	ldr	r2, [pc, #232]	@ (8010f6c <HAL_TIM_PWM_Start_DMA+0x448>)
 8010e84:	4293      	cmp	r3, r2
 8010e86:	d101      	bne.n	8010e8c <HAL_TIM_PWM_Start_DMA+0x368>
 8010e88:	2301      	movs	r3, #1
 8010e8a:	e000      	b.n	8010e8e <HAL_TIM_PWM_Start_DMA+0x36a>
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d007      	beq.n	8010ea2 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8010ea0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	4a2d      	ldr	r2, [pc, #180]	@ (8010f5c <HAL_TIM_PWM_Start_DMA+0x438>)
 8010ea8:	4293      	cmp	r3, r2
 8010eaa:	d02c      	beq.n	8010f06 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010eb4:	d027      	beq.n	8010f06 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	4a2d      	ldr	r2, [pc, #180]	@ (8010f70 <HAL_TIM_PWM_Start_DMA+0x44c>)
 8010ebc:	4293      	cmp	r3, r2
 8010ebe:	d022      	beq.n	8010f06 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	4a2b      	ldr	r2, [pc, #172]	@ (8010f74 <HAL_TIM_PWM_Start_DMA+0x450>)
 8010ec6:	4293      	cmp	r3, r2
 8010ec8:	d01d      	beq.n	8010f06 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	4a2a      	ldr	r2, [pc, #168]	@ (8010f78 <HAL_TIM_PWM_Start_DMA+0x454>)
 8010ed0:	4293      	cmp	r3, r2
 8010ed2:	d018      	beq.n	8010f06 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	4a21      	ldr	r2, [pc, #132]	@ (8010f60 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8010eda:	4293      	cmp	r3, r2
 8010edc:	d013      	beq.n	8010f06 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	4a26      	ldr	r2, [pc, #152]	@ (8010f7c <HAL_TIM_PWM_Start_DMA+0x458>)
 8010ee4:	4293      	cmp	r3, r2
 8010ee6:	d00e      	beq.n	8010f06 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	4a1d      	ldr	r2, [pc, #116]	@ (8010f64 <HAL_TIM_PWM_Start_DMA+0x440>)
 8010eee:	4293      	cmp	r3, r2
 8010ef0:	d009      	beq.n	8010f06 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	4a22      	ldr	r2, [pc, #136]	@ (8010f80 <HAL_TIM_PWM_Start_DMA+0x45c>)
 8010ef8:	4293      	cmp	r3, r2
 8010efa:	d004      	beq.n	8010f06 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	4a20      	ldr	r2, [pc, #128]	@ (8010f84 <HAL_TIM_PWM_Start_DMA+0x460>)
 8010f02:	4293      	cmp	r3, r2
 8010f04:	d115      	bne.n	8010f32 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	689a      	ldr	r2, [r3, #8]
 8010f0c:	4b1e      	ldr	r3, [pc, #120]	@ (8010f88 <HAL_TIM_PWM_Start_DMA+0x464>)
 8010f0e:	4013      	ands	r3, r2
 8010f10:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010f12:	693b      	ldr	r3, [r7, #16]
 8010f14:	2b06      	cmp	r3, #6
 8010f16:	d015      	beq.n	8010f44 <HAL_TIM_PWM_Start_DMA+0x420>
 8010f18:	693b      	ldr	r3, [r7, #16]
 8010f1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010f1e:	d011      	beq.n	8010f44 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	681a      	ldr	r2, [r3, #0]
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	f042 0201 	orr.w	r2, r2, #1
 8010f2e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010f30:	e008      	b.n	8010f44 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	681a      	ldr	r2, [r3, #0]
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	f042 0201 	orr.w	r2, r2, #1
 8010f40:	601a      	str	r2, [r3, #0]
 8010f42:	e000      	b.n	8010f46 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010f44:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8010f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f48:	4618      	mov	r0, r3
 8010f4a:	3718      	adds	r7, #24
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	bd80      	pop	{r7, pc}
 8010f50:	08011513 	.word	0x08011513
 8010f54:	080115bb 	.word	0x080115bb
 8010f58:	08011481 	.word	0x08011481
 8010f5c:	40010000 	.word	0x40010000
 8010f60:	40010400 	.word	0x40010400
 8010f64:	40014000 	.word	0x40014000
 8010f68:	40014400 	.word	0x40014400
 8010f6c:	40014800 	.word	0x40014800
 8010f70:	40000400 	.word	0x40000400
 8010f74:	40000800 	.word	0x40000800
 8010f78:	40000c00 	.word	0x40000c00
 8010f7c:	40001800 	.word	0x40001800
 8010f80:	4000e000 	.word	0x4000e000
 8010f84:	4000e400 	.word	0x4000e400
 8010f88:	00010007 	.word	0x00010007

08010f8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b082      	sub	sp, #8
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	691b      	ldr	r3, [r3, #16]
 8010f9a:	f003 0302 	and.w	r3, r3, #2
 8010f9e:	2b02      	cmp	r3, #2
 8010fa0:	d122      	bne.n	8010fe8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	68db      	ldr	r3, [r3, #12]
 8010fa8:	f003 0302 	and.w	r3, r3, #2
 8010fac:	2b02      	cmp	r3, #2
 8010fae:	d11b      	bne.n	8010fe8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	f06f 0202 	mvn.w	r2, #2
 8010fb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	2201      	movs	r2, #1
 8010fbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	699b      	ldr	r3, [r3, #24]
 8010fc6:	f003 0303 	and.w	r3, r3, #3
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d003      	beq.n	8010fd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010fce:	6878      	ldr	r0, [r7, #4]
 8010fd0:	f000 fa24 	bl	801141c <HAL_TIM_IC_CaptureCallback>
 8010fd4:	e005      	b.n	8010fe2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010fd6:	6878      	ldr	r0, [r7, #4]
 8010fd8:	f000 fa16 	bl	8011408 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010fdc:	6878      	ldr	r0, [r7, #4]
 8010fde:	f000 fa27 	bl	8011430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	691b      	ldr	r3, [r3, #16]
 8010fee:	f003 0304 	and.w	r3, r3, #4
 8010ff2:	2b04      	cmp	r3, #4
 8010ff4:	d122      	bne.n	801103c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	68db      	ldr	r3, [r3, #12]
 8010ffc:	f003 0304 	and.w	r3, r3, #4
 8011000:	2b04      	cmp	r3, #4
 8011002:	d11b      	bne.n	801103c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	f06f 0204 	mvn.w	r2, #4
 801100c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	2202      	movs	r2, #2
 8011012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	699b      	ldr	r3, [r3, #24]
 801101a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801101e:	2b00      	cmp	r3, #0
 8011020:	d003      	beq.n	801102a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011022:	6878      	ldr	r0, [r7, #4]
 8011024:	f000 f9fa 	bl	801141c <HAL_TIM_IC_CaptureCallback>
 8011028:	e005      	b.n	8011036 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801102a:	6878      	ldr	r0, [r7, #4]
 801102c:	f000 f9ec 	bl	8011408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011030:	6878      	ldr	r0, [r7, #4]
 8011032:	f000 f9fd 	bl	8011430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	2200      	movs	r2, #0
 801103a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	691b      	ldr	r3, [r3, #16]
 8011042:	f003 0308 	and.w	r3, r3, #8
 8011046:	2b08      	cmp	r3, #8
 8011048:	d122      	bne.n	8011090 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	68db      	ldr	r3, [r3, #12]
 8011050:	f003 0308 	and.w	r3, r3, #8
 8011054:	2b08      	cmp	r3, #8
 8011056:	d11b      	bne.n	8011090 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	f06f 0208 	mvn.w	r2, #8
 8011060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	2204      	movs	r2, #4
 8011066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	69db      	ldr	r3, [r3, #28]
 801106e:	f003 0303 	and.w	r3, r3, #3
 8011072:	2b00      	cmp	r3, #0
 8011074:	d003      	beq.n	801107e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011076:	6878      	ldr	r0, [r7, #4]
 8011078:	f000 f9d0 	bl	801141c <HAL_TIM_IC_CaptureCallback>
 801107c:	e005      	b.n	801108a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	f000 f9c2 	bl	8011408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011084:	6878      	ldr	r0, [r7, #4]
 8011086:	f000 f9d3 	bl	8011430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	2200      	movs	r2, #0
 801108e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	691b      	ldr	r3, [r3, #16]
 8011096:	f003 0310 	and.w	r3, r3, #16
 801109a:	2b10      	cmp	r3, #16
 801109c:	d122      	bne.n	80110e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	68db      	ldr	r3, [r3, #12]
 80110a4:	f003 0310 	and.w	r3, r3, #16
 80110a8:	2b10      	cmp	r3, #16
 80110aa:	d11b      	bne.n	80110e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	f06f 0210 	mvn.w	r2, #16
 80110b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	2208      	movs	r2, #8
 80110ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	69db      	ldr	r3, [r3, #28]
 80110c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d003      	beq.n	80110d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80110ca:	6878      	ldr	r0, [r7, #4]
 80110cc:	f000 f9a6 	bl	801141c <HAL_TIM_IC_CaptureCallback>
 80110d0:	e005      	b.n	80110de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80110d2:	6878      	ldr	r0, [r7, #4]
 80110d4:	f000 f998 	bl	8011408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f000 f9a9 	bl	8011430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	2200      	movs	r2, #0
 80110e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	691b      	ldr	r3, [r3, #16]
 80110ea:	f003 0301 	and.w	r3, r3, #1
 80110ee:	2b01      	cmp	r3, #1
 80110f0:	d10e      	bne.n	8011110 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	68db      	ldr	r3, [r3, #12]
 80110f8:	f003 0301 	and.w	r3, r3, #1
 80110fc:	2b01      	cmp	r3, #1
 80110fe:	d107      	bne.n	8011110 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	f06f 0201 	mvn.w	r2, #1
 8011108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801110a:	6878      	ldr	r0, [r7, #4]
 801110c:	f000 f972 	bl	80113f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	691b      	ldr	r3, [r3, #16]
 8011116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801111a:	2b80      	cmp	r3, #128	@ 0x80
 801111c:	d10e      	bne.n	801113c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	68db      	ldr	r3, [r3, #12]
 8011124:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011128:	2b80      	cmp	r3, #128	@ 0x80
 801112a:	d107      	bne.n	801113c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8011134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8011136:	6878      	ldr	r0, [r7, #4]
 8011138:	f000 febc 	bl	8011eb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	691b      	ldr	r3, [r3, #16]
 8011142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011146:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801114a:	d10e      	bne.n	801116a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	68db      	ldr	r3, [r3, #12]
 8011152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011156:	2b80      	cmp	r3, #128	@ 0x80
 8011158:	d107      	bne.n	801116a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8011162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8011164:	6878      	ldr	r0, [r7, #4]
 8011166:	f000 feaf 	bl	8011ec8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	691b      	ldr	r3, [r3, #16]
 8011170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011174:	2b40      	cmp	r3, #64	@ 0x40
 8011176:	d10e      	bne.n	8011196 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	68db      	ldr	r3, [r3, #12]
 801117e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011182:	2b40      	cmp	r3, #64	@ 0x40
 8011184:	d107      	bne.n	8011196 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801118e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011190:	6878      	ldr	r0, [r7, #4]
 8011192:	f000 f961 	bl	8011458 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	691b      	ldr	r3, [r3, #16]
 801119c:	f003 0320 	and.w	r3, r3, #32
 80111a0:	2b20      	cmp	r3, #32
 80111a2:	d10e      	bne.n	80111c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	68db      	ldr	r3, [r3, #12]
 80111aa:	f003 0320 	and.w	r3, r3, #32
 80111ae:	2b20      	cmp	r3, #32
 80111b0:	d107      	bne.n	80111c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	f06f 0220 	mvn.w	r2, #32
 80111ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80111bc:	6878      	ldr	r0, [r7, #4]
 80111be:	f000 fe6f 	bl	8011ea0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80111c2:	bf00      	nop
 80111c4:	3708      	adds	r7, #8
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}
	...

080111cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b086      	sub	sp, #24
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	60f8      	str	r0, [r7, #12]
 80111d4:	60b9      	str	r1, [r7, #8]
 80111d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80111d8:	2300      	movs	r3, #0
 80111da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80111e2:	2b01      	cmp	r3, #1
 80111e4:	d101      	bne.n	80111ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80111e6:	2302      	movs	r3, #2
 80111e8:	e0ff      	b.n	80113ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	2201      	movs	r2, #1
 80111ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	2b14      	cmp	r3, #20
 80111f6:	f200 80f0 	bhi.w	80113da <HAL_TIM_PWM_ConfigChannel+0x20e>
 80111fa:	a201      	add	r2, pc, #4	@ (adr r2, 8011200 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80111fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011200:	08011255 	.word	0x08011255
 8011204:	080113db 	.word	0x080113db
 8011208:	080113db 	.word	0x080113db
 801120c:	080113db 	.word	0x080113db
 8011210:	08011295 	.word	0x08011295
 8011214:	080113db 	.word	0x080113db
 8011218:	080113db 	.word	0x080113db
 801121c:	080113db 	.word	0x080113db
 8011220:	080112d7 	.word	0x080112d7
 8011224:	080113db 	.word	0x080113db
 8011228:	080113db 	.word	0x080113db
 801122c:	080113db 	.word	0x080113db
 8011230:	08011317 	.word	0x08011317
 8011234:	080113db 	.word	0x080113db
 8011238:	080113db 	.word	0x080113db
 801123c:	080113db 	.word	0x080113db
 8011240:	08011359 	.word	0x08011359
 8011244:	080113db 	.word	0x080113db
 8011248:	080113db 	.word	0x080113db
 801124c:	080113db 	.word	0x080113db
 8011250:	08011399 	.word	0x08011399
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	68b9      	ldr	r1, [r7, #8]
 801125a:	4618      	mov	r0, r3
 801125c:	f000 fa88 	bl	8011770 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	699a      	ldr	r2, [r3, #24]
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	f042 0208 	orr.w	r2, r2, #8
 801126e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	699a      	ldr	r2, [r3, #24]
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	f022 0204 	bic.w	r2, r2, #4
 801127e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	6999      	ldr	r1, [r3, #24]
 8011286:	68bb      	ldr	r3, [r7, #8]
 8011288:	691a      	ldr	r2, [r3, #16]
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	430a      	orrs	r2, r1
 8011290:	619a      	str	r2, [r3, #24]
      break;
 8011292:	e0a5      	b.n	80113e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	68b9      	ldr	r1, [r7, #8]
 801129a:	4618      	mov	r0, r3
 801129c:	f000 faf8 	bl	8011890 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	699a      	ldr	r2, [r3, #24]
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80112ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	699a      	ldr	r2, [r3, #24]
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80112be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	6999      	ldr	r1, [r3, #24]
 80112c6:	68bb      	ldr	r3, [r7, #8]
 80112c8:	691b      	ldr	r3, [r3, #16]
 80112ca:	021a      	lsls	r2, r3, #8
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	430a      	orrs	r2, r1
 80112d2:	619a      	str	r2, [r3, #24]
      break;
 80112d4:	e084      	b.n	80113e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	68b9      	ldr	r1, [r7, #8]
 80112dc:	4618      	mov	r0, r3
 80112de:	f000 fb61 	bl	80119a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	69da      	ldr	r2, [r3, #28]
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	f042 0208 	orr.w	r2, r2, #8
 80112f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	69da      	ldr	r2, [r3, #28]
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	f022 0204 	bic.w	r2, r2, #4
 8011300:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	69d9      	ldr	r1, [r3, #28]
 8011308:	68bb      	ldr	r3, [r7, #8]
 801130a:	691a      	ldr	r2, [r3, #16]
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	430a      	orrs	r2, r1
 8011312:	61da      	str	r2, [r3, #28]
      break;
 8011314:	e064      	b.n	80113e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	68b9      	ldr	r1, [r7, #8]
 801131c:	4618      	mov	r0, r3
 801131e:	f000 fbc9 	bl	8011ab4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	69da      	ldr	r2, [r3, #28]
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011330:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	69da      	ldr	r2, [r3, #28]
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011340:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	69d9      	ldr	r1, [r3, #28]
 8011348:	68bb      	ldr	r3, [r7, #8]
 801134a:	691b      	ldr	r3, [r3, #16]
 801134c:	021a      	lsls	r2, r3, #8
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	430a      	orrs	r2, r1
 8011354:	61da      	str	r2, [r3, #28]
      break;
 8011356:	e043      	b.n	80113e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	68b9      	ldr	r1, [r7, #8]
 801135e:	4618      	mov	r0, r3
 8011360:	f000 fc12 	bl	8011b88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	f042 0208 	orr.w	r2, r2, #8
 8011372:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	f022 0204 	bic.w	r2, r2, #4
 8011382:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801138a:	68bb      	ldr	r3, [r7, #8]
 801138c:	691a      	ldr	r2, [r3, #16]
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	430a      	orrs	r2, r1
 8011394:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8011396:	e023      	b.n	80113e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	68b9      	ldr	r1, [r7, #8]
 801139e:	4618      	mov	r0, r3
 80113a0:	f000 fc56 	bl	8011c50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80113b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80113c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80113ca:	68bb      	ldr	r3, [r7, #8]
 80113cc:	691b      	ldr	r3, [r3, #16]
 80113ce:	021a      	lsls	r2, r3, #8
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	430a      	orrs	r2, r1
 80113d6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80113d8:	e002      	b.n	80113e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80113da:	2301      	movs	r3, #1
 80113dc:	75fb      	strb	r3, [r7, #23]
      break;
 80113de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	2200      	movs	r2, #0
 80113e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80113e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80113ea:	4618      	mov	r0, r3
 80113ec:	3718      	adds	r7, #24
 80113ee:	46bd      	mov	sp, r7
 80113f0:	bd80      	pop	{r7, pc}
 80113f2:	bf00      	nop

080113f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80113f4:	b480      	push	{r7}
 80113f6:	b083      	sub	sp, #12
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80113fc:	bf00      	nop
 80113fe:	370c      	adds	r7, #12
 8011400:	46bd      	mov	sp, r7
 8011402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011406:	4770      	bx	lr

08011408 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011408:	b480      	push	{r7}
 801140a:	b083      	sub	sp, #12
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011410:	bf00      	nop
 8011412:	370c      	adds	r7, #12
 8011414:	46bd      	mov	sp, r7
 8011416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141a:	4770      	bx	lr

0801141c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801141c:	b480      	push	{r7}
 801141e:	b083      	sub	sp, #12
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011424:	bf00      	nop
 8011426:	370c      	adds	r7, #12
 8011428:	46bd      	mov	sp, r7
 801142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142e:	4770      	bx	lr

08011430 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8011430:	b480      	push	{r7}
 8011432:	b083      	sub	sp, #12
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011438:	bf00      	nop
 801143a:	370c      	adds	r7, #12
 801143c:	46bd      	mov	sp, r7
 801143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011442:	4770      	bx	lr

08011444 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8011444:	b480      	push	{r7}
 8011446:	b083      	sub	sp, #12
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 801144c:	bf00      	nop
 801144e:	370c      	adds	r7, #12
 8011450:	46bd      	mov	sp, r7
 8011452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011456:	4770      	bx	lr

08011458 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011458:	b480      	push	{r7}
 801145a:	b083      	sub	sp, #12
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011460:	bf00      	nop
 8011462:	370c      	adds	r7, #12
 8011464:	46bd      	mov	sp, r7
 8011466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146a:	4770      	bx	lr

0801146c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 801146c:	b480      	push	{r7}
 801146e:	b083      	sub	sp, #12
 8011470:	af00      	add	r7, sp, #0
 8011472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8011474:	bf00      	nop
 8011476:	370c      	adds	r7, #12
 8011478:	46bd      	mov	sp, r7
 801147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147e:	4770      	bx	lr

08011480 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b084      	sub	sp, #16
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801148c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011492:	687a      	ldr	r2, [r7, #4]
 8011494:	429a      	cmp	r2, r3
 8011496:	d107      	bne.n	80114a8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	2201      	movs	r2, #1
 801149c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	2201      	movs	r2, #1
 80114a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80114a6:	e02a      	b.n	80114fe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114ac:	687a      	ldr	r2, [r7, #4]
 80114ae:	429a      	cmp	r2, r3
 80114b0:	d107      	bne.n	80114c2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	2202      	movs	r2, #2
 80114b6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	2201      	movs	r2, #1
 80114bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80114c0:	e01d      	b.n	80114fe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114c6:	687a      	ldr	r2, [r7, #4]
 80114c8:	429a      	cmp	r2, r3
 80114ca:	d107      	bne.n	80114dc <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	2204      	movs	r2, #4
 80114d0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	2201      	movs	r2, #1
 80114d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80114da:	e010      	b.n	80114fe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114e0:	687a      	ldr	r2, [r7, #4]
 80114e2:	429a      	cmp	r2, r3
 80114e4:	d107      	bne.n	80114f6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	2208      	movs	r2, #8
 80114ea:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	2201      	movs	r2, #1
 80114f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80114f4:	e003      	b.n	80114fe <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	2201      	movs	r2, #1
 80114fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80114fe:	68f8      	ldr	r0, [r7, #12]
 8011500:	f7ff ffb4 	bl	801146c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	2200      	movs	r2, #0
 8011508:	771a      	strb	r2, [r3, #28]
}
 801150a:	bf00      	nop
 801150c:	3710      	adds	r7, #16
 801150e:	46bd      	mov	sp, r7
 8011510:	bd80      	pop	{r7, pc}

08011512 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8011512:	b580      	push	{r7, lr}
 8011514:	b084      	sub	sp, #16
 8011516:	af00      	add	r7, sp, #0
 8011518:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801151e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011524:	687a      	ldr	r2, [r7, #4]
 8011526:	429a      	cmp	r2, r3
 8011528:	d10b      	bne.n	8011542 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	2201      	movs	r2, #1
 801152e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	69db      	ldr	r3, [r3, #28]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d136      	bne.n	80115a6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	2201      	movs	r2, #1
 801153c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011540:	e031      	b.n	80115a6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011546:	687a      	ldr	r2, [r7, #4]
 8011548:	429a      	cmp	r2, r3
 801154a:	d10b      	bne.n	8011564 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	2202      	movs	r2, #2
 8011550:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	69db      	ldr	r3, [r3, #28]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d125      	bne.n	80115a6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	2201      	movs	r2, #1
 801155e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011562:	e020      	b.n	80115a6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011568:	687a      	ldr	r2, [r7, #4]
 801156a:	429a      	cmp	r2, r3
 801156c:	d10b      	bne.n	8011586 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	2204      	movs	r2, #4
 8011572:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	69db      	ldr	r3, [r3, #28]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d114      	bne.n	80115a6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	2201      	movs	r2, #1
 8011580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011584:	e00f      	b.n	80115a6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801158a:	687a      	ldr	r2, [r7, #4]
 801158c:	429a      	cmp	r2, r3
 801158e:	d10a      	bne.n	80115a6 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	2208      	movs	r2, #8
 8011594:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	69db      	ldr	r3, [r3, #28]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d103      	bne.n	80115a6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	2201      	movs	r2, #1
 80115a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80115a6:	68f8      	ldr	r0, [r7, #12]
 80115a8:	f7ff ff42 	bl	8011430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	2200      	movs	r2, #0
 80115b0:	771a      	strb	r2, [r3, #28]
}
 80115b2:	bf00      	nop
 80115b4:	3710      	adds	r7, #16
 80115b6:	46bd      	mov	sp, r7
 80115b8:	bd80      	pop	{r7, pc}

080115ba <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80115ba:	b580      	push	{r7, lr}
 80115bc:	b084      	sub	sp, #16
 80115be:	af00      	add	r7, sp, #0
 80115c0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80115c6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115cc:	687a      	ldr	r2, [r7, #4]
 80115ce:	429a      	cmp	r2, r3
 80115d0:	d103      	bne.n	80115da <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	2201      	movs	r2, #1
 80115d6:	771a      	strb	r2, [r3, #28]
 80115d8:	e019      	b.n	801160e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115de:	687a      	ldr	r2, [r7, #4]
 80115e0:	429a      	cmp	r2, r3
 80115e2:	d103      	bne.n	80115ec <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	2202      	movs	r2, #2
 80115e8:	771a      	strb	r2, [r3, #28]
 80115ea:	e010      	b.n	801160e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115f0:	687a      	ldr	r2, [r7, #4]
 80115f2:	429a      	cmp	r2, r3
 80115f4:	d103      	bne.n	80115fe <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	2204      	movs	r2, #4
 80115fa:	771a      	strb	r2, [r3, #28]
 80115fc:	e007      	b.n	801160e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011602:	687a      	ldr	r2, [r7, #4]
 8011604:	429a      	cmp	r2, r3
 8011606:	d102      	bne.n	801160e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	2208      	movs	r2, #8
 801160c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 801160e:	68f8      	ldr	r0, [r7, #12]
 8011610:	f7ff ff18 	bl	8011444 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	2200      	movs	r2, #0
 8011618:	771a      	strb	r2, [r3, #28]
}
 801161a:	bf00      	nop
 801161c:	3710      	adds	r7, #16
 801161e:	46bd      	mov	sp, r7
 8011620:	bd80      	pop	{r7, pc}
	...

08011624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011624:	b480      	push	{r7}
 8011626:	b085      	sub	sp, #20
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
 801162c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	4a44      	ldr	r2, [pc, #272]	@ (8011748 <TIM_Base_SetConfig+0x124>)
 8011638:	4293      	cmp	r3, r2
 801163a:	d013      	beq.n	8011664 <TIM_Base_SetConfig+0x40>
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011642:	d00f      	beq.n	8011664 <TIM_Base_SetConfig+0x40>
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	4a41      	ldr	r2, [pc, #260]	@ (801174c <TIM_Base_SetConfig+0x128>)
 8011648:	4293      	cmp	r3, r2
 801164a:	d00b      	beq.n	8011664 <TIM_Base_SetConfig+0x40>
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	4a40      	ldr	r2, [pc, #256]	@ (8011750 <TIM_Base_SetConfig+0x12c>)
 8011650:	4293      	cmp	r3, r2
 8011652:	d007      	beq.n	8011664 <TIM_Base_SetConfig+0x40>
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	4a3f      	ldr	r2, [pc, #252]	@ (8011754 <TIM_Base_SetConfig+0x130>)
 8011658:	4293      	cmp	r3, r2
 801165a:	d003      	beq.n	8011664 <TIM_Base_SetConfig+0x40>
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	4a3e      	ldr	r2, [pc, #248]	@ (8011758 <TIM_Base_SetConfig+0x134>)
 8011660:	4293      	cmp	r3, r2
 8011662:	d108      	bne.n	8011676 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801166a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801166c:	683b      	ldr	r3, [r7, #0]
 801166e:	685b      	ldr	r3, [r3, #4]
 8011670:	68fa      	ldr	r2, [r7, #12]
 8011672:	4313      	orrs	r3, r2
 8011674:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	4a33      	ldr	r2, [pc, #204]	@ (8011748 <TIM_Base_SetConfig+0x124>)
 801167a:	4293      	cmp	r3, r2
 801167c:	d027      	beq.n	80116ce <TIM_Base_SetConfig+0xaa>
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011684:	d023      	beq.n	80116ce <TIM_Base_SetConfig+0xaa>
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	4a30      	ldr	r2, [pc, #192]	@ (801174c <TIM_Base_SetConfig+0x128>)
 801168a:	4293      	cmp	r3, r2
 801168c:	d01f      	beq.n	80116ce <TIM_Base_SetConfig+0xaa>
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	4a2f      	ldr	r2, [pc, #188]	@ (8011750 <TIM_Base_SetConfig+0x12c>)
 8011692:	4293      	cmp	r3, r2
 8011694:	d01b      	beq.n	80116ce <TIM_Base_SetConfig+0xaa>
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	4a2e      	ldr	r2, [pc, #184]	@ (8011754 <TIM_Base_SetConfig+0x130>)
 801169a:	4293      	cmp	r3, r2
 801169c:	d017      	beq.n	80116ce <TIM_Base_SetConfig+0xaa>
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	4a2d      	ldr	r2, [pc, #180]	@ (8011758 <TIM_Base_SetConfig+0x134>)
 80116a2:	4293      	cmp	r3, r2
 80116a4:	d013      	beq.n	80116ce <TIM_Base_SetConfig+0xaa>
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	4a2c      	ldr	r2, [pc, #176]	@ (801175c <TIM_Base_SetConfig+0x138>)
 80116aa:	4293      	cmp	r3, r2
 80116ac:	d00f      	beq.n	80116ce <TIM_Base_SetConfig+0xaa>
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	4a2b      	ldr	r2, [pc, #172]	@ (8011760 <TIM_Base_SetConfig+0x13c>)
 80116b2:	4293      	cmp	r3, r2
 80116b4:	d00b      	beq.n	80116ce <TIM_Base_SetConfig+0xaa>
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	4a2a      	ldr	r2, [pc, #168]	@ (8011764 <TIM_Base_SetConfig+0x140>)
 80116ba:	4293      	cmp	r3, r2
 80116bc:	d007      	beq.n	80116ce <TIM_Base_SetConfig+0xaa>
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	4a29      	ldr	r2, [pc, #164]	@ (8011768 <TIM_Base_SetConfig+0x144>)
 80116c2:	4293      	cmp	r3, r2
 80116c4:	d003      	beq.n	80116ce <TIM_Base_SetConfig+0xaa>
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	4a28      	ldr	r2, [pc, #160]	@ (801176c <TIM_Base_SetConfig+0x148>)
 80116ca:	4293      	cmp	r3, r2
 80116cc:	d108      	bne.n	80116e0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80116d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80116d6:	683b      	ldr	r3, [r7, #0]
 80116d8:	68db      	ldr	r3, [r3, #12]
 80116da:	68fa      	ldr	r2, [r7, #12]
 80116dc:	4313      	orrs	r3, r2
 80116de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80116e6:	683b      	ldr	r3, [r7, #0]
 80116e8:	695b      	ldr	r3, [r3, #20]
 80116ea:	4313      	orrs	r3, r2
 80116ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	68fa      	ldr	r2, [r7, #12]
 80116f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80116f4:	683b      	ldr	r3, [r7, #0]
 80116f6:	689a      	ldr	r2, [r3, #8]
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80116fc:	683b      	ldr	r3, [r7, #0]
 80116fe:	681a      	ldr	r2, [r3, #0]
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	4a10      	ldr	r2, [pc, #64]	@ (8011748 <TIM_Base_SetConfig+0x124>)
 8011708:	4293      	cmp	r3, r2
 801170a:	d00f      	beq.n	801172c <TIM_Base_SetConfig+0x108>
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	4a12      	ldr	r2, [pc, #72]	@ (8011758 <TIM_Base_SetConfig+0x134>)
 8011710:	4293      	cmp	r3, r2
 8011712:	d00b      	beq.n	801172c <TIM_Base_SetConfig+0x108>
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	4a11      	ldr	r2, [pc, #68]	@ (801175c <TIM_Base_SetConfig+0x138>)
 8011718:	4293      	cmp	r3, r2
 801171a:	d007      	beq.n	801172c <TIM_Base_SetConfig+0x108>
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	4a10      	ldr	r2, [pc, #64]	@ (8011760 <TIM_Base_SetConfig+0x13c>)
 8011720:	4293      	cmp	r3, r2
 8011722:	d003      	beq.n	801172c <TIM_Base_SetConfig+0x108>
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	4a0f      	ldr	r2, [pc, #60]	@ (8011764 <TIM_Base_SetConfig+0x140>)
 8011728:	4293      	cmp	r3, r2
 801172a:	d103      	bne.n	8011734 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	691a      	ldr	r2, [r3, #16]
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	2201      	movs	r2, #1
 8011738:	615a      	str	r2, [r3, #20]
}
 801173a:	bf00      	nop
 801173c:	3714      	adds	r7, #20
 801173e:	46bd      	mov	sp, r7
 8011740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011744:	4770      	bx	lr
 8011746:	bf00      	nop
 8011748:	40010000 	.word	0x40010000
 801174c:	40000400 	.word	0x40000400
 8011750:	40000800 	.word	0x40000800
 8011754:	40000c00 	.word	0x40000c00
 8011758:	40010400 	.word	0x40010400
 801175c:	40014000 	.word	0x40014000
 8011760:	40014400 	.word	0x40014400
 8011764:	40014800 	.word	0x40014800
 8011768:	4000e000 	.word	0x4000e000
 801176c:	4000e400 	.word	0x4000e400

08011770 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011770:	b480      	push	{r7}
 8011772:	b087      	sub	sp, #28
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
 8011778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	6a1b      	ldr	r3, [r3, #32]
 801177e:	f023 0201 	bic.w	r2, r3, #1
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	6a1b      	ldr	r3, [r3, #32]
 801178a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	685b      	ldr	r3, [r3, #4]
 8011790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	699b      	ldr	r3, [r3, #24]
 8011796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011798:	68fa      	ldr	r2, [r7, #12]
 801179a:	4b37      	ldr	r3, [pc, #220]	@ (8011878 <TIM_OC1_SetConfig+0x108>)
 801179c:	4013      	ands	r3, r2
 801179e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	f023 0303 	bic.w	r3, r3, #3
 80117a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	68fa      	ldr	r2, [r7, #12]
 80117ae:	4313      	orrs	r3, r2
 80117b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80117b2:	697b      	ldr	r3, [r7, #20]
 80117b4:	f023 0302 	bic.w	r3, r3, #2
 80117b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80117ba:	683b      	ldr	r3, [r7, #0]
 80117bc:	689b      	ldr	r3, [r3, #8]
 80117be:	697a      	ldr	r2, [r7, #20]
 80117c0:	4313      	orrs	r3, r2
 80117c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	4a2d      	ldr	r2, [pc, #180]	@ (801187c <TIM_OC1_SetConfig+0x10c>)
 80117c8:	4293      	cmp	r3, r2
 80117ca:	d00f      	beq.n	80117ec <TIM_OC1_SetConfig+0x7c>
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	4a2c      	ldr	r2, [pc, #176]	@ (8011880 <TIM_OC1_SetConfig+0x110>)
 80117d0:	4293      	cmp	r3, r2
 80117d2:	d00b      	beq.n	80117ec <TIM_OC1_SetConfig+0x7c>
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	4a2b      	ldr	r2, [pc, #172]	@ (8011884 <TIM_OC1_SetConfig+0x114>)
 80117d8:	4293      	cmp	r3, r2
 80117da:	d007      	beq.n	80117ec <TIM_OC1_SetConfig+0x7c>
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	4a2a      	ldr	r2, [pc, #168]	@ (8011888 <TIM_OC1_SetConfig+0x118>)
 80117e0:	4293      	cmp	r3, r2
 80117e2:	d003      	beq.n	80117ec <TIM_OC1_SetConfig+0x7c>
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	4a29      	ldr	r2, [pc, #164]	@ (801188c <TIM_OC1_SetConfig+0x11c>)
 80117e8:	4293      	cmp	r3, r2
 80117ea:	d10c      	bne.n	8011806 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80117ec:	697b      	ldr	r3, [r7, #20]
 80117ee:	f023 0308 	bic.w	r3, r3, #8
 80117f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	68db      	ldr	r3, [r3, #12]
 80117f8:	697a      	ldr	r2, [r7, #20]
 80117fa:	4313      	orrs	r3, r2
 80117fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80117fe:	697b      	ldr	r3, [r7, #20]
 8011800:	f023 0304 	bic.w	r3, r3, #4
 8011804:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	4a1c      	ldr	r2, [pc, #112]	@ (801187c <TIM_OC1_SetConfig+0x10c>)
 801180a:	4293      	cmp	r3, r2
 801180c:	d00f      	beq.n	801182e <TIM_OC1_SetConfig+0xbe>
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	4a1b      	ldr	r2, [pc, #108]	@ (8011880 <TIM_OC1_SetConfig+0x110>)
 8011812:	4293      	cmp	r3, r2
 8011814:	d00b      	beq.n	801182e <TIM_OC1_SetConfig+0xbe>
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	4a1a      	ldr	r2, [pc, #104]	@ (8011884 <TIM_OC1_SetConfig+0x114>)
 801181a:	4293      	cmp	r3, r2
 801181c:	d007      	beq.n	801182e <TIM_OC1_SetConfig+0xbe>
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	4a19      	ldr	r2, [pc, #100]	@ (8011888 <TIM_OC1_SetConfig+0x118>)
 8011822:	4293      	cmp	r3, r2
 8011824:	d003      	beq.n	801182e <TIM_OC1_SetConfig+0xbe>
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	4a18      	ldr	r2, [pc, #96]	@ (801188c <TIM_OC1_SetConfig+0x11c>)
 801182a:	4293      	cmp	r3, r2
 801182c:	d111      	bne.n	8011852 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801182e:	693b      	ldr	r3, [r7, #16]
 8011830:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011836:	693b      	ldr	r3, [r7, #16]
 8011838:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801183c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801183e:	683b      	ldr	r3, [r7, #0]
 8011840:	695b      	ldr	r3, [r3, #20]
 8011842:	693a      	ldr	r2, [r7, #16]
 8011844:	4313      	orrs	r3, r2
 8011846:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011848:	683b      	ldr	r3, [r7, #0]
 801184a:	699b      	ldr	r3, [r3, #24]
 801184c:	693a      	ldr	r2, [r7, #16]
 801184e:	4313      	orrs	r3, r2
 8011850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	693a      	ldr	r2, [r7, #16]
 8011856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	68fa      	ldr	r2, [r7, #12]
 801185c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801185e:	683b      	ldr	r3, [r7, #0]
 8011860:	685a      	ldr	r2, [r3, #4]
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	697a      	ldr	r2, [r7, #20]
 801186a:	621a      	str	r2, [r3, #32]
}
 801186c:	bf00      	nop
 801186e:	371c      	adds	r7, #28
 8011870:	46bd      	mov	sp, r7
 8011872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011876:	4770      	bx	lr
 8011878:	fffeff8f 	.word	0xfffeff8f
 801187c:	40010000 	.word	0x40010000
 8011880:	40010400 	.word	0x40010400
 8011884:	40014000 	.word	0x40014000
 8011888:	40014400 	.word	0x40014400
 801188c:	40014800 	.word	0x40014800

08011890 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011890:	b480      	push	{r7}
 8011892:	b087      	sub	sp, #28
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
 8011898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	6a1b      	ldr	r3, [r3, #32]
 801189e:	f023 0210 	bic.w	r2, r3, #16
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	6a1b      	ldr	r3, [r3, #32]
 80118aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	685b      	ldr	r3, [r3, #4]
 80118b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	699b      	ldr	r3, [r3, #24]
 80118b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80118b8:	68fa      	ldr	r2, [r7, #12]
 80118ba:	4b34      	ldr	r3, [pc, #208]	@ (801198c <TIM_OC2_SetConfig+0xfc>)
 80118bc:	4013      	ands	r3, r2
 80118be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80118c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80118c8:	683b      	ldr	r3, [r7, #0]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	021b      	lsls	r3, r3, #8
 80118ce:	68fa      	ldr	r2, [r7, #12]
 80118d0:	4313      	orrs	r3, r2
 80118d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80118d4:	697b      	ldr	r3, [r7, #20]
 80118d6:	f023 0320 	bic.w	r3, r3, #32
 80118da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	689b      	ldr	r3, [r3, #8]
 80118e0:	011b      	lsls	r3, r3, #4
 80118e2:	697a      	ldr	r2, [r7, #20]
 80118e4:	4313      	orrs	r3, r2
 80118e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	4a29      	ldr	r2, [pc, #164]	@ (8011990 <TIM_OC2_SetConfig+0x100>)
 80118ec:	4293      	cmp	r3, r2
 80118ee:	d003      	beq.n	80118f8 <TIM_OC2_SetConfig+0x68>
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	4a28      	ldr	r2, [pc, #160]	@ (8011994 <TIM_OC2_SetConfig+0x104>)
 80118f4:	4293      	cmp	r3, r2
 80118f6:	d10d      	bne.n	8011914 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80118f8:	697b      	ldr	r3, [r7, #20]
 80118fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80118fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	68db      	ldr	r3, [r3, #12]
 8011904:	011b      	lsls	r3, r3, #4
 8011906:	697a      	ldr	r2, [r7, #20]
 8011908:	4313      	orrs	r3, r2
 801190a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801190c:	697b      	ldr	r3, [r7, #20]
 801190e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011912:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	4a1e      	ldr	r2, [pc, #120]	@ (8011990 <TIM_OC2_SetConfig+0x100>)
 8011918:	4293      	cmp	r3, r2
 801191a:	d00f      	beq.n	801193c <TIM_OC2_SetConfig+0xac>
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	4a1d      	ldr	r2, [pc, #116]	@ (8011994 <TIM_OC2_SetConfig+0x104>)
 8011920:	4293      	cmp	r3, r2
 8011922:	d00b      	beq.n	801193c <TIM_OC2_SetConfig+0xac>
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	4a1c      	ldr	r2, [pc, #112]	@ (8011998 <TIM_OC2_SetConfig+0x108>)
 8011928:	4293      	cmp	r3, r2
 801192a:	d007      	beq.n	801193c <TIM_OC2_SetConfig+0xac>
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	4a1b      	ldr	r2, [pc, #108]	@ (801199c <TIM_OC2_SetConfig+0x10c>)
 8011930:	4293      	cmp	r3, r2
 8011932:	d003      	beq.n	801193c <TIM_OC2_SetConfig+0xac>
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	4a1a      	ldr	r2, [pc, #104]	@ (80119a0 <TIM_OC2_SetConfig+0x110>)
 8011938:	4293      	cmp	r3, r2
 801193a:	d113      	bne.n	8011964 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801193c:	693b      	ldr	r3, [r7, #16]
 801193e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8011942:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011944:	693b      	ldr	r3, [r7, #16]
 8011946:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801194a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801194c:	683b      	ldr	r3, [r7, #0]
 801194e:	695b      	ldr	r3, [r3, #20]
 8011950:	009b      	lsls	r3, r3, #2
 8011952:	693a      	ldr	r2, [r7, #16]
 8011954:	4313      	orrs	r3, r2
 8011956:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011958:	683b      	ldr	r3, [r7, #0]
 801195a:	699b      	ldr	r3, [r3, #24]
 801195c:	009b      	lsls	r3, r3, #2
 801195e:	693a      	ldr	r2, [r7, #16]
 8011960:	4313      	orrs	r3, r2
 8011962:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	693a      	ldr	r2, [r7, #16]
 8011968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	68fa      	ldr	r2, [r7, #12]
 801196e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011970:	683b      	ldr	r3, [r7, #0]
 8011972:	685a      	ldr	r2, [r3, #4]
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	697a      	ldr	r2, [r7, #20]
 801197c:	621a      	str	r2, [r3, #32]
}
 801197e:	bf00      	nop
 8011980:	371c      	adds	r7, #28
 8011982:	46bd      	mov	sp, r7
 8011984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011988:	4770      	bx	lr
 801198a:	bf00      	nop
 801198c:	feff8fff 	.word	0xfeff8fff
 8011990:	40010000 	.word	0x40010000
 8011994:	40010400 	.word	0x40010400
 8011998:	40014000 	.word	0x40014000
 801199c:	40014400 	.word	0x40014400
 80119a0:	40014800 	.word	0x40014800

080119a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80119a4:	b480      	push	{r7}
 80119a6:	b087      	sub	sp, #28
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
 80119ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	6a1b      	ldr	r3, [r3, #32]
 80119b2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	6a1b      	ldr	r3, [r3, #32]
 80119be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	685b      	ldr	r3, [r3, #4]
 80119c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	69db      	ldr	r3, [r3, #28]
 80119ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80119cc:	68fa      	ldr	r2, [r7, #12]
 80119ce:	4b33      	ldr	r3, [pc, #204]	@ (8011a9c <TIM_OC3_SetConfig+0xf8>)
 80119d0:	4013      	ands	r3, r2
 80119d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	f023 0303 	bic.w	r3, r3, #3
 80119da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80119dc:	683b      	ldr	r3, [r7, #0]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	68fa      	ldr	r2, [r7, #12]
 80119e2:	4313      	orrs	r3, r2
 80119e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80119e6:	697b      	ldr	r3, [r7, #20]
 80119e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80119ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80119ee:	683b      	ldr	r3, [r7, #0]
 80119f0:	689b      	ldr	r3, [r3, #8]
 80119f2:	021b      	lsls	r3, r3, #8
 80119f4:	697a      	ldr	r2, [r7, #20]
 80119f6:	4313      	orrs	r3, r2
 80119f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	4a28      	ldr	r2, [pc, #160]	@ (8011aa0 <TIM_OC3_SetConfig+0xfc>)
 80119fe:	4293      	cmp	r3, r2
 8011a00:	d003      	beq.n	8011a0a <TIM_OC3_SetConfig+0x66>
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	4a27      	ldr	r2, [pc, #156]	@ (8011aa4 <TIM_OC3_SetConfig+0x100>)
 8011a06:	4293      	cmp	r3, r2
 8011a08:	d10d      	bne.n	8011a26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011a10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011a12:	683b      	ldr	r3, [r7, #0]
 8011a14:	68db      	ldr	r3, [r3, #12]
 8011a16:	021b      	lsls	r3, r3, #8
 8011a18:	697a      	ldr	r2, [r7, #20]
 8011a1a:	4313      	orrs	r3, r2
 8011a1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011a1e:	697b      	ldr	r3, [r7, #20]
 8011a20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8011a24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	4a1d      	ldr	r2, [pc, #116]	@ (8011aa0 <TIM_OC3_SetConfig+0xfc>)
 8011a2a:	4293      	cmp	r3, r2
 8011a2c:	d00f      	beq.n	8011a4e <TIM_OC3_SetConfig+0xaa>
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	4a1c      	ldr	r2, [pc, #112]	@ (8011aa4 <TIM_OC3_SetConfig+0x100>)
 8011a32:	4293      	cmp	r3, r2
 8011a34:	d00b      	beq.n	8011a4e <TIM_OC3_SetConfig+0xaa>
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	4a1b      	ldr	r2, [pc, #108]	@ (8011aa8 <TIM_OC3_SetConfig+0x104>)
 8011a3a:	4293      	cmp	r3, r2
 8011a3c:	d007      	beq.n	8011a4e <TIM_OC3_SetConfig+0xaa>
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	4a1a      	ldr	r2, [pc, #104]	@ (8011aac <TIM_OC3_SetConfig+0x108>)
 8011a42:	4293      	cmp	r3, r2
 8011a44:	d003      	beq.n	8011a4e <TIM_OC3_SetConfig+0xaa>
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	4a19      	ldr	r2, [pc, #100]	@ (8011ab0 <TIM_OC3_SetConfig+0x10c>)
 8011a4a:	4293      	cmp	r3, r2
 8011a4c:	d113      	bne.n	8011a76 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011a4e:	693b      	ldr	r3, [r7, #16]
 8011a50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011a56:	693b      	ldr	r3, [r7, #16]
 8011a58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8011a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011a5e:	683b      	ldr	r3, [r7, #0]
 8011a60:	695b      	ldr	r3, [r3, #20]
 8011a62:	011b      	lsls	r3, r3, #4
 8011a64:	693a      	ldr	r2, [r7, #16]
 8011a66:	4313      	orrs	r3, r2
 8011a68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011a6a:	683b      	ldr	r3, [r7, #0]
 8011a6c:	699b      	ldr	r3, [r3, #24]
 8011a6e:	011b      	lsls	r3, r3, #4
 8011a70:	693a      	ldr	r2, [r7, #16]
 8011a72:	4313      	orrs	r3, r2
 8011a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	693a      	ldr	r2, [r7, #16]
 8011a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	68fa      	ldr	r2, [r7, #12]
 8011a80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	685a      	ldr	r2, [r3, #4]
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	697a      	ldr	r2, [r7, #20]
 8011a8e:	621a      	str	r2, [r3, #32]
}
 8011a90:	bf00      	nop
 8011a92:	371c      	adds	r7, #28
 8011a94:	46bd      	mov	sp, r7
 8011a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a9a:	4770      	bx	lr
 8011a9c:	fffeff8f 	.word	0xfffeff8f
 8011aa0:	40010000 	.word	0x40010000
 8011aa4:	40010400 	.word	0x40010400
 8011aa8:	40014000 	.word	0x40014000
 8011aac:	40014400 	.word	0x40014400
 8011ab0:	40014800 	.word	0x40014800

08011ab4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011ab4:	b480      	push	{r7}
 8011ab6:	b087      	sub	sp, #28
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
 8011abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	6a1b      	ldr	r3, [r3, #32]
 8011ac2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	6a1b      	ldr	r3, [r3, #32]
 8011ace:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	685b      	ldr	r3, [r3, #4]
 8011ad4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	69db      	ldr	r3, [r3, #28]
 8011ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011adc:	68fa      	ldr	r2, [r7, #12]
 8011ade:	4b24      	ldr	r3, [pc, #144]	@ (8011b70 <TIM_OC4_SetConfig+0xbc>)
 8011ae0:	4013      	ands	r3, r2
 8011ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011aec:	683b      	ldr	r3, [r7, #0]
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	021b      	lsls	r3, r3, #8
 8011af2:	68fa      	ldr	r2, [r7, #12]
 8011af4:	4313      	orrs	r3, r2
 8011af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011af8:	693b      	ldr	r3, [r7, #16]
 8011afa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8011afe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	689b      	ldr	r3, [r3, #8]
 8011b04:	031b      	lsls	r3, r3, #12
 8011b06:	693a      	ldr	r2, [r7, #16]
 8011b08:	4313      	orrs	r3, r2
 8011b0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	4a19      	ldr	r2, [pc, #100]	@ (8011b74 <TIM_OC4_SetConfig+0xc0>)
 8011b10:	4293      	cmp	r3, r2
 8011b12:	d00f      	beq.n	8011b34 <TIM_OC4_SetConfig+0x80>
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	4a18      	ldr	r2, [pc, #96]	@ (8011b78 <TIM_OC4_SetConfig+0xc4>)
 8011b18:	4293      	cmp	r3, r2
 8011b1a:	d00b      	beq.n	8011b34 <TIM_OC4_SetConfig+0x80>
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	4a17      	ldr	r2, [pc, #92]	@ (8011b7c <TIM_OC4_SetConfig+0xc8>)
 8011b20:	4293      	cmp	r3, r2
 8011b22:	d007      	beq.n	8011b34 <TIM_OC4_SetConfig+0x80>
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	4a16      	ldr	r2, [pc, #88]	@ (8011b80 <TIM_OC4_SetConfig+0xcc>)
 8011b28:	4293      	cmp	r3, r2
 8011b2a:	d003      	beq.n	8011b34 <TIM_OC4_SetConfig+0x80>
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	4a15      	ldr	r2, [pc, #84]	@ (8011b84 <TIM_OC4_SetConfig+0xd0>)
 8011b30:	4293      	cmp	r3, r2
 8011b32:	d109      	bne.n	8011b48 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011b34:	697b      	ldr	r3, [r7, #20]
 8011b36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011b3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011b3c:	683b      	ldr	r3, [r7, #0]
 8011b3e:	695b      	ldr	r3, [r3, #20]
 8011b40:	019b      	lsls	r3, r3, #6
 8011b42:	697a      	ldr	r2, [r7, #20]
 8011b44:	4313      	orrs	r3, r2
 8011b46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	697a      	ldr	r2, [r7, #20]
 8011b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	68fa      	ldr	r2, [r7, #12]
 8011b52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011b54:	683b      	ldr	r3, [r7, #0]
 8011b56:	685a      	ldr	r2, [r3, #4]
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	693a      	ldr	r2, [r7, #16]
 8011b60:	621a      	str	r2, [r3, #32]
}
 8011b62:	bf00      	nop
 8011b64:	371c      	adds	r7, #28
 8011b66:	46bd      	mov	sp, r7
 8011b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6c:	4770      	bx	lr
 8011b6e:	bf00      	nop
 8011b70:	feff8fff 	.word	0xfeff8fff
 8011b74:	40010000 	.word	0x40010000
 8011b78:	40010400 	.word	0x40010400
 8011b7c:	40014000 	.word	0x40014000
 8011b80:	40014400 	.word	0x40014400
 8011b84:	40014800 	.word	0x40014800

08011b88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011b88:	b480      	push	{r7}
 8011b8a:	b087      	sub	sp, #28
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
 8011b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	6a1b      	ldr	r3, [r3, #32]
 8011b96:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	6a1b      	ldr	r3, [r3, #32]
 8011ba2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	685b      	ldr	r3, [r3, #4]
 8011ba8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011bb0:	68fa      	ldr	r2, [r7, #12]
 8011bb2:	4b21      	ldr	r3, [pc, #132]	@ (8011c38 <TIM_OC5_SetConfig+0xb0>)
 8011bb4:	4013      	ands	r3, r2
 8011bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011bb8:	683b      	ldr	r3, [r7, #0]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	68fa      	ldr	r2, [r7, #12]
 8011bbe:	4313      	orrs	r3, r2
 8011bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011bc2:	693b      	ldr	r3, [r7, #16]
 8011bc4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8011bc8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011bca:	683b      	ldr	r3, [r7, #0]
 8011bcc:	689b      	ldr	r3, [r3, #8]
 8011bce:	041b      	lsls	r3, r3, #16
 8011bd0:	693a      	ldr	r2, [r7, #16]
 8011bd2:	4313      	orrs	r3, r2
 8011bd4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	4a18      	ldr	r2, [pc, #96]	@ (8011c3c <TIM_OC5_SetConfig+0xb4>)
 8011bda:	4293      	cmp	r3, r2
 8011bdc:	d00f      	beq.n	8011bfe <TIM_OC5_SetConfig+0x76>
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	4a17      	ldr	r2, [pc, #92]	@ (8011c40 <TIM_OC5_SetConfig+0xb8>)
 8011be2:	4293      	cmp	r3, r2
 8011be4:	d00b      	beq.n	8011bfe <TIM_OC5_SetConfig+0x76>
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	4a16      	ldr	r2, [pc, #88]	@ (8011c44 <TIM_OC5_SetConfig+0xbc>)
 8011bea:	4293      	cmp	r3, r2
 8011bec:	d007      	beq.n	8011bfe <TIM_OC5_SetConfig+0x76>
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	4a15      	ldr	r2, [pc, #84]	@ (8011c48 <TIM_OC5_SetConfig+0xc0>)
 8011bf2:	4293      	cmp	r3, r2
 8011bf4:	d003      	beq.n	8011bfe <TIM_OC5_SetConfig+0x76>
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	4a14      	ldr	r2, [pc, #80]	@ (8011c4c <TIM_OC5_SetConfig+0xc4>)
 8011bfa:	4293      	cmp	r3, r2
 8011bfc:	d109      	bne.n	8011c12 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011bfe:	697b      	ldr	r3, [r7, #20]
 8011c00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011c04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	695b      	ldr	r3, [r3, #20]
 8011c0a:	021b      	lsls	r3, r3, #8
 8011c0c:	697a      	ldr	r2, [r7, #20]
 8011c0e:	4313      	orrs	r3, r2
 8011c10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	697a      	ldr	r2, [r7, #20]
 8011c16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	68fa      	ldr	r2, [r7, #12]
 8011c1c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	685a      	ldr	r2, [r3, #4]
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	693a      	ldr	r2, [r7, #16]
 8011c2a:	621a      	str	r2, [r3, #32]
}
 8011c2c:	bf00      	nop
 8011c2e:	371c      	adds	r7, #28
 8011c30:	46bd      	mov	sp, r7
 8011c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c36:	4770      	bx	lr
 8011c38:	fffeff8f 	.word	0xfffeff8f
 8011c3c:	40010000 	.word	0x40010000
 8011c40:	40010400 	.word	0x40010400
 8011c44:	40014000 	.word	0x40014000
 8011c48:	40014400 	.word	0x40014400
 8011c4c:	40014800 	.word	0x40014800

08011c50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011c50:	b480      	push	{r7}
 8011c52:	b087      	sub	sp, #28
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
 8011c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	6a1b      	ldr	r3, [r3, #32]
 8011c5e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	6a1b      	ldr	r3, [r3, #32]
 8011c6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	685b      	ldr	r3, [r3, #4]
 8011c70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011c78:	68fa      	ldr	r2, [r7, #12]
 8011c7a:	4b22      	ldr	r3, [pc, #136]	@ (8011d04 <TIM_OC6_SetConfig+0xb4>)
 8011c7c:	4013      	ands	r3, r2
 8011c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011c80:	683b      	ldr	r3, [r7, #0]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	021b      	lsls	r3, r3, #8
 8011c86:	68fa      	ldr	r2, [r7, #12]
 8011c88:	4313      	orrs	r3, r2
 8011c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011c8c:	693b      	ldr	r3, [r7, #16]
 8011c8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011c92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011c94:	683b      	ldr	r3, [r7, #0]
 8011c96:	689b      	ldr	r3, [r3, #8]
 8011c98:	051b      	lsls	r3, r3, #20
 8011c9a:	693a      	ldr	r2, [r7, #16]
 8011c9c:	4313      	orrs	r3, r2
 8011c9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	4a19      	ldr	r2, [pc, #100]	@ (8011d08 <TIM_OC6_SetConfig+0xb8>)
 8011ca4:	4293      	cmp	r3, r2
 8011ca6:	d00f      	beq.n	8011cc8 <TIM_OC6_SetConfig+0x78>
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	4a18      	ldr	r2, [pc, #96]	@ (8011d0c <TIM_OC6_SetConfig+0xbc>)
 8011cac:	4293      	cmp	r3, r2
 8011cae:	d00b      	beq.n	8011cc8 <TIM_OC6_SetConfig+0x78>
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	4a17      	ldr	r2, [pc, #92]	@ (8011d10 <TIM_OC6_SetConfig+0xc0>)
 8011cb4:	4293      	cmp	r3, r2
 8011cb6:	d007      	beq.n	8011cc8 <TIM_OC6_SetConfig+0x78>
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	4a16      	ldr	r2, [pc, #88]	@ (8011d14 <TIM_OC6_SetConfig+0xc4>)
 8011cbc:	4293      	cmp	r3, r2
 8011cbe:	d003      	beq.n	8011cc8 <TIM_OC6_SetConfig+0x78>
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	4a15      	ldr	r2, [pc, #84]	@ (8011d18 <TIM_OC6_SetConfig+0xc8>)
 8011cc4:	4293      	cmp	r3, r2
 8011cc6:	d109      	bne.n	8011cdc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011cc8:	697b      	ldr	r3, [r7, #20]
 8011cca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011cce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011cd0:	683b      	ldr	r3, [r7, #0]
 8011cd2:	695b      	ldr	r3, [r3, #20]
 8011cd4:	029b      	lsls	r3, r3, #10
 8011cd6:	697a      	ldr	r2, [r7, #20]
 8011cd8:	4313      	orrs	r3, r2
 8011cda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	697a      	ldr	r2, [r7, #20]
 8011ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	68fa      	ldr	r2, [r7, #12]
 8011ce6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011ce8:	683b      	ldr	r3, [r7, #0]
 8011cea:	685a      	ldr	r2, [r3, #4]
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	693a      	ldr	r2, [r7, #16]
 8011cf4:	621a      	str	r2, [r3, #32]
}
 8011cf6:	bf00      	nop
 8011cf8:	371c      	adds	r7, #28
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d00:	4770      	bx	lr
 8011d02:	bf00      	nop
 8011d04:	feff8fff 	.word	0xfeff8fff
 8011d08:	40010000 	.word	0x40010000
 8011d0c:	40010400 	.word	0x40010400
 8011d10:	40014000 	.word	0x40014000
 8011d14:	40014400 	.word	0x40014400
 8011d18:	40014800 	.word	0x40014800

08011d1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011d1c:	b480      	push	{r7}
 8011d1e:	b087      	sub	sp, #28
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	60f8      	str	r0, [r7, #12]
 8011d24:	60b9      	str	r1, [r7, #8]
 8011d26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011d28:	68bb      	ldr	r3, [r7, #8]
 8011d2a:	f003 031f 	and.w	r3, r3, #31
 8011d2e:	2201      	movs	r2, #1
 8011d30:	fa02 f303 	lsl.w	r3, r2, r3
 8011d34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	6a1a      	ldr	r2, [r3, #32]
 8011d3a:	697b      	ldr	r3, [r7, #20]
 8011d3c:	43db      	mvns	r3, r3
 8011d3e:	401a      	ands	r2, r3
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	6a1a      	ldr	r2, [r3, #32]
 8011d48:	68bb      	ldr	r3, [r7, #8]
 8011d4a:	f003 031f 	and.w	r3, r3, #31
 8011d4e:	6879      	ldr	r1, [r7, #4]
 8011d50:	fa01 f303 	lsl.w	r3, r1, r3
 8011d54:	431a      	orrs	r2, r3
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	621a      	str	r2, [r3, #32]
}
 8011d5a:	bf00      	nop
 8011d5c:	371c      	adds	r7, #28
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d64:	4770      	bx	lr
	...

08011d68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011d68:	b480      	push	{r7}
 8011d6a:	b085      	sub	sp, #20
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
 8011d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011d78:	2b01      	cmp	r3, #1
 8011d7a:	d101      	bne.n	8011d80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011d7c:	2302      	movs	r3, #2
 8011d7e:	e077      	b.n	8011e70 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	2201      	movs	r2, #1
 8011d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	2202      	movs	r2, #2
 8011d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	685b      	ldr	r3, [r3, #4]
 8011d96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	689b      	ldr	r3, [r3, #8]
 8011d9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	4a35      	ldr	r2, [pc, #212]	@ (8011e7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011da6:	4293      	cmp	r3, r2
 8011da8:	d004      	beq.n	8011db4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	4a34      	ldr	r2, [pc, #208]	@ (8011e80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011db0:	4293      	cmp	r3, r2
 8011db2:	d108      	bne.n	8011dc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8011dba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	685b      	ldr	r3, [r3, #4]
 8011dc0:	68fa      	ldr	r2, [r7, #12]
 8011dc2:	4313      	orrs	r3, r2
 8011dc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011dcc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	68fa      	ldr	r2, [r7, #12]
 8011dd4:	4313      	orrs	r3, r2
 8011dd6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	68fa      	ldr	r2, [r7, #12]
 8011dde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	4a25      	ldr	r2, [pc, #148]	@ (8011e7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011de6:	4293      	cmp	r3, r2
 8011de8:	d02c      	beq.n	8011e44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011df2:	d027      	beq.n	8011e44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	4a22      	ldr	r2, [pc, #136]	@ (8011e84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8011dfa:	4293      	cmp	r3, r2
 8011dfc:	d022      	beq.n	8011e44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	4a21      	ldr	r2, [pc, #132]	@ (8011e88 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8011e04:	4293      	cmp	r3, r2
 8011e06:	d01d      	beq.n	8011e44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	4a1f      	ldr	r2, [pc, #124]	@ (8011e8c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8011e0e:	4293      	cmp	r3, r2
 8011e10:	d018      	beq.n	8011e44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	4a1a      	ldr	r2, [pc, #104]	@ (8011e80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011e18:	4293      	cmp	r3, r2
 8011e1a:	d013      	beq.n	8011e44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	4a1b      	ldr	r2, [pc, #108]	@ (8011e90 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8011e22:	4293      	cmp	r3, r2
 8011e24:	d00e      	beq.n	8011e44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	4a1a      	ldr	r2, [pc, #104]	@ (8011e94 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8011e2c:	4293      	cmp	r3, r2
 8011e2e:	d009      	beq.n	8011e44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	4a18      	ldr	r2, [pc, #96]	@ (8011e98 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8011e36:	4293      	cmp	r3, r2
 8011e38:	d004      	beq.n	8011e44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	4a17      	ldr	r2, [pc, #92]	@ (8011e9c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8011e40:	4293      	cmp	r3, r2
 8011e42:	d10c      	bne.n	8011e5e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011e44:	68bb      	ldr	r3, [r7, #8]
 8011e46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011e4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011e4c:	683b      	ldr	r3, [r7, #0]
 8011e4e:	689b      	ldr	r3, [r3, #8]
 8011e50:	68ba      	ldr	r2, [r7, #8]
 8011e52:	4313      	orrs	r3, r2
 8011e54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	68ba      	ldr	r2, [r7, #8]
 8011e5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	2201      	movs	r2, #1
 8011e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	2200      	movs	r2, #0
 8011e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8011e6e:	2300      	movs	r3, #0
}
 8011e70:	4618      	mov	r0, r3
 8011e72:	3714      	adds	r7, #20
 8011e74:	46bd      	mov	sp, r7
 8011e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7a:	4770      	bx	lr
 8011e7c:	40010000 	.word	0x40010000
 8011e80:	40010400 	.word	0x40010400
 8011e84:	40000400 	.word	0x40000400
 8011e88:	40000800 	.word	0x40000800
 8011e8c:	40000c00 	.word	0x40000c00
 8011e90:	40001800 	.word	0x40001800
 8011e94:	40014000 	.word	0x40014000
 8011e98:	4000e000 	.word	0x4000e000
 8011e9c:	4000e400 	.word	0x4000e400

08011ea0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011ea0:	b480      	push	{r7}
 8011ea2:	b083      	sub	sp, #12
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011ea8:	bf00      	nop
 8011eaa:	370c      	adds	r7, #12
 8011eac:	46bd      	mov	sp, r7
 8011eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb2:	4770      	bx	lr

08011eb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011eb4:	b480      	push	{r7}
 8011eb6:	b083      	sub	sp, #12
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011ebc:	bf00      	nop
 8011ebe:	370c      	adds	r7, #12
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec6:	4770      	bx	lr

08011ec8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011ec8:	b480      	push	{r7}
 8011eca:	b083      	sub	sp, #12
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011ed0:	bf00      	nop
 8011ed2:	370c      	adds	r7, #12
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eda:	4770      	bx	lr

08011edc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b082      	sub	sp, #8
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d101      	bne.n	8011eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011eea:	2301      	movs	r3, #1
 8011eec:	e042      	b.n	8011f74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d106      	bne.n	8011f06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	2200      	movs	r2, #0
 8011efc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011f00:	6878      	ldr	r0, [r7, #4]
 8011f02:	f7f1 fe35 	bl	8003b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	2224      	movs	r2, #36	@ 0x24
 8011f0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	681a      	ldr	r2, [r3, #0]
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	f022 0201 	bic.w	r2, r2, #1
 8011f1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011f1e:	6878      	ldr	r0, [r7, #4]
 8011f20:	f000 f82c 	bl	8011f7c <UART_SetConfig>
 8011f24:	4603      	mov	r3, r0
 8011f26:	2b01      	cmp	r3, #1
 8011f28:	d101      	bne.n	8011f2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8011f2a:	2301      	movs	r3, #1
 8011f2c:	e022      	b.n	8011f74 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d002      	beq.n	8011f3c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8011f36:	6878      	ldr	r0, [r7, #4]
 8011f38:	f000 fe8c 	bl	8012c54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	685a      	ldr	r2, [r3, #4]
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8011f4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	689a      	ldr	r2, [r3, #8]
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8011f5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	681a      	ldr	r2, [r3, #0]
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	f042 0201 	orr.w	r2, r2, #1
 8011f6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011f6c:	6878      	ldr	r0, [r7, #4]
 8011f6e:	f000 ff13 	bl	8012d98 <UART_CheckIdleState>
 8011f72:	4603      	mov	r3, r0
}
 8011f74:	4618      	mov	r0, r3
 8011f76:	3708      	adds	r7, #8
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	bd80      	pop	{r7, pc}

08011f7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011f7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011f80:	b092      	sub	sp, #72	@ 0x48
 8011f82:	af00      	add	r7, sp, #0
 8011f84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011f86:	2300      	movs	r3, #0
 8011f88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011f8c:	697b      	ldr	r3, [r7, #20]
 8011f8e:	689a      	ldr	r2, [r3, #8]
 8011f90:	697b      	ldr	r3, [r7, #20]
 8011f92:	691b      	ldr	r3, [r3, #16]
 8011f94:	431a      	orrs	r2, r3
 8011f96:	697b      	ldr	r3, [r7, #20]
 8011f98:	695b      	ldr	r3, [r3, #20]
 8011f9a:	431a      	orrs	r2, r3
 8011f9c:	697b      	ldr	r3, [r7, #20]
 8011f9e:	69db      	ldr	r3, [r3, #28]
 8011fa0:	4313      	orrs	r3, r2
 8011fa2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011fa4:	697b      	ldr	r3, [r7, #20]
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	681a      	ldr	r2, [r3, #0]
 8011faa:	4bbe      	ldr	r3, [pc, #760]	@ (80122a4 <UART_SetConfig+0x328>)
 8011fac:	4013      	ands	r3, r2
 8011fae:	697a      	ldr	r2, [r7, #20]
 8011fb0:	6812      	ldr	r2, [r2, #0]
 8011fb2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011fb4:	430b      	orrs	r3, r1
 8011fb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011fb8:	697b      	ldr	r3, [r7, #20]
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	685b      	ldr	r3, [r3, #4]
 8011fbe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8011fc2:	697b      	ldr	r3, [r7, #20]
 8011fc4:	68da      	ldr	r2, [r3, #12]
 8011fc6:	697b      	ldr	r3, [r7, #20]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	430a      	orrs	r2, r1
 8011fcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011fce:	697b      	ldr	r3, [r7, #20]
 8011fd0:	699b      	ldr	r3, [r3, #24]
 8011fd2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011fd4:	697b      	ldr	r3, [r7, #20]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	4ab3      	ldr	r2, [pc, #716]	@ (80122a8 <UART_SetConfig+0x32c>)
 8011fda:	4293      	cmp	r3, r2
 8011fdc:	d004      	beq.n	8011fe8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011fde:	697b      	ldr	r3, [r7, #20]
 8011fe0:	6a1b      	ldr	r3, [r3, #32]
 8011fe2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011fe4:	4313      	orrs	r3, r2
 8011fe6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011fe8:	697b      	ldr	r3, [r7, #20]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	689a      	ldr	r2, [r3, #8]
 8011fee:	4baf      	ldr	r3, [pc, #700]	@ (80122ac <UART_SetConfig+0x330>)
 8011ff0:	4013      	ands	r3, r2
 8011ff2:	697a      	ldr	r2, [r7, #20]
 8011ff4:	6812      	ldr	r2, [r2, #0]
 8011ff6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011ff8:	430b      	orrs	r3, r1
 8011ffa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011ffc:	697b      	ldr	r3, [r7, #20]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012002:	f023 010f 	bic.w	r1, r3, #15
 8012006:	697b      	ldr	r3, [r7, #20]
 8012008:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801200a:	697b      	ldr	r3, [r7, #20]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	430a      	orrs	r2, r1
 8012010:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012012:	697b      	ldr	r3, [r7, #20]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	4aa6      	ldr	r2, [pc, #664]	@ (80122b0 <UART_SetConfig+0x334>)
 8012018:	4293      	cmp	r3, r2
 801201a:	d177      	bne.n	801210c <UART_SetConfig+0x190>
 801201c:	4ba5      	ldr	r3, [pc, #660]	@ (80122b4 <UART_SetConfig+0x338>)
 801201e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012020:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012024:	2b28      	cmp	r3, #40	@ 0x28
 8012026:	d86d      	bhi.n	8012104 <UART_SetConfig+0x188>
 8012028:	a201      	add	r2, pc, #4	@ (adr r2, 8012030 <UART_SetConfig+0xb4>)
 801202a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801202e:	bf00      	nop
 8012030:	080120d5 	.word	0x080120d5
 8012034:	08012105 	.word	0x08012105
 8012038:	08012105 	.word	0x08012105
 801203c:	08012105 	.word	0x08012105
 8012040:	08012105 	.word	0x08012105
 8012044:	08012105 	.word	0x08012105
 8012048:	08012105 	.word	0x08012105
 801204c:	08012105 	.word	0x08012105
 8012050:	080120dd 	.word	0x080120dd
 8012054:	08012105 	.word	0x08012105
 8012058:	08012105 	.word	0x08012105
 801205c:	08012105 	.word	0x08012105
 8012060:	08012105 	.word	0x08012105
 8012064:	08012105 	.word	0x08012105
 8012068:	08012105 	.word	0x08012105
 801206c:	08012105 	.word	0x08012105
 8012070:	080120e5 	.word	0x080120e5
 8012074:	08012105 	.word	0x08012105
 8012078:	08012105 	.word	0x08012105
 801207c:	08012105 	.word	0x08012105
 8012080:	08012105 	.word	0x08012105
 8012084:	08012105 	.word	0x08012105
 8012088:	08012105 	.word	0x08012105
 801208c:	08012105 	.word	0x08012105
 8012090:	080120ed 	.word	0x080120ed
 8012094:	08012105 	.word	0x08012105
 8012098:	08012105 	.word	0x08012105
 801209c:	08012105 	.word	0x08012105
 80120a0:	08012105 	.word	0x08012105
 80120a4:	08012105 	.word	0x08012105
 80120a8:	08012105 	.word	0x08012105
 80120ac:	08012105 	.word	0x08012105
 80120b0:	080120f5 	.word	0x080120f5
 80120b4:	08012105 	.word	0x08012105
 80120b8:	08012105 	.word	0x08012105
 80120bc:	08012105 	.word	0x08012105
 80120c0:	08012105 	.word	0x08012105
 80120c4:	08012105 	.word	0x08012105
 80120c8:	08012105 	.word	0x08012105
 80120cc:	08012105 	.word	0x08012105
 80120d0:	080120fd 	.word	0x080120fd
 80120d4:	2301      	movs	r3, #1
 80120d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120da:	e326      	b.n	801272a <UART_SetConfig+0x7ae>
 80120dc:	2304      	movs	r3, #4
 80120de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120e2:	e322      	b.n	801272a <UART_SetConfig+0x7ae>
 80120e4:	2308      	movs	r3, #8
 80120e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120ea:	e31e      	b.n	801272a <UART_SetConfig+0x7ae>
 80120ec:	2310      	movs	r3, #16
 80120ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120f2:	e31a      	b.n	801272a <UART_SetConfig+0x7ae>
 80120f4:	2320      	movs	r3, #32
 80120f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120fa:	e316      	b.n	801272a <UART_SetConfig+0x7ae>
 80120fc:	2340      	movs	r3, #64	@ 0x40
 80120fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012102:	e312      	b.n	801272a <UART_SetConfig+0x7ae>
 8012104:	2380      	movs	r3, #128	@ 0x80
 8012106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801210a:	e30e      	b.n	801272a <UART_SetConfig+0x7ae>
 801210c:	697b      	ldr	r3, [r7, #20]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	4a69      	ldr	r2, [pc, #420]	@ (80122b8 <UART_SetConfig+0x33c>)
 8012112:	4293      	cmp	r3, r2
 8012114:	d130      	bne.n	8012178 <UART_SetConfig+0x1fc>
 8012116:	4b67      	ldr	r3, [pc, #412]	@ (80122b4 <UART_SetConfig+0x338>)
 8012118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801211a:	f003 0307 	and.w	r3, r3, #7
 801211e:	2b05      	cmp	r3, #5
 8012120:	d826      	bhi.n	8012170 <UART_SetConfig+0x1f4>
 8012122:	a201      	add	r2, pc, #4	@ (adr r2, 8012128 <UART_SetConfig+0x1ac>)
 8012124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012128:	08012141 	.word	0x08012141
 801212c:	08012149 	.word	0x08012149
 8012130:	08012151 	.word	0x08012151
 8012134:	08012159 	.word	0x08012159
 8012138:	08012161 	.word	0x08012161
 801213c:	08012169 	.word	0x08012169
 8012140:	2300      	movs	r3, #0
 8012142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012146:	e2f0      	b.n	801272a <UART_SetConfig+0x7ae>
 8012148:	2304      	movs	r3, #4
 801214a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801214e:	e2ec      	b.n	801272a <UART_SetConfig+0x7ae>
 8012150:	2308      	movs	r3, #8
 8012152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012156:	e2e8      	b.n	801272a <UART_SetConfig+0x7ae>
 8012158:	2310      	movs	r3, #16
 801215a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801215e:	e2e4      	b.n	801272a <UART_SetConfig+0x7ae>
 8012160:	2320      	movs	r3, #32
 8012162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012166:	e2e0      	b.n	801272a <UART_SetConfig+0x7ae>
 8012168:	2340      	movs	r3, #64	@ 0x40
 801216a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801216e:	e2dc      	b.n	801272a <UART_SetConfig+0x7ae>
 8012170:	2380      	movs	r3, #128	@ 0x80
 8012172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012176:	e2d8      	b.n	801272a <UART_SetConfig+0x7ae>
 8012178:	697b      	ldr	r3, [r7, #20]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	4a4f      	ldr	r2, [pc, #316]	@ (80122bc <UART_SetConfig+0x340>)
 801217e:	4293      	cmp	r3, r2
 8012180:	d130      	bne.n	80121e4 <UART_SetConfig+0x268>
 8012182:	4b4c      	ldr	r3, [pc, #304]	@ (80122b4 <UART_SetConfig+0x338>)
 8012184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012186:	f003 0307 	and.w	r3, r3, #7
 801218a:	2b05      	cmp	r3, #5
 801218c:	d826      	bhi.n	80121dc <UART_SetConfig+0x260>
 801218e:	a201      	add	r2, pc, #4	@ (adr r2, 8012194 <UART_SetConfig+0x218>)
 8012190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012194:	080121ad 	.word	0x080121ad
 8012198:	080121b5 	.word	0x080121b5
 801219c:	080121bd 	.word	0x080121bd
 80121a0:	080121c5 	.word	0x080121c5
 80121a4:	080121cd 	.word	0x080121cd
 80121a8:	080121d5 	.word	0x080121d5
 80121ac:	2300      	movs	r3, #0
 80121ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80121b2:	e2ba      	b.n	801272a <UART_SetConfig+0x7ae>
 80121b4:	2304      	movs	r3, #4
 80121b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80121ba:	e2b6      	b.n	801272a <UART_SetConfig+0x7ae>
 80121bc:	2308      	movs	r3, #8
 80121be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80121c2:	e2b2      	b.n	801272a <UART_SetConfig+0x7ae>
 80121c4:	2310      	movs	r3, #16
 80121c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80121ca:	e2ae      	b.n	801272a <UART_SetConfig+0x7ae>
 80121cc:	2320      	movs	r3, #32
 80121ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80121d2:	e2aa      	b.n	801272a <UART_SetConfig+0x7ae>
 80121d4:	2340      	movs	r3, #64	@ 0x40
 80121d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80121da:	e2a6      	b.n	801272a <UART_SetConfig+0x7ae>
 80121dc:	2380      	movs	r3, #128	@ 0x80
 80121de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80121e2:	e2a2      	b.n	801272a <UART_SetConfig+0x7ae>
 80121e4:	697b      	ldr	r3, [r7, #20]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	4a35      	ldr	r2, [pc, #212]	@ (80122c0 <UART_SetConfig+0x344>)
 80121ea:	4293      	cmp	r3, r2
 80121ec:	d130      	bne.n	8012250 <UART_SetConfig+0x2d4>
 80121ee:	4b31      	ldr	r3, [pc, #196]	@ (80122b4 <UART_SetConfig+0x338>)
 80121f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80121f2:	f003 0307 	and.w	r3, r3, #7
 80121f6:	2b05      	cmp	r3, #5
 80121f8:	d826      	bhi.n	8012248 <UART_SetConfig+0x2cc>
 80121fa:	a201      	add	r2, pc, #4	@ (adr r2, 8012200 <UART_SetConfig+0x284>)
 80121fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012200:	08012219 	.word	0x08012219
 8012204:	08012221 	.word	0x08012221
 8012208:	08012229 	.word	0x08012229
 801220c:	08012231 	.word	0x08012231
 8012210:	08012239 	.word	0x08012239
 8012214:	08012241 	.word	0x08012241
 8012218:	2300      	movs	r3, #0
 801221a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801221e:	e284      	b.n	801272a <UART_SetConfig+0x7ae>
 8012220:	2304      	movs	r3, #4
 8012222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012226:	e280      	b.n	801272a <UART_SetConfig+0x7ae>
 8012228:	2308      	movs	r3, #8
 801222a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801222e:	e27c      	b.n	801272a <UART_SetConfig+0x7ae>
 8012230:	2310      	movs	r3, #16
 8012232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012236:	e278      	b.n	801272a <UART_SetConfig+0x7ae>
 8012238:	2320      	movs	r3, #32
 801223a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801223e:	e274      	b.n	801272a <UART_SetConfig+0x7ae>
 8012240:	2340      	movs	r3, #64	@ 0x40
 8012242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012246:	e270      	b.n	801272a <UART_SetConfig+0x7ae>
 8012248:	2380      	movs	r3, #128	@ 0x80
 801224a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801224e:	e26c      	b.n	801272a <UART_SetConfig+0x7ae>
 8012250:	697b      	ldr	r3, [r7, #20]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	4a1b      	ldr	r2, [pc, #108]	@ (80122c4 <UART_SetConfig+0x348>)
 8012256:	4293      	cmp	r3, r2
 8012258:	d142      	bne.n	80122e0 <UART_SetConfig+0x364>
 801225a:	4b16      	ldr	r3, [pc, #88]	@ (80122b4 <UART_SetConfig+0x338>)
 801225c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801225e:	f003 0307 	and.w	r3, r3, #7
 8012262:	2b05      	cmp	r3, #5
 8012264:	d838      	bhi.n	80122d8 <UART_SetConfig+0x35c>
 8012266:	a201      	add	r2, pc, #4	@ (adr r2, 801226c <UART_SetConfig+0x2f0>)
 8012268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801226c:	08012285 	.word	0x08012285
 8012270:	0801228d 	.word	0x0801228d
 8012274:	08012295 	.word	0x08012295
 8012278:	0801229d 	.word	0x0801229d
 801227c:	080122c9 	.word	0x080122c9
 8012280:	080122d1 	.word	0x080122d1
 8012284:	2300      	movs	r3, #0
 8012286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801228a:	e24e      	b.n	801272a <UART_SetConfig+0x7ae>
 801228c:	2304      	movs	r3, #4
 801228e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012292:	e24a      	b.n	801272a <UART_SetConfig+0x7ae>
 8012294:	2308      	movs	r3, #8
 8012296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801229a:	e246      	b.n	801272a <UART_SetConfig+0x7ae>
 801229c:	2310      	movs	r3, #16
 801229e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80122a2:	e242      	b.n	801272a <UART_SetConfig+0x7ae>
 80122a4:	cfff69f3 	.word	0xcfff69f3
 80122a8:	58000c00 	.word	0x58000c00
 80122ac:	11fff4ff 	.word	0x11fff4ff
 80122b0:	40011000 	.word	0x40011000
 80122b4:	58024400 	.word	0x58024400
 80122b8:	40004400 	.word	0x40004400
 80122bc:	40004800 	.word	0x40004800
 80122c0:	40004c00 	.word	0x40004c00
 80122c4:	40005000 	.word	0x40005000
 80122c8:	2320      	movs	r3, #32
 80122ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80122ce:	e22c      	b.n	801272a <UART_SetConfig+0x7ae>
 80122d0:	2340      	movs	r3, #64	@ 0x40
 80122d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80122d6:	e228      	b.n	801272a <UART_SetConfig+0x7ae>
 80122d8:	2380      	movs	r3, #128	@ 0x80
 80122da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80122de:	e224      	b.n	801272a <UART_SetConfig+0x7ae>
 80122e0:	697b      	ldr	r3, [r7, #20]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	4ab1      	ldr	r2, [pc, #708]	@ (80125ac <UART_SetConfig+0x630>)
 80122e6:	4293      	cmp	r3, r2
 80122e8:	d176      	bne.n	80123d8 <UART_SetConfig+0x45c>
 80122ea:	4bb1      	ldr	r3, [pc, #708]	@ (80125b0 <UART_SetConfig+0x634>)
 80122ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80122ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80122f2:	2b28      	cmp	r3, #40	@ 0x28
 80122f4:	d86c      	bhi.n	80123d0 <UART_SetConfig+0x454>
 80122f6:	a201      	add	r2, pc, #4	@ (adr r2, 80122fc <UART_SetConfig+0x380>)
 80122f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122fc:	080123a1 	.word	0x080123a1
 8012300:	080123d1 	.word	0x080123d1
 8012304:	080123d1 	.word	0x080123d1
 8012308:	080123d1 	.word	0x080123d1
 801230c:	080123d1 	.word	0x080123d1
 8012310:	080123d1 	.word	0x080123d1
 8012314:	080123d1 	.word	0x080123d1
 8012318:	080123d1 	.word	0x080123d1
 801231c:	080123a9 	.word	0x080123a9
 8012320:	080123d1 	.word	0x080123d1
 8012324:	080123d1 	.word	0x080123d1
 8012328:	080123d1 	.word	0x080123d1
 801232c:	080123d1 	.word	0x080123d1
 8012330:	080123d1 	.word	0x080123d1
 8012334:	080123d1 	.word	0x080123d1
 8012338:	080123d1 	.word	0x080123d1
 801233c:	080123b1 	.word	0x080123b1
 8012340:	080123d1 	.word	0x080123d1
 8012344:	080123d1 	.word	0x080123d1
 8012348:	080123d1 	.word	0x080123d1
 801234c:	080123d1 	.word	0x080123d1
 8012350:	080123d1 	.word	0x080123d1
 8012354:	080123d1 	.word	0x080123d1
 8012358:	080123d1 	.word	0x080123d1
 801235c:	080123b9 	.word	0x080123b9
 8012360:	080123d1 	.word	0x080123d1
 8012364:	080123d1 	.word	0x080123d1
 8012368:	080123d1 	.word	0x080123d1
 801236c:	080123d1 	.word	0x080123d1
 8012370:	080123d1 	.word	0x080123d1
 8012374:	080123d1 	.word	0x080123d1
 8012378:	080123d1 	.word	0x080123d1
 801237c:	080123c1 	.word	0x080123c1
 8012380:	080123d1 	.word	0x080123d1
 8012384:	080123d1 	.word	0x080123d1
 8012388:	080123d1 	.word	0x080123d1
 801238c:	080123d1 	.word	0x080123d1
 8012390:	080123d1 	.word	0x080123d1
 8012394:	080123d1 	.word	0x080123d1
 8012398:	080123d1 	.word	0x080123d1
 801239c:	080123c9 	.word	0x080123c9
 80123a0:	2301      	movs	r3, #1
 80123a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123a6:	e1c0      	b.n	801272a <UART_SetConfig+0x7ae>
 80123a8:	2304      	movs	r3, #4
 80123aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123ae:	e1bc      	b.n	801272a <UART_SetConfig+0x7ae>
 80123b0:	2308      	movs	r3, #8
 80123b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123b6:	e1b8      	b.n	801272a <UART_SetConfig+0x7ae>
 80123b8:	2310      	movs	r3, #16
 80123ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123be:	e1b4      	b.n	801272a <UART_SetConfig+0x7ae>
 80123c0:	2320      	movs	r3, #32
 80123c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123c6:	e1b0      	b.n	801272a <UART_SetConfig+0x7ae>
 80123c8:	2340      	movs	r3, #64	@ 0x40
 80123ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123ce:	e1ac      	b.n	801272a <UART_SetConfig+0x7ae>
 80123d0:	2380      	movs	r3, #128	@ 0x80
 80123d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123d6:	e1a8      	b.n	801272a <UART_SetConfig+0x7ae>
 80123d8:	697b      	ldr	r3, [r7, #20]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	4a75      	ldr	r2, [pc, #468]	@ (80125b4 <UART_SetConfig+0x638>)
 80123de:	4293      	cmp	r3, r2
 80123e0:	d130      	bne.n	8012444 <UART_SetConfig+0x4c8>
 80123e2:	4b73      	ldr	r3, [pc, #460]	@ (80125b0 <UART_SetConfig+0x634>)
 80123e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80123e6:	f003 0307 	and.w	r3, r3, #7
 80123ea:	2b05      	cmp	r3, #5
 80123ec:	d826      	bhi.n	801243c <UART_SetConfig+0x4c0>
 80123ee:	a201      	add	r2, pc, #4	@ (adr r2, 80123f4 <UART_SetConfig+0x478>)
 80123f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123f4:	0801240d 	.word	0x0801240d
 80123f8:	08012415 	.word	0x08012415
 80123fc:	0801241d 	.word	0x0801241d
 8012400:	08012425 	.word	0x08012425
 8012404:	0801242d 	.word	0x0801242d
 8012408:	08012435 	.word	0x08012435
 801240c:	2300      	movs	r3, #0
 801240e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012412:	e18a      	b.n	801272a <UART_SetConfig+0x7ae>
 8012414:	2304      	movs	r3, #4
 8012416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801241a:	e186      	b.n	801272a <UART_SetConfig+0x7ae>
 801241c:	2308      	movs	r3, #8
 801241e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012422:	e182      	b.n	801272a <UART_SetConfig+0x7ae>
 8012424:	2310      	movs	r3, #16
 8012426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801242a:	e17e      	b.n	801272a <UART_SetConfig+0x7ae>
 801242c:	2320      	movs	r3, #32
 801242e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012432:	e17a      	b.n	801272a <UART_SetConfig+0x7ae>
 8012434:	2340      	movs	r3, #64	@ 0x40
 8012436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801243a:	e176      	b.n	801272a <UART_SetConfig+0x7ae>
 801243c:	2380      	movs	r3, #128	@ 0x80
 801243e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012442:	e172      	b.n	801272a <UART_SetConfig+0x7ae>
 8012444:	697b      	ldr	r3, [r7, #20]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	4a5b      	ldr	r2, [pc, #364]	@ (80125b8 <UART_SetConfig+0x63c>)
 801244a:	4293      	cmp	r3, r2
 801244c:	d130      	bne.n	80124b0 <UART_SetConfig+0x534>
 801244e:	4b58      	ldr	r3, [pc, #352]	@ (80125b0 <UART_SetConfig+0x634>)
 8012450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012452:	f003 0307 	and.w	r3, r3, #7
 8012456:	2b05      	cmp	r3, #5
 8012458:	d826      	bhi.n	80124a8 <UART_SetConfig+0x52c>
 801245a:	a201      	add	r2, pc, #4	@ (adr r2, 8012460 <UART_SetConfig+0x4e4>)
 801245c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012460:	08012479 	.word	0x08012479
 8012464:	08012481 	.word	0x08012481
 8012468:	08012489 	.word	0x08012489
 801246c:	08012491 	.word	0x08012491
 8012470:	08012499 	.word	0x08012499
 8012474:	080124a1 	.word	0x080124a1
 8012478:	2300      	movs	r3, #0
 801247a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801247e:	e154      	b.n	801272a <UART_SetConfig+0x7ae>
 8012480:	2304      	movs	r3, #4
 8012482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012486:	e150      	b.n	801272a <UART_SetConfig+0x7ae>
 8012488:	2308      	movs	r3, #8
 801248a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801248e:	e14c      	b.n	801272a <UART_SetConfig+0x7ae>
 8012490:	2310      	movs	r3, #16
 8012492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012496:	e148      	b.n	801272a <UART_SetConfig+0x7ae>
 8012498:	2320      	movs	r3, #32
 801249a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801249e:	e144      	b.n	801272a <UART_SetConfig+0x7ae>
 80124a0:	2340      	movs	r3, #64	@ 0x40
 80124a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80124a6:	e140      	b.n	801272a <UART_SetConfig+0x7ae>
 80124a8:	2380      	movs	r3, #128	@ 0x80
 80124aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80124ae:	e13c      	b.n	801272a <UART_SetConfig+0x7ae>
 80124b0:	697b      	ldr	r3, [r7, #20]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	4a41      	ldr	r2, [pc, #260]	@ (80125bc <UART_SetConfig+0x640>)
 80124b6:	4293      	cmp	r3, r2
 80124b8:	f040 8082 	bne.w	80125c0 <UART_SetConfig+0x644>
 80124bc:	4b3c      	ldr	r3, [pc, #240]	@ (80125b0 <UART_SetConfig+0x634>)
 80124be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80124c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80124c4:	2b28      	cmp	r3, #40	@ 0x28
 80124c6:	d86d      	bhi.n	80125a4 <UART_SetConfig+0x628>
 80124c8:	a201      	add	r2, pc, #4	@ (adr r2, 80124d0 <UART_SetConfig+0x554>)
 80124ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124ce:	bf00      	nop
 80124d0:	08012575 	.word	0x08012575
 80124d4:	080125a5 	.word	0x080125a5
 80124d8:	080125a5 	.word	0x080125a5
 80124dc:	080125a5 	.word	0x080125a5
 80124e0:	080125a5 	.word	0x080125a5
 80124e4:	080125a5 	.word	0x080125a5
 80124e8:	080125a5 	.word	0x080125a5
 80124ec:	080125a5 	.word	0x080125a5
 80124f0:	0801257d 	.word	0x0801257d
 80124f4:	080125a5 	.word	0x080125a5
 80124f8:	080125a5 	.word	0x080125a5
 80124fc:	080125a5 	.word	0x080125a5
 8012500:	080125a5 	.word	0x080125a5
 8012504:	080125a5 	.word	0x080125a5
 8012508:	080125a5 	.word	0x080125a5
 801250c:	080125a5 	.word	0x080125a5
 8012510:	08012585 	.word	0x08012585
 8012514:	080125a5 	.word	0x080125a5
 8012518:	080125a5 	.word	0x080125a5
 801251c:	080125a5 	.word	0x080125a5
 8012520:	080125a5 	.word	0x080125a5
 8012524:	080125a5 	.word	0x080125a5
 8012528:	080125a5 	.word	0x080125a5
 801252c:	080125a5 	.word	0x080125a5
 8012530:	0801258d 	.word	0x0801258d
 8012534:	080125a5 	.word	0x080125a5
 8012538:	080125a5 	.word	0x080125a5
 801253c:	080125a5 	.word	0x080125a5
 8012540:	080125a5 	.word	0x080125a5
 8012544:	080125a5 	.word	0x080125a5
 8012548:	080125a5 	.word	0x080125a5
 801254c:	080125a5 	.word	0x080125a5
 8012550:	08012595 	.word	0x08012595
 8012554:	080125a5 	.word	0x080125a5
 8012558:	080125a5 	.word	0x080125a5
 801255c:	080125a5 	.word	0x080125a5
 8012560:	080125a5 	.word	0x080125a5
 8012564:	080125a5 	.word	0x080125a5
 8012568:	080125a5 	.word	0x080125a5
 801256c:	080125a5 	.word	0x080125a5
 8012570:	0801259d 	.word	0x0801259d
 8012574:	2301      	movs	r3, #1
 8012576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801257a:	e0d6      	b.n	801272a <UART_SetConfig+0x7ae>
 801257c:	2304      	movs	r3, #4
 801257e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012582:	e0d2      	b.n	801272a <UART_SetConfig+0x7ae>
 8012584:	2308      	movs	r3, #8
 8012586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801258a:	e0ce      	b.n	801272a <UART_SetConfig+0x7ae>
 801258c:	2310      	movs	r3, #16
 801258e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012592:	e0ca      	b.n	801272a <UART_SetConfig+0x7ae>
 8012594:	2320      	movs	r3, #32
 8012596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801259a:	e0c6      	b.n	801272a <UART_SetConfig+0x7ae>
 801259c:	2340      	movs	r3, #64	@ 0x40
 801259e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80125a2:	e0c2      	b.n	801272a <UART_SetConfig+0x7ae>
 80125a4:	2380      	movs	r3, #128	@ 0x80
 80125a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80125aa:	e0be      	b.n	801272a <UART_SetConfig+0x7ae>
 80125ac:	40011400 	.word	0x40011400
 80125b0:	58024400 	.word	0x58024400
 80125b4:	40007800 	.word	0x40007800
 80125b8:	40007c00 	.word	0x40007c00
 80125bc:	40011800 	.word	0x40011800
 80125c0:	697b      	ldr	r3, [r7, #20]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	4aad      	ldr	r2, [pc, #692]	@ (801287c <UART_SetConfig+0x900>)
 80125c6:	4293      	cmp	r3, r2
 80125c8:	d176      	bne.n	80126b8 <UART_SetConfig+0x73c>
 80125ca:	4bad      	ldr	r3, [pc, #692]	@ (8012880 <UART_SetConfig+0x904>)
 80125cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80125ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80125d2:	2b28      	cmp	r3, #40	@ 0x28
 80125d4:	d86c      	bhi.n	80126b0 <UART_SetConfig+0x734>
 80125d6:	a201      	add	r2, pc, #4	@ (adr r2, 80125dc <UART_SetConfig+0x660>)
 80125d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125dc:	08012681 	.word	0x08012681
 80125e0:	080126b1 	.word	0x080126b1
 80125e4:	080126b1 	.word	0x080126b1
 80125e8:	080126b1 	.word	0x080126b1
 80125ec:	080126b1 	.word	0x080126b1
 80125f0:	080126b1 	.word	0x080126b1
 80125f4:	080126b1 	.word	0x080126b1
 80125f8:	080126b1 	.word	0x080126b1
 80125fc:	08012689 	.word	0x08012689
 8012600:	080126b1 	.word	0x080126b1
 8012604:	080126b1 	.word	0x080126b1
 8012608:	080126b1 	.word	0x080126b1
 801260c:	080126b1 	.word	0x080126b1
 8012610:	080126b1 	.word	0x080126b1
 8012614:	080126b1 	.word	0x080126b1
 8012618:	080126b1 	.word	0x080126b1
 801261c:	08012691 	.word	0x08012691
 8012620:	080126b1 	.word	0x080126b1
 8012624:	080126b1 	.word	0x080126b1
 8012628:	080126b1 	.word	0x080126b1
 801262c:	080126b1 	.word	0x080126b1
 8012630:	080126b1 	.word	0x080126b1
 8012634:	080126b1 	.word	0x080126b1
 8012638:	080126b1 	.word	0x080126b1
 801263c:	08012699 	.word	0x08012699
 8012640:	080126b1 	.word	0x080126b1
 8012644:	080126b1 	.word	0x080126b1
 8012648:	080126b1 	.word	0x080126b1
 801264c:	080126b1 	.word	0x080126b1
 8012650:	080126b1 	.word	0x080126b1
 8012654:	080126b1 	.word	0x080126b1
 8012658:	080126b1 	.word	0x080126b1
 801265c:	080126a1 	.word	0x080126a1
 8012660:	080126b1 	.word	0x080126b1
 8012664:	080126b1 	.word	0x080126b1
 8012668:	080126b1 	.word	0x080126b1
 801266c:	080126b1 	.word	0x080126b1
 8012670:	080126b1 	.word	0x080126b1
 8012674:	080126b1 	.word	0x080126b1
 8012678:	080126b1 	.word	0x080126b1
 801267c:	080126a9 	.word	0x080126a9
 8012680:	2301      	movs	r3, #1
 8012682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012686:	e050      	b.n	801272a <UART_SetConfig+0x7ae>
 8012688:	2304      	movs	r3, #4
 801268a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801268e:	e04c      	b.n	801272a <UART_SetConfig+0x7ae>
 8012690:	2308      	movs	r3, #8
 8012692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012696:	e048      	b.n	801272a <UART_SetConfig+0x7ae>
 8012698:	2310      	movs	r3, #16
 801269a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801269e:	e044      	b.n	801272a <UART_SetConfig+0x7ae>
 80126a0:	2320      	movs	r3, #32
 80126a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126a6:	e040      	b.n	801272a <UART_SetConfig+0x7ae>
 80126a8:	2340      	movs	r3, #64	@ 0x40
 80126aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126ae:	e03c      	b.n	801272a <UART_SetConfig+0x7ae>
 80126b0:	2380      	movs	r3, #128	@ 0x80
 80126b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126b6:	e038      	b.n	801272a <UART_SetConfig+0x7ae>
 80126b8:	697b      	ldr	r3, [r7, #20]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	4a71      	ldr	r2, [pc, #452]	@ (8012884 <UART_SetConfig+0x908>)
 80126be:	4293      	cmp	r3, r2
 80126c0:	d130      	bne.n	8012724 <UART_SetConfig+0x7a8>
 80126c2:	4b6f      	ldr	r3, [pc, #444]	@ (8012880 <UART_SetConfig+0x904>)
 80126c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80126c6:	f003 0307 	and.w	r3, r3, #7
 80126ca:	2b05      	cmp	r3, #5
 80126cc:	d826      	bhi.n	801271c <UART_SetConfig+0x7a0>
 80126ce:	a201      	add	r2, pc, #4	@ (adr r2, 80126d4 <UART_SetConfig+0x758>)
 80126d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126d4:	080126ed 	.word	0x080126ed
 80126d8:	080126f5 	.word	0x080126f5
 80126dc:	080126fd 	.word	0x080126fd
 80126e0:	08012705 	.word	0x08012705
 80126e4:	0801270d 	.word	0x0801270d
 80126e8:	08012715 	.word	0x08012715
 80126ec:	2302      	movs	r3, #2
 80126ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126f2:	e01a      	b.n	801272a <UART_SetConfig+0x7ae>
 80126f4:	2304      	movs	r3, #4
 80126f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126fa:	e016      	b.n	801272a <UART_SetConfig+0x7ae>
 80126fc:	2308      	movs	r3, #8
 80126fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012702:	e012      	b.n	801272a <UART_SetConfig+0x7ae>
 8012704:	2310      	movs	r3, #16
 8012706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801270a:	e00e      	b.n	801272a <UART_SetConfig+0x7ae>
 801270c:	2320      	movs	r3, #32
 801270e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012712:	e00a      	b.n	801272a <UART_SetConfig+0x7ae>
 8012714:	2340      	movs	r3, #64	@ 0x40
 8012716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801271a:	e006      	b.n	801272a <UART_SetConfig+0x7ae>
 801271c:	2380      	movs	r3, #128	@ 0x80
 801271e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012722:	e002      	b.n	801272a <UART_SetConfig+0x7ae>
 8012724:	2380      	movs	r3, #128	@ 0x80
 8012726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801272a:	697b      	ldr	r3, [r7, #20]
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	4a55      	ldr	r2, [pc, #340]	@ (8012884 <UART_SetConfig+0x908>)
 8012730:	4293      	cmp	r3, r2
 8012732:	f040 80f8 	bne.w	8012926 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8012736:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801273a:	2b20      	cmp	r3, #32
 801273c:	dc46      	bgt.n	80127cc <UART_SetConfig+0x850>
 801273e:	2b02      	cmp	r3, #2
 8012740:	db75      	blt.n	801282e <UART_SetConfig+0x8b2>
 8012742:	3b02      	subs	r3, #2
 8012744:	2b1e      	cmp	r3, #30
 8012746:	d872      	bhi.n	801282e <UART_SetConfig+0x8b2>
 8012748:	a201      	add	r2, pc, #4	@ (adr r2, 8012750 <UART_SetConfig+0x7d4>)
 801274a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801274e:	bf00      	nop
 8012750:	080127d3 	.word	0x080127d3
 8012754:	0801282f 	.word	0x0801282f
 8012758:	080127db 	.word	0x080127db
 801275c:	0801282f 	.word	0x0801282f
 8012760:	0801282f 	.word	0x0801282f
 8012764:	0801282f 	.word	0x0801282f
 8012768:	080127eb 	.word	0x080127eb
 801276c:	0801282f 	.word	0x0801282f
 8012770:	0801282f 	.word	0x0801282f
 8012774:	0801282f 	.word	0x0801282f
 8012778:	0801282f 	.word	0x0801282f
 801277c:	0801282f 	.word	0x0801282f
 8012780:	0801282f 	.word	0x0801282f
 8012784:	0801282f 	.word	0x0801282f
 8012788:	080127fb 	.word	0x080127fb
 801278c:	0801282f 	.word	0x0801282f
 8012790:	0801282f 	.word	0x0801282f
 8012794:	0801282f 	.word	0x0801282f
 8012798:	0801282f 	.word	0x0801282f
 801279c:	0801282f 	.word	0x0801282f
 80127a0:	0801282f 	.word	0x0801282f
 80127a4:	0801282f 	.word	0x0801282f
 80127a8:	0801282f 	.word	0x0801282f
 80127ac:	0801282f 	.word	0x0801282f
 80127b0:	0801282f 	.word	0x0801282f
 80127b4:	0801282f 	.word	0x0801282f
 80127b8:	0801282f 	.word	0x0801282f
 80127bc:	0801282f 	.word	0x0801282f
 80127c0:	0801282f 	.word	0x0801282f
 80127c4:	0801282f 	.word	0x0801282f
 80127c8:	08012821 	.word	0x08012821
 80127cc:	2b40      	cmp	r3, #64	@ 0x40
 80127ce:	d02a      	beq.n	8012826 <UART_SetConfig+0x8aa>
 80127d0:	e02d      	b.n	801282e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80127d2:	f7fa febd 	bl	800d550 <HAL_RCCEx_GetD3PCLK1Freq>
 80127d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80127d8:	e02f      	b.n	801283a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80127da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80127de:	4618      	mov	r0, r3
 80127e0:	f7fa fecc 	bl	800d57c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80127e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80127e8:	e027      	b.n	801283a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80127ea:	f107 0318 	add.w	r3, r7, #24
 80127ee:	4618      	mov	r0, r3
 80127f0:	f7fb f818 	bl	800d824 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80127f4:	69fb      	ldr	r3, [r7, #28]
 80127f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80127f8:	e01f      	b.n	801283a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80127fa:	4b21      	ldr	r3, [pc, #132]	@ (8012880 <UART_SetConfig+0x904>)
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	f003 0320 	and.w	r3, r3, #32
 8012802:	2b00      	cmp	r3, #0
 8012804:	d009      	beq.n	801281a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012806:	4b1e      	ldr	r3, [pc, #120]	@ (8012880 <UART_SetConfig+0x904>)
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	08db      	lsrs	r3, r3, #3
 801280c:	f003 0303 	and.w	r3, r3, #3
 8012810:	4a1d      	ldr	r2, [pc, #116]	@ (8012888 <UART_SetConfig+0x90c>)
 8012812:	fa22 f303 	lsr.w	r3, r2, r3
 8012816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012818:	e00f      	b.n	801283a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801281a:	4b1b      	ldr	r3, [pc, #108]	@ (8012888 <UART_SetConfig+0x90c>)
 801281c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801281e:	e00c      	b.n	801283a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012820:	4b1a      	ldr	r3, [pc, #104]	@ (801288c <UART_SetConfig+0x910>)
 8012822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012824:	e009      	b.n	801283a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012826:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801282a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801282c:	e005      	b.n	801283a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801282e:	2300      	movs	r3, #0
 8012830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8012832:	2301      	movs	r3, #1
 8012834:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8012838:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801283a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801283c:	2b00      	cmp	r3, #0
 801283e:	f000 81ee 	beq.w	8012c1e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012842:	697b      	ldr	r3, [r7, #20]
 8012844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012846:	4a12      	ldr	r2, [pc, #72]	@ (8012890 <UART_SetConfig+0x914>)
 8012848:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801284c:	461a      	mov	r2, r3
 801284e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012850:	fbb3 f3f2 	udiv	r3, r3, r2
 8012854:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012856:	697b      	ldr	r3, [r7, #20]
 8012858:	685a      	ldr	r2, [r3, #4]
 801285a:	4613      	mov	r3, r2
 801285c:	005b      	lsls	r3, r3, #1
 801285e:	4413      	add	r3, r2
 8012860:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012862:	429a      	cmp	r2, r3
 8012864:	d305      	bcc.n	8012872 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8012866:	697b      	ldr	r3, [r7, #20]
 8012868:	685b      	ldr	r3, [r3, #4]
 801286a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801286c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801286e:	429a      	cmp	r2, r3
 8012870:	d910      	bls.n	8012894 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8012872:	2301      	movs	r3, #1
 8012874:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012878:	e1d1      	b.n	8012c1e <UART_SetConfig+0xca2>
 801287a:	bf00      	nop
 801287c:	40011c00 	.word	0x40011c00
 8012880:	58024400 	.word	0x58024400
 8012884:	58000c00 	.word	0x58000c00
 8012888:	03d09000 	.word	0x03d09000
 801288c:	003d0900 	.word	0x003d0900
 8012890:	0802036c 	.word	0x0802036c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012896:	2200      	movs	r2, #0
 8012898:	60bb      	str	r3, [r7, #8]
 801289a:	60fa      	str	r2, [r7, #12]
 801289c:	697b      	ldr	r3, [r7, #20]
 801289e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128a0:	4ac0      	ldr	r2, [pc, #768]	@ (8012ba4 <UART_SetConfig+0xc28>)
 80128a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80128a6:	b29b      	uxth	r3, r3
 80128a8:	2200      	movs	r2, #0
 80128aa:	603b      	str	r3, [r7, #0]
 80128ac:	607a      	str	r2, [r7, #4]
 80128ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80128b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80128b6:	f7ed ff49 	bl	800074c <__aeabi_uldivmod>
 80128ba:	4602      	mov	r2, r0
 80128bc:	460b      	mov	r3, r1
 80128be:	4610      	mov	r0, r2
 80128c0:	4619      	mov	r1, r3
 80128c2:	f04f 0200 	mov.w	r2, #0
 80128c6:	f04f 0300 	mov.w	r3, #0
 80128ca:	020b      	lsls	r3, r1, #8
 80128cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80128d0:	0202      	lsls	r2, r0, #8
 80128d2:	6979      	ldr	r1, [r7, #20]
 80128d4:	6849      	ldr	r1, [r1, #4]
 80128d6:	0849      	lsrs	r1, r1, #1
 80128d8:	2000      	movs	r0, #0
 80128da:	460c      	mov	r4, r1
 80128dc:	4605      	mov	r5, r0
 80128de:	eb12 0804 	adds.w	r8, r2, r4
 80128e2:	eb43 0905 	adc.w	r9, r3, r5
 80128e6:	697b      	ldr	r3, [r7, #20]
 80128e8:	685b      	ldr	r3, [r3, #4]
 80128ea:	2200      	movs	r2, #0
 80128ec:	469a      	mov	sl, r3
 80128ee:	4693      	mov	fp, r2
 80128f0:	4652      	mov	r2, sl
 80128f2:	465b      	mov	r3, fp
 80128f4:	4640      	mov	r0, r8
 80128f6:	4649      	mov	r1, r9
 80128f8:	f7ed ff28 	bl	800074c <__aeabi_uldivmod>
 80128fc:	4602      	mov	r2, r0
 80128fe:	460b      	mov	r3, r1
 8012900:	4613      	mov	r3, r2
 8012902:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012906:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801290a:	d308      	bcc.n	801291e <UART_SetConfig+0x9a2>
 801290c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801290e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012912:	d204      	bcs.n	801291e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8012914:	697b      	ldr	r3, [r7, #20]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801291a:	60da      	str	r2, [r3, #12]
 801291c:	e17f      	b.n	8012c1e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801291e:	2301      	movs	r3, #1
 8012920:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012924:	e17b      	b.n	8012c1e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012926:	697b      	ldr	r3, [r7, #20]
 8012928:	69db      	ldr	r3, [r3, #28]
 801292a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801292e:	f040 80bd 	bne.w	8012aac <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8012932:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012936:	2b20      	cmp	r3, #32
 8012938:	dc48      	bgt.n	80129cc <UART_SetConfig+0xa50>
 801293a:	2b00      	cmp	r3, #0
 801293c:	db7b      	blt.n	8012a36 <UART_SetConfig+0xaba>
 801293e:	2b20      	cmp	r3, #32
 8012940:	d879      	bhi.n	8012a36 <UART_SetConfig+0xaba>
 8012942:	a201      	add	r2, pc, #4	@ (adr r2, 8012948 <UART_SetConfig+0x9cc>)
 8012944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012948:	080129d3 	.word	0x080129d3
 801294c:	080129db 	.word	0x080129db
 8012950:	08012a37 	.word	0x08012a37
 8012954:	08012a37 	.word	0x08012a37
 8012958:	080129e3 	.word	0x080129e3
 801295c:	08012a37 	.word	0x08012a37
 8012960:	08012a37 	.word	0x08012a37
 8012964:	08012a37 	.word	0x08012a37
 8012968:	080129f3 	.word	0x080129f3
 801296c:	08012a37 	.word	0x08012a37
 8012970:	08012a37 	.word	0x08012a37
 8012974:	08012a37 	.word	0x08012a37
 8012978:	08012a37 	.word	0x08012a37
 801297c:	08012a37 	.word	0x08012a37
 8012980:	08012a37 	.word	0x08012a37
 8012984:	08012a37 	.word	0x08012a37
 8012988:	08012a03 	.word	0x08012a03
 801298c:	08012a37 	.word	0x08012a37
 8012990:	08012a37 	.word	0x08012a37
 8012994:	08012a37 	.word	0x08012a37
 8012998:	08012a37 	.word	0x08012a37
 801299c:	08012a37 	.word	0x08012a37
 80129a0:	08012a37 	.word	0x08012a37
 80129a4:	08012a37 	.word	0x08012a37
 80129a8:	08012a37 	.word	0x08012a37
 80129ac:	08012a37 	.word	0x08012a37
 80129b0:	08012a37 	.word	0x08012a37
 80129b4:	08012a37 	.word	0x08012a37
 80129b8:	08012a37 	.word	0x08012a37
 80129bc:	08012a37 	.word	0x08012a37
 80129c0:	08012a37 	.word	0x08012a37
 80129c4:	08012a37 	.word	0x08012a37
 80129c8:	08012a29 	.word	0x08012a29
 80129cc:	2b40      	cmp	r3, #64	@ 0x40
 80129ce:	d02e      	beq.n	8012a2e <UART_SetConfig+0xab2>
 80129d0:	e031      	b.n	8012a36 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80129d2:	f7f8 ff1f 	bl	800b814 <HAL_RCC_GetPCLK1Freq>
 80129d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80129d8:	e033      	b.n	8012a42 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80129da:	f7f8 ff31 	bl	800b840 <HAL_RCC_GetPCLK2Freq>
 80129de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80129e0:	e02f      	b.n	8012a42 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80129e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80129e6:	4618      	mov	r0, r3
 80129e8:	f7fa fdc8 	bl	800d57c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80129ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80129f0:	e027      	b.n	8012a42 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80129f2:	f107 0318 	add.w	r3, r7, #24
 80129f6:	4618      	mov	r0, r3
 80129f8:	f7fa ff14 	bl	800d824 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80129fc:	69fb      	ldr	r3, [r7, #28]
 80129fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012a00:	e01f      	b.n	8012a42 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012a02:	4b69      	ldr	r3, [pc, #420]	@ (8012ba8 <UART_SetConfig+0xc2c>)
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	f003 0320 	and.w	r3, r3, #32
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d009      	beq.n	8012a22 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012a0e:	4b66      	ldr	r3, [pc, #408]	@ (8012ba8 <UART_SetConfig+0xc2c>)
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	08db      	lsrs	r3, r3, #3
 8012a14:	f003 0303 	and.w	r3, r3, #3
 8012a18:	4a64      	ldr	r2, [pc, #400]	@ (8012bac <UART_SetConfig+0xc30>)
 8012a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8012a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012a20:	e00f      	b.n	8012a42 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8012a22:	4b62      	ldr	r3, [pc, #392]	@ (8012bac <UART_SetConfig+0xc30>)
 8012a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012a26:	e00c      	b.n	8012a42 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012a28:	4b61      	ldr	r3, [pc, #388]	@ (8012bb0 <UART_SetConfig+0xc34>)
 8012a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012a2c:	e009      	b.n	8012a42 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012a2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012a34:	e005      	b.n	8012a42 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8012a36:	2300      	movs	r3, #0
 8012a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8012a3a:	2301      	movs	r3, #1
 8012a3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8012a40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	f000 80ea 	beq.w	8012c1e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012a4a:	697b      	ldr	r3, [r7, #20]
 8012a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a4e:	4a55      	ldr	r2, [pc, #340]	@ (8012ba4 <UART_SetConfig+0xc28>)
 8012a50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012a54:	461a      	mov	r2, r3
 8012a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a58:	fbb3 f3f2 	udiv	r3, r3, r2
 8012a5c:	005a      	lsls	r2, r3, #1
 8012a5e:	697b      	ldr	r3, [r7, #20]
 8012a60:	685b      	ldr	r3, [r3, #4]
 8012a62:	085b      	lsrs	r3, r3, #1
 8012a64:	441a      	add	r2, r3
 8012a66:	697b      	ldr	r3, [r7, #20]
 8012a68:	685b      	ldr	r3, [r3, #4]
 8012a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8012a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a72:	2b0f      	cmp	r3, #15
 8012a74:	d916      	bls.n	8012aa4 <UART_SetConfig+0xb28>
 8012a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012a7c:	d212      	bcs.n	8012aa4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a80:	b29b      	uxth	r3, r3
 8012a82:	f023 030f 	bic.w	r3, r3, #15
 8012a86:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a8a:	085b      	lsrs	r3, r3, #1
 8012a8c:	b29b      	uxth	r3, r3
 8012a8e:	f003 0307 	and.w	r3, r3, #7
 8012a92:	b29a      	uxth	r2, r3
 8012a94:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012a96:	4313      	orrs	r3, r2
 8012a98:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8012a9a:	697b      	ldr	r3, [r7, #20]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8012aa0:	60da      	str	r2, [r3, #12]
 8012aa2:	e0bc      	b.n	8012c1e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8012aa4:	2301      	movs	r3, #1
 8012aa6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012aaa:	e0b8      	b.n	8012c1e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012aac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012ab0:	2b20      	cmp	r3, #32
 8012ab2:	dc4b      	bgt.n	8012b4c <UART_SetConfig+0xbd0>
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	f2c0 8087 	blt.w	8012bc8 <UART_SetConfig+0xc4c>
 8012aba:	2b20      	cmp	r3, #32
 8012abc:	f200 8084 	bhi.w	8012bc8 <UART_SetConfig+0xc4c>
 8012ac0:	a201      	add	r2, pc, #4	@ (adr r2, 8012ac8 <UART_SetConfig+0xb4c>)
 8012ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ac6:	bf00      	nop
 8012ac8:	08012b53 	.word	0x08012b53
 8012acc:	08012b5b 	.word	0x08012b5b
 8012ad0:	08012bc9 	.word	0x08012bc9
 8012ad4:	08012bc9 	.word	0x08012bc9
 8012ad8:	08012b63 	.word	0x08012b63
 8012adc:	08012bc9 	.word	0x08012bc9
 8012ae0:	08012bc9 	.word	0x08012bc9
 8012ae4:	08012bc9 	.word	0x08012bc9
 8012ae8:	08012b73 	.word	0x08012b73
 8012aec:	08012bc9 	.word	0x08012bc9
 8012af0:	08012bc9 	.word	0x08012bc9
 8012af4:	08012bc9 	.word	0x08012bc9
 8012af8:	08012bc9 	.word	0x08012bc9
 8012afc:	08012bc9 	.word	0x08012bc9
 8012b00:	08012bc9 	.word	0x08012bc9
 8012b04:	08012bc9 	.word	0x08012bc9
 8012b08:	08012b83 	.word	0x08012b83
 8012b0c:	08012bc9 	.word	0x08012bc9
 8012b10:	08012bc9 	.word	0x08012bc9
 8012b14:	08012bc9 	.word	0x08012bc9
 8012b18:	08012bc9 	.word	0x08012bc9
 8012b1c:	08012bc9 	.word	0x08012bc9
 8012b20:	08012bc9 	.word	0x08012bc9
 8012b24:	08012bc9 	.word	0x08012bc9
 8012b28:	08012bc9 	.word	0x08012bc9
 8012b2c:	08012bc9 	.word	0x08012bc9
 8012b30:	08012bc9 	.word	0x08012bc9
 8012b34:	08012bc9 	.word	0x08012bc9
 8012b38:	08012bc9 	.word	0x08012bc9
 8012b3c:	08012bc9 	.word	0x08012bc9
 8012b40:	08012bc9 	.word	0x08012bc9
 8012b44:	08012bc9 	.word	0x08012bc9
 8012b48:	08012bbb 	.word	0x08012bbb
 8012b4c:	2b40      	cmp	r3, #64	@ 0x40
 8012b4e:	d037      	beq.n	8012bc0 <UART_SetConfig+0xc44>
 8012b50:	e03a      	b.n	8012bc8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012b52:	f7f8 fe5f 	bl	800b814 <HAL_RCC_GetPCLK1Freq>
 8012b56:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012b58:	e03c      	b.n	8012bd4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012b5a:	f7f8 fe71 	bl	800b840 <HAL_RCC_GetPCLK2Freq>
 8012b5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012b60:	e038      	b.n	8012bd4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012b62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012b66:	4618      	mov	r0, r3
 8012b68:	f7fa fd08 	bl	800d57c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012b70:	e030      	b.n	8012bd4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012b72:	f107 0318 	add.w	r3, r7, #24
 8012b76:	4618      	mov	r0, r3
 8012b78:	f7fa fe54 	bl	800d824 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012b7c:	69fb      	ldr	r3, [r7, #28]
 8012b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012b80:	e028      	b.n	8012bd4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012b82:	4b09      	ldr	r3, [pc, #36]	@ (8012ba8 <UART_SetConfig+0xc2c>)
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	f003 0320 	and.w	r3, r3, #32
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d012      	beq.n	8012bb4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012b8e:	4b06      	ldr	r3, [pc, #24]	@ (8012ba8 <UART_SetConfig+0xc2c>)
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	08db      	lsrs	r3, r3, #3
 8012b94:	f003 0303 	and.w	r3, r3, #3
 8012b98:	4a04      	ldr	r2, [pc, #16]	@ (8012bac <UART_SetConfig+0xc30>)
 8012b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8012b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012ba0:	e018      	b.n	8012bd4 <UART_SetConfig+0xc58>
 8012ba2:	bf00      	nop
 8012ba4:	0802036c 	.word	0x0802036c
 8012ba8:	58024400 	.word	0x58024400
 8012bac:	03d09000 	.word	0x03d09000
 8012bb0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8012bb4:	4b24      	ldr	r3, [pc, #144]	@ (8012c48 <UART_SetConfig+0xccc>)
 8012bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012bb8:	e00c      	b.n	8012bd4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012bba:	4b24      	ldr	r3, [pc, #144]	@ (8012c4c <UART_SetConfig+0xcd0>)
 8012bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012bbe:	e009      	b.n	8012bd4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012bc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012bc6:	e005      	b.n	8012bd4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8012bc8:	2300      	movs	r3, #0
 8012bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8012bcc:	2301      	movs	r3, #1
 8012bce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8012bd2:	bf00      	nop
    }

    if (pclk != 0U)
 8012bd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d021      	beq.n	8012c1e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012bda:	697b      	ldr	r3, [r7, #20]
 8012bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012bde:	4a1c      	ldr	r2, [pc, #112]	@ (8012c50 <UART_SetConfig+0xcd4>)
 8012be0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012be4:	461a      	mov	r2, r3
 8012be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012be8:	fbb3 f2f2 	udiv	r2, r3, r2
 8012bec:	697b      	ldr	r3, [r7, #20]
 8012bee:	685b      	ldr	r3, [r3, #4]
 8012bf0:	085b      	lsrs	r3, r3, #1
 8012bf2:	441a      	add	r2, r3
 8012bf4:	697b      	ldr	r3, [r7, #20]
 8012bf6:	685b      	ldr	r3, [r3, #4]
 8012bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8012bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c00:	2b0f      	cmp	r3, #15
 8012c02:	d909      	bls.n	8012c18 <UART_SetConfig+0xc9c>
 8012c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012c0a:	d205      	bcs.n	8012c18 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c0e:	b29a      	uxth	r2, r3
 8012c10:	697b      	ldr	r3, [r7, #20]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	60da      	str	r2, [r3, #12]
 8012c16:	e002      	b.n	8012c1e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8012c18:	2301      	movs	r3, #1
 8012c1a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012c1e:	697b      	ldr	r3, [r7, #20]
 8012c20:	2201      	movs	r2, #1
 8012c22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8012c26:	697b      	ldr	r3, [r7, #20]
 8012c28:	2201      	movs	r2, #1
 8012c2a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012c2e:	697b      	ldr	r3, [r7, #20]
 8012c30:	2200      	movs	r2, #0
 8012c32:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8012c34:	697b      	ldr	r3, [r7, #20]
 8012c36:	2200      	movs	r2, #0
 8012c38:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8012c3a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8012c3e:	4618      	mov	r0, r3
 8012c40:	3748      	adds	r7, #72	@ 0x48
 8012c42:	46bd      	mov	sp, r7
 8012c44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012c48:	03d09000 	.word	0x03d09000
 8012c4c:	003d0900 	.word	0x003d0900
 8012c50:	0802036c 	.word	0x0802036c

08012c54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012c54:	b480      	push	{r7}
 8012c56:	b083      	sub	sp, #12
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c60:	f003 0301 	and.w	r3, r3, #1
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d00a      	beq.n	8012c7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	685b      	ldr	r3, [r3, #4]
 8012c6e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	430a      	orrs	r2, r1
 8012c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c82:	f003 0302 	and.w	r3, r3, #2
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d00a      	beq.n	8012ca0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	685b      	ldr	r3, [r3, #4]
 8012c90:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	430a      	orrs	r2, r1
 8012c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ca4:	f003 0304 	and.w	r3, r3, #4
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d00a      	beq.n	8012cc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	685b      	ldr	r3, [r3, #4]
 8012cb2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	430a      	orrs	r2, r1
 8012cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012cc6:	f003 0308 	and.w	r3, r3, #8
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d00a      	beq.n	8012ce4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	685b      	ldr	r3, [r3, #4]
 8012cd4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	430a      	orrs	r2, r1
 8012ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ce8:	f003 0310 	and.w	r3, r3, #16
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d00a      	beq.n	8012d06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	689b      	ldr	r3, [r3, #8]
 8012cf6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	430a      	orrs	r2, r1
 8012d04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d0a:	f003 0320 	and.w	r3, r3, #32
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d00a      	beq.n	8012d28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	689b      	ldr	r3, [r3, #8]
 8012d18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	430a      	orrs	r2, r1
 8012d26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d01a      	beq.n	8012d6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	685b      	ldr	r3, [r3, #4]
 8012d3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	430a      	orrs	r2, r1
 8012d48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012d4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012d52:	d10a      	bne.n	8012d6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	685b      	ldr	r3, [r3, #4]
 8012d5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	430a      	orrs	r2, r1
 8012d68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d00a      	beq.n	8012d8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	685b      	ldr	r3, [r3, #4]
 8012d7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	430a      	orrs	r2, r1
 8012d8a:	605a      	str	r2, [r3, #4]
  }
}
 8012d8c:	bf00      	nop
 8012d8e:	370c      	adds	r7, #12
 8012d90:	46bd      	mov	sp, r7
 8012d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d96:	4770      	bx	lr

08012d98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b098      	sub	sp, #96	@ 0x60
 8012d9c:	af02      	add	r7, sp, #8
 8012d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	2200      	movs	r2, #0
 8012da4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012da8:	f7f1 fa28 	bl	80041fc <HAL_GetTick>
 8012dac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	f003 0308 	and.w	r3, r3, #8
 8012db8:	2b08      	cmp	r3, #8
 8012dba:	d12f      	bne.n	8012e1c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012dbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8012dc0:	9300      	str	r3, [sp, #0]
 8012dc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8012dca:	6878      	ldr	r0, [r7, #4]
 8012dcc:	f000 f88e 	bl	8012eec <UART_WaitOnFlagUntilTimeout>
 8012dd0:	4603      	mov	r3, r0
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d022      	beq.n	8012e1c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dde:	e853 3f00 	ldrex	r3, [r3]
 8012de2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012de6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012dea:	653b      	str	r3, [r7, #80]	@ 0x50
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	461a      	mov	r2, r3
 8012df2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012df4:	647b      	str	r3, [r7, #68]	@ 0x44
 8012df6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012df8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012dfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012dfc:	e841 2300 	strex	r3, r2, [r1]
 8012e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012e02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d1e6      	bne.n	8012dd6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	2220      	movs	r2, #32
 8012e0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	2200      	movs	r2, #0
 8012e14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012e18:	2303      	movs	r3, #3
 8012e1a:	e063      	b.n	8012ee4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	f003 0304 	and.w	r3, r3, #4
 8012e26:	2b04      	cmp	r3, #4
 8012e28:	d149      	bne.n	8012ebe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012e2a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8012e2e:	9300      	str	r3, [sp, #0]
 8012e30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e32:	2200      	movs	r2, #0
 8012e34:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8012e38:	6878      	ldr	r0, [r7, #4]
 8012e3a:	f000 f857 	bl	8012eec <UART_WaitOnFlagUntilTimeout>
 8012e3e:	4603      	mov	r3, r0
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d03c      	beq.n	8012ebe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e4c:	e853 3f00 	ldrex	r3, [r3]
 8012e50:	623b      	str	r3, [r7, #32]
   return(result);
 8012e52:	6a3b      	ldr	r3, [r7, #32]
 8012e54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012e58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	461a      	mov	r2, r3
 8012e60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012e62:	633b      	str	r3, [r7, #48]	@ 0x30
 8012e64:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012e68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012e6a:	e841 2300 	strex	r3, r2, [r1]
 8012e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d1e6      	bne.n	8012e44 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	3308      	adds	r3, #8
 8012e7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e7e:	693b      	ldr	r3, [r7, #16]
 8012e80:	e853 3f00 	ldrex	r3, [r3]
 8012e84:	60fb      	str	r3, [r7, #12]
   return(result);
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	f023 0301 	bic.w	r3, r3, #1
 8012e8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	3308      	adds	r3, #8
 8012e94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012e96:	61fa      	str	r2, [r7, #28]
 8012e98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e9a:	69b9      	ldr	r1, [r7, #24]
 8012e9c:	69fa      	ldr	r2, [r7, #28]
 8012e9e:	e841 2300 	strex	r3, r2, [r1]
 8012ea2:	617b      	str	r3, [r7, #20]
   return(result);
 8012ea4:	697b      	ldr	r3, [r7, #20]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d1e5      	bne.n	8012e76 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	2220      	movs	r2, #32
 8012eae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	2200      	movs	r2, #0
 8012eb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012eba:	2303      	movs	r3, #3
 8012ebc:	e012      	b.n	8012ee4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	2220      	movs	r2, #32
 8012ec2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	2220      	movs	r2, #32
 8012eca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	2200      	movs	r2, #0
 8012ed2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	2200      	movs	r2, #0
 8012ede:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012ee2:	2300      	movs	r3, #0
}
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	3758      	adds	r7, #88	@ 0x58
 8012ee8:	46bd      	mov	sp, r7
 8012eea:	bd80      	pop	{r7, pc}

08012eec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b084      	sub	sp, #16
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	60f8      	str	r0, [r7, #12]
 8012ef4:	60b9      	str	r1, [r7, #8]
 8012ef6:	603b      	str	r3, [r7, #0]
 8012ef8:	4613      	mov	r3, r2
 8012efa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012efc:	e049      	b.n	8012f92 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012efe:	69bb      	ldr	r3, [r7, #24]
 8012f00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012f04:	d045      	beq.n	8012f92 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012f06:	f7f1 f979 	bl	80041fc <HAL_GetTick>
 8012f0a:	4602      	mov	r2, r0
 8012f0c:	683b      	ldr	r3, [r7, #0]
 8012f0e:	1ad3      	subs	r3, r2, r3
 8012f10:	69ba      	ldr	r2, [r7, #24]
 8012f12:	429a      	cmp	r2, r3
 8012f14:	d302      	bcc.n	8012f1c <UART_WaitOnFlagUntilTimeout+0x30>
 8012f16:	69bb      	ldr	r3, [r7, #24]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d101      	bne.n	8012f20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012f1c:	2303      	movs	r3, #3
 8012f1e:	e048      	b.n	8012fb2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	f003 0304 	and.w	r3, r3, #4
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d031      	beq.n	8012f92 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	69db      	ldr	r3, [r3, #28]
 8012f34:	f003 0308 	and.w	r3, r3, #8
 8012f38:	2b08      	cmp	r3, #8
 8012f3a:	d110      	bne.n	8012f5e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	2208      	movs	r2, #8
 8012f42:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8012f44:	68f8      	ldr	r0, [r7, #12]
 8012f46:	f000 f839 	bl	8012fbc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	2208      	movs	r2, #8
 8012f4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	2200      	movs	r2, #0
 8012f56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 8012f5a:	2301      	movs	r3, #1
 8012f5c:	e029      	b.n	8012fb2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	69db      	ldr	r3, [r3, #28]
 8012f64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012f68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012f6c:	d111      	bne.n	8012f92 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012f76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012f78:	68f8      	ldr	r0, [r7, #12]
 8012f7a:	f000 f81f 	bl	8012fbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	2220      	movs	r2, #32
 8012f82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	2200      	movs	r2, #0
 8012f8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8012f8e:	2303      	movs	r3, #3
 8012f90:	e00f      	b.n	8012fb2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	69da      	ldr	r2, [r3, #28]
 8012f98:	68bb      	ldr	r3, [r7, #8]
 8012f9a:	4013      	ands	r3, r2
 8012f9c:	68ba      	ldr	r2, [r7, #8]
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	bf0c      	ite	eq
 8012fa2:	2301      	moveq	r3, #1
 8012fa4:	2300      	movne	r3, #0
 8012fa6:	b2db      	uxtb	r3, r3
 8012fa8:	461a      	mov	r2, r3
 8012faa:	79fb      	ldrb	r3, [r7, #7]
 8012fac:	429a      	cmp	r2, r3
 8012fae:	d0a6      	beq.n	8012efe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012fb0:	2300      	movs	r3, #0
}
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	3710      	adds	r7, #16
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	bd80      	pop	{r7, pc}
	...

08012fbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012fbc:	b480      	push	{r7}
 8012fbe:	b095      	sub	sp, #84	@ 0x54
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012fcc:	e853 3f00 	ldrex	r3, [r3]
 8012fd0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8012fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012fd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	461a      	mov	r2, r3
 8012fe0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012fe2:	643b      	str	r3, [r7, #64]	@ 0x40
 8012fe4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012fe6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012fe8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012fea:	e841 2300 	strex	r3, r2, [r1]
 8012fee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d1e6      	bne.n	8012fc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	3308      	adds	r3, #8
 8012ffc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ffe:	6a3b      	ldr	r3, [r7, #32]
 8013000:	e853 3f00 	ldrex	r3, [r3]
 8013004:	61fb      	str	r3, [r7, #28]
   return(result);
 8013006:	69fa      	ldr	r2, [r7, #28]
 8013008:	4b1e      	ldr	r3, [pc, #120]	@ (8013084 <UART_EndRxTransfer+0xc8>)
 801300a:	4013      	ands	r3, r2
 801300c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	3308      	adds	r3, #8
 8013014:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013016:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013018:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801301a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801301c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801301e:	e841 2300 	strex	r3, r2, [r1]
 8013022:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013026:	2b00      	cmp	r3, #0
 8013028:	d1e5      	bne.n	8012ff6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801302e:	2b01      	cmp	r3, #1
 8013030:	d118      	bne.n	8013064 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	e853 3f00 	ldrex	r3, [r3]
 801303e:	60bb      	str	r3, [r7, #8]
   return(result);
 8013040:	68bb      	ldr	r3, [r7, #8]
 8013042:	f023 0310 	bic.w	r3, r3, #16
 8013046:	647b      	str	r3, [r7, #68]	@ 0x44
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	461a      	mov	r2, r3
 801304e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013050:	61bb      	str	r3, [r7, #24]
 8013052:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013054:	6979      	ldr	r1, [r7, #20]
 8013056:	69ba      	ldr	r2, [r7, #24]
 8013058:	e841 2300 	strex	r3, r2, [r1]
 801305c:	613b      	str	r3, [r7, #16]
   return(result);
 801305e:	693b      	ldr	r3, [r7, #16]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d1e6      	bne.n	8013032 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	2220      	movs	r2, #32
 8013068:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	2200      	movs	r2, #0
 8013070:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	2200      	movs	r2, #0
 8013076:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8013078:	bf00      	nop
 801307a:	3754      	adds	r7, #84	@ 0x54
 801307c:	46bd      	mov	sp, r7
 801307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013082:	4770      	bx	lr
 8013084:	effffffe 	.word	0xeffffffe

08013088 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8013088:	b480      	push	{r7}
 801308a:	b085      	sub	sp, #20
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013096:	2b01      	cmp	r3, #1
 8013098:	d101      	bne.n	801309e <HAL_UARTEx_DisableFifoMode+0x16>
 801309a:	2302      	movs	r3, #2
 801309c:	e027      	b.n	80130ee <HAL_UARTEx_DisableFifoMode+0x66>
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	2201      	movs	r2, #1
 80130a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	2224      	movs	r2, #36	@ 0x24
 80130aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	681a      	ldr	r2, [r3, #0]
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	f022 0201 	bic.w	r2, r2, #1
 80130c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80130cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	2200      	movs	r2, #0
 80130d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	68fa      	ldr	r2, [r7, #12]
 80130da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	2220      	movs	r2, #32
 80130e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	2200      	movs	r2, #0
 80130e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80130ec:	2300      	movs	r3, #0
}
 80130ee:	4618      	mov	r0, r3
 80130f0:	3714      	adds	r7, #20
 80130f2:	46bd      	mov	sp, r7
 80130f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f8:	4770      	bx	lr

080130fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80130fa:	b580      	push	{r7, lr}
 80130fc:	b084      	sub	sp, #16
 80130fe:	af00      	add	r7, sp, #0
 8013100:	6078      	str	r0, [r7, #4]
 8013102:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801310a:	2b01      	cmp	r3, #1
 801310c:	d101      	bne.n	8013112 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801310e:	2302      	movs	r3, #2
 8013110:	e02d      	b.n	801316e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	2201      	movs	r2, #1
 8013116:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	2224      	movs	r2, #36	@ 0x24
 801311e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	681a      	ldr	r2, [r3, #0]
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	f022 0201 	bic.w	r2, r2, #1
 8013138:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	689b      	ldr	r3, [r3, #8]
 8013140:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	683a      	ldr	r2, [r7, #0]
 801314a:	430a      	orrs	r2, r1
 801314c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801314e:	6878      	ldr	r0, [r7, #4]
 8013150:	f000 f850 	bl	80131f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	68fa      	ldr	r2, [r7, #12]
 801315a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	2220      	movs	r2, #32
 8013160:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	2200      	movs	r2, #0
 8013168:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801316c:	2300      	movs	r3, #0
}
 801316e:	4618      	mov	r0, r3
 8013170:	3710      	adds	r7, #16
 8013172:	46bd      	mov	sp, r7
 8013174:	bd80      	pop	{r7, pc}

08013176 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013176:	b580      	push	{r7, lr}
 8013178:	b084      	sub	sp, #16
 801317a:	af00      	add	r7, sp, #0
 801317c:	6078      	str	r0, [r7, #4]
 801317e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013186:	2b01      	cmp	r3, #1
 8013188:	d101      	bne.n	801318e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801318a:	2302      	movs	r3, #2
 801318c:	e02d      	b.n	80131ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	2201      	movs	r2, #1
 8013192:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	2224      	movs	r2, #36	@ 0x24
 801319a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	681a      	ldr	r2, [r3, #0]
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	f022 0201 	bic.w	r2, r2, #1
 80131b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	689b      	ldr	r3, [r3, #8]
 80131bc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	683a      	ldr	r2, [r7, #0]
 80131c6:	430a      	orrs	r2, r1
 80131c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80131ca:	6878      	ldr	r0, [r7, #4]
 80131cc:	f000 f812 	bl	80131f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	68fa      	ldr	r2, [r7, #12]
 80131d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	2220      	movs	r2, #32
 80131dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	2200      	movs	r2, #0
 80131e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80131e8:	2300      	movs	r3, #0
}
 80131ea:	4618      	mov	r0, r3
 80131ec:	3710      	adds	r7, #16
 80131ee:	46bd      	mov	sp, r7
 80131f0:	bd80      	pop	{r7, pc}
	...

080131f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80131f4:	b480      	push	{r7}
 80131f6:	b085      	sub	sp, #20
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013200:	2b00      	cmp	r3, #0
 8013202:	d108      	bne.n	8013216 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	2201      	movs	r2, #1
 8013208:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	2201      	movs	r2, #1
 8013210:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013214:	e031      	b.n	801327a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013216:	2310      	movs	r3, #16
 8013218:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801321a:	2310      	movs	r3, #16
 801321c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	689b      	ldr	r3, [r3, #8]
 8013224:	0e5b      	lsrs	r3, r3, #25
 8013226:	b2db      	uxtb	r3, r3
 8013228:	f003 0307 	and.w	r3, r3, #7
 801322c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	689b      	ldr	r3, [r3, #8]
 8013234:	0f5b      	lsrs	r3, r3, #29
 8013236:	b2db      	uxtb	r3, r3
 8013238:	f003 0307 	and.w	r3, r3, #7
 801323c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801323e:	7bbb      	ldrb	r3, [r7, #14]
 8013240:	7b3a      	ldrb	r2, [r7, #12]
 8013242:	4911      	ldr	r1, [pc, #68]	@ (8013288 <UARTEx_SetNbDataToProcess+0x94>)
 8013244:	5c8a      	ldrb	r2, [r1, r2]
 8013246:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801324a:	7b3a      	ldrb	r2, [r7, #12]
 801324c:	490f      	ldr	r1, [pc, #60]	@ (801328c <UARTEx_SetNbDataToProcess+0x98>)
 801324e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013250:	fb93 f3f2 	sdiv	r3, r3, r2
 8013254:	b29a      	uxth	r2, r3
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801325c:	7bfb      	ldrb	r3, [r7, #15]
 801325e:	7b7a      	ldrb	r2, [r7, #13]
 8013260:	4909      	ldr	r1, [pc, #36]	@ (8013288 <UARTEx_SetNbDataToProcess+0x94>)
 8013262:	5c8a      	ldrb	r2, [r1, r2]
 8013264:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013268:	7b7a      	ldrb	r2, [r7, #13]
 801326a:	4908      	ldr	r1, [pc, #32]	@ (801328c <UARTEx_SetNbDataToProcess+0x98>)
 801326c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801326e:	fb93 f3f2 	sdiv	r3, r3, r2
 8013272:	b29a      	uxth	r2, r3
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801327a:	bf00      	nop
 801327c:	3714      	adds	r7, #20
 801327e:	46bd      	mov	sp, r7
 8013280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013284:	4770      	bx	lr
 8013286:	bf00      	nop
 8013288:	08020384 	.word	0x08020384
 801328c:	0802038c 	.word	0x0802038c

08013290 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8013290:	b084      	sub	sp, #16
 8013292:	b480      	push	{r7}
 8013294:	b085      	sub	sp, #20
 8013296:	af00      	add	r7, sp, #0
 8013298:	6078      	str	r0, [r7, #4]
 801329a:	f107 001c 	add.w	r0, r7, #28
 801329e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80132a2:	2300      	movs	r3, #0
 80132a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80132a6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80132a8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80132aa:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80132ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 80132ae:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80132b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 80132b2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80132b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 80132b6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80132b8:	68fa      	ldr	r2, [r7, #12]
 80132ba:	4313      	orrs	r3, r2
 80132bc:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	685a      	ldr	r2, [r3, #4]
 80132c2:	4b07      	ldr	r3, [pc, #28]	@ (80132e0 <SDMMC_Init+0x50>)
 80132c4:	4013      	ands	r3, r2
 80132c6:	68fa      	ldr	r2, [r7, #12]
 80132c8:	431a      	orrs	r2, r3
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80132ce:	2300      	movs	r3, #0
}
 80132d0:	4618      	mov	r0, r3
 80132d2:	3714      	adds	r7, #20
 80132d4:	46bd      	mov	sp, r7
 80132d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132da:	b004      	add	sp, #16
 80132dc:	4770      	bx	lr
 80132de:	bf00      	nop
 80132e0:	ffc02c00 	.word	0xffc02c00

080132e4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80132e4:	b480      	push	{r7}
 80132e6:	b083      	sub	sp, #12
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80132f2:	4618      	mov	r0, r3
 80132f4:	370c      	adds	r7, #12
 80132f6:	46bd      	mov	sp, r7
 80132f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132fc:	4770      	bx	lr

080132fe <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80132fe:	b480      	push	{r7}
 8013300:	b083      	sub	sp, #12
 8013302:	af00      	add	r7, sp, #0
 8013304:	6078      	str	r0, [r7, #4]
 8013306:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8013308:	683b      	ldr	r3, [r7, #0]
 801330a:	681a      	ldr	r2, [r3, #0]
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8013312:	2300      	movs	r3, #0
}
 8013314:	4618      	mov	r0, r3
 8013316:	370c      	adds	r7, #12
 8013318:	46bd      	mov	sp, r7
 801331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801331e:	4770      	bx	lr

08013320 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8013320:	b480      	push	{r7}
 8013322:	b083      	sub	sp, #12
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	f043 0203 	orr.w	r2, r3, #3
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8013334:	2300      	movs	r3, #0
}
 8013336:	4618      	mov	r0, r3
 8013338:	370c      	adds	r7, #12
 801333a:	46bd      	mov	sp, r7
 801333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013340:	4770      	bx	lr

08013342 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8013342:	b480      	push	{r7}
 8013344:	b083      	sub	sp, #12
 8013346:	af00      	add	r7, sp, #0
 8013348:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	f003 0303 	and.w	r3, r3, #3
}
 8013352:	4618      	mov	r0, r3
 8013354:	370c      	adds	r7, #12
 8013356:	46bd      	mov	sp, r7
 8013358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801335c:	4770      	bx	lr
	...

08013360 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8013360:	b480      	push	{r7}
 8013362:	b085      	sub	sp, #20
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
 8013368:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801336a:	2300      	movs	r3, #0
 801336c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801336e:	683b      	ldr	r3, [r7, #0]
 8013370:	681a      	ldr	r2, [r3, #0]
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8013376:	683b      	ldr	r3, [r7, #0]
 8013378:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801337a:	683b      	ldr	r3, [r7, #0]
 801337c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801337e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8013380:	683b      	ldr	r3, [r7, #0]
 8013382:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8013384:	431a      	orrs	r2, r3
                       Command->CPSM);
 8013386:	683b      	ldr	r3, [r7, #0]
 8013388:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801338a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801338c:	68fa      	ldr	r2, [r7, #12]
 801338e:	4313      	orrs	r3, r2
 8013390:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	68da      	ldr	r2, [r3, #12]
 8013396:	4b06      	ldr	r3, [pc, #24]	@ (80133b0 <SDMMC_SendCommand+0x50>)
 8013398:	4013      	ands	r3, r2
 801339a:	68fa      	ldr	r2, [r7, #12]
 801339c:	431a      	orrs	r2, r3
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80133a2:	2300      	movs	r3, #0
}
 80133a4:	4618      	mov	r0, r3
 80133a6:	3714      	adds	r7, #20
 80133a8:	46bd      	mov	sp, r7
 80133aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ae:	4770      	bx	lr
 80133b0:	fffee0c0 	.word	0xfffee0c0

080133b4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80133b4:	b480      	push	{r7}
 80133b6:	b083      	sub	sp, #12
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	691b      	ldr	r3, [r3, #16]
 80133c0:	b2db      	uxtb	r3, r3
}
 80133c2:	4618      	mov	r0, r3
 80133c4:	370c      	adds	r7, #12
 80133c6:	46bd      	mov	sp, r7
 80133c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133cc:	4770      	bx	lr

080133ce <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80133ce:	b480      	push	{r7}
 80133d0:	b085      	sub	sp, #20
 80133d2:	af00      	add	r7, sp, #0
 80133d4:	6078      	str	r0, [r7, #4]
 80133d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	3314      	adds	r3, #20
 80133dc:	461a      	mov	r2, r3
 80133de:	683b      	ldr	r3, [r7, #0]
 80133e0:	4413      	add	r3, r2
 80133e2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	681b      	ldr	r3, [r3, #0]
}
 80133e8:	4618      	mov	r0, r3
 80133ea:	3714      	adds	r7, #20
 80133ec:	46bd      	mov	sp, r7
 80133ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f2:	4770      	bx	lr

080133f4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80133f4:	b480      	push	{r7}
 80133f6:	b085      	sub	sp, #20
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	6078      	str	r0, [r7, #4]
 80133fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80133fe:	2300      	movs	r3, #0
 8013400:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8013402:	683b      	ldr	r3, [r7, #0]
 8013404:	681a      	ldr	r2, [r3, #0]
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801340a:	683b      	ldr	r3, [r7, #0]
 801340c:	685a      	ldr	r2, [r3, #4]
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8013412:	683b      	ldr	r3, [r7, #0]
 8013414:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8013416:	683b      	ldr	r3, [r7, #0]
 8013418:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801341a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 801341c:	683b      	ldr	r3, [r7, #0]
 801341e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8013420:	431a      	orrs	r2, r3
                       Data->DPSM);
 8013422:	683b      	ldr	r3, [r7, #0]
 8013424:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8013426:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8013428:	68fa      	ldr	r2, [r7, #12]
 801342a:	4313      	orrs	r3, r2
 801342c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013432:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	431a      	orrs	r2, r3
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 801343e:	2300      	movs	r3, #0

}
 8013440:	4618      	mov	r0, r3
 8013442:	3714      	adds	r7, #20
 8013444:	46bd      	mov	sp, r7
 8013446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344a:	4770      	bx	lr

0801344c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 801344c:	b580      	push	{r7, lr}
 801344e:	b088      	sub	sp, #32
 8013450:	af00      	add	r7, sp, #0
 8013452:	6078      	str	r0, [r7, #4]
 8013454:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8013456:	683b      	ldr	r3, [r7, #0]
 8013458:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801345a:	2310      	movs	r3, #16
 801345c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801345e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013462:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013464:	2300      	movs	r3, #0
 8013466:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013468:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801346c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801346e:	f107 0308 	add.w	r3, r7, #8
 8013472:	4619      	mov	r1, r3
 8013474:	6878      	ldr	r0, [r7, #4]
 8013476:	f7ff ff73 	bl	8013360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801347a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801347e:	2110      	movs	r1, #16
 8013480:	6878      	ldr	r0, [r7, #4]
 8013482:	f000 fa5f 	bl	8013944 <SDMMC_GetCmdResp1>
 8013486:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013488:	69fb      	ldr	r3, [r7, #28]
}
 801348a:	4618      	mov	r0, r3
 801348c:	3720      	adds	r7, #32
 801348e:	46bd      	mov	sp, r7
 8013490:	bd80      	pop	{r7, pc}

08013492 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8013492:	b580      	push	{r7, lr}
 8013494:	b088      	sub	sp, #32
 8013496:	af00      	add	r7, sp, #0
 8013498:	6078      	str	r0, [r7, #4]
 801349a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801349c:	683b      	ldr	r3, [r7, #0]
 801349e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80134a0:	2311      	movs	r3, #17
 80134a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80134a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80134a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80134aa:	2300      	movs	r3, #0
 80134ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80134ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80134b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80134b4:	f107 0308 	add.w	r3, r7, #8
 80134b8:	4619      	mov	r1, r3
 80134ba:	6878      	ldr	r0, [r7, #4]
 80134bc:	f7ff ff50 	bl	8013360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80134c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80134c4:	2111      	movs	r1, #17
 80134c6:	6878      	ldr	r0, [r7, #4]
 80134c8:	f000 fa3c 	bl	8013944 <SDMMC_GetCmdResp1>
 80134cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80134ce:	69fb      	ldr	r3, [r7, #28]
}
 80134d0:	4618      	mov	r0, r3
 80134d2:	3720      	adds	r7, #32
 80134d4:	46bd      	mov	sp, r7
 80134d6:	bd80      	pop	{r7, pc}

080134d8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b088      	sub	sp, #32
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
 80134e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80134e2:	683b      	ldr	r3, [r7, #0]
 80134e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80134e6:	2312      	movs	r3, #18
 80134e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80134ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80134ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80134f0:	2300      	movs	r3, #0
 80134f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80134f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80134f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80134fa:	f107 0308 	add.w	r3, r7, #8
 80134fe:	4619      	mov	r1, r3
 8013500:	6878      	ldr	r0, [r7, #4]
 8013502:	f7ff ff2d 	bl	8013360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8013506:	f241 3288 	movw	r2, #5000	@ 0x1388
 801350a:	2112      	movs	r1, #18
 801350c:	6878      	ldr	r0, [r7, #4]
 801350e:	f000 fa19 	bl	8013944 <SDMMC_GetCmdResp1>
 8013512:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013514:	69fb      	ldr	r3, [r7, #28]
}
 8013516:	4618      	mov	r0, r3
 8013518:	3720      	adds	r7, #32
 801351a:	46bd      	mov	sp, r7
 801351c:	bd80      	pop	{r7, pc}

0801351e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801351e:	b580      	push	{r7, lr}
 8013520:	b088      	sub	sp, #32
 8013522:	af00      	add	r7, sp, #0
 8013524:	6078      	str	r0, [r7, #4]
 8013526:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8013528:	683b      	ldr	r3, [r7, #0]
 801352a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801352c:	2318      	movs	r3, #24
 801352e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013530:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013534:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013536:	2300      	movs	r3, #0
 8013538:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801353a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801353e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013540:	f107 0308 	add.w	r3, r7, #8
 8013544:	4619      	mov	r1, r3
 8013546:	6878      	ldr	r0, [r7, #4]
 8013548:	f7ff ff0a 	bl	8013360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801354c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013550:	2118      	movs	r1, #24
 8013552:	6878      	ldr	r0, [r7, #4]
 8013554:	f000 f9f6 	bl	8013944 <SDMMC_GetCmdResp1>
 8013558:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801355a:	69fb      	ldr	r3, [r7, #28]
}
 801355c:	4618      	mov	r0, r3
 801355e:	3720      	adds	r7, #32
 8013560:	46bd      	mov	sp, r7
 8013562:	bd80      	pop	{r7, pc}

08013564 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8013564:	b580      	push	{r7, lr}
 8013566:	b088      	sub	sp, #32
 8013568:	af00      	add	r7, sp, #0
 801356a:	6078      	str	r0, [r7, #4]
 801356c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801356e:	683b      	ldr	r3, [r7, #0]
 8013570:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8013572:	2319      	movs	r3, #25
 8013574:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013576:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801357a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801357c:	2300      	movs	r3, #0
 801357e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013580:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013584:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013586:	f107 0308 	add.w	r3, r7, #8
 801358a:	4619      	mov	r1, r3
 801358c:	6878      	ldr	r0, [r7, #4]
 801358e:	f7ff fee7 	bl	8013360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8013592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013596:	2119      	movs	r1, #25
 8013598:	6878      	ldr	r0, [r7, #4]
 801359a:	f000 f9d3 	bl	8013944 <SDMMC_GetCmdResp1>
 801359e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80135a0:	69fb      	ldr	r3, [r7, #28]
}
 80135a2:	4618      	mov	r0, r3
 80135a4:	3720      	adds	r7, #32
 80135a6:	46bd      	mov	sp, r7
 80135a8:	bd80      	pop	{r7, pc}
	...

080135ac <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80135ac:	b580      	push	{r7, lr}
 80135ae:	b088      	sub	sp, #32
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80135b4:	2300      	movs	r3, #0
 80135b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80135b8:	230c      	movs	r3, #12
 80135ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80135bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80135c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80135c2:	2300      	movs	r3, #0
 80135c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80135c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80135ca:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	68db      	ldr	r3, [r3, #12]
 80135d0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	68db      	ldr	r3, [r3, #12]
 80135dc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80135e4:	f107 0308 	add.w	r3, r7, #8
 80135e8:	4619      	mov	r1, r3
 80135ea:	6878      	ldr	r0, [r7, #4]
 80135ec:	f7ff feb8 	bl	8013360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80135f0:	4a0b      	ldr	r2, [pc, #44]	@ (8013620 <SDMMC_CmdStopTransfer+0x74>)
 80135f2:	210c      	movs	r1, #12
 80135f4:	6878      	ldr	r0, [r7, #4]
 80135f6:	f000 f9a5 	bl	8013944 <SDMMC_GetCmdResp1>
 80135fa:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	68db      	ldr	r3, [r3, #12]
 8013600:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8013608:	69fb      	ldr	r3, [r7, #28]
 801360a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801360e:	d101      	bne.n	8013614 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8013610:	2300      	movs	r3, #0
 8013612:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8013614:	69fb      	ldr	r3, [r7, #28]
}
 8013616:	4618      	mov	r0, r3
 8013618:	3720      	adds	r7, #32
 801361a:	46bd      	mov	sp, r7
 801361c:	bd80      	pop	{r7, pc}
 801361e:	bf00      	nop
 8013620:	05f5e100 	.word	0x05f5e100

08013624 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8013624:	b580      	push	{r7, lr}
 8013626:	b088      	sub	sp, #32
 8013628:	af00      	add	r7, sp, #0
 801362a:	6078      	str	r0, [r7, #4]
 801362c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801362e:	683b      	ldr	r3, [r7, #0]
 8013630:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8013632:	2307      	movs	r3, #7
 8013634:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013636:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801363a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801363c:	2300      	movs	r3, #0
 801363e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013640:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013644:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013646:	f107 0308 	add.w	r3, r7, #8
 801364a:	4619      	mov	r1, r3
 801364c:	6878      	ldr	r0, [r7, #4]
 801364e:	f7ff fe87 	bl	8013360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8013652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013656:	2107      	movs	r1, #7
 8013658:	6878      	ldr	r0, [r7, #4]
 801365a:	f000 f973 	bl	8013944 <SDMMC_GetCmdResp1>
 801365e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013660:	69fb      	ldr	r3, [r7, #28]
}
 8013662:	4618      	mov	r0, r3
 8013664:	3720      	adds	r7, #32
 8013666:	46bd      	mov	sp, r7
 8013668:	bd80      	pop	{r7, pc}

0801366a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801366a:	b580      	push	{r7, lr}
 801366c:	b088      	sub	sp, #32
 801366e:	af00      	add	r7, sp, #0
 8013670:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8013672:	2300      	movs	r3, #0
 8013674:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8013676:	2300      	movs	r3, #0
 8013678:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801367a:	2300      	movs	r3, #0
 801367c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801367e:	2300      	movs	r3, #0
 8013680:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013682:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013686:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013688:	f107 0308 	add.w	r3, r7, #8
 801368c:	4619      	mov	r1, r3
 801368e:	6878      	ldr	r0, [r7, #4]
 8013690:	f7ff fe66 	bl	8013360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8013694:	6878      	ldr	r0, [r7, #4]
 8013696:	f000 fb97 	bl	8013dc8 <SDMMC_GetCmdError>
 801369a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801369c:	69fb      	ldr	r3, [r7, #28]
}
 801369e:	4618      	mov	r0, r3
 80136a0:	3720      	adds	r7, #32
 80136a2:	46bd      	mov	sp, r7
 80136a4:	bd80      	pop	{r7, pc}

080136a6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80136a6:	b580      	push	{r7, lr}
 80136a8:	b088      	sub	sp, #32
 80136aa:	af00      	add	r7, sp, #0
 80136ac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80136ae:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80136b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80136b4:	2308      	movs	r3, #8
 80136b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80136b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80136bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80136be:	2300      	movs	r3, #0
 80136c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80136c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80136c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80136c8:	f107 0308 	add.w	r3, r7, #8
 80136cc:	4619      	mov	r1, r3
 80136ce:	6878      	ldr	r0, [r7, #4]
 80136d0:	f7ff fe46 	bl	8013360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80136d4:	6878      	ldr	r0, [r7, #4]
 80136d6:	f000 fb29 	bl	8013d2c <SDMMC_GetCmdResp7>
 80136da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80136dc:	69fb      	ldr	r3, [r7, #28]
}
 80136de:	4618      	mov	r0, r3
 80136e0:	3720      	adds	r7, #32
 80136e2:	46bd      	mov	sp, r7
 80136e4:	bd80      	pop	{r7, pc}

080136e6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80136e6:	b580      	push	{r7, lr}
 80136e8:	b088      	sub	sp, #32
 80136ea:	af00      	add	r7, sp, #0
 80136ec:	6078      	str	r0, [r7, #4]
 80136ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80136f0:	683b      	ldr	r3, [r7, #0]
 80136f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80136f4:	2337      	movs	r3, #55	@ 0x37
 80136f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80136f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80136fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80136fe:	2300      	movs	r3, #0
 8013700:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013702:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013706:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013708:	f107 0308 	add.w	r3, r7, #8
 801370c:	4619      	mov	r1, r3
 801370e:	6878      	ldr	r0, [r7, #4]
 8013710:	f7ff fe26 	bl	8013360 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8013714:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013718:	2137      	movs	r1, #55	@ 0x37
 801371a:	6878      	ldr	r0, [r7, #4]
 801371c:	f000 f912 	bl	8013944 <SDMMC_GetCmdResp1>
 8013720:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013722:	69fb      	ldr	r3, [r7, #28]
}
 8013724:	4618      	mov	r0, r3
 8013726:	3720      	adds	r7, #32
 8013728:	46bd      	mov	sp, r7
 801372a:	bd80      	pop	{r7, pc}

0801372c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801372c:	b580      	push	{r7, lr}
 801372e:	b088      	sub	sp, #32
 8013730:	af00      	add	r7, sp, #0
 8013732:	6078      	str	r0, [r7, #4]
 8013734:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8013736:	683b      	ldr	r3, [r7, #0]
 8013738:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801373a:	2329      	movs	r3, #41	@ 0x29
 801373c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801373e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013742:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013744:	2300      	movs	r3, #0
 8013746:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013748:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801374c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801374e:	f107 0308 	add.w	r3, r7, #8
 8013752:	4619      	mov	r1, r3
 8013754:	6878      	ldr	r0, [r7, #4]
 8013756:	f7ff fe03 	bl	8013360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801375a:	6878      	ldr	r0, [r7, #4]
 801375c:	f000 fa2e 	bl	8013bbc <SDMMC_GetCmdResp3>
 8013760:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013762:	69fb      	ldr	r3, [r7, #28]
}
 8013764:	4618      	mov	r0, r3
 8013766:	3720      	adds	r7, #32
 8013768:	46bd      	mov	sp, r7
 801376a:	bd80      	pop	{r7, pc}

0801376c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801376c:	b580      	push	{r7, lr}
 801376e:	b088      	sub	sp, #32
 8013770:	af00      	add	r7, sp, #0
 8013772:	6078      	str	r0, [r7, #4]
 8013774:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8013776:	683b      	ldr	r3, [r7, #0]
 8013778:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801377a:	2306      	movs	r3, #6
 801377c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801377e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013782:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013784:	2300      	movs	r3, #0
 8013786:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013788:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801378c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801378e:	f107 0308 	add.w	r3, r7, #8
 8013792:	4619      	mov	r1, r3
 8013794:	6878      	ldr	r0, [r7, #4]
 8013796:	f7ff fde3 	bl	8013360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801379a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801379e:	2106      	movs	r1, #6
 80137a0:	6878      	ldr	r0, [r7, #4]
 80137a2:	f000 f8cf 	bl	8013944 <SDMMC_GetCmdResp1>
 80137a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80137a8:	69fb      	ldr	r3, [r7, #28]
}
 80137aa:	4618      	mov	r0, r3
 80137ac:	3720      	adds	r7, #32
 80137ae:	46bd      	mov	sp, r7
 80137b0:	bd80      	pop	{r7, pc}

080137b2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80137b2:	b580      	push	{r7, lr}
 80137b4:	b088      	sub	sp, #32
 80137b6:	af00      	add	r7, sp, #0
 80137b8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80137ba:	2300      	movs	r3, #0
 80137bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80137be:	2333      	movs	r3, #51	@ 0x33
 80137c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80137c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80137c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80137c8:	2300      	movs	r3, #0
 80137ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80137cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80137d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80137d2:	f107 0308 	add.w	r3, r7, #8
 80137d6:	4619      	mov	r1, r3
 80137d8:	6878      	ldr	r0, [r7, #4]
 80137da:	f7ff fdc1 	bl	8013360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80137de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80137e2:	2133      	movs	r1, #51	@ 0x33
 80137e4:	6878      	ldr	r0, [r7, #4]
 80137e6:	f000 f8ad 	bl	8013944 <SDMMC_GetCmdResp1>
 80137ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80137ec:	69fb      	ldr	r3, [r7, #28]
}
 80137ee:	4618      	mov	r0, r3
 80137f0:	3720      	adds	r7, #32
 80137f2:	46bd      	mov	sp, r7
 80137f4:	bd80      	pop	{r7, pc}

080137f6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80137f6:	b580      	push	{r7, lr}
 80137f8:	b088      	sub	sp, #32
 80137fa:	af00      	add	r7, sp, #0
 80137fc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80137fe:	2300      	movs	r3, #0
 8013800:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8013802:	2302      	movs	r3, #2
 8013804:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8013806:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801380a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801380c:	2300      	movs	r3, #0
 801380e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013810:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013814:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013816:	f107 0308 	add.w	r3, r7, #8
 801381a:	4619      	mov	r1, r3
 801381c:	6878      	ldr	r0, [r7, #4]
 801381e:	f7ff fd9f 	bl	8013360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8013822:	6878      	ldr	r0, [r7, #4]
 8013824:	f000 f980 	bl	8013b28 <SDMMC_GetCmdResp2>
 8013828:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801382a:	69fb      	ldr	r3, [r7, #28]
}
 801382c:	4618      	mov	r0, r3
 801382e:	3720      	adds	r7, #32
 8013830:	46bd      	mov	sp, r7
 8013832:	bd80      	pop	{r7, pc}

08013834 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013834:	b580      	push	{r7, lr}
 8013836:	b088      	sub	sp, #32
 8013838:	af00      	add	r7, sp, #0
 801383a:	6078      	str	r0, [r7, #4]
 801383c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801383e:	683b      	ldr	r3, [r7, #0]
 8013840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8013842:	2309      	movs	r3, #9
 8013844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8013846:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801384a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801384c:	2300      	movs	r3, #0
 801384e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013850:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013854:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013856:	f107 0308 	add.w	r3, r7, #8
 801385a:	4619      	mov	r1, r3
 801385c:	6878      	ldr	r0, [r7, #4]
 801385e:	f7ff fd7f 	bl	8013360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8013862:	6878      	ldr	r0, [r7, #4]
 8013864:	f000 f960 	bl	8013b28 <SDMMC_GetCmdResp2>
 8013868:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801386a:	69fb      	ldr	r3, [r7, #28]
}
 801386c:	4618      	mov	r0, r3
 801386e:	3720      	adds	r7, #32
 8013870:	46bd      	mov	sp, r7
 8013872:	bd80      	pop	{r7, pc}

08013874 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8013874:	b580      	push	{r7, lr}
 8013876:	b088      	sub	sp, #32
 8013878:	af00      	add	r7, sp, #0
 801387a:	6078      	str	r0, [r7, #4]
 801387c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801387e:	2300      	movs	r3, #0
 8013880:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8013882:	2303      	movs	r3, #3
 8013884:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013886:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801388a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801388c:	2300      	movs	r3, #0
 801388e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013890:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013894:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013896:	f107 0308 	add.w	r3, r7, #8
 801389a:	4619      	mov	r1, r3
 801389c:	6878      	ldr	r0, [r7, #4]
 801389e:	f7ff fd5f 	bl	8013360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80138a2:	683a      	ldr	r2, [r7, #0]
 80138a4:	2103      	movs	r1, #3
 80138a6:	6878      	ldr	r0, [r7, #4]
 80138a8:	f000 f9c8 	bl	8013c3c <SDMMC_GetCmdResp6>
 80138ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80138ae:	69fb      	ldr	r3, [r7, #28]
}
 80138b0:	4618      	mov	r0, r3
 80138b2:	3720      	adds	r7, #32
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bd80      	pop	{r7, pc}

080138b8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80138b8:	b580      	push	{r7, lr}
 80138ba:	b088      	sub	sp, #32
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]
 80138c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80138c2:	683b      	ldr	r3, [r7, #0]
 80138c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80138c6:	230d      	movs	r3, #13
 80138c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80138ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80138ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80138d0:	2300      	movs	r3, #0
 80138d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80138d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80138d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80138da:	f107 0308 	add.w	r3, r7, #8
 80138de:	4619      	mov	r1, r3
 80138e0:	6878      	ldr	r0, [r7, #4]
 80138e2:	f7ff fd3d 	bl	8013360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80138e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80138ea:	210d      	movs	r1, #13
 80138ec:	6878      	ldr	r0, [r7, #4]
 80138ee:	f000 f829 	bl	8013944 <SDMMC_GetCmdResp1>
 80138f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80138f4:	69fb      	ldr	r3, [r7, #28]
}
 80138f6:	4618      	mov	r0, r3
 80138f8:	3720      	adds	r7, #32
 80138fa:	46bd      	mov	sp, r7
 80138fc:	bd80      	pop	{r7, pc}

080138fe <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80138fe:	b580      	push	{r7, lr}
 8013900:	b088      	sub	sp, #32
 8013902:	af00      	add	r7, sp, #0
 8013904:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8013906:	2300      	movs	r3, #0
 8013908:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801390a:	230d      	movs	r3, #13
 801390c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801390e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013912:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013914:	2300      	movs	r3, #0
 8013916:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013918:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801391c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801391e:	f107 0308 	add.w	r3, r7, #8
 8013922:	4619      	mov	r1, r3
 8013924:	6878      	ldr	r0, [r7, #4]
 8013926:	f7ff fd1b 	bl	8013360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801392a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801392e:	210d      	movs	r1, #13
 8013930:	6878      	ldr	r0, [r7, #4]
 8013932:	f000 f807 	bl	8013944 <SDMMC_GetCmdResp1>
 8013936:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013938:	69fb      	ldr	r3, [r7, #28]
}
 801393a:	4618      	mov	r0, r3
 801393c:	3720      	adds	r7, #32
 801393e:	46bd      	mov	sp, r7
 8013940:	bd80      	pop	{r7, pc}
	...

08013944 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8013944:	b580      	push	{r7, lr}
 8013946:	b088      	sub	sp, #32
 8013948:	af00      	add	r7, sp, #0
 801394a:	60f8      	str	r0, [r7, #12]
 801394c:	460b      	mov	r3, r1
 801394e:	607a      	str	r2, [r7, #4]
 8013950:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8013952:	4b70      	ldr	r3, [pc, #448]	@ (8013b14 <SDMMC_GetCmdResp1+0x1d0>)
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	4a70      	ldr	r2, [pc, #448]	@ (8013b18 <SDMMC_GetCmdResp1+0x1d4>)
 8013958:	fba2 2303 	umull	r2, r3, r2, r3
 801395c:	0a5a      	lsrs	r2, r3, #9
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	fb02 f303 	mul.w	r3, r2, r3
 8013964:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8013966:	69fb      	ldr	r3, [r7, #28]
 8013968:	1e5a      	subs	r2, r3, #1
 801396a:	61fa      	str	r2, [r7, #28]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d102      	bne.n	8013976 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013970:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013974:	e0c9      	b.n	8013b0a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801397a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 801397c:	69ba      	ldr	r2, [r7, #24]
 801397e:	4b67      	ldr	r3, [pc, #412]	@ (8013b1c <SDMMC_GetCmdResp1+0x1d8>)
 8013980:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013982:	2b00      	cmp	r3, #0
 8013984:	d0ef      	beq.n	8013966 <SDMMC_GetCmdResp1+0x22>
 8013986:	69bb      	ldr	r3, [r7, #24]
 8013988:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801398c:	2b00      	cmp	r3, #0
 801398e:	d1ea      	bne.n	8013966 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013994:	f003 0304 	and.w	r3, r3, #4
 8013998:	2b00      	cmp	r3, #0
 801399a:	d004      	beq.n	80139a6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	2204      	movs	r2, #4
 80139a0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80139a2:	2304      	movs	r3, #4
 80139a4:	e0b1      	b.n	8013b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80139aa:	f003 0301 	and.w	r3, r3, #1
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d004      	beq.n	80139bc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	2201      	movs	r2, #1
 80139b6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80139b8:	2301      	movs	r3, #1
 80139ba:	e0a6      	b.n	8013b0a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	4a58      	ldr	r2, [pc, #352]	@ (8013b20 <SDMMC_GetCmdResp1+0x1dc>)
 80139c0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80139c2:	68f8      	ldr	r0, [r7, #12]
 80139c4:	f7ff fcf6 	bl	80133b4 <SDMMC_GetCommandResponse>
 80139c8:	4603      	mov	r3, r0
 80139ca:	461a      	mov	r2, r3
 80139cc:	7afb      	ldrb	r3, [r7, #11]
 80139ce:	4293      	cmp	r3, r2
 80139d0:	d001      	beq.n	80139d6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80139d2:	2301      	movs	r3, #1
 80139d4:	e099      	b.n	8013b0a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80139d6:	2100      	movs	r1, #0
 80139d8:	68f8      	ldr	r0, [r7, #12]
 80139da:	f7ff fcf8 	bl	80133ce <SDMMC_GetResponse>
 80139de:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80139e0:	697a      	ldr	r2, [r7, #20]
 80139e2:	4b50      	ldr	r3, [pc, #320]	@ (8013b24 <SDMMC_GetCmdResp1+0x1e0>)
 80139e4:	4013      	ands	r3, r2
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d101      	bne.n	80139ee <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80139ea:	2300      	movs	r3, #0
 80139ec:	e08d      	b.n	8013b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80139ee:	697b      	ldr	r3, [r7, #20]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	da02      	bge.n	80139fa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80139f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80139f8:	e087      	b.n	8013b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80139fa:	697b      	ldr	r3, [r7, #20]
 80139fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d001      	beq.n	8013a08 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8013a04:	2340      	movs	r3, #64	@ 0x40
 8013a06:	e080      	b.n	8013b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013a08:	697b      	ldr	r3, [r7, #20]
 8013a0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d001      	beq.n	8013a16 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8013a12:	2380      	movs	r3, #128	@ 0x80
 8013a14:	e079      	b.n	8013b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8013a16:	697b      	ldr	r3, [r7, #20]
 8013a18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d002      	beq.n	8013a26 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013a20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013a24:	e071      	b.n	8013b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8013a26:	697b      	ldr	r3, [r7, #20]
 8013a28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d002      	beq.n	8013a36 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013a30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013a34:	e069      	b.n	8013b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8013a36:	697b      	ldr	r3, [r7, #20]
 8013a38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d002      	beq.n	8013a46 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013a40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013a44:	e061      	b.n	8013b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8013a46:	697b      	ldr	r3, [r7, #20]
 8013a48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d002      	beq.n	8013a56 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013a50:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013a54:	e059      	b.n	8013b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8013a56:	697b      	ldr	r3, [r7, #20]
 8013a58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d002      	beq.n	8013a66 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013a60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013a64:	e051      	b.n	8013b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8013a66:	697b      	ldr	r3, [r7, #20]
 8013a68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d002      	beq.n	8013a76 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013a70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8013a74:	e049      	b.n	8013b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8013a76:	697b      	ldr	r3, [r7, #20]
 8013a78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d002      	beq.n	8013a86 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013a80:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8013a84:	e041      	b.n	8013b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8013a86:	697b      	ldr	r3, [r7, #20]
 8013a88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d002      	beq.n	8013a96 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8013a90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013a94:	e039      	b.n	8013b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8013a96:	697b      	ldr	r3, [r7, #20]
 8013a98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d002      	beq.n	8013aa6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013aa0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8013aa4:	e031      	b.n	8013b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8013aa6:	697b      	ldr	r3, [r7, #20]
 8013aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d002      	beq.n	8013ab6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013ab0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8013ab4:	e029      	b.n	8013b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013ab6:	697b      	ldr	r3, [r7, #20]
 8013ab8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d002      	beq.n	8013ac6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013ac0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8013ac4:	e021      	b.n	8013b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8013ac6:	697b      	ldr	r3, [r7, #20]
 8013ac8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d002      	beq.n	8013ad6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013ad0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8013ad4:	e019      	b.n	8013b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8013ad6:	697b      	ldr	r3, [r7, #20]
 8013ad8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d002      	beq.n	8013ae6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013ae0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8013ae4:	e011      	b.n	8013b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8013ae6:	697b      	ldr	r3, [r7, #20]
 8013ae8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d002      	beq.n	8013af6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8013af0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8013af4:	e009      	b.n	8013b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8013af6:	697b      	ldr	r3, [r7, #20]
 8013af8:	f003 0308 	and.w	r3, r3, #8
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d002      	beq.n	8013b06 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8013b00:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8013b04:	e001      	b.n	8013b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013b06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	3720      	adds	r7, #32
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	bd80      	pop	{r7, pc}
 8013b12:	bf00      	nop
 8013b14:	24000100 	.word	0x24000100
 8013b18:	10624dd3 	.word	0x10624dd3
 8013b1c:	00200045 	.word	0x00200045
 8013b20:	002000c5 	.word	0x002000c5
 8013b24:	fdffe008 	.word	0xfdffe008

08013b28 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8013b28:	b480      	push	{r7}
 8013b2a:	b085      	sub	sp, #20
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013b30:	4b1f      	ldr	r3, [pc, #124]	@ (8013bb0 <SDMMC_GetCmdResp2+0x88>)
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	4a1f      	ldr	r2, [pc, #124]	@ (8013bb4 <SDMMC_GetCmdResp2+0x8c>)
 8013b36:	fba2 2303 	umull	r2, r3, r2, r3
 8013b3a:	0a5b      	lsrs	r3, r3, #9
 8013b3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013b40:	fb02 f303 	mul.w	r3, r2, r3
 8013b44:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	1e5a      	subs	r2, r3, #1
 8013b4a:	60fa      	str	r2, [r7, #12]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d102      	bne.n	8013b56 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013b50:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013b54:	e026      	b.n	8013ba4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013b5a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013b5c:	68bb      	ldr	r3, [r7, #8]
 8013b5e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d0ef      	beq.n	8013b46 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013b66:	68bb      	ldr	r3, [r7, #8]
 8013b68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d1ea      	bne.n	8013b46 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013b74:	f003 0304 	and.w	r3, r3, #4
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d004      	beq.n	8013b86 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	2204      	movs	r2, #4
 8013b80:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013b82:	2304      	movs	r3, #4
 8013b84:	e00e      	b.n	8013ba4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013b8a:	f003 0301 	and.w	r3, r3, #1
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d004      	beq.n	8013b9c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	2201      	movs	r2, #1
 8013b96:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013b98:	2301      	movs	r3, #1
 8013b9a:	e003      	b.n	8013ba4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	4a06      	ldr	r2, [pc, #24]	@ (8013bb8 <SDMMC_GetCmdResp2+0x90>)
 8013ba0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8013ba2:	2300      	movs	r3, #0
}
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	3714      	adds	r7, #20
 8013ba8:	46bd      	mov	sp, r7
 8013baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bae:	4770      	bx	lr
 8013bb0:	24000100 	.word	0x24000100
 8013bb4:	10624dd3 	.word	0x10624dd3
 8013bb8:	002000c5 	.word	0x002000c5

08013bbc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8013bbc:	b480      	push	{r7}
 8013bbe:	b085      	sub	sp, #20
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8013c30 <SDMMC_GetCmdResp3+0x74>)
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	4a1a      	ldr	r2, [pc, #104]	@ (8013c34 <SDMMC_GetCmdResp3+0x78>)
 8013bca:	fba2 2303 	umull	r2, r3, r2, r3
 8013bce:	0a5b      	lsrs	r3, r3, #9
 8013bd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013bd4:	fb02 f303 	mul.w	r3, r2, r3
 8013bd8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	1e5a      	subs	r2, r3, #1
 8013bde:	60fa      	str	r2, [r7, #12]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d102      	bne.n	8013bea <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013be4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013be8:	e01b      	b.n	8013c22 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013bee:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013bf0:	68bb      	ldr	r3, [r7, #8]
 8013bf2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d0ef      	beq.n	8013bda <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013bfa:	68bb      	ldr	r3, [r7, #8]
 8013bfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d1ea      	bne.n	8013bda <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013c08:	f003 0304 	and.w	r3, r3, #4
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d004      	beq.n	8013c1a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	2204      	movs	r2, #4
 8013c14:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013c16:	2304      	movs	r3, #4
 8013c18:	e003      	b.n	8013c22 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	4a06      	ldr	r2, [pc, #24]	@ (8013c38 <SDMMC_GetCmdResp3+0x7c>)
 8013c1e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8013c20:	2300      	movs	r3, #0
}
 8013c22:	4618      	mov	r0, r3
 8013c24:	3714      	adds	r7, #20
 8013c26:	46bd      	mov	sp, r7
 8013c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2c:	4770      	bx	lr
 8013c2e:	bf00      	nop
 8013c30:	24000100 	.word	0x24000100
 8013c34:	10624dd3 	.word	0x10624dd3
 8013c38:	002000c5 	.word	0x002000c5

08013c3c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	b088      	sub	sp, #32
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	60f8      	str	r0, [r7, #12]
 8013c44:	460b      	mov	r3, r1
 8013c46:	607a      	str	r2, [r7, #4]
 8013c48:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013c4a:	4b35      	ldr	r3, [pc, #212]	@ (8013d20 <SDMMC_GetCmdResp6+0xe4>)
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	4a35      	ldr	r2, [pc, #212]	@ (8013d24 <SDMMC_GetCmdResp6+0xe8>)
 8013c50:	fba2 2303 	umull	r2, r3, r2, r3
 8013c54:	0a5b      	lsrs	r3, r3, #9
 8013c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013c5a:	fb02 f303 	mul.w	r3, r2, r3
 8013c5e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8013c60:	69fb      	ldr	r3, [r7, #28]
 8013c62:	1e5a      	subs	r2, r3, #1
 8013c64:	61fa      	str	r2, [r7, #28]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d102      	bne.n	8013c70 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013c6a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013c6e:	e052      	b.n	8013d16 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013c74:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013c76:	69bb      	ldr	r3, [r7, #24]
 8013c78:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d0ef      	beq.n	8013c60 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013c80:	69bb      	ldr	r3, [r7, #24]
 8013c82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d1ea      	bne.n	8013c60 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013c8e:	f003 0304 	and.w	r3, r3, #4
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d004      	beq.n	8013ca0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	2204      	movs	r2, #4
 8013c9a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013c9c:	2304      	movs	r3, #4
 8013c9e:	e03a      	b.n	8013d16 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013ca4:	f003 0301 	and.w	r3, r3, #1
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d004      	beq.n	8013cb6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	2201      	movs	r2, #1
 8013cb0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013cb2:	2301      	movs	r3, #1
 8013cb4:	e02f      	b.n	8013d16 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013cb6:	68f8      	ldr	r0, [r7, #12]
 8013cb8:	f7ff fb7c 	bl	80133b4 <SDMMC_GetCommandResponse>
 8013cbc:	4603      	mov	r3, r0
 8013cbe:	461a      	mov	r2, r3
 8013cc0:	7afb      	ldrb	r3, [r7, #11]
 8013cc2:	4293      	cmp	r3, r2
 8013cc4:	d001      	beq.n	8013cca <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013cc6:	2301      	movs	r3, #1
 8013cc8:	e025      	b.n	8013d16 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	4a16      	ldr	r2, [pc, #88]	@ (8013d28 <SDMMC_GetCmdResp6+0xec>)
 8013cce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013cd0:	2100      	movs	r1, #0
 8013cd2:	68f8      	ldr	r0, [r7, #12]
 8013cd4:	f7ff fb7b 	bl	80133ce <SDMMC_GetResponse>
 8013cd8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8013cda:	697b      	ldr	r3, [r7, #20]
 8013cdc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d106      	bne.n	8013cf2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8013ce4:	697b      	ldr	r3, [r7, #20]
 8013ce6:	0c1b      	lsrs	r3, r3, #16
 8013ce8:	b29a      	uxth	r2, r3
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8013cee:	2300      	movs	r3, #0
 8013cf0:	e011      	b.n	8013d16 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8013cf2:	697b      	ldr	r3, [r7, #20]
 8013cf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d002      	beq.n	8013d02 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013cfc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8013d00:	e009      	b.n	8013d16 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8013d02:	697b      	ldr	r3, [r7, #20]
 8013d04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d002      	beq.n	8013d12 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013d0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013d10:	e001      	b.n	8013d16 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013d12:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8013d16:	4618      	mov	r0, r3
 8013d18:	3720      	adds	r7, #32
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	bd80      	pop	{r7, pc}
 8013d1e:	bf00      	nop
 8013d20:	24000100 	.word	0x24000100
 8013d24:	10624dd3 	.word	0x10624dd3
 8013d28:	002000c5 	.word	0x002000c5

08013d2c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8013d2c:	b480      	push	{r7}
 8013d2e:	b085      	sub	sp, #20
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013d34:	4b22      	ldr	r3, [pc, #136]	@ (8013dc0 <SDMMC_GetCmdResp7+0x94>)
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	4a22      	ldr	r2, [pc, #136]	@ (8013dc4 <SDMMC_GetCmdResp7+0x98>)
 8013d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8013d3e:	0a5b      	lsrs	r3, r3, #9
 8013d40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013d44:	fb02 f303 	mul.w	r3, r2, r3
 8013d48:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	1e5a      	subs	r2, r3, #1
 8013d4e:	60fa      	str	r2, [r7, #12]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d102      	bne.n	8013d5a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013d54:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013d58:	e02c      	b.n	8013db4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013d5e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013d60:	68bb      	ldr	r3, [r7, #8]
 8013d62:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d0ef      	beq.n	8013d4a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013d6a:	68bb      	ldr	r3, [r7, #8]
 8013d6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d1ea      	bne.n	8013d4a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013d78:	f003 0304 	and.w	r3, r3, #4
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d004      	beq.n	8013d8a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	2204      	movs	r2, #4
 8013d84:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013d86:	2304      	movs	r3, #4
 8013d88:	e014      	b.n	8013db4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013d8e:	f003 0301 	and.w	r3, r3, #1
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d004      	beq.n	8013da0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	2201      	movs	r2, #1
 8013d9a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013d9c:	2301      	movs	r3, #1
 8013d9e:	e009      	b.n	8013db4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d002      	beq.n	8013db2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	2240      	movs	r2, #64	@ 0x40
 8013db0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8013db2:	2300      	movs	r3, #0

}
 8013db4:	4618      	mov	r0, r3
 8013db6:	3714      	adds	r7, #20
 8013db8:	46bd      	mov	sp, r7
 8013dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dbe:	4770      	bx	lr
 8013dc0:	24000100 	.word	0x24000100
 8013dc4:	10624dd3 	.word	0x10624dd3

08013dc8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8013dc8:	b480      	push	{r7}
 8013dca:	b085      	sub	sp, #20
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013dd0:	4b11      	ldr	r3, [pc, #68]	@ (8013e18 <SDMMC_GetCmdError+0x50>)
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	4a11      	ldr	r2, [pc, #68]	@ (8013e1c <SDMMC_GetCmdError+0x54>)
 8013dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8013dda:	0a5b      	lsrs	r3, r3, #9
 8013ddc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013de0:	fb02 f303 	mul.w	r3, r2, r3
 8013de4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	1e5a      	subs	r2, r3, #1
 8013dea:	60fa      	str	r2, [r7, #12]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d102      	bne.n	8013df6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013df0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013df4:	e009      	b.n	8013e0a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d0f1      	beq.n	8013de6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	4a06      	ldr	r2, [pc, #24]	@ (8013e20 <SDMMC_GetCmdError+0x58>)
 8013e06:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8013e08:	2300      	movs	r3, #0
}
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	3714      	adds	r7, #20
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e14:	4770      	bx	lr
 8013e16:	bf00      	nop
 8013e18:	24000100 	.word	0x24000100
 8013e1c:	10624dd3 	.word	0x10624dd3
 8013e20:	002000c5 	.word	0x002000c5

08013e24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013e24:	b084      	sub	sp, #16
 8013e26:	b580      	push	{r7, lr}
 8013e28:	b084      	sub	sp, #16
 8013e2a:	af00      	add	r7, sp, #0
 8013e2c:	6078      	str	r0, [r7, #4]
 8013e2e:	f107 001c 	add.w	r0, r7, #28
 8013e32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e38:	2b01      	cmp	r3, #1
 8013e3a:	d120      	bne.n	8013e7e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e40:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	68da      	ldr	r2, [r3, #12]
 8013e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8013ef8 <USB_CoreInit+0xd4>)
 8013e4e:	4013      	ands	r3, r2
 8013e50:	687a      	ldr	r2, [r7, #4]
 8013e52:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	68db      	ldr	r3, [r3, #12]
 8013e58:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8013e60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e62:	2b01      	cmp	r3, #1
 8013e64:	d105      	bne.n	8013e72 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	68db      	ldr	r3, [r3, #12]
 8013e6a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013e72:	6878      	ldr	r0, [r7, #4]
 8013e74:	f001 faf8 	bl	8015468 <USB_CoreReset>
 8013e78:	4603      	mov	r3, r0
 8013e7a:	73fb      	strb	r3, [r7, #15]
 8013e7c:	e01a      	b.n	8013eb4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	68db      	ldr	r3, [r3, #12]
 8013e82:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013e8a:	6878      	ldr	r0, [r7, #4]
 8013e8c:	f001 faec 	bl	8015468 <USB_CoreReset>
 8013e90:	4603      	mov	r3, r0
 8013e92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8013e94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d106      	bne.n	8013ea8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e9e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	639a      	str	r2, [r3, #56]	@ 0x38
 8013ea6:	e005      	b.n	8013eb4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013eac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8013eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eb6:	2b01      	cmp	r3, #1
 8013eb8:	d116      	bne.n	8013ee8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013ebe:	b29a      	uxth	r2, r3
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8013ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8013efc <USB_CoreInit+0xd8>)
 8013eca:	4313      	orrs	r3, r2
 8013ecc:	687a      	ldr	r2, [r7, #4]
 8013ece:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	689b      	ldr	r3, [r3, #8]
 8013ed4:	f043 0206 	orr.w	r2, r3, #6
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	689b      	ldr	r3, [r3, #8]
 8013ee0:	f043 0220 	orr.w	r2, r3, #32
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8013ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8013eea:	4618      	mov	r0, r3
 8013eec:	3710      	adds	r7, #16
 8013eee:	46bd      	mov	sp, r7
 8013ef0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013ef4:	b004      	add	sp, #16
 8013ef6:	4770      	bx	lr
 8013ef8:	ffbdffbf 	.word	0xffbdffbf
 8013efc:	03ee0000 	.word	0x03ee0000

08013f00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8013f00:	b480      	push	{r7}
 8013f02:	b087      	sub	sp, #28
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	60f8      	str	r0, [r7, #12]
 8013f08:	60b9      	str	r1, [r7, #8]
 8013f0a:	4613      	mov	r3, r2
 8013f0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8013f0e:	79fb      	ldrb	r3, [r7, #7]
 8013f10:	2b02      	cmp	r3, #2
 8013f12:	d165      	bne.n	8013fe0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8013f14:	68bb      	ldr	r3, [r7, #8]
 8013f16:	4a41      	ldr	r2, [pc, #260]	@ (801401c <USB_SetTurnaroundTime+0x11c>)
 8013f18:	4293      	cmp	r3, r2
 8013f1a:	d906      	bls.n	8013f2a <USB_SetTurnaroundTime+0x2a>
 8013f1c:	68bb      	ldr	r3, [r7, #8]
 8013f1e:	4a40      	ldr	r2, [pc, #256]	@ (8014020 <USB_SetTurnaroundTime+0x120>)
 8013f20:	4293      	cmp	r3, r2
 8013f22:	d202      	bcs.n	8013f2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8013f24:	230f      	movs	r3, #15
 8013f26:	617b      	str	r3, [r7, #20]
 8013f28:	e062      	b.n	8013ff0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8013f2a:	68bb      	ldr	r3, [r7, #8]
 8013f2c:	4a3c      	ldr	r2, [pc, #240]	@ (8014020 <USB_SetTurnaroundTime+0x120>)
 8013f2e:	4293      	cmp	r3, r2
 8013f30:	d306      	bcc.n	8013f40 <USB_SetTurnaroundTime+0x40>
 8013f32:	68bb      	ldr	r3, [r7, #8]
 8013f34:	4a3b      	ldr	r2, [pc, #236]	@ (8014024 <USB_SetTurnaroundTime+0x124>)
 8013f36:	4293      	cmp	r3, r2
 8013f38:	d202      	bcs.n	8013f40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8013f3a:	230e      	movs	r3, #14
 8013f3c:	617b      	str	r3, [r7, #20]
 8013f3e:	e057      	b.n	8013ff0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8013f40:	68bb      	ldr	r3, [r7, #8]
 8013f42:	4a38      	ldr	r2, [pc, #224]	@ (8014024 <USB_SetTurnaroundTime+0x124>)
 8013f44:	4293      	cmp	r3, r2
 8013f46:	d306      	bcc.n	8013f56 <USB_SetTurnaroundTime+0x56>
 8013f48:	68bb      	ldr	r3, [r7, #8]
 8013f4a:	4a37      	ldr	r2, [pc, #220]	@ (8014028 <USB_SetTurnaroundTime+0x128>)
 8013f4c:	4293      	cmp	r3, r2
 8013f4e:	d202      	bcs.n	8013f56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8013f50:	230d      	movs	r3, #13
 8013f52:	617b      	str	r3, [r7, #20]
 8013f54:	e04c      	b.n	8013ff0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8013f56:	68bb      	ldr	r3, [r7, #8]
 8013f58:	4a33      	ldr	r2, [pc, #204]	@ (8014028 <USB_SetTurnaroundTime+0x128>)
 8013f5a:	4293      	cmp	r3, r2
 8013f5c:	d306      	bcc.n	8013f6c <USB_SetTurnaroundTime+0x6c>
 8013f5e:	68bb      	ldr	r3, [r7, #8]
 8013f60:	4a32      	ldr	r2, [pc, #200]	@ (801402c <USB_SetTurnaroundTime+0x12c>)
 8013f62:	4293      	cmp	r3, r2
 8013f64:	d802      	bhi.n	8013f6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8013f66:	230c      	movs	r3, #12
 8013f68:	617b      	str	r3, [r7, #20]
 8013f6a:	e041      	b.n	8013ff0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8013f6c:	68bb      	ldr	r3, [r7, #8]
 8013f6e:	4a2f      	ldr	r2, [pc, #188]	@ (801402c <USB_SetTurnaroundTime+0x12c>)
 8013f70:	4293      	cmp	r3, r2
 8013f72:	d906      	bls.n	8013f82 <USB_SetTurnaroundTime+0x82>
 8013f74:	68bb      	ldr	r3, [r7, #8]
 8013f76:	4a2e      	ldr	r2, [pc, #184]	@ (8014030 <USB_SetTurnaroundTime+0x130>)
 8013f78:	4293      	cmp	r3, r2
 8013f7a:	d802      	bhi.n	8013f82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8013f7c:	230b      	movs	r3, #11
 8013f7e:	617b      	str	r3, [r7, #20]
 8013f80:	e036      	b.n	8013ff0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8013f82:	68bb      	ldr	r3, [r7, #8]
 8013f84:	4a2a      	ldr	r2, [pc, #168]	@ (8014030 <USB_SetTurnaroundTime+0x130>)
 8013f86:	4293      	cmp	r3, r2
 8013f88:	d906      	bls.n	8013f98 <USB_SetTurnaroundTime+0x98>
 8013f8a:	68bb      	ldr	r3, [r7, #8]
 8013f8c:	4a29      	ldr	r2, [pc, #164]	@ (8014034 <USB_SetTurnaroundTime+0x134>)
 8013f8e:	4293      	cmp	r3, r2
 8013f90:	d802      	bhi.n	8013f98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8013f92:	230a      	movs	r3, #10
 8013f94:	617b      	str	r3, [r7, #20]
 8013f96:	e02b      	b.n	8013ff0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8013f98:	68bb      	ldr	r3, [r7, #8]
 8013f9a:	4a26      	ldr	r2, [pc, #152]	@ (8014034 <USB_SetTurnaroundTime+0x134>)
 8013f9c:	4293      	cmp	r3, r2
 8013f9e:	d906      	bls.n	8013fae <USB_SetTurnaroundTime+0xae>
 8013fa0:	68bb      	ldr	r3, [r7, #8]
 8013fa2:	4a25      	ldr	r2, [pc, #148]	@ (8014038 <USB_SetTurnaroundTime+0x138>)
 8013fa4:	4293      	cmp	r3, r2
 8013fa6:	d202      	bcs.n	8013fae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8013fa8:	2309      	movs	r3, #9
 8013faa:	617b      	str	r3, [r7, #20]
 8013fac:	e020      	b.n	8013ff0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8013fae:	68bb      	ldr	r3, [r7, #8]
 8013fb0:	4a21      	ldr	r2, [pc, #132]	@ (8014038 <USB_SetTurnaroundTime+0x138>)
 8013fb2:	4293      	cmp	r3, r2
 8013fb4:	d306      	bcc.n	8013fc4 <USB_SetTurnaroundTime+0xc4>
 8013fb6:	68bb      	ldr	r3, [r7, #8]
 8013fb8:	4a20      	ldr	r2, [pc, #128]	@ (801403c <USB_SetTurnaroundTime+0x13c>)
 8013fba:	4293      	cmp	r3, r2
 8013fbc:	d802      	bhi.n	8013fc4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8013fbe:	2308      	movs	r3, #8
 8013fc0:	617b      	str	r3, [r7, #20]
 8013fc2:	e015      	b.n	8013ff0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8013fc4:	68bb      	ldr	r3, [r7, #8]
 8013fc6:	4a1d      	ldr	r2, [pc, #116]	@ (801403c <USB_SetTurnaroundTime+0x13c>)
 8013fc8:	4293      	cmp	r3, r2
 8013fca:	d906      	bls.n	8013fda <USB_SetTurnaroundTime+0xda>
 8013fcc:	68bb      	ldr	r3, [r7, #8]
 8013fce:	4a1c      	ldr	r2, [pc, #112]	@ (8014040 <USB_SetTurnaroundTime+0x140>)
 8013fd0:	4293      	cmp	r3, r2
 8013fd2:	d202      	bcs.n	8013fda <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8013fd4:	2307      	movs	r3, #7
 8013fd6:	617b      	str	r3, [r7, #20]
 8013fd8:	e00a      	b.n	8013ff0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8013fda:	2306      	movs	r3, #6
 8013fdc:	617b      	str	r3, [r7, #20]
 8013fde:	e007      	b.n	8013ff0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8013fe0:	79fb      	ldrb	r3, [r7, #7]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d102      	bne.n	8013fec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8013fe6:	2309      	movs	r3, #9
 8013fe8:	617b      	str	r3, [r7, #20]
 8013fea:	e001      	b.n	8013ff0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8013fec:	2309      	movs	r3, #9
 8013fee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	68db      	ldr	r3, [r3, #12]
 8013ff4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	68da      	ldr	r2, [r3, #12]
 8014000:	697b      	ldr	r3, [r7, #20]
 8014002:	029b      	lsls	r3, r3, #10
 8014004:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8014008:	431a      	orrs	r2, r3
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801400e:	2300      	movs	r3, #0
}
 8014010:	4618      	mov	r0, r3
 8014012:	371c      	adds	r7, #28
 8014014:	46bd      	mov	sp, r7
 8014016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801401a:	4770      	bx	lr
 801401c:	00d8acbf 	.word	0x00d8acbf
 8014020:	00e4e1c0 	.word	0x00e4e1c0
 8014024:	00f42400 	.word	0x00f42400
 8014028:	01067380 	.word	0x01067380
 801402c:	011a499f 	.word	0x011a499f
 8014030:	01312cff 	.word	0x01312cff
 8014034:	014ca43f 	.word	0x014ca43f
 8014038:	016e3600 	.word	0x016e3600
 801403c:	01a6ab1f 	.word	0x01a6ab1f
 8014040:	01e84800 	.word	0x01e84800

08014044 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014044:	b480      	push	{r7}
 8014046:	b083      	sub	sp, #12
 8014048:	af00      	add	r7, sp, #0
 801404a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	689b      	ldr	r3, [r3, #8]
 8014050:	f043 0201 	orr.w	r2, r3, #1
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014058:	2300      	movs	r3, #0
}
 801405a:	4618      	mov	r0, r3
 801405c:	370c      	adds	r7, #12
 801405e:	46bd      	mov	sp, r7
 8014060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014064:	4770      	bx	lr

08014066 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014066:	b480      	push	{r7}
 8014068:	b083      	sub	sp, #12
 801406a:	af00      	add	r7, sp, #0
 801406c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	689b      	ldr	r3, [r3, #8]
 8014072:	f023 0201 	bic.w	r2, r3, #1
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801407a:	2300      	movs	r3, #0
}
 801407c:	4618      	mov	r0, r3
 801407e:	370c      	adds	r7, #12
 8014080:	46bd      	mov	sp, r7
 8014082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014086:	4770      	bx	lr

08014088 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8014088:	b580      	push	{r7, lr}
 801408a:	b084      	sub	sp, #16
 801408c:	af00      	add	r7, sp, #0
 801408e:	6078      	str	r0, [r7, #4]
 8014090:	460b      	mov	r3, r1
 8014092:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8014094:	2300      	movs	r3, #0
 8014096:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	68db      	ldr	r3, [r3, #12]
 801409c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80140a4:	78fb      	ldrb	r3, [r7, #3]
 80140a6:	2b01      	cmp	r3, #1
 80140a8:	d115      	bne.n	80140d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	68db      	ldr	r3, [r3, #12]
 80140ae:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80140b6:	2001      	movs	r0, #1
 80140b8:	f7f0 f8ac 	bl	8004214 <HAL_Delay>
      ms++;
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	3301      	adds	r3, #1
 80140c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80140c2:	6878      	ldr	r0, [r7, #4]
 80140c4:	f001 f93f 	bl	8015346 <USB_GetMode>
 80140c8:	4603      	mov	r3, r0
 80140ca:	2b01      	cmp	r3, #1
 80140cc:	d01e      	beq.n	801410c <USB_SetCurrentMode+0x84>
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	2b31      	cmp	r3, #49	@ 0x31
 80140d2:	d9f0      	bls.n	80140b6 <USB_SetCurrentMode+0x2e>
 80140d4:	e01a      	b.n	801410c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80140d6:	78fb      	ldrb	r3, [r7, #3]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d115      	bne.n	8014108 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	68db      	ldr	r3, [r3, #12]
 80140e0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80140e8:	2001      	movs	r0, #1
 80140ea:	f7f0 f893 	bl	8004214 <HAL_Delay>
      ms++;
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	3301      	adds	r3, #1
 80140f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80140f4:	6878      	ldr	r0, [r7, #4]
 80140f6:	f001 f926 	bl	8015346 <USB_GetMode>
 80140fa:	4603      	mov	r3, r0
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d005      	beq.n	801410c <USB_SetCurrentMode+0x84>
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	2b31      	cmp	r3, #49	@ 0x31
 8014104:	d9f0      	bls.n	80140e8 <USB_SetCurrentMode+0x60>
 8014106:	e001      	b.n	801410c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8014108:	2301      	movs	r3, #1
 801410a:	e005      	b.n	8014118 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	2b32      	cmp	r3, #50	@ 0x32
 8014110:	d101      	bne.n	8014116 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8014112:	2301      	movs	r3, #1
 8014114:	e000      	b.n	8014118 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8014116:	2300      	movs	r3, #0
}
 8014118:	4618      	mov	r0, r3
 801411a:	3710      	adds	r7, #16
 801411c:	46bd      	mov	sp, r7
 801411e:	bd80      	pop	{r7, pc}

08014120 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014120:	b084      	sub	sp, #16
 8014122:	b580      	push	{r7, lr}
 8014124:	b086      	sub	sp, #24
 8014126:	af00      	add	r7, sp, #0
 8014128:	6078      	str	r0, [r7, #4]
 801412a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801412e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8014132:	2300      	movs	r3, #0
 8014134:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801413a:	2300      	movs	r3, #0
 801413c:	613b      	str	r3, [r7, #16]
 801413e:	e009      	b.n	8014154 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8014140:	687a      	ldr	r2, [r7, #4]
 8014142:	693b      	ldr	r3, [r7, #16]
 8014144:	3340      	adds	r3, #64	@ 0x40
 8014146:	009b      	lsls	r3, r3, #2
 8014148:	4413      	add	r3, r2
 801414a:	2200      	movs	r2, #0
 801414c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801414e:	693b      	ldr	r3, [r7, #16]
 8014150:	3301      	adds	r3, #1
 8014152:	613b      	str	r3, [r7, #16]
 8014154:	693b      	ldr	r3, [r7, #16]
 8014156:	2b0e      	cmp	r3, #14
 8014158:	d9f2      	bls.n	8014140 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801415a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801415c:	2b00      	cmp	r3, #0
 801415e:	d11c      	bne.n	801419a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014166:	685b      	ldr	r3, [r3, #4]
 8014168:	68fa      	ldr	r2, [r7, #12]
 801416a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801416e:	f043 0302 	orr.w	r3, r3, #2
 8014172:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014178:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	601a      	str	r2, [r3, #0]
 8014198:	e005      	b.n	80141a6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801419e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80141ac:	461a      	mov	r2, r3
 80141ae:	2300      	movs	r3, #0
 80141b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80141b8:	4619      	mov	r1, r3
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80141c0:	461a      	mov	r2, r3
 80141c2:	680b      	ldr	r3, [r1, #0]
 80141c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80141c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141c8:	2b01      	cmp	r3, #1
 80141ca:	d10c      	bne.n	80141e6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80141cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d104      	bne.n	80141dc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80141d2:	2100      	movs	r1, #0
 80141d4:	6878      	ldr	r0, [r7, #4]
 80141d6:	f000 f965 	bl	80144a4 <USB_SetDevSpeed>
 80141da:	e008      	b.n	80141ee <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80141dc:	2101      	movs	r1, #1
 80141de:	6878      	ldr	r0, [r7, #4]
 80141e0:	f000 f960 	bl	80144a4 <USB_SetDevSpeed>
 80141e4:	e003      	b.n	80141ee <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80141e6:	2103      	movs	r1, #3
 80141e8:	6878      	ldr	r0, [r7, #4]
 80141ea:	f000 f95b 	bl	80144a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80141ee:	2110      	movs	r1, #16
 80141f0:	6878      	ldr	r0, [r7, #4]
 80141f2:	f000 f8f3 	bl	80143dc <USB_FlushTxFifo>
 80141f6:	4603      	mov	r3, r0
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d001      	beq.n	8014200 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80141fc:	2301      	movs	r3, #1
 80141fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8014200:	6878      	ldr	r0, [r7, #4]
 8014202:	f000 f91f 	bl	8014444 <USB_FlushRxFifo>
 8014206:	4603      	mov	r3, r0
 8014208:	2b00      	cmp	r3, #0
 801420a:	d001      	beq.n	8014210 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 801420c:	2301      	movs	r3, #1
 801420e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014216:	461a      	mov	r2, r3
 8014218:	2300      	movs	r3, #0
 801421a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014222:	461a      	mov	r2, r3
 8014224:	2300      	movs	r3, #0
 8014226:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801422e:	461a      	mov	r2, r3
 8014230:	2300      	movs	r3, #0
 8014232:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014234:	2300      	movs	r3, #0
 8014236:	613b      	str	r3, [r7, #16]
 8014238:	e043      	b.n	80142c2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801423a:	693b      	ldr	r3, [r7, #16]
 801423c:	015a      	lsls	r2, r3, #5
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	4413      	add	r3, r2
 8014242:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801424c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014250:	d118      	bne.n	8014284 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8014252:	693b      	ldr	r3, [r7, #16]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d10a      	bne.n	801426e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8014258:	693b      	ldr	r3, [r7, #16]
 801425a:	015a      	lsls	r2, r3, #5
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	4413      	add	r3, r2
 8014260:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014264:	461a      	mov	r2, r3
 8014266:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801426a:	6013      	str	r3, [r2, #0]
 801426c:	e013      	b.n	8014296 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801426e:	693b      	ldr	r3, [r7, #16]
 8014270:	015a      	lsls	r2, r3, #5
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	4413      	add	r3, r2
 8014276:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801427a:	461a      	mov	r2, r3
 801427c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8014280:	6013      	str	r3, [r2, #0]
 8014282:	e008      	b.n	8014296 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8014284:	693b      	ldr	r3, [r7, #16]
 8014286:	015a      	lsls	r2, r3, #5
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	4413      	add	r3, r2
 801428c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014290:	461a      	mov	r2, r3
 8014292:	2300      	movs	r3, #0
 8014294:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8014296:	693b      	ldr	r3, [r7, #16]
 8014298:	015a      	lsls	r2, r3, #5
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	4413      	add	r3, r2
 801429e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80142a2:	461a      	mov	r2, r3
 80142a4:	2300      	movs	r3, #0
 80142a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80142a8:	693b      	ldr	r3, [r7, #16]
 80142aa:	015a      	lsls	r2, r3, #5
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	4413      	add	r3, r2
 80142b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80142b4:	461a      	mov	r2, r3
 80142b6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80142ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80142bc:	693b      	ldr	r3, [r7, #16]
 80142be:	3301      	adds	r3, #1
 80142c0:	613b      	str	r3, [r7, #16]
 80142c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142c4:	693a      	ldr	r2, [r7, #16]
 80142c6:	429a      	cmp	r2, r3
 80142c8:	d3b7      	bcc.n	801423a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80142ca:	2300      	movs	r3, #0
 80142cc:	613b      	str	r3, [r7, #16]
 80142ce:	e043      	b.n	8014358 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80142d0:	693b      	ldr	r3, [r7, #16]
 80142d2:	015a      	lsls	r2, r3, #5
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	4413      	add	r3, r2
 80142d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80142e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80142e6:	d118      	bne.n	801431a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80142e8:	693b      	ldr	r3, [r7, #16]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d10a      	bne.n	8014304 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80142ee:	693b      	ldr	r3, [r7, #16]
 80142f0:	015a      	lsls	r2, r3, #5
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	4413      	add	r3, r2
 80142f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80142fa:	461a      	mov	r2, r3
 80142fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8014300:	6013      	str	r3, [r2, #0]
 8014302:	e013      	b.n	801432c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8014304:	693b      	ldr	r3, [r7, #16]
 8014306:	015a      	lsls	r2, r3, #5
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	4413      	add	r3, r2
 801430c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014310:	461a      	mov	r2, r3
 8014312:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8014316:	6013      	str	r3, [r2, #0]
 8014318:	e008      	b.n	801432c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801431a:	693b      	ldr	r3, [r7, #16]
 801431c:	015a      	lsls	r2, r3, #5
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	4413      	add	r3, r2
 8014322:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014326:	461a      	mov	r2, r3
 8014328:	2300      	movs	r3, #0
 801432a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801432c:	693b      	ldr	r3, [r7, #16]
 801432e:	015a      	lsls	r2, r3, #5
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	4413      	add	r3, r2
 8014334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014338:	461a      	mov	r2, r3
 801433a:	2300      	movs	r3, #0
 801433c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801433e:	693b      	ldr	r3, [r7, #16]
 8014340:	015a      	lsls	r2, r3, #5
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	4413      	add	r3, r2
 8014346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801434a:	461a      	mov	r2, r3
 801434c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8014350:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014352:	693b      	ldr	r3, [r7, #16]
 8014354:	3301      	adds	r3, #1
 8014356:	613b      	str	r3, [r7, #16]
 8014358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801435a:	693a      	ldr	r2, [r7, #16]
 801435c:	429a      	cmp	r2, r3
 801435e:	d3b7      	bcc.n	80142d0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014366:	691b      	ldr	r3, [r3, #16]
 8014368:	68fa      	ldr	r2, [r7, #12]
 801436a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801436e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014372:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	2200      	movs	r2, #0
 8014378:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8014380:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8014382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014384:	2b00      	cmp	r3, #0
 8014386:	d105      	bne.n	8014394 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	699b      	ldr	r3, [r3, #24]
 801438c:	f043 0210 	orr.w	r2, r3, #16
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	699a      	ldr	r2, [r3, #24]
 8014398:	4b0e      	ldr	r3, [pc, #56]	@ (80143d4 <USB_DevInit+0x2b4>)
 801439a:	4313      	orrs	r3, r2
 801439c:	687a      	ldr	r2, [r7, #4]
 801439e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80143a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d005      	beq.n	80143b2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	699b      	ldr	r3, [r3, #24]
 80143aa:	f043 0208 	orr.w	r2, r3, #8
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80143b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80143b4:	2b01      	cmp	r3, #1
 80143b6:	d105      	bne.n	80143c4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	699a      	ldr	r2, [r3, #24]
 80143bc:	4b06      	ldr	r3, [pc, #24]	@ (80143d8 <USB_DevInit+0x2b8>)
 80143be:	4313      	orrs	r3, r2
 80143c0:	687a      	ldr	r2, [r7, #4]
 80143c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80143c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80143c6:	4618      	mov	r0, r3
 80143c8:	3718      	adds	r7, #24
 80143ca:	46bd      	mov	sp, r7
 80143cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80143d0:	b004      	add	sp, #16
 80143d2:	4770      	bx	lr
 80143d4:	803c3800 	.word	0x803c3800
 80143d8:	40000004 	.word	0x40000004

080143dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80143dc:	b480      	push	{r7}
 80143de:	b085      	sub	sp, #20
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	6078      	str	r0, [r7, #4]
 80143e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80143e6:	2300      	movs	r3, #0
 80143e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	3301      	adds	r3, #1
 80143ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	4a13      	ldr	r2, [pc, #76]	@ (8014440 <USB_FlushTxFifo+0x64>)
 80143f4:	4293      	cmp	r3, r2
 80143f6:	d901      	bls.n	80143fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80143f8:	2303      	movs	r3, #3
 80143fa:	e01b      	b.n	8014434 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	691b      	ldr	r3, [r3, #16]
 8014400:	2b00      	cmp	r3, #0
 8014402:	daf2      	bge.n	80143ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8014404:	2300      	movs	r3, #0
 8014406:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014408:	683b      	ldr	r3, [r7, #0]
 801440a:	019b      	lsls	r3, r3, #6
 801440c:	f043 0220 	orr.w	r2, r3, #32
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	3301      	adds	r3, #1
 8014418:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	4a08      	ldr	r2, [pc, #32]	@ (8014440 <USB_FlushTxFifo+0x64>)
 801441e:	4293      	cmp	r3, r2
 8014420:	d901      	bls.n	8014426 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8014422:	2303      	movs	r3, #3
 8014424:	e006      	b.n	8014434 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	691b      	ldr	r3, [r3, #16]
 801442a:	f003 0320 	and.w	r3, r3, #32
 801442e:	2b20      	cmp	r3, #32
 8014430:	d0f0      	beq.n	8014414 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8014432:	2300      	movs	r3, #0
}
 8014434:	4618      	mov	r0, r3
 8014436:	3714      	adds	r7, #20
 8014438:	46bd      	mov	sp, r7
 801443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801443e:	4770      	bx	lr
 8014440:	00030d40 	.word	0x00030d40

08014444 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8014444:	b480      	push	{r7}
 8014446:	b085      	sub	sp, #20
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801444c:	2300      	movs	r3, #0
 801444e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	3301      	adds	r3, #1
 8014454:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	4a11      	ldr	r2, [pc, #68]	@ (80144a0 <USB_FlushRxFifo+0x5c>)
 801445a:	4293      	cmp	r3, r2
 801445c:	d901      	bls.n	8014462 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801445e:	2303      	movs	r3, #3
 8014460:	e018      	b.n	8014494 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	691b      	ldr	r3, [r3, #16]
 8014466:	2b00      	cmp	r3, #0
 8014468:	daf2      	bge.n	8014450 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801446a:	2300      	movs	r3, #0
 801446c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	2210      	movs	r2, #16
 8014472:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	3301      	adds	r3, #1
 8014478:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	4a08      	ldr	r2, [pc, #32]	@ (80144a0 <USB_FlushRxFifo+0x5c>)
 801447e:	4293      	cmp	r3, r2
 8014480:	d901      	bls.n	8014486 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8014482:	2303      	movs	r3, #3
 8014484:	e006      	b.n	8014494 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	691b      	ldr	r3, [r3, #16]
 801448a:	f003 0310 	and.w	r3, r3, #16
 801448e:	2b10      	cmp	r3, #16
 8014490:	d0f0      	beq.n	8014474 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8014492:	2300      	movs	r3, #0
}
 8014494:	4618      	mov	r0, r3
 8014496:	3714      	adds	r7, #20
 8014498:	46bd      	mov	sp, r7
 801449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449e:	4770      	bx	lr
 80144a0:	00030d40 	.word	0x00030d40

080144a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80144a4:	b480      	push	{r7}
 80144a6:	b085      	sub	sp, #20
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
 80144ac:	460b      	mov	r3, r1
 80144ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80144ba:	681a      	ldr	r2, [r3, #0]
 80144bc:	78fb      	ldrb	r3, [r7, #3]
 80144be:	68f9      	ldr	r1, [r7, #12]
 80144c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80144c4:	4313      	orrs	r3, r2
 80144c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80144c8:	2300      	movs	r3, #0
}
 80144ca:	4618      	mov	r0, r3
 80144cc:	3714      	adds	r7, #20
 80144ce:	46bd      	mov	sp, r7
 80144d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d4:	4770      	bx	lr

080144d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80144d6:	b480      	push	{r7}
 80144d8:	b087      	sub	sp, #28
 80144da:	af00      	add	r7, sp, #0
 80144dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80144e2:	693b      	ldr	r3, [r7, #16]
 80144e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80144e8:	689b      	ldr	r3, [r3, #8]
 80144ea:	f003 0306 	and.w	r3, r3, #6
 80144ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d102      	bne.n	80144fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80144f6:	2300      	movs	r3, #0
 80144f8:	75fb      	strb	r3, [r7, #23]
 80144fa:	e00a      	b.n	8014512 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	2b02      	cmp	r3, #2
 8014500:	d002      	beq.n	8014508 <USB_GetDevSpeed+0x32>
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	2b06      	cmp	r3, #6
 8014506:	d102      	bne.n	801450e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8014508:	2302      	movs	r3, #2
 801450a:	75fb      	strb	r3, [r7, #23]
 801450c:	e001      	b.n	8014512 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801450e:	230f      	movs	r3, #15
 8014510:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8014512:	7dfb      	ldrb	r3, [r7, #23]
}
 8014514:	4618      	mov	r0, r3
 8014516:	371c      	adds	r7, #28
 8014518:	46bd      	mov	sp, r7
 801451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801451e:	4770      	bx	lr

08014520 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014520:	b480      	push	{r7}
 8014522:	b085      	sub	sp, #20
 8014524:	af00      	add	r7, sp, #0
 8014526:	6078      	str	r0, [r7, #4]
 8014528:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801452e:	683b      	ldr	r3, [r7, #0]
 8014530:	781b      	ldrb	r3, [r3, #0]
 8014532:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014534:	683b      	ldr	r3, [r7, #0]
 8014536:	785b      	ldrb	r3, [r3, #1]
 8014538:	2b01      	cmp	r3, #1
 801453a:	d139      	bne.n	80145b0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014542:	69da      	ldr	r2, [r3, #28]
 8014544:	683b      	ldr	r3, [r7, #0]
 8014546:	781b      	ldrb	r3, [r3, #0]
 8014548:	f003 030f 	and.w	r3, r3, #15
 801454c:	2101      	movs	r1, #1
 801454e:	fa01 f303 	lsl.w	r3, r1, r3
 8014552:	b29b      	uxth	r3, r3
 8014554:	68f9      	ldr	r1, [r7, #12]
 8014556:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801455a:	4313      	orrs	r3, r2
 801455c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801455e:	68bb      	ldr	r3, [r7, #8]
 8014560:	015a      	lsls	r2, r3, #5
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	4413      	add	r3, r2
 8014566:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014570:	2b00      	cmp	r3, #0
 8014572:	d153      	bne.n	801461c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014574:	68bb      	ldr	r3, [r7, #8]
 8014576:	015a      	lsls	r2, r3, #5
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	4413      	add	r3, r2
 801457c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014580:	681a      	ldr	r2, [r3, #0]
 8014582:	683b      	ldr	r3, [r7, #0]
 8014584:	689b      	ldr	r3, [r3, #8]
 8014586:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801458a:	683b      	ldr	r3, [r7, #0]
 801458c:	791b      	ldrb	r3, [r3, #4]
 801458e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014590:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014592:	68bb      	ldr	r3, [r7, #8]
 8014594:	059b      	lsls	r3, r3, #22
 8014596:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014598:	431a      	orrs	r2, r3
 801459a:	68bb      	ldr	r3, [r7, #8]
 801459c:	0159      	lsls	r1, r3, #5
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	440b      	add	r3, r1
 80145a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80145a6:	4619      	mov	r1, r3
 80145a8:	4b20      	ldr	r3, [pc, #128]	@ (801462c <USB_ActivateEndpoint+0x10c>)
 80145aa:	4313      	orrs	r3, r2
 80145ac:	600b      	str	r3, [r1, #0]
 80145ae:	e035      	b.n	801461c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80145b6:	69da      	ldr	r2, [r3, #28]
 80145b8:	683b      	ldr	r3, [r7, #0]
 80145ba:	781b      	ldrb	r3, [r3, #0]
 80145bc:	f003 030f 	and.w	r3, r3, #15
 80145c0:	2101      	movs	r1, #1
 80145c2:	fa01 f303 	lsl.w	r3, r1, r3
 80145c6:	041b      	lsls	r3, r3, #16
 80145c8:	68f9      	ldr	r1, [r7, #12]
 80145ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80145ce:	4313      	orrs	r3, r2
 80145d0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80145d2:	68bb      	ldr	r3, [r7, #8]
 80145d4:	015a      	lsls	r2, r3, #5
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	4413      	add	r3, r2
 80145da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d119      	bne.n	801461c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80145e8:	68bb      	ldr	r3, [r7, #8]
 80145ea:	015a      	lsls	r2, r3, #5
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	4413      	add	r3, r2
 80145f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80145f4:	681a      	ldr	r2, [r3, #0]
 80145f6:	683b      	ldr	r3, [r7, #0]
 80145f8:	689b      	ldr	r3, [r3, #8]
 80145fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80145fe:	683b      	ldr	r3, [r7, #0]
 8014600:	791b      	ldrb	r3, [r3, #4]
 8014602:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014604:	430b      	orrs	r3, r1
 8014606:	431a      	orrs	r2, r3
 8014608:	68bb      	ldr	r3, [r7, #8]
 801460a:	0159      	lsls	r1, r3, #5
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	440b      	add	r3, r1
 8014610:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014614:	4619      	mov	r1, r3
 8014616:	4b05      	ldr	r3, [pc, #20]	@ (801462c <USB_ActivateEndpoint+0x10c>)
 8014618:	4313      	orrs	r3, r2
 801461a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801461c:	2300      	movs	r3, #0
}
 801461e:	4618      	mov	r0, r3
 8014620:	3714      	adds	r7, #20
 8014622:	46bd      	mov	sp, r7
 8014624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014628:	4770      	bx	lr
 801462a:	bf00      	nop
 801462c:	10008000 	.word	0x10008000

08014630 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014630:	b480      	push	{r7}
 8014632:	b085      	sub	sp, #20
 8014634:	af00      	add	r7, sp, #0
 8014636:	6078      	str	r0, [r7, #4]
 8014638:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801463e:	683b      	ldr	r3, [r7, #0]
 8014640:	781b      	ldrb	r3, [r3, #0]
 8014642:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8014644:	683b      	ldr	r3, [r7, #0]
 8014646:	785b      	ldrb	r3, [r3, #1]
 8014648:	2b01      	cmp	r3, #1
 801464a:	d161      	bne.n	8014710 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801464c:	68bb      	ldr	r3, [r7, #8]
 801464e:	015a      	lsls	r2, r3, #5
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	4413      	add	r3, r2
 8014654:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801465e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014662:	d11f      	bne.n	80146a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8014664:	68bb      	ldr	r3, [r7, #8]
 8014666:	015a      	lsls	r2, r3, #5
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	4413      	add	r3, r2
 801466c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	68ba      	ldr	r2, [r7, #8]
 8014674:	0151      	lsls	r1, r2, #5
 8014676:	68fa      	ldr	r2, [r7, #12]
 8014678:	440a      	add	r2, r1
 801467a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801467e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014682:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8014684:	68bb      	ldr	r3, [r7, #8]
 8014686:	015a      	lsls	r2, r3, #5
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	4413      	add	r3, r2
 801468c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	68ba      	ldr	r2, [r7, #8]
 8014694:	0151      	lsls	r1, r2, #5
 8014696:	68fa      	ldr	r2, [r7, #12]
 8014698:	440a      	add	r2, r1
 801469a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801469e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80146a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80146aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80146ac:	683b      	ldr	r3, [r7, #0]
 80146ae:	781b      	ldrb	r3, [r3, #0]
 80146b0:	f003 030f 	and.w	r3, r3, #15
 80146b4:	2101      	movs	r1, #1
 80146b6:	fa01 f303 	lsl.w	r3, r1, r3
 80146ba:	b29b      	uxth	r3, r3
 80146bc:	43db      	mvns	r3, r3
 80146be:	68f9      	ldr	r1, [r7, #12]
 80146c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80146c4:	4013      	ands	r3, r2
 80146c6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80146ce:	69da      	ldr	r2, [r3, #28]
 80146d0:	683b      	ldr	r3, [r7, #0]
 80146d2:	781b      	ldrb	r3, [r3, #0]
 80146d4:	f003 030f 	and.w	r3, r3, #15
 80146d8:	2101      	movs	r1, #1
 80146da:	fa01 f303 	lsl.w	r3, r1, r3
 80146de:	b29b      	uxth	r3, r3
 80146e0:	43db      	mvns	r3, r3
 80146e2:	68f9      	ldr	r1, [r7, #12]
 80146e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80146e8:	4013      	ands	r3, r2
 80146ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80146ec:	68bb      	ldr	r3, [r7, #8]
 80146ee:	015a      	lsls	r2, r3, #5
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	4413      	add	r3, r2
 80146f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80146f8:	681a      	ldr	r2, [r3, #0]
 80146fa:	68bb      	ldr	r3, [r7, #8]
 80146fc:	0159      	lsls	r1, r3, #5
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	440b      	add	r3, r1
 8014702:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014706:	4619      	mov	r1, r3
 8014708:	4b35      	ldr	r3, [pc, #212]	@ (80147e0 <USB_DeactivateEndpoint+0x1b0>)
 801470a:	4013      	ands	r3, r2
 801470c:	600b      	str	r3, [r1, #0]
 801470e:	e060      	b.n	80147d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014710:	68bb      	ldr	r3, [r7, #8]
 8014712:	015a      	lsls	r2, r3, #5
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	4413      	add	r3, r2
 8014718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014722:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014726:	d11f      	bne.n	8014768 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8014728:	68bb      	ldr	r3, [r7, #8]
 801472a:	015a      	lsls	r2, r3, #5
 801472c:	68fb      	ldr	r3, [r7, #12]
 801472e:	4413      	add	r3, r2
 8014730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	68ba      	ldr	r2, [r7, #8]
 8014738:	0151      	lsls	r1, r2, #5
 801473a:	68fa      	ldr	r2, [r7, #12]
 801473c:	440a      	add	r2, r1
 801473e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014742:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014746:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8014748:	68bb      	ldr	r3, [r7, #8]
 801474a:	015a      	lsls	r2, r3, #5
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	4413      	add	r3, r2
 8014750:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	68ba      	ldr	r2, [r7, #8]
 8014758:	0151      	lsls	r1, r2, #5
 801475a:	68fa      	ldr	r2, [r7, #12]
 801475c:	440a      	add	r2, r1
 801475e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014762:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014766:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801476e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014770:	683b      	ldr	r3, [r7, #0]
 8014772:	781b      	ldrb	r3, [r3, #0]
 8014774:	f003 030f 	and.w	r3, r3, #15
 8014778:	2101      	movs	r1, #1
 801477a:	fa01 f303 	lsl.w	r3, r1, r3
 801477e:	041b      	lsls	r3, r3, #16
 8014780:	43db      	mvns	r3, r3
 8014782:	68f9      	ldr	r1, [r7, #12]
 8014784:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014788:	4013      	ands	r3, r2
 801478a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014792:	69da      	ldr	r2, [r3, #28]
 8014794:	683b      	ldr	r3, [r7, #0]
 8014796:	781b      	ldrb	r3, [r3, #0]
 8014798:	f003 030f 	and.w	r3, r3, #15
 801479c:	2101      	movs	r1, #1
 801479e:	fa01 f303 	lsl.w	r3, r1, r3
 80147a2:	041b      	lsls	r3, r3, #16
 80147a4:	43db      	mvns	r3, r3
 80147a6:	68f9      	ldr	r1, [r7, #12]
 80147a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80147ac:	4013      	ands	r3, r2
 80147ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80147b0:	68bb      	ldr	r3, [r7, #8]
 80147b2:	015a      	lsls	r2, r3, #5
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	4413      	add	r3, r2
 80147b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80147bc:	681a      	ldr	r2, [r3, #0]
 80147be:	68bb      	ldr	r3, [r7, #8]
 80147c0:	0159      	lsls	r1, r3, #5
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	440b      	add	r3, r1
 80147c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80147ca:	4619      	mov	r1, r3
 80147cc:	4b05      	ldr	r3, [pc, #20]	@ (80147e4 <USB_DeactivateEndpoint+0x1b4>)
 80147ce:	4013      	ands	r3, r2
 80147d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80147d2:	2300      	movs	r3, #0
}
 80147d4:	4618      	mov	r0, r3
 80147d6:	3714      	adds	r7, #20
 80147d8:	46bd      	mov	sp, r7
 80147da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147de:	4770      	bx	lr
 80147e0:	ec337800 	.word	0xec337800
 80147e4:	eff37800 	.word	0xeff37800

080147e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80147e8:	b580      	push	{r7, lr}
 80147ea:	b08a      	sub	sp, #40	@ 0x28
 80147ec:	af02      	add	r7, sp, #8
 80147ee:	60f8      	str	r0, [r7, #12]
 80147f0:	60b9      	str	r1, [r7, #8]
 80147f2:	4613      	mov	r3, r2
 80147f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80147fa:	68bb      	ldr	r3, [r7, #8]
 80147fc:	781b      	ldrb	r3, [r3, #0]
 80147fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014800:	68bb      	ldr	r3, [r7, #8]
 8014802:	785b      	ldrb	r3, [r3, #1]
 8014804:	2b01      	cmp	r3, #1
 8014806:	f040 8181 	bne.w	8014b0c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801480a:	68bb      	ldr	r3, [r7, #8]
 801480c:	691b      	ldr	r3, [r3, #16]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d132      	bne.n	8014878 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014812:	69bb      	ldr	r3, [r7, #24]
 8014814:	015a      	lsls	r2, r3, #5
 8014816:	69fb      	ldr	r3, [r7, #28]
 8014818:	4413      	add	r3, r2
 801481a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801481e:	691a      	ldr	r2, [r3, #16]
 8014820:	69bb      	ldr	r3, [r7, #24]
 8014822:	0159      	lsls	r1, r3, #5
 8014824:	69fb      	ldr	r3, [r7, #28]
 8014826:	440b      	add	r3, r1
 8014828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801482c:	4619      	mov	r1, r3
 801482e:	4ba5      	ldr	r3, [pc, #660]	@ (8014ac4 <USB_EPStartXfer+0x2dc>)
 8014830:	4013      	ands	r3, r2
 8014832:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014834:	69bb      	ldr	r3, [r7, #24]
 8014836:	015a      	lsls	r2, r3, #5
 8014838:	69fb      	ldr	r3, [r7, #28]
 801483a:	4413      	add	r3, r2
 801483c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014840:	691b      	ldr	r3, [r3, #16]
 8014842:	69ba      	ldr	r2, [r7, #24]
 8014844:	0151      	lsls	r1, r2, #5
 8014846:	69fa      	ldr	r2, [r7, #28]
 8014848:	440a      	add	r2, r1
 801484a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801484e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014852:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014854:	69bb      	ldr	r3, [r7, #24]
 8014856:	015a      	lsls	r2, r3, #5
 8014858:	69fb      	ldr	r3, [r7, #28]
 801485a:	4413      	add	r3, r2
 801485c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014860:	691a      	ldr	r2, [r3, #16]
 8014862:	69bb      	ldr	r3, [r7, #24]
 8014864:	0159      	lsls	r1, r3, #5
 8014866:	69fb      	ldr	r3, [r7, #28]
 8014868:	440b      	add	r3, r1
 801486a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801486e:	4619      	mov	r1, r3
 8014870:	4b95      	ldr	r3, [pc, #596]	@ (8014ac8 <USB_EPStartXfer+0x2e0>)
 8014872:	4013      	ands	r3, r2
 8014874:	610b      	str	r3, [r1, #16]
 8014876:	e092      	b.n	801499e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014878:	69bb      	ldr	r3, [r7, #24]
 801487a:	015a      	lsls	r2, r3, #5
 801487c:	69fb      	ldr	r3, [r7, #28]
 801487e:	4413      	add	r3, r2
 8014880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014884:	691a      	ldr	r2, [r3, #16]
 8014886:	69bb      	ldr	r3, [r7, #24]
 8014888:	0159      	lsls	r1, r3, #5
 801488a:	69fb      	ldr	r3, [r7, #28]
 801488c:	440b      	add	r3, r1
 801488e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014892:	4619      	mov	r1, r3
 8014894:	4b8c      	ldr	r3, [pc, #560]	@ (8014ac8 <USB_EPStartXfer+0x2e0>)
 8014896:	4013      	ands	r3, r2
 8014898:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801489a:	69bb      	ldr	r3, [r7, #24]
 801489c:	015a      	lsls	r2, r3, #5
 801489e:	69fb      	ldr	r3, [r7, #28]
 80148a0:	4413      	add	r3, r2
 80148a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80148a6:	691a      	ldr	r2, [r3, #16]
 80148a8:	69bb      	ldr	r3, [r7, #24]
 80148aa:	0159      	lsls	r1, r3, #5
 80148ac:	69fb      	ldr	r3, [r7, #28]
 80148ae:	440b      	add	r3, r1
 80148b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80148b4:	4619      	mov	r1, r3
 80148b6:	4b83      	ldr	r3, [pc, #524]	@ (8014ac4 <USB_EPStartXfer+0x2dc>)
 80148b8:	4013      	ands	r3, r2
 80148ba:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80148bc:	69bb      	ldr	r3, [r7, #24]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d11a      	bne.n	80148f8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80148c2:	68bb      	ldr	r3, [r7, #8]
 80148c4:	691a      	ldr	r2, [r3, #16]
 80148c6:	68bb      	ldr	r3, [r7, #8]
 80148c8:	689b      	ldr	r3, [r3, #8]
 80148ca:	429a      	cmp	r2, r3
 80148cc:	d903      	bls.n	80148d6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80148ce:	68bb      	ldr	r3, [r7, #8]
 80148d0:	689a      	ldr	r2, [r3, #8]
 80148d2:	68bb      	ldr	r3, [r7, #8]
 80148d4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80148d6:	69bb      	ldr	r3, [r7, #24]
 80148d8:	015a      	lsls	r2, r3, #5
 80148da:	69fb      	ldr	r3, [r7, #28]
 80148dc:	4413      	add	r3, r2
 80148de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80148e2:	691b      	ldr	r3, [r3, #16]
 80148e4:	69ba      	ldr	r2, [r7, #24]
 80148e6:	0151      	lsls	r1, r2, #5
 80148e8:	69fa      	ldr	r2, [r7, #28]
 80148ea:	440a      	add	r2, r1
 80148ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80148f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80148f4:	6113      	str	r3, [r2, #16]
 80148f6:	e01b      	b.n	8014930 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80148f8:	69bb      	ldr	r3, [r7, #24]
 80148fa:	015a      	lsls	r2, r3, #5
 80148fc:	69fb      	ldr	r3, [r7, #28]
 80148fe:	4413      	add	r3, r2
 8014900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014904:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8014906:	68bb      	ldr	r3, [r7, #8]
 8014908:	6919      	ldr	r1, [r3, #16]
 801490a:	68bb      	ldr	r3, [r7, #8]
 801490c:	689b      	ldr	r3, [r3, #8]
 801490e:	440b      	add	r3, r1
 8014910:	1e59      	subs	r1, r3, #1
 8014912:	68bb      	ldr	r3, [r7, #8]
 8014914:	689b      	ldr	r3, [r3, #8]
 8014916:	fbb1 f3f3 	udiv	r3, r1, r3
 801491a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801491c:	4b6b      	ldr	r3, [pc, #428]	@ (8014acc <USB_EPStartXfer+0x2e4>)
 801491e:	400b      	ands	r3, r1
 8014920:	69b9      	ldr	r1, [r7, #24]
 8014922:	0148      	lsls	r0, r1, #5
 8014924:	69f9      	ldr	r1, [r7, #28]
 8014926:	4401      	add	r1, r0
 8014928:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 801492c:	4313      	orrs	r3, r2
 801492e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014930:	69bb      	ldr	r3, [r7, #24]
 8014932:	015a      	lsls	r2, r3, #5
 8014934:	69fb      	ldr	r3, [r7, #28]
 8014936:	4413      	add	r3, r2
 8014938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801493c:	691a      	ldr	r2, [r3, #16]
 801493e:	68bb      	ldr	r3, [r7, #8]
 8014940:	691b      	ldr	r3, [r3, #16]
 8014942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014946:	69b9      	ldr	r1, [r7, #24]
 8014948:	0148      	lsls	r0, r1, #5
 801494a:	69f9      	ldr	r1, [r7, #28]
 801494c:	4401      	add	r1, r0
 801494e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014952:	4313      	orrs	r3, r2
 8014954:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8014956:	68bb      	ldr	r3, [r7, #8]
 8014958:	791b      	ldrb	r3, [r3, #4]
 801495a:	2b01      	cmp	r3, #1
 801495c:	d11f      	bne.n	801499e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801495e:	69bb      	ldr	r3, [r7, #24]
 8014960:	015a      	lsls	r2, r3, #5
 8014962:	69fb      	ldr	r3, [r7, #28]
 8014964:	4413      	add	r3, r2
 8014966:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801496a:	691b      	ldr	r3, [r3, #16]
 801496c:	69ba      	ldr	r2, [r7, #24]
 801496e:	0151      	lsls	r1, r2, #5
 8014970:	69fa      	ldr	r2, [r7, #28]
 8014972:	440a      	add	r2, r1
 8014974:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014978:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 801497c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801497e:	69bb      	ldr	r3, [r7, #24]
 8014980:	015a      	lsls	r2, r3, #5
 8014982:	69fb      	ldr	r3, [r7, #28]
 8014984:	4413      	add	r3, r2
 8014986:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801498a:	691b      	ldr	r3, [r3, #16]
 801498c:	69ba      	ldr	r2, [r7, #24]
 801498e:	0151      	lsls	r1, r2, #5
 8014990:	69fa      	ldr	r2, [r7, #28]
 8014992:	440a      	add	r2, r1
 8014994:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014998:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801499c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801499e:	79fb      	ldrb	r3, [r7, #7]
 80149a0:	2b01      	cmp	r3, #1
 80149a2:	d14b      	bne.n	8014a3c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80149a4:	68bb      	ldr	r3, [r7, #8]
 80149a6:	69db      	ldr	r3, [r3, #28]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d009      	beq.n	80149c0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80149ac:	69bb      	ldr	r3, [r7, #24]
 80149ae:	015a      	lsls	r2, r3, #5
 80149b0:	69fb      	ldr	r3, [r7, #28]
 80149b2:	4413      	add	r3, r2
 80149b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80149b8:	461a      	mov	r2, r3
 80149ba:	68bb      	ldr	r3, [r7, #8]
 80149bc:	69db      	ldr	r3, [r3, #28]
 80149be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80149c0:	68bb      	ldr	r3, [r7, #8]
 80149c2:	791b      	ldrb	r3, [r3, #4]
 80149c4:	2b01      	cmp	r3, #1
 80149c6:	d128      	bne.n	8014a1a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80149c8:	69fb      	ldr	r3, [r7, #28]
 80149ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80149ce:	689b      	ldr	r3, [r3, #8]
 80149d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d110      	bne.n	80149fa <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80149d8:	69bb      	ldr	r3, [r7, #24]
 80149da:	015a      	lsls	r2, r3, #5
 80149dc:	69fb      	ldr	r3, [r7, #28]
 80149de:	4413      	add	r3, r2
 80149e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	69ba      	ldr	r2, [r7, #24]
 80149e8:	0151      	lsls	r1, r2, #5
 80149ea:	69fa      	ldr	r2, [r7, #28]
 80149ec:	440a      	add	r2, r1
 80149ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80149f2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80149f6:	6013      	str	r3, [r2, #0]
 80149f8:	e00f      	b.n	8014a1a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80149fa:	69bb      	ldr	r3, [r7, #24]
 80149fc:	015a      	lsls	r2, r3, #5
 80149fe:	69fb      	ldr	r3, [r7, #28]
 8014a00:	4413      	add	r3, r2
 8014a02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	69ba      	ldr	r2, [r7, #24]
 8014a0a:	0151      	lsls	r1, r2, #5
 8014a0c:	69fa      	ldr	r2, [r7, #28]
 8014a0e:	440a      	add	r2, r1
 8014a10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014a18:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014a1a:	69bb      	ldr	r3, [r7, #24]
 8014a1c:	015a      	lsls	r2, r3, #5
 8014a1e:	69fb      	ldr	r3, [r7, #28]
 8014a20:	4413      	add	r3, r2
 8014a22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	69ba      	ldr	r2, [r7, #24]
 8014a2a:	0151      	lsls	r1, r2, #5
 8014a2c:	69fa      	ldr	r2, [r7, #28]
 8014a2e:	440a      	add	r2, r1
 8014a30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014a34:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014a38:	6013      	str	r3, [r2, #0]
 8014a3a:	e16a      	b.n	8014d12 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014a3c:	69bb      	ldr	r3, [r7, #24]
 8014a3e:	015a      	lsls	r2, r3, #5
 8014a40:	69fb      	ldr	r3, [r7, #28]
 8014a42:	4413      	add	r3, r2
 8014a44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	69ba      	ldr	r2, [r7, #24]
 8014a4c:	0151      	lsls	r1, r2, #5
 8014a4e:	69fa      	ldr	r2, [r7, #28]
 8014a50:	440a      	add	r2, r1
 8014a52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014a56:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014a5a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014a5c:	68bb      	ldr	r3, [r7, #8]
 8014a5e:	791b      	ldrb	r3, [r3, #4]
 8014a60:	2b01      	cmp	r3, #1
 8014a62:	d015      	beq.n	8014a90 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8014a64:	68bb      	ldr	r3, [r7, #8]
 8014a66:	691b      	ldr	r3, [r3, #16]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	f000 8152 	beq.w	8014d12 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014a6e:	69fb      	ldr	r3, [r7, #28]
 8014a70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014a74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014a76:	68bb      	ldr	r3, [r7, #8]
 8014a78:	781b      	ldrb	r3, [r3, #0]
 8014a7a:	f003 030f 	and.w	r3, r3, #15
 8014a7e:	2101      	movs	r1, #1
 8014a80:	fa01 f303 	lsl.w	r3, r1, r3
 8014a84:	69f9      	ldr	r1, [r7, #28]
 8014a86:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014a8a:	4313      	orrs	r3, r2
 8014a8c:	634b      	str	r3, [r1, #52]	@ 0x34
 8014a8e:	e140      	b.n	8014d12 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014a90:	69fb      	ldr	r3, [r7, #28]
 8014a92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014a96:	689b      	ldr	r3, [r3, #8]
 8014a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d117      	bne.n	8014ad0 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014aa0:	69bb      	ldr	r3, [r7, #24]
 8014aa2:	015a      	lsls	r2, r3, #5
 8014aa4:	69fb      	ldr	r3, [r7, #28]
 8014aa6:	4413      	add	r3, r2
 8014aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	69ba      	ldr	r2, [r7, #24]
 8014ab0:	0151      	lsls	r1, r2, #5
 8014ab2:	69fa      	ldr	r2, [r7, #28]
 8014ab4:	440a      	add	r2, r1
 8014ab6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014aba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014abe:	6013      	str	r3, [r2, #0]
 8014ac0:	e016      	b.n	8014af0 <USB_EPStartXfer+0x308>
 8014ac2:	bf00      	nop
 8014ac4:	e007ffff 	.word	0xe007ffff
 8014ac8:	fff80000 	.word	0xfff80000
 8014acc:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014ad0:	69bb      	ldr	r3, [r7, #24]
 8014ad2:	015a      	lsls	r2, r3, #5
 8014ad4:	69fb      	ldr	r3, [r7, #28]
 8014ad6:	4413      	add	r3, r2
 8014ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	69ba      	ldr	r2, [r7, #24]
 8014ae0:	0151      	lsls	r1, r2, #5
 8014ae2:	69fa      	ldr	r2, [r7, #28]
 8014ae4:	440a      	add	r2, r1
 8014ae6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014aea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014aee:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8014af0:	68bb      	ldr	r3, [r7, #8]
 8014af2:	68d9      	ldr	r1, [r3, #12]
 8014af4:	68bb      	ldr	r3, [r7, #8]
 8014af6:	781a      	ldrb	r2, [r3, #0]
 8014af8:	68bb      	ldr	r3, [r7, #8]
 8014afa:	691b      	ldr	r3, [r3, #16]
 8014afc:	b298      	uxth	r0, r3
 8014afe:	79fb      	ldrb	r3, [r7, #7]
 8014b00:	9300      	str	r3, [sp, #0]
 8014b02:	4603      	mov	r3, r0
 8014b04:	68f8      	ldr	r0, [r7, #12]
 8014b06:	f000 f9b9 	bl	8014e7c <USB_WritePacket>
 8014b0a:	e102      	b.n	8014d12 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014b0c:	69bb      	ldr	r3, [r7, #24]
 8014b0e:	015a      	lsls	r2, r3, #5
 8014b10:	69fb      	ldr	r3, [r7, #28]
 8014b12:	4413      	add	r3, r2
 8014b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014b18:	691a      	ldr	r2, [r3, #16]
 8014b1a:	69bb      	ldr	r3, [r7, #24]
 8014b1c:	0159      	lsls	r1, r3, #5
 8014b1e:	69fb      	ldr	r3, [r7, #28]
 8014b20:	440b      	add	r3, r1
 8014b22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014b26:	4619      	mov	r1, r3
 8014b28:	4b7c      	ldr	r3, [pc, #496]	@ (8014d1c <USB_EPStartXfer+0x534>)
 8014b2a:	4013      	ands	r3, r2
 8014b2c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014b2e:	69bb      	ldr	r3, [r7, #24]
 8014b30:	015a      	lsls	r2, r3, #5
 8014b32:	69fb      	ldr	r3, [r7, #28]
 8014b34:	4413      	add	r3, r2
 8014b36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014b3a:	691a      	ldr	r2, [r3, #16]
 8014b3c:	69bb      	ldr	r3, [r7, #24]
 8014b3e:	0159      	lsls	r1, r3, #5
 8014b40:	69fb      	ldr	r3, [r7, #28]
 8014b42:	440b      	add	r3, r1
 8014b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014b48:	4619      	mov	r1, r3
 8014b4a:	4b75      	ldr	r3, [pc, #468]	@ (8014d20 <USB_EPStartXfer+0x538>)
 8014b4c:	4013      	ands	r3, r2
 8014b4e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8014b50:	69bb      	ldr	r3, [r7, #24]
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d12f      	bne.n	8014bb6 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8014b56:	68bb      	ldr	r3, [r7, #8]
 8014b58:	691b      	ldr	r3, [r3, #16]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d003      	beq.n	8014b66 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8014b5e:	68bb      	ldr	r3, [r7, #8]
 8014b60:	689a      	ldr	r2, [r3, #8]
 8014b62:	68bb      	ldr	r3, [r7, #8]
 8014b64:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8014b66:	68bb      	ldr	r3, [r7, #8]
 8014b68:	689a      	ldr	r2, [r3, #8]
 8014b6a:	68bb      	ldr	r3, [r7, #8]
 8014b6c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8014b6e:	69bb      	ldr	r3, [r7, #24]
 8014b70:	015a      	lsls	r2, r3, #5
 8014b72:	69fb      	ldr	r3, [r7, #28]
 8014b74:	4413      	add	r3, r2
 8014b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014b7a:	691a      	ldr	r2, [r3, #16]
 8014b7c:	68bb      	ldr	r3, [r7, #8]
 8014b7e:	6a1b      	ldr	r3, [r3, #32]
 8014b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014b84:	69b9      	ldr	r1, [r7, #24]
 8014b86:	0148      	lsls	r0, r1, #5
 8014b88:	69f9      	ldr	r1, [r7, #28]
 8014b8a:	4401      	add	r1, r0
 8014b8c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014b90:	4313      	orrs	r3, r2
 8014b92:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014b94:	69bb      	ldr	r3, [r7, #24]
 8014b96:	015a      	lsls	r2, r3, #5
 8014b98:	69fb      	ldr	r3, [r7, #28]
 8014b9a:	4413      	add	r3, r2
 8014b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ba0:	691b      	ldr	r3, [r3, #16]
 8014ba2:	69ba      	ldr	r2, [r7, #24]
 8014ba4:	0151      	lsls	r1, r2, #5
 8014ba6:	69fa      	ldr	r2, [r7, #28]
 8014ba8:	440a      	add	r2, r1
 8014baa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014bae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014bb2:	6113      	str	r3, [r2, #16]
 8014bb4:	e05f      	b.n	8014c76 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8014bb6:	68bb      	ldr	r3, [r7, #8]
 8014bb8:	691b      	ldr	r3, [r3, #16]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d123      	bne.n	8014c06 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014bbe:	69bb      	ldr	r3, [r7, #24]
 8014bc0:	015a      	lsls	r2, r3, #5
 8014bc2:	69fb      	ldr	r3, [r7, #28]
 8014bc4:	4413      	add	r3, r2
 8014bc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014bca:	691a      	ldr	r2, [r3, #16]
 8014bcc:	68bb      	ldr	r3, [r7, #8]
 8014bce:	689b      	ldr	r3, [r3, #8]
 8014bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014bd4:	69b9      	ldr	r1, [r7, #24]
 8014bd6:	0148      	lsls	r0, r1, #5
 8014bd8:	69f9      	ldr	r1, [r7, #28]
 8014bda:	4401      	add	r1, r0
 8014bdc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014be0:	4313      	orrs	r3, r2
 8014be2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014be4:	69bb      	ldr	r3, [r7, #24]
 8014be6:	015a      	lsls	r2, r3, #5
 8014be8:	69fb      	ldr	r3, [r7, #28]
 8014bea:	4413      	add	r3, r2
 8014bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014bf0:	691b      	ldr	r3, [r3, #16]
 8014bf2:	69ba      	ldr	r2, [r7, #24]
 8014bf4:	0151      	lsls	r1, r2, #5
 8014bf6:	69fa      	ldr	r2, [r7, #28]
 8014bf8:	440a      	add	r2, r1
 8014bfa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014bfe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014c02:	6113      	str	r3, [r2, #16]
 8014c04:	e037      	b.n	8014c76 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014c06:	68bb      	ldr	r3, [r7, #8]
 8014c08:	691a      	ldr	r2, [r3, #16]
 8014c0a:	68bb      	ldr	r3, [r7, #8]
 8014c0c:	689b      	ldr	r3, [r3, #8]
 8014c0e:	4413      	add	r3, r2
 8014c10:	1e5a      	subs	r2, r3, #1
 8014c12:	68bb      	ldr	r3, [r7, #8]
 8014c14:	689b      	ldr	r3, [r3, #8]
 8014c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8014c1a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8014c1c:	68bb      	ldr	r3, [r7, #8]
 8014c1e:	689b      	ldr	r3, [r3, #8]
 8014c20:	8afa      	ldrh	r2, [r7, #22]
 8014c22:	fb03 f202 	mul.w	r2, r3, r2
 8014c26:	68bb      	ldr	r3, [r7, #8]
 8014c28:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014c2a:	69bb      	ldr	r3, [r7, #24]
 8014c2c:	015a      	lsls	r2, r3, #5
 8014c2e:	69fb      	ldr	r3, [r7, #28]
 8014c30:	4413      	add	r3, r2
 8014c32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014c36:	691a      	ldr	r2, [r3, #16]
 8014c38:	8afb      	ldrh	r3, [r7, #22]
 8014c3a:	04d9      	lsls	r1, r3, #19
 8014c3c:	4b39      	ldr	r3, [pc, #228]	@ (8014d24 <USB_EPStartXfer+0x53c>)
 8014c3e:	400b      	ands	r3, r1
 8014c40:	69b9      	ldr	r1, [r7, #24]
 8014c42:	0148      	lsls	r0, r1, #5
 8014c44:	69f9      	ldr	r1, [r7, #28]
 8014c46:	4401      	add	r1, r0
 8014c48:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014c4c:	4313      	orrs	r3, r2
 8014c4e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8014c50:	69bb      	ldr	r3, [r7, #24]
 8014c52:	015a      	lsls	r2, r3, #5
 8014c54:	69fb      	ldr	r3, [r7, #28]
 8014c56:	4413      	add	r3, r2
 8014c58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014c5c:	691a      	ldr	r2, [r3, #16]
 8014c5e:	68bb      	ldr	r3, [r7, #8]
 8014c60:	6a1b      	ldr	r3, [r3, #32]
 8014c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014c66:	69b9      	ldr	r1, [r7, #24]
 8014c68:	0148      	lsls	r0, r1, #5
 8014c6a:	69f9      	ldr	r1, [r7, #28]
 8014c6c:	4401      	add	r1, r0
 8014c6e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014c72:	4313      	orrs	r3, r2
 8014c74:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8014c76:	79fb      	ldrb	r3, [r7, #7]
 8014c78:	2b01      	cmp	r3, #1
 8014c7a:	d10d      	bne.n	8014c98 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014c7c:	68bb      	ldr	r3, [r7, #8]
 8014c7e:	68db      	ldr	r3, [r3, #12]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d009      	beq.n	8014c98 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014c84:	68bb      	ldr	r3, [r7, #8]
 8014c86:	68d9      	ldr	r1, [r3, #12]
 8014c88:	69bb      	ldr	r3, [r7, #24]
 8014c8a:	015a      	lsls	r2, r3, #5
 8014c8c:	69fb      	ldr	r3, [r7, #28]
 8014c8e:	4413      	add	r3, r2
 8014c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014c94:	460a      	mov	r2, r1
 8014c96:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8014c98:	68bb      	ldr	r3, [r7, #8]
 8014c9a:	791b      	ldrb	r3, [r3, #4]
 8014c9c:	2b01      	cmp	r3, #1
 8014c9e:	d128      	bne.n	8014cf2 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014ca0:	69fb      	ldr	r3, [r7, #28]
 8014ca2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014ca6:	689b      	ldr	r3, [r3, #8]
 8014ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d110      	bne.n	8014cd2 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8014cb0:	69bb      	ldr	r3, [r7, #24]
 8014cb2:	015a      	lsls	r2, r3, #5
 8014cb4:	69fb      	ldr	r3, [r7, #28]
 8014cb6:	4413      	add	r3, r2
 8014cb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	69ba      	ldr	r2, [r7, #24]
 8014cc0:	0151      	lsls	r1, r2, #5
 8014cc2:	69fa      	ldr	r2, [r7, #28]
 8014cc4:	440a      	add	r2, r1
 8014cc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014cca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014cce:	6013      	str	r3, [r2, #0]
 8014cd0:	e00f      	b.n	8014cf2 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8014cd2:	69bb      	ldr	r3, [r7, #24]
 8014cd4:	015a      	lsls	r2, r3, #5
 8014cd6:	69fb      	ldr	r3, [r7, #28]
 8014cd8:	4413      	add	r3, r2
 8014cda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	69ba      	ldr	r2, [r7, #24]
 8014ce2:	0151      	lsls	r1, r2, #5
 8014ce4:	69fa      	ldr	r2, [r7, #28]
 8014ce6:	440a      	add	r2, r1
 8014ce8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014cf0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014cf2:	69bb      	ldr	r3, [r7, #24]
 8014cf4:	015a      	lsls	r2, r3, #5
 8014cf6:	69fb      	ldr	r3, [r7, #28]
 8014cf8:	4413      	add	r3, r2
 8014cfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	69ba      	ldr	r2, [r7, #24]
 8014d02:	0151      	lsls	r1, r2, #5
 8014d04:	69fa      	ldr	r2, [r7, #28]
 8014d06:	440a      	add	r2, r1
 8014d08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014d0c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014d10:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014d12:	2300      	movs	r3, #0
}
 8014d14:	4618      	mov	r0, r3
 8014d16:	3720      	adds	r7, #32
 8014d18:	46bd      	mov	sp, r7
 8014d1a:	bd80      	pop	{r7, pc}
 8014d1c:	fff80000 	.word	0xfff80000
 8014d20:	e007ffff 	.word	0xe007ffff
 8014d24:	1ff80000 	.word	0x1ff80000

08014d28 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014d28:	b480      	push	{r7}
 8014d2a:	b087      	sub	sp, #28
 8014d2c:	af00      	add	r7, sp, #0
 8014d2e:	6078      	str	r0, [r7, #4]
 8014d30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014d32:	2300      	movs	r3, #0
 8014d34:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8014d36:	2300      	movs	r3, #0
 8014d38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014d3e:	683b      	ldr	r3, [r7, #0]
 8014d40:	785b      	ldrb	r3, [r3, #1]
 8014d42:	2b01      	cmp	r3, #1
 8014d44:	d14a      	bne.n	8014ddc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014d46:	683b      	ldr	r3, [r7, #0]
 8014d48:	781b      	ldrb	r3, [r3, #0]
 8014d4a:	015a      	lsls	r2, r3, #5
 8014d4c:	693b      	ldr	r3, [r7, #16]
 8014d4e:	4413      	add	r3, r2
 8014d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014d5e:	f040 8086 	bne.w	8014e6e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8014d62:	683b      	ldr	r3, [r7, #0]
 8014d64:	781b      	ldrb	r3, [r3, #0]
 8014d66:	015a      	lsls	r2, r3, #5
 8014d68:	693b      	ldr	r3, [r7, #16]
 8014d6a:	4413      	add	r3, r2
 8014d6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	683a      	ldr	r2, [r7, #0]
 8014d74:	7812      	ldrb	r2, [r2, #0]
 8014d76:	0151      	lsls	r1, r2, #5
 8014d78:	693a      	ldr	r2, [r7, #16]
 8014d7a:	440a      	add	r2, r1
 8014d7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014d80:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014d84:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8014d86:	683b      	ldr	r3, [r7, #0]
 8014d88:	781b      	ldrb	r3, [r3, #0]
 8014d8a:	015a      	lsls	r2, r3, #5
 8014d8c:	693b      	ldr	r3, [r7, #16]
 8014d8e:	4413      	add	r3, r2
 8014d90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	683a      	ldr	r2, [r7, #0]
 8014d98:	7812      	ldrb	r2, [r2, #0]
 8014d9a:	0151      	lsls	r1, r2, #5
 8014d9c:	693a      	ldr	r2, [r7, #16]
 8014d9e:	440a      	add	r2, r1
 8014da0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014da4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014da8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	3301      	adds	r3, #1
 8014dae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8014db6:	4293      	cmp	r3, r2
 8014db8:	d902      	bls.n	8014dc0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8014dba:	2301      	movs	r3, #1
 8014dbc:	75fb      	strb	r3, [r7, #23]
          break;
 8014dbe:	e056      	b.n	8014e6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8014dc0:	683b      	ldr	r3, [r7, #0]
 8014dc2:	781b      	ldrb	r3, [r3, #0]
 8014dc4:	015a      	lsls	r2, r3, #5
 8014dc6:	693b      	ldr	r3, [r7, #16]
 8014dc8:	4413      	add	r3, r2
 8014dca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014dd4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014dd8:	d0e7      	beq.n	8014daa <USB_EPStopXfer+0x82>
 8014dda:	e048      	b.n	8014e6e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014ddc:	683b      	ldr	r3, [r7, #0]
 8014dde:	781b      	ldrb	r3, [r3, #0]
 8014de0:	015a      	lsls	r2, r3, #5
 8014de2:	693b      	ldr	r3, [r7, #16]
 8014de4:	4413      	add	r3, r2
 8014de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014df0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014df4:	d13b      	bne.n	8014e6e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8014df6:	683b      	ldr	r3, [r7, #0]
 8014df8:	781b      	ldrb	r3, [r3, #0]
 8014dfa:	015a      	lsls	r2, r3, #5
 8014dfc:	693b      	ldr	r3, [r7, #16]
 8014dfe:	4413      	add	r3, r2
 8014e00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	683a      	ldr	r2, [r7, #0]
 8014e08:	7812      	ldrb	r2, [r2, #0]
 8014e0a:	0151      	lsls	r1, r2, #5
 8014e0c:	693a      	ldr	r2, [r7, #16]
 8014e0e:	440a      	add	r2, r1
 8014e10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014e14:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014e18:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8014e1a:	683b      	ldr	r3, [r7, #0]
 8014e1c:	781b      	ldrb	r3, [r3, #0]
 8014e1e:	015a      	lsls	r2, r3, #5
 8014e20:	693b      	ldr	r3, [r7, #16]
 8014e22:	4413      	add	r3, r2
 8014e24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	683a      	ldr	r2, [r7, #0]
 8014e2c:	7812      	ldrb	r2, [r2, #0]
 8014e2e:	0151      	lsls	r1, r2, #5
 8014e30:	693a      	ldr	r2, [r7, #16]
 8014e32:	440a      	add	r2, r1
 8014e34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014e38:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014e3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	3301      	adds	r3, #1
 8014e42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	f242 7210 	movw	r2, #10000	@ 0x2710
 8014e4a:	4293      	cmp	r3, r2
 8014e4c:	d902      	bls.n	8014e54 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8014e4e:	2301      	movs	r3, #1
 8014e50:	75fb      	strb	r3, [r7, #23]
          break;
 8014e52:	e00c      	b.n	8014e6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8014e54:	683b      	ldr	r3, [r7, #0]
 8014e56:	781b      	ldrb	r3, [r3, #0]
 8014e58:	015a      	lsls	r2, r3, #5
 8014e5a:	693b      	ldr	r3, [r7, #16]
 8014e5c:	4413      	add	r3, r2
 8014e5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014e68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014e6c:	d0e7      	beq.n	8014e3e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8014e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e70:	4618      	mov	r0, r3
 8014e72:	371c      	adds	r7, #28
 8014e74:	46bd      	mov	sp, r7
 8014e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e7a:	4770      	bx	lr

08014e7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8014e7c:	b480      	push	{r7}
 8014e7e:	b089      	sub	sp, #36	@ 0x24
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	60f8      	str	r0, [r7, #12]
 8014e84:	60b9      	str	r1, [r7, #8]
 8014e86:	4611      	mov	r1, r2
 8014e88:	461a      	mov	r2, r3
 8014e8a:	460b      	mov	r3, r1
 8014e8c:	71fb      	strb	r3, [r7, #7]
 8014e8e:	4613      	mov	r3, r2
 8014e90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e92:	68fb      	ldr	r3, [r7, #12]
 8014e94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8014e96:	68bb      	ldr	r3, [r7, #8]
 8014e98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8014e9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d123      	bne.n	8014eea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8014ea2:	88bb      	ldrh	r3, [r7, #4]
 8014ea4:	3303      	adds	r3, #3
 8014ea6:	089b      	lsrs	r3, r3, #2
 8014ea8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8014eaa:	2300      	movs	r3, #0
 8014eac:	61bb      	str	r3, [r7, #24]
 8014eae:	e018      	b.n	8014ee2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014eb0:	79fb      	ldrb	r3, [r7, #7]
 8014eb2:	031a      	lsls	r2, r3, #12
 8014eb4:	697b      	ldr	r3, [r7, #20]
 8014eb6:	4413      	add	r3, r2
 8014eb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014ebc:	461a      	mov	r2, r3
 8014ebe:	69fb      	ldr	r3, [r7, #28]
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014ec4:	69fb      	ldr	r3, [r7, #28]
 8014ec6:	3301      	adds	r3, #1
 8014ec8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014eca:	69fb      	ldr	r3, [r7, #28]
 8014ecc:	3301      	adds	r3, #1
 8014ece:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014ed0:	69fb      	ldr	r3, [r7, #28]
 8014ed2:	3301      	adds	r3, #1
 8014ed4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014ed6:	69fb      	ldr	r3, [r7, #28]
 8014ed8:	3301      	adds	r3, #1
 8014eda:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014edc:	69bb      	ldr	r3, [r7, #24]
 8014ede:	3301      	adds	r3, #1
 8014ee0:	61bb      	str	r3, [r7, #24]
 8014ee2:	69ba      	ldr	r2, [r7, #24]
 8014ee4:	693b      	ldr	r3, [r7, #16]
 8014ee6:	429a      	cmp	r2, r3
 8014ee8:	d3e2      	bcc.n	8014eb0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8014eea:	2300      	movs	r3, #0
}
 8014eec:	4618      	mov	r0, r3
 8014eee:	3724      	adds	r7, #36	@ 0x24
 8014ef0:	46bd      	mov	sp, r7
 8014ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef6:	4770      	bx	lr

08014ef8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014ef8:	b480      	push	{r7}
 8014efa:	b08b      	sub	sp, #44	@ 0x2c
 8014efc:	af00      	add	r7, sp, #0
 8014efe:	60f8      	str	r0, [r7, #12]
 8014f00:	60b9      	str	r1, [r7, #8]
 8014f02:	4613      	mov	r3, r2
 8014f04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8014f0a:	68bb      	ldr	r3, [r7, #8]
 8014f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8014f0e:	88fb      	ldrh	r3, [r7, #6]
 8014f10:	089b      	lsrs	r3, r3, #2
 8014f12:	b29b      	uxth	r3, r3
 8014f14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8014f16:	88fb      	ldrh	r3, [r7, #6]
 8014f18:	f003 0303 	and.w	r3, r3, #3
 8014f1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8014f1e:	2300      	movs	r3, #0
 8014f20:	623b      	str	r3, [r7, #32]
 8014f22:	e014      	b.n	8014f4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014f24:	69bb      	ldr	r3, [r7, #24]
 8014f26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014f2a:	681a      	ldr	r2, [r3, #0]
 8014f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8014f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f32:	3301      	adds	r3, #1
 8014f34:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8014f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f38:	3301      	adds	r3, #1
 8014f3a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8014f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f3e:	3301      	adds	r3, #1
 8014f40:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8014f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f44:	3301      	adds	r3, #1
 8014f46:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8014f48:	6a3b      	ldr	r3, [r7, #32]
 8014f4a:	3301      	adds	r3, #1
 8014f4c:	623b      	str	r3, [r7, #32]
 8014f4e:	6a3a      	ldr	r2, [r7, #32]
 8014f50:	697b      	ldr	r3, [r7, #20]
 8014f52:	429a      	cmp	r2, r3
 8014f54:	d3e6      	bcc.n	8014f24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8014f56:	8bfb      	ldrh	r3, [r7, #30]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d01e      	beq.n	8014f9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8014f5c:	2300      	movs	r3, #0
 8014f5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014f60:	69bb      	ldr	r3, [r7, #24]
 8014f62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014f66:	461a      	mov	r2, r3
 8014f68:	f107 0310 	add.w	r3, r7, #16
 8014f6c:	6812      	ldr	r2, [r2, #0]
 8014f6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014f70:	693a      	ldr	r2, [r7, #16]
 8014f72:	6a3b      	ldr	r3, [r7, #32]
 8014f74:	b2db      	uxtb	r3, r3
 8014f76:	00db      	lsls	r3, r3, #3
 8014f78:	fa22 f303 	lsr.w	r3, r2, r3
 8014f7c:	b2da      	uxtb	r2, r3
 8014f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f80:	701a      	strb	r2, [r3, #0]
      i++;
 8014f82:	6a3b      	ldr	r3, [r7, #32]
 8014f84:	3301      	adds	r3, #1
 8014f86:	623b      	str	r3, [r7, #32]
      pDest++;
 8014f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f8a:	3301      	adds	r3, #1
 8014f8c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8014f8e:	8bfb      	ldrh	r3, [r7, #30]
 8014f90:	3b01      	subs	r3, #1
 8014f92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014f94:	8bfb      	ldrh	r3, [r7, #30]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d1ea      	bne.n	8014f70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8014f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8014f9c:	4618      	mov	r0, r3
 8014f9e:	372c      	adds	r7, #44	@ 0x2c
 8014fa0:	46bd      	mov	sp, r7
 8014fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa6:	4770      	bx	lr

08014fa8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014fa8:	b480      	push	{r7}
 8014faa:	b085      	sub	sp, #20
 8014fac:	af00      	add	r7, sp, #0
 8014fae:	6078      	str	r0, [r7, #4]
 8014fb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014fb6:	683b      	ldr	r3, [r7, #0]
 8014fb8:	781b      	ldrb	r3, [r3, #0]
 8014fba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014fbc:	683b      	ldr	r3, [r7, #0]
 8014fbe:	785b      	ldrb	r3, [r3, #1]
 8014fc0:	2b01      	cmp	r3, #1
 8014fc2:	d12c      	bne.n	801501e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014fc4:	68bb      	ldr	r3, [r7, #8]
 8014fc6:	015a      	lsls	r2, r3, #5
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	4413      	add	r3, r2
 8014fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	db12      	blt.n	8014ffc <USB_EPSetStall+0x54>
 8014fd6:	68bb      	ldr	r3, [r7, #8]
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d00f      	beq.n	8014ffc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8014fdc:	68bb      	ldr	r3, [r7, #8]
 8014fde:	015a      	lsls	r2, r3, #5
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	4413      	add	r3, r2
 8014fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	68ba      	ldr	r2, [r7, #8]
 8014fec:	0151      	lsls	r1, r2, #5
 8014fee:	68fa      	ldr	r2, [r7, #12]
 8014ff0:	440a      	add	r2, r1
 8014ff2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014ff6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8014ffa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8014ffc:	68bb      	ldr	r3, [r7, #8]
 8014ffe:	015a      	lsls	r2, r3, #5
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	4413      	add	r3, r2
 8015004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	68ba      	ldr	r2, [r7, #8]
 801500c:	0151      	lsls	r1, r2, #5
 801500e:	68fa      	ldr	r2, [r7, #12]
 8015010:	440a      	add	r2, r1
 8015012:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015016:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801501a:	6013      	str	r3, [r2, #0]
 801501c:	e02b      	b.n	8015076 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801501e:	68bb      	ldr	r3, [r7, #8]
 8015020:	015a      	lsls	r2, r3, #5
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	4413      	add	r3, r2
 8015026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	2b00      	cmp	r3, #0
 801502e:	db12      	blt.n	8015056 <USB_EPSetStall+0xae>
 8015030:	68bb      	ldr	r3, [r7, #8]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d00f      	beq.n	8015056 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8015036:	68bb      	ldr	r3, [r7, #8]
 8015038:	015a      	lsls	r2, r3, #5
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	4413      	add	r3, r2
 801503e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	68ba      	ldr	r2, [r7, #8]
 8015046:	0151      	lsls	r1, r2, #5
 8015048:	68fa      	ldr	r2, [r7, #12]
 801504a:	440a      	add	r2, r1
 801504c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015050:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8015054:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8015056:	68bb      	ldr	r3, [r7, #8]
 8015058:	015a      	lsls	r2, r3, #5
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	4413      	add	r3, r2
 801505e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	68ba      	ldr	r2, [r7, #8]
 8015066:	0151      	lsls	r1, r2, #5
 8015068:	68fa      	ldr	r2, [r7, #12]
 801506a:	440a      	add	r2, r1
 801506c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015070:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015074:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015076:	2300      	movs	r3, #0
}
 8015078:	4618      	mov	r0, r3
 801507a:	3714      	adds	r7, #20
 801507c:	46bd      	mov	sp, r7
 801507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015082:	4770      	bx	lr

08015084 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015084:	b480      	push	{r7}
 8015086:	b085      	sub	sp, #20
 8015088:	af00      	add	r7, sp, #0
 801508a:	6078      	str	r0, [r7, #4]
 801508c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015092:	683b      	ldr	r3, [r7, #0]
 8015094:	781b      	ldrb	r3, [r3, #0]
 8015096:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015098:	683b      	ldr	r3, [r7, #0]
 801509a:	785b      	ldrb	r3, [r3, #1]
 801509c:	2b01      	cmp	r3, #1
 801509e:	d128      	bne.n	80150f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80150a0:	68bb      	ldr	r3, [r7, #8]
 80150a2:	015a      	lsls	r2, r3, #5
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	4413      	add	r3, r2
 80150a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	68ba      	ldr	r2, [r7, #8]
 80150b0:	0151      	lsls	r1, r2, #5
 80150b2:	68fa      	ldr	r2, [r7, #12]
 80150b4:	440a      	add	r2, r1
 80150b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80150ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80150be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80150c0:	683b      	ldr	r3, [r7, #0]
 80150c2:	791b      	ldrb	r3, [r3, #4]
 80150c4:	2b03      	cmp	r3, #3
 80150c6:	d003      	beq.n	80150d0 <USB_EPClearStall+0x4c>
 80150c8:	683b      	ldr	r3, [r7, #0]
 80150ca:	791b      	ldrb	r3, [r3, #4]
 80150cc:	2b02      	cmp	r3, #2
 80150ce:	d138      	bne.n	8015142 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80150d0:	68bb      	ldr	r3, [r7, #8]
 80150d2:	015a      	lsls	r2, r3, #5
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	4413      	add	r3, r2
 80150d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	68ba      	ldr	r2, [r7, #8]
 80150e0:	0151      	lsls	r1, r2, #5
 80150e2:	68fa      	ldr	r2, [r7, #12]
 80150e4:	440a      	add	r2, r1
 80150e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80150ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80150ee:	6013      	str	r3, [r2, #0]
 80150f0:	e027      	b.n	8015142 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80150f2:	68bb      	ldr	r3, [r7, #8]
 80150f4:	015a      	lsls	r2, r3, #5
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	4413      	add	r3, r2
 80150fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	68ba      	ldr	r2, [r7, #8]
 8015102:	0151      	lsls	r1, r2, #5
 8015104:	68fa      	ldr	r2, [r7, #12]
 8015106:	440a      	add	r2, r1
 8015108:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801510c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8015110:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015112:	683b      	ldr	r3, [r7, #0]
 8015114:	791b      	ldrb	r3, [r3, #4]
 8015116:	2b03      	cmp	r3, #3
 8015118:	d003      	beq.n	8015122 <USB_EPClearStall+0x9e>
 801511a:	683b      	ldr	r3, [r7, #0]
 801511c:	791b      	ldrb	r3, [r3, #4]
 801511e:	2b02      	cmp	r3, #2
 8015120:	d10f      	bne.n	8015142 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015122:	68bb      	ldr	r3, [r7, #8]
 8015124:	015a      	lsls	r2, r3, #5
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	4413      	add	r3, r2
 801512a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	68ba      	ldr	r2, [r7, #8]
 8015132:	0151      	lsls	r1, r2, #5
 8015134:	68fa      	ldr	r2, [r7, #12]
 8015136:	440a      	add	r2, r1
 8015138:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801513c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015140:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8015142:	2300      	movs	r3, #0
}
 8015144:	4618      	mov	r0, r3
 8015146:	3714      	adds	r7, #20
 8015148:	46bd      	mov	sp, r7
 801514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801514e:	4770      	bx	lr

08015150 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8015150:	b480      	push	{r7}
 8015152:	b085      	sub	sp, #20
 8015154:	af00      	add	r7, sp, #0
 8015156:	6078      	str	r0, [r7, #4]
 8015158:	460b      	mov	r3, r1
 801515a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	68fa      	ldr	r2, [r7, #12]
 801516a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801516e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8015172:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801517a:	681a      	ldr	r2, [r3, #0]
 801517c:	78fb      	ldrb	r3, [r7, #3]
 801517e:	011b      	lsls	r3, r3, #4
 8015180:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8015184:	68f9      	ldr	r1, [r7, #12]
 8015186:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801518a:	4313      	orrs	r3, r2
 801518c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801518e:	2300      	movs	r3, #0
}
 8015190:	4618      	mov	r0, r3
 8015192:	3714      	adds	r7, #20
 8015194:	46bd      	mov	sp, r7
 8015196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801519a:	4770      	bx	lr

0801519c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801519c:	b480      	push	{r7}
 801519e:	b085      	sub	sp, #20
 80151a0:	af00      	add	r7, sp, #0
 80151a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	68fa      	ldr	r2, [r7, #12]
 80151b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80151b6:	f023 0303 	bic.w	r3, r3, #3
 80151ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80151c2:	685b      	ldr	r3, [r3, #4]
 80151c4:	68fa      	ldr	r2, [r7, #12]
 80151c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80151ca:	f023 0302 	bic.w	r3, r3, #2
 80151ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80151d0:	2300      	movs	r3, #0
}
 80151d2:	4618      	mov	r0, r3
 80151d4:	3714      	adds	r7, #20
 80151d6:	46bd      	mov	sp, r7
 80151d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151dc:	4770      	bx	lr

080151de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80151de:	b480      	push	{r7}
 80151e0:	b085      	sub	sp, #20
 80151e2:	af00      	add	r7, sp, #0
 80151e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	68fa      	ldr	r2, [r7, #12]
 80151f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80151f8:	f023 0303 	bic.w	r3, r3, #3
 80151fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015204:	685b      	ldr	r3, [r3, #4]
 8015206:	68fa      	ldr	r2, [r7, #12]
 8015208:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801520c:	f043 0302 	orr.w	r3, r3, #2
 8015210:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015212:	2300      	movs	r3, #0
}
 8015214:	4618      	mov	r0, r3
 8015216:	3714      	adds	r7, #20
 8015218:	46bd      	mov	sp, r7
 801521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801521e:	4770      	bx	lr

08015220 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8015220:	b480      	push	{r7}
 8015222:	b085      	sub	sp, #20
 8015224:	af00      	add	r7, sp, #0
 8015226:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	695b      	ldr	r3, [r3, #20]
 801522c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	699b      	ldr	r3, [r3, #24]
 8015232:	68fa      	ldr	r2, [r7, #12]
 8015234:	4013      	ands	r3, r2
 8015236:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8015238:	68fb      	ldr	r3, [r7, #12]
}
 801523a:	4618      	mov	r0, r3
 801523c:	3714      	adds	r7, #20
 801523e:	46bd      	mov	sp, r7
 8015240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015244:	4770      	bx	lr

08015246 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8015246:	b480      	push	{r7}
 8015248:	b085      	sub	sp, #20
 801524a:	af00      	add	r7, sp, #0
 801524c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015258:	699b      	ldr	r3, [r3, #24]
 801525a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015262:	69db      	ldr	r3, [r3, #28]
 8015264:	68ba      	ldr	r2, [r7, #8]
 8015266:	4013      	ands	r3, r2
 8015268:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801526a:	68bb      	ldr	r3, [r7, #8]
 801526c:	0c1b      	lsrs	r3, r3, #16
}
 801526e:	4618      	mov	r0, r3
 8015270:	3714      	adds	r7, #20
 8015272:	46bd      	mov	sp, r7
 8015274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015278:	4770      	bx	lr

0801527a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801527a:	b480      	push	{r7}
 801527c:	b085      	sub	sp, #20
 801527e:	af00      	add	r7, sp, #0
 8015280:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801528c:	699b      	ldr	r3, [r3, #24]
 801528e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015296:	69db      	ldr	r3, [r3, #28]
 8015298:	68ba      	ldr	r2, [r7, #8]
 801529a:	4013      	ands	r3, r2
 801529c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801529e:	68bb      	ldr	r3, [r7, #8]
 80152a0:	b29b      	uxth	r3, r3
}
 80152a2:	4618      	mov	r0, r3
 80152a4:	3714      	adds	r7, #20
 80152a6:	46bd      	mov	sp, r7
 80152a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ac:	4770      	bx	lr

080152ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80152ae:	b480      	push	{r7}
 80152b0:	b085      	sub	sp, #20
 80152b2:	af00      	add	r7, sp, #0
 80152b4:	6078      	str	r0, [r7, #4]
 80152b6:	460b      	mov	r3, r1
 80152b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80152be:	78fb      	ldrb	r3, [r7, #3]
 80152c0:	015a      	lsls	r2, r3, #5
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	4413      	add	r3, r2
 80152c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80152ca:	689b      	ldr	r3, [r3, #8]
 80152cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80152d4:	695b      	ldr	r3, [r3, #20]
 80152d6:	68ba      	ldr	r2, [r7, #8]
 80152d8:	4013      	ands	r3, r2
 80152da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80152dc:	68bb      	ldr	r3, [r7, #8]
}
 80152de:	4618      	mov	r0, r3
 80152e0:	3714      	adds	r7, #20
 80152e2:	46bd      	mov	sp, r7
 80152e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e8:	4770      	bx	lr

080152ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80152ea:	b480      	push	{r7}
 80152ec:	b087      	sub	sp, #28
 80152ee:	af00      	add	r7, sp, #0
 80152f0:	6078      	str	r0, [r7, #4]
 80152f2:	460b      	mov	r3, r1
 80152f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80152fa:	697b      	ldr	r3, [r7, #20]
 80152fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015300:	691b      	ldr	r3, [r3, #16]
 8015302:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8015304:	697b      	ldr	r3, [r7, #20]
 8015306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801530a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801530c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801530e:	78fb      	ldrb	r3, [r7, #3]
 8015310:	f003 030f 	and.w	r3, r3, #15
 8015314:	68fa      	ldr	r2, [r7, #12]
 8015316:	fa22 f303 	lsr.w	r3, r2, r3
 801531a:	01db      	lsls	r3, r3, #7
 801531c:	b2db      	uxtb	r3, r3
 801531e:	693a      	ldr	r2, [r7, #16]
 8015320:	4313      	orrs	r3, r2
 8015322:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8015324:	78fb      	ldrb	r3, [r7, #3]
 8015326:	015a      	lsls	r2, r3, #5
 8015328:	697b      	ldr	r3, [r7, #20]
 801532a:	4413      	add	r3, r2
 801532c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015330:	689b      	ldr	r3, [r3, #8]
 8015332:	693a      	ldr	r2, [r7, #16]
 8015334:	4013      	ands	r3, r2
 8015336:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015338:	68bb      	ldr	r3, [r7, #8]
}
 801533a:	4618      	mov	r0, r3
 801533c:	371c      	adds	r7, #28
 801533e:	46bd      	mov	sp, r7
 8015340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015344:	4770      	bx	lr

08015346 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8015346:	b480      	push	{r7}
 8015348:	b083      	sub	sp, #12
 801534a:	af00      	add	r7, sp, #0
 801534c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	695b      	ldr	r3, [r3, #20]
 8015352:	f003 0301 	and.w	r3, r3, #1
}
 8015356:	4618      	mov	r0, r3
 8015358:	370c      	adds	r7, #12
 801535a:	46bd      	mov	sp, r7
 801535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015360:	4770      	bx	lr
	...

08015364 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8015364:	b480      	push	{r7}
 8015366:	b085      	sub	sp, #20
 8015368:	af00      	add	r7, sp, #0
 801536a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015376:	681a      	ldr	r2, [r3, #0]
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801537e:	4619      	mov	r1, r3
 8015380:	4b09      	ldr	r3, [pc, #36]	@ (80153a8 <USB_ActivateSetup+0x44>)
 8015382:	4013      	ands	r3, r2
 8015384:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801538c:	685b      	ldr	r3, [r3, #4]
 801538e:	68fa      	ldr	r2, [r7, #12]
 8015390:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015398:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801539a:	2300      	movs	r3, #0
}
 801539c:	4618      	mov	r0, r3
 801539e:	3714      	adds	r7, #20
 80153a0:	46bd      	mov	sp, r7
 80153a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a6:	4770      	bx	lr
 80153a8:	fffff800 	.word	0xfffff800

080153ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80153ac:	b480      	push	{r7}
 80153ae:	b087      	sub	sp, #28
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	60f8      	str	r0, [r7, #12]
 80153b4:	460b      	mov	r3, r1
 80153b6:	607a      	str	r2, [r7, #4]
 80153b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	333c      	adds	r3, #60	@ 0x3c
 80153c2:	3304      	adds	r3, #4
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80153c8:	693b      	ldr	r3, [r7, #16]
 80153ca:	4a26      	ldr	r2, [pc, #152]	@ (8015464 <USB_EP0_OutStart+0xb8>)
 80153cc:	4293      	cmp	r3, r2
 80153ce:	d90a      	bls.n	80153e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80153d0:	697b      	ldr	r3, [r7, #20]
 80153d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80153dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80153e0:	d101      	bne.n	80153e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80153e2:	2300      	movs	r3, #0
 80153e4:	e037      	b.n	8015456 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80153e6:	697b      	ldr	r3, [r7, #20]
 80153e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80153ec:	461a      	mov	r2, r3
 80153ee:	2300      	movs	r3, #0
 80153f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80153f2:	697b      	ldr	r3, [r7, #20]
 80153f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80153f8:	691b      	ldr	r3, [r3, #16]
 80153fa:	697a      	ldr	r2, [r7, #20]
 80153fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015400:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015404:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8015406:	697b      	ldr	r3, [r7, #20]
 8015408:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801540c:	691b      	ldr	r3, [r3, #16]
 801540e:	697a      	ldr	r2, [r7, #20]
 8015410:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015414:	f043 0318 	orr.w	r3, r3, #24
 8015418:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801541a:	697b      	ldr	r3, [r7, #20]
 801541c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015420:	691b      	ldr	r3, [r3, #16]
 8015422:	697a      	ldr	r2, [r7, #20]
 8015424:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015428:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 801542c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801542e:	7afb      	ldrb	r3, [r7, #11]
 8015430:	2b01      	cmp	r3, #1
 8015432:	d10f      	bne.n	8015454 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8015434:	697b      	ldr	r3, [r7, #20]
 8015436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801543a:	461a      	mov	r2, r3
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8015440:	697b      	ldr	r3, [r7, #20]
 8015442:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	697a      	ldr	r2, [r7, #20]
 801544a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801544e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8015452:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015454:	2300      	movs	r3, #0
}
 8015456:	4618      	mov	r0, r3
 8015458:	371c      	adds	r7, #28
 801545a:	46bd      	mov	sp, r7
 801545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015460:	4770      	bx	lr
 8015462:	bf00      	nop
 8015464:	4f54300a 	.word	0x4f54300a

08015468 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8015468:	b480      	push	{r7}
 801546a:	b085      	sub	sp, #20
 801546c:	af00      	add	r7, sp, #0
 801546e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015470:	2300      	movs	r3, #0
 8015472:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	3301      	adds	r3, #1
 8015478:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	4a13      	ldr	r2, [pc, #76]	@ (80154cc <USB_CoreReset+0x64>)
 801547e:	4293      	cmp	r3, r2
 8015480:	d901      	bls.n	8015486 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8015482:	2303      	movs	r3, #3
 8015484:	e01b      	b.n	80154be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	691b      	ldr	r3, [r3, #16]
 801548a:	2b00      	cmp	r3, #0
 801548c:	daf2      	bge.n	8015474 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801548e:	2300      	movs	r3, #0
 8015490:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	691b      	ldr	r3, [r3, #16]
 8015496:	f043 0201 	orr.w	r2, r3, #1
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	3301      	adds	r3, #1
 80154a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	4a09      	ldr	r2, [pc, #36]	@ (80154cc <USB_CoreReset+0x64>)
 80154a8:	4293      	cmp	r3, r2
 80154aa:	d901      	bls.n	80154b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80154ac:	2303      	movs	r3, #3
 80154ae:	e006      	b.n	80154be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	691b      	ldr	r3, [r3, #16]
 80154b4:	f003 0301 	and.w	r3, r3, #1
 80154b8:	2b01      	cmp	r3, #1
 80154ba:	d0f0      	beq.n	801549e <USB_CoreReset+0x36>

  return HAL_OK;
 80154bc:	2300      	movs	r3, #0
}
 80154be:	4618      	mov	r0, r3
 80154c0:	3714      	adds	r7, #20
 80154c2:	46bd      	mov	sp, r7
 80154c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c8:	4770      	bx	lr
 80154ca:	bf00      	nop
 80154cc:	00030d40 	.word	0x00030d40

080154d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80154d0:	b580      	push	{r7, lr}
 80154d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80154d4:	4904      	ldr	r1, [pc, #16]	@ (80154e8 <MX_FATFS_Init+0x18>)
 80154d6:	4805      	ldr	r0, [pc, #20]	@ (80154ec <MX_FATFS_Init+0x1c>)
 80154d8:	f005 f8fc 	bl	801a6d4 <FATFS_LinkDriver>
 80154dc:	4603      	mov	r3, r0
 80154de:	461a      	mov	r2, r3
 80154e0:	4b03      	ldr	r3, [pc, #12]	@ (80154f0 <MX_FATFS_Init+0x20>)
 80154e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80154e4:	bf00      	nop
 80154e6:	bd80      	pop	{r7, pc}
 80154e8:	24003ec8 	.word	0x24003ec8
 80154ec:	08020394 	.word	0x08020394
 80154f0:	24003ec4 	.word	0x24003ec4

080154f4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80154f4:	b480      	push	{r7}
 80154f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80154f8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80154fa:	4618      	mov	r0, r3
 80154fc:	46bd      	mov	sp, r7
 80154fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015502:	4770      	bx	lr

08015504 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8015504:	b580      	push	{r7, lr}
 8015506:	b082      	sub	sp, #8
 8015508:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801550a:	2300      	movs	r3, #0
 801550c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801550e:	f000 f885 	bl	801561c <BSP_SD_IsDetected>
 8015512:	4603      	mov	r3, r0
 8015514:	2b01      	cmp	r3, #1
 8015516:	d001      	beq.n	801551c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8015518:	2302      	movs	r3, #2
 801551a:	e012      	b.n	8015542 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 801551c:	480b      	ldr	r0, [pc, #44]	@ (801554c <BSP_SD_Init+0x48>)
 801551e:	f7f8 ff39 	bl	800e394 <HAL_SD_Init>
 8015522:	4603      	mov	r3, r0
 8015524:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8015526:	79fb      	ldrb	r3, [r7, #7]
 8015528:	2b00      	cmp	r3, #0
 801552a:	d109      	bne.n	8015540 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801552c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8015530:	4806      	ldr	r0, [pc, #24]	@ (801554c <BSP_SD_Init+0x48>)
 8015532:	f7f9 fdef 	bl	800f114 <HAL_SD_ConfigWideBusOperation>
 8015536:	4603      	mov	r3, r0
 8015538:	2b00      	cmp	r3, #0
 801553a:	d001      	beq.n	8015540 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801553c:	2301      	movs	r3, #1
 801553e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8015540:	79fb      	ldrb	r3, [r7, #7]
}
 8015542:	4618      	mov	r0, r3
 8015544:	3708      	adds	r7, #8
 8015546:	46bd      	mov	sp, r7
 8015548:	bd80      	pop	{r7, pc}
 801554a:	bf00      	nop
 801554c:	24001030 	.word	0x24001030

08015550 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8015550:	b580      	push	{r7, lr}
 8015552:	b086      	sub	sp, #24
 8015554:	af00      	add	r7, sp, #0
 8015556:	60f8      	str	r0, [r7, #12]
 8015558:	60b9      	str	r1, [r7, #8]
 801555a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801555c:	2300      	movs	r3, #0
 801555e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	68ba      	ldr	r2, [r7, #8]
 8015564:	68f9      	ldr	r1, [r7, #12]
 8015566:	4806      	ldr	r0, [pc, #24]	@ (8015580 <BSP_SD_ReadBlocks_DMA+0x30>)
 8015568:	f7f9 f834 	bl	800e5d4 <HAL_SD_ReadBlocks_DMA>
 801556c:	4603      	mov	r3, r0
 801556e:	2b00      	cmp	r3, #0
 8015570:	d001      	beq.n	8015576 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8015572:	2301      	movs	r3, #1
 8015574:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8015576:	7dfb      	ldrb	r3, [r7, #23]
}
 8015578:	4618      	mov	r0, r3
 801557a:	3718      	adds	r7, #24
 801557c:	46bd      	mov	sp, r7
 801557e:	bd80      	pop	{r7, pc}
 8015580:	24001030 	.word	0x24001030

08015584 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8015584:	b580      	push	{r7, lr}
 8015586:	b086      	sub	sp, #24
 8015588:	af00      	add	r7, sp, #0
 801558a:	60f8      	str	r0, [r7, #12]
 801558c:	60b9      	str	r1, [r7, #8]
 801558e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8015590:	2300      	movs	r3, #0
 8015592:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	68ba      	ldr	r2, [r7, #8]
 8015598:	68f9      	ldr	r1, [r7, #12]
 801559a:	4806      	ldr	r0, [pc, #24]	@ (80155b4 <BSP_SD_WriteBlocks_DMA+0x30>)
 801559c:	f7f9 f8c2 	bl	800e724 <HAL_SD_WriteBlocks_DMA>
 80155a0:	4603      	mov	r3, r0
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d001      	beq.n	80155aa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80155a6:	2301      	movs	r3, #1
 80155a8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80155aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80155ac:	4618      	mov	r0, r3
 80155ae:	3718      	adds	r7, #24
 80155b0:	46bd      	mov	sp, r7
 80155b2:	bd80      	pop	{r7, pc}
 80155b4:	24001030 	.word	0x24001030

080155b8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80155b8:	b580      	push	{r7, lr}
 80155ba:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80155bc:	4805      	ldr	r0, [pc, #20]	@ (80155d4 <BSP_SD_GetCardState+0x1c>)
 80155be:	f7f9 febb 	bl	800f338 <HAL_SD_GetCardState>
 80155c2:	4603      	mov	r3, r0
 80155c4:	2b04      	cmp	r3, #4
 80155c6:	bf14      	ite	ne
 80155c8:	2301      	movne	r3, #1
 80155ca:	2300      	moveq	r3, #0
 80155cc:	b2db      	uxtb	r3, r3
}
 80155ce:	4618      	mov	r0, r3
 80155d0:	bd80      	pop	{r7, pc}
 80155d2:	bf00      	nop
 80155d4:	24001030 	.word	0x24001030

080155d8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80155d8:	b580      	push	{r7, lr}
 80155da:	b082      	sub	sp, #8
 80155dc:	af00      	add	r7, sp, #0
 80155de:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 80155e0:	6879      	ldr	r1, [r7, #4]
 80155e2:	4803      	ldr	r0, [pc, #12]	@ (80155f0 <BSP_SD_GetCardInfo+0x18>)
 80155e4:	f7f9 fd6a 	bl	800f0bc <HAL_SD_GetCardInfo>
}
 80155e8:	bf00      	nop
 80155ea:	3708      	adds	r7, #8
 80155ec:	46bd      	mov	sp, r7
 80155ee:	bd80      	pop	{r7, pc}
 80155f0:	24001030 	.word	0x24001030

080155f4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80155f4:	b580      	push	{r7, lr}
 80155f6:	b082      	sub	sp, #8
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80155fc:	f000 f984 	bl	8015908 <BSP_SD_WriteCpltCallback>
}
 8015600:	bf00      	nop
 8015602:	3708      	adds	r7, #8
 8015604:	46bd      	mov	sp, r7
 8015606:	bd80      	pop	{r7, pc}

08015608 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8015608:	b580      	push	{r7, lr}
 801560a:	b082      	sub	sp, #8
 801560c:	af00      	add	r7, sp, #0
 801560e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8015610:	f000 f986 	bl	8015920 <BSP_SD_ReadCpltCallback>
}
 8015614:	bf00      	nop
 8015616:	3708      	adds	r7, #8
 8015618:	46bd      	mov	sp, r7
 801561a:	bd80      	pop	{r7, pc}

0801561c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801561c:	b480      	push	{r7}
 801561e:	b083      	sub	sp, #12
 8015620:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8015622:	2301      	movs	r3, #1
 8015624:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8015626:	79fb      	ldrb	r3, [r7, #7]
 8015628:	b2db      	uxtb	r3, r3
}
 801562a:	4618      	mov	r0, r3
 801562c:	370c      	adds	r7, #12
 801562e:	46bd      	mov	sp, r7
 8015630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015634:	4770      	bx	lr

08015636 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8015636:	b580      	push	{r7, lr}
 8015638:	b084      	sub	sp, #16
 801563a:	af00      	add	r7, sp, #0
 801563c:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801563e:	f7ee fddd 	bl	80041fc <HAL_GetTick>
 8015642:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8015644:	e006      	b.n	8015654 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015646:	f7ff ffb7 	bl	80155b8 <BSP_SD_GetCardState>
 801564a:	4603      	mov	r3, r0
 801564c:	2b00      	cmp	r3, #0
 801564e:	d101      	bne.n	8015654 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8015650:	2300      	movs	r3, #0
 8015652:	e009      	b.n	8015668 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8015654:	f7ee fdd2 	bl	80041fc <HAL_GetTick>
 8015658:	4602      	mov	r2, r0
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	1ad3      	subs	r3, r2, r3
 801565e:	687a      	ldr	r2, [r7, #4]
 8015660:	429a      	cmp	r2, r3
 8015662:	d8f0      	bhi.n	8015646 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8015664:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8015668:	4618      	mov	r0, r3
 801566a:	3710      	adds	r7, #16
 801566c:	46bd      	mov	sp, r7
 801566e:	bd80      	pop	{r7, pc}

08015670 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8015670:	b580      	push	{r7, lr}
 8015672:	b082      	sub	sp, #8
 8015674:	af00      	add	r7, sp, #0
 8015676:	4603      	mov	r3, r0
 8015678:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801567a:	4b0b      	ldr	r3, [pc, #44]	@ (80156a8 <SD_CheckStatus+0x38>)
 801567c:	2201      	movs	r2, #1
 801567e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8015680:	f7ff ff9a 	bl	80155b8 <BSP_SD_GetCardState>
 8015684:	4603      	mov	r3, r0
 8015686:	2b00      	cmp	r3, #0
 8015688:	d107      	bne.n	801569a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801568a:	4b07      	ldr	r3, [pc, #28]	@ (80156a8 <SD_CheckStatus+0x38>)
 801568c:	781b      	ldrb	r3, [r3, #0]
 801568e:	b2db      	uxtb	r3, r3
 8015690:	f023 0301 	bic.w	r3, r3, #1
 8015694:	b2da      	uxtb	r2, r3
 8015696:	4b04      	ldr	r3, [pc, #16]	@ (80156a8 <SD_CheckStatus+0x38>)
 8015698:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801569a:	4b03      	ldr	r3, [pc, #12]	@ (80156a8 <SD_CheckStatus+0x38>)
 801569c:	781b      	ldrb	r3, [r3, #0]
 801569e:	b2db      	uxtb	r3, r3
}
 80156a0:	4618      	mov	r0, r3
 80156a2:	3708      	adds	r7, #8
 80156a4:	46bd      	mov	sp, r7
 80156a6:	bd80      	pop	{r7, pc}
 80156a8:	2400010d 	.word	0x2400010d

080156ac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80156ac:	b580      	push	{r7, lr}
 80156ae:	b082      	sub	sp, #8
 80156b0:	af00      	add	r7, sp, #0
 80156b2:	4603      	mov	r3, r0
 80156b4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80156b6:	f7ff ff25 	bl	8015504 <BSP_SD_Init>
 80156ba:	4603      	mov	r3, r0
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d107      	bne.n	80156d0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80156c0:	79fb      	ldrb	r3, [r7, #7]
 80156c2:	4618      	mov	r0, r3
 80156c4:	f7ff ffd4 	bl	8015670 <SD_CheckStatus>
 80156c8:	4603      	mov	r3, r0
 80156ca:	461a      	mov	r2, r3
 80156cc:	4b04      	ldr	r3, [pc, #16]	@ (80156e0 <SD_initialize+0x34>)
 80156ce:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80156d0:	4b03      	ldr	r3, [pc, #12]	@ (80156e0 <SD_initialize+0x34>)
 80156d2:	781b      	ldrb	r3, [r3, #0]
 80156d4:	b2db      	uxtb	r3, r3
}
 80156d6:	4618      	mov	r0, r3
 80156d8:	3708      	adds	r7, #8
 80156da:	46bd      	mov	sp, r7
 80156dc:	bd80      	pop	{r7, pc}
 80156de:	bf00      	nop
 80156e0:	2400010d 	.word	0x2400010d

080156e4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80156e4:	b580      	push	{r7, lr}
 80156e6:	b082      	sub	sp, #8
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	4603      	mov	r3, r0
 80156ec:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80156ee:	79fb      	ldrb	r3, [r7, #7]
 80156f0:	4618      	mov	r0, r3
 80156f2:	f7ff ffbd 	bl	8015670 <SD_CheckStatus>
 80156f6:	4603      	mov	r3, r0
}
 80156f8:	4618      	mov	r0, r3
 80156fa:	3708      	adds	r7, #8
 80156fc:	46bd      	mov	sp, r7
 80156fe:	bd80      	pop	{r7, pc}

08015700 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8015700:	b580      	push	{r7, lr}
 8015702:	b086      	sub	sp, #24
 8015704:	af00      	add	r7, sp, #0
 8015706:	60b9      	str	r1, [r7, #8]
 8015708:	607a      	str	r2, [r7, #4]
 801570a:	603b      	str	r3, [r7, #0]
 801570c:	4603      	mov	r3, r0
 801570e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8015710:	2301      	movs	r3, #1
 8015712:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8015714:	f247 5030 	movw	r0, #30000	@ 0x7530
 8015718:	f7ff ff8d 	bl	8015636 <SD_CheckStatusWithTimeout>
 801571c:	4603      	mov	r3, r0
 801571e:	2b00      	cmp	r3, #0
 8015720:	da01      	bge.n	8015726 <SD_read+0x26>
  {
    return res;
 8015722:	7dfb      	ldrb	r3, [r7, #23]
 8015724:	e03b      	b.n	801579e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8015726:	683a      	ldr	r2, [r7, #0]
 8015728:	6879      	ldr	r1, [r7, #4]
 801572a:	68b8      	ldr	r0, [r7, #8]
 801572c:	f7ff ff10 	bl	8015550 <BSP_SD_ReadBlocks_DMA>
 8015730:	4603      	mov	r3, r0
 8015732:	2b00      	cmp	r3, #0
 8015734:	d132      	bne.n	801579c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8015736:	4b1c      	ldr	r3, [pc, #112]	@ (80157a8 <SD_read+0xa8>)
 8015738:	2200      	movs	r2, #0
 801573a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 801573c:	f7ee fd5e 	bl	80041fc <HAL_GetTick>
 8015740:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015742:	bf00      	nop
 8015744:	4b18      	ldr	r3, [pc, #96]	@ (80157a8 <SD_read+0xa8>)
 8015746:	681b      	ldr	r3, [r3, #0]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d108      	bne.n	801575e <SD_read+0x5e>
 801574c:	f7ee fd56 	bl	80041fc <HAL_GetTick>
 8015750:	4602      	mov	r2, r0
 8015752:	693b      	ldr	r3, [r7, #16]
 8015754:	1ad3      	subs	r3, r2, r3
 8015756:	f247 522f 	movw	r2, #29999	@ 0x752f
 801575a:	4293      	cmp	r3, r2
 801575c:	d9f2      	bls.n	8015744 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801575e:	4b12      	ldr	r3, [pc, #72]	@ (80157a8 <SD_read+0xa8>)
 8015760:	681b      	ldr	r3, [r3, #0]
 8015762:	2b00      	cmp	r3, #0
 8015764:	d102      	bne.n	801576c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8015766:	2301      	movs	r3, #1
 8015768:	75fb      	strb	r3, [r7, #23]
 801576a:	e017      	b.n	801579c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 801576c:	4b0e      	ldr	r3, [pc, #56]	@ (80157a8 <SD_read+0xa8>)
 801576e:	2200      	movs	r2, #0
 8015770:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8015772:	f7ee fd43 	bl	80041fc <HAL_GetTick>
 8015776:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015778:	e007      	b.n	801578a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801577a:	f7ff ff1d 	bl	80155b8 <BSP_SD_GetCardState>
 801577e:	4603      	mov	r3, r0
 8015780:	2b00      	cmp	r3, #0
 8015782:	d102      	bne.n	801578a <SD_read+0x8a>
          {
            res = RES_OK;
 8015784:	2300      	movs	r3, #0
 8015786:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8015788:	e008      	b.n	801579c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801578a:	f7ee fd37 	bl	80041fc <HAL_GetTick>
 801578e:	4602      	mov	r2, r0
 8015790:	693b      	ldr	r3, [r7, #16]
 8015792:	1ad3      	subs	r3, r2, r3
 8015794:	f247 522f 	movw	r2, #29999	@ 0x752f
 8015798:	4293      	cmp	r3, r2
 801579a:	d9ee      	bls.n	801577a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 801579c:	7dfb      	ldrb	r3, [r7, #23]
}
 801579e:	4618      	mov	r0, r3
 80157a0:	3718      	adds	r7, #24
 80157a2:	46bd      	mov	sp, r7
 80157a4:	bd80      	pop	{r7, pc}
 80157a6:	bf00      	nop
 80157a8:	24003ed0 	.word	0x24003ed0

080157ac <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b086      	sub	sp, #24
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	60b9      	str	r1, [r7, #8]
 80157b4:	607a      	str	r2, [r7, #4]
 80157b6:	603b      	str	r3, [r7, #0]
 80157b8:	4603      	mov	r3, r0
 80157ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80157bc:	2301      	movs	r3, #1
 80157be:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80157c0:	4b24      	ldr	r3, [pc, #144]	@ (8015854 <SD_write+0xa8>)
 80157c2:	2200      	movs	r2, #0
 80157c4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80157c6:	f247 5030 	movw	r0, #30000	@ 0x7530
 80157ca:	f7ff ff34 	bl	8015636 <SD_CheckStatusWithTimeout>
 80157ce:	4603      	mov	r3, r0
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	da01      	bge.n	80157d8 <SD_write+0x2c>
  {
    return res;
 80157d4:	7dfb      	ldrb	r3, [r7, #23]
 80157d6:	e038      	b.n	801584a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80157d8:	683a      	ldr	r2, [r7, #0]
 80157da:	6879      	ldr	r1, [r7, #4]
 80157dc:	68b8      	ldr	r0, [r7, #8]
 80157de:	f7ff fed1 	bl	8015584 <BSP_SD_WriteBlocks_DMA>
 80157e2:	4603      	mov	r3, r0
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d12f      	bne.n	8015848 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80157e8:	f7ee fd08 	bl	80041fc <HAL_GetTick>
 80157ec:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80157ee:	bf00      	nop
 80157f0:	4b18      	ldr	r3, [pc, #96]	@ (8015854 <SD_write+0xa8>)
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d108      	bne.n	801580a <SD_write+0x5e>
 80157f8:	f7ee fd00 	bl	80041fc <HAL_GetTick>
 80157fc:	4602      	mov	r2, r0
 80157fe:	693b      	ldr	r3, [r7, #16]
 8015800:	1ad3      	subs	r3, r2, r3
 8015802:	f247 522f 	movw	r2, #29999	@ 0x752f
 8015806:	4293      	cmp	r3, r2
 8015808:	d9f2      	bls.n	80157f0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801580a:	4b12      	ldr	r3, [pc, #72]	@ (8015854 <SD_write+0xa8>)
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	2b00      	cmp	r3, #0
 8015810:	d102      	bne.n	8015818 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8015812:	2301      	movs	r3, #1
 8015814:	75fb      	strb	r3, [r7, #23]
 8015816:	e017      	b.n	8015848 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8015818:	4b0e      	ldr	r3, [pc, #56]	@ (8015854 <SD_write+0xa8>)
 801581a:	2200      	movs	r2, #0
 801581c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801581e:	f7ee fced 	bl	80041fc <HAL_GetTick>
 8015822:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015824:	e007      	b.n	8015836 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015826:	f7ff fec7 	bl	80155b8 <BSP_SD_GetCardState>
 801582a:	4603      	mov	r3, r0
 801582c:	2b00      	cmp	r3, #0
 801582e:	d102      	bne.n	8015836 <SD_write+0x8a>
          {
            res = RES_OK;
 8015830:	2300      	movs	r3, #0
 8015832:	75fb      	strb	r3, [r7, #23]
            break;
 8015834:	e008      	b.n	8015848 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015836:	f7ee fce1 	bl	80041fc <HAL_GetTick>
 801583a:	4602      	mov	r2, r0
 801583c:	693b      	ldr	r3, [r7, #16]
 801583e:	1ad3      	subs	r3, r2, r3
 8015840:	f247 522f 	movw	r2, #29999	@ 0x752f
 8015844:	4293      	cmp	r3, r2
 8015846:	d9ee      	bls.n	8015826 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8015848:	7dfb      	ldrb	r3, [r7, #23]
}
 801584a:	4618      	mov	r0, r3
 801584c:	3718      	adds	r7, #24
 801584e:	46bd      	mov	sp, r7
 8015850:	bd80      	pop	{r7, pc}
 8015852:	bf00      	nop
 8015854:	24003ecc 	.word	0x24003ecc

08015858 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8015858:	b580      	push	{r7, lr}
 801585a:	b08c      	sub	sp, #48	@ 0x30
 801585c:	af00      	add	r7, sp, #0
 801585e:	4603      	mov	r3, r0
 8015860:	603a      	str	r2, [r7, #0]
 8015862:	71fb      	strb	r3, [r7, #7]
 8015864:	460b      	mov	r3, r1
 8015866:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8015868:	2301      	movs	r3, #1
 801586a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801586e:	4b25      	ldr	r3, [pc, #148]	@ (8015904 <SD_ioctl+0xac>)
 8015870:	781b      	ldrb	r3, [r3, #0]
 8015872:	b2db      	uxtb	r3, r3
 8015874:	f003 0301 	and.w	r3, r3, #1
 8015878:	2b00      	cmp	r3, #0
 801587a:	d001      	beq.n	8015880 <SD_ioctl+0x28>
 801587c:	2303      	movs	r3, #3
 801587e:	e03c      	b.n	80158fa <SD_ioctl+0xa2>

  switch (cmd)
 8015880:	79bb      	ldrb	r3, [r7, #6]
 8015882:	2b03      	cmp	r3, #3
 8015884:	d834      	bhi.n	80158f0 <SD_ioctl+0x98>
 8015886:	a201      	add	r2, pc, #4	@ (adr r2, 801588c <SD_ioctl+0x34>)
 8015888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801588c:	0801589d 	.word	0x0801589d
 8015890:	080158a5 	.word	0x080158a5
 8015894:	080158bd 	.word	0x080158bd
 8015898:	080158d7 	.word	0x080158d7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801589c:	2300      	movs	r3, #0
 801589e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80158a2:	e028      	b.n	80158f6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80158a4:	f107 0308 	add.w	r3, r7, #8
 80158a8:	4618      	mov	r0, r3
 80158aa:	f7ff fe95 	bl	80155d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80158ae:	6a3a      	ldr	r2, [r7, #32]
 80158b0:	683b      	ldr	r3, [r7, #0]
 80158b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80158b4:	2300      	movs	r3, #0
 80158b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80158ba:	e01c      	b.n	80158f6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80158bc:	f107 0308 	add.w	r3, r7, #8
 80158c0:	4618      	mov	r0, r3
 80158c2:	f7ff fe89 	bl	80155d8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80158c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158c8:	b29a      	uxth	r2, r3
 80158ca:	683b      	ldr	r3, [r7, #0]
 80158cc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80158ce:	2300      	movs	r3, #0
 80158d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80158d4:	e00f      	b.n	80158f6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80158d6:	f107 0308 	add.w	r3, r7, #8
 80158da:	4618      	mov	r0, r3
 80158dc:	f7ff fe7c 	bl	80155d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80158e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158e2:	0a5a      	lsrs	r2, r3, #9
 80158e4:	683b      	ldr	r3, [r7, #0]
 80158e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80158e8:	2300      	movs	r3, #0
 80158ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80158ee:	e002      	b.n	80158f6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80158f0:	2304      	movs	r3, #4
 80158f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80158f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80158fa:	4618      	mov	r0, r3
 80158fc:	3730      	adds	r7, #48	@ 0x30
 80158fe:	46bd      	mov	sp, r7
 8015900:	bd80      	pop	{r7, pc}
 8015902:	bf00      	nop
 8015904:	2400010d 	.word	0x2400010d

08015908 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8015908:	b480      	push	{r7}
 801590a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 801590c:	4b03      	ldr	r3, [pc, #12]	@ (801591c <BSP_SD_WriteCpltCallback+0x14>)
 801590e:	2201      	movs	r2, #1
 8015910:	601a      	str	r2, [r3, #0]
}
 8015912:	bf00      	nop
 8015914:	46bd      	mov	sp, r7
 8015916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801591a:	4770      	bx	lr
 801591c:	24003ecc 	.word	0x24003ecc

08015920 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8015920:	b480      	push	{r7}
 8015922:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8015924:	4b03      	ldr	r3, [pc, #12]	@ (8015934 <BSP_SD_ReadCpltCallback+0x14>)
 8015926:	2201      	movs	r2, #1
 8015928:	601a      	str	r2, [r3, #0]
}
 801592a:	bf00      	nop
 801592c:	46bd      	mov	sp, r7
 801592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015932:	4770      	bx	lr
 8015934:	24003ed0 	.word	0x24003ed0

08015938 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015938:	b580      	push	{r7, lr}
 801593a:	b084      	sub	sp, #16
 801593c:	af00      	add	r7, sp, #0
 801593e:	6078      	str	r0, [r7, #4]
 8015940:	460b      	mov	r3, r1
 8015942:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015944:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8015948:	f005 fc6a 	bl	801b220 <USBD_static_malloc>
 801594c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	2b00      	cmp	r3, #0
 8015952:	d109      	bne.n	8015968 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	32b0      	adds	r2, #176	@ 0xb0
 801595e:	2100      	movs	r1, #0
 8015960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8015964:	2302      	movs	r3, #2
 8015966:	e0d4      	b.n	8015b12 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8015968:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 801596c:	2100      	movs	r1, #0
 801596e:	68f8      	ldr	r0, [r7, #12]
 8015970:	f007 fa76 	bl	801ce60 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	32b0      	adds	r2, #176	@ 0xb0
 801597e:	68f9      	ldr	r1, [r7, #12]
 8015980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	32b0      	adds	r2, #176	@ 0xb0
 801598e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	7c1b      	ldrb	r3, [r3, #16]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d138      	bne.n	8015a12 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80159a0:	4b5e      	ldr	r3, [pc, #376]	@ (8015b1c <USBD_CDC_Init+0x1e4>)
 80159a2:	7819      	ldrb	r1, [r3, #0]
 80159a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80159a8:	2202      	movs	r2, #2
 80159aa:	6878      	ldr	r0, [r7, #4]
 80159ac:	f005 fb15 	bl	801afda <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80159b0:	4b5a      	ldr	r3, [pc, #360]	@ (8015b1c <USBD_CDC_Init+0x1e4>)
 80159b2:	781b      	ldrb	r3, [r3, #0]
 80159b4:	f003 020f 	and.w	r2, r3, #15
 80159b8:	6879      	ldr	r1, [r7, #4]
 80159ba:	4613      	mov	r3, r2
 80159bc:	009b      	lsls	r3, r3, #2
 80159be:	4413      	add	r3, r2
 80159c0:	009b      	lsls	r3, r3, #2
 80159c2:	440b      	add	r3, r1
 80159c4:	3324      	adds	r3, #36	@ 0x24
 80159c6:	2201      	movs	r2, #1
 80159c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80159ca:	4b55      	ldr	r3, [pc, #340]	@ (8015b20 <USBD_CDC_Init+0x1e8>)
 80159cc:	7819      	ldrb	r1, [r3, #0]
 80159ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80159d2:	2202      	movs	r2, #2
 80159d4:	6878      	ldr	r0, [r7, #4]
 80159d6:	f005 fb00 	bl	801afda <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80159da:	4b51      	ldr	r3, [pc, #324]	@ (8015b20 <USBD_CDC_Init+0x1e8>)
 80159dc:	781b      	ldrb	r3, [r3, #0]
 80159de:	f003 020f 	and.w	r2, r3, #15
 80159e2:	6879      	ldr	r1, [r7, #4]
 80159e4:	4613      	mov	r3, r2
 80159e6:	009b      	lsls	r3, r3, #2
 80159e8:	4413      	add	r3, r2
 80159ea:	009b      	lsls	r3, r3, #2
 80159ec:	440b      	add	r3, r1
 80159ee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80159f2:	2201      	movs	r2, #1
 80159f4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80159f6:	4b4b      	ldr	r3, [pc, #300]	@ (8015b24 <USBD_CDC_Init+0x1ec>)
 80159f8:	781b      	ldrb	r3, [r3, #0]
 80159fa:	f003 020f 	and.w	r2, r3, #15
 80159fe:	6879      	ldr	r1, [r7, #4]
 8015a00:	4613      	mov	r3, r2
 8015a02:	009b      	lsls	r3, r3, #2
 8015a04:	4413      	add	r3, r2
 8015a06:	009b      	lsls	r3, r3, #2
 8015a08:	440b      	add	r3, r1
 8015a0a:	3326      	adds	r3, #38	@ 0x26
 8015a0c:	2210      	movs	r2, #16
 8015a0e:	801a      	strh	r2, [r3, #0]
 8015a10:	e035      	b.n	8015a7e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015a12:	4b42      	ldr	r3, [pc, #264]	@ (8015b1c <USBD_CDC_Init+0x1e4>)
 8015a14:	7819      	ldrb	r1, [r3, #0]
 8015a16:	2340      	movs	r3, #64	@ 0x40
 8015a18:	2202      	movs	r2, #2
 8015a1a:	6878      	ldr	r0, [r7, #4]
 8015a1c:	f005 fadd 	bl	801afda <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015a20:	4b3e      	ldr	r3, [pc, #248]	@ (8015b1c <USBD_CDC_Init+0x1e4>)
 8015a22:	781b      	ldrb	r3, [r3, #0]
 8015a24:	f003 020f 	and.w	r2, r3, #15
 8015a28:	6879      	ldr	r1, [r7, #4]
 8015a2a:	4613      	mov	r3, r2
 8015a2c:	009b      	lsls	r3, r3, #2
 8015a2e:	4413      	add	r3, r2
 8015a30:	009b      	lsls	r3, r3, #2
 8015a32:	440b      	add	r3, r1
 8015a34:	3324      	adds	r3, #36	@ 0x24
 8015a36:	2201      	movs	r2, #1
 8015a38:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015a3a:	4b39      	ldr	r3, [pc, #228]	@ (8015b20 <USBD_CDC_Init+0x1e8>)
 8015a3c:	7819      	ldrb	r1, [r3, #0]
 8015a3e:	2340      	movs	r3, #64	@ 0x40
 8015a40:	2202      	movs	r2, #2
 8015a42:	6878      	ldr	r0, [r7, #4]
 8015a44:	f005 fac9 	bl	801afda <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015a48:	4b35      	ldr	r3, [pc, #212]	@ (8015b20 <USBD_CDC_Init+0x1e8>)
 8015a4a:	781b      	ldrb	r3, [r3, #0]
 8015a4c:	f003 020f 	and.w	r2, r3, #15
 8015a50:	6879      	ldr	r1, [r7, #4]
 8015a52:	4613      	mov	r3, r2
 8015a54:	009b      	lsls	r3, r3, #2
 8015a56:	4413      	add	r3, r2
 8015a58:	009b      	lsls	r3, r3, #2
 8015a5a:	440b      	add	r3, r1
 8015a5c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015a60:	2201      	movs	r2, #1
 8015a62:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015a64:	4b2f      	ldr	r3, [pc, #188]	@ (8015b24 <USBD_CDC_Init+0x1ec>)
 8015a66:	781b      	ldrb	r3, [r3, #0]
 8015a68:	f003 020f 	and.w	r2, r3, #15
 8015a6c:	6879      	ldr	r1, [r7, #4]
 8015a6e:	4613      	mov	r3, r2
 8015a70:	009b      	lsls	r3, r3, #2
 8015a72:	4413      	add	r3, r2
 8015a74:	009b      	lsls	r3, r3, #2
 8015a76:	440b      	add	r3, r1
 8015a78:	3326      	adds	r3, #38	@ 0x26
 8015a7a:	2210      	movs	r2, #16
 8015a7c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015a7e:	4b29      	ldr	r3, [pc, #164]	@ (8015b24 <USBD_CDC_Init+0x1ec>)
 8015a80:	7819      	ldrb	r1, [r3, #0]
 8015a82:	2308      	movs	r3, #8
 8015a84:	2203      	movs	r2, #3
 8015a86:	6878      	ldr	r0, [r7, #4]
 8015a88:	f005 faa7 	bl	801afda <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8015a8c:	4b25      	ldr	r3, [pc, #148]	@ (8015b24 <USBD_CDC_Init+0x1ec>)
 8015a8e:	781b      	ldrb	r3, [r3, #0]
 8015a90:	f003 020f 	and.w	r2, r3, #15
 8015a94:	6879      	ldr	r1, [r7, #4]
 8015a96:	4613      	mov	r3, r2
 8015a98:	009b      	lsls	r3, r3, #2
 8015a9a:	4413      	add	r3, r2
 8015a9c:	009b      	lsls	r3, r3, #2
 8015a9e:	440b      	add	r3, r1
 8015aa0:	3324      	adds	r3, #36	@ 0x24
 8015aa2:	2201      	movs	r2, #1
 8015aa4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	2200      	movs	r2, #0
 8015aaa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015ab4:	687a      	ldr	r2, [r7, #4]
 8015ab6:	33b0      	adds	r3, #176	@ 0xb0
 8015ab8:	009b      	lsls	r3, r3, #2
 8015aba:	4413      	add	r3, r2
 8015abc:	685b      	ldr	r3, [r3, #4]
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	2200      	movs	r2, #0
 8015ac6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	2200      	movs	r2, #0
 8015ace:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d101      	bne.n	8015ae0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8015adc:	2302      	movs	r3, #2
 8015ade:	e018      	b.n	8015b12 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	7c1b      	ldrb	r3, [r3, #16]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d10a      	bne.n	8015afe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8015b20 <USBD_CDC_Init+0x1e8>)
 8015aea:	7819      	ldrb	r1, [r3, #0]
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015af2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015af6:	6878      	ldr	r0, [r7, #4]
 8015af8:	f005 fb5e 	bl	801b1b8 <USBD_LL_PrepareReceive>
 8015afc:	e008      	b.n	8015b10 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015afe:	4b08      	ldr	r3, [pc, #32]	@ (8015b20 <USBD_CDC_Init+0x1e8>)
 8015b00:	7819      	ldrb	r1, [r3, #0]
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015b08:	2340      	movs	r3, #64	@ 0x40
 8015b0a:	6878      	ldr	r0, [r7, #4]
 8015b0c:	f005 fb54 	bl	801b1b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015b10:	2300      	movs	r3, #0
}
 8015b12:	4618      	mov	r0, r3
 8015b14:	3710      	adds	r7, #16
 8015b16:	46bd      	mov	sp, r7
 8015b18:	bd80      	pop	{r7, pc}
 8015b1a:	bf00      	nop
 8015b1c:	24000197 	.word	0x24000197
 8015b20:	24000198 	.word	0x24000198
 8015b24:	24000199 	.word	0x24000199

08015b28 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015b28:	b580      	push	{r7, lr}
 8015b2a:	b082      	sub	sp, #8
 8015b2c:	af00      	add	r7, sp, #0
 8015b2e:	6078      	str	r0, [r7, #4]
 8015b30:	460b      	mov	r3, r1
 8015b32:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8015b34:	4b3a      	ldr	r3, [pc, #232]	@ (8015c20 <USBD_CDC_DeInit+0xf8>)
 8015b36:	781b      	ldrb	r3, [r3, #0]
 8015b38:	4619      	mov	r1, r3
 8015b3a:	6878      	ldr	r0, [r7, #4]
 8015b3c:	f005 fa73 	bl	801b026 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8015b40:	4b37      	ldr	r3, [pc, #220]	@ (8015c20 <USBD_CDC_DeInit+0xf8>)
 8015b42:	781b      	ldrb	r3, [r3, #0]
 8015b44:	f003 020f 	and.w	r2, r3, #15
 8015b48:	6879      	ldr	r1, [r7, #4]
 8015b4a:	4613      	mov	r3, r2
 8015b4c:	009b      	lsls	r3, r3, #2
 8015b4e:	4413      	add	r3, r2
 8015b50:	009b      	lsls	r3, r3, #2
 8015b52:	440b      	add	r3, r1
 8015b54:	3324      	adds	r3, #36	@ 0x24
 8015b56:	2200      	movs	r2, #0
 8015b58:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8015b5a:	4b32      	ldr	r3, [pc, #200]	@ (8015c24 <USBD_CDC_DeInit+0xfc>)
 8015b5c:	781b      	ldrb	r3, [r3, #0]
 8015b5e:	4619      	mov	r1, r3
 8015b60:	6878      	ldr	r0, [r7, #4]
 8015b62:	f005 fa60 	bl	801b026 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8015b66:	4b2f      	ldr	r3, [pc, #188]	@ (8015c24 <USBD_CDC_DeInit+0xfc>)
 8015b68:	781b      	ldrb	r3, [r3, #0]
 8015b6a:	f003 020f 	and.w	r2, r3, #15
 8015b6e:	6879      	ldr	r1, [r7, #4]
 8015b70:	4613      	mov	r3, r2
 8015b72:	009b      	lsls	r3, r3, #2
 8015b74:	4413      	add	r3, r2
 8015b76:	009b      	lsls	r3, r3, #2
 8015b78:	440b      	add	r3, r1
 8015b7a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015b7e:	2200      	movs	r2, #0
 8015b80:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8015b82:	4b29      	ldr	r3, [pc, #164]	@ (8015c28 <USBD_CDC_DeInit+0x100>)
 8015b84:	781b      	ldrb	r3, [r3, #0]
 8015b86:	4619      	mov	r1, r3
 8015b88:	6878      	ldr	r0, [r7, #4]
 8015b8a:	f005 fa4c 	bl	801b026 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8015b8e:	4b26      	ldr	r3, [pc, #152]	@ (8015c28 <USBD_CDC_DeInit+0x100>)
 8015b90:	781b      	ldrb	r3, [r3, #0]
 8015b92:	f003 020f 	and.w	r2, r3, #15
 8015b96:	6879      	ldr	r1, [r7, #4]
 8015b98:	4613      	mov	r3, r2
 8015b9a:	009b      	lsls	r3, r3, #2
 8015b9c:	4413      	add	r3, r2
 8015b9e:	009b      	lsls	r3, r3, #2
 8015ba0:	440b      	add	r3, r1
 8015ba2:	3324      	adds	r3, #36	@ 0x24
 8015ba4:	2200      	movs	r2, #0
 8015ba6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8015ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8015c28 <USBD_CDC_DeInit+0x100>)
 8015baa:	781b      	ldrb	r3, [r3, #0]
 8015bac:	f003 020f 	and.w	r2, r3, #15
 8015bb0:	6879      	ldr	r1, [r7, #4]
 8015bb2:	4613      	mov	r3, r2
 8015bb4:	009b      	lsls	r3, r3, #2
 8015bb6:	4413      	add	r3, r2
 8015bb8:	009b      	lsls	r3, r3, #2
 8015bba:	440b      	add	r3, r1
 8015bbc:	3326      	adds	r3, #38	@ 0x26
 8015bbe:	2200      	movs	r2, #0
 8015bc0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	32b0      	adds	r2, #176	@ 0xb0
 8015bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d01f      	beq.n	8015c14 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015bda:	687a      	ldr	r2, [r7, #4]
 8015bdc:	33b0      	adds	r3, #176	@ 0xb0
 8015bde:	009b      	lsls	r3, r3, #2
 8015be0:	4413      	add	r3, r2
 8015be2:	685b      	ldr	r3, [r3, #4]
 8015be4:	685b      	ldr	r3, [r3, #4]
 8015be6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	32b0      	adds	r2, #176	@ 0xb0
 8015bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bf6:	4618      	mov	r0, r3
 8015bf8:	f005 fb20 	bl	801b23c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	32b0      	adds	r2, #176	@ 0xb0
 8015c06:	2100      	movs	r1, #0
 8015c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	2200      	movs	r2, #0
 8015c10:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8015c14:	2300      	movs	r3, #0
}
 8015c16:	4618      	mov	r0, r3
 8015c18:	3708      	adds	r7, #8
 8015c1a:	46bd      	mov	sp, r7
 8015c1c:	bd80      	pop	{r7, pc}
 8015c1e:	bf00      	nop
 8015c20:	24000197 	.word	0x24000197
 8015c24:	24000198 	.word	0x24000198
 8015c28:	24000199 	.word	0x24000199

08015c2c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8015c2c:	b580      	push	{r7, lr}
 8015c2e:	b086      	sub	sp, #24
 8015c30:	af00      	add	r7, sp, #0
 8015c32:	6078      	str	r0, [r7, #4]
 8015c34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	32b0      	adds	r2, #176	@ 0xb0
 8015c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c44:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8015c46:	2300      	movs	r3, #0
 8015c48:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8015c4e:	2300      	movs	r3, #0
 8015c50:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8015c52:	693b      	ldr	r3, [r7, #16]
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d101      	bne.n	8015c5c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8015c58:	2303      	movs	r3, #3
 8015c5a:	e0bf      	b.n	8015ddc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015c5c:	683b      	ldr	r3, [r7, #0]
 8015c5e:	781b      	ldrb	r3, [r3, #0]
 8015c60:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d050      	beq.n	8015d0a <USBD_CDC_Setup+0xde>
 8015c68:	2b20      	cmp	r3, #32
 8015c6a:	f040 80af 	bne.w	8015dcc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8015c6e:	683b      	ldr	r3, [r7, #0]
 8015c70:	88db      	ldrh	r3, [r3, #6]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d03a      	beq.n	8015cec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8015c76:	683b      	ldr	r3, [r7, #0]
 8015c78:	781b      	ldrb	r3, [r3, #0]
 8015c7a:	b25b      	sxtb	r3, r3
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	da1b      	bge.n	8015cb8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015c86:	687a      	ldr	r2, [r7, #4]
 8015c88:	33b0      	adds	r3, #176	@ 0xb0
 8015c8a:	009b      	lsls	r3, r3, #2
 8015c8c:	4413      	add	r3, r2
 8015c8e:	685b      	ldr	r3, [r3, #4]
 8015c90:	689b      	ldr	r3, [r3, #8]
 8015c92:	683a      	ldr	r2, [r7, #0]
 8015c94:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8015c96:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015c98:	683a      	ldr	r2, [r7, #0]
 8015c9a:	88d2      	ldrh	r2, [r2, #6]
 8015c9c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8015c9e:	683b      	ldr	r3, [r7, #0]
 8015ca0:	88db      	ldrh	r3, [r3, #6]
 8015ca2:	2b07      	cmp	r3, #7
 8015ca4:	bf28      	it	cs
 8015ca6:	2307      	movcs	r3, #7
 8015ca8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8015caa:	693b      	ldr	r3, [r7, #16]
 8015cac:	89fa      	ldrh	r2, [r7, #14]
 8015cae:	4619      	mov	r1, r3
 8015cb0:	6878      	ldr	r0, [r7, #4]
 8015cb2:	f001 fd87 	bl	80177c4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8015cb6:	e090      	b.n	8015dda <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8015cb8:	683b      	ldr	r3, [r7, #0]
 8015cba:	785a      	ldrb	r2, [r3, #1]
 8015cbc:	693b      	ldr	r3, [r7, #16]
 8015cbe:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8015cc2:	683b      	ldr	r3, [r7, #0]
 8015cc4:	88db      	ldrh	r3, [r3, #6]
 8015cc6:	2b3f      	cmp	r3, #63	@ 0x3f
 8015cc8:	d803      	bhi.n	8015cd2 <USBD_CDC_Setup+0xa6>
 8015cca:	683b      	ldr	r3, [r7, #0]
 8015ccc:	88db      	ldrh	r3, [r3, #6]
 8015cce:	b2da      	uxtb	r2, r3
 8015cd0:	e000      	b.n	8015cd4 <USBD_CDC_Setup+0xa8>
 8015cd2:	2240      	movs	r2, #64	@ 0x40
 8015cd4:	693b      	ldr	r3, [r7, #16]
 8015cd6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8015cda:	6939      	ldr	r1, [r7, #16]
 8015cdc:	693b      	ldr	r3, [r7, #16]
 8015cde:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8015ce2:	461a      	mov	r2, r3
 8015ce4:	6878      	ldr	r0, [r7, #4]
 8015ce6:	f001 fd99 	bl	801781c <USBD_CtlPrepareRx>
      break;
 8015cea:	e076      	b.n	8015dda <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015cf2:	687a      	ldr	r2, [r7, #4]
 8015cf4:	33b0      	adds	r3, #176	@ 0xb0
 8015cf6:	009b      	lsls	r3, r3, #2
 8015cf8:	4413      	add	r3, r2
 8015cfa:	685b      	ldr	r3, [r3, #4]
 8015cfc:	689b      	ldr	r3, [r3, #8]
 8015cfe:	683a      	ldr	r2, [r7, #0]
 8015d00:	7850      	ldrb	r0, [r2, #1]
 8015d02:	2200      	movs	r2, #0
 8015d04:	6839      	ldr	r1, [r7, #0]
 8015d06:	4798      	blx	r3
      break;
 8015d08:	e067      	b.n	8015dda <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015d0a:	683b      	ldr	r3, [r7, #0]
 8015d0c:	785b      	ldrb	r3, [r3, #1]
 8015d0e:	2b0b      	cmp	r3, #11
 8015d10:	d851      	bhi.n	8015db6 <USBD_CDC_Setup+0x18a>
 8015d12:	a201      	add	r2, pc, #4	@ (adr r2, 8015d18 <USBD_CDC_Setup+0xec>)
 8015d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d18:	08015d49 	.word	0x08015d49
 8015d1c:	08015dc5 	.word	0x08015dc5
 8015d20:	08015db7 	.word	0x08015db7
 8015d24:	08015db7 	.word	0x08015db7
 8015d28:	08015db7 	.word	0x08015db7
 8015d2c:	08015db7 	.word	0x08015db7
 8015d30:	08015db7 	.word	0x08015db7
 8015d34:	08015db7 	.word	0x08015db7
 8015d38:	08015db7 	.word	0x08015db7
 8015d3c:	08015db7 	.word	0x08015db7
 8015d40:	08015d73 	.word	0x08015d73
 8015d44:	08015d9d 	.word	0x08015d9d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015d4e:	b2db      	uxtb	r3, r3
 8015d50:	2b03      	cmp	r3, #3
 8015d52:	d107      	bne.n	8015d64 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015d54:	f107 030a 	add.w	r3, r7, #10
 8015d58:	2202      	movs	r2, #2
 8015d5a:	4619      	mov	r1, r3
 8015d5c:	6878      	ldr	r0, [r7, #4]
 8015d5e:	f001 fd31 	bl	80177c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015d62:	e032      	b.n	8015dca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015d64:	6839      	ldr	r1, [r7, #0]
 8015d66:	6878      	ldr	r0, [r7, #4]
 8015d68:	f001 fcbb 	bl	80176e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8015d6c:	2303      	movs	r3, #3
 8015d6e:	75fb      	strb	r3, [r7, #23]
          break;
 8015d70:	e02b      	b.n	8015dca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015d78:	b2db      	uxtb	r3, r3
 8015d7a:	2b03      	cmp	r3, #3
 8015d7c:	d107      	bne.n	8015d8e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015d7e:	f107 030d 	add.w	r3, r7, #13
 8015d82:	2201      	movs	r2, #1
 8015d84:	4619      	mov	r1, r3
 8015d86:	6878      	ldr	r0, [r7, #4]
 8015d88:	f001 fd1c 	bl	80177c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015d8c:	e01d      	b.n	8015dca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015d8e:	6839      	ldr	r1, [r7, #0]
 8015d90:	6878      	ldr	r0, [r7, #4]
 8015d92:	f001 fca6 	bl	80176e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8015d96:	2303      	movs	r3, #3
 8015d98:	75fb      	strb	r3, [r7, #23]
          break;
 8015d9a:	e016      	b.n	8015dca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015da2:	b2db      	uxtb	r3, r3
 8015da4:	2b03      	cmp	r3, #3
 8015da6:	d00f      	beq.n	8015dc8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8015da8:	6839      	ldr	r1, [r7, #0]
 8015daa:	6878      	ldr	r0, [r7, #4]
 8015dac:	f001 fc99 	bl	80176e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8015db0:	2303      	movs	r3, #3
 8015db2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8015db4:	e008      	b.n	8015dc8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8015db6:	6839      	ldr	r1, [r7, #0]
 8015db8:	6878      	ldr	r0, [r7, #4]
 8015dba:	f001 fc92 	bl	80176e2 <USBD_CtlError>
          ret = USBD_FAIL;
 8015dbe:	2303      	movs	r3, #3
 8015dc0:	75fb      	strb	r3, [r7, #23]
          break;
 8015dc2:	e002      	b.n	8015dca <USBD_CDC_Setup+0x19e>
          break;
 8015dc4:	bf00      	nop
 8015dc6:	e008      	b.n	8015dda <USBD_CDC_Setup+0x1ae>
          break;
 8015dc8:	bf00      	nop
      }
      break;
 8015dca:	e006      	b.n	8015dda <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8015dcc:	6839      	ldr	r1, [r7, #0]
 8015dce:	6878      	ldr	r0, [r7, #4]
 8015dd0:	f001 fc87 	bl	80176e2 <USBD_CtlError>
      ret = USBD_FAIL;
 8015dd4:	2303      	movs	r3, #3
 8015dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8015dd8:	bf00      	nop
  }

  return (uint8_t)ret;
 8015dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ddc:	4618      	mov	r0, r3
 8015dde:	3718      	adds	r7, #24
 8015de0:	46bd      	mov	sp, r7
 8015de2:	bd80      	pop	{r7, pc}

08015de4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015de4:	b580      	push	{r7, lr}
 8015de6:	b084      	sub	sp, #16
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	6078      	str	r0, [r7, #4]
 8015dec:	460b      	mov	r3, r1
 8015dee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015df6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	32b0      	adds	r2, #176	@ 0xb0
 8015e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d101      	bne.n	8015e0e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8015e0a:	2303      	movs	r3, #3
 8015e0c:	e065      	b.n	8015eda <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	32b0      	adds	r2, #176	@ 0xb0
 8015e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e1c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015e1e:	78fb      	ldrb	r3, [r7, #3]
 8015e20:	f003 020f 	and.w	r2, r3, #15
 8015e24:	6879      	ldr	r1, [r7, #4]
 8015e26:	4613      	mov	r3, r2
 8015e28:	009b      	lsls	r3, r3, #2
 8015e2a:	4413      	add	r3, r2
 8015e2c:	009b      	lsls	r3, r3, #2
 8015e2e:	440b      	add	r3, r1
 8015e30:	3318      	adds	r3, #24
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d02f      	beq.n	8015e98 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015e38:	78fb      	ldrb	r3, [r7, #3]
 8015e3a:	f003 020f 	and.w	r2, r3, #15
 8015e3e:	6879      	ldr	r1, [r7, #4]
 8015e40:	4613      	mov	r3, r2
 8015e42:	009b      	lsls	r3, r3, #2
 8015e44:	4413      	add	r3, r2
 8015e46:	009b      	lsls	r3, r3, #2
 8015e48:	440b      	add	r3, r1
 8015e4a:	3318      	adds	r3, #24
 8015e4c:	681a      	ldr	r2, [r3, #0]
 8015e4e:	78fb      	ldrb	r3, [r7, #3]
 8015e50:	f003 010f 	and.w	r1, r3, #15
 8015e54:	68f8      	ldr	r0, [r7, #12]
 8015e56:	460b      	mov	r3, r1
 8015e58:	00db      	lsls	r3, r3, #3
 8015e5a:	440b      	add	r3, r1
 8015e5c:	009b      	lsls	r3, r3, #2
 8015e5e:	4403      	add	r3, r0
 8015e60:	3344      	adds	r3, #68	@ 0x44
 8015e62:	681b      	ldr	r3, [r3, #0]
 8015e64:	fbb2 f1f3 	udiv	r1, r2, r3
 8015e68:	fb01 f303 	mul.w	r3, r1, r3
 8015e6c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d112      	bne.n	8015e98 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015e72:	78fb      	ldrb	r3, [r7, #3]
 8015e74:	f003 020f 	and.w	r2, r3, #15
 8015e78:	6879      	ldr	r1, [r7, #4]
 8015e7a:	4613      	mov	r3, r2
 8015e7c:	009b      	lsls	r3, r3, #2
 8015e7e:	4413      	add	r3, r2
 8015e80:	009b      	lsls	r3, r3, #2
 8015e82:	440b      	add	r3, r1
 8015e84:	3318      	adds	r3, #24
 8015e86:	2200      	movs	r2, #0
 8015e88:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015e8a:	78f9      	ldrb	r1, [r7, #3]
 8015e8c:	2300      	movs	r3, #0
 8015e8e:	2200      	movs	r2, #0
 8015e90:	6878      	ldr	r0, [r7, #4]
 8015e92:	f005 f970 	bl	801b176 <USBD_LL_Transmit>
 8015e96:	e01f      	b.n	8015ed8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8015e98:	68bb      	ldr	r3, [r7, #8]
 8015e9a:	2200      	movs	r2, #0
 8015e9c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015ea6:	687a      	ldr	r2, [r7, #4]
 8015ea8:	33b0      	adds	r3, #176	@ 0xb0
 8015eaa:	009b      	lsls	r3, r3, #2
 8015eac:	4413      	add	r3, r2
 8015eae:	685b      	ldr	r3, [r3, #4]
 8015eb0:	691b      	ldr	r3, [r3, #16]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d010      	beq.n	8015ed8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015ebc:	687a      	ldr	r2, [r7, #4]
 8015ebe:	33b0      	adds	r3, #176	@ 0xb0
 8015ec0:	009b      	lsls	r3, r3, #2
 8015ec2:	4413      	add	r3, r2
 8015ec4:	685b      	ldr	r3, [r3, #4]
 8015ec6:	691b      	ldr	r3, [r3, #16]
 8015ec8:	68ba      	ldr	r2, [r7, #8]
 8015eca:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8015ece:	68ba      	ldr	r2, [r7, #8]
 8015ed0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8015ed4:	78fa      	ldrb	r2, [r7, #3]
 8015ed6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8015ed8:	2300      	movs	r3, #0
}
 8015eda:	4618      	mov	r0, r3
 8015edc:	3710      	adds	r7, #16
 8015ede:	46bd      	mov	sp, r7
 8015ee0:	bd80      	pop	{r7, pc}

08015ee2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015ee2:	b580      	push	{r7, lr}
 8015ee4:	b084      	sub	sp, #16
 8015ee6:	af00      	add	r7, sp, #0
 8015ee8:	6078      	str	r0, [r7, #4]
 8015eea:	460b      	mov	r3, r1
 8015eec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	32b0      	adds	r2, #176	@ 0xb0
 8015ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015efc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	32b0      	adds	r2, #176	@ 0xb0
 8015f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d101      	bne.n	8015f14 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8015f10:	2303      	movs	r3, #3
 8015f12:	e01a      	b.n	8015f4a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015f14:	78fb      	ldrb	r3, [r7, #3]
 8015f16:	4619      	mov	r1, r3
 8015f18:	6878      	ldr	r0, [r7, #4]
 8015f1a:	f005 f96e 	bl	801b1fa <USBD_LL_GetRxDataSize>
 8015f1e:	4602      	mov	r2, r0
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015f2c:	687a      	ldr	r2, [r7, #4]
 8015f2e:	33b0      	adds	r3, #176	@ 0xb0
 8015f30:	009b      	lsls	r3, r3, #2
 8015f32:	4413      	add	r3, r2
 8015f34:	685b      	ldr	r3, [r3, #4]
 8015f36:	68db      	ldr	r3, [r3, #12]
 8015f38:	68fa      	ldr	r2, [r7, #12]
 8015f3a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8015f3e:	68fa      	ldr	r2, [r7, #12]
 8015f40:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8015f44:	4611      	mov	r1, r2
 8015f46:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8015f48:	2300      	movs	r3, #0
}
 8015f4a:	4618      	mov	r0, r3
 8015f4c:	3710      	adds	r7, #16
 8015f4e:	46bd      	mov	sp, r7
 8015f50:	bd80      	pop	{r7, pc}

08015f52 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015f52:	b580      	push	{r7, lr}
 8015f54:	b084      	sub	sp, #16
 8015f56:	af00      	add	r7, sp, #0
 8015f58:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	32b0      	adds	r2, #176	@ 0xb0
 8015f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d101      	bne.n	8015f74 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015f70:	2303      	movs	r3, #3
 8015f72:	e024      	b.n	8015fbe <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015f7a:	687a      	ldr	r2, [r7, #4]
 8015f7c:	33b0      	adds	r3, #176	@ 0xb0
 8015f7e:	009b      	lsls	r3, r3, #2
 8015f80:	4413      	add	r3, r2
 8015f82:	685b      	ldr	r3, [r3, #4]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d019      	beq.n	8015fbc <USBD_CDC_EP0_RxReady+0x6a>
 8015f88:	68fb      	ldr	r3, [r7, #12]
 8015f8a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8015f8e:	2bff      	cmp	r3, #255	@ 0xff
 8015f90:	d014      	beq.n	8015fbc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015f98:	687a      	ldr	r2, [r7, #4]
 8015f9a:	33b0      	adds	r3, #176	@ 0xb0
 8015f9c:	009b      	lsls	r3, r3, #2
 8015f9e:	4413      	add	r3, r2
 8015fa0:	685b      	ldr	r3, [r3, #4]
 8015fa2:	689b      	ldr	r3, [r3, #8]
 8015fa4:	68fa      	ldr	r2, [r7, #12]
 8015fa6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8015faa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8015fac:	68fa      	ldr	r2, [r7, #12]
 8015fae:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015fb2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	22ff      	movs	r2, #255	@ 0xff
 8015fb8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8015fbc:	2300      	movs	r3, #0
}
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	3710      	adds	r7, #16
 8015fc2:	46bd      	mov	sp, r7
 8015fc4:	bd80      	pop	{r7, pc}
	...

08015fc8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015fc8:	b580      	push	{r7, lr}
 8015fca:	b086      	sub	sp, #24
 8015fcc:	af00      	add	r7, sp, #0
 8015fce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015fd0:	2182      	movs	r1, #130	@ 0x82
 8015fd2:	4818      	ldr	r0, [pc, #96]	@ (8016034 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015fd4:	f000 fd4f 	bl	8016a76 <USBD_GetEpDesc>
 8015fd8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015fda:	2101      	movs	r1, #1
 8015fdc:	4815      	ldr	r0, [pc, #84]	@ (8016034 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015fde:	f000 fd4a 	bl	8016a76 <USBD_GetEpDesc>
 8015fe2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015fe4:	2181      	movs	r1, #129	@ 0x81
 8015fe6:	4813      	ldr	r0, [pc, #76]	@ (8016034 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015fe8:	f000 fd45 	bl	8016a76 <USBD_GetEpDesc>
 8015fec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015fee:	697b      	ldr	r3, [r7, #20]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d002      	beq.n	8015ffa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015ff4:	697b      	ldr	r3, [r7, #20]
 8015ff6:	2210      	movs	r2, #16
 8015ff8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015ffa:	693b      	ldr	r3, [r7, #16]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d006      	beq.n	801600e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016000:	693b      	ldr	r3, [r7, #16]
 8016002:	2200      	movs	r2, #0
 8016004:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016008:	711a      	strb	r2, [r3, #4]
 801600a:	2200      	movs	r2, #0
 801600c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d006      	beq.n	8016022 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	2200      	movs	r2, #0
 8016018:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801601c:	711a      	strb	r2, [r3, #4]
 801601e:	2200      	movs	r2, #0
 8016020:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	2243      	movs	r2, #67	@ 0x43
 8016026:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016028:	4b02      	ldr	r3, [pc, #8]	@ (8016034 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801602a:	4618      	mov	r0, r3
 801602c:	3718      	adds	r7, #24
 801602e:	46bd      	mov	sp, r7
 8016030:	bd80      	pop	{r7, pc}
 8016032:	bf00      	nop
 8016034:	24000154 	.word	0x24000154

08016038 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8016038:	b580      	push	{r7, lr}
 801603a:	b086      	sub	sp, #24
 801603c:	af00      	add	r7, sp, #0
 801603e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8016040:	2182      	movs	r1, #130	@ 0x82
 8016042:	4818      	ldr	r0, [pc, #96]	@ (80160a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8016044:	f000 fd17 	bl	8016a76 <USBD_GetEpDesc>
 8016048:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801604a:	2101      	movs	r1, #1
 801604c:	4815      	ldr	r0, [pc, #84]	@ (80160a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801604e:	f000 fd12 	bl	8016a76 <USBD_GetEpDesc>
 8016052:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016054:	2181      	movs	r1, #129	@ 0x81
 8016056:	4813      	ldr	r0, [pc, #76]	@ (80160a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8016058:	f000 fd0d 	bl	8016a76 <USBD_GetEpDesc>
 801605c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801605e:	697b      	ldr	r3, [r7, #20]
 8016060:	2b00      	cmp	r3, #0
 8016062:	d002      	beq.n	801606a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8016064:	697b      	ldr	r3, [r7, #20]
 8016066:	2210      	movs	r2, #16
 8016068:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801606a:	693b      	ldr	r3, [r7, #16]
 801606c:	2b00      	cmp	r3, #0
 801606e:	d006      	beq.n	801607e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8016070:	693b      	ldr	r3, [r7, #16]
 8016072:	2200      	movs	r2, #0
 8016074:	711a      	strb	r2, [r3, #4]
 8016076:	2200      	movs	r2, #0
 8016078:	f042 0202 	orr.w	r2, r2, #2
 801607c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	2b00      	cmp	r3, #0
 8016082:	d006      	beq.n	8016092 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	2200      	movs	r2, #0
 8016088:	711a      	strb	r2, [r3, #4]
 801608a:	2200      	movs	r2, #0
 801608c:	f042 0202 	orr.w	r2, r2, #2
 8016090:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	2243      	movs	r2, #67	@ 0x43
 8016096:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016098:	4b02      	ldr	r3, [pc, #8]	@ (80160a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801609a:	4618      	mov	r0, r3
 801609c:	3718      	adds	r7, #24
 801609e:	46bd      	mov	sp, r7
 80160a0:	bd80      	pop	{r7, pc}
 80160a2:	bf00      	nop
 80160a4:	24000154 	.word	0x24000154

080160a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b086      	sub	sp, #24
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80160b0:	2182      	movs	r1, #130	@ 0x82
 80160b2:	4818      	ldr	r0, [pc, #96]	@ (8016114 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80160b4:	f000 fcdf 	bl	8016a76 <USBD_GetEpDesc>
 80160b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80160ba:	2101      	movs	r1, #1
 80160bc:	4815      	ldr	r0, [pc, #84]	@ (8016114 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80160be:	f000 fcda 	bl	8016a76 <USBD_GetEpDesc>
 80160c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80160c4:	2181      	movs	r1, #129	@ 0x81
 80160c6:	4813      	ldr	r0, [pc, #76]	@ (8016114 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80160c8:	f000 fcd5 	bl	8016a76 <USBD_GetEpDesc>
 80160cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80160ce:	697b      	ldr	r3, [r7, #20]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d002      	beq.n	80160da <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80160d4:	697b      	ldr	r3, [r7, #20]
 80160d6:	2210      	movs	r2, #16
 80160d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80160da:	693b      	ldr	r3, [r7, #16]
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d006      	beq.n	80160ee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80160e0:	693b      	ldr	r3, [r7, #16]
 80160e2:	2200      	movs	r2, #0
 80160e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80160e8:	711a      	strb	r2, [r3, #4]
 80160ea:	2200      	movs	r2, #0
 80160ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d006      	beq.n	8016102 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	2200      	movs	r2, #0
 80160f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80160fc:	711a      	strb	r2, [r3, #4]
 80160fe:	2200      	movs	r2, #0
 8016100:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	2243      	movs	r2, #67	@ 0x43
 8016106:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016108:	4b02      	ldr	r3, [pc, #8]	@ (8016114 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801610a:	4618      	mov	r0, r3
 801610c:	3718      	adds	r7, #24
 801610e:	46bd      	mov	sp, r7
 8016110:	bd80      	pop	{r7, pc}
 8016112:	bf00      	nop
 8016114:	24000154 	.word	0x24000154

08016118 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016118:	b480      	push	{r7}
 801611a:	b083      	sub	sp, #12
 801611c:	af00      	add	r7, sp, #0
 801611e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	220a      	movs	r2, #10
 8016124:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8016126:	4b03      	ldr	r3, [pc, #12]	@ (8016134 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8016128:	4618      	mov	r0, r3
 801612a:	370c      	adds	r7, #12
 801612c:	46bd      	mov	sp, r7
 801612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016132:	4770      	bx	lr
 8016134:	24000110 	.word	0x24000110

08016138 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8016138:	b480      	push	{r7}
 801613a:	b083      	sub	sp, #12
 801613c:	af00      	add	r7, sp, #0
 801613e:	6078      	str	r0, [r7, #4]
 8016140:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8016142:	683b      	ldr	r3, [r7, #0]
 8016144:	2b00      	cmp	r3, #0
 8016146:	d101      	bne.n	801614c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8016148:	2303      	movs	r3, #3
 801614a:	e009      	b.n	8016160 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016152:	687a      	ldr	r2, [r7, #4]
 8016154:	33b0      	adds	r3, #176	@ 0xb0
 8016156:	009b      	lsls	r3, r3, #2
 8016158:	4413      	add	r3, r2
 801615a:	683a      	ldr	r2, [r7, #0]
 801615c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801615e:	2300      	movs	r3, #0
}
 8016160:	4618      	mov	r0, r3
 8016162:	370c      	adds	r7, #12
 8016164:	46bd      	mov	sp, r7
 8016166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801616a:	4770      	bx	lr

0801616c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801616c:	b480      	push	{r7}
 801616e:	b087      	sub	sp, #28
 8016170:	af00      	add	r7, sp, #0
 8016172:	60f8      	str	r0, [r7, #12]
 8016174:	60b9      	str	r1, [r7, #8]
 8016176:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	32b0      	adds	r2, #176	@ 0xb0
 8016182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016186:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8016188:	697b      	ldr	r3, [r7, #20]
 801618a:	2b00      	cmp	r3, #0
 801618c:	d101      	bne.n	8016192 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801618e:	2303      	movs	r3, #3
 8016190:	e008      	b.n	80161a4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8016192:	697b      	ldr	r3, [r7, #20]
 8016194:	68ba      	ldr	r2, [r7, #8]
 8016196:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 801619a:	697b      	ldr	r3, [r7, #20]
 801619c:	687a      	ldr	r2, [r7, #4]
 801619e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80161a2:	2300      	movs	r3, #0
}
 80161a4:	4618      	mov	r0, r3
 80161a6:	371c      	adds	r7, #28
 80161a8:	46bd      	mov	sp, r7
 80161aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ae:	4770      	bx	lr

080161b0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80161b0:	b480      	push	{r7}
 80161b2:	b085      	sub	sp, #20
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	6078      	str	r0, [r7, #4]
 80161b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	32b0      	adds	r2, #176	@ 0xb0
 80161c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d101      	bne.n	80161d4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80161d0:	2303      	movs	r3, #3
 80161d2:	e004      	b.n	80161de <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	683a      	ldr	r2, [r7, #0]
 80161d8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80161dc:	2300      	movs	r3, #0
}
 80161de:	4618      	mov	r0, r3
 80161e0:	3714      	adds	r7, #20
 80161e2:	46bd      	mov	sp, r7
 80161e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161e8:	4770      	bx	lr
	...

080161ec <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80161ec:	b580      	push	{r7, lr}
 80161ee:	b084      	sub	sp, #16
 80161f0:	af00      	add	r7, sp, #0
 80161f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	32b0      	adds	r2, #176	@ 0xb0
 80161fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016202:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8016204:	2301      	movs	r3, #1
 8016206:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8016208:	68bb      	ldr	r3, [r7, #8]
 801620a:	2b00      	cmp	r3, #0
 801620c:	d101      	bne.n	8016212 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801620e:	2303      	movs	r3, #3
 8016210:	e025      	b.n	801625e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8016212:	68bb      	ldr	r3, [r7, #8]
 8016214:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8016218:	2b00      	cmp	r3, #0
 801621a:	d11f      	bne.n	801625c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801621c:	68bb      	ldr	r3, [r7, #8]
 801621e:	2201      	movs	r2, #1
 8016220:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8016224:	4b10      	ldr	r3, [pc, #64]	@ (8016268 <USBD_CDC_TransmitPacket+0x7c>)
 8016226:	781b      	ldrb	r3, [r3, #0]
 8016228:	f003 020f 	and.w	r2, r3, #15
 801622c:	68bb      	ldr	r3, [r7, #8]
 801622e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8016232:	6878      	ldr	r0, [r7, #4]
 8016234:	4613      	mov	r3, r2
 8016236:	009b      	lsls	r3, r3, #2
 8016238:	4413      	add	r3, r2
 801623a:	009b      	lsls	r3, r3, #2
 801623c:	4403      	add	r3, r0
 801623e:	3318      	adds	r3, #24
 8016240:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8016242:	4b09      	ldr	r3, [pc, #36]	@ (8016268 <USBD_CDC_TransmitPacket+0x7c>)
 8016244:	7819      	ldrb	r1, [r3, #0]
 8016246:	68bb      	ldr	r3, [r7, #8]
 8016248:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801624c:	68bb      	ldr	r3, [r7, #8]
 801624e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8016252:	6878      	ldr	r0, [r7, #4]
 8016254:	f004 ff8f 	bl	801b176 <USBD_LL_Transmit>

    ret = USBD_OK;
 8016258:	2300      	movs	r3, #0
 801625a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801625c:	7bfb      	ldrb	r3, [r7, #15]
}
 801625e:	4618      	mov	r0, r3
 8016260:	3710      	adds	r7, #16
 8016262:	46bd      	mov	sp, r7
 8016264:	bd80      	pop	{r7, pc}
 8016266:	bf00      	nop
 8016268:	24000197 	.word	0x24000197

0801626c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801626c:	b580      	push	{r7, lr}
 801626e:	b084      	sub	sp, #16
 8016270:	af00      	add	r7, sp, #0
 8016272:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	32b0      	adds	r2, #176	@ 0xb0
 801627e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016282:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	32b0      	adds	r2, #176	@ 0xb0
 801628e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016292:	2b00      	cmp	r3, #0
 8016294:	d101      	bne.n	801629a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8016296:	2303      	movs	r3, #3
 8016298:	e018      	b.n	80162cc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	7c1b      	ldrb	r3, [r3, #16]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d10a      	bne.n	80162b8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80162a2:	4b0c      	ldr	r3, [pc, #48]	@ (80162d4 <USBD_CDC_ReceivePacket+0x68>)
 80162a4:	7819      	ldrb	r1, [r3, #0]
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80162ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80162b0:	6878      	ldr	r0, [r7, #4]
 80162b2:	f004 ff81 	bl	801b1b8 <USBD_LL_PrepareReceive>
 80162b6:	e008      	b.n	80162ca <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80162b8:	4b06      	ldr	r3, [pc, #24]	@ (80162d4 <USBD_CDC_ReceivePacket+0x68>)
 80162ba:	7819      	ldrb	r1, [r3, #0]
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80162c2:	2340      	movs	r3, #64	@ 0x40
 80162c4:	6878      	ldr	r0, [r7, #4]
 80162c6:	f004 ff77 	bl	801b1b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80162ca:	2300      	movs	r3, #0
}
 80162cc:	4618      	mov	r0, r3
 80162ce:	3710      	adds	r7, #16
 80162d0:	46bd      	mov	sp, r7
 80162d2:	bd80      	pop	{r7, pc}
 80162d4:	24000198 	.word	0x24000198

080162d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80162d8:	b580      	push	{r7, lr}
 80162da:	b086      	sub	sp, #24
 80162dc:	af00      	add	r7, sp, #0
 80162de:	60f8      	str	r0, [r7, #12]
 80162e0:	60b9      	str	r1, [r7, #8]
 80162e2:	4613      	mov	r3, r2
 80162e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d101      	bne.n	80162f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80162ec:	2303      	movs	r3, #3
 80162ee:	e01f      	b.n	8016330 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	2200      	movs	r2, #0
 80162f4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	2200      	movs	r2, #0
 80162fc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	2200      	movs	r2, #0
 8016304:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016308:	68bb      	ldr	r3, [r7, #8]
 801630a:	2b00      	cmp	r3, #0
 801630c:	d003      	beq.n	8016316 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	68ba      	ldr	r2, [r7, #8]
 8016312:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	2201      	movs	r2, #1
 801631a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	79fa      	ldrb	r2, [r7, #7]
 8016322:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8016324:	68f8      	ldr	r0, [r7, #12]
 8016326:	f004 fdeb 	bl	801af00 <USBD_LL_Init>
 801632a:	4603      	mov	r3, r0
 801632c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801632e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016330:	4618      	mov	r0, r3
 8016332:	3718      	adds	r7, #24
 8016334:	46bd      	mov	sp, r7
 8016336:	bd80      	pop	{r7, pc}

08016338 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016338:	b580      	push	{r7, lr}
 801633a:	b084      	sub	sp, #16
 801633c:	af00      	add	r7, sp, #0
 801633e:	6078      	str	r0, [r7, #4]
 8016340:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016342:	2300      	movs	r3, #0
 8016344:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8016346:	683b      	ldr	r3, [r7, #0]
 8016348:	2b00      	cmp	r3, #0
 801634a:	d101      	bne.n	8016350 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801634c:	2303      	movs	r3, #3
 801634e:	e025      	b.n	801639c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	683a      	ldr	r2, [r7, #0]
 8016354:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	32ae      	adds	r2, #174	@ 0xae
 8016362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016368:	2b00      	cmp	r3, #0
 801636a:	d00f      	beq.n	801638c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	32ae      	adds	r2, #174	@ 0xae
 8016376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801637a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801637c:	f107 020e 	add.w	r2, r7, #14
 8016380:	4610      	mov	r0, r2
 8016382:	4798      	blx	r3
 8016384:	4602      	mov	r2, r0
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8016392:	1c5a      	adds	r2, r3, #1
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801639a:	2300      	movs	r3, #0
}
 801639c:	4618      	mov	r0, r3
 801639e:	3710      	adds	r7, #16
 80163a0:	46bd      	mov	sp, r7
 80163a2:	bd80      	pop	{r7, pc}

080163a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80163a4:	b580      	push	{r7, lr}
 80163a6:	b082      	sub	sp, #8
 80163a8:	af00      	add	r7, sp, #0
 80163aa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80163ac:	6878      	ldr	r0, [r7, #4]
 80163ae:	f004 fdf9 	bl	801afa4 <USBD_LL_Start>
 80163b2:	4603      	mov	r3, r0
}
 80163b4:	4618      	mov	r0, r3
 80163b6:	3708      	adds	r7, #8
 80163b8:	46bd      	mov	sp, r7
 80163ba:	bd80      	pop	{r7, pc}

080163bc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80163bc:	b480      	push	{r7}
 80163be:	b083      	sub	sp, #12
 80163c0:	af00      	add	r7, sp, #0
 80163c2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80163c4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80163c6:	4618      	mov	r0, r3
 80163c8:	370c      	adds	r7, #12
 80163ca:	46bd      	mov	sp, r7
 80163cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163d0:	4770      	bx	lr

080163d2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80163d2:	b580      	push	{r7, lr}
 80163d4:	b084      	sub	sp, #16
 80163d6:	af00      	add	r7, sp, #0
 80163d8:	6078      	str	r0, [r7, #4]
 80163da:	460b      	mov	r3, r1
 80163dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80163de:	2300      	movs	r3, #0
 80163e0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d009      	beq.n	8016400 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	78fa      	ldrb	r2, [r7, #3]
 80163f6:	4611      	mov	r1, r2
 80163f8:	6878      	ldr	r0, [r7, #4]
 80163fa:	4798      	blx	r3
 80163fc:	4603      	mov	r3, r0
 80163fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016400:	7bfb      	ldrb	r3, [r7, #15]
}
 8016402:	4618      	mov	r0, r3
 8016404:	3710      	adds	r7, #16
 8016406:	46bd      	mov	sp, r7
 8016408:	bd80      	pop	{r7, pc}

0801640a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801640a:	b580      	push	{r7, lr}
 801640c:	b084      	sub	sp, #16
 801640e:	af00      	add	r7, sp, #0
 8016410:	6078      	str	r0, [r7, #4]
 8016412:	460b      	mov	r3, r1
 8016414:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8016416:	2300      	movs	r3, #0
 8016418:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016420:	685b      	ldr	r3, [r3, #4]
 8016422:	78fa      	ldrb	r2, [r7, #3]
 8016424:	4611      	mov	r1, r2
 8016426:	6878      	ldr	r0, [r7, #4]
 8016428:	4798      	blx	r3
 801642a:	4603      	mov	r3, r0
 801642c:	2b00      	cmp	r3, #0
 801642e:	d001      	beq.n	8016434 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8016430:	2303      	movs	r3, #3
 8016432:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016434:	7bfb      	ldrb	r3, [r7, #15]
}
 8016436:	4618      	mov	r0, r3
 8016438:	3710      	adds	r7, #16
 801643a:	46bd      	mov	sp, r7
 801643c:	bd80      	pop	{r7, pc}

0801643e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801643e:	b580      	push	{r7, lr}
 8016440:	b084      	sub	sp, #16
 8016442:	af00      	add	r7, sp, #0
 8016444:	6078      	str	r0, [r7, #4]
 8016446:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801644e:	6839      	ldr	r1, [r7, #0]
 8016450:	4618      	mov	r0, r3
 8016452:	f001 f90c 	bl	801766e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	2201      	movs	r2, #1
 801645a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8016464:	461a      	mov	r2, r3
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016472:	f003 031f 	and.w	r3, r3, #31
 8016476:	2b02      	cmp	r3, #2
 8016478:	d01a      	beq.n	80164b0 <USBD_LL_SetupStage+0x72>
 801647a:	2b02      	cmp	r3, #2
 801647c:	d822      	bhi.n	80164c4 <USBD_LL_SetupStage+0x86>
 801647e:	2b00      	cmp	r3, #0
 8016480:	d002      	beq.n	8016488 <USBD_LL_SetupStage+0x4a>
 8016482:	2b01      	cmp	r3, #1
 8016484:	d00a      	beq.n	801649c <USBD_LL_SetupStage+0x5e>
 8016486:	e01d      	b.n	80164c4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801648e:	4619      	mov	r1, r3
 8016490:	6878      	ldr	r0, [r7, #4]
 8016492:	f000 fb63 	bl	8016b5c <USBD_StdDevReq>
 8016496:	4603      	mov	r3, r0
 8016498:	73fb      	strb	r3, [r7, #15]
      break;
 801649a:	e020      	b.n	80164de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80164a2:	4619      	mov	r1, r3
 80164a4:	6878      	ldr	r0, [r7, #4]
 80164a6:	f000 fbcb 	bl	8016c40 <USBD_StdItfReq>
 80164aa:	4603      	mov	r3, r0
 80164ac:	73fb      	strb	r3, [r7, #15]
      break;
 80164ae:	e016      	b.n	80164de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80164b6:	4619      	mov	r1, r3
 80164b8:	6878      	ldr	r0, [r7, #4]
 80164ba:	f000 fc2d 	bl	8016d18 <USBD_StdEPReq>
 80164be:	4603      	mov	r3, r0
 80164c0:	73fb      	strb	r3, [r7, #15]
      break;
 80164c2:	e00c      	b.n	80164de <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80164ca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80164ce:	b2db      	uxtb	r3, r3
 80164d0:	4619      	mov	r1, r3
 80164d2:	6878      	ldr	r0, [r7, #4]
 80164d4:	f004 fdc6 	bl	801b064 <USBD_LL_StallEP>
 80164d8:	4603      	mov	r3, r0
 80164da:	73fb      	strb	r3, [r7, #15]
      break;
 80164dc:	bf00      	nop
  }

  return ret;
 80164de:	7bfb      	ldrb	r3, [r7, #15]
}
 80164e0:	4618      	mov	r0, r3
 80164e2:	3710      	adds	r7, #16
 80164e4:	46bd      	mov	sp, r7
 80164e6:	bd80      	pop	{r7, pc}

080164e8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80164e8:	b580      	push	{r7, lr}
 80164ea:	b086      	sub	sp, #24
 80164ec:	af00      	add	r7, sp, #0
 80164ee:	60f8      	str	r0, [r7, #12]
 80164f0:	460b      	mov	r3, r1
 80164f2:	607a      	str	r2, [r7, #4]
 80164f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80164f6:	2300      	movs	r3, #0
 80164f8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80164fa:	7afb      	ldrb	r3, [r7, #11]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d16e      	bne.n	80165de <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8016500:	68fb      	ldr	r3, [r7, #12]
 8016502:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8016506:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801650e:	2b03      	cmp	r3, #3
 8016510:	f040 8098 	bne.w	8016644 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8016514:	693b      	ldr	r3, [r7, #16]
 8016516:	689a      	ldr	r2, [r3, #8]
 8016518:	693b      	ldr	r3, [r7, #16]
 801651a:	68db      	ldr	r3, [r3, #12]
 801651c:	429a      	cmp	r2, r3
 801651e:	d913      	bls.n	8016548 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8016520:	693b      	ldr	r3, [r7, #16]
 8016522:	689a      	ldr	r2, [r3, #8]
 8016524:	693b      	ldr	r3, [r7, #16]
 8016526:	68db      	ldr	r3, [r3, #12]
 8016528:	1ad2      	subs	r2, r2, r3
 801652a:	693b      	ldr	r3, [r7, #16]
 801652c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801652e:	693b      	ldr	r3, [r7, #16]
 8016530:	68da      	ldr	r2, [r3, #12]
 8016532:	693b      	ldr	r3, [r7, #16]
 8016534:	689b      	ldr	r3, [r3, #8]
 8016536:	4293      	cmp	r3, r2
 8016538:	bf28      	it	cs
 801653a:	4613      	movcs	r3, r2
 801653c:	461a      	mov	r2, r3
 801653e:	6879      	ldr	r1, [r7, #4]
 8016540:	68f8      	ldr	r0, [r7, #12]
 8016542:	f001 f988 	bl	8017856 <USBD_CtlContinueRx>
 8016546:	e07d      	b.n	8016644 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801654e:	f003 031f 	and.w	r3, r3, #31
 8016552:	2b02      	cmp	r3, #2
 8016554:	d014      	beq.n	8016580 <USBD_LL_DataOutStage+0x98>
 8016556:	2b02      	cmp	r3, #2
 8016558:	d81d      	bhi.n	8016596 <USBD_LL_DataOutStage+0xae>
 801655a:	2b00      	cmp	r3, #0
 801655c:	d002      	beq.n	8016564 <USBD_LL_DataOutStage+0x7c>
 801655e:	2b01      	cmp	r3, #1
 8016560:	d003      	beq.n	801656a <USBD_LL_DataOutStage+0x82>
 8016562:	e018      	b.n	8016596 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8016564:	2300      	movs	r3, #0
 8016566:	75bb      	strb	r3, [r7, #22]
            break;
 8016568:	e018      	b.n	801659c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8016570:	b2db      	uxtb	r3, r3
 8016572:	4619      	mov	r1, r3
 8016574:	68f8      	ldr	r0, [r7, #12]
 8016576:	f000 fa64 	bl	8016a42 <USBD_CoreFindIF>
 801657a:	4603      	mov	r3, r0
 801657c:	75bb      	strb	r3, [r7, #22]
            break;
 801657e:	e00d      	b.n	801659c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8016580:	68fb      	ldr	r3, [r7, #12]
 8016582:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8016586:	b2db      	uxtb	r3, r3
 8016588:	4619      	mov	r1, r3
 801658a:	68f8      	ldr	r0, [r7, #12]
 801658c:	f000 fa66 	bl	8016a5c <USBD_CoreFindEP>
 8016590:	4603      	mov	r3, r0
 8016592:	75bb      	strb	r3, [r7, #22]
            break;
 8016594:	e002      	b.n	801659c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8016596:	2300      	movs	r3, #0
 8016598:	75bb      	strb	r3, [r7, #22]
            break;
 801659a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801659c:	7dbb      	ldrb	r3, [r7, #22]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d119      	bne.n	80165d6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80165a8:	b2db      	uxtb	r3, r3
 80165aa:	2b03      	cmp	r3, #3
 80165ac:	d113      	bne.n	80165d6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80165ae:	7dba      	ldrb	r2, [r7, #22]
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	32ae      	adds	r2, #174	@ 0xae
 80165b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165b8:	691b      	ldr	r3, [r3, #16]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d00b      	beq.n	80165d6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80165be:	7dba      	ldrb	r2, [r7, #22]
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80165c6:	7dba      	ldrb	r2, [r7, #22]
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	32ae      	adds	r2, #174	@ 0xae
 80165cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165d0:	691b      	ldr	r3, [r3, #16]
 80165d2:	68f8      	ldr	r0, [r7, #12]
 80165d4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80165d6:	68f8      	ldr	r0, [r7, #12]
 80165d8:	f001 f94e 	bl	8017878 <USBD_CtlSendStatus>
 80165dc:	e032      	b.n	8016644 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80165de:	7afb      	ldrb	r3, [r7, #11]
 80165e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80165e4:	b2db      	uxtb	r3, r3
 80165e6:	4619      	mov	r1, r3
 80165e8:	68f8      	ldr	r0, [r7, #12]
 80165ea:	f000 fa37 	bl	8016a5c <USBD_CoreFindEP>
 80165ee:	4603      	mov	r3, r0
 80165f0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80165f2:	7dbb      	ldrb	r3, [r7, #22]
 80165f4:	2bff      	cmp	r3, #255	@ 0xff
 80165f6:	d025      	beq.n	8016644 <USBD_LL_DataOutStage+0x15c>
 80165f8:	7dbb      	ldrb	r3, [r7, #22]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d122      	bne.n	8016644 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80165fe:	68fb      	ldr	r3, [r7, #12]
 8016600:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016604:	b2db      	uxtb	r3, r3
 8016606:	2b03      	cmp	r3, #3
 8016608:	d117      	bne.n	801663a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801660a:	7dba      	ldrb	r2, [r7, #22]
 801660c:	68fb      	ldr	r3, [r7, #12]
 801660e:	32ae      	adds	r2, #174	@ 0xae
 8016610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016614:	699b      	ldr	r3, [r3, #24]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d00f      	beq.n	801663a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801661a:	7dba      	ldrb	r2, [r7, #22]
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8016622:	7dba      	ldrb	r2, [r7, #22]
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	32ae      	adds	r2, #174	@ 0xae
 8016628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801662c:	699b      	ldr	r3, [r3, #24]
 801662e:	7afa      	ldrb	r2, [r7, #11]
 8016630:	4611      	mov	r1, r2
 8016632:	68f8      	ldr	r0, [r7, #12]
 8016634:	4798      	blx	r3
 8016636:	4603      	mov	r3, r0
 8016638:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801663a:	7dfb      	ldrb	r3, [r7, #23]
 801663c:	2b00      	cmp	r3, #0
 801663e:	d001      	beq.n	8016644 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8016640:	7dfb      	ldrb	r3, [r7, #23]
 8016642:	e000      	b.n	8016646 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8016644:	2300      	movs	r3, #0
}
 8016646:	4618      	mov	r0, r3
 8016648:	3718      	adds	r7, #24
 801664a:	46bd      	mov	sp, r7
 801664c:	bd80      	pop	{r7, pc}

0801664e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801664e:	b580      	push	{r7, lr}
 8016650:	b086      	sub	sp, #24
 8016652:	af00      	add	r7, sp, #0
 8016654:	60f8      	str	r0, [r7, #12]
 8016656:	460b      	mov	r3, r1
 8016658:	607a      	str	r2, [r7, #4]
 801665a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801665c:	7afb      	ldrb	r3, [r7, #11]
 801665e:	2b00      	cmp	r3, #0
 8016660:	d16f      	bne.n	8016742 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8016662:	68fb      	ldr	r3, [r7, #12]
 8016664:	3314      	adds	r3, #20
 8016666:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801666e:	2b02      	cmp	r3, #2
 8016670:	d15a      	bne.n	8016728 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8016672:	693b      	ldr	r3, [r7, #16]
 8016674:	689a      	ldr	r2, [r3, #8]
 8016676:	693b      	ldr	r3, [r7, #16]
 8016678:	68db      	ldr	r3, [r3, #12]
 801667a:	429a      	cmp	r2, r3
 801667c:	d914      	bls.n	80166a8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801667e:	693b      	ldr	r3, [r7, #16]
 8016680:	689a      	ldr	r2, [r3, #8]
 8016682:	693b      	ldr	r3, [r7, #16]
 8016684:	68db      	ldr	r3, [r3, #12]
 8016686:	1ad2      	subs	r2, r2, r3
 8016688:	693b      	ldr	r3, [r7, #16]
 801668a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801668c:	693b      	ldr	r3, [r7, #16]
 801668e:	689b      	ldr	r3, [r3, #8]
 8016690:	461a      	mov	r2, r3
 8016692:	6879      	ldr	r1, [r7, #4]
 8016694:	68f8      	ldr	r0, [r7, #12]
 8016696:	f001 f8b0 	bl	80177fa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801669a:	2300      	movs	r3, #0
 801669c:	2200      	movs	r2, #0
 801669e:	2100      	movs	r1, #0
 80166a0:	68f8      	ldr	r0, [r7, #12]
 80166a2:	f004 fd89 	bl	801b1b8 <USBD_LL_PrepareReceive>
 80166a6:	e03f      	b.n	8016728 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80166a8:	693b      	ldr	r3, [r7, #16]
 80166aa:	68da      	ldr	r2, [r3, #12]
 80166ac:	693b      	ldr	r3, [r7, #16]
 80166ae:	689b      	ldr	r3, [r3, #8]
 80166b0:	429a      	cmp	r2, r3
 80166b2:	d11c      	bne.n	80166ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80166b4:	693b      	ldr	r3, [r7, #16]
 80166b6:	685a      	ldr	r2, [r3, #4]
 80166b8:	693b      	ldr	r3, [r7, #16]
 80166ba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80166bc:	429a      	cmp	r2, r3
 80166be:	d316      	bcc.n	80166ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80166c0:	693b      	ldr	r3, [r7, #16]
 80166c2:	685a      	ldr	r2, [r3, #4]
 80166c4:	68fb      	ldr	r3, [r7, #12]
 80166c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80166ca:	429a      	cmp	r2, r3
 80166cc:	d20f      	bcs.n	80166ee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80166ce:	2200      	movs	r2, #0
 80166d0:	2100      	movs	r1, #0
 80166d2:	68f8      	ldr	r0, [r7, #12]
 80166d4:	f001 f891 	bl	80177fa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	2200      	movs	r2, #0
 80166dc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80166e0:	2300      	movs	r3, #0
 80166e2:	2200      	movs	r2, #0
 80166e4:	2100      	movs	r1, #0
 80166e6:	68f8      	ldr	r0, [r7, #12]
 80166e8:	f004 fd66 	bl	801b1b8 <USBD_LL_PrepareReceive>
 80166ec:	e01c      	b.n	8016728 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166ee:	68fb      	ldr	r3, [r7, #12]
 80166f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80166f4:	b2db      	uxtb	r3, r3
 80166f6:	2b03      	cmp	r3, #3
 80166f8:	d10f      	bne.n	801671a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80166fa:	68fb      	ldr	r3, [r7, #12]
 80166fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016700:	68db      	ldr	r3, [r3, #12]
 8016702:	2b00      	cmp	r3, #0
 8016704:	d009      	beq.n	801671a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	2200      	movs	r2, #0
 801670a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016714:	68db      	ldr	r3, [r3, #12]
 8016716:	68f8      	ldr	r0, [r7, #12]
 8016718:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801671a:	2180      	movs	r1, #128	@ 0x80
 801671c:	68f8      	ldr	r0, [r7, #12]
 801671e:	f004 fca1 	bl	801b064 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8016722:	68f8      	ldr	r0, [r7, #12]
 8016724:	f001 f8bb 	bl	801789e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801672e:	2b00      	cmp	r3, #0
 8016730:	d03a      	beq.n	80167a8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8016732:	68f8      	ldr	r0, [r7, #12]
 8016734:	f7ff fe42 	bl	80163bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	2200      	movs	r2, #0
 801673c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8016740:	e032      	b.n	80167a8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8016742:	7afb      	ldrb	r3, [r7, #11]
 8016744:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016748:	b2db      	uxtb	r3, r3
 801674a:	4619      	mov	r1, r3
 801674c:	68f8      	ldr	r0, [r7, #12]
 801674e:	f000 f985 	bl	8016a5c <USBD_CoreFindEP>
 8016752:	4603      	mov	r3, r0
 8016754:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016756:	7dfb      	ldrb	r3, [r7, #23]
 8016758:	2bff      	cmp	r3, #255	@ 0xff
 801675a:	d025      	beq.n	80167a8 <USBD_LL_DataInStage+0x15a>
 801675c:	7dfb      	ldrb	r3, [r7, #23]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d122      	bne.n	80167a8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016768:	b2db      	uxtb	r3, r3
 801676a:	2b03      	cmp	r3, #3
 801676c:	d11c      	bne.n	80167a8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801676e:	7dfa      	ldrb	r2, [r7, #23]
 8016770:	68fb      	ldr	r3, [r7, #12]
 8016772:	32ae      	adds	r2, #174	@ 0xae
 8016774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016778:	695b      	ldr	r3, [r3, #20]
 801677a:	2b00      	cmp	r3, #0
 801677c:	d014      	beq.n	80167a8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801677e:	7dfa      	ldrb	r2, [r7, #23]
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8016786:	7dfa      	ldrb	r2, [r7, #23]
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	32ae      	adds	r2, #174	@ 0xae
 801678c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016790:	695b      	ldr	r3, [r3, #20]
 8016792:	7afa      	ldrb	r2, [r7, #11]
 8016794:	4611      	mov	r1, r2
 8016796:	68f8      	ldr	r0, [r7, #12]
 8016798:	4798      	blx	r3
 801679a:	4603      	mov	r3, r0
 801679c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801679e:	7dbb      	ldrb	r3, [r7, #22]
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d001      	beq.n	80167a8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80167a4:	7dbb      	ldrb	r3, [r7, #22]
 80167a6:	e000      	b.n	80167aa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80167a8:	2300      	movs	r3, #0
}
 80167aa:	4618      	mov	r0, r3
 80167ac:	3718      	adds	r7, #24
 80167ae:	46bd      	mov	sp, r7
 80167b0:	bd80      	pop	{r7, pc}

080167b2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80167b2:	b580      	push	{r7, lr}
 80167b4:	b084      	sub	sp, #16
 80167b6:	af00      	add	r7, sp, #0
 80167b8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80167ba:	2300      	movs	r3, #0
 80167bc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	2201      	movs	r2, #1
 80167c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	2200      	movs	r2, #0
 80167ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	2200      	movs	r2, #0
 80167d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	2200      	movs	r2, #0
 80167d8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	2200      	movs	r2, #0
 80167e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d014      	beq.n	8016818 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80167f4:	685b      	ldr	r3, [r3, #4]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d00e      	beq.n	8016818 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016800:	685b      	ldr	r3, [r3, #4]
 8016802:	687a      	ldr	r2, [r7, #4]
 8016804:	6852      	ldr	r2, [r2, #4]
 8016806:	b2d2      	uxtb	r2, r2
 8016808:	4611      	mov	r1, r2
 801680a:	6878      	ldr	r0, [r7, #4]
 801680c:	4798      	blx	r3
 801680e:	4603      	mov	r3, r0
 8016810:	2b00      	cmp	r3, #0
 8016812:	d001      	beq.n	8016818 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8016814:	2303      	movs	r3, #3
 8016816:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016818:	2340      	movs	r3, #64	@ 0x40
 801681a:	2200      	movs	r2, #0
 801681c:	2100      	movs	r1, #0
 801681e:	6878      	ldr	r0, [r7, #4]
 8016820:	f004 fbdb 	bl	801afda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	2201      	movs	r2, #1
 8016828:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	2240      	movs	r2, #64	@ 0x40
 8016830:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016834:	2340      	movs	r3, #64	@ 0x40
 8016836:	2200      	movs	r2, #0
 8016838:	2180      	movs	r1, #128	@ 0x80
 801683a:	6878      	ldr	r0, [r7, #4]
 801683c:	f004 fbcd 	bl	801afda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	2201      	movs	r2, #1
 8016844:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	2240      	movs	r2, #64	@ 0x40
 801684a:	621a      	str	r2, [r3, #32]

  return ret;
 801684c:	7bfb      	ldrb	r3, [r7, #15]
}
 801684e:	4618      	mov	r0, r3
 8016850:	3710      	adds	r7, #16
 8016852:	46bd      	mov	sp, r7
 8016854:	bd80      	pop	{r7, pc}

08016856 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016856:	b480      	push	{r7}
 8016858:	b083      	sub	sp, #12
 801685a:	af00      	add	r7, sp, #0
 801685c:	6078      	str	r0, [r7, #4]
 801685e:	460b      	mov	r3, r1
 8016860:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	78fa      	ldrb	r2, [r7, #3]
 8016866:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016868:	2300      	movs	r3, #0
}
 801686a:	4618      	mov	r0, r3
 801686c:	370c      	adds	r7, #12
 801686e:	46bd      	mov	sp, r7
 8016870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016874:	4770      	bx	lr

08016876 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016876:	b480      	push	{r7}
 8016878:	b083      	sub	sp, #12
 801687a:	af00      	add	r7, sp, #0
 801687c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016884:	b2db      	uxtb	r3, r3
 8016886:	2b04      	cmp	r3, #4
 8016888:	d006      	beq.n	8016898 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016890:	b2da      	uxtb	r2, r3
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	2204      	movs	r2, #4
 801689c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80168a0:	2300      	movs	r3, #0
}
 80168a2:	4618      	mov	r0, r3
 80168a4:	370c      	adds	r7, #12
 80168a6:	46bd      	mov	sp, r7
 80168a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ac:	4770      	bx	lr

080168ae <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80168ae:	b480      	push	{r7}
 80168b0:	b083      	sub	sp, #12
 80168b2:	af00      	add	r7, sp, #0
 80168b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80168bc:	b2db      	uxtb	r3, r3
 80168be:	2b04      	cmp	r3, #4
 80168c0:	d106      	bne.n	80168d0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80168c8:	b2da      	uxtb	r2, r3
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80168d0:	2300      	movs	r3, #0
}
 80168d2:	4618      	mov	r0, r3
 80168d4:	370c      	adds	r7, #12
 80168d6:	46bd      	mov	sp, r7
 80168d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168dc:	4770      	bx	lr

080168de <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80168de:	b580      	push	{r7, lr}
 80168e0:	b082      	sub	sp, #8
 80168e2:	af00      	add	r7, sp, #0
 80168e4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80168ec:	b2db      	uxtb	r3, r3
 80168ee:	2b03      	cmp	r3, #3
 80168f0:	d110      	bne.n	8016914 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d00b      	beq.n	8016914 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016902:	69db      	ldr	r3, [r3, #28]
 8016904:	2b00      	cmp	r3, #0
 8016906:	d005      	beq.n	8016914 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801690e:	69db      	ldr	r3, [r3, #28]
 8016910:	6878      	ldr	r0, [r7, #4]
 8016912:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8016914:	2300      	movs	r3, #0
}
 8016916:	4618      	mov	r0, r3
 8016918:	3708      	adds	r7, #8
 801691a:	46bd      	mov	sp, r7
 801691c:	bd80      	pop	{r7, pc}

0801691e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801691e:	b580      	push	{r7, lr}
 8016920:	b082      	sub	sp, #8
 8016922:	af00      	add	r7, sp, #0
 8016924:	6078      	str	r0, [r7, #4]
 8016926:	460b      	mov	r3, r1
 8016928:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	32ae      	adds	r2, #174	@ 0xae
 8016934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016938:	2b00      	cmp	r3, #0
 801693a:	d101      	bne.n	8016940 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801693c:	2303      	movs	r3, #3
 801693e:	e01c      	b.n	801697a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016946:	b2db      	uxtb	r3, r3
 8016948:	2b03      	cmp	r3, #3
 801694a:	d115      	bne.n	8016978 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	32ae      	adds	r2, #174	@ 0xae
 8016956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801695a:	6a1b      	ldr	r3, [r3, #32]
 801695c:	2b00      	cmp	r3, #0
 801695e:	d00b      	beq.n	8016978 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	32ae      	adds	r2, #174	@ 0xae
 801696a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801696e:	6a1b      	ldr	r3, [r3, #32]
 8016970:	78fa      	ldrb	r2, [r7, #3]
 8016972:	4611      	mov	r1, r2
 8016974:	6878      	ldr	r0, [r7, #4]
 8016976:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016978:	2300      	movs	r3, #0
}
 801697a:	4618      	mov	r0, r3
 801697c:	3708      	adds	r7, #8
 801697e:	46bd      	mov	sp, r7
 8016980:	bd80      	pop	{r7, pc}

08016982 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8016982:	b580      	push	{r7, lr}
 8016984:	b082      	sub	sp, #8
 8016986:	af00      	add	r7, sp, #0
 8016988:	6078      	str	r0, [r7, #4]
 801698a:	460b      	mov	r3, r1
 801698c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	32ae      	adds	r2, #174	@ 0xae
 8016998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801699c:	2b00      	cmp	r3, #0
 801699e:	d101      	bne.n	80169a4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80169a0:	2303      	movs	r3, #3
 80169a2:	e01c      	b.n	80169de <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80169aa:	b2db      	uxtb	r3, r3
 80169ac:	2b03      	cmp	r3, #3
 80169ae:	d115      	bne.n	80169dc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	32ae      	adds	r2, #174	@ 0xae
 80169ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80169be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d00b      	beq.n	80169dc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	32ae      	adds	r2, #174	@ 0xae
 80169ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80169d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80169d4:	78fa      	ldrb	r2, [r7, #3]
 80169d6:	4611      	mov	r1, r2
 80169d8:	6878      	ldr	r0, [r7, #4]
 80169da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80169dc:	2300      	movs	r3, #0
}
 80169de:	4618      	mov	r0, r3
 80169e0:	3708      	adds	r7, #8
 80169e2:	46bd      	mov	sp, r7
 80169e4:	bd80      	pop	{r7, pc}

080169e6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80169e6:	b480      	push	{r7}
 80169e8:	b083      	sub	sp, #12
 80169ea:	af00      	add	r7, sp, #0
 80169ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80169ee:	2300      	movs	r3, #0
}
 80169f0:	4618      	mov	r0, r3
 80169f2:	370c      	adds	r7, #12
 80169f4:	46bd      	mov	sp, r7
 80169f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169fa:	4770      	bx	lr

080169fc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80169fc:	b580      	push	{r7, lr}
 80169fe:	b084      	sub	sp, #16
 8016a00:	af00      	add	r7, sp, #0
 8016a02:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8016a04:	2300      	movs	r3, #0
 8016a06:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	2201      	movs	r2, #1
 8016a0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d00e      	beq.n	8016a38 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016a20:	685b      	ldr	r3, [r3, #4]
 8016a22:	687a      	ldr	r2, [r7, #4]
 8016a24:	6852      	ldr	r2, [r2, #4]
 8016a26:	b2d2      	uxtb	r2, r2
 8016a28:	4611      	mov	r1, r2
 8016a2a:	6878      	ldr	r0, [r7, #4]
 8016a2c:	4798      	blx	r3
 8016a2e:	4603      	mov	r3, r0
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	d001      	beq.n	8016a38 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8016a34:	2303      	movs	r3, #3
 8016a36:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a3a:	4618      	mov	r0, r3
 8016a3c:	3710      	adds	r7, #16
 8016a3e:	46bd      	mov	sp, r7
 8016a40:	bd80      	pop	{r7, pc}

08016a42 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016a42:	b480      	push	{r7}
 8016a44:	b083      	sub	sp, #12
 8016a46:	af00      	add	r7, sp, #0
 8016a48:	6078      	str	r0, [r7, #4]
 8016a4a:	460b      	mov	r3, r1
 8016a4c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016a4e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016a50:	4618      	mov	r0, r3
 8016a52:	370c      	adds	r7, #12
 8016a54:	46bd      	mov	sp, r7
 8016a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a5a:	4770      	bx	lr

08016a5c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016a5c:	b480      	push	{r7}
 8016a5e:	b083      	sub	sp, #12
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	6078      	str	r0, [r7, #4]
 8016a64:	460b      	mov	r3, r1
 8016a66:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016a68:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	370c      	adds	r7, #12
 8016a6e:	46bd      	mov	sp, r7
 8016a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a74:	4770      	bx	lr

08016a76 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8016a76:	b580      	push	{r7, lr}
 8016a78:	b086      	sub	sp, #24
 8016a7a:	af00      	add	r7, sp, #0
 8016a7c:	6078      	str	r0, [r7, #4]
 8016a7e:	460b      	mov	r3, r1
 8016a80:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	885b      	ldrh	r3, [r3, #2]
 8016a92:	b29b      	uxth	r3, r3
 8016a94:	68fa      	ldr	r2, [r7, #12]
 8016a96:	7812      	ldrb	r2, [r2, #0]
 8016a98:	4293      	cmp	r3, r2
 8016a9a:	d91f      	bls.n	8016adc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	781b      	ldrb	r3, [r3, #0]
 8016aa0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8016aa2:	e013      	b.n	8016acc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8016aa4:	f107 030a 	add.w	r3, r7, #10
 8016aa8:	4619      	mov	r1, r3
 8016aaa:	6978      	ldr	r0, [r7, #20]
 8016aac:	f000 f81b 	bl	8016ae6 <USBD_GetNextDesc>
 8016ab0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016ab2:	697b      	ldr	r3, [r7, #20]
 8016ab4:	785b      	ldrb	r3, [r3, #1]
 8016ab6:	2b05      	cmp	r3, #5
 8016ab8:	d108      	bne.n	8016acc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8016aba:	697b      	ldr	r3, [r7, #20]
 8016abc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8016abe:	693b      	ldr	r3, [r7, #16]
 8016ac0:	789b      	ldrb	r3, [r3, #2]
 8016ac2:	78fa      	ldrb	r2, [r7, #3]
 8016ac4:	429a      	cmp	r2, r3
 8016ac6:	d008      	beq.n	8016ada <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8016ac8:	2300      	movs	r3, #0
 8016aca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	885b      	ldrh	r3, [r3, #2]
 8016ad0:	b29a      	uxth	r2, r3
 8016ad2:	897b      	ldrh	r3, [r7, #10]
 8016ad4:	429a      	cmp	r2, r3
 8016ad6:	d8e5      	bhi.n	8016aa4 <USBD_GetEpDesc+0x2e>
 8016ad8:	e000      	b.n	8016adc <USBD_GetEpDesc+0x66>
          break;
 8016ada:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8016adc:	693b      	ldr	r3, [r7, #16]
}
 8016ade:	4618      	mov	r0, r3
 8016ae0:	3718      	adds	r7, #24
 8016ae2:	46bd      	mov	sp, r7
 8016ae4:	bd80      	pop	{r7, pc}

08016ae6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8016ae6:	b480      	push	{r7}
 8016ae8:	b085      	sub	sp, #20
 8016aea:	af00      	add	r7, sp, #0
 8016aec:	6078      	str	r0, [r7, #4]
 8016aee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8016af4:	683b      	ldr	r3, [r7, #0]
 8016af6:	881b      	ldrh	r3, [r3, #0]
 8016af8:	68fa      	ldr	r2, [r7, #12]
 8016afa:	7812      	ldrb	r2, [r2, #0]
 8016afc:	4413      	add	r3, r2
 8016afe:	b29a      	uxth	r2, r3
 8016b00:	683b      	ldr	r3, [r7, #0]
 8016b02:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8016b04:	68fb      	ldr	r3, [r7, #12]
 8016b06:	781b      	ldrb	r3, [r3, #0]
 8016b08:	461a      	mov	r2, r3
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	4413      	add	r3, r2
 8016b0e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8016b10:	68fb      	ldr	r3, [r7, #12]
}
 8016b12:	4618      	mov	r0, r3
 8016b14:	3714      	adds	r7, #20
 8016b16:	46bd      	mov	sp, r7
 8016b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b1c:	4770      	bx	lr

08016b1e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8016b1e:	b480      	push	{r7}
 8016b20:	b087      	sub	sp, #28
 8016b22:	af00      	add	r7, sp, #0
 8016b24:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016b2a:	697b      	ldr	r3, [r7, #20]
 8016b2c:	781b      	ldrb	r3, [r3, #0]
 8016b2e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8016b30:	697b      	ldr	r3, [r7, #20]
 8016b32:	3301      	adds	r3, #1
 8016b34:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016b36:	697b      	ldr	r3, [r7, #20]
 8016b38:	781b      	ldrb	r3, [r3, #0]
 8016b3a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8016b3c:	8a3b      	ldrh	r3, [r7, #16]
 8016b3e:	021b      	lsls	r3, r3, #8
 8016b40:	b21a      	sxth	r2, r3
 8016b42:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016b46:	4313      	orrs	r3, r2
 8016b48:	b21b      	sxth	r3, r3
 8016b4a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8016b4c:	89fb      	ldrh	r3, [r7, #14]
}
 8016b4e:	4618      	mov	r0, r3
 8016b50:	371c      	adds	r7, #28
 8016b52:	46bd      	mov	sp, r7
 8016b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b58:	4770      	bx	lr
	...

08016b5c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016b5c:	b580      	push	{r7, lr}
 8016b5e:	b084      	sub	sp, #16
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	6078      	str	r0, [r7, #4]
 8016b64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016b66:	2300      	movs	r3, #0
 8016b68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016b6a:	683b      	ldr	r3, [r7, #0]
 8016b6c:	781b      	ldrb	r3, [r3, #0]
 8016b6e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016b72:	2b40      	cmp	r3, #64	@ 0x40
 8016b74:	d005      	beq.n	8016b82 <USBD_StdDevReq+0x26>
 8016b76:	2b40      	cmp	r3, #64	@ 0x40
 8016b78:	d857      	bhi.n	8016c2a <USBD_StdDevReq+0xce>
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d00f      	beq.n	8016b9e <USBD_StdDevReq+0x42>
 8016b7e:	2b20      	cmp	r3, #32
 8016b80:	d153      	bne.n	8016c2a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	32ae      	adds	r2, #174	@ 0xae
 8016b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b90:	689b      	ldr	r3, [r3, #8]
 8016b92:	6839      	ldr	r1, [r7, #0]
 8016b94:	6878      	ldr	r0, [r7, #4]
 8016b96:	4798      	blx	r3
 8016b98:	4603      	mov	r3, r0
 8016b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8016b9c:	e04a      	b.n	8016c34 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016b9e:	683b      	ldr	r3, [r7, #0]
 8016ba0:	785b      	ldrb	r3, [r3, #1]
 8016ba2:	2b09      	cmp	r3, #9
 8016ba4:	d83b      	bhi.n	8016c1e <USBD_StdDevReq+0xc2>
 8016ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8016bac <USBD_StdDevReq+0x50>)
 8016ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016bac:	08016c01 	.word	0x08016c01
 8016bb0:	08016c15 	.word	0x08016c15
 8016bb4:	08016c1f 	.word	0x08016c1f
 8016bb8:	08016c0b 	.word	0x08016c0b
 8016bbc:	08016c1f 	.word	0x08016c1f
 8016bc0:	08016bdf 	.word	0x08016bdf
 8016bc4:	08016bd5 	.word	0x08016bd5
 8016bc8:	08016c1f 	.word	0x08016c1f
 8016bcc:	08016bf7 	.word	0x08016bf7
 8016bd0:	08016be9 	.word	0x08016be9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016bd4:	6839      	ldr	r1, [r7, #0]
 8016bd6:	6878      	ldr	r0, [r7, #4]
 8016bd8:	f000 fa3c 	bl	8017054 <USBD_GetDescriptor>
          break;
 8016bdc:	e024      	b.n	8016c28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8016bde:	6839      	ldr	r1, [r7, #0]
 8016be0:	6878      	ldr	r0, [r7, #4]
 8016be2:	f000 fba1 	bl	8017328 <USBD_SetAddress>
          break;
 8016be6:	e01f      	b.n	8016c28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8016be8:	6839      	ldr	r1, [r7, #0]
 8016bea:	6878      	ldr	r0, [r7, #4]
 8016bec:	f000 fbe0 	bl	80173b0 <USBD_SetConfig>
 8016bf0:	4603      	mov	r3, r0
 8016bf2:	73fb      	strb	r3, [r7, #15]
          break;
 8016bf4:	e018      	b.n	8016c28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8016bf6:	6839      	ldr	r1, [r7, #0]
 8016bf8:	6878      	ldr	r0, [r7, #4]
 8016bfa:	f000 fc83 	bl	8017504 <USBD_GetConfig>
          break;
 8016bfe:	e013      	b.n	8016c28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016c00:	6839      	ldr	r1, [r7, #0]
 8016c02:	6878      	ldr	r0, [r7, #4]
 8016c04:	f000 fcb4 	bl	8017570 <USBD_GetStatus>
          break;
 8016c08:	e00e      	b.n	8016c28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016c0a:	6839      	ldr	r1, [r7, #0]
 8016c0c:	6878      	ldr	r0, [r7, #4]
 8016c0e:	f000 fce3 	bl	80175d8 <USBD_SetFeature>
          break;
 8016c12:	e009      	b.n	8016c28 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016c14:	6839      	ldr	r1, [r7, #0]
 8016c16:	6878      	ldr	r0, [r7, #4]
 8016c18:	f000 fd07 	bl	801762a <USBD_ClrFeature>
          break;
 8016c1c:	e004      	b.n	8016c28 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8016c1e:	6839      	ldr	r1, [r7, #0]
 8016c20:	6878      	ldr	r0, [r7, #4]
 8016c22:	f000 fd5e 	bl	80176e2 <USBD_CtlError>
          break;
 8016c26:	bf00      	nop
      }
      break;
 8016c28:	e004      	b.n	8016c34 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8016c2a:	6839      	ldr	r1, [r7, #0]
 8016c2c:	6878      	ldr	r0, [r7, #4]
 8016c2e:	f000 fd58 	bl	80176e2 <USBD_CtlError>
      break;
 8016c32:	bf00      	nop
  }

  return ret;
 8016c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c36:	4618      	mov	r0, r3
 8016c38:	3710      	adds	r7, #16
 8016c3a:	46bd      	mov	sp, r7
 8016c3c:	bd80      	pop	{r7, pc}
 8016c3e:	bf00      	nop

08016c40 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016c40:	b580      	push	{r7, lr}
 8016c42:	b084      	sub	sp, #16
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	6078      	str	r0, [r7, #4]
 8016c48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016c4a:	2300      	movs	r3, #0
 8016c4c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016c4e:	683b      	ldr	r3, [r7, #0]
 8016c50:	781b      	ldrb	r3, [r3, #0]
 8016c52:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016c56:	2b40      	cmp	r3, #64	@ 0x40
 8016c58:	d005      	beq.n	8016c66 <USBD_StdItfReq+0x26>
 8016c5a:	2b40      	cmp	r3, #64	@ 0x40
 8016c5c:	d852      	bhi.n	8016d04 <USBD_StdItfReq+0xc4>
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d001      	beq.n	8016c66 <USBD_StdItfReq+0x26>
 8016c62:	2b20      	cmp	r3, #32
 8016c64:	d14e      	bne.n	8016d04 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016c6c:	b2db      	uxtb	r3, r3
 8016c6e:	3b01      	subs	r3, #1
 8016c70:	2b02      	cmp	r3, #2
 8016c72:	d840      	bhi.n	8016cf6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016c74:	683b      	ldr	r3, [r7, #0]
 8016c76:	889b      	ldrh	r3, [r3, #4]
 8016c78:	b2db      	uxtb	r3, r3
 8016c7a:	2b01      	cmp	r3, #1
 8016c7c:	d836      	bhi.n	8016cec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8016c7e:	683b      	ldr	r3, [r7, #0]
 8016c80:	889b      	ldrh	r3, [r3, #4]
 8016c82:	b2db      	uxtb	r3, r3
 8016c84:	4619      	mov	r1, r3
 8016c86:	6878      	ldr	r0, [r7, #4]
 8016c88:	f7ff fedb 	bl	8016a42 <USBD_CoreFindIF>
 8016c8c:	4603      	mov	r3, r0
 8016c8e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016c90:	7bbb      	ldrb	r3, [r7, #14]
 8016c92:	2bff      	cmp	r3, #255	@ 0xff
 8016c94:	d01d      	beq.n	8016cd2 <USBD_StdItfReq+0x92>
 8016c96:	7bbb      	ldrb	r3, [r7, #14]
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d11a      	bne.n	8016cd2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016c9c:	7bba      	ldrb	r2, [r7, #14]
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	32ae      	adds	r2, #174	@ 0xae
 8016ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ca6:	689b      	ldr	r3, [r3, #8]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d00f      	beq.n	8016ccc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8016cac:	7bba      	ldrb	r2, [r7, #14]
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016cb4:	7bba      	ldrb	r2, [r7, #14]
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	32ae      	adds	r2, #174	@ 0xae
 8016cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016cbe:	689b      	ldr	r3, [r3, #8]
 8016cc0:	6839      	ldr	r1, [r7, #0]
 8016cc2:	6878      	ldr	r0, [r7, #4]
 8016cc4:	4798      	blx	r3
 8016cc6:	4603      	mov	r3, r0
 8016cc8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016cca:	e004      	b.n	8016cd6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8016ccc:	2303      	movs	r3, #3
 8016cce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016cd0:	e001      	b.n	8016cd6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8016cd2:	2303      	movs	r3, #3
 8016cd4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016cd6:	683b      	ldr	r3, [r7, #0]
 8016cd8:	88db      	ldrh	r3, [r3, #6]
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d110      	bne.n	8016d00 <USBD_StdItfReq+0xc0>
 8016cde:	7bfb      	ldrb	r3, [r7, #15]
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d10d      	bne.n	8016d00 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016ce4:	6878      	ldr	r0, [r7, #4]
 8016ce6:	f000 fdc7 	bl	8017878 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016cea:	e009      	b.n	8016d00 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8016cec:	6839      	ldr	r1, [r7, #0]
 8016cee:	6878      	ldr	r0, [r7, #4]
 8016cf0:	f000 fcf7 	bl	80176e2 <USBD_CtlError>
          break;
 8016cf4:	e004      	b.n	8016d00 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8016cf6:	6839      	ldr	r1, [r7, #0]
 8016cf8:	6878      	ldr	r0, [r7, #4]
 8016cfa:	f000 fcf2 	bl	80176e2 <USBD_CtlError>
          break;
 8016cfe:	e000      	b.n	8016d02 <USBD_StdItfReq+0xc2>
          break;
 8016d00:	bf00      	nop
      }
      break;
 8016d02:	e004      	b.n	8016d0e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8016d04:	6839      	ldr	r1, [r7, #0]
 8016d06:	6878      	ldr	r0, [r7, #4]
 8016d08:	f000 fceb 	bl	80176e2 <USBD_CtlError>
      break;
 8016d0c:	bf00      	nop
  }

  return ret;
 8016d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d10:	4618      	mov	r0, r3
 8016d12:	3710      	adds	r7, #16
 8016d14:	46bd      	mov	sp, r7
 8016d16:	bd80      	pop	{r7, pc}

08016d18 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016d18:	b580      	push	{r7, lr}
 8016d1a:	b084      	sub	sp, #16
 8016d1c:	af00      	add	r7, sp, #0
 8016d1e:	6078      	str	r0, [r7, #4]
 8016d20:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8016d22:	2300      	movs	r3, #0
 8016d24:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8016d26:	683b      	ldr	r3, [r7, #0]
 8016d28:	889b      	ldrh	r3, [r3, #4]
 8016d2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016d2c:	683b      	ldr	r3, [r7, #0]
 8016d2e:	781b      	ldrb	r3, [r3, #0]
 8016d30:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016d34:	2b40      	cmp	r3, #64	@ 0x40
 8016d36:	d007      	beq.n	8016d48 <USBD_StdEPReq+0x30>
 8016d38:	2b40      	cmp	r3, #64	@ 0x40
 8016d3a:	f200 817f 	bhi.w	801703c <USBD_StdEPReq+0x324>
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d02a      	beq.n	8016d98 <USBD_StdEPReq+0x80>
 8016d42:	2b20      	cmp	r3, #32
 8016d44:	f040 817a 	bne.w	801703c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016d48:	7bbb      	ldrb	r3, [r7, #14]
 8016d4a:	4619      	mov	r1, r3
 8016d4c:	6878      	ldr	r0, [r7, #4]
 8016d4e:	f7ff fe85 	bl	8016a5c <USBD_CoreFindEP>
 8016d52:	4603      	mov	r3, r0
 8016d54:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016d56:	7b7b      	ldrb	r3, [r7, #13]
 8016d58:	2bff      	cmp	r3, #255	@ 0xff
 8016d5a:	f000 8174 	beq.w	8017046 <USBD_StdEPReq+0x32e>
 8016d5e:	7b7b      	ldrb	r3, [r7, #13]
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	f040 8170 	bne.w	8017046 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8016d66:	7b7a      	ldrb	r2, [r7, #13]
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016d6e:	7b7a      	ldrb	r2, [r7, #13]
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	32ae      	adds	r2, #174	@ 0xae
 8016d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d78:	689b      	ldr	r3, [r3, #8]
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	f000 8163 	beq.w	8017046 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016d80:	7b7a      	ldrb	r2, [r7, #13]
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	32ae      	adds	r2, #174	@ 0xae
 8016d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d8a:	689b      	ldr	r3, [r3, #8]
 8016d8c:	6839      	ldr	r1, [r7, #0]
 8016d8e:	6878      	ldr	r0, [r7, #4]
 8016d90:	4798      	blx	r3
 8016d92:	4603      	mov	r3, r0
 8016d94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8016d96:	e156      	b.n	8017046 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016d98:	683b      	ldr	r3, [r7, #0]
 8016d9a:	785b      	ldrb	r3, [r3, #1]
 8016d9c:	2b03      	cmp	r3, #3
 8016d9e:	d008      	beq.n	8016db2 <USBD_StdEPReq+0x9a>
 8016da0:	2b03      	cmp	r3, #3
 8016da2:	f300 8145 	bgt.w	8017030 <USBD_StdEPReq+0x318>
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	f000 809b 	beq.w	8016ee2 <USBD_StdEPReq+0x1ca>
 8016dac:	2b01      	cmp	r3, #1
 8016dae:	d03c      	beq.n	8016e2a <USBD_StdEPReq+0x112>
 8016db0:	e13e      	b.n	8017030 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016db8:	b2db      	uxtb	r3, r3
 8016dba:	2b02      	cmp	r3, #2
 8016dbc:	d002      	beq.n	8016dc4 <USBD_StdEPReq+0xac>
 8016dbe:	2b03      	cmp	r3, #3
 8016dc0:	d016      	beq.n	8016df0 <USBD_StdEPReq+0xd8>
 8016dc2:	e02c      	b.n	8016e1e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016dc4:	7bbb      	ldrb	r3, [r7, #14]
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d00d      	beq.n	8016de6 <USBD_StdEPReq+0xce>
 8016dca:	7bbb      	ldrb	r3, [r7, #14]
 8016dcc:	2b80      	cmp	r3, #128	@ 0x80
 8016dce:	d00a      	beq.n	8016de6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016dd0:	7bbb      	ldrb	r3, [r7, #14]
 8016dd2:	4619      	mov	r1, r3
 8016dd4:	6878      	ldr	r0, [r7, #4]
 8016dd6:	f004 f945 	bl	801b064 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016dda:	2180      	movs	r1, #128	@ 0x80
 8016ddc:	6878      	ldr	r0, [r7, #4]
 8016dde:	f004 f941 	bl	801b064 <USBD_LL_StallEP>
 8016de2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016de4:	e020      	b.n	8016e28 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8016de6:	6839      	ldr	r1, [r7, #0]
 8016de8:	6878      	ldr	r0, [r7, #4]
 8016dea:	f000 fc7a 	bl	80176e2 <USBD_CtlError>
              break;
 8016dee:	e01b      	b.n	8016e28 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016df0:	683b      	ldr	r3, [r7, #0]
 8016df2:	885b      	ldrh	r3, [r3, #2]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d10e      	bne.n	8016e16 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016df8:	7bbb      	ldrb	r3, [r7, #14]
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d00b      	beq.n	8016e16 <USBD_StdEPReq+0xfe>
 8016dfe:	7bbb      	ldrb	r3, [r7, #14]
 8016e00:	2b80      	cmp	r3, #128	@ 0x80
 8016e02:	d008      	beq.n	8016e16 <USBD_StdEPReq+0xfe>
 8016e04:	683b      	ldr	r3, [r7, #0]
 8016e06:	88db      	ldrh	r3, [r3, #6]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d104      	bne.n	8016e16 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016e0c:	7bbb      	ldrb	r3, [r7, #14]
 8016e0e:	4619      	mov	r1, r3
 8016e10:	6878      	ldr	r0, [r7, #4]
 8016e12:	f004 f927 	bl	801b064 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016e16:	6878      	ldr	r0, [r7, #4]
 8016e18:	f000 fd2e 	bl	8017878 <USBD_CtlSendStatus>

              break;
 8016e1c:	e004      	b.n	8016e28 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016e1e:	6839      	ldr	r1, [r7, #0]
 8016e20:	6878      	ldr	r0, [r7, #4]
 8016e22:	f000 fc5e 	bl	80176e2 <USBD_CtlError>
              break;
 8016e26:	bf00      	nop
          }
          break;
 8016e28:	e107      	b.n	801703a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016e30:	b2db      	uxtb	r3, r3
 8016e32:	2b02      	cmp	r3, #2
 8016e34:	d002      	beq.n	8016e3c <USBD_StdEPReq+0x124>
 8016e36:	2b03      	cmp	r3, #3
 8016e38:	d016      	beq.n	8016e68 <USBD_StdEPReq+0x150>
 8016e3a:	e04b      	b.n	8016ed4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016e3c:	7bbb      	ldrb	r3, [r7, #14]
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d00d      	beq.n	8016e5e <USBD_StdEPReq+0x146>
 8016e42:	7bbb      	ldrb	r3, [r7, #14]
 8016e44:	2b80      	cmp	r3, #128	@ 0x80
 8016e46:	d00a      	beq.n	8016e5e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016e48:	7bbb      	ldrb	r3, [r7, #14]
 8016e4a:	4619      	mov	r1, r3
 8016e4c:	6878      	ldr	r0, [r7, #4]
 8016e4e:	f004 f909 	bl	801b064 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016e52:	2180      	movs	r1, #128	@ 0x80
 8016e54:	6878      	ldr	r0, [r7, #4]
 8016e56:	f004 f905 	bl	801b064 <USBD_LL_StallEP>
 8016e5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016e5c:	e040      	b.n	8016ee0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016e5e:	6839      	ldr	r1, [r7, #0]
 8016e60:	6878      	ldr	r0, [r7, #4]
 8016e62:	f000 fc3e 	bl	80176e2 <USBD_CtlError>
              break;
 8016e66:	e03b      	b.n	8016ee0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016e68:	683b      	ldr	r3, [r7, #0]
 8016e6a:	885b      	ldrh	r3, [r3, #2]
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d136      	bne.n	8016ede <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016e70:	7bbb      	ldrb	r3, [r7, #14]
 8016e72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d004      	beq.n	8016e84 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016e7a:	7bbb      	ldrb	r3, [r7, #14]
 8016e7c:	4619      	mov	r1, r3
 8016e7e:	6878      	ldr	r0, [r7, #4]
 8016e80:	f004 f90f 	bl	801b0a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016e84:	6878      	ldr	r0, [r7, #4]
 8016e86:	f000 fcf7 	bl	8017878 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016e8a:	7bbb      	ldrb	r3, [r7, #14]
 8016e8c:	4619      	mov	r1, r3
 8016e8e:	6878      	ldr	r0, [r7, #4]
 8016e90:	f7ff fde4 	bl	8016a5c <USBD_CoreFindEP>
 8016e94:	4603      	mov	r3, r0
 8016e96:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016e98:	7b7b      	ldrb	r3, [r7, #13]
 8016e9a:	2bff      	cmp	r3, #255	@ 0xff
 8016e9c:	d01f      	beq.n	8016ede <USBD_StdEPReq+0x1c6>
 8016e9e:	7b7b      	ldrb	r3, [r7, #13]
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d11c      	bne.n	8016ede <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016ea4:	7b7a      	ldrb	r2, [r7, #13]
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016eac:	7b7a      	ldrb	r2, [r7, #13]
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	32ae      	adds	r2, #174	@ 0xae
 8016eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016eb6:	689b      	ldr	r3, [r3, #8]
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	d010      	beq.n	8016ede <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016ebc:	7b7a      	ldrb	r2, [r7, #13]
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	32ae      	adds	r2, #174	@ 0xae
 8016ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ec6:	689b      	ldr	r3, [r3, #8]
 8016ec8:	6839      	ldr	r1, [r7, #0]
 8016eca:	6878      	ldr	r0, [r7, #4]
 8016ecc:	4798      	blx	r3
 8016ece:	4603      	mov	r3, r0
 8016ed0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8016ed2:	e004      	b.n	8016ede <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8016ed4:	6839      	ldr	r1, [r7, #0]
 8016ed6:	6878      	ldr	r0, [r7, #4]
 8016ed8:	f000 fc03 	bl	80176e2 <USBD_CtlError>
              break;
 8016edc:	e000      	b.n	8016ee0 <USBD_StdEPReq+0x1c8>
              break;
 8016ede:	bf00      	nop
          }
          break;
 8016ee0:	e0ab      	b.n	801703a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016ee8:	b2db      	uxtb	r3, r3
 8016eea:	2b02      	cmp	r3, #2
 8016eec:	d002      	beq.n	8016ef4 <USBD_StdEPReq+0x1dc>
 8016eee:	2b03      	cmp	r3, #3
 8016ef0:	d032      	beq.n	8016f58 <USBD_StdEPReq+0x240>
 8016ef2:	e097      	b.n	8017024 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016ef4:	7bbb      	ldrb	r3, [r7, #14]
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d007      	beq.n	8016f0a <USBD_StdEPReq+0x1f2>
 8016efa:	7bbb      	ldrb	r3, [r7, #14]
 8016efc:	2b80      	cmp	r3, #128	@ 0x80
 8016efe:	d004      	beq.n	8016f0a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016f00:	6839      	ldr	r1, [r7, #0]
 8016f02:	6878      	ldr	r0, [r7, #4]
 8016f04:	f000 fbed 	bl	80176e2 <USBD_CtlError>
                break;
 8016f08:	e091      	b.n	801702e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016f0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	da0b      	bge.n	8016f2a <USBD_StdEPReq+0x212>
 8016f12:	7bbb      	ldrb	r3, [r7, #14]
 8016f14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016f18:	4613      	mov	r3, r2
 8016f1a:	009b      	lsls	r3, r3, #2
 8016f1c:	4413      	add	r3, r2
 8016f1e:	009b      	lsls	r3, r3, #2
 8016f20:	3310      	adds	r3, #16
 8016f22:	687a      	ldr	r2, [r7, #4]
 8016f24:	4413      	add	r3, r2
 8016f26:	3304      	adds	r3, #4
 8016f28:	e00b      	b.n	8016f42 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016f2a:	7bbb      	ldrb	r3, [r7, #14]
 8016f2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016f30:	4613      	mov	r3, r2
 8016f32:	009b      	lsls	r3, r3, #2
 8016f34:	4413      	add	r3, r2
 8016f36:	009b      	lsls	r3, r3, #2
 8016f38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016f3c:	687a      	ldr	r2, [r7, #4]
 8016f3e:	4413      	add	r3, r2
 8016f40:	3304      	adds	r3, #4
 8016f42:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016f44:	68bb      	ldr	r3, [r7, #8]
 8016f46:	2200      	movs	r2, #0
 8016f48:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016f4a:	68bb      	ldr	r3, [r7, #8]
 8016f4c:	2202      	movs	r2, #2
 8016f4e:	4619      	mov	r1, r3
 8016f50:	6878      	ldr	r0, [r7, #4]
 8016f52:	f000 fc37 	bl	80177c4 <USBD_CtlSendData>
              break;
 8016f56:	e06a      	b.n	801702e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016f58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	da11      	bge.n	8016f84 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016f60:	7bbb      	ldrb	r3, [r7, #14]
 8016f62:	f003 020f 	and.w	r2, r3, #15
 8016f66:	6879      	ldr	r1, [r7, #4]
 8016f68:	4613      	mov	r3, r2
 8016f6a:	009b      	lsls	r3, r3, #2
 8016f6c:	4413      	add	r3, r2
 8016f6e:	009b      	lsls	r3, r3, #2
 8016f70:	440b      	add	r3, r1
 8016f72:	3324      	adds	r3, #36	@ 0x24
 8016f74:	881b      	ldrh	r3, [r3, #0]
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d117      	bne.n	8016faa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016f7a:	6839      	ldr	r1, [r7, #0]
 8016f7c:	6878      	ldr	r0, [r7, #4]
 8016f7e:	f000 fbb0 	bl	80176e2 <USBD_CtlError>
                  break;
 8016f82:	e054      	b.n	801702e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016f84:	7bbb      	ldrb	r3, [r7, #14]
 8016f86:	f003 020f 	and.w	r2, r3, #15
 8016f8a:	6879      	ldr	r1, [r7, #4]
 8016f8c:	4613      	mov	r3, r2
 8016f8e:	009b      	lsls	r3, r3, #2
 8016f90:	4413      	add	r3, r2
 8016f92:	009b      	lsls	r3, r3, #2
 8016f94:	440b      	add	r3, r1
 8016f96:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016f9a:	881b      	ldrh	r3, [r3, #0]
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d104      	bne.n	8016faa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016fa0:	6839      	ldr	r1, [r7, #0]
 8016fa2:	6878      	ldr	r0, [r7, #4]
 8016fa4:	f000 fb9d 	bl	80176e2 <USBD_CtlError>
                  break;
 8016fa8:	e041      	b.n	801702e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016faa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	da0b      	bge.n	8016fca <USBD_StdEPReq+0x2b2>
 8016fb2:	7bbb      	ldrb	r3, [r7, #14]
 8016fb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016fb8:	4613      	mov	r3, r2
 8016fba:	009b      	lsls	r3, r3, #2
 8016fbc:	4413      	add	r3, r2
 8016fbe:	009b      	lsls	r3, r3, #2
 8016fc0:	3310      	adds	r3, #16
 8016fc2:	687a      	ldr	r2, [r7, #4]
 8016fc4:	4413      	add	r3, r2
 8016fc6:	3304      	adds	r3, #4
 8016fc8:	e00b      	b.n	8016fe2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016fca:	7bbb      	ldrb	r3, [r7, #14]
 8016fcc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016fd0:	4613      	mov	r3, r2
 8016fd2:	009b      	lsls	r3, r3, #2
 8016fd4:	4413      	add	r3, r2
 8016fd6:	009b      	lsls	r3, r3, #2
 8016fd8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016fdc:	687a      	ldr	r2, [r7, #4]
 8016fde:	4413      	add	r3, r2
 8016fe0:	3304      	adds	r3, #4
 8016fe2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016fe4:	7bbb      	ldrb	r3, [r7, #14]
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d002      	beq.n	8016ff0 <USBD_StdEPReq+0x2d8>
 8016fea:	7bbb      	ldrb	r3, [r7, #14]
 8016fec:	2b80      	cmp	r3, #128	@ 0x80
 8016fee:	d103      	bne.n	8016ff8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016ff0:	68bb      	ldr	r3, [r7, #8]
 8016ff2:	2200      	movs	r2, #0
 8016ff4:	601a      	str	r2, [r3, #0]
 8016ff6:	e00e      	b.n	8017016 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016ff8:	7bbb      	ldrb	r3, [r7, #14]
 8016ffa:	4619      	mov	r1, r3
 8016ffc:	6878      	ldr	r0, [r7, #4]
 8016ffe:	f004 f86f 	bl	801b0e0 <USBD_LL_IsStallEP>
 8017002:	4603      	mov	r3, r0
 8017004:	2b00      	cmp	r3, #0
 8017006:	d003      	beq.n	8017010 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8017008:	68bb      	ldr	r3, [r7, #8]
 801700a:	2201      	movs	r2, #1
 801700c:	601a      	str	r2, [r3, #0]
 801700e:	e002      	b.n	8017016 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8017010:	68bb      	ldr	r3, [r7, #8]
 8017012:	2200      	movs	r2, #0
 8017014:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017016:	68bb      	ldr	r3, [r7, #8]
 8017018:	2202      	movs	r2, #2
 801701a:	4619      	mov	r1, r3
 801701c:	6878      	ldr	r0, [r7, #4]
 801701e:	f000 fbd1 	bl	80177c4 <USBD_CtlSendData>
              break;
 8017022:	e004      	b.n	801702e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8017024:	6839      	ldr	r1, [r7, #0]
 8017026:	6878      	ldr	r0, [r7, #4]
 8017028:	f000 fb5b 	bl	80176e2 <USBD_CtlError>
              break;
 801702c:	bf00      	nop
          }
          break;
 801702e:	e004      	b.n	801703a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8017030:	6839      	ldr	r1, [r7, #0]
 8017032:	6878      	ldr	r0, [r7, #4]
 8017034:	f000 fb55 	bl	80176e2 <USBD_CtlError>
          break;
 8017038:	bf00      	nop
      }
      break;
 801703a:	e005      	b.n	8017048 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801703c:	6839      	ldr	r1, [r7, #0]
 801703e:	6878      	ldr	r0, [r7, #4]
 8017040:	f000 fb4f 	bl	80176e2 <USBD_CtlError>
      break;
 8017044:	e000      	b.n	8017048 <USBD_StdEPReq+0x330>
      break;
 8017046:	bf00      	nop
  }

  return ret;
 8017048:	7bfb      	ldrb	r3, [r7, #15]
}
 801704a:	4618      	mov	r0, r3
 801704c:	3710      	adds	r7, #16
 801704e:	46bd      	mov	sp, r7
 8017050:	bd80      	pop	{r7, pc}
	...

08017054 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017054:	b580      	push	{r7, lr}
 8017056:	b084      	sub	sp, #16
 8017058:	af00      	add	r7, sp, #0
 801705a:	6078      	str	r0, [r7, #4]
 801705c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801705e:	2300      	movs	r3, #0
 8017060:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8017062:	2300      	movs	r3, #0
 8017064:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8017066:	2300      	movs	r3, #0
 8017068:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801706a:	683b      	ldr	r3, [r7, #0]
 801706c:	885b      	ldrh	r3, [r3, #2]
 801706e:	0a1b      	lsrs	r3, r3, #8
 8017070:	b29b      	uxth	r3, r3
 8017072:	3b01      	subs	r3, #1
 8017074:	2b06      	cmp	r3, #6
 8017076:	f200 8128 	bhi.w	80172ca <USBD_GetDescriptor+0x276>
 801707a:	a201      	add	r2, pc, #4	@ (adr r2, 8017080 <USBD_GetDescriptor+0x2c>)
 801707c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017080:	0801709d 	.word	0x0801709d
 8017084:	080170b5 	.word	0x080170b5
 8017088:	080170f5 	.word	0x080170f5
 801708c:	080172cb 	.word	0x080172cb
 8017090:	080172cb 	.word	0x080172cb
 8017094:	0801726b 	.word	0x0801726b
 8017098:	08017297 	.word	0x08017297
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80170a2:	681b      	ldr	r3, [r3, #0]
 80170a4:	687a      	ldr	r2, [r7, #4]
 80170a6:	7c12      	ldrb	r2, [r2, #16]
 80170a8:	f107 0108 	add.w	r1, r7, #8
 80170ac:	4610      	mov	r0, r2
 80170ae:	4798      	blx	r3
 80170b0:	60f8      	str	r0, [r7, #12]
      break;
 80170b2:	e112      	b.n	80172da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	7c1b      	ldrb	r3, [r3, #16]
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d10d      	bne.n	80170d8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80170c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80170c4:	f107 0208 	add.w	r2, r7, #8
 80170c8:	4610      	mov	r0, r2
 80170ca:	4798      	blx	r3
 80170cc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	3301      	adds	r3, #1
 80170d2:	2202      	movs	r2, #2
 80170d4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80170d6:	e100      	b.n	80172da <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80170de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80170e0:	f107 0208 	add.w	r2, r7, #8
 80170e4:	4610      	mov	r0, r2
 80170e6:	4798      	blx	r3
 80170e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	3301      	adds	r3, #1
 80170ee:	2202      	movs	r2, #2
 80170f0:	701a      	strb	r2, [r3, #0]
      break;
 80170f2:	e0f2      	b.n	80172da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80170f4:	683b      	ldr	r3, [r7, #0]
 80170f6:	885b      	ldrh	r3, [r3, #2]
 80170f8:	b2db      	uxtb	r3, r3
 80170fa:	2b05      	cmp	r3, #5
 80170fc:	f200 80ac 	bhi.w	8017258 <USBD_GetDescriptor+0x204>
 8017100:	a201      	add	r2, pc, #4	@ (adr r2, 8017108 <USBD_GetDescriptor+0xb4>)
 8017102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017106:	bf00      	nop
 8017108:	08017121 	.word	0x08017121
 801710c:	08017155 	.word	0x08017155
 8017110:	08017189 	.word	0x08017189
 8017114:	080171bd 	.word	0x080171bd
 8017118:	080171f1 	.word	0x080171f1
 801711c:	08017225 	.word	0x08017225
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017126:	685b      	ldr	r3, [r3, #4]
 8017128:	2b00      	cmp	r3, #0
 801712a:	d00b      	beq.n	8017144 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017132:	685b      	ldr	r3, [r3, #4]
 8017134:	687a      	ldr	r2, [r7, #4]
 8017136:	7c12      	ldrb	r2, [r2, #16]
 8017138:	f107 0108 	add.w	r1, r7, #8
 801713c:	4610      	mov	r0, r2
 801713e:	4798      	blx	r3
 8017140:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017142:	e091      	b.n	8017268 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017144:	6839      	ldr	r1, [r7, #0]
 8017146:	6878      	ldr	r0, [r7, #4]
 8017148:	f000 facb 	bl	80176e2 <USBD_CtlError>
            err++;
 801714c:	7afb      	ldrb	r3, [r7, #11]
 801714e:	3301      	adds	r3, #1
 8017150:	72fb      	strb	r3, [r7, #11]
          break;
 8017152:	e089      	b.n	8017268 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801715a:	689b      	ldr	r3, [r3, #8]
 801715c:	2b00      	cmp	r3, #0
 801715e:	d00b      	beq.n	8017178 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017166:	689b      	ldr	r3, [r3, #8]
 8017168:	687a      	ldr	r2, [r7, #4]
 801716a:	7c12      	ldrb	r2, [r2, #16]
 801716c:	f107 0108 	add.w	r1, r7, #8
 8017170:	4610      	mov	r0, r2
 8017172:	4798      	blx	r3
 8017174:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017176:	e077      	b.n	8017268 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017178:	6839      	ldr	r1, [r7, #0]
 801717a:	6878      	ldr	r0, [r7, #4]
 801717c:	f000 fab1 	bl	80176e2 <USBD_CtlError>
            err++;
 8017180:	7afb      	ldrb	r3, [r7, #11]
 8017182:	3301      	adds	r3, #1
 8017184:	72fb      	strb	r3, [r7, #11]
          break;
 8017186:	e06f      	b.n	8017268 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801718e:	68db      	ldr	r3, [r3, #12]
 8017190:	2b00      	cmp	r3, #0
 8017192:	d00b      	beq.n	80171ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801719a:	68db      	ldr	r3, [r3, #12]
 801719c:	687a      	ldr	r2, [r7, #4]
 801719e:	7c12      	ldrb	r2, [r2, #16]
 80171a0:	f107 0108 	add.w	r1, r7, #8
 80171a4:	4610      	mov	r0, r2
 80171a6:	4798      	blx	r3
 80171a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80171aa:	e05d      	b.n	8017268 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80171ac:	6839      	ldr	r1, [r7, #0]
 80171ae:	6878      	ldr	r0, [r7, #4]
 80171b0:	f000 fa97 	bl	80176e2 <USBD_CtlError>
            err++;
 80171b4:	7afb      	ldrb	r3, [r7, #11]
 80171b6:	3301      	adds	r3, #1
 80171b8:	72fb      	strb	r3, [r7, #11]
          break;
 80171ba:	e055      	b.n	8017268 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80171c2:	691b      	ldr	r3, [r3, #16]
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d00b      	beq.n	80171e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80171ce:	691b      	ldr	r3, [r3, #16]
 80171d0:	687a      	ldr	r2, [r7, #4]
 80171d2:	7c12      	ldrb	r2, [r2, #16]
 80171d4:	f107 0108 	add.w	r1, r7, #8
 80171d8:	4610      	mov	r0, r2
 80171da:	4798      	blx	r3
 80171dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80171de:	e043      	b.n	8017268 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80171e0:	6839      	ldr	r1, [r7, #0]
 80171e2:	6878      	ldr	r0, [r7, #4]
 80171e4:	f000 fa7d 	bl	80176e2 <USBD_CtlError>
            err++;
 80171e8:	7afb      	ldrb	r3, [r7, #11]
 80171ea:	3301      	adds	r3, #1
 80171ec:	72fb      	strb	r3, [r7, #11]
          break;
 80171ee:	e03b      	b.n	8017268 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80171f6:	695b      	ldr	r3, [r3, #20]
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d00b      	beq.n	8017214 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017202:	695b      	ldr	r3, [r3, #20]
 8017204:	687a      	ldr	r2, [r7, #4]
 8017206:	7c12      	ldrb	r2, [r2, #16]
 8017208:	f107 0108 	add.w	r1, r7, #8
 801720c:	4610      	mov	r0, r2
 801720e:	4798      	blx	r3
 8017210:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017212:	e029      	b.n	8017268 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017214:	6839      	ldr	r1, [r7, #0]
 8017216:	6878      	ldr	r0, [r7, #4]
 8017218:	f000 fa63 	bl	80176e2 <USBD_CtlError>
            err++;
 801721c:	7afb      	ldrb	r3, [r7, #11]
 801721e:	3301      	adds	r3, #1
 8017220:	72fb      	strb	r3, [r7, #11]
          break;
 8017222:	e021      	b.n	8017268 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801722a:	699b      	ldr	r3, [r3, #24]
 801722c:	2b00      	cmp	r3, #0
 801722e:	d00b      	beq.n	8017248 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017236:	699b      	ldr	r3, [r3, #24]
 8017238:	687a      	ldr	r2, [r7, #4]
 801723a:	7c12      	ldrb	r2, [r2, #16]
 801723c:	f107 0108 	add.w	r1, r7, #8
 8017240:	4610      	mov	r0, r2
 8017242:	4798      	blx	r3
 8017244:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017246:	e00f      	b.n	8017268 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017248:	6839      	ldr	r1, [r7, #0]
 801724a:	6878      	ldr	r0, [r7, #4]
 801724c:	f000 fa49 	bl	80176e2 <USBD_CtlError>
            err++;
 8017250:	7afb      	ldrb	r3, [r7, #11]
 8017252:	3301      	adds	r3, #1
 8017254:	72fb      	strb	r3, [r7, #11]
          break;
 8017256:	e007      	b.n	8017268 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8017258:	6839      	ldr	r1, [r7, #0]
 801725a:	6878      	ldr	r0, [r7, #4]
 801725c:	f000 fa41 	bl	80176e2 <USBD_CtlError>
          err++;
 8017260:	7afb      	ldrb	r3, [r7, #11]
 8017262:	3301      	adds	r3, #1
 8017264:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8017266:	bf00      	nop
      }
      break;
 8017268:	e037      	b.n	80172da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	7c1b      	ldrb	r3, [r3, #16]
 801726e:	2b00      	cmp	r3, #0
 8017270:	d109      	bne.n	8017286 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801727a:	f107 0208 	add.w	r2, r7, #8
 801727e:	4610      	mov	r0, r2
 8017280:	4798      	blx	r3
 8017282:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017284:	e029      	b.n	80172da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8017286:	6839      	ldr	r1, [r7, #0]
 8017288:	6878      	ldr	r0, [r7, #4]
 801728a:	f000 fa2a 	bl	80176e2 <USBD_CtlError>
        err++;
 801728e:	7afb      	ldrb	r3, [r7, #11]
 8017290:	3301      	adds	r3, #1
 8017292:	72fb      	strb	r3, [r7, #11]
      break;
 8017294:	e021      	b.n	80172da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	7c1b      	ldrb	r3, [r3, #16]
 801729a:	2b00      	cmp	r3, #0
 801729c:	d10d      	bne.n	80172ba <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80172a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80172a6:	f107 0208 	add.w	r2, r7, #8
 80172aa:	4610      	mov	r0, r2
 80172ac:	4798      	blx	r3
 80172ae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80172b0:	68fb      	ldr	r3, [r7, #12]
 80172b2:	3301      	adds	r3, #1
 80172b4:	2207      	movs	r2, #7
 80172b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80172b8:	e00f      	b.n	80172da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80172ba:	6839      	ldr	r1, [r7, #0]
 80172bc:	6878      	ldr	r0, [r7, #4]
 80172be:	f000 fa10 	bl	80176e2 <USBD_CtlError>
        err++;
 80172c2:	7afb      	ldrb	r3, [r7, #11]
 80172c4:	3301      	adds	r3, #1
 80172c6:	72fb      	strb	r3, [r7, #11]
      break;
 80172c8:	e007      	b.n	80172da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80172ca:	6839      	ldr	r1, [r7, #0]
 80172cc:	6878      	ldr	r0, [r7, #4]
 80172ce:	f000 fa08 	bl	80176e2 <USBD_CtlError>
      err++;
 80172d2:	7afb      	ldrb	r3, [r7, #11]
 80172d4:	3301      	adds	r3, #1
 80172d6:	72fb      	strb	r3, [r7, #11]
      break;
 80172d8:	bf00      	nop
  }

  if (err != 0U)
 80172da:	7afb      	ldrb	r3, [r7, #11]
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d11e      	bne.n	801731e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80172e0:	683b      	ldr	r3, [r7, #0]
 80172e2:	88db      	ldrh	r3, [r3, #6]
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d016      	beq.n	8017316 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80172e8:	893b      	ldrh	r3, [r7, #8]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d00e      	beq.n	801730c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80172ee:	683b      	ldr	r3, [r7, #0]
 80172f0:	88da      	ldrh	r2, [r3, #6]
 80172f2:	893b      	ldrh	r3, [r7, #8]
 80172f4:	4293      	cmp	r3, r2
 80172f6:	bf28      	it	cs
 80172f8:	4613      	movcs	r3, r2
 80172fa:	b29b      	uxth	r3, r3
 80172fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80172fe:	893b      	ldrh	r3, [r7, #8]
 8017300:	461a      	mov	r2, r3
 8017302:	68f9      	ldr	r1, [r7, #12]
 8017304:	6878      	ldr	r0, [r7, #4]
 8017306:	f000 fa5d 	bl	80177c4 <USBD_CtlSendData>
 801730a:	e009      	b.n	8017320 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801730c:	6839      	ldr	r1, [r7, #0]
 801730e:	6878      	ldr	r0, [r7, #4]
 8017310:	f000 f9e7 	bl	80176e2 <USBD_CtlError>
 8017314:	e004      	b.n	8017320 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8017316:	6878      	ldr	r0, [r7, #4]
 8017318:	f000 faae 	bl	8017878 <USBD_CtlSendStatus>
 801731c:	e000      	b.n	8017320 <USBD_GetDescriptor+0x2cc>
    return;
 801731e:	bf00      	nop
  }
}
 8017320:	3710      	adds	r7, #16
 8017322:	46bd      	mov	sp, r7
 8017324:	bd80      	pop	{r7, pc}
 8017326:	bf00      	nop

08017328 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017328:	b580      	push	{r7, lr}
 801732a:	b084      	sub	sp, #16
 801732c:	af00      	add	r7, sp, #0
 801732e:	6078      	str	r0, [r7, #4]
 8017330:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8017332:	683b      	ldr	r3, [r7, #0]
 8017334:	889b      	ldrh	r3, [r3, #4]
 8017336:	2b00      	cmp	r3, #0
 8017338:	d131      	bne.n	801739e <USBD_SetAddress+0x76>
 801733a:	683b      	ldr	r3, [r7, #0]
 801733c:	88db      	ldrh	r3, [r3, #6]
 801733e:	2b00      	cmp	r3, #0
 8017340:	d12d      	bne.n	801739e <USBD_SetAddress+0x76>
 8017342:	683b      	ldr	r3, [r7, #0]
 8017344:	885b      	ldrh	r3, [r3, #2]
 8017346:	2b7f      	cmp	r3, #127	@ 0x7f
 8017348:	d829      	bhi.n	801739e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801734a:	683b      	ldr	r3, [r7, #0]
 801734c:	885b      	ldrh	r3, [r3, #2]
 801734e:	b2db      	uxtb	r3, r3
 8017350:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017354:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801735c:	b2db      	uxtb	r3, r3
 801735e:	2b03      	cmp	r3, #3
 8017360:	d104      	bne.n	801736c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8017362:	6839      	ldr	r1, [r7, #0]
 8017364:	6878      	ldr	r0, [r7, #4]
 8017366:	f000 f9bc 	bl	80176e2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801736a:	e01d      	b.n	80173a8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	7bfa      	ldrb	r2, [r7, #15]
 8017370:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8017374:	7bfb      	ldrb	r3, [r7, #15]
 8017376:	4619      	mov	r1, r3
 8017378:	6878      	ldr	r0, [r7, #4]
 801737a:	f003 fedd 	bl	801b138 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801737e:	6878      	ldr	r0, [r7, #4]
 8017380:	f000 fa7a 	bl	8017878 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8017384:	7bfb      	ldrb	r3, [r7, #15]
 8017386:	2b00      	cmp	r3, #0
 8017388:	d004      	beq.n	8017394 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	2202      	movs	r2, #2
 801738e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017392:	e009      	b.n	80173a8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	2201      	movs	r2, #1
 8017398:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801739c:	e004      	b.n	80173a8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801739e:	6839      	ldr	r1, [r7, #0]
 80173a0:	6878      	ldr	r0, [r7, #4]
 80173a2:	f000 f99e 	bl	80176e2 <USBD_CtlError>
  }
}
 80173a6:	bf00      	nop
 80173a8:	bf00      	nop
 80173aa:	3710      	adds	r7, #16
 80173ac:	46bd      	mov	sp, r7
 80173ae:	bd80      	pop	{r7, pc}

080173b0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80173b0:	b580      	push	{r7, lr}
 80173b2:	b084      	sub	sp, #16
 80173b4:	af00      	add	r7, sp, #0
 80173b6:	6078      	str	r0, [r7, #4]
 80173b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80173ba:	2300      	movs	r3, #0
 80173bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80173be:	683b      	ldr	r3, [r7, #0]
 80173c0:	885b      	ldrh	r3, [r3, #2]
 80173c2:	b2da      	uxtb	r2, r3
 80173c4:	4b4e      	ldr	r3, [pc, #312]	@ (8017500 <USBD_SetConfig+0x150>)
 80173c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80173c8:	4b4d      	ldr	r3, [pc, #308]	@ (8017500 <USBD_SetConfig+0x150>)
 80173ca:	781b      	ldrb	r3, [r3, #0]
 80173cc:	2b01      	cmp	r3, #1
 80173ce:	d905      	bls.n	80173dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80173d0:	6839      	ldr	r1, [r7, #0]
 80173d2:	6878      	ldr	r0, [r7, #4]
 80173d4:	f000 f985 	bl	80176e2 <USBD_CtlError>
    return USBD_FAIL;
 80173d8:	2303      	movs	r3, #3
 80173da:	e08c      	b.n	80174f6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80173e2:	b2db      	uxtb	r3, r3
 80173e4:	2b02      	cmp	r3, #2
 80173e6:	d002      	beq.n	80173ee <USBD_SetConfig+0x3e>
 80173e8:	2b03      	cmp	r3, #3
 80173ea:	d029      	beq.n	8017440 <USBD_SetConfig+0x90>
 80173ec:	e075      	b.n	80174da <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80173ee:	4b44      	ldr	r3, [pc, #272]	@ (8017500 <USBD_SetConfig+0x150>)
 80173f0:	781b      	ldrb	r3, [r3, #0]
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d020      	beq.n	8017438 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80173f6:	4b42      	ldr	r3, [pc, #264]	@ (8017500 <USBD_SetConfig+0x150>)
 80173f8:	781b      	ldrb	r3, [r3, #0]
 80173fa:	461a      	mov	r2, r3
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017400:	4b3f      	ldr	r3, [pc, #252]	@ (8017500 <USBD_SetConfig+0x150>)
 8017402:	781b      	ldrb	r3, [r3, #0]
 8017404:	4619      	mov	r1, r3
 8017406:	6878      	ldr	r0, [r7, #4]
 8017408:	f7fe ffe3 	bl	80163d2 <USBD_SetClassConfig>
 801740c:	4603      	mov	r3, r0
 801740e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8017410:	7bfb      	ldrb	r3, [r7, #15]
 8017412:	2b00      	cmp	r3, #0
 8017414:	d008      	beq.n	8017428 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8017416:	6839      	ldr	r1, [r7, #0]
 8017418:	6878      	ldr	r0, [r7, #4]
 801741a:	f000 f962 	bl	80176e2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	2202      	movs	r2, #2
 8017422:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017426:	e065      	b.n	80174f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8017428:	6878      	ldr	r0, [r7, #4]
 801742a:	f000 fa25 	bl	8017878 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	2203      	movs	r2, #3
 8017432:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8017436:	e05d      	b.n	80174f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017438:	6878      	ldr	r0, [r7, #4]
 801743a:	f000 fa1d 	bl	8017878 <USBD_CtlSendStatus>
      break;
 801743e:	e059      	b.n	80174f4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017440:	4b2f      	ldr	r3, [pc, #188]	@ (8017500 <USBD_SetConfig+0x150>)
 8017442:	781b      	ldrb	r3, [r3, #0]
 8017444:	2b00      	cmp	r3, #0
 8017446:	d112      	bne.n	801746e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	2202      	movs	r2, #2
 801744c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8017450:	4b2b      	ldr	r3, [pc, #172]	@ (8017500 <USBD_SetConfig+0x150>)
 8017452:	781b      	ldrb	r3, [r3, #0]
 8017454:	461a      	mov	r2, r3
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801745a:	4b29      	ldr	r3, [pc, #164]	@ (8017500 <USBD_SetConfig+0x150>)
 801745c:	781b      	ldrb	r3, [r3, #0]
 801745e:	4619      	mov	r1, r3
 8017460:	6878      	ldr	r0, [r7, #4]
 8017462:	f7fe ffd2 	bl	801640a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8017466:	6878      	ldr	r0, [r7, #4]
 8017468:	f000 fa06 	bl	8017878 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801746c:	e042      	b.n	80174f4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801746e:	4b24      	ldr	r3, [pc, #144]	@ (8017500 <USBD_SetConfig+0x150>)
 8017470:	781b      	ldrb	r3, [r3, #0]
 8017472:	461a      	mov	r2, r3
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	685b      	ldr	r3, [r3, #4]
 8017478:	429a      	cmp	r2, r3
 801747a:	d02a      	beq.n	80174d2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	685b      	ldr	r3, [r3, #4]
 8017480:	b2db      	uxtb	r3, r3
 8017482:	4619      	mov	r1, r3
 8017484:	6878      	ldr	r0, [r7, #4]
 8017486:	f7fe ffc0 	bl	801640a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801748a:	4b1d      	ldr	r3, [pc, #116]	@ (8017500 <USBD_SetConfig+0x150>)
 801748c:	781b      	ldrb	r3, [r3, #0]
 801748e:	461a      	mov	r2, r3
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017494:	4b1a      	ldr	r3, [pc, #104]	@ (8017500 <USBD_SetConfig+0x150>)
 8017496:	781b      	ldrb	r3, [r3, #0]
 8017498:	4619      	mov	r1, r3
 801749a:	6878      	ldr	r0, [r7, #4]
 801749c:	f7fe ff99 	bl	80163d2 <USBD_SetClassConfig>
 80174a0:	4603      	mov	r3, r0
 80174a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80174a4:	7bfb      	ldrb	r3, [r7, #15]
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d00f      	beq.n	80174ca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80174aa:	6839      	ldr	r1, [r7, #0]
 80174ac:	6878      	ldr	r0, [r7, #4]
 80174ae:	f000 f918 	bl	80176e2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	685b      	ldr	r3, [r3, #4]
 80174b6:	b2db      	uxtb	r3, r3
 80174b8:	4619      	mov	r1, r3
 80174ba:	6878      	ldr	r0, [r7, #4]
 80174bc:	f7fe ffa5 	bl	801640a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	2202      	movs	r2, #2
 80174c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80174c8:	e014      	b.n	80174f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80174ca:	6878      	ldr	r0, [r7, #4]
 80174cc:	f000 f9d4 	bl	8017878 <USBD_CtlSendStatus>
      break;
 80174d0:	e010      	b.n	80174f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80174d2:	6878      	ldr	r0, [r7, #4]
 80174d4:	f000 f9d0 	bl	8017878 <USBD_CtlSendStatus>
      break;
 80174d8:	e00c      	b.n	80174f4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80174da:	6839      	ldr	r1, [r7, #0]
 80174dc:	6878      	ldr	r0, [r7, #4]
 80174de:	f000 f900 	bl	80176e2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80174e2:	4b07      	ldr	r3, [pc, #28]	@ (8017500 <USBD_SetConfig+0x150>)
 80174e4:	781b      	ldrb	r3, [r3, #0]
 80174e6:	4619      	mov	r1, r3
 80174e8:	6878      	ldr	r0, [r7, #4]
 80174ea:	f7fe ff8e 	bl	801640a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80174ee:	2303      	movs	r3, #3
 80174f0:	73fb      	strb	r3, [r7, #15]
      break;
 80174f2:	bf00      	nop
  }

  return ret;
 80174f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80174f6:	4618      	mov	r0, r3
 80174f8:	3710      	adds	r7, #16
 80174fa:	46bd      	mov	sp, r7
 80174fc:	bd80      	pop	{r7, pc}
 80174fe:	bf00      	nop
 8017500:	24003ed4 	.word	0x24003ed4

08017504 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017504:	b580      	push	{r7, lr}
 8017506:	b082      	sub	sp, #8
 8017508:	af00      	add	r7, sp, #0
 801750a:	6078      	str	r0, [r7, #4]
 801750c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801750e:	683b      	ldr	r3, [r7, #0]
 8017510:	88db      	ldrh	r3, [r3, #6]
 8017512:	2b01      	cmp	r3, #1
 8017514:	d004      	beq.n	8017520 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8017516:	6839      	ldr	r1, [r7, #0]
 8017518:	6878      	ldr	r0, [r7, #4]
 801751a:	f000 f8e2 	bl	80176e2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801751e:	e023      	b.n	8017568 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017526:	b2db      	uxtb	r3, r3
 8017528:	2b02      	cmp	r3, #2
 801752a:	dc02      	bgt.n	8017532 <USBD_GetConfig+0x2e>
 801752c:	2b00      	cmp	r3, #0
 801752e:	dc03      	bgt.n	8017538 <USBD_GetConfig+0x34>
 8017530:	e015      	b.n	801755e <USBD_GetConfig+0x5a>
 8017532:	2b03      	cmp	r3, #3
 8017534:	d00b      	beq.n	801754e <USBD_GetConfig+0x4a>
 8017536:	e012      	b.n	801755e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	2200      	movs	r2, #0
 801753c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	3308      	adds	r3, #8
 8017542:	2201      	movs	r2, #1
 8017544:	4619      	mov	r1, r3
 8017546:	6878      	ldr	r0, [r7, #4]
 8017548:	f000 f93c 	bl	80177c4 <USBD_CtlSendData>
        break;
 801754c:	e00c      	b.n	8017568 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	3304      	adds	r3, #4
 8017552:	2201      	movs	r2, #1
 8017554:	4619      	mov	r1, r3
 8017556:	6878      	ldr	r0, [r7, #4]
 8017558:	f000 f934 	bl	80177c4 <USBD_CtlSendData>
        break;
 801755c:	e004      	b.n	8017568 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801755e:	6839      	ldr	r1, [r7, #0]
 8017560:	6878      	ldr	r0, [r7, #4]
 8017562:	f000 f8be 	bl	80176e2 <USBD_CtlError>
        break;
 8017566:	bf00      	nop
}
 8017568:	bf00      	nop
 801756a:	3708      	adds	r7, #8
 801756c:	46bd      	mov	sp, r7
 801756e:	bd80      	pop	{r7, pc}

08017570 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017570:	b580      	push	{r7, lr}
 8017572:	b082      	sub	sp, #8
 8017574:	af00      	add	r7, sp, #0
 8017576:	6078      	str	r0, [r7, #4]
 8017578:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017580:	b2db      	uxtb	r3, r3
 8017582:	3b01      	subs	r3, #1
 8017584:	2b02      	cmp	r3, #2
 8017586:	d81e      	bhi.n	80175c6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017588:	683b      	ldr	r3, [r7, #0]
 801758a:	88db      	ldrh	r3, [r3, #6]
 801758c:	2b02      	cmp	r3, #2
 801758e:	d004      	beq.n	801759a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017590:	6839      	ldr	r1, [r7, #0]
 8017592:	6878      	ldr	r0, [r7, #4]
 8017594:	f000 f8a5 	bl	80176e2 <USBD_CtlError>
        break;
 8017598:	e01a      	b.n	80175d0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	2201      	movs	r2, #1
 801759e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d005      	beq.n	80175b6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	68db      	ldr	r3, [r3, #12]
 80175ae:	f043 0202 	orr.w	r2, r3, #2
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	330c      	adds	r3, #12
 80175ba:	2202      	movs	r2, #2
 80175bc:	4619      	mov	r1, r3
 80175be:	6878      	ldr	r0, [r7, #4]
 80175c0:	f000 f900 	bl	80177c4 <USBD_CtlSendData>
      break;
 80175c4:	e004      	b.n	80175d0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80175c6:	6839      	ldr	r1, [r7, #0]
 80175c8:	6878      	ldr	r0, [r7, #4]
 80175ca:	f000 f88a 	bl	80176e2 <USBD_CtlError>
      break;
 80175ce:	bf00      	nop
  }
}
 80175d0:	bf00      	nop
 80175d2:	3708      	adds	r7, #8
 80175d4:	46bd      	mov	sp, r7
 80175d6:	bd80      	pop	{r7, pc}

080175d8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80175d8:	b580      	push	{r7, lr}
 80175da:	b082      	sub	sp, #8
 80175dc:	af00      	add	r7, sp, #0
 80175de:	6078      	str	r0, [r7, #4]
 80175e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80175e2:	683b      	ldr	r3, [r7, #0]
 80175e4:	885b      	ldrh	r3, [r3, #2]
 80175e6:	2b01      	cmp	r3, #1
 80175e8:	d107      	bne.n	80175fa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	2201      	movs	r2, #1
 80175ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80175f2:	6878      	ldr	r0, [r7, #4]
 80175f4:	f000 f940 	bl	8017878 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80175f8:	e013      	b.n	8017622 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80175fa:	683b      	ldr	r3, [r7, #0]
 80175fc:	885b      	ldrh	r3, [r3, #2]
 80175fe:	2b02      	cmp	r3, #2
 8017600:	d10b      	bne.n	801761a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8017602:	683b      	ldr	r3, [r7, #0]
 8017604:	889b      	ldrh	r3, [r3, #4]
 8017606:	0a1b      	lsrs	r3, r3, #8
 8017608:	b29b      	uxth	r3, r3
 801760a:	b2da      	uxtb	r2, r3
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8017612:	6878      	ldr	r0, [r7, #4]
 8017614:	f000 f930 	bl	8017878 <USBD_CtlSendStatus>
}
 8017618:	e003      	b.n	8017622 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801761a:	6839      	ldr	r1, [r7, #0]
 801761c:	6878      	ldr	r0, [r7, #4]
 801761e:	f000 f860 	bl	80176e2 <USBD_CtlError>
}
 8017622:	bf00      	nop
 8017624:	3708      	adds	r7, #8
 8017626:	46bd      	mov	sp, r7
 8017628:	bd80      	pop	{r7, pc}

0801762a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801762a:	b580      	push	{r7, lr}
 801762c:	b082      	sub	sp, #8
 801762e:	af00      	add	r7, sp, #0
 8017630:	6078      	str	r0, [r7, #4]
 8017632:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801763a:	b2db      	uxtb	r3, r3
 801763c:	3b01      	subs	r3, #1
 801763e:	2b02      	cmp	r3, #2
 8017640:	d80b      	bhi.n	801765a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017642:	683b      	ldr	r3, [r7, #0]
 8017644:	885b      	ldrh	r3, [r3, #2]
 8017646:	2b01      	cmp	r3, #1
 8017648:	d10c      	bne.n	8017664 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	2200      	movs	r2, #0
 801764e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8017652:	6878      	ldr	r0, [r7, #4]
 8017654:	f000 f910 	bl	8017878 <USBD_CtlSendStatus>
      }
      break;
 8017658:	e004      	b.n	8017664 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801765a:	6839      	ldr	r1, [r7, #0]
 801765c:	6878      	ldr	r0, [r7, #4]
 801765e:	f000 f840 	bl	80176e2 <USBD_CtlError>
      break;
 8017662:	e000      	b.n	8017666 <USBD_ClrFeature+0x3c>
      break;
 8017664:	bf00      	nop
  }
}
 8017666:	bf00      	nop
 8017668:	3708      	adds	r7, #8
 801766a:	46bd      	mov	sp, r7
 801766c:	bd80      	pop	{r7, pc}

0801766e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801766e:	b580      	push	{r7, lr}
 8017670:	b084      	sub	sp, #16
 8017672:	af00      	add	r7, sp, #0
 8017674:	6078      	str	r0, [r7, #4]
 8017676:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017678:	683b      	ldr	r3, [r7, #0]
 801767a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801767c:	68fb      	ldr	r3, [r7, #12]
 801767e:	781a      	ldrb	r2, [r3, #0]
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017684:	68fb      	ldr	r3, [r7, #12]
 8017686:	3301      	adds	r3, #1
 8017688:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801768a:	68fb      	ldr	r3, [r7, #12]
 801768c:	781a      	ldrb	r2, [r3, #0]
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8017692:	68fb      	ldr	r3, [r7, #12]
 8017694:	3301      	adds	r3, #1
 8017696:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017698:	68f8      	ldr	r0, [r7, #12]
 801769a:	f7ff fa40 	bl	8016b1e <SWAPBYTE>
 801769e:	4603      	mov	r3, r0
 80176a0:	461a      	mov	r2, r3
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80176a6:	68fb      	ldr	r3, [r7, #12]
 80176a8:	3301      	adds	r3, #1
 80176aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	3301      	adds	r3, #1
 80176b0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80176b2:	68f8      	ldr	r0, [r7, #12]
 80176b4:	f7ff fa33 	bl	8016b1e <SWAPBYTE>
 80176b8:	4603      	mov	r3, r0
 80176ba:	461a      	mov	r2, r3
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	3301      	adds	r3, #1
 80176c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80176c6:	68fb      	ldr	r3, [r7, #12]
 80176c8:	3301      	adds	r3, #1
 80176ca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80176cc:	68f8      	ldr	r0, [r7, #12]
 80176ce:	f7ff fa26 	bl	8016b1e <SWAPBYTE>
 80176d2:	4603      	mov	r3, r0
 80176d4:	461a      	mov	r2, r3
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	80da      	strh	r2, [r3, #6]
}
 80176da:	bf00      	nop
 80176dc:	3710      	adds	r7, #16
 80176de:	46bd      	mov	sp, r7
 80176e0:	bd80      	pop	{r7, pc}

080176e2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80176e2:	b580      	push	{r7, lr}
 80176e4:	b082      	sub	sp, #8
 80176e6:	af00      	add	r7, sp, #0
 80176e8:	6078      	str	r0, [r7, #4]
 80176ea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80176ec:	2180      	movs	r1, #128	@ 0x80
 80176ee:	6878      	ldr	r0, [r7, #4]
 80176f0:	f003 fcb8 	bl	801b064 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80176f4:	2100      	movs	r1, #0
 80176f6:	6878      	ldr	r0, [r7, #4]
 80176f8:	f003 fcb4 	bl	801b064 <USBD_LL_StallEP>
}
 80176fc:	bf00      	nop
 80176fe:	3708      	adds	r7, #8
 8017700:	46bd      	mov	sp, r7
 8017702:	bd80      	pop	{r7, pc}

08017704 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8017704:	b580      	push	{r7, lr}
 8017706:	b086      	sub	sp, #24
 8017708:	af00      	add	r7, sp, #0
 801770a:	60f8      	str	r0, [r7, #12]
 801770c:	60b9      	str	r1, [r7, #8]
 801770e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017710:	2300      	movs	r3, #0
 8017712:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8017714:	68fb      	ldr	r3, [r7, #12]
 8017716:	2b00      	cmp	r3, #0
 8017718:	d036      	beq.n	8017788 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801771a:	68fb      	ldr	r3, [r7, #12]
 801771c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801771e:	6938      	ldr	r0, [r7, #16]
 8017720:	f000 f836 	bl	8017790 <USBD_GetLen>
 8017724:	4603      	mov	r3, r0
 8017726:	3301      	adds	r3, #1
 8017728:	b29b      	uxth	r3, r3
 801772a:	005b      	lsls	r3, r3, #1
 801772c:	b29a      	uxth	r2, r3
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8017732:	7dfb      	ldrb	r3, [r7, #23]
 8017734:	68ba      	ldr	r2, [r7, #8]
 8017736:	4413      	add	r3, r2
 8017738:	687a      	ldr	r2, [r7, #4]
 801773a:	7812      	ldrb	r2, [r2, #0]
 801773c:	701a      	strb	r2, [r3, #0]
  idx++;
 801773e:	7dfb      	ldrb	r3, [r7, #23]
 8017740:	3301      	adds	r3, #1
 8017742:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017744:	7dfb      	ldrb	r3, [r7, #23]
 8017746:	68ba      	ldr	r2, [r7, #8]
 8017748:	4413      	add	r3, r2
 801774a:	2203      	movs	r2, #3
 801774c:	701a      	strb	r2, [r3, #0]
  idx++;
 801774e:	7dfb      	ldrb	r3, [r7, #23]
 8017750:	3301      	adds	r3, #1
 8017752:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017754:	e013      	b.n	801777e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8017756:	7dfb      	ldrb	r3, [r7, #23]
 8017758:	68ba      	ldr	r2, [r7, #8]
 801775a:	4413      	add	r3, r2
 801775c:	693a      	ldr	r2, [r7, #16]
 801775e:	7812      	ldrb	r2, [r2, #0]
 8017760:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8017762:	693b      	ldr	r3, [r7, #16]
 8017764:	3301      	adds	r3, #1
 8017766:	613b      	str	r3, [r7, #16]
    idx++;
 8017768:	7dfb      	ldrb	r3, [r7, #23]
 801776a:	3301      	adds	r3, #1
 801776c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801776e:	7dfb      	ldrb	r3, [r7, #23]
 8017770:	68ba      	ldr	r2, [r7, #8]
 8017772:	4413      	add	r3, r2
 8017774:	2200      	movs	r2, #0
 8017776:	701a      	strb	r2, [r3, #0]
    idx++;
 8017778:	7dfb      	ldrb	r3, [r7, #23]
 801777a:	3301      	adds	r3, #1
 801777c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801777e:	693b      	ldr	r3, [r7, #16]
 8017780:	781b      	ldrb	r3, [r3, #0]
 8017782:	2b00      	cmp	r3, #0
 8017784:	d1e7      	bne.n	8017756 <USBD_GetString+0x52>
 8017786:	e000      	b.n	801778a <USBD_GetString+0x86>
    return;
 8017788:	bf00      	nop
  }
}
 801778a:	3718      	adds	r7, #24
 801778c:	46bd      	mov	sp, r7
 801778e:	bd80      	pop	{r7, pc}

08017790 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017790:	b480      	push	{r7}
 8017792:	b085      	sub	sp, #20
 8017794:	af00      	add	r7, sp, #0
 8017796:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017798:	2300      	movs	r3, #0
 801779a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80177a0:	e005      	b.n	80177ae <USBD_GetLen+0x1e>
  {
    len++;
 80177a2:	7bfb      	ldrb	r3, [r7, #15]
 80177a4:	3301      	adds	r3, #1
 80177a6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80177a8:	68bb      	ldr	r3, [r7, #8]
 80177aa:	3301      	adds	r3, #1
 80177ac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80177ae:	68bb      	ldr	r3, [r7, #8]
 80177b0:	781b      	ldrb	r3, [r3, #0]
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d1f5      	bne.n	80177a2 <USBD_GetLen+0x12>
  }

  return len;
 80177b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80177b8:	4618      	mov	r0, r3
 80177ba:	3714      	adds	r7, #20
 80177bc:	46bd      	mov	sp, r7
 80177be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177c2:	4770      	bx	lr

080177c4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80177c4:	b580      	push	{r7, lr}
 80177c6:	b084      	sub	sp, #16
 80177c8:	af00      	add	r7, sp, #0
 80177ca:	60f8      	str	r0, [r7, #12]
 80177cc:	60b9      	str	r1, [r7, #8]
 80177ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80177d0:	68fb      	ldr	r3, [r7, #12]
 80177d2:	2202      	movs	r2, #2
 80177d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	687a      	ldr	r2, [r7, #4]
 80177dc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80177de:	68fb      	ldr	r3, [r7, #12]
 80177e0:	687a      	ldr	r2, [r7, #4]
 80177e2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	68ba      	ldr	r2, [r7, #8]
 80177e8:	2100      	movs	r1, #0
 80177ea:	68f8      	ldr	r0, [r7, #12]
 80177ec:	f003 fcc3 	bl	801b176 <USBD_LL_Transmit>

  return USBD_OK;
 80177f0:	2300      	movs	r3, #0
}
 80177f2:	4618      	mov	r0, r3
 80177f4:	3710      	adds	r7, #16
 80177f6:	46bd      	mov	sp, r7
 80177f8:	bd80      	pop	{r7, pc}

080177fa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80177fa:	b580      	push	{r7, lr}
 80177fc:	b084      	sub	sp, #16
 80177fe:	af00      	add	r7, sp, #0
 8017800:	60f8      	str	r0, [r7, #12]
 8017802:	60b9      	str	r1, [r7, #8]
 8017804:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	68ba      	ldr	r2, [r7, #8]
 801780a:	2100      	movs	r1, #0
 801780c:	68f8      	ldr	r0, [r7, #12]
 801780e:	f003 fcb2 	bl	801b176 <USBD_LL_Transmit>

  return USBD_OK;
 8017812:	2300      	movs	r3, #0
}
 8017814:	4618      	mov	r0, r3
 8017816:	3710      	adds	r7, #16
 8017818:	46bd      	mov	sp, r7
 801781a:	bd80      	pop	{r7, pc}

0801781c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801781c:	b580      	push	{r7, lr}
 801781e:	b084      	sub	sp, #16
 8017820:	af00      	add	r7, sp, #0
 8017822:	60f8      	str	r0, [r7, #12]
 8017824:	60b9      	str	r1, [r7, #8]
 8017826:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017828:	68fb      	ldr	r3, [r7, #12]
 801782a:	2203      	movs	r2, #3
 801782c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8017830:	68fb      	ldr	r3, [r7, #12]
 8017832:	687a      	ldr	r2, [r7, #4]
 8017834:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017838:	68fb      	ldr	r3, [r7, #12]
 801783a:	687a      	ldr	r2, [r7, #4]
 801783c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	68ba      	ldr	r2, [r7, #8]
 8017844:	2100      	movs	r1, #0
 8017846:	68f8      	ldr	r0, [r7, #12]
 8017848:	f003 fcb6 	bl	801b1b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801784c:	2300      	movs	r3, #0
}
 801784e:	4618      	mov	r0, r3
 8017850:	3710      	adds	r7, #16
 8017852:	46bd      	mov	sp, r7
 8017854:	bd80      	pop	{r7, pc}

08017856 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017856:	b580      	push	{r7, lr}
 8017858:	b084      	sub	sp, #16
 801785a:	af00      	add	r7, sp, #0
 801785c:	60f8      	str	r0, [r7, #12]
 801785e:	60b9      	str	r1, [r7, #8]
 8017860:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	68ba      	ldr	r2, [r7, #8]
 8017866:	2100      	movs	r1, #0
 8017868:	68f8      	ldr	r0, [r7, #12]
 801786a:	f003 fca5 	bl	801b1b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801786e:	2300      	movs	r3, #0
}
 8017870:	4618      	mov	r0, r3
 8017872:	3710      	adds	r7, #16
 8017874:	46bd      	mov	sp, r7
 8017876:	bd80      	pop	{r7, pc}

08017878 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017878:	b580      	push	{r7, lr}
 801787a:	b082      	sub	sp, #8
 801787c:	af00      	add	r7, sp, #0
 801787e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	2204      	movs	r2, #4
 8017884:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017888:	2300      	movs	r3, #0
 801788a:	2200      	movs	r2, #0
 801788c:	2100      	movs	r1, #0
 801788e:	6878      	ldr	r0, [r7, #4]
 8017890:	f003 fc71 	bl	801b176 <USBD_LL_Transmit>

  return USBD_OK;
 8017894:	2300      	movs	r3, #0
}
 8017896:	4618      	mov	r0, r3
 8017898:	3708      	adds	r7, #8
 801789a:	46bd      	mov	sp, r7
 801789c:	bd80      	pop	{r7, pc}

0801789e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801789e:	b580      	push	{r7, lr}
 80178a0:	b082      	sub	sp, #8
 80178a2:	af00      	add	r7, sp, #0
 80178a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	2205      	movs	r2, #5
 80178aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80178ae:	2300      	movs	r3, #0
 80178b0:	2200      	movs	r2, #0
 80178b2:	2100      	movs	r1, #0
 80178b4:	6878      	ldr	r0, [r7, #4]
 80178b6:	f003 fc7f 	bl	801b1b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80178ba:	2300      	movs	r3, #0
}
 80178bc:	4618      	mov	r0, r3
 80178be:	3708      	adds	r7, #8
 80178c0:	46bd      	mov	sp, r7
 80178c2:	bd80      	pop	{r7, pc}

080178c4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80178c4:	b580      	push	{r7, lr}
 80178c6:	b084      	sub	sp, #16
 80178c8:	af00      	add	r7, sp, #0
 80178ca:	4603      	mov	r3, r0
 80178cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80178ce:	79fb      	ldrb	r3, [r7, #7]
 80178d0:	4a08      	ldr	r2, [pc, #32]	@ (80178f4 <disk_status+0x30>)
 80178d2:	009b      	lsls	r3, r3, #2
 80178d4:	4413      	add	r3, r2
 80178d6:	685b      	ldr	r3, [r3, #4]
 80178d8:	685b      	ldr	r3, [r3, #4]
 80178da:	79fa      	ldrb	r2, [r7, #7]
 80178dc:	4905      	ldr	r1, [pc, #20]	@ (80178f4 <disk_status+0x30>)
 80178de:	440a      	add	r2, r1
 80178e0:	7a12      	ldrb	r2, [r2, #8]
 80178e2:	4610      	mov	r0, r2
 80178e4:	4798      	blx	r3
 80178e6:	4603      	mov	r3, r0
 80178e8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80178ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80178ec:	4618      	mov	r0, r3
 80178ee:	3710      	adds	r7, #16
 80178f0:	46bd      	mov	sp, r7
 80178f2:	bd80      	pop	{r7, pc}
 80178f4:	24004100 	.word	0x24004100

080178f8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80178f8:	b580      	push	{r7, lr}
 80178fa:	b084      	sub	sp, #16
 80178fc:	af00      	add	r7, sp, #0
 80178fe:	4603      	mov	r3, r0
 8017900:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8017902:	2300      	movs	r3, #0
 8017904:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8017906:	79fb      	ldrb	r3, [r7, #7]
 8017908:	4a0d      	ldr	r2, [pc, #52]	@ (8017940 <disk_initialize+0x48>)
 801790a:	5cd3      	ldrb	r3, [r2, r3]
 801790c:	2b00      	cmp	r3, #0
 801790e:	d111      	bne.n	8017934 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8017910:	79fb      	ldrb	r3, [r7, #7]
 8017912:	4a0b      	ldr	r2, [pc, #44]	@ (8017940 <disk_initialize+0x48>)
 8017914:	2101      	movs	r1, #1
 8017916:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8017918:	79fb      	ldrb	r3, [r7, #7]
 801791a:	4a09      	ldr	r2, [pc, #36]	@ (8017940 <disk_initialize+0x48>)
 801791c:	009b      	lsls	r3, r3, #2
 801791e:	4413      	add	r3, r2
 8017920:	685b      	ldr	r3, [r3, #4]
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	79fa      	ldrb	r2, [r7, #7]
 8017926:	4906      	ldr	r1, [pc, #24]	@ (8017940 <disk_initialize+0x48>)
 8017928:	440a      	add	r2, r1
 801792a:	7a12      	ldrb	r2, [r2, #8]
 801792c:	4610      	mov	r0, r2
 801792e:	4798      	blx	r3
 8017930:	4603      	mov	r3, r0
 8017932:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8017934:	7bfb      	ldrb	r3, [r7, #15]
}
 8017936:	4618      	mov	r0, r3
 8017938:	3710      	adds	r7, #16
 801793a:	46bd      	mov	sp, r7
 801793c:	bd80      	pop	{r7, pc}
 801793e:	bf00      	nop
 8017940:	24004100 	.word	0x24004100

08017944 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8017944:	b590      	push	{r4, r7, lr}
 8017946:	b087      	sub	sp, #28
 8017948:	af00      	add	r7, sp, #0
 801794a:	60b9      	str	r1, [r7, #8]
 801794c:	607a      	str	r2, [r7, #4]
 801794e:	603b      	str	r3, [r7, #0]
 8017950:	4603      	mov	r3, r0
 8017952:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8017954:	7bfb      	ldrb	r3, [r7, #15]
 8017956:	4a0a      	ldr	r2, [pc, #40]	@ (8017980 <disk_read+0x3c>)
 8017958:	009b      	lsls	r3, r3, #2
 801795a:	4413      	add	r3, r2
 801795c:	685b      	ldr	r3, [r3, #4]
 801795e:	689c      	ldr	r4, [r3, #8]
 8017960:	7bfb      	ldrb	r3, [r7, #15]
 8017962:	4a07      	ldr	r2, [pc, #28]	@ (8017980 <disk_read+0x3c>)
 8017964:	4413      	add	r3, r2
 8017966:	7a18      	ldrb	r0, [r3, #8]
 8017968:	683b      	ldr	r3, [r7, #0]
 801796a:	687a      	ldr	r2, [r7, #4]
 801796c:	68b9      	ldr	r1, [r7, #8]
 801796e:	47a0      	blx	r4
 8017970:	4603      	mov	r3, r0
 8017972:	75fb      	strb	r3, [r7, #23]
  return res;
 8017974:	7dfb      	ldrb	r3, [r7, #23]
}
 8017976:	4618      	mov	r0, r3
 8017978:	371c      	adds	r7, #28
 801797a:	46bd      	mov	sp, r7
 801797c:	bd90      	pop	{r4, r7, pc}
 801797e:	bf00      	nop
 8017980:	24004100 	.word	0x24004100

08017984 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8017984:	b590      	push	{r4, r7, lr}
 8017986:	b087      	sub	sp, #28
 8017988:	af00      	add	r7, sp, #0
 801798a:	60b9      	str	r1, [r7, #8]
 801798c:	607a      	str	r2, [r7, #4]
 801798e:	603b      	str	r3, [r7, #0]
 8017990:	4603      	mov	r3, r0
 8017992:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8017994:	7bfb      	ldrb	r3, [r7, #15]
 8017996:	4a0a      	ldr	r2, [pc, #40]	@ (80179c0 <disk_write+0x3c>)
 8017998:	009b      	lsls	r3, r3, #2
 801799a:	4413      	add	r3, r2
 801799c:	685b      	ldr	r3, [r3, #4]
 801799e:	68dc      	ldr	r4, [r3, #12]
 80179a0:	7bfb      	ldrb	r3, [r7, #15]
 80179a2:	4a07      	ldr	r2, [pc, #28]	@ (80179c0 <disk_write+0x3c>)
 80179a4:	4413      	add	r3, r2
 80179a6:	7a18      	ldrb	r0, [r3, #8]
 80179a8:	683b      	ldr	r3, [r7, #0]
 80179aa:	687a      	ldr	r2, [r7, #4]
 80179ac:	68b9      	ldr	r1, [r7, #8]
 80179ae:	47a0      	blx	r4
 80179b0:	4603      	mov	r3, r0
 80179b2:	75fb      	strb	r3, [r7, #23]
  return res;
 80179b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80179b6:	4618      	mov	r0, r3
 80179b8:	371c      	adds	r7, #28
 80179ba:	46bd      	mov	sp, r7
 80179bc:	bd90      	pop	{r4, r7, pc}
 80179be:	bf00      	nop
 80179c0:	24004100 	.word	0x24004100

080179c4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80179c4:	b580      	push	{r7, lr}
 80179c6:	b084      	sub	sp, #16
 80179c8:	af00      	add	r7, sp, #0
 80179ca:	4603      	mov	r3, r0
 80179cc:	603a      	str	r2, [r7, #0]
 80179ce:	71fb      	strb	r3, [r7, #7]
 80179d0:	460b      	mov	r3, r1
 80179d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80179d4:	79fb      	ldrb	r3, [r7, #7]
 80179d6:	4a09      	ldr	r2, [pc, #36]	@ (80179fc <disk_ioctl+0x38>)
 80179d8:	009b      	lsls	r3, r3, #2
 80179da:	4413      	add	r3, r2
 80179dc:	685b      	ldr	r3, [r3, #4]
 80179de:	691b      	ldr	r3, [r3, #16]
 80179e0:	79fa      	ldrb	r2, [r7, #7]
 80179e2:	4906      	ldr	r1, [pc, #24]	@ (80179fc <disk_ioctl+0x38>)
 80179e4:	440a      	add	r2, r1
 80179e6:	7a10      	ldrb	r0, [r2, #8]
 80179e8:	79b9      	ldrb	r1, [r7, #6]
 80179ea:	683a      	ldr	r2, [r7, #0]
 80179ec:	4798      	blx	r3
 80179ee:	4603      	mov	r3, r0
 80179f0:	73fb      	strb	r3, [r7, #15]
  return res;
 80179f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80179f4:	4618      	mov	r0, r3
 80179f6:	3710      	adds	r7, #16
 80179f8:	46bd      	mov	sp, r7
 80179fa:	bd80      	pop	{r7, pc}
 80179fc:	24004100 	.word	0x24004100

08017a00 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8017a00:	b480      	push	{r7}
 8017a02:	b085      	sub	sp, #20
 8017a04:	af00      	add	r7, sp, #0
 8017a06:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	3301      	adds	r3, #1
 8017a0c:	781b      	ldrb	r3, [r3, #0]
 8017a0e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8017a10:	89fb      	ldrh	r3, [r7, #14]
 8017a12:	021b      	lsls	r3, r3, #8
 8017a14:	b21a      	sxth	r2, r3
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	781b      	ldrb	r3, [r3, #0]
 8017a1a:	b21b      	sxth	r3, r3
 8017a1c:	4313      	orrs	r3, r2
 8017a1e:	b21b      	sxth	r3, r3
 8017a20:	81fb      	strh	r3, [r7, #14]
	return rv;
 8017a22:	89fb      	ldrh	r3, [r7, #14]
}
 8017a24:	4618      	mov	r0, r3
 8017a26:	3714      	adds	r7, #20
 8017a28:	46bd      	mov	sp, r7
 8017a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a2e:	4770      	bx	lr

08017a30 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8017a30:	b480      	push	{r7}
 8017a32:	b085      	sub	sp, #20
 8017a34:	af00      	add	r7, sp, #0
 8017a36:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	3303      	adds	r3, #3
 8017a3c:	781b      	ldrb	r3, [r3, #0]
 8017a3e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	021b      	lsls	r3, r3, #8
 8017a44:	687a      	ldr	r2, [r7, #4]
 8017a46:	3202      	adds	r2, #2
 8017a48:	7812      	ldrb	r2, [r2, #0]
 8017a4a:	4313      	orrs	r3, r2
 8017a4c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8017a4e:	68fb      	ldr	r3, [r7, #12]
 8017a50:	021b      	lsls	r3, r3, #8
 8017a52:	687a      	ldr	r2, [r7, #4]
 8017a54:	3201      	adds	r2, #1
 8017a56:	7812      	ldrb	r2, [r2, #0]
 8017a58:	4313      	orrs	r3, r2
 8017a5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	021b      	lsls	r3, r3, #8
 8017a60:	687a      	ldr	r2, [r7, #4]
 8017a62:	7812      	ldrb	r2, [r2, #0]
 8017a64:	4313      	orrs	r3, r2
 8017a66:	60fb      	str	r3, [r7, #12]
	return rv;
 8017a68:	68fb      	ldr	r3, [r7, #12]
}
 8017a6a:	4618      	mov	r0, r3
 8017a6c:	3714      	adds	r7, #20
 8017a6e:	46bd      	mov	sp, r7
 8017a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a74:	4770      	bx	lr

08017a76 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8017a76:	b480      	push	{r7}
 8017a78:	b083      	sub	sp, #12
 8017a7a:	af00      	add	r7, sp, #0
 8017a7c:	6078      	str	r0, [r7, #4]
 8017a7e:	460b      	mov	r3, r1
 8017a80:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	1c5a      	adds	r2, r3, #1
 8017a86:	607a      	str	r2, [r7, #4]
 8017a88:	887a      	ldrh	r2, [r7, #2]
 8017a8a:	b2d2      	uxtb	r2, r2
 8017a8c:	701a      	strb	r2, [r3, #0]
 8017a8e:	887b      	ldrh	r3, [r7, #2]
 8017a90:	0a1b      	lsrs	r3, r3, #8
 8017a92:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	1c5a      	adds	r2, r3, #1
 8017a98:	607a      	str	r2, [r7, #4]
 8017a9a:	887a      	ldrh	r2, [r7, #2]
 8017a9c:	b2d2      	uxtb	r2, r2
 8017a9e:	701a      	strb	r2, [r3, #0]
}
 8017aa0:	bf00      	nop
 8017aa2:	370c      	adds	r7, #12
 8017aa4:	46bd      	mov	sp, r7
 8017aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aaa:	4770      	bx	lr

08017aac <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8017aac:	b480      	push	{r7}
 8017aae:	b083      	sub	sp, #12
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	6078      	str	r0, [r7, #4]
 8017ab4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	1c5a      	adds	r2, r3, #1
 8017aba:	607a      	str	r2, [r7, #4]
 8017abc:	683a      	ldr	r2, [r7, #0]
 8017abe:	b2d2      	uxtb	r2, r2
 8017ac0:	701a      	strb	r2, [r3, #0]
 8017ac2:	683b      	ldr	r3, [r7, #0]
 8017ac4:	0a1b      	lsrs	r3, r3, #8
 8017ac6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	1c5a      	adds	r2, r3, #1
 8017acc:	607a      	str	r2, [r7, #4]
 8017ace:	683a      	ldr	r2, [r7, #0]
 8017ad0:	b2d2      	uxtb	r2, r2
 8017ad2:	701a      	strb	r2, [r3, #0]
 8017ad4:	683b      	ldr	r3, [r7, #0]
 8017ad6:	0a1b      	lsrs	r3, r3, #8
 8017ad8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	1c5a      	adds	r2, r3, #1
 8017ade:	607a      	str	r2, [r7, #4]
 8017ae0:	683a      	ldr	r2, [r7, #0]
 8017ae2:	b2d2      	uxtb	r2, r2
 8017ae4:	701a      	strb	r2, [r3, #0]
 8017ae6:	683b      	ldr	r3, [r7, #0]
 8017ae8:	0a1b      	lsrs	r3, r3, #8
 8017aea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	1c5a      	adds	r2, r3, #1
 8017af0:	607a      	str	r2, [r7, #4]
 8017af2:	683a      	ldr	r2, [r7, #0]
 8017af4:	b2d2      	uxtb	r2, r2
 8017af6:	701a      	strb	r2, [r3, #0]
}
 8017af8:	bf00      	nop
 8017afa:	370c      	adds	r7, #12
 8017afc:	46bd      	mov	sp, r7
 8017afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b02:	4770      	bx	lr

08017b04 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8017b04:	b480      	push	{r7}
 8017b06:	b087      	sub	sp, #28
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	60f8      	str	r0, [r7, #12]
 8017b0c:	60b9      	str	r1, [r7, #8]
 8017b0e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8017b14:	68bb      	ldr	r3, [r7, #8]
 8017b16:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d00d      	beq.n	8017b3a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8017b1e:	693a      	ldr	r2, [r7, #16]
 8017b20:	1c53      	adds	r3, r2, #1
 8017b22:	613b      	str	r3, [r7, #16]
 8017b24:	697b      	ldr	r3, [r7, #20]
 8017b26:	1c59      	adds	r1, r3, #1
 8017b28:	6179      	str	r1, [r7, #20]
 8017b2a:	7812      	ldrb	r2, [r2, #0]
 8017b2c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	3b01      	subs	r3, #1
 8017b32:	607b      	str	r3, [r7, #4]
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d1f1      	bne.n	8017b1e <mem_cpy+0x1a>
	}
}
 8017b3a:	bf00      	nop
 8017b3c:	371c      	adds	r7, #28
 8017b3e:	46bd      	mov	sp, r7
 8017b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b44:	4770      	bx	lr

08017b46 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8017b46:	b480      	push	{r7}
 8017b48:	b087      	sub	sp, #28
 8017b4a:	af00      	add	r7, sp, #0
 8017b4c:	60f8      	str	r0, [r7, #12]
 8017b4e:	60b9      	str	r1, [r7, #8]
 8017b50:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8017b52:	68fb      	ldr	r3, [r7, #12]
 8017b54:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8017b56:	697b      	ldr	r3, [r7, #20]
 8017b58:	1c5a      	adds	r2, r3, #1
 8017b5a:	617a      	str	r2, [r7, #20]
 8017b5c:	68ba      	ldr	r2, [r7, #8]
 8017b5e:	b2d2      	uxtb	r2, r2
 8017b60:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	3b01      	subs	r3, #1
 8017b66:	607b      	str	r3, [r7, #4]
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d1f3      	bne.n	8017b56 <mem_set+0x10>
}
 8017b6e:	bf00      	nop
 8017b70:	bf00      	nop
 8017b72:	371c      	adds	r7, #28
 8017b74:	46bd      	mov	sp, r7
 8017b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b7a:	4770      	bx	lr

08017b7c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8017b7c:	b480      	push	{r7}
 8017b7e:	b089      	sub	sp, #36	@ 0x24
 8017b80:	af00      	add	r7, sp, #0
 8017b82:	60f8      	str	r0, [r7, #12]
 8017b84:	60b9      	str	r1, [r7, #8]
 8017b86:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8017b88:	68fb      	ldr	r3, [r7, #12]
 8017b8a:	61fb      	str	r3, [r7, #28]
 8017b8c:	68bb      	ldr	r3, [r7, #8]
 8017b8e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8017b90:	2300      	movs	r3, #0
 8017b92:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8017b94:	69fb      	ldr	r3, [r7, #28]
 8017b96:	1c5a      	adds	r2, r3, #1
 8017b98:	61fa      	str	r2, [r7, #28]
 8017b9a:	781b      	ldrb	r3, [r3, #0]
 8017b9c:	4619      	mov	r1, r3
 8017b9e:	69bb      	ldr	r3, [r7, #24]
 8017ba0:	1c5a      	adds	r2, r3, #1
 8017ba2:	61ba      	str	r2, [r7, #24]
 8017ba4:	781b      	ldrb	r3, [r3, #0]
 8017ba6:	1acb      	subs	r3, r1, r3
 8017ba8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	3b01      	subs	r3, #1
 8017bae:	607b      	str	r3, [r7, #4]
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d002      	beq.n	8017bbc <mem_cmp+0x40>
 8017bb6:	697b      	ldr	r3, [r7, #20]
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d0eb      	beq.n	8017b94 <mem_cmp+0x18>

	return r;
 8017bbc:	697b      	ldr	r3, [r7, #20]
}
 8017bbe:	4618      	mov	r0, r3
 8017bc0:	3724      	adds	r7, #36	@ 0x24
 8017bc2:	46bd      	mov	sp, r7
 8017bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bc8:	4770      	bx	lr

08017bca <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8017bca:	b480      	push	{r7}
 8017bcc:	b083      	sub	sp, #12
 8017bce:	af00      	add	r7, sp, #0
 8017bd0:	6078      	str	r0, [r7, #4]
 8017bd2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8017bd4:	e002      	b.n	8017bdc <chk_chr+0x12>
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	3301      	adds	r3, #1
 8017bda:	607b      	str	r3, [r7, #4]
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	781b      	ldrb	r3, [r3, #0]
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d005      	beq.n	8017bf0 <chk_chr+0x26>
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	781b      	ldrb	r3, [r3, #0]
 8017be8:	461a      	mov	r2, r3
 8017bea:	683b      	ldr	r3, [r7, #0]
 8017bec:	4293      	cmp	r3, r2
 8017bee:	d1f2      	bne.n	8017bd6 <chk_chr+0xc>
	return *str;
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	781b      	ldrb	r3, [r3, #0]
}
 8017bf4:	4618      	mov	r0, r3
 8017bf6:	370c      	adds	r7, #12
 8017bf8:	46bd      	mov	sp, r7
 8017bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bfe:	4770      	bx	lr

08017c00 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8017c00:	b480      	push	{r7}
 8017c02:	b085      	sub	sp, #20
 8017c04:	af00      	add	r7, sp, #0
 8017c06:	6078      	str	r0, [r7, #4]
 8017c08:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8017c0a:	2300      	movs	r3, #0
 8017c0c:	60bb      	str	r3, [r7, #8]
 8017c0e:	68bb      	ldr	r3, [r7, #8]
 8017c10:	60fb      	str	r3, [r7, #12]
 8017c12:	e029      	b.n	8017c68 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8017c14:	4a27      	ldr	r2, [pc, #156]	@ (8017cb4 <chk_lock+0xb4>)
 8017c16:	68fb      	ldr	r3, [r7, #12]
 8017c18:	011b      	lsls	r3, r3, #4
 8017c1a:	4413      	add	r3, r2
 8017c1c:	681b      	ldr	r3, [r3, #0]
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d01d      	beq.n	8017c5e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017c22:	4a24      	ldr	r2, [pc, #144]	@ (8017cb4 <chk_lock+0xb4>)
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	011b      	lsls	r3, r3, #4
 8017c28:	4413      	add	r3, r2
 8017c2a:	681a      	ldr	r2, [r3, #0]
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	429a      	cmp	r2, r3
 8017c32:	d116      	bne.n	8017c62 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8017c34:	4a1f      	ldr	r2, [pc, #124]	@ (8017cb4 <chk_lock+0xb4>)
 8017c36:	68fb      	ldr	r3, [r7, #12]
 8017c38:	011b      	lsls	r3, r3, #4
 8017c3a:	4413      	add	r3, r2
 8017c3c:	3304      	adds	r3, #4
 8017c3e:	681a      	ldr	r2, [r3, #0]
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017c44:	429a      	cmp	r2, r3
 8017c46:	d10c      	bne.n	8017c62 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017c48:	4a1a      	ldr	r2, [pc, #104]	@ (8017cb4 <chk_lock+0xb4>)
 8017c4a:	68fb      	ldr	r3, [r7, #12]
 8017c4c:	011b      	lsls	r3, r3, #4
 8017c4e:	4413      	add	r3, r2
 8017c50:	3308      	adds	r3, #8
 8017c52:	681a      	ldr	r2, [r3, #0]
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8017c58:	429a      	cmp	r2, r3
 8017c5a:	d102      	bne.n	8017c62 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017c5c:	e007      	b.n	8017c6e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8017c5e:	2301      	movs	r3, #1
 8017c60:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8017c62:	68fb      	ldr	r3, [r7, #12]
 8017c64:	3301      	adds	r3, #1
 8017c66:	60fb      	str	r3, [r7, #12]
 8017c68:	68fb      	ldr	r3, [r7, #12]
 8017c6a:	2b01      	cmp	r3, #1
 8017c6c:	d9d2      	bls.n	8017c14 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8017c6e:	68fb      	ldr	r3, [r7, #12]
 8017c70:	2b02      	cmp	r3, #2
 8017c72:	d109      	bne.n	8017c88 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8017c74:	68bb      	ldr	r3, [r7, #8]
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	d102      	bne.n	8017c80 <chk_lock+0x80>
 8017c7a:	683b      	ldr	r3, [r7, #0]
 8017c7c:	2b02      	cmp	r3, #2
 8017c7e:	d101      	bne.n	8017c84 <chk_lock+0x84>
 8017c80:	2300      	movs	r3, #0
 8017c82:	e010      	b.n	8017ca6 <chk_lock+0xa6>
 8017c84:	2312      	movs	r3, #18
 8017c86:	e00e      	b.n	8017ca6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8017c88:	683b      	ldr	r3, [r7, #0]
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d108      	bne.n	8017ca0 <chk_lock+0xa0>
 8017c8e:	4a09      	ldr	r2, [pc, #36]	@ (8017cb4 <chk_lock+0xb4>)
 8017c90:	68fb      	ldr	r3, [r7, #12]
 8017c92:	011b      	lsls	r3, r3, #4
 8017c94:	4413      	add	r3, r2
 8017c96:	330c      	adds	r3, #12
 8017c98:	881b      	ldrh	r3, [r3, #0]
 8017c9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017c9e:	d101      	bne.n	8017ca4 <chk_lock+0xa4>
 8017ca0:	2310      	movs	r3, #16
 8017ca2:	e000      	b.n	8017ca6 <chk_lock+0xa6>
 8017ca4:	2300      	movs	r3, #0
}
 8017ca6:	4618      	mov	r0, r3
 8017ca8:	3714      	adds	r7, #20
 8017caa:	46bd      	mov	sp, r7
 8017cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cb0:	4770      	bx	lr
 8017cb2:	bf00      	nop
 8017cb4:	24003ee0 	.word	0x24003ee0

08017cb8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8017cb8:	b480      	push	{r7}
 8017cba:	b083      	sub	sp, #12
 8017cbc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017cbe:	2300      	movs	r3, #0
 8017cc0:	607b      	str	r3, [r7, #4]
 8017cc2:	e002      	b.n	8017cca <enq_lock+0x12>
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	3301      	adds	r3, #1
 8017cc8:	607b      	str	r3, [r7, #4]
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	2b01      	cmp	r3, #1
 8017cce:	d806      	bhi.n	8017cde <enq_lock+0x26>
 8017cd0:	4a09      	ldr	r2, [pc, #36]	@ (8017cf8 <enq_lock+0x40>)
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	011b      	lsls	r3, r3, #4
 8017cd6:	4413      	add	r3, r2
 8017cd8:	681b      	ldr	r3, [r3, #0]
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d1f2      	bne.n	8017cc4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	2b02      	cmp	r3, #2
 8017ce2:	bf14      	ite	ne
 8017ce4:	2301      	movne	r3, #1
 8017ce6:	2300      	moveq	r3, #0
 8017ce8:	b2db      	uxtb	r3, r3
}
 8017cea:	4618      	mov	r0, r3
 8017cec:	370c      	adds	r7, #12
 8017cee:	46bd      	mov	sp, r7
 8017cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cf4:	4770      	bx	lr
 8017cf6:	bf00      	nop
 8017cf8:	24003ee0 	.word	0x24003ee0

08017cfc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8017cfc:	b480      	push	{r7}
 8017cfe:	b085      	sub	sp, #20
 8017d00:	af00      	add	r7, sp, #0
 8017d02:	6078      	str	r0, [r7, #4]
 8017d04:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017d06:	2300      	movs	r3, #0
 8017d08:	60fb      	str	r3, [r7, #12]
 8017d0a:	e01f      	b.n	8017d4c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8017d0c:	4a41      	ldr	r2, [pc, #260]	@ (8017e14 <inc_lock+0x118>)
 8017d0e:	68fb      	ldr	r3, [r7, #12]
 8017d10:	011b      	lsls	r3, r3, #4
 8017d12:	4413      	add	r3, r2
 8017d14:	681a      	ldr	r2, [r3, #0]
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	681b      	ldr	r3, [r3, #0]
 8017d1a:	429a      	cmp	r2, r3
 8017d1c:	d113      	bne.n	8017d46 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8017d1e:	4a3d      	ldr	r2, [pc, #244]	@ (8017e14 <inc_lock+0x118>)
 8017d20:	68fb      	ldr	r3, [r7, #12]
 8017d22:	011b      	lsls	r3, r3, #4
 8017d24:	4413      	add	r3, r2
 8017d26:	3304      	adds	r3, #4
 8017d28:	681a      	ldr	r2, [r3, #0]
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8017d2e:	429a      	cmp	r2, r3
 8017d30:	d109      	bne.n	8017d46 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8017d32:	4a38      	ldr	r2, [pc, #224]	@ (8017e14 <inc_lock+0x118>)
 8017d34:	68fb      	ldr	r3, [r7, #12]
 8017d36:	011b      	lsls	r3, r3, #4
 8017d38:	4413      	add	r3, r2
 8017d3a:	3308      	adds	r3, #8
 8017d3c:	681a      	ldr	r2, [r3, #0]
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8017d42:	429a      	cmp	r2, r3
 8017d44:	d006      	beq.n	8017d54 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017d46:	68fb      	ldr	r3, [r7, #12]
 8017d48:	3301      	adds	r3, #1
 8017d4a:	60fb      	str	r3, [r7, #12]
 8017d4c:	68fb      	ldr	r3, [r7, #12]
 8017d4e:	2b01      	cmp	r3, #1
 8017d50:	d9dc      	bls.n	8017d0c <inc_lock+0x10>
 8017d52:	e000      	b.n	8017d56 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8017d54:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8017d56:	68fb      	ldr	r3, [r7, #12]
 8017d58:	2b02      	cmp	r3, #2
 8017d5a:	d132      	bne.n	8017dc2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017d5c:	2300      	movs	r3, #0
 8017d5e:	60fb      	str	r3, [r7, #12]
 8017d60:	e002      	b.n	8017d68 <inc_lock+0x6c>
 8017d62:	68fb      	ldr	r3, [r7, #12]
 8017d64:	3301      	adds	r3, #1
 8017d66:	60fb      	str	r3, [r7, #12]
 8017d68:	68fb      	ldr	r3, [r7, #12]
 8017d6a:	2b01      	cmp	r3, #1
 8017d6c:	d806      	bhi.n	8017d7c <inc_lock+0x80>
 8017d6e:	4a29      	ldr	r2, [pc, #164]	@ (8017e14 <inc_lock+0x118>)
 8017d70:	68fb      	ldr	r3, [r7, #12]
 8017d72:	011b      	lsls	r3, r3, #4
 8017d74:	4413      	add	r3, r2
 8017d76:	681b      	ldr	r3, [r3, #0]
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d1f2      	bne.n	8017d62 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8017d7c:	68fb      	ldr	r3, [r7, #12]
 8017d7e:	2b02      	cmp	r3, #2
 8017d80:	d101      	bne.n	8017d86 <inc_lock+0x8a>
 8017d82:	2300      	movs	r3, #0
 8017d84:	e040      	b.n	8017e08 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	681a      	ldr	r2, [r3, #0]
 8017d8a:	4922      	ldr	r1, [pc, #136]	@ (8017e14 <inc_lock+0x118>)
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	011b      	lsls	r3, r3, #4
 8017d90:	440b      	add	r3, r1
 8017d92:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	689a      	ldr	r2, [r3, #8]
 8017d98:	491e      	ldr	r1, [pc, #120]	@ (8017e14 <inc_lock+0x118>)
 8017d9a:	68fb      	ldr	r3, [r7, #12]
 8017d9c:	011b      	lsls	r3, r3, #4
 8017d9e:	440b      	add	r3, r1
 8017da0:	3304      	adds	r3, #4
 8017da2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	695a      	ldr	r2, [r3, #20]
 8017da8:	491a      	ldr	r1, [pc, #104]	@ (8017e14 <inc_lock+0x118>)
 8017daa:	68fb      	ldr	r3, [r7, #12]
 8017dac:	011b      	lsls	r3, r3, #4
 8017dae:	440b      	add	r3, r1
 8017db0:	3308      	adds	r3, #8
 8017db2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8017db4:	4a17      	ldr	r2, [pc, #92]	@ (8017e14 <inc_lock+0x118>)
 8017db6:	68fb      	ldr	r3, [r7, #12]
 8017db8:	011b      	lsls	r3, r3, #4
 8017dba:	4413      	add	r3, r2
 8017dbc:	330c      	adds	r3, #12
 8017dbe:	2200      	movs	r2, #0
 8017dc0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8017dc2:	683b      	ldr	r3, [r7, #0]
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d009      	beq.n	8017ddc <inc_lock+0xe0>
 8017dc8:	4a12      	ldr	r2, [pc, #72]	@ (8017e14 <inc_lock+0x118>)
 8017dca:	68fb      	ldr	r3, [r7, #12]
 8017dcc:	011b      	lsls	r3, r3, #4
 8017dce:	4413      	add	r3, r2
 8017dd0:	330c      	adds	r3, #12
 8017dd2:	881b      	ldrh	r3, [r3, #0]
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d001      	beq.n	8017ddc <inc_lock+0xe0>
 8017dd8:	2300      	movs	r3, #0
 8017dda:	e015      	b.n	8017e08 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8017ddc:	683b      	ldr	r3, [r7, #0]
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d108      	bne.n	8017df4 <inc_lock+0xf8>
 8017de2:	4a0c      	ldr	r2, [pc, #48]	@ (8017e14 <inc_lock+0x118>)
 8017de4:	68fb      	ldr	r3, [r7, #12]
 8017de6:	011b      	lsls	r3, r3, #4
 8017de8:	4413      	add	r3, r2
 8017dea:	330c      	adds	r3, #12
 8017dec:	881b      	ldrh	r3, [r3, #0]
 8017dee:	3301      	adds	r3, #1
 8017df0:	b29a      	uxth	r2, r3
 8017df2:	e001      	b.n	8017df8 <inc_lock+0xfc>
 8017df4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8017df8:	4906      	ldr	r1, [pc, #24]	@ (8017e14 <inc_lock+0x118>)
 8017dfa:	68fb      	ldr	r3, [r7, #12]
 8017dfc:	011b      	lsls	r3, r3, #4
 8017dfe:	440b      	add	r3, r1
 8017e00:	330c      	adds	r3, #12
 8017e02:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8017e04:	68fb      	ldr	r3, [r7, #12]
 8017e06:	3301      	adds	r3, #1
}
 8017e08:	4618      	mov	r0, r3
 8017e0a:	3714      	adds	r7, #20
 8017e0c:	46bd      	mov	sp, r7
 8017e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e12:	4770      	bx	lr
 8017e14:	24003ee0 	.word	0x24003ee0

08017e18 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8017e18:	b480      	push	{r7}
 8017e1a:	b085      	sub	sp, #20
 8017e1c:	af00      	add	r7, sp, #0
 8017e1e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	3b01      	subs	r3, #1
 8017e24:	607b      	str	r3, [r7, #4]
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	2b01      	cmp	r3, #1
 8017e2a:	d825      	bhi.n	8017e78 <dec_lock+0x60>
		n = Files[i].ctr;
 8017e2c:	4a17      	ldr	r2, [pc, #92]	@ (8017e8c <dec_lock+0x74>)
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	011b      	lsls	r3, r3, #4
 8017e32:	4413      	add	r3, r2
 8017e34:	330c      	adds	r3, #12
 8017e36:	881b      	ldrh	r3, [r3, #0]
 8017e38:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8017e3a:	89fb      	ldrh	r3, [r7, #14]
 8017e3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017e40:	d101      	bne.n	8017e46 <dec_lock+0x2e>
 8017e42:	2300      	movs	r3, #0
 8017e44:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8017e46:	89fb      	ldrh	r3, [r7, #14]
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	d002      	beq.n	8017e52 <dec_lock+0x3a>
 8017e4c:	89fb      	ldrh	r3, [r7, #14]
 8017e4e:	3b01      	subs	r3, #1
 8017e50:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8017e52:	4a0e      	ldr	r2, [pc, #56]	@ (8017e8c <dec_lock+0x74>)
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	011b      	lsls	r3, r3, #4
 8017e58:	4413      	add	r3, r2
 8017e5a:	330c      	adds	r3, #12
 8017e5c:	89fa      	ldrh	r2, [r7, #14]
 8017e5e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8017e60:	89fb      	ldrh	r3, [r7, #14]
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d105      	bne.n	8017e72 <dec_lock+0x5a>
 8017e66:	4a09      	ldr	r2, [pc, #36]	@ (8017e8c <dec_lock+0x74>)
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	011b      	lsls	r3, r3, #4
 8017e6c:	4413      	add	r3, r2
 8017e6e:	2200      	movs	r2, #0
 8017e70:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8017e72:	2300      	movs	r3, #0
 8017e74:	737b      	strb	r3, [r7, #13]
 8017e76:	e001      	b.n	8017e7c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8017e78:	2302      	movs	r3, #2
 8017e7a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8017e7c:	7b7b      	ldrb	r3, [r7, #13]
}
 8017e7e:	4618      	mov	r0, r3
 8017e80:	3714      	adds	r7, #20
 8017e82:	46bd      	mov	sp, r7
 8017e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e88:	4770      	bx	lr
 8017e8a:	bf00      	nop
 8017e8c:	24003ee0 	.word	0x24003ee0

08017e90 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8017e90:	b480      	push	{r7}
 8017e92:	b085      	sub	sp, #20
 8017e94:	af00      	add	r7, sp, #0
 8017e96:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8017e98:	2300      	movs	r3, #0
 8017e9a:	60fb      	str	r3, [r7, #12]
 8017e9c:	e010      	b.n	8017ec0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8017e9e:	4a0d      	ldr	r2, [pc, #52]	@ (8017ed4 <clear_lock+0x44>)
 8017ea0:	68fb      	ldr	r3, [r7, #12]
 8017ea2:	011b      	lsls	r3, r3, #4
 8017ea4:	4413      	add	r3, r2
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	687a      	ldr	r2, [r7, #4]
 8017eaa:	429a      	cmp	r2, r3
 8017eac:	d105      	bne.n	8017eba <clear_lock+0x2a>
 8017eae:	4a09      	ldr	r2, [pc, #36]	@ (8017ed4 <clear_lock+0x44>)
 8017eb0:	68fb      	ldr	r3, [r7, #12]
 8017eb2:	011b      	lsls	r3, r3, #4
 8017eb4:	4413      	add	r3, r2
 8017eb6:	2200      	movs	r2, #0
 8017eb8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8017eba:	68fb      	ldr	r3, [r7, #12]
 8017ebc:	3301      	adds	r3, #1
 8017ebe:	60fb      	str	r3, [r7, #12]
 8017ec0:	68fb      	ldr	r3, [r7, #12]
 8017ec2:	2b01      	cmp	r3, #1
 8017ec4:	d9eb      	bls.n	8017e9e <clear_lock+0xe>
	}
}
 8017ec6:	bf00      	nop
 8017ec8:	bf00      	nop
 8017eca:	3714      	adds	r7, #20
 8017ecc:	46bd      	mov	sp, r7
 8017ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ed2:	4770      	bx	lr
 8017ed4:	24003ee0 	.word	0x24003ee0

08017ed8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8017ed8:	b580      	push	{r7, lr}
 8017eda:	b086      	sub	sp, #24
 8017edc:	af00      	add	r7, sp, #0
 8017ede:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8017ee0:	2300      	movs	r3, #0
 8017ee2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	78db      	ldrb	r3, [r3, #3]
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d034      	beq.n	8017f56 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017ef0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	7858      	ldrb	r0, [r3, #1]
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8017efc:	2301      	movs	r3, #1
 8017efe:	697a      	ldr	r2, [r7, #20]
 8017f00:	f7ff fd40 	bl	8017984 <disk_write>
 8017f04:	4603      	mov	r3, r0
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d002      	beq.n	8017f10 <sync_window+0x38>
			res = FR_DISK_ERR;
 8017f0a:	2301      	movs	r3, #1
 8017f0c:	73fb      	strb	r3, [r7, #15]
 8017f0e:	e022      	b.n	8017f56 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	2200      	movs	r2, #0
 8017f14:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017f1a:	697a      	ldr	r2, [r7, #20]
 8017f1c:	1ad2      	subs	r2, r2, r3
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	6a1b      	ldr	r3, [r3, #32]
 8017f22:	429a      	cmp	r2, r3
 8017f24:	d217      	bcs.n	8017f56 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	789b      	ldrb	r3, [r3, #2]
 8017f2a:	613b      	str	r3, [r7, #16]
 8017f2c:	e010      	b.n	8017f50 <sync_window+0x78>
					wsect += fs->fsize;
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	6a1b      	ldr	r3, [r3, #32]
 8017f32:	697a      	ldr	r2, [r7, #20]
 8017f34:	4413      	add	r3, r2
 8017f36:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	7858      	ldrb	r0, [r3, #1]
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8017f42:	2301      	movs	r3, #1
 8017f44:	697a      	ldr	r2, [r7, #20]
 8017f46:	f7ff fd1d 	bl	8017984 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017f4a:	693b      	ldr	r3, [r7, #16]
 8017f4c:	3b01      	subs	r3, #1
 8017f4e:	613b      	str	r3, [r7, #16]
 8017f50:	693b      	ldr	r3, [r7, #16]
 8017f52:	2b01      	cmp	r3, #1
 8017f54:	d8eb      	bhi.n	8017f2e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8017f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f58:	4618      	mov	r0, r3
 8017f5a:	3718      	adds	r7, #24
 8017f5c:	46bd      	mov	sp, r7
 8017f5e:	bd80      	pop	{r7, pc}

08017f60 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8017f60:	b580      	push	{r7, lr}
 8017f62:	b084      	sub	sp, #16
 8017f64:	af00      	add	r7, sp, #0
 8017f66:	6078      	str	r0, [r7, #4]
 8017f68:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8017f6a:	2300      	movs	r3, #0
 8017f6c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017f72:	683a      	ldr	r2, [r7, #0]
 8017f74:	429a      	cmp	r2, r3
 8017f76:	d01b      	beq.n	8017fb0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8017f78:	6878      	ldr	r0, [r7, #4]
 8017f7a:	f7ff ffad 	bl	8017ed8 <sync_window>
 8017f7e:	4603      	mov	r3, r0
 8017f80:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8017f82:	7bfb      	ldrb	r3, [r7, #15]
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d113      	bne.n	8017fb0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	7858      	ldrb	r0, [r3, #1]
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8017f92:	2301      	movs	r3, #1
 8017f94:	683a      	ldr	r2, [r7, #0]
 8017f96:	f7ff fcd5 	bl	8017944 <disk_read>
 8017f9a:	4603      	mov	r3, r0
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d004      	beq.n	8017faa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8017fa0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017fa4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8017fa6:	2301      	movs	r3, #1
 8017fa8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	683a      	ldr	r2, [r7, #0]
 8017fae:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8017fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8017fb2:	4618      	mov	r0, r3
 8017fb4:	3710      	adds	r7, #16
 8017fb6:	46bd      	mov	sp, r7
 8017fb8:	bd80      	pop	{r7, pc}
	...

08017fbc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8017fbc:	b580      	push	{r7, lr}
 8017fbe:	b084      	sub	sp, #16
 8017fc0:	af00      	add	r7, sp, #0
 8017fc2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8017fc4:	6878      	ldr	r0, [r7, #4]
 8017fc6:	f7ff ff87 	bl	8017ed8 <sync_window>
 8017fca:	4603      	mov	r3, r0
 8017fcc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017fce:	7bfb      	ldrb	r3, [r7, #15]
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d159      	bne.n	8018088 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	781b      	ldrb	r3, [r3, #0]
 8017fd8:	2b03      	cmp	r3, #3
 8017fda:	d149      	bne.n	8018070 <sync_fs+0xb4>
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	791b      	ldrb	r3, [r3, #4]
 8017fe0:	2b01      	cmp	r3, #1
 8017fe2:	d145      	bne.n	8018070 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	899b      	ldrh	r3, [r3, #12]
 8017fee:	461a      	mov	r2, r3
 8017ff0:	2100      	movs	r1, #0
 8017ff2:	f7ff fda8 	bl	8017b46 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	3338      	adds	r3, #56	@ 0x38
 8017ffa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8017ffe:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8018002:	4618      	mov	r0, r3
 8018004:	f7ff fd37 	bl	8017a76 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	3338      	adds	r3, #56	@ 0x38
 801800c:	4921      	ldr	r1, [pc, #132]	@ (8018094 <sync_fs+0xd8>)
 801800e:	4618      	mov	r0, r3
 8018010:	f7ff fd4c 	bl	8017aac <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	3338      	adds	r3, #56	@ 0x38
 8018018:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801801c:	491e      	ldr	r1, [pc, #120]	@ (8018098 <sync_fs+0xdc>)
 801801e:	4618      	mov	r0, r3
 8018020:	f7ff fd44 	bl	8017aac <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	3338      	adds	r3, #56	@ 0x38
 8018028:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	699b      	ldr	r3, [r3, #24]
 8018030:	4619      	mov	r1, r3
 8018032:	4610      	mov	r0, r2
 8018034:	f7ff fd3a 	bl	8017aac <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	3338      	adds	r3, #56	@ 0x38
 801803c:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	695b      	ldr	r3, [r3, #20]
 8018044:	4619      	mov	r1, r3
 8018046:	4610      	mov	r0, r2
 8018048:	f7ff fd30 	bl	8017aac <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018050:	1c5a      	adds	r2, r3, #1
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	7858      	ldrb	r0, [r3, #1]
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018064:	2301      	movs	r3, #1
 8018066:	f7ff fc8d 	bl	8017984 <disk_write>
			fs->fsi_flag = 0;
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	2200      	movs	r2, #0
 801806e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	785b      	ldrb	r3, [r3, #1]
 8018074:	2200      	movs	r2, #0
 8018076:	2100      	movs	r1, #0
 8018078:	4618      	mov	r0, r3
 801807a:	f7ff fca3 	bl	80179c4 <disk_ioctl>
 801807e:	4603      	mov	r3, r0
 8018080:	2b00      	cmp	r3, #0
 8018082:	d001      	beq.n	8018088 <sync_fs+0xcc>
 8018084:	2301      	movs	r3, #1
 8018086:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8018088:	7bfb      	ldrb	r3, [r7, #15]
}
 801808a:	4618      	mov	r0, r3
 801808c:	3710      	adds	r7, #16
 801808e:	46bd      	mov	sp, r7
 8018090:	bd80      	pop	{r7, pc}
 8018092:	bf00      	nop
 8018094:	41615252 	.word	0x41615252
 8018098:	61417272 	.word	0x61417272

0801809c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801809c:	b480      	push	{r7}
 801809e:	b083      	sub	sp, #12
 80180a0:	af00      	add	r7, sp, #0
 80180a2:	6078      	str	r0, [r7, #4]
 80180a4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80180a6:	683b      	ldr	r3, [r7, #0]
 80180a8:	3b02      	subs	r3, #2
 80180aa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	69db      	ldr	r3, [r3, #28]
 80180b0:	3b02      	subs	r3, #2
 80180b2:	683a      	ldr	r2, [r7, #0]
 80180b4:	429a      	cmp	r2, r3
 80180b6:	d301      	bcc.n	80180bc <clust2sect+0x20>
 80180b8:	2300      	movs	r3, #0
 80180ba:	e008      	b.n	80180ce <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	895b      	ldrh	r3, [r3, #10]
 80180c0:	461a      	mov	r2, r3
 80180c2:	683b      	ldr	r3, [r7, #0]
 80180c4:	fb03 f202 	mul.w	r2, r3, r2
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80180cc:	4413      	add	r3, r2
}
 80180ce:	4618      	mov	r0, r3
 80180d0:	370c      	adds	r7, #12
 80180d2:	46bd      	mov	sp, r7
 80180d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180d8:	4770      	bx	lr

080180da <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80180da:	b580      	push	{r7, lr}
 80180dc:	b086      	sub	sp, #24
 80180de:	af00      	add	r7, sp, #0
 80180e0:	6078      	str	r0, [r7, #4]
 80180e2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80180ea:	683b      	ldr	r3, [r7, #0]
 80180ec:	2b01      	cmp	r3, #1
 80180ee:	d904      	bls.n	80180fa <get_fat+0x20>
 80180f0:	693b      	ldr	r3, [r7, #16]
 80180f2:	69db      	ldr	r3, [r3, #28]
 80180f4:	683a      	ldr	r2, [r7, #0]
 80180f6:	429a      	cmp	r2, r3
 80180f8:	d302      	bcc.n	8018100 <get_fat+0x26>
		val = 1;	/* Internal error */
 80180fa:	2301      	movs	r3, #1
 80180fc:	617b      	str	r3, [r7, #20]
 80180fe:	e0ba      	b.n	8018276 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8018100:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018104:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8018106:	693b      	ldr	r3, [r7, #16]
 8018108:	781b      	ldrb	r3, [r3, #0]
 801810a:	2b03      	cmp	r3, #3
 801810c:	f000 8082 	beq.w	8018214 <get_fat+0x13a>
 8018110:	2b03      	cmp	r3, #3
 8018112:	f300 80a6 	bgt.w	8018262 <get_fat+0x188>
 8018116:	2b01      	cmp	r3, #1
 8018118:	d002      	beq.n	8018120 <get_fat+0x46>
 801811a:	2b02      	cmp	r3, #2
 801811c:	d055      	beq.n	80181ca <get_fat+0xf0>
 801811e:	e0a0      	b.n	8018262 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8018120:	683b      	ldr	r3, [r7, #0]
 8018122:	60fb      	str	r3, [r7, #12]
 8018124:	68fb      	ldr	r3, [r7, #12]
 8018126:	085b      	lsrs	r3, r3, #1
 8018128:	68fa      	ldr	r2, [r7, #12]
 801812a:	4413      	add	r3, r2
 801812c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801812e:	693b      	ldr	r3, [r7, #16]
 8018130:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018132:	693b      	ldr	r3, [r7, #16]
 8018134:	899b      	ldrh	r3, [r3, #12]
 8018136:	4619      	mov	r1, r3
 8018138:	68fb      	ldr	r3, [r7, #12]
 801813a:	fbb3 f3f1 	udiv	r3, r3, r1
 801813e:	4413      	add	r3, r2
 8018140:	4619      	mov	r1, r3
 8018142:	6938      	ldr	r0, [r7, #16]
 8018144:	f7ff ff0c 	bl	8017f60 <move_window>
 8018148:	4603      	mov	r3, r0
 801814a:	2b00      	cmp	r3, #0
 801814c:	f040 808c 	bne.w	8018268 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8018150:	68fb      	ldr	r3, [r7, #12]
 8018152:	1c5a      	adds	r2, r3, #1
 8018154:	60fa      	str	r2, [r7, #12]
 8018156:	693a      	ldr	r2, [r7, #16]
 8018158:	8992      	ldrh	r2, [r2, #12]
 801815a:	fbb3 f1f2 	udiv	r1, r3, r2
 801815e:	fb01 f202 	mul.w	r2, r1, r2
 8018162:	1a9b      	subs	r3, r3, r2
 8018164:	693a      	ldr	r2, [r7, #16]
 8018166:	4413      	add	r3, r2
 8018168:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801816c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801816e:	693b      	ldr	r3, [r7, #16]
 8018170:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018172:	693b      	ldr	r3, [r7, #16]
 8018174:	899b      	ldrh	r3, [r3, #12]
 8018176:	4619      	mov	r1, r3
 8018178:	68fb      	ldr	r3, [r7, #12]
 801817a:	fbb3 f3f1 	udiv	r3, r3, r1
 801817e:	4413      	add	r3, r2
 8018180:	4619      	mov	r1, r3
 8018182:	6938      	ldr	r0, [r7, #16]
 8018184:	f7ff feec 	bl	8017f60 <move_window>
 8018188:	4603      	mov	r3, r0
 801818a:	2b00      	cmp	r3, #0
 801818c:	d16e      	bne.n	801826c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 801818e:	693b      	ldr	r3, [r7, #16]
 8018190:	899b      	ldrh	r3, [r3, #12]
 8018192:	461a      	mov	r2, r3
 8018194:	68fb      	ldr	r3, [r7, #12]
 8018196:	fbb3 f1f2 	udiv	r1, r3, r2
 801819a:	fb01 f202 	mul.w	r2, r1, r2
 801819e:	1a9b      	subs	r3, r3, r2
 80181a0:	693a      	ldr	r2, [r7, #16]
 80181a2:	4413      	add	r3, r2
 80181a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80181a8:	021b      	lsls	r3, r3, #8
 80181aa:	68ba      	ldr	r2, [r7, #8]
 80181ac:	4313      	orrs	r3, r2
 80181ae:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80181b0:	683b      	ldr	r3, [r7, #0]
 80181b2:	f003 0301 	and.w	r3, r3, #1
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d002      	beq.n	80181c0 <get_fat+0xe6>
 80181ba:	68bb      	ldr	r3, [r7, #8]
 80181bc:	091b      	lsrs	r3, r3, #4
 80181be:	e002      	b.n	80181c6 <get_fat+0xec>
 80181c0:	68bb      	ldr	r3, [r7, #8]
 80181c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80181c6:	617b      	str	r3, [r7, #20]
			break;
 80181c8:	e055      	b.n	8018276 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80181ca:	693b      	ldr	r3, [r7, #16]
 80181cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80181ce:	693b      	ldr	r3, [r7, #16]
 80181d0:	899b      	ldrh	r3, [r3, #12]
 80181d2:	085b      	lsrs	r3, r3, #1
 80181d4:	b29b      	uxth	r3, r3
 80181d6:	4619      	mov	r1, r3
 80181d8:	683b      	ldr	r3, [r7, #0]
 80181da:	fbb3 f3f1 	udiv	r3, r3, r1
 80181de:	4413      	add	r3, r2
 80181e0:	4619      	mov	r1, r3
 80181e2:	6938      	ldr	r0, [r7, #16]
 80181e4:	f7ff febc 	bl	8017f60 <move_window>
 80181e8:	4603      	mov	r3, r0
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d140      	bne.n	8018270 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80181ee:	693b      	ldr	r3, [r7, #16]
 80181f0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80181f4:	683b      	ldr	r3, [r7, #0]
 80181f6:	005b      	lsls	r3, r3, #1
 80181f8:	693a      	ldr	r2, [r7, #16]
 80181fa:	8992      	ldrh	r2, [r2, #12]
 80181fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8018200:	fb00 f202 	mul.w	r2, r0, r2
 8018204:	1a9b      	subs	r3, r3, r2
 8018206:	440b      	add	r3, r1
 8018208:	4618      	mov	r0, r3
 801820a:	f7ff fbf9 	bl	8017a00 <ld_word>
 801820e:	4603      	mov	r3, r0
 8018210:	617b      	str	r3, [r7, #20]
			break;
 8018212:	e030      	b.n	8018276 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8018214:	693b      	ldr	r3, [r7, #16]
 8018216:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018218:	693b      	ldr	r3, [r7, #16]
 801821a:	899b      	ldrh	r3, [r3, #12]
 801821c:	089b      	lsrs	r3, r3, #2
 801821e:	b29b      	uxth	r3, r3
 8018220:	4619      	mov	r1, r3
 8018222:	683b      	ldr	r3, [r7, #0]
 8018224:	fbb3 f3f1 	udiv	r3, r3, r1
 8018228:	4413      	add	r3, r2
 801822a:	4619      	mov	r1, r3
 801822c:	6938      	ldr	r0, [r7, #16]
 801822e:	f7ff fe97 	bl	8017f60 <move_window>
 8018232:	4603      	mov	r3, r0
 8018234:	2b00      	cmp	r3, #0
 8018236:	d11d      	bne.n	8018274 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8018238:	693b      	ldr	r3, [r7, #16]
 801823a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801823e:	683b      	ldr	r3, [r7, #0]
 8018240:	009b      	lsls	r3, r3, #2
 8018242:	693a      	ldr	r2, [r7, #16]
 8018244:	8992      	ldrh	r2, [r2, #12]
 8018246:	fbb3 f0f2 	udiv	r0, r3, r2
 801824a:	fb00 f202 	mul.w	r2, r0, r2
 801824e:	1a9b      	subs	r3, r3, r2
 8018250:	440b      	add	r3, r1
 8018252:	4618      	mov	r0, r3
 8018254:	f7ff fbec 	bl	8017a30 <ld_dword>
 8018258:	4603      	mov	r3, r0
 801825a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801825e:	617b      	str	r3, [r7, #20]
			break;
 8018260:	e009      	b.n	8018276 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8018262:	2301      	movs	r3, #1
 8018264:	617b      	str	r3, [r7, #20]
 8018266:	e006      	b.n	8018276 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018268:	bf00      	nop
 801826a:	e004      	b.n	8018276 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801826c:	bf00      	nop
 801826e:	e002      	b.n	8018276 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8018270:	bf00      	nop
 8018272:	e000      	b.n	8018276 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8018274:	bf00      	nop
		}
	}

	return val;
 8018276:	697b      	ldr	r3, [r7, #20]
}
 8018278:	4618      	mov	r0, r3
 801827a:	3718      	adds	r7, #24
 801827c:	46bd      	mov	sp, r7
 801827e:	bd80      	pop	{r7, pc}

08018280 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8018280:	b590      	push	{r4, r7, lr}
 8018282:	b089      	sub	sp, #36	@ 0x24
 8018284:	af00      	add	r7, sp, #0
 8018286:	60f8      	str	r0, [r7, #12]
 8018288:	60b9      	str	r1, [r7, #8]
 801828a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801828c:	2302      	movs	r3, #2
 801828e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8018290:	68bb      	ldr	r3, [r7, #8]
 8018292:	2b01      	cmp	r3, #1
 8018294:	f240 8109 	bls.w	80184aa <put_fat+0x22a>
 8018298:	68fb      	ldr	r3, [r7, #12]
 801829a:	69db      	ldr	r3, [r3, #28]
 801829c:	68ba      	ldr	r2, [r7, #8]
 801829e:	429a      	cmp	r2, r3
 80182a0:	f080 8103 	bcs.w	80184aa <put_fat+0x22a>
		switch (fs->fs_type) {
 80182a4:	68fb      	ldr	r3, [r7, #12]
 80182a6:	781b      	ldrb	r3, [r3, #0]
 80182a8:	2b03      	cmp	r3, #3
 80182aa:	f000 80b6 	beq.w	801841a <put_fat+0x19a>
 80182ae:	2b03      	cmp	r3, #3
 80182b0:	f300 80fb 	bgt.w	80184aa <put_fat+0x22a>
 80182b4:	2b01      	cmp	r3, #1
 80182b6:	d003      	beq.n	80182c0 <put_fat+0x40>
 80182b8:	2b02      	cmp	r3, #2
 80182ba:	f000 8083 	beq.w	80183c4 <put_fat+0x144>
 80182be:	e0f4      	b.n	80184aa <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80182c0:	68bb      	ldr	r3, [r7, #8]
 80182c2:	61bb      	str	r3, [r7, #24]
 80182c4:	69bb      	ldr	r3, [r7, #24]
 80182c6:	085b      	lsrs	r3, r3, #1
 80182c8:	69ba      	ldr	r2, [r7, #24]
 80182ca:	4413      	add	r3, r2
 80182cc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80182ce:	68fb      	ldr	r3, [r7, #12]
 80182d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80182d2:	68fb      	ldr	r3, [r7, #12]
 80182d4:	899b      	ldrh	r3, [r3, #12]
 80182d6:	4619      	mov	r1, r3
 80182d8:	69bb      	ldr	r3, [r7, #24]
 80182da:	fbb3 f3f1 	udiv	r3, r3, r1
 80182de:	4413      	add	r3, r2
 80182e0:	4619      	mov	r1, r3
 80182e2:	68f8      	ldr	r0, [r7, #12]
 80182e4:	f7ff fe3c 	bl	8017f60 <move_window>
 80182e8:	4603      	mov	r3, r0
 80182ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80182ec:	7ffb      	ldrb	r3, [r7, #31]
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	f040 80d4 	bne.w	801849c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80182f4:	68fb      	ldr	r3, [r7, #12]
 80182f6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80182fa:	69bb      	ldr	r3, [r7, #24]
 80182fc:	1c5a      	adds	r2, r3, #1
 80182fe:	61ba      	str	r2, [r7, #24]
 8018300:	68fa      	ldr	r2, [r7, #12]
 8018302:	8992      	ldrh	r2, [r2, #12]
 8018304:	fbb3 f0f2 	udiv	r0, r3, r2
 8018308:	fb00 f202 	mul.w	r2, r0, r2
 801830c:	1a9b      	subs	r3, r3, r2
 801830e:	440b      	add	r3, r1
 8018310:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8018312:	68bb      	ldr	r3, [r7, #8]
 8018314:	f003 0301 	and.w	r3, r3, #1
 8018318:	2b00      	cmp	r3, #0
 801831a:	d00d      	beq.n	8018338 <put_fat+0xb8>
 801831c:	697b      	ldr	r3, [r7, #20]
 801831e:	781b      	ldrb	r3, [r3, #0]
 8018320:	b25b      	sxtb	r3, r3
 8018322:	f003 030f 	and.w	r3, r3, #15
 8018326:	b25a      	sxtb	r2, r3
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	b2db      	uxtb	r3, r3
 801832c:	011b      	lsls	r3, r3, #4
 801832e:	b25b      	sxtb	r3, r3
 8018330:	4313      	orrs	r3, r2
 8018332:	b25b      	sxtb	r3, r3
 8018334:	b2db      	uxtb	r3, r3
 8018336:	e001      	b.n	801833c <put_fat+0xbc>
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	b2db      	uxtb	r3, r3
 801833c:	697a      	ldr	r2, [r7, #20]
 801833e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8018340:	68fb      	ldr	r3, [r7, #12]
 8018342:	2201      	movs	r2, #1
 8018344:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8018346:	68fb      	ldr	r3, [r7, #12]
 8018348:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801834a:	68fb      	ldr	r3, [r7, #12]
 801834c:	899b      	ldrh	r3, [r3, #12]
 801834e:	4619      	mov	r1, r3
 8018350:	69bb      	ldr	r3, [r7, #24]
 8018352:	fbb3 f3f1 	udiv	r3, r3, r1
 8018356:	4413      	add	r3, r2
 8018358:	4619      	mov	r1, r3
 801835a:	68f8      	ldr	r0, [r7, #12]
 801835c:	f7ff fe00 	bl	8017f60 <move_window>
 8018360:	4603      	mov	r3, r0
 8018362:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8018364:	7ffb      	ldrb	r3, [r7, #31]
 8018366:	2b00      	cmp	r3, #0
 8018368:	f040 809a 	bne.w	80184a0 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 801836c:	68fb      	ldr	r3, [r7, #12]
 801836e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8018372:	68fb      	ldr	r3, [r7, #12]
 8018374:	899b      	ldrh	r3, [r3, #12]
 8018376:	461a      	mov	r2, r3
 8018378:	69bb      	ldr	r3, [r7, #24]
 801837a:	fbb3 f0f2 	udiv	r0, r3, r2
 801837e:	fb00 f202 	mul.w	r2, r0, r2
 8018382:	1a9b      	subs	r3, r3, r2
 8018384:	440b      	add	r3, r1
 8018386:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8018388:	68bb      	ldr	r3, [r7, #8]
 801838a:	f003 0301 	and.w	r3, r3, #1
 801838e:	2b00      	cmp	r3, #0
 8018390:	d003      	beq.n	801839a <put_fat+0x11a>
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	091b      	lsrs	r3, r3, #4
 8018396:	b2db      	uxtb	r3, r3
 8018398:	e00e      	b.n	80183b8 <put_fat+0x138>
 801839a:	697b      	ldr	r3, [r7, #20]
 801839c:	781b      	ldrb	r3, [r3, #0]
 801839e:	b25b      	sxtb	r3, r3
 80183a0:	f023 030f 	bic.w	r3, r3, #15
 80183a4:	b25a      	sxtb	r2, r3
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	0a1b      	lsrs	r3, r3, #8
 80183aa:	b25b      	sxtb	r3, r3
 80183ac:	f003 030f 	and.w	r3, r3, #15
 80183b0:	b25b      	sxtb	r3, r3
 80183b2:	4313      	orrs	r3, r2
 80183b4:	b25b      	sxtb	r3, r3
 80183b6:	b2db      	uxtb	r3, r3
 80183b8:	697a      	ldr	r2, [r7, #20]
 80183ba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80183bc:	68fb      	ldr	r3, [r7, #12]
 80183be:	2201      	movs	r2, #1
 80183c0:	70da      	strb	r2, [r3, #3]
			break;
 80183c2:	e072      	b.n	80184aa <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80183c8:	68fb      	ldr	r3, [r7, #12]
 80183ca:	899b      	ldrh	r3, [r3, #12]
 80183cc:	085b      	lsrs	r3, r3, #1
 80183ce:	b29b      	uxth	r3, r3
 80183d0:	4619      	mov	r1, r3
 80183d2:	68bb      	ldr	r3, [r7, #8]
 80183d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80183d8:	4413      	add	r3, r2
 80183da:	4619      	mov	r1, r3
 80183dc:	68f8      	ldr	r0, [r7, #12]
 80183de:	f7ff fdbf 	bl	8017f60 <move_window>
 80183e2:	4603      	mov	r3, r0
 80183e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80183e6:	7ffb      	ldrb	r3, [r7, #31]
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	d15b      	bne.n	80184a4 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80183ec:	68fb      	ldr	r3, [r7, #12]
 80183ee:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80183f2:	68bb      	ldr	r3, [r7, #8]
 80183f4:	005b      	lsls	r3, r3, #1
 80183f6:	68fa      	ldr	r2, [r7, #12]
 80183f8:	8992      	ldrh	r2, [r2, #12]
 80183fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80183fe:	fb00 f202 	mul.w	r2, r0, r2
 8018402:	1a9b      	subs	r3, r3, r2
 8018404:	440b      	add	r3, r1
 8018406:	687a      	ldr	r2, [r7, #4]
 8018408:	b292      	uxth	r2, r2
 801840a:	4611      	mov	r1, r2
 801840c:	4618      	mov	r0, r3
 801840e:	f7ff fb32 	bl	8017a76 <st_word>
			fs->wflag = 1;
 8018412:	68fb      	ldr	r3, [r7, #12]
 8018414:	2201      	movs	r2, #1
 8018416:	70da      	strb	r2, [r3, #3]
			break;
 8018418:	e047      	b.n	80184aa <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801841a:	68fb      	ldr	r3, [r7, #12]
 801841c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801841e:	68fb      	ldr	r3, [r7, #12]
 8018420:	899b      	ldrh	r3, [r3, #12]
 8018422:	089b      	lsrs	r3, r3, #2
 8018424:	b29b      	uxth	r3, r3
 8018426:	4619      	mov	r1, r3
 8018428:	68bb      	ldr	r3, [r7, #8]
 801842a:	fbb3 f3f1 	udiv	r3, r3, r1
 801842e:	4413      	add	r3, r2
 8018430:	4619      	mov	r1, r3
 8018432:	68f8      	ldr	r0, [r7, #12]
 8018434:	f7ff fd94 	bl	8017f60 <move_window>
 8018438:	4603      	mov	r3, r0
 801843a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801843c:	7ffb      	ldrb	r3, [r7, #31]
 801843e:	2b00      	cmp	r3, #0
 8018440:	d132      	bne.n	80184a8 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8018448:	68fb      	ldr	r3, [r7, #12]
 801844a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801844e:	68bb      	ldr	r3, [r7, #8]
 8018450:	009b      	lsls	r3, r3, #2
 8018452:	68fa      	ldr	r2, [r7, #12]
 8018454:	8992      	ldrh	r2, [r2, #12]
 8018456:	fbb3 f0f2 	udiv	r0, r3, r2
 801845a:	fb00 f202 	mul.w	r2, r0, r2
 801845e:	1a9b      	subs	r3, r3, r2
 8018460:	440b      	add	r3, r1
 8018462:	4618      	mov	r0, r3
 8018464:	f7ff fae4 	bl	8017a30 <ld_dword>
 8018468:	4603      	mov	r3, r0
 801846a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801846e:	4323      	orrs	r3, r4
 8018470:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8018472:	68fb      	ldr	r3, [r7, #12]
 8018474:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8018478:	68bb      	ldr	r3, [r7, #8]
 801847a:	009b      	lsls	r3, r3, #2
 801847c:	68fa      	ldr	r2, [r7, #12]
 801847e:	8992      	ldrh	r2, [r2, #12]
 8018480:	fbb3 f0f2 	udiv	r0, r3, r2
 8018484:	fb00 f202 	mul.w	r2, r0, r2
 8018488:	1a9b      	subs	r3, r3, r2
 801848a:	440b      	add	r3, r1
 801848c:	6879      	ldr	r1, [r7, #4]
 801848e:	4618      	mov	r0, r3
 8018490:	f7ff fb0c 	bl	8017aac <st_dword>
			fs->wflag = 1;
 8018494:	68fb      	ldr	r3, [r7, #12]
 8018496:	2201      	movs	r2, #1
 8018498:	70da      	strb	r2, [r3, #3]
			break;
 801849a:	e006      	b.n	80184aa <put_fat+0x22a>
			if (res != FR_OK) break;
 801849c:	bf00      	nop
 801849e:	e004      	b.n	80184aa <put_fat+0x22a>
			if (res != FR_OK) break;
 80184a0:	bf00      	nop
 80184a2:	e002      	b.n	80184aa <put_fat+0x22a>
			if (res != FR_OK) break;
 80184a4:	bf00      	nop
 80184a6:	e000      	b.n	80184aa <put_fat+0x22a>
			if (res != FR_OK) break;
 80184a8:	bf00      	nop
		}
	}
	return res;
 80184aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80184ac:	4618      	mov	r0, r3
 80184ae:	3724      	adds	r7, #36	@ 0x24
 80184b0:	46bd      	mov	sp, r7
 80184b2:	bd90      	pop	{r4, r7, pc}

080184b4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80184b4:	b580      	push	{r7, lr}
 80184b6:	b088      	sub	sp, #32
 80184b8:	af00      	add	r7, sp, #0
 80184ba:	60f8      	str	r0, [r7, #12]
 80184bc:	60b9      	str	r1, [r7, #8]
 80184be:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80184c0:	2300      	movs	r3, #0
 80184c2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80184c4:	68fb      	ldr	r3, [r7, #12]
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80184ca:	68bb      	ldr	r3, [r7, #8]
 80184cc:	2b01      	cmp	r3, #1
 80184ce:	d904      	bls.n	80184da <remove_chain+0x26>
 80184d0:	69bb      	ldr	r3, [r7, #24]
 80184d2:	69db      	ldr	r3, [r3, #28]
 80184d4:	68ba      	ldr	r2, [r7, #8]
 80184d6:	429a      	cmp	r2, r3
 80184d8:	d301      	bcc.n	80184de <remove_chain+0x2a>
 80184da:	2302      	movs	r3, #2
 80184dc:	e04b      	b.n	8018576 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	d00c      	beq.n	80184fe <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80184e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80184e8:	6879      	ldr	r1, [r7, #4]
 80184ea:	69b8      	ldr	r0, [r7, #24]
 80184ec:	f7ff fec8 	bl	8018280 <put_fat>
 80184f0:	4603      	mov	r3, r0
 80184f2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80184f4:	7ffb      	ldrb	r3, [r7, #31]
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d001      	beq.n	80184fe <remove_chain+0x4a>
 80184fa:	7ffb      	ldrb	r3, [r7, #31]
 80184fc:	e03b      	b.n	8018576 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80184fe:	68b9      	ldr	r1, [r7, #8]
 8018500:	68f8      	ldr	r0, [r7, #12]
 8018502:	f7ff fdea 	bl	80180da <get_fat>
 8018506:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8018508:	697b      	ldr	r3, [r7, #20]
 801850a:	2b00      	cmp	r3, #0
 801850c:	d031      	beq.n	8018572 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801850e:	697b      	ldr	r3, [r7, #20]
 8018510:	2b01      	cmp	r3, #1
 8018512:	d101      	bne.n	8018518 <remove_chain+0x64>
 8018514:	2302      	movs	r3, #2
 8018516:	e02e      	b.n	8018576 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8018518:	697b      	ldr	r3, [r7, #20]
 801851a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801851e:	d101      	bne.n	8018524 <remove_chain+0x70>
 8018520:	2301      	movs	r3, #1
 8018522:	e028      	b.n	8018576 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8018524:	2200      	movs	r2, #0
 8018526:	68b9      	ldr	r1, [r7, #8]
 8018528:	69b8      	ldr	r0, [r7, #24]
 801852a:	f7ff fea9 	bl	8018280 <put_fat>
 801852e:	4603      	mov	r3, r0
 8018530:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8018532:	7ffb      	ldrb	r3, [r7, #31]
 8018534:	2b00      	cmp	r3, #0
 8018536:	d001      	beq.n	801853c <remove_chain+0x88>
 8018538:	7ffb      	ldrb	r3, [r7, #31]
 801853a:	e01c      	b.n	8018576 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801853c:	69bb      	ldr	r3, [r7, #24]
 801853e:	699a      	ldr	r2, [r3, #24]
 8018540:	69bb      	ldr	r3, [r7, #24]
 8018542:	69db      	ldr	r3, [r3, #28]
 8018544:	3b02      	subs	r3, #2
 8018546:	429a      	cmp	r2, r3
 8018548:	d20b      	bcs.n	8018562 <remove_chain+0xae>
			fs->free_clst++;
 801854a:	69bb      	ldr	r3, [r7, #24]
 801854c:	699b      	ldr	r3, [r3, #24]
 801854e:	1c5a      	adds	r2, r3, #1
 8018550:	69bb      	ldr	r3, [r7, #24]
 8018552:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8018554:	69bb      	ldr	r3, [r7, #24]
 8018556:	791b      	ldrb	r3, [r3, #4]
 8018558:	f043 0301 	orr.w	r3, r3, #1
 801855c:	b2da      	uxtb	r2, r3
 801855e:	69bb      	ldr	r3, [r7, #24]
 8018560:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8018562:	697b      	ldr	r3, [r7, #20]
 8018564:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8018566:	69bb      	ldr	r3, [r7, #24]
 8018568:	69db      	ldr	r3, [r3, #28]
 801856a:	68ba      	ldr	r2, [r7, #8]
 801856c:	429a      	cmp	r2, r3
 801856e:	d3c6      	bcc.n	80184fe <remove_chain+0x4a>
 8018570:	e000      	b.n	8018574 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8018572:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8018574:	2300      	movs	r3, #0
}
 8018576:	4618      	mov	r0, r3
 8018578:	3720      	adds	r7, #32
 801857a:	46bd      	mov	sp, r7
 801857c:	bd80      	pop	{r7, pc}

0801857e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801857e:	b580      	push	{r7, lr}
 8018580:	b088      	sub	sp, #32
 8018582:	af00      	add	r7, sp, #0
 8018584:	6078      	str	r0, [r7, #4]
 8018586:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	681b      	ldr	r3, [r3, #0]
 801858c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801858e:	683b      	ldr	r3, [r7, #0]
 8018590:	2b00      	cmp	r3, #0
 8018592:	d10d      	bne.n	80185b0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8018594:	693b      	ldr	r3, [r7, #16]
 8018596:	695b      	ldr	r3, [r3, #20]
 8018598:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801859a:	69bb      	ldr	r3, [r7, #24]
 801859c:	2b00      	cmp	r3, #0
 801859e:	d004      	beq.n	80185aa <create_chain+0x2c>
 80185a0:	693b      	ldr	r3, [r7, #16]
 80185a2:	69db      	ldr	r3, [r3, #28]
 80185a4:	69ba      	ldr	r2, [r7, #24]
 80185a6:	429a      	cmp	r2, r3
 80185a8:	d31b      	bcc.n	80185e2 <create_chain+0x64>
 80185aa:	2301      	movs	r3, #1
 80185ac:	61bb      	str	r3, [r7, #24]
 80185ae:	e018      	b.n	80185e2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80185b0:	6839      	ldr	r1, [r7, #0]
 80185b2:	6878      	ldr	r0, [r7, #4]
 80185b4:	f7ff fd91 	bl	80180da <get_fat>
 80185b8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80185ba:	68fb      	ldr	r3, [r7, #12]
 80185bc:	2b01      	cmp	r3, #1
 80185be:	d801      	bhi.n	80185c4 <create_chain+0x46>
 80185c0:	2301      	movs	r3, #1
 80185c2:	e070      	b.n	80186a6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80185c4:	68fb      	ldr	r3, [r7, #12]
 80185c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80185ca:	d101      	bne.n	80185d0 <create_chain+0x52>
 80185cc:	68fb      	ldr	r3, [r7, #12]
 80185ce:	e06a      	b.n	80186a6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80185d0:	693b      	ldr	r3, [r7, #16]
 80185d2:	69db      	ldr	r3, [r3, #28]
 80185d4:	68fa      	ldr	r2, [r7, #12]
 80185d6:	429a      	cmp	r2, r3
 80185d8:	d201      	bcs.n	80185de <create_chain+0x60>
 80185da:	68fb      	ldr	r3, [r7, #12]
 80185dc:	e063      	b.n	80186a6 <create_chain+0x128>
		scl = clst;
 80185de:	683b      	ldr	r3, [r7, #0]
 80185e0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80185e2:	69bb      	ldr	r3, [r7, #24]
 80185e4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80185e6:	69fb      	ldr	r3, [r7, #28]
 80185e8:	3301      	adds	r3, #1
 80185ea:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80185ec:	693b      	ldr	r3, [r7, #16]
 80185ee:	69db      	ldr	r3, [r3, #28]
 80185f0:	69fa      	ldr	r2, [r7, #28]
 80185f2:	429a      	cmp	r2, r3
 80185f4:	d307      	bcc.n	8018606 <create_chain+0x88>
				ncl = 2;
 80185f6:	2302      	movs	r3, #2
 80185f8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80185fa:	69fa      	ldr	r2, [r7, #28]
 80185fc:	69bb      	ldr	r3, [r7, #24]
 80185fe:	429a      	cmp	r2, r3
 8018600:	d901      	bls.n	8018606 <create_chain+0x88>
 8018602:	2300      	movs	r3, #0
 8018604:	e04f      	b.n	80186a6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8018606:	69f9      	ldr	r1, [r7, #28]
 8018608:	6878      	ldr	r0, [r7, #4]
 801860a:	f7ff fd66 	bl	80180da <get_fat>
 801860e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8018610:	68fb      	ldr	r3, [r7, #12]
 8018612:	2b00      	cmp	r3, #0
 8018614:	d00e      	beq.n	8018634 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8018616:	68fb      	ldr	r3, [r7, #12]
 8018618:	2b01      	cmp	r3, #1
 801861a:	d003      	beq.n	8018624 <create_chain+0xa6>
 801861c:	68fb      	ldr	r3, [r7, #12]
 801861e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018622:	d101      	bne.n	8018628 <create_chain+0xaa>
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	e03e      	b.n	80186a6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8018628:	69fa      	ldr	r2, [r7, #28]
 801862a:	69bb      	ldr	r3, [r7, #24]
 801862c:	429a      	cmp	r2, r3
 801862e:	d1da      	bne.n	80185e6 <create_chain+0x68>
 8018630:	2300      	movs	r3, #0
 8018632:	e038      	b.n	80186a6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8018634:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8018636:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801863a:	69f9      	ldr	r1, [r7, #28]
 801863c:	6938      	ldr	r0, [r7, #16]
 801863e:	f7ff fe1f 	bl	8018280 <put_fat>
 8018642:	4603      	mov	r3, r0
 8018644:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8018646:	7dfb      	ldrb	r3, [r7, #23]
 8018648:	2b00      	cmp	r3, #0
 801864a:	d109      	bne.n	8018660 <create_chain+0xe2>
 801864c:	683b      	ldr	r3, [r7, #0]
 801864e:	2b00      	cmp	r3, #0
 8018650:	d006      	beq.n	8018660 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8018652:	69fa      	ldr	r2, [r7, #28]
 8018654:	6839      	ldr	r1, [r7, #0]
 8018656:	6938      	ldr	r0, [r7, #16]
 8018658:	f7ff fe12 	bl	8018280 <put_fat>
 801865c:	4603      	mov	r3, r0
 801865e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8018660:	7dfb      	ldrb	r3, [r7, #23]
 8018662:	2b00      	cmp	r3, #0
 8018664:	d116      	bne.n	8018694 <create_chain+0x116>
		fs->last_clst = ncl;
 8018666:	693b      	ldr	r3, [r7, #16]
 8018668:	69fa      	ldr	r2, [r7, #28]
 801866a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801866c:	693b      	ldr	r3, [r7, #16]
 801866e:	699a      	ldr	r2, [r3, #24]
 8018670:	693b      	ldr	r3, [r7, #16]
 8018672:	69db      	ldr	r3, [r3, #28]
 8018674:	3b02      	subs	r3, #2
 8018676:	429a      	cmp	r2, r3
 8018678:	d804      	bhi.n	8018684 <create_chain+0x106>
 801867a:	693b      	ldr	r3, [r7, #16]
 801867c:	699b      	ldr	r3, [r3, #24]
 801867e:	1e5a      	subs	r2, r3, #1
 8018680:	693b      	ldr	r3, [r7, #16]
 8018682:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8018684:	693b      	ldr	r3, [r7, #16]
 8018686:	791b      	ldrb	r3, [r3, #4]
 8018688:	f043 0301 	orr.w	r3, r3, #1
 801868c:	b2da      	uxtb	r2, r3
 801868e:	693b      	ldr	r3, [r7, #16]
 8018690:	711a      	strb	r2, [r3, #4]
 8018692:	e007      	b.n	80186a4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8018694:	7dfb      	ldrb	r3, [r7, #23]
 8018696:	2b01      	cmp	r3, #1
 8018698:	d102      	bne.n	80186a0 <create_chain+0x122>
 801869a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801869e:	e000      	b.n	80186a2 <create_chain+0x124>
 80186a0:	2301      	movs	r3, #1
 80186a2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80186a4:	69fb      	ldr	r3, [r7, #28]
}
 80186a6:	4618      	mov	r0, r3
 80186a8:	3720      	adds	r7, #32
 80186aa:	46bd      	mov	sp, r7
 80186ac:	bd80      	pop	{r7, pc}

080186ae <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80186ae:	b480      	push	{r7}
 80186b0:	b087      	sub	sp, #28
 80186b2:	af00      	add	r7, sp, #0
 80186b4:	6078      	str	r0, [r7, #4]
 80186b6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	681b      	ldr	r3, [r3, #0]
 80186bc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80186c2:	3304      	adds	r3, #4
 80186c4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80186c6:	68fb      	ldr	r3, [r7, #12]
 80186c8:	899b      	ldrh	r3, [r3, #12]
 80186ca:	461a      	mov	r2, r3
 80186cc:	683b      	ldr	r3, [r7, #0]
 80186ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80186d2:	68fa      	ldr	r2, [r7, #12]
 80186d4:	8952      	ldrh	r2, [r2, #10]
 80186d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80186da:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80186dc:	693b      	ldr	r3, [r7, #16]
 80186de:	1d1a      	adds	r2, r3, #4
 80186e0:	613a      	str	r2, [r7, #16]
 80186e2:	681b      	ldr	r3, [r3, #0]
 80186e4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80186e6:	68bb      	ldr	r3, [r7, #8]
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d101      	bne.n	80186f0 <clmt_clust+0x42>
 80186ec:	2300      	movs	r3, #0
 80186ee:	e010      	b.n	8018712 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80186f0:	697a      	ldr	r2, [r7, #20]
 80186f2:	68bb      	ldr	r3, [r7, #8]
 80186f4:	429a      	cmp	r2, r3
 80186f6:	d307      	bcc.n	8018708 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80186f8:	697a      	ldr	r2, [r7, #20]
 80186fa:	68bb      	ldr	r3, [r7, #8]
 80186fc:	1ad3      	subs	r3, r2, r3
 80186fe:	617b      	str	r3, [r7, #20]
 8018700:	693b      	ldr	r3, [r7, #16]
 8018702:	3304      	adds	r3, #4
 8018704:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8018706:	e7e9      	b.n	80186dc <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8018708:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801870a:	693b      	ldr	r3, [r7, #16]
 801870c:	681a      	ldr	r2, [r3, #0]
 801870e:	697b      	ldr	r3, [r7, #20]
 8018710:	4413      	add	r3, r2
}
 8018712:	4618      	mov	r0, r3
 8018714:	371c      	adds	r7, #28
 8018716:	46bd      	mov	sp, r7
 8018718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801871c:	4770      	bx	lr

0801871e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801871e:	b580      	push	{r7, lr}
 8018720:	b086      	sub	sp, #24
 8018722:	af00      	add	r7, sp, #0
 8018724:	6078      	str	r0, [r7, #4]
 8018726:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801872e:	683b      	ldr	r3, [r7, #0]
 8018730:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8018734:	d204      	bcs.n	8018740 <dir_sdi+0x22>
 8018736:	683b      	ldr	r3, [r7, #0]
 8018738:	f003 031f 	and.w	r3, r3, #31
 801873c:	2b00      	cmp	r3, #0
 801873e:	d001      	beq.n	8018744 <dir_sdi+0x26>
		return FR_INT_ERR;
 8018740:	2302      	movs	r3, #2
 8018742:	e071      	b.n	8018828 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	683a      	ldr	r2, [r7, #0]
 8018748:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	689b      	ldr	r3, [r3, #8]
 801874e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8018750:	697b      	ldr	r3, [r7, #20]
 8018752:	2b00      	cmp	r3, #0
 8018754:	d106      	bne.n	8018764 <dir_sdi+0x46>
 8018756:	693b      	ldr	r3, [r7, #16]
 8018758:	781b      	ldrb	r3, [r3, #0]
 801875a:	2b02      	cmp	r3, #2
 801875c:	d902      	bls.n	8018764 <dir_sdi+0x46>
		clst = fs->dirbase;
 801875e:	693b      	ldr	r3, [r7, #16]
 8018760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018762:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8018764:	697b      	ldr	r3, [r7, #20]
 8018766:	2b00      	cmp	r3, #0
 8018768:	d10c      	bne.n	8018784 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801876a:	683b      	ldr	r3, [r7, #0]
 801876c:	095b      	lsrs	r3, r3, #5
 801876e:	693a      	ldr	r2, [r7, #16]
 8018770:	8912      	ldrh	r2, [r2, #8]
 8018772:	4293      	cmp	r3, r2
 8018774:	d301      	bcc.n	801877a <dir_sdi+0x5c>
 8018776:	2302      	movs	r3, #2
 8018778:	e056      	b.n	8018828 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801877a:	693b      	ldr	r3, [r7, #16]
 801877c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	61da      	str	r2, [r3, #28]
 8018782:	e02d      	b.n	80187e0 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8018784:	693b      	ldr	r3, [r7, #16]
 8018786:	895b      	ldrh	r3, [r3, #10]
 8018788:	461a      	mov	r2, r3
 801878a:	693b      	ldr	r3, [r7, #16]
 801878c:	899b      	ldrh	r3, [r3, #12]
 801878e:	fb02 f303 	mul.w	r3, r2, r3
 8018792:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8018794:	e019      	b.n	80187ca <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	6979      	ldr	r1, [r7, #20]
 801879a:	4618      	mov	r0, r3
 801879c:	f7ff fc9d 	bl	80180da <get_fat>
 80187a0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80187a2:	697b      	ldr	r3, [r7, #20]
 80187a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80187a8:	d101      	bne.n	80187ae <dir_sdi+0x90>
 80187aa:	2301      	movs	r3, #1
 80187ac:	e03c      	b.n	8018828 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80187ae:	697b      	ldr	r3, [r7, #20]
 80187b0:	2b01      	cmp	r3, #1
 80187b2:	d904      	bls.n	80187be <dir_sdi+0xa0>
 80187b4:	693b      	ldr	r3, [r7, #16]
 80187b6:	69db      	ldr	r3, [r3, #28]
 80187b8:	697a      	ldr	r2, [r7, #20]
 80187ba:	429a      	cmp	r2, r3
 80187bc:	d301      	bcc.n	80187c2 <dir_sdi+0xa4>
 80187be:	2302      	movs	r3, #2
 80187c0:	e032      	b.n	8018828 <dir_sdi+0x10a>
			ofs -= csz;
 80187c2:	683a      	ldr	r2, [r7, #0]
 80187c4:	68fb      	ldr	r3, [r7, #12]
 80187c6:	1ad3      	subs	r3, r2, r3
 80187c8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80187ca:	683a      	ldr	r2, [r7, #0]
 80187cc:	68fb      	ldr	r3, [r7, #12]
 80187ce:	429a      	cmp	r2, r3
 80187d0:	d2e1      	bcs.n	8018796 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80187d2:	6979      	ldr	r1, [r7, #20]
 80187d4:	6938      	ldr	r0, [r7, #16]
 80187d6:	f7ff fc61 	bl	801809c <clust2sect>
 80187da:	4602      	mov	r2, r0
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	697a      	ldr	r2, [r7, #20]
 80187e4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	69db      	ldr	r3, [r3, #28]
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d101      	bne.n	80187f2 <dir_sdi+0xd4>
 80187ee:	2302      	movs	r3, #2
 80187f0:	e01a      	b.n	8018828 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	69da      	ldr	r2, [r3, #28]
 80187f6:	693b      	ldr	r3, [r7, #16]
 80187f8:	899b      	ldrh	r3, [r3, #12]
 80187fa:	4619      	mov	r1, r3
 80187fc:	683b      	ldr	r3, [r7, #0]
 80187fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8018802:	441a      	add	r2, r3
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8018808:	693b      	ldr	r3, [r7, #16]
 801880a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801880e:	693b      	ldr	r3, [r7, #16]
 8018810:	899b      	ldrh	r3, [r3, #12]
 8018812:	461a      	mov	r2, r3
 8018814:	683b      	ldr	r3, [r7, #0]
 8018816:	fbb3 f0f2 	udiv	r0, r3, r2
 801881a:	fb00 f202 	mul.w	r2, r0, r2
 801881e:	1a9b      	subs	r3, r3, r2
 8018820:	18ca      	adds	r2, r1, r3
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8018826:	2300      	movs	r3, #0
}
 8018828:	4618      	mov	r0, r3
 801882a:	3718      	adds	r7, #24
 801882c:	46bd      	mov	sp, r7
 801882e:	bd80      	pop	{r7, pc}

08018830 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8018830:	b580      	push	{r7, lr}
 8018832:	b086      	sub	sp, #24
 8018834:	af00      	add	r7, sp, #0
 8018836:	6078      	str	r0, [r7, #4]
 8018838:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	681b      	ldr	r3, [r3, #0]
 801883e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	695b      	ldr	r3, [r3, #20]
 8018844:	3320      	adds	r3, #32
 8018846:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	69db      	ldr	r3, [r3, #28]
 801884c:	2b00      	cmp	r3, #0
 801884e:	d003      	beq.n	8018858 <dir_next+0x28>
 8018850:	68bb      	ldr	r3, [r7, #8]
 8018852:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8018856:	d301      	bcc.n	801885c <dir_next+0x2c>
 8018858:	2304      	movs	r3, #4
 801885a:	e0bb      	b.n	80189d4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801885c:	68fb      	ldr	r3, [r7, #12]
 801885e:	899b      	ldrh	r3, [r3, #12]
 8018860:	461a      	mov	r2, r3
 8018862:	68bb      	ldr	r3, [r7, #8]
 8018864:	fbb3 f1f2 	udiv	r1, r3, r2
 8018868:	fb01 f202 	mul.w	r2, r1, r2
 801886c:	1a9b      	subs	r3, r3, r2
 801886e:	2b00      	cmp	r3, #0
 8018870:	f040 809d 	bne.w	80189ae <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	69db      	ldr	r3, [r3, #28]
 8018878:	1c5a      	adds	r2, r3, #1
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	699b      	ldr	r3, [r3, #24]
 8018882:	2b00      	cmp	r3, #0
 8018884:	d10b      	bne.n	801889e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8018886:	68bb      	ldr	r3, [r7, #8]
 8018888:	095b      	lsrs	r3, r3, #5
 801888a:	68fa      	ldr	r2, [r7, #12]
 801888c:	8912      	ldrh	r2, [r2, #8]
 801888e:	4293      	cmp	r3, r2
 8018890:	f0c0 808d 	bcc.w	80189ae <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	2200      	movs	r2, #0
 8018898:	61da      	str	r2, [r3, #28]
 801889a:	2304      	movs	r3, #4
 801889c:	e09a      	b.n	80189d4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801889e:	68fb      	ldr	r3, [r7, #12]
 80188a0:	899b      	ldrh	r3, [r3, #12]
 80188a2:	461a      	mov	r2, r3
 80188a4:	68bb      	ldr	r3, [r7, #8]
 80188a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80188aa:	68fa      	ldr	r2, [r7, #12]
 80188ac:	8952      	ldrh	r2, [r2, #10]
 80188ae:	3a01      	subs	r2, #1
 80188b0:	4013      	ands	r3, r2
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d17b      	bne.n	80189ae <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80188b6:	687a      	ldr	r2, [r7, #4]
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	699b      	ldr	r3, [r3, #24]
 80188bc:	4619      	mov	r1, r3
 80188be:	4610      	mov	r0, r2
 80188c0:	f7ff fc0b 	bl	80180da <get_fat>
 80188c4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80188c6:	697b      	ldr	r3, [r7, #20]
 80188c8:	2b01      	cmp	r3, #1
 80188ca:	d801      	bhi.n	80188d0 <dir_next+0xa0>
 80188cc:	2302      	movs	r3, #2
 80188ce:	e081      	b.n	80189d4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80188d0:	697b      	ldr	r3, [r7, #20]
 80188d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80188d6:	d101      	bne.n	80188dc <dir_next+0xac>
 80188d8:	2301      	movs	r3, #1
 80188da:	e07b      	b.n	80189d4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80188dc:	68fb      	ldr	r3, [r7, #12]
 80188de:	69db      	ldr	r3, [r3, #28]
 80188e0:	697a      	ldr	r2, [r7, #20]
 80188e2:	429a      	cmp	r2, r3
 80188e4:	d359      	bcc.n	801899a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80188e6:	683b      	ldr	r3, [r7, #0]
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d104      	bne.n	80188f6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	2200      	movs	r2, #0
 80188f0:	61da      	str	r2, [r3, #28]
 80188f2:	2304      	movs	r3, #4
 80188f4:	e06e      	b.n	80189d4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80188f6:	687a      	ldr	r2, [r7, #4]
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	699b      	ldr	r3, [r3, #24]
 80188fc:	4619      	mov	r1, r3
 80188fe:	4610      	mov	r0, r2
 8018900:	f7ff fe3d 	bl	801857e <create_chain>
 8018904:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8018906:	697b      	ldr	r3, [r7, #20]
 8018908:	2b00      	cmp	r3, #0
 801890a:	d101      	bne.n	8018910 <dir_next+0xe0>
 801890c:	2307      	movs	r3, #7
 801890e:	e061      	b.n	80189d4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8018910:	697b      	ldr	r3, [r7, #20]
 8018912:	2b01      	cmp	r3, #1
 8018914:	d101      	bne.n	801891a <dir_next+0xea>
 8018916:	2302      	movs	r3, #2
 8018918:	e05c      	b.n	80189d4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801891a:	697b      	ldr	r3, [r7, #20]
 801891c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018920:	d101      	bne.n	8018926 <dir_next+0xf6>
 8018922:	2301      	movs	r3, #1
 8018924:	e056      	b.n	80189d4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8018926:	68f8      	ldr	r0, [r7, #12]
 8018928:	f7ff fad6 	bl	8017ed8 <sync_window>
 801892c:	4603      	mov	r3, r0
 801892e:	2b00      	cmp	r3, #0
 8018930:	d001      	beq.n	8018936 <dir_next+0x106>
 8018932:	2301      	movs	r3, #1
 8018934:	e04e      	b.n	80189d4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8018936:	68fb      	ldr	r3, [r7, #12]
 8018938:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	899b      	ldrh	r3, [r3, #12]
 8018940:	461a      	mov	r2, r3
 8018942:	2100      	movs	r1, #0
 8018944:	f7ff f8ff 	bl	8017b46 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8018948:	2300      	movs	r3, #0
 801894a:	613b      	str	r3, [r7, #16]
 801894c:	6979      	ldr	r1, [r7, #20]
 801894e:	68f8      	ldr	r0, [r7, #12]
 8018950:	f7ff fba4 	bl	801809c <clust2sect>
 8018954:	4602      	mov	r2, r0
 8018956:	68fb      	ldr	r3, [r7, #12]
 8018958:	635a      	str	r2, [r3, #52]	@ 0x34
 801895a:	e012      	b.n	8018982 <dir_next+0x152>
						fs->wflag = 1;
 801895c:	68fb      	ldr	r3, [r7, #12]
 801895e:	2201      	movs	r2, #1
 8018960:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8018962:	68f8      	ldr	r0, [r7, #12]
 8018964:	f7ff fab8 	bl	8017ed8 <sync_window>
 8018968:	4603      	mov	r3, r0
 801896a:	2b00      	cmp	r3, #0
 801896c:	d001      	beq.n	8018972 <dir_next+0x142>
 801896e:	2301      	movs	r3, #1
 8018970:	e030      	b.n	80189d4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8018972:	693b      	ldr	r3, [r7, #16]
 8018974:	3301      	adds	r3, #1
 8018976:	613b      	str	r3, [r7, #16]
 8018978:	68fb      	ldr	r3, [r7, #12]
 801897a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801897c:	1c5a      	adds	r2, r3, #1
 801897e:	68fb      	ldr	r3, [r7, #12]
 8018980:	635a      	str	r2, [r3, #52]	@ 0x34
 8018982:	68fb      	ldr	r3, [r7, #12]
 8018984:	895b      	ldrh	r3, [r3, #10]
 8018986:	461a      	mov	r2, r3
 8018988:	693b      	ldr	r3, [r7, #16]
 801898a:	4293      	cmp	r3, r2
 801898c:	d3e6      	bcc.n	801895c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801898e:	68fb      	ldr	r3, [r7, #12]
 8018990:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018992:	693b      	ldr	r3, [r7, #16]
 8018994:	1ad2      	subs	r2, r2, r3
 8018996:	68fb      	ldr	r3, [r7, #12]
 8018998:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	697a      	ldr	r2, [r7, #20]
 801899e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80189a0:	6979      	ldr	r1, [r7, #20]
 80189a2:	68f8      	ldr	r0, [r7, #12]
 80189a4:	f7ff fb7a 	bl	801809c <clust2sect>
 80189a8:	4602      	mov	r2, r0
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	68ba      	ldr	r2, [r7, #8]
 80189b2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80189b4:	68fb      	ldr	r3, [r7, #12]
 80189b6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80189ba:	68fb      	ldr	r3, [r7, #12]
 80189bc:	899b      	ldrh	r3, [r3, #12]
 80189be:	461a      	mov	r2, r3
 80189c0:	68bb      	ldr	r3, [r7, #8]
 80189c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80189c6:	fb00 f202 	mul.w	r2, r0, r2
 80189ca:	1a9b      	subs	r3, r3, r2
 80189cc:	18ca      	adds	r2, r1, r3
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80189d2:	2300      	movs	r3, #0
}
 80189d4:	4618      	mov	r0, r3
 80189d6:	3718      	adds	r7, #24
 80189d8:	46bd      	mov	sp, r7
 80189da:	bd80      	pop	{r7, pc}

080189dc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80189dc:	b580      	push	{r7, lr}
 80189de:	b086      	sub	sp, #24
 80189e0:	af00      	add	r7, sp, #0
 80189e2:	6078      	str	r0, [r7, #4]
 80189e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	681b      	ldr	r3, [r3, #0]
 80189ea:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80189ec:	2100      	movs	r1, #0
 80189ee:	6878      	ldr	r0, [r7, #4]
 80189f0:	f7ff fe95 	bl	801871e <dir_sdi>
 80189f4:	4603      	mov	r3, r0
 80189f6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80189f8:	7dfb      	ldrb	r3, [r7, #23]
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d12b      	bne.n	8018a56 <dir_alloc+0x7a>
		n = 0;
 80189fe:	2300      	movs	r3, #0
 8018a00:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	69db      	ldr	r3, [r3, #28]
 8018a06:	4619      	mov	r1, r3
 8018a08:	68f8      	ldr	r0, [r7, #12]
 8018a0a:	f7ff faa9 	bl	8017f60 <move_window>
 8018a0e:	4603      	mov	r3, r0
 8018a10:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8018a12:	7dfb      	ldrb	r3, [r7, #23]
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	d11d      	bne.n	8018a54 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	6a1b      	ldr	r3, [r3, #32]
 8018a1c:	781b      	ldrb	r3, [r3, #0]
 8018a1e:	2be5      	cmp	r3, #229	@ 0xe5
 8018a20:	d004      	beq.n	8018a2c <dir_alloc+0x50>
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	6a1b      	ldr	r3, [r3, #32]
 8018a26:	781b      	ldrb	r3, [r3, #0]
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d107      	bne.n	8018a3c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8018a2c:	693b      	ldr	r3, [r7, #16]
 8018a2e:	3301      	adds	r3, #1
 8018a30:	613b      	str	r3, [r7, #16]
 8018a32:	693a      	ldr	r2, [r7, #16]
 8018a34:	683b      	ldr	r3, [r7, #0]
 8018a36:	429a      	cmp	r2, r3
 8018a38:	d102      	bne.n	8018a40 <dir_alloc+0x64>
 8018a3a:	e00c      	b.n	8018a56 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8018a3c:	2300      	movs	r3, #0
 8018a3e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8018a40:	2101      	movs	r1, #1
 8018a42:	6878      	ldr	r0, [r7, #4]
 8018a44:	f7ff fef4 	bl	8018830 <dir_next>
 8018a48:	4603      	mov	r3, r0
 8018a4a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8018a4c:	7dfb      	ldrb	r3, [r7, #23]
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d0d7      	beq.n	8018a02 <dir_alloc+0x26>
 8018a52:	e000      	b.n	8018a56 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8018a54:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8018a56:	7dfb      	ldrb	r3, [r7, #23]
 8018a58:	2b04      	cmp	r3, #4
 8018a5a:	d101      	bne.n	8018a60 <dir_alloc+0x84>
 8018a5c:	2307      	movs	r3, #7
 8018a5e:	75fb      	strb	r3, [r7, #23]
	return res;
 8018a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8018a62:	4618      	mov	r0, r3
 8018a64:	3718      	adds	r7, #24
 8018a66:	46bd      	mov	sp, r7
 8018a68:	bd80      	pop	{r7, pc}

08018a6a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8018a6a:	b580      	push	{r7, lr}
 8018a6c:	b084      	sub	sp, #16
 8018a6e:	af00      	add	r7, sp, #0
 8018a70:	6078      	str	r0, [r7, #4]
 8018a72:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8018a74:	683b      	ldr	r3, [r7, #0]
 8018a76:	331a      	adds	r3, #26
 8018a78:	4618      	mov	r0, r3
 8018a7a:	f7fe ffc1 	bl	8017a00 <ld_word>
 8018a7e:	4603      	mov	r3, r0
 8018a80:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	781b      	ldrb	r3, [r3, #0]
 8018a86:	2b03      	cmp	r3, #3
 8018a88:	d109      	bne.n	8018a9e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8018a8a:	683b      	ldr	r3, [r7, #0]
 8018a8c:	3314      	adds	r3, #20
 8018a8e:	4618      	mov	r0, r3
 8018a90:	f7fe ffb6 	bl	8017a00 <ld_word>
 8018a94:	4603      	mov	r3, r0
 8018a96:	041b      	lsls	r3, r3, #16
 8018a98:	68fa      	ldr	r2, [r7, #12]
 8018a9a:	4313      	orrs	r3, r2
 8018a9c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8018a9e:	68fb      	ldr	r3, [r7, #12]
}
 8018aa0:	4618      	mov	r0, r3
 8018aa2:	3710      	adds	r7, #16
 8018aa4:	46bd      	mov	sp, r7
 8018aa6:	bd80      	pop	{r7, pc}

08018aa8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8018aa8:	b580      	push	{r7, lr}
 8018aaa:	b084      	sub	sp, #16
 8018aac:	af00      	add	r7, sp, #0
 8018aae:	60f8      	str	r0, [r7, #12]
 8018ab0:	60b9      	str	r1, [r7, #8]
 8018ab2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8018ab4:	68bb      	ldr	r3, [r7, #8]
 8018ab6:	331a      	adds	r3, #26
 8018ab8:	687a      	ldr	r2, [r7, #4]
 8018aba:	b292      	uxth	r2, r2
 8018abc:	4611      	mov	r1, r2
 8018abe:	4618      	mov	r0, r3
 8018ac0:	f7fe ffd9 	bl	8017a76 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8018ac4:	68fb      	ldr	r3, [r7, #12]
 8018ac6:	781b      	ldrb	r3, [r3, #0]
 8018ac8:	2b03      	cmp	r3, #3
 8018aca:	d109      	bne.n	8018ae0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8018acc:	68bb      	ldr	r3, [r7, #8]
 8018ace:	f103 0214 	add.w	r2, r3, #20
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	0c1b      	lsrs	r3, r3, #16
 8018ad6:	b29b      	uxth	r3, r3
 8018ad8:	4619      	mov	r1, r3
 8018ada:	4610      	mov	r0, r2
 8018adc:	f7fe ffcb 	bl	8017a76 <st_word>
	}
}
 8018ae0:	bf00      	nop
 8018ae2:	3710      	adds	r7, #16
 8018ae4:	46bd      	mov	sp, r7
 8018ae6:	bd80      	pop	{r7, pc}

08018ae8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8018ae8:	b590      	push	{r4, r7, lr}
 8018aea:	b087      	sub	sp, #28
 8018aec:	af00      	add	r7, sp, #0
 8018aee:	6078      	str	r0, [r7, #4]
 8018af0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8018af2:	683b      	ldr	r3, [r7, #0]
 8018af4:	331a      	adds	r3, #26
 8018af6:	4618      	mov	r0, r3
 8018af8:	f7fe ff82 	bl	8017a00 <ld_word>
 8018afc:	4603      	mov	r3, r0
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	d001      	beq.n	8018b06 <cmp_lfn+0x1e>
 8018b02:	2300      	movs	r3, #0
 8018b04:	e059      	b.n	8018bba <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8018b06:	683b      	ldr	r3, [r7, #0]
 8018b08:	781b      	ldrb	r3, [r3, #0]
 8018b0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018b0e:	1e5a      	subs	r2, r3, #1
 8018b10:	4613      	mov	r3, r2
 8018b12:	005b      	lsls	r3, r3, #1
 8018b14:	4413      	add	r3, r2
 8018b16:	009b      	lsls	r3, r3, #2
 8018b18:	4413      	add	r3, r2
 8018b1a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8018b1c:	2301      	movs	r3, #1
 8018b1e:	81fb      	strh	r3, [r7, #14]
 8018b20:	2300      	movs	r3, #0
 8018b22:	613b      	str	r3, [r7, #16]
 8018b24:	e033      	b.n	8018b8e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8018b26:	4a27      	ldr	r2, [pc, #156]	@ (8018bc4 <cmp_lfn+0xdc>)
 8018b28:	693b      	ldr	r3, [r7, #16]
 8018b2a:	4413      	add	r3, r2
 8018b2c:	781b      	ldrb	r3, [r3, #0]
 8018b2e:	461a      	mov	r2, r3
 8018b30:	683b      	ldr	r3, [r7, #0]
 8018b32:	4413      	add	r3, r2
 8018b34:	4618      	mov	r0, r3
 8018b36:	f7fe ff63 	bl	8017a00 <ld_word>
 8018b3a:	4603      	mov	r3, r0
 8018b3c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8018b3e:	89fb      	ldrh	r3, [r7, #14]
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	d01a      	beq.n	8018b7a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8018b44:	697b      	ldr	r3, [r7, #20]
 8018b46:	2bfe      	cmp	r3, #254	@ 0xfe
 8018b48:	d812      	bhi.n	8018b70 <cmp_lfn+0x88>
 8018b4a:	89bb      	ldrh	r3, [r7, #12]
 8018b4c:	4618      	mov	r0, r3
 8018b4e:	f001 fe0d 	bl	801a76c <ff_wtoupper>
 8018b52:	4603      	mov	r3, r0
 8018b54:	461c      	mov	r4, r3
 8018b56:	697b      	ldr	r3, [r7, #20]
 8018b58:	1c5a      	adds	r2, r3, #1
 8018b5a:	617a      	str	r2, [r7, #20]
 8018b5c:	005b      	lsls	r3, r3, #1
 8018b5e:	687a      	ldr	r2, [r7, #4]
 8018b60:	4413      	add	r3, r2
 8018b62:	881b      	ldrh	r3, [r3, #0]
 8018b64:	4618      	mov	r0, r3
 8018b66:	f001 fe01 	bl	801a76c <ff_wtoupper>
 8018b6a:	4603      	mov	r3, r0
 8018b6c:	429c      	cmp	r4, r3
 8018b6e:	d001      	beq.n	8018b74 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8018b70:	2300      	movs	r3, #0
 8018b72:	e022      	b.n	8018bba <cmp_lfn+0xd2>
			}
			wc = uc;
 8018b74:	89bb      	ldrh	r3, [r7, #12]
 8018b76:	81fb      	strh	r3, [r7, #14]
 8018b78:	e006      	b.n	8018b88 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8018b7a:	89bb      	ldrh	r3, [r7, #12]
 8018b7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018b80:	4293      	cmp	r3, r2
 8018b82:	d001      	beq.n	8018b88 <cmp_lfn+0xa0>
 8018b84:	2300      	movs	r3, #0
 8018b86:	e018      	b.n	8018bba <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8018b88:	693b      	ldr	r3, [r7, #16]
 8018b8a:	3301      	adds	r3, #1
 8018b8c:	613b      	str	r3, [r7, #16]
 8018b8e:	693b      	ldr	r3, [r7, #16]
 8018b90:	2b0c      	cmp	r3, #12
 8018b92:	d9c8      	bls.n	8018b26 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8018b94:	683b      	ldr	r3, [r7, #0]
 8018b96:	781b      	ldrb	r3, [r3, #0]
 8018b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	d00b      	beq.n	8018bb8 <cmp_lfn+0xd0>
 8018ba0:	89fb      	ldrh	r3, [r7, #14]
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	d008      	beq.n	8018bb8 <cmp_lfn+0xd0>
 8018ba6:	697b      	ldr	r3, [r7, #20]
 8018ba8:	005b      	lsls	r3, r3, #1
 8018baa:	687a      	ldr	r2, [r7, #4]
 8018bac:	4413      	add	r3, r2
 8018bae:	881b      	ldrh	r3, [r3, #0]
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	d001      	beq.n	8018bb8 <cmp_lfn+0xd0>
 8018bb4:	2300      	movs	r3, #0
 8018bb6:	e000      	b.n	8018bba <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8018bb8:	2301      	movs	r3, #1
}
 8018bba:	4618      	mov	r0, r3
 8018bbc:	371c      	adds	r7, #28
 8018bbe:	46bd      	mov	sp, r7
 8018bc0:	bd90      	pop	{r4, r7, pc}
 8018bc2:	bf00      	nop
 8018bc4:	08020428 	.word	0x08020428

08018bc8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8018bc8:	b580      	push	{r7, lr}
 8018bca:	b088      	sub	sp, #32
 8018bcc:	af00      	add	r7, sp, #0
 8018bce:	60f8      	str	r0, [r7, #12]
 8018bd0:	60b9      	str	r1, [r7, #8]
 8018bd2:	4611      	mov	r1, r2
 8018bd4:	461a      	mov	r2, r3
 8018bd6:	460b      	mov	r3, r1
 8018bd8:	71fb      	strb	r3, [r7, #7]
 8018bda:	4613      	mov	r3, r2
 8018bdc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8018bde:	68bb      	ldr	r3, [r7, #8]
 8018be0:	330d      	adds	r3, #13
 8018be2:	79ba      	ldrb	r2, [r7, #6]
 8018be4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8018be6:	68bb      	ldr	r3, [r7, #8]
 8018be8:	330b      	adds	r3, #11
 8018bea:	220f      	movs	r2, #15
 8018bec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8018bee:	68bb      	ldr	r3, [r7, #8]
 8018bf0:	330c      	adds	r3, #12
 8018bf2:	2200      	movs	r2, #0
 8018bf4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8018bf6:	68bb      	ldr	r3, [r7, #8]
 8018bf8:	331a      	adds	r3, #26
 8018bfa:	2100      	movs	r1, #0
 8018bfc:	4618      	mov	r0, r3
 8018bfe:	f7fe ff3a 	bl	8017a76 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8018c02:	79fb      	ldrb	r3, [r7, #7]
 8018c04:	1e5a      	subs	r2, r3, #1
 8018c06:	4613      	mov	r3, r2
 8018c08:	005b      	lsls	r3, r3, #1
 8018c0a:	4413      	add	r3, r2
 8018c0c:	009b      	lsls	r3, r3, #2
 8018c0e:	4413      	add	r3, r2
 8018c10:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8018c12:	2300      	movs	r3, #0
 8018c14:	82fb      	strh	r3, [r7, #22]
 8018c16:	2300      	movs	r3, #0
 8018c18:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8018c1a:	8afb      	ldrh	r3, [r7, #22]
 8018c1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018c20:	4293      	cmp	r3, r2
 8018c22:	d007      	beq.n	8018c34 <put_lfn+0x6c>
 8018c24:	69fb      	ldr	r3, [r7, #28]
 8018c26:	1c5a      	adds	r2, r3, #1
 8018c28:	61fa      	str	r2, [r7, #28]
 8018c2a:	005b      	lsls	r3, r3, #1
 8018c2c:	68fa      	ldr	r2, [r7, #12]
 8018c2e:	4413      	add	r3, r2
 8018c30:	881b      	ldrh	r3, [r3, #0]
 8018c32:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8018c34:	4a17      	ldr	r2, [pc, #92]	@ (8018c94 <put_lfn+0xcc>)
 8018c36:	69bb      	ldr	r3, [r7, #24]
 8018c38:	4413      	add	r3, r2
 8018c3a:	781b      	ldrb	r3, [r3, #0]
 8018c3c:	461a      	mov	r2, r3
 8018c3e:	68bb      	ldr	r3, [r7, #8]
 8018c40:	4413      	add	r3, r2
 8018c42:	8afa      	ldrh	r2, [r7, #22]
 8018c44:	4611      	mov	r1, r2
 8018c46:	4618      	mov	r0, r3
 8018c48:	f7fe ff15 	bl	8017a76 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8018c4c:	8afb      	ldrh	r3, [r7, #22]
 8018c4e:	2b00      	cmp	r3, #0
 8018c50:	d102      	bne.n	8018c58 <put_lfn+0x90>
 8018c52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018c56:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8018c58:	69bb      	ldr	r3, [r7, #24]
 8018c5a:	3301      	adds	r3, #1
 8018c5c:	61bb      	str	r3, [r7, #24]
 8018c5e:	69bb      	ldr	r3, [r7, #24]
 8018c60:	2b0c      	cmp	r3, #12
 8018c62:	d9da      	bls.n	8018c1a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8018c64:	8afb      	ldrh	r3, [r7, #22]
 8018c66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018c6a:	4293      	cmp	r3, r2
 8018c6c:	d006      	beq.n	8018c7c <put_lfn+0xb4>
 8018c6e:	69fb      	ldr	r3, [r7, #28]
 8018c70:	005b      	lsls	r3, r3, #1
 8018c72:	68fa      	ldr	r2, [r7, #12]
 8018c74:	4413      	add	r3, r2
 8018c76:	881b      	ldrh	r3, [r3, #0]
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	d103      	bne.n	8018c84 <put_lfn+0xbc>
 8018c7c:	79fb      	ldrb	r3, [r7, #7]
 8018c7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018c82:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8018c84:	68bb      	ldr	r3, [r7, #8]
 8018c86:	79fa      	ldrb	r2, [r7, #7]
 8018c88:	701a      	strb	r2, [r3, #0]
}
 8018c8a:	bf00      	nop
 8018c8c:	3720      	adds	r7, #32
 8018c8e:	46bd      	mov	sp, r7
 8018c90:	bd80      	pop	{r7, pc}
 8018c92:	bf00      	nop
 8018c94:	08020428 	.word	0x08020428

08018c98 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8018c98:	b580      	push	{r7, lr}
 8018c9a:	b08c      	sub	sp, #48	@ 0x30
 8018c9c:	af00      	add	r7, sp, #0
 8018c9e:	60f8      	str	r0, [r7, #12]
 8018ca0:	60b9      	str	r1, [r7, #8]
 8018ca2:	607a      	str	r2, [r7, #4]
 8018ca4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8018ca6:	220b      	movs	r2, #11
 8018ca8:	68b9      	ldr	r1, [r7, #8]
 8018caa:	68f8      	ldr	r0, [r7, #12]
 8018cac:	f7fe ff2a 	bl	8017b04 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8018cb0:	683b      	ldr	r3, [r7, #0]
 8018cb2:	2b05      	cmp	r3, #5
 8018cb4:	d929      	bls.n	8018d0a <gen_numname+0x72>
		sr = seq;
 8018cb6:	683b      	ldr	r3, [r7, #0]
 8018cb8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8018cba:	e020      	b.n	8018cfe <gen_numname+0x66>
			wc = *lfn++;
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	1c9a      	adds	r2, r3, #2
 8018cc0:	607a      	str	r2, [r7, #4]
 8018cc2:	881b      	ldrh	r3, [r3, #0]
 8018cc4:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8018cc6:	2300      	movs	r3, #0
 8018cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018cca:	e015      	b.n	8018cf8 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8018ccc:	69fb      	ldr	r3, [r7, #28]
 8018cce:	005a      	lsls	r2, r3, #1
 8018cd0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018cd2:	f003 0301 	and.w	r3, r3, #1
 8018cd6:	4413      	add	r3, r2
 8018cd8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8018cda:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018cdc:	085b      	lsrs	r3, r3, #1
 8018cde:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8018ce0:	69fb      	ldr	r3, [r7, #28]
 8018ce2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d003      	beq.n	8018cf2 <gen_numname+0x5a>
 8018cea:	69fa      	ldr	r2, [r7, #28]
 8018cec:	4b30      	ldr	r3, [pc, #192]	@ (8018db0 <gen_numname+0x118>)
 8018cee:	4053      	eors	r3, r2
 8018cf0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8018cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018cf4:	3301      	adds	r3, #1
 8018cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018cfa:	2b0f      	cmp	r3, #15
 8018cfc:	d9e6      	bls.n	8018ccc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	881b      	ldrh	r3, [r3, #0]
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	d1da      	bne.n	8018cbc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8018d06:	69fb      	ldr	r3, [r7, #28]
 8018d08:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8018d0a:	2307      	movs	r3, #7
 8018d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8018d0e:	683b      	ldr	r3, [r7, #0]
 8018d10:	b2db      	uxtb	r3, r3
 8018d12:	f003 030f 	and.w	r3, r3, #15
 8018d16:	b2db      	uxtb	r3, r3
 8018d18:	3330      	adds	r3, #48	@ 0x30
 8018d1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8018d1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018d22:	2b39      	cmp	r3, #57	@ 0x39
 8018d24:	d904      	bls.n	8018d30 <gen_numname+0x98>
 8018d26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018d2a:	3307      	adds	r3, #7
 8018d2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8018d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d32:	1e5a      	subs	r2, r3, #1
 8018d34:	62ba      	str	r2, [r7, #40]	@ 0x28
 8018d36:	3330      	adds	r3, #48	@ 0x30
 8018d38:	443b      	add	r3, r7
 8018d3a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8018d3e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8018d42:	683b      	ldr	r3, [r7, #0]
 8018d44:	091b      	lsrs	r3, r3, #4
 8018d46:	603b      	str	r3, [r7, #0]
	} while (seq);
 8018d48:	683b      	ldr	r3, [r7, #0]
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	d1df      	bne.n	8018d0e <gen_numname+0x76>
	ns[i] = '~';
 8018d4e:	f107 0214 	add.w	r2, r7, #20
 8018d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d54:	4413      	add	r3, r2
 8018d56:	227e      	movs	r2, #126	@ 0x7e
 8018d58:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8018d5a:	2300      	movs	r3, #0
 8018d5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8018d5e:	e002      	b.n	8018d66 <gen_numname+0xce>
 8018d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d62:	3301      	adds	r3, #1
 8018d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8018d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d6a:	429a      	cmp	r2, r3
 8018d6c:	d205      	bcs.n	8018d7a <gen_numname+0xe2>
 8018d6e:	68fa      	ldr	r2, [r7, #12]
 8018d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d72:	4413      	add	r3, r2
 8018d74:	781b      	ldrb	r3, [r3, #0]
 8018d76:	2b20      	cmp	r3, #32
 8018d78:	d1f2      	bne.n	8018d60 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8018d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d7c:	2b07      	cmp	r3, #7
 8018d7e:	d807      	bhi.n	8018d90 <gen_numname+0xf8>
 8018d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d82:	1c5a      	adds	r2, r3, #1
 8018d84:	62ba      	str	r2, [r7, #40]	@ 0x28
 8018d86:	3330      	adds	r3, #48	@ 0x30
 8018d88:	443b      	add	r3, r7
 8018d8a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8018d8e:	e000      	b.n	8018d92 <gen_numname+0xfa>
 8018d90:	2120      	movs	r1, #32
 8018d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d94:	1c5a      	adds	r2, r3, #1
 8018d96:	627a      	str	r2, [r7, #36]	@ 0x24
 8018d98:	68fa      	ldr	r2, [r7, #12]
 8018d9a:	4413      	add	r3, r2
 8018d9c:	460a      	mov	r2, r1
 8018d9e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8018da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018da2:	2b07      	cmp	r3, #7
 8018da4:	d9e9      	bls.n	8018d7a <gen_numname+0xe2>
}
 8018da6:	bf00      	nop
 8018da8:	bf00      	nop
 8018daa:	3730      	adds	r7, #48	@ 0x30
 8018dac:	46bd      	mov	sp, r7
 8018dae:	bd80      	pop	{r7, pc}
 8018db0:	00011021 	.word	0x00011021

08018db4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8018db4:	b480      	push	{r7}
 8018db6:	b085      	sub	sp, #20
 8018db8:	af00      	add	r7, sp, #0
 8018dba:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8018dbc:	2300      	movs	r3, #0
 8018dbe:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8018dc0:	230b      	movs	r3, #11
 8018dc2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8018dc4:	7bfb      	ldrb	r3, [r7, #15]
 8018dc6:	b2da      	uxtb	r2, r3
 8018dc8:	0852      	lsrs	r2, r2, #1
 8018dca:	01db      	lsls	r3, r3, #7
 8018dcc:	4313      	orrs	r3, r2
 8018dce:	b2da      	uxtb	r2, r3
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	1c59      	adds	r1, r3, #1
 8018dd4:	6079      	str	r1, [r7, #4]
 8018dd6:	781b      	ldrb	r3, [r3, #0]
 8018dd8:	4413      	add	r3, r2
 8018dda:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8018ddc:	68bb      	ldr	r3, [r7, #8]
 8018dde:	3b01      	subs	r3, #1
 8018de0:	60bb      	str	r3, [r7, #8]
 8018de2:	68bb      	ldr	r3, [r7, #8]
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	d1ed      	bne.n	8018dc4 <sum_sfn+0x10>
	return sum;
 8018de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8018dea:	4618      	mov	r0, r3
 8018dec:	3714      	adds	r7, #20
 8018dee:	46bd      	mov	sp, r7
 8018df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018df4:	4770      	bx	lr

08018df6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8018df6:	b580      	push	{r7, lr}
 8018df8:	b086      	sub	sp, #24
 8018dfa:	af00      	add	r7, sp, #0
 8018dfc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8018e04:	2100      	movs	r1, #0
 8018e06:	6878      	ldr	r0, [r7, #4]
 8018e08:	f7ff fc89 	bl	801871e <dir_sdi>
 8018e0c:	4603      	mov	r3, r0
 8018e0e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8018e10:	7dfb      	ldrb	r3, [r7, #23]
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d001      	beq.n	8018e1a <dir_find+0x24>
 8018e16:	7dfb      	ldrb	r3, [r7, #23]
 8018e18:	e0a9      	b.n	8018f6e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018e1a:	23ff      	movs	r3, #255	@ 0xff
 8018e1c:	753b      	strb	r3, [r7, #20]
 8018e1e:	7d3b      	ldrb	r3, [r7, #20]
 8018e20:	757b      	strb	r3, [r7, #21]
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018e28:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	69db      	ldr	r3, [r3, #28]
 8018e2e:	4619      	mov	r1, r3
 8018e30:	6938      	ldr	r0, [r7, #16]
 8018e32:	f7ff f895 	bl	8017f60 <move_window>
 8018e36:	4603      	mov	r3, r0
 8018e38:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8018e3a:	7dfb      	ldrb	r3, [r7, #23]
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	f040 8090 	bne.w	8018f62 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	6a1b      	ldr	r3, [r3, #32]
 8018e46:	781b      	ldrb	r3, [r3, #0]
 8018e48:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8018e4a:	7dbb      	ldrb	r3, [r7, #22]
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d102      	bne.n	8018e56 <dir_find+0x60>
 8018e50:	2304      	movs	r3, #4
 8018e52:	75fb      	strb	r3, [r7, #23]
 8018e54:	e08a      	b.n	8018f6c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	6a1b      	ldr	r3, [r3, #32]
 8018e5a:	330b      	adds	r3, #11
 8018e5c:	781b      	ldrb	r3, [r3, #0]
 8018e5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018e62:	73fb      	strb	r3, [r7, #15]
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	7bfa      	ldrb	r2, [r7, #15]
 8018e68:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8018e6a:	7dbb      	ldrb	r3, [r7, #22]
 8018e6c:	2be5      	cmp	r3, #229	@ 0xe5
 8018e6e:	d007      	beq.n	8018e80 <dir_find+0x8a>
 8018e70:	7bfb      	ldrb	r3, [r7, #15]
 8018e72:	f003 0308 	and.w	r3, r3, #8
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d009      	beq.n	8018e8e <dir_find+0x98>
 8018e7a:	7bfb      	ldrb	r3, [r7, #15]
 8018e7c:	2b0f      	cmp	r3, #15
 8018e7e:	d006      	beq.n	8018e8e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018e80:	23ff      	movs	r3, #255	@ 0xff
 8018e82:	757b      	strb	r3, [r7, #21]
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018e8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8018e8c:	e05e      	b.n	8018f4c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8018e8e:	7bfb      	ldrb	r3, [r7, #15]
 8018e90:	2b0f      	cmp	r3, #15
 8018e92:	d136      	bne.n	8018f02 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8018e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d154      	bne.n	8018f4c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8018ea2:	7dbb      	ldrb	r3, [r7, #22]
 8018ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d00d      	beq.n	8018ec8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	6a1b      	ldr	r3, [r3, #32]
 8018eb0:	7b5b      	ldrb	r3, [r3, #13]
 8018eb2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8018eb4:	7dbb      	ldrb	r3, [r7, #22]
 8018eb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8018eba:	75bb      	strb	r3, [r7, #22]
 8018ebc:	7dbb      	ldrb	r3, [r7, #22]
 8018ebe:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	695a      	ldr	r2, [r3, #20]
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8018ec8:	7dba      	ldrb	r2, [r7, #22]
 8018eca:	7d7b      	ldrb	r3, [r7, #21]
 8018ecc:	429a      	cmp	r2, r3
 8018ece:	d115      	bne.n	8018efc <dir_find+0x106>
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	6a1b      	ldr	r3, [r3, #32]
 8018ed4:	330d      	adds	r3, #13
 8018ed6:	781b      	ldrb	r3, [r3, #0]
 8018ed8:	7d3a      	ldrb	r2, [r7, #20]
 8018eda:	429a      	cmp	r2, r3
 8018edc:	d10e      	bne.n	8018efc <dir_find+0x106>
 8018ede:	693b      	ldr	r3, [r7, #16]
 8018ee0:	691a      	ldr	r2, [r3, #16]
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	6a1b      	ldr	r3, [r3, #32]
 8018ee6:	4619      	mov	r1, r3
 8018ee8:	4610      	mov	r0, r2
 8018eea:	f7ff fdfd 	bl	8018ae8 <cmp_lfn>
 8018eee:	4603      	mov	r3, r0
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	d003      	beq.n	8018efc <dir_find+0x106>
 8018ef4:	7d7b      	ldrb	r3, [r7, #21]
 8018ef6:	3b01      	subs	r3, #1
 8018ef8:	b2db      	uxtb	r3, r3
 8018efa:	e000      	b.n	8018efe <dir_find+0x108>
 8018efc:	23ff      	movs	r3, #255	@ 0xff
 8018efe:	757b      	strb	r3, [r7, #21]
 8018f00:	e024      	b.n	8018f4c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8018f02:	7d7b      	ldrb	r3, [r7, #21]
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	d109      	bne.n	8018f1c <dir_find+0x126>
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	6a1b      	ldr	r3, [r3, #32]
 8018f0c:	4618      	mov	r0, r3
 8018f0e:	f7ff ff51 	bl	8018db4 <sum_sfn>
 8018f12:	4603      	mov	r3, r0
 8018f14:	461a      	mov	r2, r3
 8018f16:	7d3b      	ldrb	r3, [r7, #20]
 8018f18:	4293      	cmp	r3, r2
 8018f1a:	d024      	beq.n	8018f66 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8018f22:	f003 0301 	and.w	r3, r3, #1
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d10a      	bne.n	8018f40 <dir_find+0x14a>
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	6a18      	ldr	r0, [r3, #32]
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	3324      	adds	r3, #36	@ 0x24
 8018f32:	220b      	movs	r2, #11
 8018f34:	4619      	mov	r1, r3
 8018f36:	f7fe fe21 	bl	8017b7c <mem_cmp>
 8018f3a:	4603      	mov	r3, r0
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d014      	beq.n	8018f6a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018f40:	23ff      	movs	r3, #255	@ 0xff
 8018f42:	757b      	strb	r3, [r7, #21]
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018f4a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8018f4c:	2100      	movs	r1, #0
 8018f4e:	6878      	ldr	r0, [r7, #4]
 8018f50:	f7ff fc6e 	bl	8018830 <dir_next>
 8018f54:	4603      	mov	r3, r0
 8018f56:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8018f58:	7dfb      	ldrb	r3, [r7, #23]
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	f43f af65 	beq.w	8018e2a <dir_find+0x34>
 8018f60:	e004      	b.n	8018f6c <dir_find+0x176>
		if (res != FR_OK) break;
 8018f62:	bf00      	nop
 8018f64:	e002      	b.n	8018f6c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8018f66:	bf00      	nop
 8018f68:	e000      	b.n	8018f6c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8018f6a:	bf00      	nop

	return res;
 8018f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8018f6e:	4618      	mov	r0, r3
 8018f70:	3718      	adds	r7, #24
 8018f72:	46bd      	mov	sp, r7
 8018f74:	bd80      	pop	{r7, pc}
	...

08018f78 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8018f78:	b580      	push	{r7, lr}
 8018f7a:	b08c      	sub	sp, #48	@ 0x30
 8018f7c:	af00      	add	r7, sp, #0
 8018f7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	681b      	ldr	r3, [r3, #0]
 8018f84:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8018f8c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	d001      	beq.n	8018f98 <dir_register+0x20>
 8018f94:	2306      	movs	r3, #6
 8018f96:	e0e0      	b.n	801915a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8018f98:	2300      	movs	r3, #0
 8018f9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8018f9c:	e002      	b.n	8018fa4 <dir_register+0x2c>
 8018f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fa0:	3301      	adds	r3, #1
 8018fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8018fa4:	69fb      	ldr	r3, [r7, #28]
 8018fa6:	691a      	ldr	r2, [r3, #16]
 8018fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018faa:	005b      	lsls	r3, r3, #1
 8018fac:	4413      	add	r3, r2
 8018fae:	881b      	ldrh	r3, [r3, #0]
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	d1f4      	bne.n	8018f9e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8018fba:	f107 030c 	add.w	r3, r7, #12
 8018fbe:	220c      	movs	r2, #12
 8018fc0:	4618      	mov	r0, r3
 8018fc2:	f7fe fd9f 	bl	8017b04 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8018fc6:	7dfb      	ldrb	r3, [r7, #23]
 8018fc8:	f003 0301 	and.w	r3, r3, #1
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d032      	beq.n	8019036 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	2240      	movs	r2, #64	@ 0x40
 8018fd4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8018fd8:	2301      	movs	r3, #1
 8018fda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018fdc:	e016      	b.n	801900c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8018fe4:	69fb      	ldr	r3, [r7, #28]
 8018fe6:	691a      	ldr	r2, [r3, #16]
 8018fe8:	f107 010c 	add.w	r1, r7, #12
 8018fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018fee:	f7ff fe53 	bl	8018c98 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8018ff2:	6878      	ldr	r0, [r7, #4]
 8018ff4:	f7ff feff 	bl	8018df6 <dir_find>
 8018ff8:	4603      	mov	r3, r0
 8018ffa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8018ffe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8019002:	2b00      	cmp	r3, #0
 8019004:	d106      	bne.n	8019014 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8019006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019008:	3301      	adds	r3, #1
 801900a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801900c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801900e:	2b63      	cmp	r3, #99	@ 0x63
 8019010:	d9e5      	bls.n	8018fde <dir_register+0x66>
 8019012:	e000      	b.n	8019016 <dir_register+0x9e>
			if (res != FR_OK) break;
 8019014:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8019016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019018:	2b64      	cmp	r3, #100	@ 0x64
 801901a:	d101      	bne.n	8019020 <dir_register+0xa8>
 801901c:	2307      	movs	r3, #7
 801901e:	e09c      	b.n	801915a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8019020:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8019024:	2b04      	cmp	r3, #4
 8019026:	d002      	beq.n	801902e <dir_register+0xb6>
 8019028:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801902c:	e095      	b.n	801915a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801902e:	7dfa      	ldrb	r2, [r7, #23]
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8019036:	7dfb      	ldrb	r3, [r7, #23]
 8019038:	f003 0302 	and.w	r3, r3, #2
 801903c:	2b00      	cmp	r3, #0
 801903e:	d007      	beq.n	8019050 <dir_register+0xd8>
 8019040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019042:	330c      	adds	r3, #12
 8019044:	4a47      	ldr	r2, [pc, #284]	@ (8019164 <dir_register+0x1ec>)
 8019046:	fba2 2303 	umull	r2, r3, r2, r3
 801904a:	089b      	lsrs	r3, r3, #2
 801904c:	3301      	adds	r3, #1
 801904e:	e000      	b.n	8019052 <dir_register+0xda>
 8019050:	2301      	movs	r3, #1
 8019052:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8019054:	6a39      	ldr	r1, [r7, #32]
 8019056:	6878      	ldr	r0, [r7, #4]
 8019058:	f7ff fcc0 	bl	80189dc <dir_alloc>
 801905c:	4603      	mov	r3, r0
 801905e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8019062:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8019066:	2b00      	cmp	r3, #0
 8019068:	d148      	bne.n	80190fc <dir_register+0x184>
 801906a:	6a3b      	ldr	r3, [r7, #32]
 801906c:	3b01      	subs	r3, #1
 801906e:	623b      	str	r3, [r7, #32]
 8019070:	6a3b      	ldr	r3, [r7, #32]
 8019072:	2b00      	cmp	r3, #0
 8019074:	d042      	beq.n	80190fc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	695a      	ldr	r2, [r3, #20]
 801907a:	6a3b      	ldr	r3, [r7, #32]
 801907c:	015b      	lsls	r3, r3, #5
 801907e:	1ad3      	subs	r3, r2, r3
 8019080:	4619      	mov	r1, r3
 8019082:	6878      	ldr	r0, [r7, #4]
 8019084:	f7ff fb4b 	bl	801871e <dir_sdi>
 8019088:	4603      	mov	r3, r0
 801908a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801908e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8019092:	2b00      	cmp	r3, #0
 8019094:	d132      	bne.n	80190fc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	3324      	adds	r3, #36	@ 0x24
 801909a:	4618      	mov	r0, r3
 801909c:	f7ff fe8a 	bl	8018db4 <sum_sfn>
 80190a0:	4603      	mov	r3, r0
 80190a2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	69db      	ldr	r3, [r3, #28]
 80190a8:	4619      	mov	r1, r3
 80190aa:	69f8      	ldr	r0, [r7, #28]
 80190ac:	f7fe ff58 	bl	8017f60 <move_window>
 80190b0:	4603      	mov	r3, r0
 80190b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80190b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	d11d      	bne.n	80190fa <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80190be:	69fb      	ldr	r3, [r7, #28]
 80190c0:	6918      	ldr	r0, [r3, #16]
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	6a19      	ldr	r1, [r3, #32]
 80190c6:	6a3b      	ldr	r3, [r7, #32]
 80190c8:	b2da      	uxtb	r2, r3
 80190ca:	7efb      	ldrb	r3, [r7, #27]
 80190cc:	f7ff fd7c 	bl	8018bc8 <put_lfn>
				fs->wflag = 1;
 80190d0:	69fb      	ldr	r3, [r7, #28]
 80190d2:	2201      	movs	r2, #1
 80190d4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80190d6:	2100      	movs	r1, #0
 80190d8:	6878      	ldr	r0, [r7, #4]
 80190da:	f7ff fba9 	bl	8018830 <dir_next>
 80190de:	4603      	mov	r3, r0
 80190e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 80190e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	d107      	bne.n	80190fc <dir_register+0x184>
 80190ec:	6a3b      	ldr	r3, [r7, #32]
 80190ee:	3b01      	subs	r3, #1
 80190f0:	623b      	str	r3, [r7, #32]
 80190f2:	6a3b      	ldr	r3, [r7, #32]
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	d1d5      	bne.n	80190a4 <dir_register+0x12c>
 80190f8:	e000      	b.n	80190fc <dir_register+0x184>
				if (res != FR_OK) break;
 80190fa:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80190fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8019100:	2b00      	cmp	r3, #0
 8019102:	d128      	bne.n	8019156 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	69db      	ldr	r3, [r3, #28]
 8019108:	4619      	mov	r1, r3
 801910a:	69f8      	ldr	r0, [r7, #28]
 801910c:	f7fe ff28 	bl	8017f60 <move_window>
 8019110:	4603      	mov	r3, r0
 8019112:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8019116:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801911a:	2b00      	cmp	r3, #0
 801911c:	d11b      	bne.n	8019156 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	6a1b      	ldr	r3, [r3, #32]
 8019122:	2220      	movs	r2, #32
 8019124:	2100      	movs	r1, #0
 8019126:	4618      	mov	r0, r3
 8019128:	f7fe fd0d 	bl	8017b46 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	6a18      	ldr	r0, [r3, #32]
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	3324      	adds	r3, #36	@ 0x24
 8019134:	220b      	movs	r2, #11
 8019136:	4619      	mov	r1, r3
 8019138:	f7fe fce4 	bl	8017b04 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	6a1b      	ldr	r3, [r3, #32]
 8019146:	330c      	adds	r3, #12
 8019148:	f002 0218 	and.w	r2, r2, #24
 801914c:	b2d2      	uxtb	r2, r2
 801914e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8019150:	69fb      	ldr	r3, [r7, #28]
 8019152:	2201      	movs	r2, #1
 8019154:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8019156:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801915a:	4618      	mov	r0, r3
 801915c:	3730      	adds	r7, #48	@ 0x30
 801915e:	46bd      	mov	sp, r7
 8019160:	bd80      	pop	{r7, pc}
 8019162:	bf00      	nop
 8019164:	4ec4ec4f 	.word	0x4ec4ec4f

08019168 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8019168:	b580      	push	{r7, lr}
 801916a:	b08a      	sub	sp, #40	@ 0x28
 801916c:	af00      	add	r7, sp, #0
 801916e:	6078      	str	r0, [r7, #4]
 8019170:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8019172:	683b      	ldr	r3, [r7, #0]
 8019174:	681b      	ldr	r3, [r3, #0]
 8019176:	613b      	str	r3, [r7, #16]
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	681b      	ldr	r3, [r3, #0]
 801917c:	691b      	ldr	r3, [r3, #16]
 801917e:	60fb      	str	r3, [r7, #12]
 8019180:	2300      	movs	r3, #0
 8019182:	617b      	str	r3, [r7, #20]
 8019184:	697b      	ldr	r3, [r7, #20]
 8019186:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8019188:	69bb      	ldr	r3, [r7, #24]
 801918a:	1c5a      	adds	r2, r3, #1
 801918c:	61ba      	str	r2, [r7, #24]
 801918e:	693a      	ldr	r2, [r7, #16]
 8019190:	4413      	add	r3, r2
 8019192:	781b      	ldrb	r3, [r3, #0]
 8019194:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8019196:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019198:	2b1f      	cmp	r3, #31
 801919a:	d940      	bls.n	801921e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801919c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801919e:	2b2f      	cmp	r3, #47	@ 0x2f
 80191a0:	d006      	beq.n	80191b0 <create_name+0x48>
 80191a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80191a4:	2b5c      	cmp	r3, #92	@ 0x5c
 80191a6:	d110      	bne.n	80191ca <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80191a8:	e002      	b.n	80191b0 <create_name+0x48>
 80191aa:	69bb      	ldr	r3, [r7, #24]
 80191ac:	3301      	adds	r3, #1
 80191ae:	61bb      	str	r3, [r7, #24]
 80191b0:	693a      	ldr	r2, [r7, #16]
 80191b2:	69bb      	ldr	r3, [r7, #24]
 80191b4:	4413      	add	r3, r2
 80191b6:	781b      	ldrb	r3, [r3, #0]
 80191b8:	2b2f      	cmp	r3, #47	@ 0x2f
 80191ba:	d0f6      	beq.n	80191aa <create_name+0x42>
 80191bc:	693a      	ldr	r2, [r7, #16]
 80191be:	69bb      	ldr	r3, [r7, #24]
 80191c0:	4413      	add	r3, r2
 80191c2:	781b      	ldrb	r3, [r3, #0]
 80191c4:	2b5c      	cmp	r3, #92	@ 0x5c
 80191c6:	d0f0      	beq.n	80191aa <create_name+0x42>
			break;
 80191c8:	e02a      	b.n	8019220 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80191ca:	697b      	ldr	r3, [r7, #20]
 80191cc:	2bfe      	cmp	r3, #254	@ 0xfe
 80191ce:	d901      	bls.n	80191d4 <create_name+0x6c>
 80191d0:	2306      	movs	r3, #6
 80191d2:	e17d      	b.n	80194d0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80191d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80191d6:	b2db      	uxtb	r3, r3
 80191d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80191da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80191dc:	2101      	movs	r1, #1
 80191de:	4618      	mov	r0, r3
 80191e0:	f001 fa88 	bl	801a6f4 <ff_convert>
 80191e4:	4603      	mov	r3, r0
 80191e6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80191e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	d101      	bne.n	80191f2 <create_name+0x8a>
 80191ee:	2306      	movs	r3, #6
 80191f0:	e16e      	b.n	80194d0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80191f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80191f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80191f6:	d809      	bhi.n	801920c <create_name+0xa4>
 80191f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80191fa:	4619      	mov	r1, r3
 80191fc:	488d      	ldr	r0, [pc, #564]	@ (8019434 <create_name+0x2cc>)
 80191fe:	f7fe fce4 	bl	8017bca <chk_chr>
 8019202:	4603      	mov	r3, r0
 8019204:	2b00      	cmp	r3, #0
 8019206:	d001      	beq.n	801920c <create_name+0xa4>
 8019208:	2306      	movs	r3, #6
 801920a:	e161      	b.n	80194d0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801920c:	697b      	ldr	r3, [r7, #20]
 801920e:	1c5a      	adds	r2, r3, #1
 8019210:	617a      	str	r2, [r7, #20]
 8019212:	005b      	lsls	r3, r3, #1
 8019214:	68fa      	ldr	r2, [r7, #12]
 8019216:	4413      	add	r3, r2
 8019218:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801921a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801921c:	e7b4      	b.n	8019188 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801921e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8019220:	693a      	ldr	r2, [r7, #16]
 8019222:	69bb      	ldr	r3, [r7, #24]
 8019224:	441a      	add	r2, r3
 8019226:	683b      	ldr	r3, [r7, #0]
 8019228:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801922a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801922c:	2b1f      	cmp	r3, #31
 801922e:	d801      	bhi.n	8019234 <create_name+0xcc>
 8019230:	2304      	movs	r3, #4
 8019232:	e000      	b.n	8019236 <create_name+0xce>
 8019234:	2300      	movs	r3, #0
 8019236:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801923a:	e011      	b.n	8019260 <create_name+0xf8>
		w = lfn[di - 1];
 801923c:	697a      	ldr	r2, [r7, #20]
 801923e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8019242:	4413      	add	r3, r2
 8019244:	005b      	lsls	r3, r3, #1
 8019246:	68fa      	ldr	r2, [r7, #12]
 8019248:	4413      	add	r3, r2
 801924a:	881b      	ldrh	r3, [r3, #0]
 801924c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801924e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019250:	2b20      	cmp	r3, #32
 8019252:	d002      	beq.n	801925a <create_name+0xf2>
 8019254:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019256:	2b2e      	cmp	r3, #46	@ 0x2e
 8019258:	d106      	bne.n	8019268 <create_name+0x100>
		di--;
 801925a:	697b      	ldr	r3, [r7, #20]
 801925c:	3b01      	subs	r3, #1
 801925e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8019260:	697b      	ldr	r3, [r7, #20]
 8019262:	2b00      	cmp	r3, #0
 8019264:	d1ea      	bne.n	801923c <create_name+0xd4>
 8019266:	e000      	b.n	801926a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8019268:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801926a:	697b      	ldr	r3, [r7, #20]
 801926c:	005b      	lsls	r3, r3, #1
 801926e:	68fa      	ldr	r2, [r7, #12]
 8019270:	4413      	add	r3, r2
 8019272:	2200      	movs	r2, #0
 8019274:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8019276:	697b      	ldr	r3, [r7, #20]
 8019278:	2b00      	cmp	r3, #0
 801927a:	d101      	bne.n	8019280 <create_name+0x118>
 801927c:	2306      	movs	r3, #6
 801927e:	e127      	b.n	80194d0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	3324      	adds	r3, #36	@ 0x24
 8019284:	220b      	movs	r2, #11
 8019286:	2120      	movs	r1, #32
 8019288:	4618      	mov	r0, r3
 801928a:	f7fe fc5c 	bl	8017b46 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801928e:	2300      	movs	r3, #0
 8019290:	61bb      	str	r3, [r7, #24]
 8019292:	e002      	b.n	801929a <create_name+0x132>
 8019294:	69bb      	ldr	r3, [r7, #24]
 8019296:	3301      	adds	r3, #1
 8019298:	61bb      	str	r3, [r7, #24]
 801929a:	69bb      	ldr	r3, [r7, #24]
 801929c:	005b      	lsls	r3, r3, #1
 801929e:	68fa      	ldr	r2, [r7, #12]
 80192a0:	4413      	add	r3, r2
 80192a2:	881b      	ldrh	r3, [r3, #0]
 80192a4:	2b20      	cmp	r3, #32
 80192a6:	d0f5      	beq.n	8019294 <create_name+0x12c>
 80192a8:	69bb      	ldr	r3, [r7, #24]
 80192aa:	005b      	lsls	r3, r3, #1
 80192ac:	68fa      	ldr	r2, [r7, #12]
 80192ae:	4413      	add	r3, r2
 80192b0:	881b      	ldrh	r3, [r3, #0]
 80192b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80192b4:	d0ee      	beq.n	8019294 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80192b6:	69bb      	ldr	r3, [r7, #24]
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d009      	beq.n	80192d0 <create_name+0x168>
 80192bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80192c0:	f043 0303 	orr.w	r3, r3, #3
 80192c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80192c8:	e002      	b.n	80192d0 <create_name+0x168>
 80192ca:	697b      	ldr	r3, [r7, #20]
 80192cc:	3b01      	subs	r3, #1
 80192ce:	617b      	str	r3, [r7, #20]
 80192d0:	697b      	ldr	r3, [r7, #20]
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	d009      	beq.n	80192ea <create_name+0x182>
 80192d6:	697a      	ldr	r2, [r7, #20]
 80192d8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80192dc:	4413      	add	r3, r2
 80192de:	005b      	lsls	r3, r3, #1
 80192e0:	68fa      	ldr	r2, [r7, #12]
 80192e2:	4413      	add	r3, r2
 80192e4:	881b      	ldrh	r3, [r3, #0]
 80192e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80192e8:	d1ef      	bne.n	80192ca <create_name+0x162>

	i = b = 0; ni = 8;
 80192ea:	2300      	movs	r3, #0
 80192ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80192f0:	2300      	movs	r3, #0
 80192f2:	623b      	str	r3, [r7, #32]
 80192f4:	2308      	movs	r3, #8
 80192f6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80192f8:	69bb      	ldr	r3, [r7, #24]
 80192fa:	1c5a      	adds	r2, r3, #1
 80192fc:	61ba      	str	r2, [r7, #24]
 80192fe:	005b      	lsls	r3, r3, #1
 8019300:	68fa      	ldr	r2, [r7, #12]
 8019302:	4413      	add	r3, r2
 8019304:	881b      	ldrh	r3, [r3, #0]
 8019306:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8019308:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801930a:	2b00      	cmp	r3, #0
 801930c:	f000 8090 	beq.w	8019430 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8019310:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019312:	2b20      	cmp	r3, #32
 8019314:	d006      	beq.n	8019324 <create_name+0x1bc>
 8019316:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019318:	2b2e      	cmp	r3, #46	@ 0x2e
 801931a:	d10a      	bne.n	8019332 <create_name+0x1ca>
 801931c:	69ba      	ldr	r2, [r7, #24]
 801931e:	697b      	ldr	r3, [r7, #20]
 8019320:	429a      	cmp	r2, r3
 8019322:	d006      	beq.n	8019332 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8019324:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019328:	f043 0303 	orr.w	r3, r3, #3
 801932c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019330:	e07d      	b.n	801942e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8019332:	6a3a      	ldr	r2, [r7, #32]
 8019334:	69fb      	ldr	r3, [r7, #28]
 8019336:	429a      	cmp	r2, r3
 8019338:	d203      	bcs.n	8019342 <create_name+0x1da>
 801933a:	69ba      	ldr	r2, [r7, #24]
 801933c:	697b      	ldr	r3, [r7, #20]
 801933e:	429a      	cmp	r2, r3
 8019340:	d123      	bne.n	801938a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8019342:	69fb      	ldr	r3, [r7, #28]
 8019344:	2b0b      	cmp	r3, #11
 8019346:	d106      	bne.n	8019356 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8019348:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801934c:	f043 0303 	orr.w	r3, r3, #3
 8019350:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019354:	e075      	b.n	8019442 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8019356:	69ba      	ldr	r2, [r7, #24]
 8019358:	697b      	ldr	r3, [r7, #20]
 801935a:	429a      	cmp	r2, r3
 801935c:	d005      	beq.n	801936a <create_name+0x202>
 801935e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019362:	f043 0303 	orr.w	r3, r3, #3
 8019366:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801936a:	69ba      	ldr	r2, [r7, #24]
 801936c:	697b      	ldr	r3, [r7, #20]
 801936e:	429a      	cmp	r2, r3
 8019370:	d866      	bhi.n	8019440 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8019372:	697b      	ldr	r3, [r7, #20]
 8019374:	61bb      	str	r3, [r7, #24]
 8019376:	2308      	movs	r3, #8
 8019378:	623b      	str	r3, [r7, #32]
 801937a:	230b      	movs	r3, #11
 801937c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801937e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019382:	009b      	lsls	r3, r3, #2
 8019384:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8019388:	e051      	b.n	801942e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801938a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801938c:	2b7f      	cmp	r3, #127	@ 0x7f
 801938e:	d914      	bls.n	80193ba <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8019390:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019392:	2100      	movs	r1, #0
 8019394:	4618      	mov	r0, r3
 8019396:	f001 f9ad 	bl	801a6f4 <ff_convert>
 801939a:	4603      	mov	r3, r0
 801939c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801939e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80193a0:	2b00      	cmp	r3, #0
 80193a2:	d004      	beq.n	80193ae <create_name+0x246>
 80193a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80193a6:	3b80      	subs	r3, #128	@ 0x80
 80193a8:	4a23      	ldr	r2, [pc, #140]	@ (8019438 <create_name+0x2d0>)
 80193aa:	5cd3      	ldrb	r3, [r2, r3]
 80193ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80193ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80193b2:	f043 0302 	orr.w	r3, r3, #2
 80193b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80193ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80193bc:	2b00      	cmp	r3, #0
 80193be:	d007      	beq.n	80193d0 <create_name+0x268>
 80193c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80193c2:	4619      	mov	r1, r3
 80193c4:	481d      	ldr	r0, [pc, #116]	@ (801943c <create_name+0x2d4>)
 80193c6:	f7fe fc00 	bl	8017bca <chk_chr>
 80193ca:	4603      	mov	r3, r0
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	d008      	beq.n	80193e2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80193d0:	235f      	movs	r3, #95	@ 0x5f
 80193d2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80193d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80193d8:	f043 0303 	orr.w	r3, r3, #3
 80193dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80193e0:	e01b      	b.n	801941a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80193e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80193e4:	2b40      	cmp	r3, #64	@ 0x40
 80193e6:	d909      	bls.n	80193fc <create_name+0x294>
 80193e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80193ea:	2b5a      	cmp	r3, #90	@ 0x5a
 80193ec:	d806      	bhi.n	80193fc <create_name+0x294>
					b |= 2;
 80193ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80193f2:	f043 0302 	orr.w	r3, r3, #2
 80193f6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80193fa:	e00e      	b.n	801941a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80193fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80193fe:	2b60      	cmp	r3, #96	@ 0x60
 8019400:	d90b      	bls.n	801941a <create_name+0x2b2>
 8019402:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019404:	2b7a      	cmp	r3, #122	@ 0x7a
 8019406:	d808      	bhi.n	801941a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8019408:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801940c:	f043 0301 	orr.w	r3, r3, #1
 8019410:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8019414:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019416:	3b20      	subs	r3, #32
 8019418:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801941a:	6a3b      	ldr	r3, [r7, #32]
 801941c:	1c5a      	adds	r2, r3, #1
 801941e:	623a      	str	r2, [r7, #32]
 8019420:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8019422:	b2d1      	uxtb	r1, r2
 8019424:	687a      	ldr	r2, [r7, #4]
 8019426:	4413      	add	r3, r2
 8019428:	460a      	mov	r2, r1
 801942a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801942e:	e763      	b.n	80192f8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8019430:	bf00      	nop
 8019432:	e006      	b.n	8019442 <create_name+0x2da>
 8019434:	08020254 	.word	0x08020254
 8019438:	080203a8 	.word	0x080203a8
 801943c:	08020260 	.word	0x08020260
			if (si > di) break;			/* No extension */
 8019440:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8019448:	2be5      	cmp	r3, #229	@ 0xe5
 801944a:	d103      	bne.n	8019454 <create_name+0x2ec>
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	2205      	movs	r2, #5
 8019450:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8019454:	69fb      	ldr	r3, [r7, #28]
 8019456:	2b08      	cmp	r3, #8
 8019458:	d104      	bne.n	8019464 <create_name+0x2fc>
 801945a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801945e:	009b      	lsls	r3, r3, #2
 8019460:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8019464:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019468:	f003 030c 	and.w	r3, r3, #12
 801946c:	2b0c      	cmp	r3, #12
 801946e:	d005      	beq.n	801947c <create_name+0x314>
 8019470:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019474:	f003 0303 	and.w	r3, r3, #3
 8019478:	2b03      	cmp	r3, #3
 801947a:	d105      	bne.n	8019488 <create_name+0x320>
 801947c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019480:	f043 0302 	orr.w	r3, r3, #2
 8019484:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8019488:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801948c:	f003 0302 	and.w	r3, r3, #2
 8019490:	2b00      	cmp	r3, #0
 8019492:	d117      	bne.n	80194c4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8019494:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019498:	f003 0303 	and.w	r3, r3, #3
 801949c:	2b01      	cmp	r3, #1
 801949e:	d105      	bne.n	80194ac <create_name+0x344>
 80194a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80194a4:	f043 0310 	orr.w	r3, r3, #16
 80194a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80194ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80194b0:	f003 030c 	and.w	r3, r3, #12
 80194b4:	2b04      	cmp	r3, #4
 80194b6:	d105      	bne.n	80194c4 <create_name+0x35c>
 80194b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80194bc:	f043 0308 	orr.w	r3, r3, #8
 80194c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80194ca:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80194ce:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80194d0:	4618      	mov	r0, r3
 80194d2:	3728      	adds	r7, #40	@ 0x28
 80194d4:	46bd      	mov	sp, r7
 80194d6:	bd80      	pop	{r7, pc}

080194d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80194d8:	b580      	push	{r7, lr}
 80194da:	b086      	sub	sp, #24
 80194dc:	af00      	add	r7, sp, #0
 80194de:	6078      	str	r0, [r7, #4]
 80194e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80194e6:	693b      	ldr	r3, [r7, #16]
 80194e8:	681b      	ldr	r3, [r3, #0]
 80194ea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80194ec:	e002      	b.n	80194f4 <follow_path+0x1c>
 80194ee:	683b      	ldr	r3, [r7, #0]
 80194f0:	3301      	adds	r3, #1
 80194f2:	603b      	str	r3, [r7, #0]
 80194f4:	683b      	ldr	r3, [r7, #0]
 80194f6:	781b      	ldrb	r3, [r3, #0]
 80194f8:	2b2f      	cmp	r3, #47	@ 0x2f
 80194fa:	d0f8      	beq.n	80194ee <follow_path+0x16>
 80194fc:	683b      	ldr	r3, [r7, #0]
 80194fe:	781b      	ldrb	r3, [r3, #0]
 8019500:	2b5c      	cmp	r3, #92	@ 0x5c
 8019502:	d0f4      	beq.n	80194ee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8019504:	693b      	ldr	r3, [r7, #16]
 8019506:	2200      	movs	r2, #0
 8019508:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801950a:	683b      	ldr	r3, [r7, #0]
 801950c:	781b      	ldrb	r3, [r3, #0]
 801950e:	2b1f      	cmp	r3, #31
 8019510:	d80a      	bhi.n	8019528 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	2280      	movs	r2, #128	@ 0x80
 8019516:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801951a:	2100      	movs	r1, #0
 801951c:	6878      	ldr	r0, [r7, #4]
 801951e:	f7ff f8fe 	bl	801871e <dir_sdi>
 8019522:	4603      	mov	r3, r0
 8019524:	75fb      	strb	r3, [r7, #23]
 8019526:	e048      	b.n	80195ba <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8019528:	463b      	mov	r3, r7
 801952a:	4619      	mov	r1, r3
 801952c:	6878      	ldr	r0, [r7, #4]
 801952e:	f7ff fe1b 	bl	8019168 <create_name>
 8019532:	4603      	mov	r3, r0
 8019534:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8019536:	7dfb      	ldrb	r3, [r7, #23]
 8019538:	2b00      	cmp	r3, #0
 801953a:	d139      	bne.n	80195b0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801953c:	6878      	ldr	r0, [r7, #4]
 801953e:	f7ff fc5a 	bl	8018df6 <dir_find>
 8019542:	4603      	mov	r3, r0
 8019544:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801954c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801954e:	7dfb      	ldrb	r3, [r7, #23]
 8019550:	2b00      	cmp	r3, #0
 8019552:	d00a      	beq.n	801956a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8019554:	7dfb      	ldrb	r3, [r7, #23]
 8019556:	2b04      	cmp	r3, #4
 8019558:	d12c      	bne.n	80195b4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801955a:	7afb      	ldrb	r3, [r7, #11]
 801955c:	f003 0304 	and.w	r3, r3, #4
 8019560:	2b00      	cmp	r3, #0
 8019562:	d127      	bne.n	80195b4 <follow_path+0xdc>
 8019564:	2305      	movs	r3, #5
 8019566:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8019568:	e024      	b.n	80195b4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801956a:	7afb      	ldrb	r3, [r7, #11]
 801956c:	f003 0304 	and.w	r3, r3, #4
 8019570:	2b00      	cmp	r3, #0
 8019572:	d121      	bne.n	80195b8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8019574:	693b      	ldr	r3, [r7, #16]
 8019576:	799b      	ldrb	r3, [r3, #6]
 8019578:	f003 0310 	and.w	r3, r3, #16
 801957c:	2b00      	cmp	r3, #0
 801957e:	d102      	bne.n	8019586 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8019580:	2305      	movs	r3, #5
 8019582:	75fb      	strb	r3, [r7, #23]
 8019584:	e019      	b.n	80195ba <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8019586:	68fb      	ldr	r3, [r7, #12]
 8019588:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	695b      	ldr	r3, [r3, #20]
 8019590:	68fa      	ldr	r2, [r7, #12]
 8019592:	8992      	ldrh	r2, [r2, #12]
 8019594:	fbb3 f0f2 	udiv	r0, r3, r2
 8019598:	fb00 f202 	mul.w	r2, r0, r2
 801959c:	1a9b      	subs	r3, r3, r2
 801959e:	440b      	add	r3, r1
 80195a0:	4619      	mov	r1, r3
 80195a2:	68f8      	ldr	r0, [r7, #12]
 80195a4:	f7ff fa61 	bl	8018a6a <ld_clust>
 80195a8:	4602      	mov	r2, r0
 80195aa:	693b      	ldr	r3, [r7, #16]
 80195ac:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80195ae:	e7bb      	b.n	8019528 <follow_path+0x50>
			if (res != FR_OK) break;
 80195b0:	bf00      	nop
 80195b2:	e002      	b.n	80195ba <follow_path+0xe2>
				break;
 80195b4:	bf00      	nop
 80195b6:	e000      	b.n	80195ba <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80195b8:	bf00      	nop
			}
		}
	}

	return res;
 80195ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80195bc:	4618      	mov	r0, r3
 80195be:	3718      	adds	r7, #24
 80195c0:	46bd      	mov	sp, r7
 80195c2:	bd80      	pop	{r7, pc}

080195c4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80195c4:	b480      	push	{r7}
 80195c6:	b087      	sub	sp, #28
 80195c8:	af00      	add	r7, sp, #0
 80195ca:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80195cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80195d0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80195d2:	687b      	ldr	r3, [r7, #4]
 80195d4:	681b      	ldr	r3, [r3, #0]
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d031      	beq.n	801963e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	681b      	ldr	r3, [r3, #0]
 80195de:	617b      	str	r3, [r7, #20]
 80195e0:	e002      	b.n	80195e8 <get_ldnumber+0x24>
 80195e2:	697b      	ldr	r3, [r7, #20]
 80195e4:	3301      	adds	r3, #1
 80195e6:	617b      	str	r3, [r7, #20]
 80195e8:	697b      	ldr	r3, [r7, #20]
 80195ea:	781b      	ldrb	r3, [r3, #0]
 80195ec:	2b1f      	cmp	r3, #31
 80195ee:	d903      	bls.n	80195f8 <get_ldnumber+0x34>
 80195f0:	697b      	ldr	r3, [r7, #20]
 80195f2:	781b      	ldrb	r3, [r3, #0]
 80195f4:	2b3a      	cmp	r3, #58	@ 0x3a
 80195f6:	d1f4      	bne.n	80195e2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80195f8:	697b      	ldr	r3, [r7, #20]
 80195fa:	781b      	ldrb	r3, [r3, #0]
 80195fc:	2b3a      	cmp	r3, #58	@ 0x3a
 80195fe:	d11c      	bne.n	801963a <get_ldnumber+0x76>
			tp = *path;
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	681b      	ldr	r3, [r3, #0]
 8019604:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8019606:	68fb      	ldr	r3, [r7, #12]
 8019608:	1c5a      	adds	r2, r3, #1
 801960a:	60fa      	str	r2, [r7, #12]
 801960c:	781b      	ldrb	r3, [r3, #0]
 801960e:	3b30      	subs	r3, #48	@ 0x30
 8019610:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8019612:	68bb      	ldr	r3, [r7, #8]
 8019614:	2b09      	cmp	r3, #9
 8019616:	d80e      	bhi.n	8019636 <get_ldnumber+0x72>
 8019618:	68fa      	ldr	r2, [r7, #12]
 801961a:	697b      	ldr	r3, [r7, #20]
 801961c:	429a      	cmp	r2, r3
 801961e:	d10a      	bne.n	8019636 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8019620:	68bb      	ldr	r3, [r7, #8]
 8019622:	2b00      	cmp	r3, #0
 8019624:	d107      	bne.n	8019636 <get_ldnumber+0x72>
					vol = (int)i;
 8019626:	68bb      	ldr	r3, [r7, #8]
 8019628:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801962a:	697b      	ldr	r3, [r7, #20]
 801962c:	3301      	adds	r3, #1
 801962e:	617b      	str	r3, [r7, #20]
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	697a      	ldr	r2, [r7, #20]
 8019634:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8019636:	693b      	ldr	r3, [r7, #16]
 8019638:	e002      	b.n	8019640 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801963a:	2300      	movs	r3, #0
 801963c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801963e:	693b      	ldr	r3, [r7, #16]
}
 8019640:	4618      	mov	r0, r3
 8019642:	371c      	adds	r7, #28
 8019644:	46bd      	mov	sp, r7
 8019646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801964a:	4770      	bx	lr

0801964c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801964c:	b580      	push	{r7, lr}
 801964e:	b082      	sub	sp, #8
 8019650:	af00      	add	r7, sp, #0
 8019652:	6078      	str	r0, [r7, #4]
 8019654:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	2200      	movs	r2, #0
 801965a:	70da      	strb	r2, [r3, #3]
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019662:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8019664:	6839      	ldr	r1, [r7, #0]
 8019666:	6878      	ldr	r0, [r7, #4]
 8019668:	f7fe fc7a 	bl	8017f60 <move_window>
 801966c:	4603      	mov	r3, r0
 801966e:	2b00      	cmp	r3, #0
 8019670:	d001      	beq.n	8019676 <check_fs+0x2a>
 8019672:	2304      	movs	r3, #4
 8019674:	e038      	b.n	80196e8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	3338      	adds	r3, #56	@ 0x38
 801967a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801967e:	4618      	mov	r0, r3
 8019680:	f7fe f9be 	bl	8017a00 <ld_word>
 8019684:	4603      	mov	r3, r0
 8019686:	461a      	mov	r2, r3
 8019688:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801968c:	429a      	cmp	r2, r3
 801968e:	d001      	beq.n	8019694 <check_fs+0x48>
 8019690:	2303      	movs	r3, #3
 8019692:	e029      	b.n	80196e8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801969a:	2be9      	cmp	r3, #233	@ 0xe9
 801969c:	d009      	beq.n	80196b2 <check_fs+0x66>
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80196a4:	2beb      	cmp	r3, #235	@ 0xeb
 80196a6:	d11e      	bne.n	80196e6 <check_fs+0x9a>
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80196ae:	2b90      	cmp	r3, #144	@ 0x90
 80196b0:	d119      	bne.n	80196e6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80196b2:	687b      	ldr	r3, [r7, #4]
 80196b4:	3338      	adds	r3, #56	@ 0x38
 80196b6:	3336      	adds	r3, #54	@ 0x36
 80196b8:	4618      	mov	r0, r3
 80196ba:	f7fe f9b9 	bl	8017a30 <ld_dword>
 80196be:	4603      	mov	r3, r0
 80196c0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80196c4:	4a0a      	ldr	r2, [pc, #40]	@ (80196f0 <check_fs+0xa4>)
 80196c6:	4293      	cmp	r3, r2
 80196c8:	d101      	bne.n	80196ce <check_fs+0x82>
 80196ca:	2300      	movs	r3, #0
 80196cc:	e00c      	b.n	80196e8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	3338      	adds	r3, #56	@ 0x38
 80196d2:	3352      	adds	r3, #82	@ 0x52
 80196d4:	4618      	mov	r0, r3
 80196d6:	f7fe f9ab 	bl	8017a30 <ld_dword>
 80196da:	4603      	mov	r3, r0
 80196dc:	4a05      	ldr	r2, [pc, #20]	@ (80196f4 <check_fs+0xa8>)
 80196de:	4293      	cmp	r3, r2
 80196e0:	d101      	bne.n	80196e6 <check_fs+0x9a>
 80196e2:	2300      	movs	r3, #0
 80196e4:	e000      	b.n	80196e8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80196e6:	2302      	movs	r3, #2
}
 80196e8:	4618      	mov	r0, r3
 80196ea:	3708      	adds	r7, #8
 80196ec:	46bd      	mov	sp, r7
 80196ee:	bd80      	pop	{r7, pc}
 80196f0:	00544146 	.word	0x00544146
 80196f4:	33544146 	.word	0x33544146

080196f8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80196f8:	b580      	push	{r7, lr}
 80196fa:	b096      	sub	sp, #88	@ 0x58
 80196fc:	af00      	add	r7, sp, #0
 80196fe:	60f8      	str	r0, [r7, #12]
 8019700:	60b9      	str	r1, [r7, #8]
 8019702:	4613      	mov	r3, r2
 8019704:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8019706:	68bb      	ldr	r3, [r7, #8]
 8019708:	2200      	movs	r2, #0
 801970a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801970c:	68f8      	ldr	r0, [r7, #12]
 801970e:	f7ff ff59 	bl	80195c4 <get_ldnumber>
 8019712:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8019714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019716:	2b00      	cmp	r3, #0
 8019718:	da01      	bge.n	801971e <find_volume+0x26>
 801971a:	230b      	movs	r3, #11
 801971c:	e265      	b.n	8019bea <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801971e:	4a9f      	ldr	r2, [pc, #636]	@ (801999c <find_volume+0x2a4>)
 8019720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019726:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8019728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801972a:	2b00      	cmp	r3, #0
 801972c:	d101      	bne.n	8019732 <find_volume+0x3a>
 801972e:	230c      	movs	r3, #12
 8019730:	e25b      	b.n	8019bea <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8019732:	68bb      	ldr	r3, [r7, #8]
 8019734:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019736:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8019738:	79fb      	ldrb	r3, [r7, #7]
 801973a:	f023 0301 	bic.w	r3, r3, #1
 801973e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8019740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019742:	781b      	ldrb	r3, [r3, #0]
 8019744:	2b00      	cmp	r3, #0
 8019746:	d01a      	beq.n	801977e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8019748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801974a:	785b      	ldrb	r3, [r3, #1]
 801974c:	4618      	mov	r0, r3
 801974e:	f7fe f8b9 	bl	80178c4 <disk_status>
 8019752:	4603      	mov	r3, r0
 8019754:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8019758:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801975c:	f003 0301 	and.w	r3, r3, #1
 8019760:	2b00      	cmp	r3, #0
 8019762:	d10c      	bne.n	801977e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8019764:	79fb      	ldrb	r3, [r7, #7]
 8019766:	2b00      	cmp	r3, #0
 8019768:	d007      	beq.n	801977a <find_volume+0x82>
 801976a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801976e:	f003 0304 	and.w	r3, r3, #4
 8019772:	2b00      	cmp	r3, #0
 8019774:	d001      	beq.n	801977a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8019776:	230a      	movs	r3, #10
 8019778:	e237      	b.n	8019bea <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801977a:	2300      	movs	r3, #0
 801977c:	e235      	b.n	8019bea <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801977e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019780:	2200      	movs	r2, #0
 8019782:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8019784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019786:	b2da      	uxtb	r2, r3
 8019788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801978a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801978c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801978e:	785b      	ldrb	r3, [r3, #1]
 8019790:	4618      	mov	r0, r3
 8019792:	f7fe f8b1 	bl	80178f8 <disk_initialize>
 8019796:	4603      	mov	r3, r0
 8019798:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801979c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80197a0:	f003 0301 	and.w	r3, r3, #1
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	d001      	beq.n	80197ac <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80197a8:	2303      	movs	r3, #3
 80197aa:	e21e      	b.n	8019bea <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80197ac:	79fb      	ldrb	r3, [r7, #7]
 80197ae:	2b00      	cmp	r3, #0
 80197b0:	d007      	beq.n	80197c2 <find_volume+0xca>
 80197b2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80197b6:	f003 0304 	and.w	r3, r3, #4
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	d001      	beq.n	80197c2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80197be:	230a      	movs	r3, #10
 80197c0:	e213      	b.n	8019bea <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80197c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80197c4:	7858      	ldrb	r0, [r3, #1]
 80197c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80197c8:	330c      	adds	r3, #12
 80197ca:	461a      	mov	r2, r3
 80197cc:	2102      	movs	r1, #2
 80197ce:	f7fe f8f9 	bl	80179c4 <disk_ioctl>
 80197d2:	4603      	mov	r3, r0
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	d001      	beq.n	80197dc <find_volume+0xe4>
 80197d8:	2301      	movs	r3, #1
 80197da:	e206      	b.n	8019bea <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80197dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80197de:	899b      	ldrh	r3, [r3, #12]
 80197e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80197e4:	d80d      	bhi.n	8019802 <find_volume+0x10a>
 80197e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80197e8:	899b      	ldrh	r3, [r3, #12]
 80197ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80197ee:	d308      	bcc.n	8019802 <find_volume+0x10a>
 80197f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80197f2:	899b      	ldrh	r3, [r3, #12]
 80197f4:	461a      	mov	r2, r3
 80197f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80197f8:	899b      	ldrh	r3, [r3, #12]
 80197fa:	3b01      	subs	r3, #1
 80197fc:	4013      	ands	r3, r2
 80197fe:	2b00      	cmp	r3, #0
 8019800:	d001      	beq.n	8019806 <find_volume+0x10e>
 8019802:	2301      	movs	r3, #1
 8019804:	e1f1      	b.n	8019bea <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8019806:	2300      	movs	r3, #0
 8019808:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801980a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801980c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801980e:	f7ff ff1d 	bl	801964c <check_fs>
 8019812:	4603      	mov	r3, r0
 8019814:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8019818:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801981c:	2b02      	cmp	r3, #2
 801981e:	d149      	bne.n	80198b4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8019820:	2300      	movs	r3, #0
 8019822:	643b      	str	r3, [r7, #64]	@ 0x40
 8019824:	e01e      	b.n	8019864 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8019826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019828:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801982c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801982e:	011b      	lsls	r3, r3, #4
 8019830:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8019834:	4413      	add	r3, r2
 8019836:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8019838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801983a:	3304      	adds	r3, #4
 801983c:	781b      	ldrb	r3, [r3, #0]
 801983e:	2b00      	cmp	r3, #0
 8019840:	d006      	beq.n	8019850 <find_volume+0x158>
 8019842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019844:	3308      	adds	r3, #8
 8019846:	4618      	mov	r0, r3
 8019848:	f7fe f8f2 	bl	8017a30 <ld_dword>
 801984c:	4602      	mov	r2, r0
 801984e:	e000      	b.n	8019852 <find_volume+0x15a>
 8019850:	2200      	movs	r2, #0
 8019852:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019854:	009b      	lsls	r3, r3, #2
 8019856:	3358      	adds	r3, #88	@ 0x58
 8019858:	443b      	add	r3, r7
 801985a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801985e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019860:	3301      	adds	r3, #1
 8019862:	643b      	str	r3, [r7, #64]	@ 0x40
 8019864:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019866:	2b03      	cmp	r3, #3
 8019868:	d9dd      	bls.n	8019826 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801986a:	2300      	movs	r3, #0
 801986c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801986e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019870:	2b00      	cmp	r3, #0
 8019872:	d002      	beq.n	801987a <find_volume+0x182>
 8019874:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019876:	3b01      	subs	r3, #1
 8019878:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801987a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801987c:	009b      	lsls	r3, r3, #2
 801987e:	3358      	adds	r3, #88	@ 0x58
 8019880:	443b      	add	r3, r7
 8019882:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8019886:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8019888:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801988a:	2b00      	cmp	r3, #0
 801988c:	d005      	beq.n	801989a <find_volume+0x1a2>
 801988e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8019890:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019892:	f7ff fedb 	bl	801964c <check_fs>
 8019896:	4603      	mov	r3, r0
 8019898:	e000      	b.n	801989c <find_volume+0x1a4>
 801989a:	2303      	movs	r3, #3
 801989c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80198a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80198a4:	2b01      	cmp	r3, #1
 80198a6:	d905      	bls.n	80198b4 <find_volume+0x1bc>
 80198a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80198aa:	3301      	adds	r3, #1
 80198ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80198ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80198b0:	2b03      	cmp	r3, #3
 80198b2:	d9e2      	bls.n	801987a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80198b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80198b8:	2b04      	cmp	r3, #4
 80198ba:	d101      	bne.n	80198c0 <find_volume+0x1c8>
 80198bc:	2301      	movs	r3, #1
 80198be:	e194      	b.n	8019bea <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80198c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80198c4:	2b01      	cmp	r3, #1
 80198c6:	d901      	bls.n	80198cc <find_volume+0x1d4>
 80198c8:	230d      	movs	r3, #13
 80198ca:	e18e      	b.n	8019bea <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80198cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198ce:	3338      	adds	r3, #56	@ 0x38
 80198d0:	330b      	adds	r3, #11
 80198d2:	4618      	mov	r0, r3
 80198d4:	f7fe f894 	bl	8017a00 <ld_word>
 80198d8:	4603      	mov	r3, r0
 80198da:	461a      	mov	r2, r3
 80198dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198de:	899b      	ldrh	r3, [r3, #12]
 80198e0:	429a      	cmp	r2, r3
 80198e2:	d001      	beq.n	80198e8 <find_volume+0x1f0>
 80198e4:	230d      	movs	r3, #13
 80198e6:	e180      	b.n	8019bea <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80198e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198ea:	3338      	adds	r3, #56	@ 0x38
 80198ec:	3316      	adds	r3, #22
 80198ee:	4618      	mov	r0, r3
 80198f0:	f7fe f886 	bl	8017a00 <ld_word>
 80198f4:	4603      	mov	r3, r0
 80198f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80198f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	d106      	bne.n	801990c <find_volume+0x214>
 80198fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019900:	3338      	adds	r3, #56	@ 0x38
 8019902:	3324      	adds	r3, #36	@ 0x24
 8019904:	4618      	mov	r0, r3
 8019906:	f7fe f893 	bl	8017a30 <ld_dword>
 801990a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801990c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801990e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8019910:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8019912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019914:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8019918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801991a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801991c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801991e:	789b      	ldrb	r3, [r3, #2]
 8019920:	2b01      	cmp	r3, #1
 8019922:	d005      	beq.n	8019930 <find_volume+0x238>
 8019924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019926:	789b      	ldrb	r3, [r3, #2]
 8019928:	2b02      	cmp	r3, #2
 801992a:	d001      	beq.n	8019930 <find_volume+0x238>
 801992c:	230d      	movs	r3, #13
 801992e:	e15c      	b.n	8019bea <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8019930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019932:	789b      	ldrb	r3, [r3, #2]
 8019934:	461a      	mov	r2, r3
 8019936:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019938:	fb02 f303 	mul.w	r3, r2, r3
 801993c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801993e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019940:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8019944:	461a      	mov	r2, r3
 8019946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019948:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801994a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801994c:	895b      	ldrh	r3, [r3, #10]
 801994e:	2b00      	cmp	r3, #0
 8019950:	d008      	beq.n	8019964 <find_volume+0x26c>
 8019952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019954:	895b      	ldrh	r3, [r3, #10]
 8019956:	461a      	mov	r2, r3
 8019958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801995a:	895b      	ldrh	r3, [r3, #10]
 801995c:	3b01      	subs	r3, #1
 801995e:	4013      	ands	r3, r2
 8019960:	2b00      	cmp	r3, #0
 8019962:	d001      	beq.n	8019968 <find_volume+0x270>
 8019964:	230d      	movs	r3, #13
 8019966:	e140      	b.n	8019bea <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8019968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801996a:	3338      	adds	r3, #56	@ 0x38
 801996c:	3311      	adds	r3, #17
 801996e:	4618      	mov	r0, r3
 8019970:	f7fe f846 	bl	8017a00 <ld_word>
 8019974:	4603      	mov	r3, r0
 8019976:	461a      	mov	r2, r3
 8019978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801997a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801997c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801997e:	891b      	ldrh	r3, [r3, #8]
 8019980:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019982:	8992      	ldrh	r2, [r2, #12]
 8019984:	0952      	lsrs	r2, r2, #5
 8019986:	b292      	uxth	r2, r2
 8019988:	fbb3 f1f2 	udiv	r1, r3, r2
 801998c:	fb01 f202 	mul.w	r2, r1, r2
 8019990:	1a9b      	subs	r3, r3, r2
 8019992:	b29b      	uxth	r3, r3
 8019994:	2b00      	cmp	r3, #0
 8019996:	d003      	beq.n	80199a0 <find_volume+0x2a8>
 8019998:	230d      	movs	r3, #13
 801999a:	e126      	b.n	8019bea <find_volume+0x4f2>
 801999c:	24003ed8 	.word	0x24003ed8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80199a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80199a2:	3338      	adds	r3, #56	@ 0x38
 80199a4:	3313      	adds	r3, #19
 80199a6:	4618      	mov	r0, r3
 80199a8:	f7fe f82a 	bl	8017a00 <ld_word>
 80199ac:	4603      	mov	r3, r0
 80199ae:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80199b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	d106      	bne.n	80199c4 <find_volume+0x2cc>
 80199b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80199b8:	3338      	adds	r3, #56	@ 0x38
 80199ba:	3320      	adds	r3, #32
 80199bc:	4618      	mov	r0, r3
 80199be:	f7fe f837 	bl	8017a30 <ld_dword>
 80199c2:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80199c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80199c6:	3338      	adds	r3, #56	@ 0x38
 80199c8:	330e      	adds	r3, #14
 80199ca:	4618      	mov	r0, r3
 80199cc:	f7fe f818 	bl	8017a00 <ld_word>
 80199d0:	4603      	mov	r3, r0
 80199d2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80199d4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	d101      	bne.n	80199de <find_volume+0x2e6>
 80199da:	230d      	movs	r3, #13
 80199dc:	e105      	b.n	8019bea <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80199de:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80199e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80199e2:	4413      	add	r3, r2
 80199e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80199e6:	8911      	ldrh	r1, [r2, #8]
 80199e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80199ea:	8992      	ldrh	r2, [r2, #12]
 80199ec:	0952      	lsrs	r2, r2, #5
 80199ee:	b292      	uxth	r2, r2
 80199f0:	fbb1 f2f2 	udiv	r2, r1, r2
 80199f4:	b292      	uxth	r2, r2
 80199f6:	4413      	add	r3, r2
 80199f8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80199fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80199fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80199fe:	429a      	cmp	r2, r3
 8019a00:	d201      	bcs.n	8019a06 <find_volume+0x30e>
 8019a02:	230d      	movs	r3, #13
 8019a04:	e0f1      	b.n	8019bea <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8019a06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a0a:	1ad3      	subs	r3, r2, r3
 8019a0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019a0e:	8952      	ldrh	r2, [r2, #10]
 8019a10:	fbb3 f3f2 	udiv	r3, r3, r2
 8019a14:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8019a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d101      	bne.n	8019a20 <find_volume+0x328>
 8019a1c:	230d      	movs	r3, #13
 8019a1e:	e0e4      	b.n	8019bea <find_volume+0x4f2>
		fmt = FS_FAT32;
 8019a20:	2303      	movs	r3, #3
 8019a22:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8019a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a28:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8019a2c:	4293      	cmp	r3, r2
 8019a2e:	d802      	bhi.n	8019a36 <find_volume+0x33e>
 8019a30:	2302      	movs	r3, #2
 8019a32:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8019a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a38:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8019a3c:	4293      	cmp	r3, r2
 8019a3e:	d802      	bhi.n	8019a46 <find_volume+0x34e>
 8019a40:	2301      	movs	r3, #1
 8019a42:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8019a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a48:	1c9a      	adds	r2, r3, #2
 8019a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a4c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8019a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a50:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8019a52:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8019a54:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8019a56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019a58:	441a      	add	r2, r3
 8019a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a5c:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8019a5e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8019a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a62:	441a      	add	r2, r3
 8019a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a66:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8019a68:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019a6c:	2b03      	cmp	r3, #3
 8019a6e:	d11e      	bne.n	8019aae <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8019a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a72:	3338      	adds	r3, #56	@ 0x38
 8019a74:	332a      	adds	r3, #42	@ 0x2a
 8019a76:	4618      	mov	r0, r3
 8019a78:	f7fd ffc2 	bl	8017a00 <ld_word>
 8019a7c:	4603      	mov	r3, r0
 8019a7e:	2b00      	cmp	r3, #0
 8019a80:	d001      	beq.n	8019a86 <find_volume+0x38e>
 8019a82:	230d      	movs	r3, #13
 8019a84:	e0b1      	b.n	8019bea <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8019a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a88:	891b      	ldrh	r3, [r3, #8]
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d001      	beq.n	8019a92 <find_volume+0x39a>
 8019a8e:	230d      	movs	r3, #13
 8019a90:	e0ab      	b.n	8019bea <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8019a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a94:	3338      	adds	r3, #56	@ 0x38
 8019a96:	332c      	adds	r3, #44	@ 0x2c
 8019a98:	4618      	mov	r0, r3
 8019a9a:	f7fd ffc9 	bl	8017a30 <ld_dword>
 8019a9e:	4602      	mov	r2, r0
 8019aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019aa2:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8019aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019aa6:	69db      	ldr	r3, [r3, #28]
 8019aa8:	009b      	lsls	r3, r3, #2
 8019aaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8019aac:	e01f      	b.n	8019aee <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8019aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ab0:	891b      	ldrh	r3, [r3, #8]
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	d101      	bne.n	8019aba <find_volume+0x3c2>
 8019ab6:	230d      	movs	r3, #13
 8019ab8:	e097      	b.n	8019bea <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8019aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019abc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8019abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019ac0:	441a      	add	r2, r3
 8019ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ac4:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8019ac6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019aca:	2b02      	cmp	r3, #2
 8019acc:	d103      	bne.n	8019ad6 <find_volume+0x3de>
 8019ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ad0:	69db      	ldr	r3, [r3, #28]
 8019ad2:	005b      	lsls	r3, r3, #1
 8019ad4:	e00a      	b.n	8019aec <find_volume+0x3f4>
 8019ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ad8:	69da      	ldr	r2, [r3, #28]
 8019ada:	4613      	mov	r3, r2
 8019adc:	005b      	lsls	r3, r3, #1
 8019ade:	4413      	add	r3, r2
 8019ae0:	085a      	lsrs	r2, r3, #1
 8019ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ae4:	69db      	ldr	r3, [r3, #28]
 8019ae6:	f003 0301 	and.w	r3, r3, #1
 8019aea:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8019aec:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8019aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019af0:	6a1a      	ldr	r2, [r3, #32]
 8019af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019af4:	899b      	ldrh	r3, [r3, #12]
 8019af6:	4619      	mov	r1, r3
 8019af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019afa:	440b      	add	r3, r1
 8019afc:	3b01      	subs	r3, #1
 8019afe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8019b00:	8989      	ldrh	r1, [r1, #12]
 8019b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8019b06:	429a      	cmp	r2, r3
 8019b08:	d201      	bcs.n	8019b0e <find_volume+0x416>
 8019b0a:	230d      	movs	r3, #13
 8019b0c:	e06d      	b.n	8019bea <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8019b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019b14:	619a      	str	r2, [r3, #24]
 8019b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b18:	699a      	ldr	r2, [r3, #24]
 8019b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b1c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8019b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b20:	2280      	movs	r2, #128	@ 0x80
 8019b22:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8019b24:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019b28:	2b03      	cmp	r3, #3
 8019b2a:	d149      	bne.n	8019bc0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8019b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b2e:	3338      	adds	r3, #56	@ 0x38
 8019b30:	3330      	adds	r3, #48	@ 0x30
 8019b32:	4618      	mov	r0, r3
 8019b34:	f7fd ff64 	bl	8017a00 <ld_word>
 8019b38:	4603      	mov	r3, r0
 8019b3a:	2b01      	cmp	r3, #1
 8019b3c:	d140      	bne.n	8019bc0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8019b3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019b40:	3301      	adds	r3, #1
 8019b42:	4619      	mov	r1, r3
 8019b44:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019b46:	f7fe fa0b 	bl	8017f60 <move_window>
 8019b4a:	4603      	mov	r3, r0
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d137      	bne.n	8019bc0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8019b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b52:	2200      	movs	r2, #0
 8019b54:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8019b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b58:	3338      	adds	r3, #56	@ 0x38
 8019b5a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8019b5e:	4618      	mov	r0, r3
 8019b60:	f7fd ff4e 	bl	8017a00 <ld_word>
 8019b64:	4603      	mov	r3, r0
 8019b66:	461a      	mov	r2, r3
 8019b68:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8019b6c:	429a      	cmp	r2, r3
 8019b6e:	d127      	bne.n	8019bc0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8019b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b72:	3338      	adds	r3, #56	@ 0x38
 8019b74:	4618      	mov	r0, r3
 8019b76:	f7fd ff5b 	bl	8017a30 <ld_dword>
 8019b7a:	4603      	mov	r3, r0
 8019b7c:	4a1d      	ldr	r2, [pc, #116]	@ (8019bf4 <find_volume+0x4fc>)
 8019b7e:	4293      	cmp	r3, r2
 8019b80:	d11e      	bne.n	8019bc0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8019b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b84:	3338      	adds	r3, #56	@ 0x38
 8019b86:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8019b8a:	4618      	mov	r0, r3
 8019b8c:	f7fd ff50 	bl	8017a30 <ld_dword>
 8019b90:	4603      	mov	r3, r0
 8019b92:	4a19      	ldr	r2, [pc, #100]	@ (8019bf8 <find_volume+0x500>)
 8019b94:	4293      	cmp	r3, r2
 8019b96:	d113      	bne.n	8019bc0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8019b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b9a:	3338      	adds	r3, #56	@ 0x38
 8019b9c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8019ba0:	4618      	mov	r0, r3
 8019ba2:	f7fd ff45 	bl	8017a30 <ld_dword>
 8019ba6:	4602      	mov	r2, r0
 8019ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019baa:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8019bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019bae:	3338      	adds	r3, #56	@ 0x38
 8019bb0:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8019bb4:	4618      	mov	r0, r3
 8019bb6:	f7fd ff3b 	bl	8017a30 <ld_dword>
 8019bba:	4602      	mov	r2, r0
 8019bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019bbe:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8019bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019bc2:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8019bc6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8019bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8019bfc <find_volume+0x504>)
 8019bca:	881b      	ldrh	r3, [r3, #0]
 8019bcc:	3301      	adds	r3, #1
 8019bce:	b29a      	uxth	r2, r3
 8019bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8019bfc <find_volume+0x504>)
 8019bd2:	801a      	strh	r2, [r3, #0]
 8019bd4:	4b09      	ldr	r3, [pc, #36]	@ (8019bfc <find_volume+0x504>)
 8019bd6:	881a      	ldrh	r2, [r3, #0]
 8019bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019bda:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8019bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019bde:	4a08      	ldr	r2, [pc, #32]	@ (8019c00 <find_volume+0x508>)
 8019be0:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8019be2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019be4:	f7fe f954 	bl	8017e90 <clear_lock>
#endif
	return FR_OK;
 8019be8:	2300      	movs	r3, #0
}
 8019bea:	4618      	mov	r0, r3
 8019bec:	3758      	adds	r7, #88	@ 0x58
 8019bee:	46bd      	mov	sp, r7
 8019bf0:	bd80      	pop	{r7, pc}
 8019bf2:	bf00      	nop
 8019bf4:	41615252 	.word	0x41615252
 8019bf8:	61417272 	.word	0x61417272
 8019bfc:	24003edc 	.word	0x24003edc
 8019c00:	24003f00 	.word	0x24003f00

08019c04 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8019c04:	b580      	push	{r7, lr}
 8019c06:	b084      	sub	sp, #16
 8019c08:	af00      	add	r7, sp, #0
 8019c0a:	6078      	str	r0, [r7, #4]
 8019c0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8019c0e:	2309      	movs	r3, #9
 8019c10:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8019c12:	687b      	ldr	r3, [r7, #4]
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	d01c      	beq.n	8019c52 <validate+0x4e>
 8019c18:	687b      	ldr	r3, [r7, #4]
 8019c1a:	681b      	ldr	r3, [r3, #0]
 8019c1c:	2b00      	cmp	r3, #0
 8019c1e:	d018      	beq.n	8019c52 <validate+0x4e>
 8019c20:	687b      	ldr	r3, [r7, #4]
 8019c22:	681b      	ldr	r3, [r3, #0]
 8019c24:	781b      	ldrb	r3, [r3, #0]
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	d013      	beq.n	8019c52 <validate+0x4e>
 8019c2a:	687b      	ldr	r3, [r7, #4]
 8019c2c:	889a      	ldrh	r2, [r3, #4]
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	681b      	ldr	r3, [r3, #0]
 8019c32:	88db      	ldrh	r3, [r3, #6]
 8019c34:	429a      	cmp	r2, r3
 8019c36:	d10c      	bne.n	8019c52 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	681b      	ldr	r3, [r3, #0]
 8019c3c:	785b      	ldrb	r3, [r3, #1]
 8019c3e:	4618      	mov	r0, r3
 8019c40:	f7fd fe40 	bl	80178c4 <disk_status>
 8019c44:	4603      	mov	r3, r0
 8019c46:	f003 0301 	and.w	r3, r3, #1
 8019c4a:	2b00      	cmp	r3, #0
 8019c4c:	d101      	bne.n	8019c52 <validate+0x4e>
			res = FR_OK;
 8019c4e:	2300      	movs	r3, #0
 8019c50:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8019c52:	7bfb      	ldrb	r3, [r7, #15]
 8019c54:	2b00      	cmp	r3, #0
 8019c56:	d102      	bne.n	8019c5e <validate+0x5a>
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	681b      	ldr	r3, [r3, #0]
 8019c5c:	e000      	b.n	8019c60 <validate+0x5c>
 8019c5e:	2300      	movs	r3, #0
 8019c60:	683a      	ldr	r2, [r7, #0]
 8019c62:	6013      	str	r3, [r2, #0]
	return res;
 8019c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c66:	4618      	mov	r0, r3
 8019c68:	3710      	adds	r7, #16
 8019c6a:	46bd      	mov	sp, r7
 8019c6c:	bd80      	pop	{r7, pc}
	...

08019c70 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8019c70:	b580      	push	{r7, lr}
 8019c72:	b088      	sub	sp, #32
 8019c74:	af00      	add	r7, sp, #0
 8019c76:	60f8      	str	r0, [r7, #12]
 8019c78:	60b9      	str	r1, [r7, #8]
 8019c7a:	4613      	mov	r3, r2
 8019c7c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8019c7e:	68bb      	ldr	r3, [r7, #8]
 8019c80:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8019c82:	f107 0310 	add.w	r3, r7, #16
 8019c86:	4618      	mov	r0, r3
 8019c88:	f7ff fc9c 	bl	80195c4 <get_ldnumber>
 8019c8c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8019c8e:	69fb      	ldr	r3, [r7, #28]
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	da01      	bge.n	8019c98 <f_mount+0x28>
 8019c94:	230b      	movs	r3, #11
 8019c96:	e02b      	b.n	8019cf0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8019c98:	4a17      	ldr	r2, [pc, #92]	@ (8019cf8 <f_mount+0x88>)
 8019c9a:	69fb      	ldr	r3, [r7, #28]
 8019c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019ca0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8019ca2:	69bb      	ldr	r3, [r7, #24]
 8019ca4:	2b00      	cmp	r3, #0
 8019ca6:	d005      	beq.n	8019cb4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8019ca8:	69b8      	ldr	r0, [r7, #24]
 8019caa:	f7fe f8f1 	bl	8017e90 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8019cae:	69bb      	ldr	r3, [r7, #24]
 8019cb0:	2200      	movs	r2, #0
 8019cb2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8019cb4:	68fb      	ldr	r3, [r7, #12]
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d002      	beq.n	8019cc0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8019cba:	68fb      	ldr	r3, [r7, #12]
 8019cbc:	2200      	movs	r2, #0
 8019cbe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8019cc0:	68fa      	ldr	r2, [r7, #12]
 8019cc2:	490d      	ldr	r1, [pc, #52]	@ (8019cf8 <f_mount+0x88>)
 8019cc4:	69fb      	ldr	r3, [r7, #28]
 8019cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8019cca:	68fb      	ldr	r3, [r7, #12]
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	d002      	beq.n	8019cd6 <f_mount+0x66>
 8019cd0:	79fb      	ldrb	r3, [r7, #7]
 8019cd2:	2b01      	cmp	r3, #1
 8019cd4:	d001      	beq.n	8019cda <f_mount+0x6a>
 8019cd6:	2300      	movs	r3, #0
 8019cd8:	e00a      	b.n	8019cf0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8019cda:	f107 010c 	add.w	r1, r7, #12
 8019cde:	f107 0308 	add.w	r3, r7, #8
 8019ce2:	2200      	movs	r2, #0
 8019ce4:	4618      	mov	r0, r3
 8019ce6:	f7ff fd07 	bl	80196f8 <find_volume>
 8019cea:	4603      	mov	r3, r0
 8019cec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8019cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8019cf0:	4618      	mov	r0, r3
 8019cf2:	3720      	adds	r7, #32
 8019cf4:	46bd      	mov	sp, r7
 8019cf6:	bd80      	pop	{r7, pc}
 8019cf8:	24003ed8 	.word	0x24003ed8

08019cfc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8019cfc:	b580      	push	{r7, lr}
 8019cfe:	b09a      	sub	sp, #104	@ 0x68
 8019d00:	af00      	add	r7, sp, #0
 8019d02:	60f8      	str	r0, [r7, #12]
 8019d04:	60b9      	str	r1, [r7, #8]
 8019d06:	4613      	mov	r3, r2
 8019d08:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8019d0a:	68fb      	ldr	r3, [r7, #12]
 8019d0c:	2b00      	cmp	r3, #0
 8019d0e:	d101      	bne.n	8019d14 <f_open+0x18>
 8019d10:	2309      	movs	r3, #9
 8019d12:	e1b7      	b.n	801a084 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8019d14:	79fb      	ldrb	r3, [r7, #7]
 8019d16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019d1a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8019d1c:	79fa      	ldrb	r2, [r7, #7]
 8019d1e:	f107 0114 	add.w	r1, r7, #20
 8019d22:	f107 0308 	add.w	r3, r7, #8
 8019d26:	4618      	mov	r0, r3
 8019d28:	f7ff fce6 	bl	80196f8 <find_volume>
 8019d2c:	4603      	mov	r3, r0
 8019d2e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8019d32:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019d36:	2b00      	cmp	r3, #0
 8019d38:	f040 819b 	bne.w	801a072 <f_open+0x376>
		dj.obj.fs = fs;
 8019d3c:	697b      	ldr	r3, [r7, #20]
 8019d3e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8019d40:	68ba      	ldr	r2, [r7, #8]
 8019d42:	f107 0318 	add.w	r3, r7, #24
 8019d46:	4611      	mov	r1, r2
 8019d48:	4618      	mov	r0, r3
 8019d4a:	f7ff fbc5 	bl	80194d8 <follow_path>
 8019d4e:	4603      	mov	r3, r0
 8019d50:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8019d54:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d118      	bne.n	8019d8e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8019d5c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8019d60:	b25b      	sxtb	r3, r3
 8019d62:	2b00      	cmp	r3, #0
 8019d64:	da03      	bge.n	8019d6e <f_open+0x72>
				res = FR_INVALID_NAME;
 8019d66:	2306      	movs	r3, #6
 8019d68:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8019d6c:	e00f      	b.n	8019d8e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8019d6e:	79fb      	ldrb	r3, [r7, #7]
 8019d70:	2b01      	cmp	r3, #1
 8019d72:	bf8c      	ite	hi
 8019d74:	2301      	movhi	r3, #1
 8019d76:	2300      	movls	r3, #0
 8019d78:	b2db      	uxtb	r3, r3
 8019d7a:	461a      	mov	r2, r3
 8019d7c:	f107 0318 	add.w	r3, r7, #24
 8019d80:	4611      	mov	r1, r2
 8019d82:	4618      	mov	r0, r3
 8019d84:	f7fd ff3c 	bl	8017c00 <chk_lock>
 8019d88:	4603      	mov	r3, r0
 8019d8a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8019d8e:	79fb      	ldrb	r3, [r7, #7]
 8019d90:	f003 031c 	and.w	r3, r3, #28
 8019d94:	2b00      	cmp	r3, #0
 8019d96:	d07f      	beq.n	8019e98 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8019d98:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	d017      	beq.n	8019dd0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8019da0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019da4:	2b04      	cmp	r3, #4
 8019da6:	d10e      	bne.n	8019dc6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8019da8:	f7fd ff86 	bl	8017cb8 <enq_lock>
 8019dac:	4603      	mov	r3, r0
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	d006      	beq.n	8019dc0 <f_open+0xc4>
 8019db2:	f107 0318 	add.w	r3, r7, #24
 8019db6:	4618      	mov	r0, r3
 8019db8:	f7ff f8de 	bl	8018f78 <dir_register>
 8019dbc:	4603      	mov	r3, r0
 8019dbe:	e000      	b.n	8019dc2 <f_open+0xc6>
 8019dc0:	2312      	movs	r3, #18
 8019dc2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8019dc6:	79fb      	ldrb	r3, [r7, #7]
 8019dc8:	f043 0308 	orr.w	r3, r3, #8
 8019dcc:	71fb      	strb	r3, [r7, #7]
 8019dce:	e010      	b.n	8019df2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8019dd0:	7fbb      	ldrb	r3, [r7, #30]
 8019dd2:	f003 0311 	and.w	r3, r3, #17
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	d003      	beq.n	8019de2 <f_open+0xe6>
					res = FR_DENIED;
 8019dda:	2307      	movs	r3, #7
 8019ddc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8019de0:	e007      	b.n	8019df2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8019de2:	79fb      	ldrb	r3, [r7, #7]
 8019de4:	f003 0304 	and.w	r3, r3, #4
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	d002      	beq.n	8019df2 <f_open+0xf6>
 8019dec:	2308      	movs	r3, #8
 8019dee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8019df2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019df6:	2b00      	cmp	r3, #0
 8019df8:	d168      	bne.n	8019ecc <f_open+0x1d0>
 8019dfa:	79fb      	ldrb	r3, [r7, #7]
 8019dfc:	f003 0308 	and.w	r3, r3, #8
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	d063      	beq.n	8019ecc <f_open+0x1d0>
				dw = GET_FATTIME();
 8019e04:	f7fb fb76 	bl	80154f4 <get_fattime>
 8019e08:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8019e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e0c:	330e      	adds	r3, #14
 8019e0e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8019e10:	4618      	mov	r0, r3
 8019e12:	f7fd fe4b 	bl	8017aac <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8019e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e18:	3316      	adds	r3, #22
 8019e1a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8019e1c:	4618      	mov	r0, r3
 8019e1e:	f7fd fe45 	bl	8017aac <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8019e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e24:	330b      	adds	r3, #11
 8019e26:	2220      	movs	r2, #32
 8019e28:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8019e2a:	697b      	ldr	r3, [r7, #20]
 8019e2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019e2e:	4611      	mov	r1, r2
 8019e30:	4618      	mov	r0, r3
 8019e32:	f7fe fe1a 	bl	8018a6a <ld_clust>
 8019e36:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8019e38:	697b      	ldr	r3, [r7, #20]
 8019e3a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8019e3c:	2200      	movs	r2, #0
 8019e3e:	4618      	mov	r0, r3
 8019e40:	f7fe fe32 	bl	8018aa8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8019e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e46:	331c      	adds	r3, #28
 8019e48:	2100      	movs	r1, #0
 8019e4a:	4618      	mov	r0, r3
 8019e4c:	f7fd fe2e 	bl	8017aac <st_dword>
					fs->wflag = 1;
 8019e50:	697b      	ldr	r3, [r7, #20]
 8019e52:	2201      	movs	r2, #1
 8019e54:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8019e56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	d037      	beq.n	8019ecc <f_open+0x1d0>
						dw = fs->winsect;
 8019e5c:	697b      	ldr	r3, [r7, #20]
 8019e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019e60:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8019e62:	f107 0318 	add.w	r3, r7, #24
 8019e66:	2200      	movs	r2, #0
 8019e68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8019e6a:	4618      	mov	r0, r3
 8019e6c:	f7fe fb22 	bl	80184b4 <remove_chain>
 8019e70:	4603      	mov	r3, r0
 8019e72:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8019e76:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	d126      	bne.n	8019ecc <f_open+0x1d0>
							res = move_window(fs, dw);
 8019e7e:	697b      	ldr	r3, [r7, #20]
 8019e80:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8019e82:	4618      	mov	r0, r3
 8019e84:	f7fe f86c 	bl	8017f60 <move_window>
 8019e88:	4603      	mov	r3, r0
 8019e8a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8019e8e:	697b      	ldr	r3, [r7, #20]
 8019e90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019e92:	3a01      	subs	r2, #1
 8019e94:	615a      	str	r2, [r3, #20]
 8019e96:	e019      	b.n	8019ecc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8019e98:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019e9c:	2b00      	cmp	r3, #0
 8019e9e:	d115      	bne.n	8019ecc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8019ea0:	7fbb      	ldrb	r3, [r7, #30]
 8019ea2:	f003 0310 	and.w	r3, r3, #16
 8019ea6:	2b00      	cmp	r3, #0
 8019ea8:	d003      	beq.n	8019eb2 <f_open+0x1b6>
					res = FR_NO_FILE;
 8019eaa:	2304      	movs	r3, #4
 8019eac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8019eb0:	e00c      	b.n	8019ecc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8019eb2:	79fb      	ldrb	r3, [r7, #7]
 8019eb4:	f003 0302 	and.w	r3, r3, #2
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	d007      	beq.n	8019ecc <f_open+0x1d0>
 8019ebc:	7fbb      	ldrb	r3, [r7, #30]
 8019ebe:	f003 0301 	and.w	r3, r3, #1
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	d002      	beq.n	8019ecc <f_open+0x1d0>
						res = FR_DENIED;
 8019ec6:	2307      	movs	r3, #7
 8019ec8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8019ecc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019ed0:	2b00      	cmp	r3, #0
 8019ed2:	d126      	bne.n	8019f22 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8019ed4:	79fb      	ldrb	r3, [r7, #7]
 8019ed6:	f003 0308 	and.w	r3, r3, #8
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	d003      	beq.n	8019ee6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8019ede:	79fb      	ldrb	r3, [r7, #7]
 8019ee0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019ee4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8019ee6:	697b      	ldr	r3, [r7, #20]
 8019ee8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8019eea:	68fb      	ldr	r3, [r7, #12]
 8019eec:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8019eee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019ef0:	68fb      	ldr	r3, [r7, #12]
 8019ef2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8019ef4:	79fb      	ldrb	r3, [r7, #7]
 8019ef6:	2b01      	cmp	r3, #1
 8019ef8:	bf8c      	ite	hi
 8019efa:	2301      	movhi	r3, #1
 8019efc:	2300      	movls	r3, #0
 8019efe:	b2db      	uxtb	r3, r3
 8019f00:	461a      	mov	r2, r3
 8019f02:	f107 0318 	add.w	r3, r7, #24
 8019f06:	4611      	mov	r1, r2
 8019f08:	4618      	mov	r0, r3
 8019f0a:	f7fd fef7 	bl	8017cfc <inc_lock>
 8019f0e:	4602      	mov	r2, r0
 8019f10:	68fb      	ldr	r3, [r7, #12]
 8019f12:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8019f14:	68fb      	ldr	r3, [r7, #12]
 8019f16:	691b      	ldr	r3, [r3, #16]
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	d102      	bne.n	8019f22 <f_open+0x226>
 8019f1c:	2302      	movs	r3, #2
 8019f1e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8019f22:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	f040 80a3 	bne.w	801a072 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8019f2c:	697b      	ldr	r3, [r7, #20]
 8019f2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019f30:	4611      	mov	r1, r2
 8019f32:	4618      	mov	r0, r3
 8019f34:	f7fe fd99 	bl	8018a6a <ld_clust>
 8019f38:	4602      	mov	r2, r0
 8019f3a:	68fb      	ldr	r3, [r7, #12]
 8019f3c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8019f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f40:	331c      	adds	r3, #28
 8019f42:	4618      	mov	r0, r3
 8019f44:	f7fd fd74 	bl	8017a30 <ld_dword>
 8019f48:	4602      	mov	r2, r0
 8019f4a:	68fb      	ldr	r3, [r7, #12]
 8019f4c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8019f4e:	68fb      	ldr	r3, [r7, #12]
 8019f50:	2200      	movs	r2, #0
 8019f52:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8019f54:	697a      	ldr	r2, [r7, #20]
 8019f56:	68fb      	ldr	r3, [r7, #12]
 8019f58:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8019f5a:	697b      	ldr	r3, [r7, #20]
 8019f5c:	88da      	ldrh	r2, [r3, #6]
 8019f5e:	68fb      	ldr	r3, [r7, #12]
 8019f60:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8019f62:	68fb      	ldr	r3, [r7, #12]
 8019f64:	79fa      	ldrb	r2, [r7, #7]
 8019f66:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8019f68:	68fb      	ldr	r3, [r7, #12]
 8019f6a:	2200      	movs	r2, #0
 8019f6c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8019f6e:	68fb      	ldr	r3, [r7, #12]
 8019f70:	2200      	movs	r2, #0
 8019f72:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8019f74:	68fb      	ldr	r3, [r7, #12]
 8019f76:	2200      	movs	r2, #0
 8019f78:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8019f7a:	68fb      	ldr	r3, [r7, #12]
 8019f7c:	3330      	adds	r3, #48	@ 0x30
 8019f7e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8019f82:	2100      	movs	r1, #0
 8019f84:	4618      	mov	r0, r3
 8019f86:	f7fd fdde 	bl	8017b46 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8019f8a:	79fb      	ldrb	r3, [r7, #7]
 8019f8c:	f003 0320 	and.w	r3, r3, #32
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d06e      	beq.n	801a072 <f_open+0x376>
 8019f94:	68fb      	ldr	r3, [r7, #12]
 8019f96:	68db      	ldr	r3, [r3, #12]
 8019f98:	2b00      	cmp	r3, #0
 8019f9a:	d06a      	beq.n	801a072 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8019f9c:	68fb      	ldr	r3, [r7, #12]
 8019f9e:	68da      	ldr	r2, [r3, #12]
 8019fa0:	68fb      	ldr	r3, [r7, #12]
 8019fa2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8019fa4:	697b      	ldr	r3, [r7, #20]
 8019fa6:	895b      	ldrh	r3, [r3, #10]
 8019fa8:	461a      	mov	r2, r3
 8019faa:	697b      	ldr	r3, [r7, #20]
 8019fac:	899b      	ldrh	r3, [r3, #12]
 8019fae:	fb02 f303 	mul.w	r3, r2, r3
 8019fb2:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8019fb4:	68fb      	ldr	r3, [r7, #12]
 8019fb6:	689b      	ldr	r3, [r3, #8]
 8019fb8:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8019fba:	68fb      	ldr	r3, [r7, #12]
 8019fbc:	68db      	ldr	r3, [r3, #12]
 8019fbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019fc0:	e016      	b.n	8019ff0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8019fc2:	68fb      	ldr	r3, [r7, #12]
 8019fc4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8019fc6:	4618      	mov	r0, r3
 8019fc8:	f7fe f887 	bl	80180da <get_fat>
 8019fcc:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8019fce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019fd0:	2b01      	cmp	r3, #1
 8019fd2:	d802      	bhi.n	8019fda <f_open+0x2de>
 8019fd4:	2302      	movs	r3, #2
 8019fd6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8019fda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019fe0:	d102      	bne.n	8019fe8 <f_open+0x2ec>
 8019fe2:	2301      	movs	r3, #1
 8019fe4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8019fe8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8019fea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019fec:	1ad3      	subs	r3, r2, r3
 8019fee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019ff0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019ff4:	2b00      	cmp	r3, #0
 8019ff6:	d103      	bne.n	801a000 <f_open+0x304>
 8019ff8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8019ffa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019ffc:	429a      	cmp	r2, r3
 8019ffe:	d8e0      	bhi.n	8019fc2 <f_open+0x2c6>
				}
				fp->clust = clst;
 801a000:	68fb      	ldr	r3, [r7, #12]
 801a002:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a004:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801a006:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801a00a:	2b00      	cmp	r3, #0
 801a00c:	d131      	bne.n	801a072 <f_open+0x376>
 801a00e:	697b      	ldr	r3, [r7, #20]
 801a010:	899b      	ldrh	r3, [r3, #12]
 801a012:	461a      	mov	r2, r3
 801a014:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a016:	fbb3 f1f2 	udiv	r1, r3, r2
 801a01a:	fb01 f202 	mul.w	r2, r1, r2
 801a01e:	1a9b      	subs	r3, r3, r2
 801a020:	2b00      	cmp	r3, #0
 801a022:	d026      	beq.n	801a072 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801a024:	697b      	ldr	r3, [r7, #20]
 801a026:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801a028:	4618      	mov	r0, r3
 801a02a:	f7fe f837 	bl	801809c <clust2sect>
 801a02e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801a030:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a032:	2b00      	cmp	r3, #0
 801a034:	d103      	bne.n	801a03e <f_open+0x342>
						res = FR_INT_ERR;
 801a036:	2302      	movs	r3, #2
 801a038:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801a03c:	e019      	b.n	801a072 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801a03e:	697b      	ldr	r3, [r7, #20]
 801a040:	899b      	ldrh	r3, [r3, #12]
 801a042:	461a      	mov	r2, r3
 801a044:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a046:	fbb3 f2f2 	udiv	r2, r3, r2
 801a04a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a04c:	441a      	add	r2, r3
 801a04e:	68fb      	ldr	r3, [r7, #12]
 801a050:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801a052:	697b      	ldr	r3, [r7, #20]
 801a054:	7858      	ldrb	r0, [r3, #1]
 801a056:	68fb      	ldr	r3, [r7, #12]
 801a058:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a05c:	68fb      	ldr	r3, [r7, #12]
 801a05e:	6a1a      	ldr	r2, [r3, #32]
 801a060:	2301      	movs	r3, #1
 801a062:	f7fd fc6f 	bl	8017944 <disk_read>
 801a066:	4603      	mov	r3, r0
 801a068:	2b00      	cmp	r3, #0
 801a06a:	d002      	beq.n	801a072 <f_open+0x376>
 801a06c:	2301      	movs	r3, #1
 801a06e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801a072:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801a076:	2b00      	cmp	r3, #0
 801a078:	d002      	beq.n	801a080 <f_open+0x384>
 801a07a:	68fb      	ldr	r3, [r7, #12]
 801a07c:	2200      	movs	r2, #0
 801a07e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801a080:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801a084:	4618      	mov	r0, r3
 801a086:	3768      	adds	r7, #104	@ 0x68
 801a088:	46bd      	mov	sp, r7
 801a08a:	bd80      	pop	{r7, pc}

0801a08c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801a08c:	b580      	push	{r7, lr}
 801a08e:	b08c      	sub	sp, #48	@ 0x30
 801a090:	af00      	add	r7, sp, #0
 801a092:	60f8      	str	r0, [r7, #12]
 801a094:	60b9      	str	r1, [r7, #8]
 801a096:	607a      	str	r2, [r7, #4]
 801a098:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801a09a:	68bb      	ldr	r3, [r7, #8]
 801a09c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801a09e:	683b      	ldr	r3, [r7, #0]
 801a0a0:	2200      	movs	r2, #0
 801a0a2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801a0a4:	68fb      	ldr	r3, [r7, #12]
 801a0a6:	f107 0210 	add.w	r2, r7, #16
 801a0aa:	4611      	mov	r1, r2
 801a0ac:	4618      	mov	r0, r3
 801a0ae:	f7ff fda9 	bl	8019c04 <validate>
 801a0b2:	4603      	mov	r3, r0
 801a0b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801a0b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	d107      	bne.n	801a0d0 <f_write+0x44>
 801a0c0:	68fb      	ldr	r3, [r7, #12]
 801a0c2:	7d5b      	ldrb	r3, [r3, #21]
 801a0c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801a0c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	d002      	beq.n	801a0d6 <f_write+0x4a>
 801a0d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a0d4:	e16a      	b.n	801a3ac <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801a0d6:	68fb      	ldr	r3, [r7, #12]
 801a0d8:	7d1b      	ldrb	r3, [r3, #20]
 801a0da:	f003 0302 	and.w	r3, r3, #2
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	d101      	bne.n	801a0e6 <f_write+0x5a>
 801a0e2:	2307      	movs	r3, #7
 801a0e4:	e162      	b.n	801a3ac <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801a0e6:	68fb      	ldr	r3, [r7, #12]
 801a0e8:	699a      	ldr	r2, [r3, #24]
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	441a      	add	r2, r3
 801a0ee:	68fb      	ldr	r3, [r7, #12]
 801a0f0:	699b      	ldr	r3, [r3, #24]
 801a0f2:	429a      	cmp	r2, r3
 801a0f4:	f080 814c 	bcs.w	801a390 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801a0f8:	68fb      	ldr	r3, [r7, #12]
 801a0fa:	699b      	ldr	r3, [r3, #24]
 801a0fc:	43db      	mvns	r3, r3
 801a0fe:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801a100:	e146      	b.n	801a390 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801a102:	68fb      	ldr	r3, [r7, #12]
 801a104:	699b      	ldr	r3, [r3, #24]
 801a106:	693a      	ldr	r2, [r7, #16]
 801a108:	8992      	ldrh	r2, [r2, #12]
 801a10a:	fbb3 f1f2 	udiv	r1, r3, r2
 801a10e:	fb01 f202 	mul.w	r2, r1, r2
 801a112:	1a9b      	subs	r3, r3, r2
 801a114:	2b00      	cmp	r3, #0
 801a116:	f040 80f1 	bne.w	801a2fc <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801a11a:	68fb      	ldr	r3, [r7, #12]
 801a11c:	699b      	ldr	r3, [r3, #24]
 801a11e:	693a      	ldr	r2, [r7, #16]
 801a120:	8992      	ldrh	r2, [r2, #12]
 801a122:	fbb3 f3f2 	udiv	r3, r3, r2
 801a126:	693a      	ldr	r2, [r7, #16]
 801a128:	8952      	ldrh	r2, [r2, #10]
 801a12a:	3a01      	subs	r2, #1
 801a12c:	4013      	ands	r3, r2
 801a12e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801a130:	69bb      	ldr	r3, [r7, #24]
 801a132:	2b00      	cmp	r3, #0
 801a134:	d143      	bne.n	801a1be <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801a136:	68fb      	ldr	r3, [r7, #12]
 801a138:	699b      	ldr	r3, [r3, #24]
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	d10c      	bne.n	801a158 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801a13e:	68fb      	ldr	r3, [r7, #12]
 801a140:	689b      	ldr	r3, [r3, #8]
 801a142:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801a144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a146:	2b00      	cmp	r3, #0
 801a148:	d11a      	bne.n	801a180 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801a14a:	68fb      	ldr	r3, [r7, #12]
 801a14c:	2100      	movs	r1, #0
 801a14e:	4618      	mov	r0, r3
 801a150:	f7fe fa15 	bl	801857e <create_chain>
 801a154:	62b8      	str	r0, [r7, #40]	@ 0x28
 801a156:	e013      	b.n	801a180 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801a158:	68fb      	ldr	r3, [r7, #12]
 801a15a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	d007      	beq.n	801a170 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801a160:	68fb      	ldr	r3, [r7, #12]
 801a162:	699b      	ldr	r3, [r3, #24]
 801a164:	4619      	mov	r1, r3
 801a166:	68f8      	ldr	r0, [r7, #12]
 801a168:	f7fe faa1 	bl	80186ae <clmt_clust>
 801a16c:	62b8      	str	r0, [r7, #40]	@ 0x28
 801a16e:	e007      	b.n	801a180 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801a170:	68fa      	ldr	r2, [r7, #12]
 801a172:	68fb      	ldr	r3, [r7, #12]
 801a174:	69db      	ldr	r3, [r3, #28]
 801a176:	4619      	mov	r1, r3
 801a178:	4610      	mov	r0, r2
 801a17a:	f7fe fa00 	bl	801857e <create_chain>
 801a17e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801a180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a182:	2b00      	cmp	r3, #0
 801a184:	f000 8109 	beq.w	801a39a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801a188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a18a:	2b01      	cmp	r3, #1
 801a18c:	d104      	bne.n	801a198 <f_write+0x10c>
 801a18e:	68fb      	ldr	r3, [r7, #12]
 801a190:	2202      	movs	r2, #2
 801a192:	755a      	strb	r2, [r3, #21]
 801a194:	2302      	movs	r3, #2
 801a196:	e109      	b.n	801a3ac <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801a198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a19a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a19e:	d104      	bne.n	801a1aa <f_write+0x11e>
 801a1a0:	68fb      	ldr	r3, [r7, #12]
 801a1a2:	2201      	movs	r2, #1
 801a1a4:	755a      	strb	r2, [r3, #21]
 801a1a6:	2301      	movs	r3, #1
 801a1a8:	e100      	b.n	801a3ac <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801a1aa:	68fb      	ldr	r3, [r7, #12]
 801a1ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a1ae:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801a1b0:	68fb      	ldr	r3, [r7, #12]
 801a1b2:	689b      	ldr	r3, [r3, #8]
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d102      	bne.n	801a1be <f_write+0x132>
 801a1b8:	68fb      	ldr	r3, [r7, #12]
 801a1ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a1bc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801a1be:	68fb      	ldr	r3, [r7, #12]
 801a1c0:	7d1b      	ldrb	r3, [r3, #20]
 801a1c2:	b25b      	sxtb	r3, r3
 801a1c4:	2b00      	cmp	r3, #0
 801a1c6:	da18      	bge.n	801a1fa <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801a1c8:	693b      	ldr	r3, [r7, #16]
 801a1ca:	7858      	ldrb	r0, [r3, #1]
 801a1cc:	68fb      	ldr	r3, [r7, #12]
 801a1ce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a1d2:	68fb      	ldr	r3, [r7, #12]
 801a1d4:	6a1a      	ldr	r2, [r3, #32]
 801a1d6:	2301      	movs	r3, #1
 801a1d8:	f7fd fbd4 	bl	8017984 <disk_write>
 801a1dc:	4603      	mov	r3, r0
 801a1de:	2b00      	cmp	r3, #0
 801a1e0:	d004      	beq.n	801a1ec <f_write+0x160>
 801a1e2:	68fb      	ldr	r3, [r7, #12]
 801a1e4:	2201      	movs	r2, #1
 801a1e6:	755a      	strb	r2, [r3, #21]
 801a1e8:	2301      	movs	r3, #1
 801a1ea:	e0df      	b.n	801a3ac <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801a1ec:	68fb      	ldr	r3, [r7, #12]
 801a1ee:	7d1b      	ldrb	r3, [r3, #20]
 801a1f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a1f4:	b2da      	uxtb	r2, r3
 801a1f6:	68fb      	ldr	r3, [r7, #12]
 801a1f8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801a1fa:	693a      	ldr	r2, [r7, #16]
 801a1fc:	68fb      	ldr	r3, [r7, #12]
 801a1fe:	69db      	ldr	r3, [r3, #28]
 801a200:	4619      	mov	r1, r3
 801a202:	4610      	mov	r0, r2
 801a204:	f7fd ff4a 	bl	801809c <clust2sect>
 801a208:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801a20a:	697b      	ldr	r3, [r7, #20]
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	d104      	bne.n	801a21a <f_write+0x18e>
 801a210:	68fb      	ldr	r3, [r7, #12]
 801a212:	2202      	movs	r2, #2
 801a214:	755a      	strb	r2, [r3, #21]
 801a216:	2302      	movs	r3, #2
 801a218:	e0c8      	b.n	801a3ac <f_write+0x320>
			sect += csect;
 801a21a:	697a      	ldr	r2, [r7, #20]
 801a21c:	69bb      	ldr	r3, [r7, #24]
 801a21e:	4413      	add	r3, r2
 801a220:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801a222:	693b      	ldr	r3, [r7, #16]
 801a224:	899b      	ldrh	r3, [r3, #12]
 801a226:	461a      	mov	r2, r3
 801a228:	687b      	ldr	r3, [r7, #4]
 801a22a:	fbb3 f3f2 	udiv	r3, r3, r2
 801a22e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801a230:	6a3b      	ldr	r3, [r7, #32]
 801a232:	2b00      	cmp	r3, #0
 801a234:	d043      	beq.n	801a2be <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801a236:	69ba      	ldr	r2, [r7, #24]
 801a238:	6a3b      	ldr	r3, [r7, #32]
 801a23a:	4413      	add	r3, r2
 801a23c:	693a      	ldr	r2, [r7, #16]
 801a23e:	8952      	ldrh	r2, [r2, #10]
 801a240:	4293      	cmp	r3, r2
 801a242:	d905      	bls.n	801a250 <f_write+0x1c4>
					cc = fs->csize - csect;
 801a244:	693b      	ldr	r3, [r7, #16]
 801a246:	895b      	ldrh	r3, [r3, #10]
 801a248:	461a      	mov	r2, r3
 801a24a:	69bb      	ldr	r3, [r7, #24]
 801a24c:	1ad3      	subs	r3, r2, r3
 801a24e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801a250:	693b      	ldr	r3, [r7, #16]
 801a252:	7858      	ldrb	r0, [r3, #1]
 801a254:	6a3b      	ldr	r3, [r7, #32]
 801a256:	697a      	ldr	r2, [r7, #20]
 801a258:	69f9      	ldr	r1, [r7, #28]
 801a25a:	f7fd fb93 	bl	8017984 <disk_write>
 801a25e:	4603      	mov	r3, r0
 801a260:	2b00      	cmp	r3, #0
 801a262:	d004      	beq.n	801a26e <f_write+0x1e2>
 801a264:	68fb      	ldr	r3, [r7, #12]
 801a266:	2201      	movs	r2, #1
 801a268:	755a      	strb	r2, [r3, #21]
 801a26a:	2301      	movs	r3, #1
 801a26c:	e09e      	b.n	801a3ac <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801a26e:	68fb      	ldr	r3, [r7, #12]
 801a270:	6a1a      	ldr	r2, [r3, #32]
 801a272:	697b      	ldr	r3, [r7, #20]
 801a274:	1ad3      	subs	r3, r2, r3
 801a276:	6a3a      	ldr	r2, [r7, #32]
 801a278:	429a      	cmp	r2, r3
 801a27a:	d918      	bls.n	801a2ae <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801a27c:	68fb      	ldr	r3, [r7, #12]
 801a27e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801a282:	68fb      	ldr	r3, [r7, #12]
 801a284:	6a1a      	ldr	r2, [r3, #32]
 801a286:	697b      	ldr	r3, [r7, #20]
 801a288:	1ad3      	subs	r3, r2, r3
 801a28a:	693a      	ldr	r2, [r7, #16]
 801a28c:	8992      	ldrh	r2, [r2, #12]
 801a28e:	fb02 f303 	mul.w	r3, r2, r3
 801a292:	69fa      	ldr	r2, [r7, #28]
 801a294:	18d1      	adds	r1, r2, r3
 801a296:	693b      	ldr	r3, [r7, #16]
 801a298:	899b      	ldrh	r3, [r3, #12]
 801a29a:	461a      	mov	r2, r3
 801a29c:	f7fd fc32 	bl	8017b04 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801a2a0:	68fb      	ldr	r3, [r7, #12]
 801a2a2:	7d1b      	ldrb	r3, [r3, #20]
 801a2a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a2a8:	b2da      	uxtb	r2, r3
 801a2aa:	68fb      	ldr	r3, [r7, #12]
 801a2ac:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801a2ae:	693b      	ldr	r3, [r7, #16]
 801a2b0:	899b      	ldrh	r3, [r3, #12]
 801a2b2:	461a      	mov	r2, r3
 801a2b4:	6a3b      	ldr	r3, [r7, #32]
 801a2b6:	fb02 f303 	mul.w	r3, r2, r3
 801a2ba:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801a2bc:	e04b      	b.n	801a356 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801a2be:	68fb      	ldr	r3, [r7, #12]
 801a2c0:	6a1b      	ldr	r3, [r3, #32]
 801a2c2:	697a      	ldr	r2, [r7, #20]
 801a2c4:	429a      	cmp	r2, r3
 801a2c6:	d016      	beq.n	801a2f6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801a2c8:	68fb      	ldr	r3, [r7, #12]
 801a2ca:	699a      	ldr	r2, [r3, #24]
 801a2cc:	68fb      	ldr	r3, [r7, #12]
 801a2ce:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801a2d0:	429a      	cmp	r2, r3
 801a2d2:	d210      	bcs.n	801a2f6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801a2d4:	693b      	ldr	r3, [r7, #16]
 801a2d6:	7858      	ldrb	r0, [r3, #1]
 801a2d8:	68fb      	ldr	r3, [r7, #12]
 801a2da:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a2de:	2301      	movs	r3, #1
 801a2e0:	697a      	ldr	r2, [r7, #20]
 801a2e2:	f7fd fb2f 	bl	8017944 <disk_read>
 801a2e6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801a2e8:	2b00      	cmp	r3, #0
 801a2ea:	d004      	beq.n	801a2f6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801a2ec:	68fb      	ldr	r3, [r7, #12]
 801a2ee:	2201      	movs	r2, #1
 801a2f0:	755a      	strb	r2, [r3, #21]
 801a2f2:	2301      	movs	r3, #1
 801a2f4:	e05a      	b.n	801a3ac <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801a2f6:	68fb      	ldr	r3, [r7, #12]
 801a2f8:	697a      	ldr	r2, [r7, #20]
 801a2fa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801a2fc:	693b      	ldr	r3, [r7, #16]
 801a2fe:	899b      	ldrh	r3, [r3, #12]
 801a300:	4618      	mov	r0, r3
 801a302:	68fb      	ldr	r3, [r7, #12]
 801a304:	699b      	ldr	r3, [r3, #24]
 801a306:	693a      	ldr	r2, [r7, #16]
 801a308:	8992      	ldrh	r2, [r2, #12]
 801a30a:	fbb3 f1f2 	udiv	r1, r3, r2
 801a30e:	fb01 f202 	mul.w	r2, r1, r2
 801a312:	1a9b      	subs	r3, r3, r2
 801a314:	1ac3      	subs	r3, r0, r3
 801a316:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801a318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a31a:	687b      	ldr	r3, [r7, #4]
 801a31c:	429a      	cmp	r2, r3
 801a31e:	d901      	bls.n	801a324 <f_write+0x298>
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801a324:	68fb      	ldr	r3, [r7, #12]
 801a326:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a32a:	68fb      	ldr	r3, [r7, #12]
 801a32c:	699b      	ldr	r3, [r3, #24]
 801a32e:	693a      	ldr	r2, [r7, #16]
 801a330:	8992      	ldrh	r2, [r2, #12]
 801a332:	fbb3 f0f2 	udiv	r0, r3, r2
 801a336:	fb00 f202 	mul.w	r2, r0, r2
 801a33a:	1a9b      	subs	r3, r3, r2
 801a33c:	440b      	add	r3, r1
 801a33e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a340:	69f9      	ldr	r1, [r7, #28]
 801a342:	4618      	mov	r0, r3
 801a344:	f7fd fbde 	bl	8017b04 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801a348:	68fb      	ldr	r3, [r7, #12]
 801a34a:	7d1b      	ldrb	r3, [r3, #20]
 801a34c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801a350:	b2da      	uxtb	r2, r3
 801a352:	68fb      	ldr	r3, [r7, #12]
 801a354:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801a356:	69fa      	ldr	r2, [r7, #28]
 801a358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a35a:	4413      	add	r3, r2
 801a35c:	61fb      	str	r3, [r7, #28]
 801a35e:	68fb      	ldr	r3, [r7, #12]
 801a360:	699a      	ldr	r2, [r3, #24]
 801a362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a364:	441a      	add	r2, r3
 801a366:	68fb      	ldr	r3, [r7, #12]
 801a368:	619a      	str	r2, [r3, #24]
 801a36a:	68fb      	ldr	r3, [r7, #12]
 801a36c:	68da      	ldr	r2, [r3, #12]
 801a36e:	68fb      	ldr	r3, [r7, #12]
 801a370:	699b      	ldr	r3, [r3, #24]
 801a372:	429a      	cmp	r2, r3
 801a374:	bf38      	it	cc
 801a376:	461a      	movcc	r2, r3
 801a378:	68fb      	ldr	r3, [r7, #12]
 801a37a:	60da      	str	r2, [r3, #12]
 801a37c:	683b      	ldr	r3, [r7, #0]
 801a37e:	681a      	ldr	r2, [r3, #0]
 801a380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a382:	441a      	add	r2, r3
 801a384:	683b      	ldr	r3, [r7, #0]
 801a386:	601a      	str	r2, [r3, #0]
 801a388:	687a      	ldr	r2, [r7, #4]
 801a38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a38c:	1ad3      	subs	r3, r2, r3
 801a38e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	2b00      	cmp	r3, #0
 801a394:	f47f aeb5 	bne.w	801a102 <f_write+0x76>
 801a398:	e000      	b.n	801a39c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801a39a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801a39c:	68fb      	ldr	r3, [r7, #12]
 801a39e:	7d1b      	ldrb	r3, [r3, #20]
 801a3a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a3a4:	b2da      	uxtb	r2, r3
 801a3a6:	68fb      	ldr	r3, [r7, #12]
 801a3a8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801a3aa:	2300      	movs	r3, #0
}
 801a3ac:	4618      	mov	r0, r3
 801a3ae:	3730      	adds	r7, #48	@ 0x30
 801a3b0:	46bd      	mov	sp, r7
 801a3b2:	bd80      	pop	{r7, pc}

0801a3b4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801a3b4:	b580      	push	{r7, lr}
 801a3b6:	b086      	sub	sp, #24
 801a3b8:	af00      	add	r7, sp, #0
 801a3ba:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	f107 0208 	add.w	r2, r7, #8
 801a3c2:	4611      	mov	r1, r2
 801a3c4:	4618      	mov	r0, r3
 801a3c6:	f7ff fc1d 	bl	8019c04 <validate>
 801a3ca:	4603      	mov	r3, r0
 801a3cc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801a3ce:	7dfb      	ldrb	r3, [r7, #23]
 801a3d0:	2b00      	cmp	r3, #0
 801a3d2:	d168      	bne.n	801a4a6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	7d1b      	ldrb	r3, [r3, #20]
 801a3d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	d062      	beq.n	801a4a6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	7d1b      	ldrb	r3, [r3, #20]
 801a3e4:	b25b      	sxtb	r3, r3
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	da15      	bge.n	801a416 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801a3ea:	68bb      	ldr	r3, [r7, #8]
 801a3ec:	7858      	ldrb	r0, [r3, #1]
 801a3ee:	687b      	ldr	r3, [r7, #4]
 801a3f0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	6a1a      	ldr	r2, [r3, #32]
 801a3f8:	2301      	movs	r3, #1
 801a3fa:	f7fd fac3 	bl	8017984 <disk_write>
 801a3fe:	4603      	mov	r3, r0
 801a400:	2b00      	cmp	r3, #0
 801a402:	d001      	beq.n	801a408 <f_sync+0x54>
 801a404:	2301      	movs	r3, #1
 801a406:	e04f      	b.n	801a4a8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	7d1b      	ldrb	r3, [r3, #20]
 801a40c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a410:	b2da      	uxtb	r2, r3
 801a412:	687b      	ldr	r3, [r7, #4]
 801a414:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801a416:	f7fb f86d 	bl	80154f4 <get_fattime>
 801a41a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801a41c:	68ba      	ldr	r2, [r7, #8]
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a422:	4619      	mov	r1, r3
 801a424:	4610      	mov	r0, r2
 801a426:	f7fd fd9b 	bl	8017f60 <move_window>
 801a42a:	4603      	mov	r3, r0
 801a42c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801a42e:	7dfb      	ldrb	r3, [r7, #23]
 801a430:	2b00      	cmp	r3, #0
 801a432:	d138      	bne.n	801a4a6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a438:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801a43a:	68fb      	ldr	r3, [r7, #12]
 801a43c:	330b      	adds	r3, #11
 801a43e:	781a      	ldrb	r2, [r3, #0]
 801a440:	68fb      	ldr	r3, [r7, #12]
 801a442:	330b      	adds	r3, #11
 801a444:	f042 0220 	orr.w	r2, r2, #32
 801a448:	b2d2      	uxtb	r2, r2
 801a44a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801a44c:	687b      	ldr	r3, [r7, #4]
 801a44e:	6818      	ldr	r0, [r3, #0]
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	689b      	ldr	r3, [r3, #8]
 801a454:	461a      	mov	r2, r3
 801a456:	68f9      	ldr	r1, [r7, #12]
 801a458:	f7fe fb26 	bl	8018aa8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801a45c:	68fb      	ldr	r3, [r7, #12]
 801a45e:	f103 021c 	add.w	r2, r3, #28
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	68db      	ldr	r3, [r3, #12]
 801a466:	4619      	mov	r1, r3
 801a468:	4610      	mov	r0, r2
 801a46a:	f7fd fb1f 	bl	8017aac <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801a46e:	68fb      	ldr	r3, [r7, #12]
 801a470:	3316      	adds	r3, #22
 801a472:	6939      	ldr	r1, [r7, #16]
 801a474:	4618      	mov	r0, r3
 801a476:	f7fd fb19 	bl	8017aac <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801a47a:	68fb      	ldr	r3, [r7, #12]
 801a47c:	3312      	adds	r3, #18
 801a47e:	2100      	movs	r1, #0
 801a480:	4618      	mov	r0, r3
 801a482:	f7fd faf8 	bl	8017a76 <st_word>
					fs->wflag = 1;
 801a486:	68bb      	ldr	r3, [r7, #8]
 801a488:	2201      	movs	r2, #1
 801a48a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801a48c:	68bb      	ldr	r3, [r7, #8]
 801a48e:	4618      	mov	r0, r3
 801a490:	f7fd fd94 	bl	8017fbc <sync_fs>
 801a494:	4603      	mov	r3, r0
 801a496:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	7d1b      	ldrb	r3, [r3, #20]
 801a49c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801a4a0:	b2da      	uxtb	r2, r3
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801a4a6:	7dfb      	ldrb	r3, [r7, #23]
}
 801a4a8:	4618      	mov	r0, r3
 801a4aa:	3718      	adds	r7, #24
 801a4ac:	46bd      	mov	sp, r7
 801a4ae:	bd80      	pop	{r7, pc}

0801a4b0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801a4b0:	b580      	push	{r7, lr}
 801a4b2:	b084      	sub	sp, #16
 801a4b4:	af00      	add	r7, sp, #0
 801a4b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801a4b8:	6878      	ldr	r0, [r7, #4]
 801a4ba:	f7ff ff7b 	bl	801a3b4 <f_sync>
 801a4be:	4603      	mov	r3, r0
 801a4c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801a4c2:	7bfb      	ldrb	r3, [r7, #15]
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	d118      	bne.n	801a4fa <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	f107 0208 	add.w	r2, r7, #8
 801a4ce:	4611      	mov	r1, r2
 801a4d0:	4618      	mov	r0, r3
 801a4d2:	f7ff fb97 	bl	8019c04 <validate>
 801a4d6:	4603      	mov	r3, r0
 801a4d8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801a4da:	7bfb      	ldrb	r3, [r7, #15]
 801a4dc:	2b00      	cmp	r3, #0
 801a4de:	d10c      	bne.n	801a4fa <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	691b      	ldr	r3, [r3, #16]
 801a4e4:	4618      	mov	r0, r3
 801a4e6:	f7fd fc97 	bl	8017e18 <dec_lock>
 801a4ea:	4603      	mov	r3, r0
 801a4ec:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801a4ee:	7bfb      	ldrb	r3, [r7, #15]
 801a4f0:	2b00      	cmp	r3, #0
 801a4f2:	d102      	bne.n	801a4fa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	2200      	movs	r2, #0
 801a4f8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801a4fa:	7bfb      	ldrb	r3, [r7, #15]
}
 801a4fc:	4618      	mov	r0, r3
 801a4fe:	3710      	adds	r7, #16
 801a500:	46bd      	mov	sp, r7
 801a502:	bd80      	pop	{r7, pc}

0801a504 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801a504:	b580      	push	{r7, lr}
 801a506:	b084      	sub	sp, #16
 801a508:	af00      	add	r7, sp, #0
 801a50a:	6078      	str	r0, [r7, #4]
 801a50c:	460b      	mov	r3, r1
 801a50e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 801a510:	78fb      	ldrb	r3, [r7, #3]
 801a512:	2b0a      	cmp	r3, #10
 801a514:	d103      	bne.n	801a51e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801a516:	210d      	movs	r1, #13
 801a518:	6878      	ldr	r0, [r7, #4]
 801a51a:	f7ff fff3 	bl	801a504 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	685b      	ldr	r3, [r3, #4]
 801a522:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801a524:	68fb      	ldr	r3, [r7, #12]
 801a526:	2b00      	cmp	r3, #0
 801a528:	db25      	blt.n	801a576 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 801a52a:	68fb      	ldr	r3, [r7, #12]
 801a52c:	1c5a      	adds	r2, r3, #1
 801a52e:	60fa      	str	r2, [r7, #12]
 801a530:	687a      	ldr	r2, [r7, #4]
 801a532:	4413      	add	r3, r2
 801a534:	78fa      	ldrb	r2, [r7, #3]
 801a536:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801a538:	68fb      	ldr	r3, [r7, #12]
 801a53a:	2b3c      	cmp	r3, #60	@ 0x3c
 801a53c:	dd12      	ble.n	801a564 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	6818      	ldr	r0, [r3, #0]
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	f103 010c 	add.w	r1, r3, #12
 801a548:	68fa      	ldr	r2, [r7, #12]
 801a54a:	f107 0308 	add.w	r3, r7, #8
 801a54e:	f7ff fd9d 	bl	801a08c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801a552:	68ba      	ldr	r2, [r7, #8]
 801a554:	68fb      	ldr	r3, [r7, #12]
 801a556:	429a      	cmp	r2, r3
 801a558:	d101      	bne.n	801a55e <putc_bfd+0x5a>
 801a55a:	2300      	movs	r3, #0
 801a55c:	e001      	b.n	801a562 <putc_bfd+0x5e>
 801a55e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a562:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 801a564:	687b      	ldr	r3, [r7, #4]
 801a566:	68fa      	ldr	r2, [r7, #12]
 801a568:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	689b      	ldr	r3, [r3, #8]
 801a56e:	1c5a      	adds	r2, r3, #1
 801a570:	687b      	ldr	r3, [r7, #4]
 801a572:	609a      	str	r2, [r3, #8]
 801a574:	e000      	b.n	801a578 <putc_bfd+0x74>
	if (i < 0) return;
 801a576:	bf00      	nop
}
 801a578:	3710      	adds	r7, #16
 801a57a:	46bd      	mov	sp, r7
 801a57c:	bd80      	pop	{r7, pc}

0801a57e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801a57e:	b580      	push	{r7, lr}
 801a580:	b084      	sub	sp, #16
 801a582:	af00      	add	r7, sp, #0
 801a584:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801a586:	687b      	ldr	r3, [r7, #4]
 801a588:	685b      	ldr	r3, [r3, #4]
 801a58a:	2b00      	cmp	r3, #0
 801a58c:	db16      	blt.n	801a5bc <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	6818      	ldr	r0, [r3, #0]
 801a592:	687b      	ldr	r3, [r7, #4]
 801a594:	f103 010c 	add.w	r1, r3, #12
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	685b      	ldr	r3, [r3, #4]
 801a59c:	461a      	mov	r2, r3
 801a59e:	f107 030c 	add.w	r3, r7, #12
 801a5a2:	f7ff fd73 	bl	801a08c <f_write>
 801a5a6:	4603      	mov	r3, r0
 801a5a8:	2b00      	cmp	r3, #0
 801a5aa:	d107      	bne.n	801a5bc <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	685b      	ldr	r3, [r3, #4]
 801a5b0:	68fa      	ldr	r2, [r7, #12]
 801a5b2:	4293      	cmp	r3, r2
 801a5b4:	d102      	bne.n	801a5bc <putc_flush+0x3e>
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	689b      	ldr	r3, [r3, #8]
 801a5ba:	e001      	b.n	801a5c0 <putc_flush+0x42>
	return EOF;
 801a5bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801a5c0:	4618      	mov	r0, r3
 801a5c2:	3710      	adds	r7, #16
 801a5c4:	46bd      	mov	sp, r7
 801a5c6:	bd80      	pop	{r7, pc}

0801a5c8 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 801a5c8:	b480      	push	{r7}
 801a5ca:	b083      	sub	sp, #12
 801a5cc:	af00      	add	r7, sp, #0
 801a5ce:	6078      	str	r0, [r7, #4]
 801a5d0:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	683a      	ldr	r2, [r7, #0]
 801a5d6:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	2200      	movs	r2, #0
 801a5dc:	605a      	str	r2, [r3, #4]
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	685a      	ldr	r2, [r3, #4]
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	609a      	str	r2, [r3, #8]
}
 801a5e6:	bf00      	nop
 801a5e8:	370c      	adds	r7, #12
 801a5ea:	46bd      	mov	sp, r7
 801a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5f0:	4770      	bx	lr

0801a5f2 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 801a5f2:	b580      	push	{r7, lr}
 801a5f4:	b096      	sub	sp, #88	@ 0x58
 801a5f6:	af00      	add	r7, sp, #0
 801a5f8:	6078      	str	r0, [r7, #4]
 801a5fa:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 801a5fc:	f107 030c 	add.w	r3, r7, #12
 801a600:	6839      	ldr	r1, [r7, #0]
 801a602:	4618      	mov	r0, r3
 801a604:	f7ff ffe0 	bl	801a5c8 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 801a608:	e009      	b.n	801a61e <f_puts+0x2c>
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	1c5a      	adds	r2, r3, #1
 801a60e:	607a      	str	r2, [r7, #4]
 801a610:	781a      	ldrb	r2, [r3, #0]
 801a612:	f107 030c 	add.w	r3, r7, #12
 801a616:	4611      	mov	r1, r2
 801a618:	4618      	mov	r0, r3
 801a61a:	f7ff ff73 	bl	801a504 <putc_bfd>
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	781b      	ldrb	r3, [r3, #0]
 801a622:	2b00      	cmp	r3, #0
 801a624:	d1f1      	bne.n	801a60a <f_puts+0x18>
	return putc_flush(&pb);
 801a626:	f107 030c 	add.w	r3, r7, #12
 801a62a:	4618      	mov	r0, r3
 801a62c:	f7ff ffa7 	bl	801a57e <putc_flush>
 801a630:	4603      	mov	r3, r0
}
 801a632:	4618      	mov	r0, r3
 801a634:	3758      	adds	r7, #88	@ 0x58
 801a636:	46bd      	mov	sp, r7
 801a638:	bd80      	pop	{r7, pc}
	...

0801a63c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801a63c:	b480      	push	{r7}
 801a63e:	b087      	sub	sp, #28
 801a640:	af00      	add	r7, sp, #0
 801a642:	60f8      	str	r0, [r7, #12]
 801a644:	60b9      	str	r1, [r7, #8]
 801a646:	4613      	mov	r3, r2
 801a648:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801a64a:	2301      	movs	r3, #1
 801a64c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801a64e:	2300      	movs	r3, #0
 801a650:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801a652:	4b1f      	ldr	r3, [pc, #124]	@ (801a6d0 <FATFS_LinkDriverEx+0x94>)
 801a654:	7a5b      	ldrb	r3, [r3, #9]
 801a656:	b2db      	uxtb	r3, r3
 801a658:	2b00      	cmp	r3, #0
 801a65a:	d131      	bne.n	801a6c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801a65c:	4b1c      	ldr	r3, [pc, #112]	@ (801a6d0 <FATFS_LinkDriverEx+0x94>)
 801a65e:	7a5b      	ldrb	r3, [r3, #9]
 801a660:	b2db      	uxtb	r3, r3
 801a662:	461a      	mov	r2, r3
 801a664:	4b1a      	ldr	r3, [pc, #104]	@ (801a6d0 <FATFS_LinkDriverEx+0x94>)
 801a666:	2100      	movs	r1, #0
 801a668:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801a66a:	4b19      	ldr	r3, [pc, #100]	@ (801a6d0 <FATFS_LinkDriverEx+0x94>)
 801a66c:	7a5b      	ldrb	r3, [r3, #9]
 801a66e:	b2db      	uxtb	r3, r3
 801a670:	4a17      	ldr	r2, [pc, #92]	@ (801a6d0 <FATFS_LinkDriverEx+0x94>)
 801a672:	009b      	lsls	r3, r3, #2
 801a674:	4413      	add	r3, r2
 801a676:	68fa      	ldr	r2, [r7, #12]
 801a678:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801a67a:	4b15      	ldr	r3, [pc, #84]	@ (801a6d0 <FATFS_LinkDriverEx+0x94>)
 801a67c:	7a5b      	ldrb	r3, [r3, #9]
 801a67e:	b2db      	uxtb	r3, r3
 801a680:	461a      	mov	r2, r3
 801a682:	4b13      	ldr	r3, [pc, #76]	@ (801a6d0 <FATFS_LinkDriverEx+0x94>)
 801a684:	4413      	add	r3, r2
 801a686:	79fa      	ldrb	r2, [r7, #7]
 801a688:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801a68a:	4b11      	ldr	r3, [pc, #68]	@ (801a6d0 <FATFS_LinkDriverEx+0x94>)
 801a68c:	7a5b      	ldrb	r3, [r3, #9]
 801a68e:	b2db      	uxtb	r3, r3
 801a690:	1c5a      	adds	r2, r3, #1
 801a692:	b2d1      	uxtb	r1, r2
 801a694:	4a0e      	ldr	r2, [pc, #56]	@ (801a6d0 <FATFS_LinkDriverEx+0x94>)
 801a696:	7251      	strb	r1, [r2, #9]
 801a698:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801a69a:	7dbb      	ldrb	r3, [r7, #22]
 801a69c:	3330      	adds	r3, #48	@ 0x30
 801a69e:	b2da      	uxtb	r2, r3
 801a6a0:	68bb      	ldr	r3, [r7, #8]
 801a6a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801a6a4:	68bb      	ldr	r3, [r7, #8]
 801a6a6:	3301      	adds	r3, #1
 801a6a8:	223a      	movs	r2, #58	@ 0x3a
 801a6aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801a6ac:	68bb      	ldr	r3, [r7, #8]
 801a6ae:	3302      	adds	r3, #2
 801a6b0:	222f      	movs	r2, #47	@ 0x2f
 801a6b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801a6b4:	68bb      	ldr	r3, [r7, #8]
 801a6b6:	3303      	adds	r3, #3
 801a6b8:	2200      	movs	r2, #0
 801a6ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801a6bc:	2300      	movs	r3, #0
 801a6be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801a6c0:	7dfb      	ldrb	r3, [r7, #23]
}
 801a6c2:	4618      	mov	r0, r3
 801a6c4:	371c      	adds	r7, #28
 801a6c6:	46bd      	mov	sp, r7
 801a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6cc:	4770      	bx	lr
 801a6ce:	bf00      	nop
 801a6d0:	24004100 	.word	0x24004100

0801a6d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801a6d4:	b580      	push	{r7, lr}
 801a6d6:	b082      	sub	sp, #8
 801a6d8:	af00      	add	r7, sp, #0
 801a6da:	6078      	str	r0, [r7, #4]
 801a6dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801a6de:	2200      	movs	r2, #0
 801a6e0:	6839      	ldr	r1, [r7, #0]
 801a6e2:	6878      	ldr	r0, [r7, #4]
 801a6e4:	f7ff ffaa 	bl	801a63c <FATFS_LinkDriverEx>
 801a6e8:	4603      	mov	r3, r0
}
 801a6ea:	4618      	mov	r0, r3
 801a6ec:	3708      	adds	r7, #8
 801a6ee:	46bd      	mov	sp, r7
 801a6f0:	bd80      	pop	{r7, pc}
	...

0801a6f4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801a6f4:	b480      	push	{r7}
 801a6f6:	b085      	sub	sp, #20
 801a6f8:	af00      	add	r7, sp, #0
 801a6fa:	4603      	mov	r3, r0
 801a6fc:	6039      	str	r1, [r7, #0]
 801a6fe:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801a700:	88fb      	ldrh	r3, [r7, #6]
 801a702:	2b7f      	cmp	r3, #127	@ 0x7f
 801a704:	d802      	bhi.n	801a70c <ff_convert+0x18>
		c = chr;
 801a706:	88fb      	ldrh	r3, [r7, #6]
 801a708:	81fb      	strh	r3, [r7, #14]
 801a70a:	e025      	b.n	801a758 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801a70c:	683b      	ldr	r3, [r7, #0]
 801a70e:	2b00      	cmp	r3, #0
 801a710:	d00b      	beq.n	801a72a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801a712:	88fb      	ldrh	r3, [r7, #6]
 801a714:	2bff      	cmp	r3, #255	@ 0xff
 801a716:	d805      	bhi.n	801a724 <ff_convert+0x30>
 801a718:	88fb      	ldrh	r3, [r7, #6]
 801a71a:	3b80      	subs	r3, #128	@ 0x80
 801a71c:	4a12      	ldr	r2, [pc, #72]	@ (801a768 <ff_convert+0x74>)
 801a71e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a722:	e000      	b.n	801a726 <ff_convert+0x32>
 801a724:	2300      	movs	r3, #0
 801a726:	81fb      	strh	r3, [r7, #14]
 801a728:	e016      	b.n	801a758 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801a72a:	2300      	movs	r3, #0
 801a72c:	81fb      	strh	r3, [r7, #14]
 801a72e:	e009      	b.n	801a744 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801a730:	89fb      	ldrh	r3, [r7, #14]
 801a732:	4a0d      	ldr	r2, [pc, #52]	@ (801a768 <ff_convert+0x74>)
 801a734:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a738:	88fa      	ldrh	r2, [r7, #6]
 801a73a:	429a      	cmp	r2, r3
 801a73c:	d006      	beq.n	801a74c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801a73e:	89fb      	ldrh	r3, [r7, #14]
 801a740:	3301      	adds	r3, #1
 801a742:	81fb      	strh	r3, [r7, #14]
 801a744:	89fb      	ldrh	r3, [r7, #14]
 801a746:	2b7f      	cmp	r3, #127	@ 0x7f
 801a748:	d9f2      	bls.n	801a730 <ff_convert+0x3c>
 801a74a:	e000      	b.n	801a74e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801a74c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801a74e:	89fb      	ldrh	r3, [r7, #14]
 801a750:	3380      	adds	r3, #128	@ 0x80
 801a752:	b29b      	uxth	r3, r3
 801a754:	b2db      	uxtb	r3, r3
 801a756:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801a758:	89fb      	ldrh	r3, [r7, #14]
}
 801a75a:	4618      	mov	r0, r3
 801a75c:	3714      	adds	r7, #20
 801a75e:	46bd      	mov	sp, r7
 801a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a764:	4770      	bx	lr
 801a766:	bf00      	nop
 801a768:	08020438 	.word	0x08020438

0801a76c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801a76c:	b480      	push	{r7}
 801a76e:	b087      	sub	sp, #28
 801a770:	af00      	add	r7, sp, #0
 801a772:	4603      	mov	r3, r0
 801a774:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801a776:	88fb      	ldrh	r3, [r7, #6]
 801a778:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801a77c:	d201      	bcs.n	801a782 <ff_wtoupper+0x16>
 801a77e:	4b3e      	ldr	r3, [pc, #248]	@ (801a878 <ff_wtoupper+0x10c>)
 801a780:	e000      	b.n	801a784 <ff_wtoupper+0x18>
 801a782:	4b3e      	ldr	r3, [pc, #248]	@ (801a87c <ff_wtoupper+0x110>)
 801a784:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801a786:	697b      	ldr	r3, [r7, #20]
 801a788:	1c9a      	adds	r2, r3, #2
 801a78a:	617a      	str	r2, [r7, #20]
 801a78c:	881b      	ldrh	r3, [r3, #0]
 801a78e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801a790:	8a7b      	ldrh	r3, [r7, #18]
 801a792:	2b00      	cmp	r3, #0
 801a794:	d068      	beq.n	801a868 <ff_wtoupper+0xfc>
 801a796:	88fa      	ldrh	r2, [r7, #6]
 801a798:	8a7b      	ldrh	r3, [r7, #18]
 801a79a:	429a      	cmp	r2, r3
 801a79c:	d364      	bcc.n	801a868 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801a79e:	697b      	ldr	r3, [r7, #20]
 801a7a0:	1c9a      	adds	r2, r3, #2
 801a7a2:	617a      	str	r2, [r7, #20]
 801a7a4:	881b      	ldrh	r3, [r3, #0]
 801a7a6:	823b      	strh	r3, [r7, #16]
 801a7a8:	8a3b      	ldrh	r3, [r7, #16]
 801a7aa:	0a1b      	lsrs	r3, r3, #8
 801a7ac:	81fb      	strh	r3, [r7, #14]
 801a7ae:	8a3b      	ldrh	r3, [r7, #16]
 801a7b0:	b2db      	uxtb	r3, r3
 801a7b2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801a7b4:	88fa      	ldrh	r2, [r7, #6]
 801a7b6:	8a79      	ldrh	r1, [r7, #18]
 801a7b8:	8a3b      	ldrh	r3, [r7, #16]
 801a7ba:	440b      	add	r3, r1
 801a7bc:	429a      	cmp	r2, r3
 801a7be:	da49      	bge.n	801a854 <ff_wtoupper+0xe8>
			switch (cmd) {
 801a7c0:	89fb      	ldrh	r3, [r7, #14]
 801a7c2:	2b08      	cmp	r3, #8
 801a7c4:	d84f      	bhi.n	801a866 <ff_wtoupper+0xfa>
 801a7c6:	a201      	add	r2, pc, #4	@ (adr r2, 801a7cc <ff_wtoupper+0x60>)
 801a7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a7cc:	0801a7f1 	.word	0x0801a7f1
 801a7d0:	0801a803 	.word	0x0801a803
 801a7d4:	0801a819 	.word	0x0801a819
 801a7d8:	0801a821 	.word	0x0801a821
 801a7dc:	0801a829 	.word	0x0801a829
 801a7e0:	0801a831 	.word	0x0801a831
 801a7e4:	0801a839 	.word	0x0801a839
 801a7e8:	0801a841 	.word	0x0801a841
 801a7ec:	0801a849 	.word	0x0801a849
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801a7f0:	88fa      	ldrh	r2, [r7, #6]
 801a7f2:	8a7b      	ldrh	r3, [r7, #18]
 801a7f4:	1ad3      	subs	r3, r2, r3
 801a7f6:	005b      	lsls	r3, r3, #1
 801a7f8:	697a      	ldr	r2, [r7, #20]
 801a7fa:	4413      	add	r3, r2
 801a7fc:	881b      	ldrh	r3, [r3, #0]
 801a7fe:	80fb      	strh	r3, [r7, #6]
 801a800:	e027      	b.n	801a852 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801a802:	88fa      	ldrh	r2, [r7, #6]
 801a804:	8a7b      	ldrh	r3, [r7, #18]
 801a806:	1ad3      	subs	r3, r2, r3
 801a808:	b29b      	uxth	r3, r3
 801a80a:	f003 0301 	and.w	r3, r3, #1
 801a80e:	b29b      	uxth	r3, r3
 801a810:	88fa      	ldrh	r2, [r7, #6]
 801a812:	1ad3      	subs	r3, r2, r3
 801a814:	80fb      	strh	r3, [r7, #6]
 801a816:	e01c      	b.n	801a852 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801a818:	88fb      	ldrh	r3, [r7, #6]
 801a81a:	3b10      	subs	r3, #16
 801a81c:	80fb      	strh	r3, [r7, #6]
 801a81e:	e018      	b.n	801a852 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801a820:	88fb      	ldrh	r3, [r7, #6]
 801a822:	3b20      	subs	r3, #32
 801a824:	80fb      	strh	r3, [r7, #6]
 801a826:	e014      	b.n	801a852 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801a828:	88fb      	ldrh	r3, [r7, #6]
 801a82a:	3b30      	subs	r3, #48	@ 0x30
 801a82c:	80fb      	strh	r3, [r7, #6]
 801a82e:	e010      	b.n	801a852 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801a830:	88fb      	ldrh	r3, [r7, #6]
 801a832:	3b1a      	subs	r3, #26
 801a834:	80fb      	strh	r3, [r7, #6]
 801a836:	e00c      	b.n	801a852 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801a838:	88fb      	ldrh	r3, [r7, #6]
 801a83a:	3308      	adds	r3, #8
 801a83c:	80fb      	strh	r3, [r7, #6]
 801a83e:	e008      	b.n	801a852 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801a840:	88fb      	ldrh	r3, [r7, #6]
 801a842:	3b50      	subs	r3, #80	@ 0x50
 801a844:	80fb      	strh	r3, [r7, #6]
 801a846:	e004      	b.n	801a852 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801a848:	88fb      	ldrh	r3, [r7, #6]
 801a84a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801a84e:	80fb      	strh	r3, [r7, #6]
 801a850:	bf00      	nop
			}
			break;
 801a852:	e008      	b.n	801a866 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801a854:	89fb      	ldrh	r3, [r7, #14]
 801a856:	2b00      	cmp	r3, #0
 801a858:	d195      	bne.n	801a786 <ff_wtoupper+0x1a>
 801a85a:	8a3b      	ldrh	r3, [r7, #16]
 801a85c:	005b      	lsls	r3, r3, #1
 801a85e:	697a      	ldr	r2, [r7, #20]
 801a860:	4413      	add	r3, r2
 801a862:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801a864:	e78f      	b.n	801a786 <ff_wtoupper+0x1a>
			break;
 801a866:	bf00      	nop
	}

	return chr;
 801a868:	88fb      	ldrh	r3, [r7, #6]
}
 801a86a:	4618      	mov	r0, r3
 801a86c:	371c      	adds	r7, #28
 801a86e:	46bd      	mov	sp, r7
 801a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a874:	4770      	bx	lr
 801a876:	bf00      	nop
 801a878:	08020538 	.word	0x08020538
 801a87c:	0802072c 	.word	0x0802072c

0801a880 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801a880:	b580      	push	{r7, lr}
 801a882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 801a884:	2201      	movs	r2, #1
 801a886:	4913      	ldr	r1, [pc, #76]	@ (801a8d4 <MX_USB_DEVICE_Init+0x54>)
 801a888:	4813      	ldr	r0, [pc, #76]	@ (801a8d8 <MX_USB_DEVICE_Init+0x58>)
 801a88a:	f7fb fd25 	bl	80162d8 <USBD_Init>
 801a88e:	4603      	mov	r3, r0
 801a890:	2b00      	cmp	r3, #0
 801a892:	d001      	beq.n	801a898 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801a894:	f7e8 f82c 	bl	80028f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 801a898:	4910      	ldr	r1, [pc, #64]	@ (801a8dc <MX_USB_DEVICE_Init+0x5c>)
 801a89a:	480f      	ldr	r0, [pc, #60]	@ (801a8d8 <MX_USB_DEVICE_Init+0x58>)
 801a89c:	f7fb fd4c 	bl	8016338 <USBD_RegisterClass>
 801a8a0:	4603      	mov	r3, r0
 801a8a2:	2b00      	cmp	r3, #0
 801a8a4:	d001      	beq.n	801a8aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801a8a6:	f7e8 f823 	bl	80028f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801a8aa:	490d      	ldr	r1, [pc, #52]	@ (801a8e0 <MX_USB_DEVICE_Init+0x60>)
 801a8ac:	480a      	ldr	r0, [pc, #40]	@ (801a8d8 <MX_USB_DEVICE_Init+0x58>)
 801a8ae:	f7fb fc43 	bl	8016138 <USBD_CDC_RegisterInterface>
 801a8b2:	4603      	mov	r3, r0
 801a8b4:	2b00      	cmp	r3, #0
 801a8b6:	d001      	beq.n	801a8bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801a8b8:	f7e8 f81a 	bl	80028f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 801a8bc:	4806      	ldr	r0, [pc, #24]	@ (801a8d8 <MX_USB_DEVICE_Init+0x58>)
 801a8be:	f7fb fd71 	bl	80163a4 <USBD_Start>
 801a8c2:	4603      	mov	r3, r0
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	d001      	beq.n	801a8cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801a8c8:	f7e8 f812 	bl	80028f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801a8cc:	f7ef ffee 	bl	800a8ac <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801a8d0:	bf00      	nop
 801a8d2:	bd80      	pop	{r7, pc}
 801a8d4:	240001b0 	.word	0x240001b0
 801a8d8:	2400410c 	.word	0x2400410c
 801a8dc:	2400011c 	.word	0x2400011c
 801a8e0:	2400019c 	.word	0x2400019c

0801a8e4 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 801a8e4:	b580      	push	{r7, lr}
 801a8e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 801a8e8:	2200      	movs	r2, #0
 801a8ea:	4905      	ldr	r1, [pc, #20]	@ (801a900 <CDC_Init_HS+0x1c>)
 801a8ec:	4805      	ldr	r0, [pc, #20]	@ (801a904 <CDC_Init_HS+0x20>)
 801a8ee:	f7fb fc3d 	bl	801616c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801a8f2:	4905      	ldr	r1, [pc, #20]	@ (801a908 <CDC_Init_HS+0x24>)
 801a8f4:	4803      	ldr	r0, [pc, #12]	@ (801a904 <CDC_Init_HS+0x20>)
 801a8f6:	f7fb fc5b 	bl	80161b0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801a8fa:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801a8fc:	4618      	mov	r0, r3
 801a8fe:	bd80      	pop	{r7, pc}
 801a900:	24004be8 	.word	0x24004be8
 801a904:	2400410c 	.word	0x2400410c
 801a908:	240043e8 	.word	0x240043e8

0801a90c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801a90c:	b480      	push	{r7}
 801a90e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 801a910:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801a912:	4618      	mov	r0, r3
 801a914:	46bd      	mov	sp, r7
 801a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a91a:	4770      	bx	lr

0801a91c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801a91c:	b480      	push	{r7}
 801a91e:	b083      	sub	sp, #12
 801a920:	af00      	add	r7, sp, #0
 801a922:	4603      	mov	r3, r0
 801a924:	6039      	str	r1, [r7, #0]
 801a926:	71fb      	strb	r3, [r7, #7]
 801a928:	4613      	mov	r3, r2
 801a92a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801a92c:	79fb      	ldrb	r3, [r7, #7]
 801a92e:	2b23      	cmp	r3, #35	@ 0x23
 801a930:	d84a      	bhi.n	801a9c8 <CDC_Control_HS+0xac>
 801a932:	a201      	add	r2, pc, #4	@ (adr r2, 801a938 <CDC_Control_HS+0x1c>)
 801a934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a938:	0801a9c9 	.word	0x0801a9c9
 801a93c:	0801a9c9 	.word	0x0801a9c9
 801a940:	0801a9c9 	.word	0x0801a9c9
 801a944:	0801a9c9 	.word	0x0801a9c9
 801a948:	0801a9c9 	.word	0x0801a9c9
 801a94c:	0801a9c9 	.word	0x0801a9c9
 801a950:	0801a9c9 	.word	0x0801a9c9
 801a954:	0801a9c9 	.word	0x0801a9c9
 801a958:	0801a9c9 	.word	0x0801a9c9
 801a95c:	0801a9c9 	.word	0x0801a9c9
 801a960:	0801a9c9 	.word	0x0801a9c9
 801a964:	0801a9c9 	.word	0x0801a9c9
 801a968:	0801a9c9 	.word	0x0801a9c9
 801a96c:	0801a9c9 	.word	0x0801a9c9
 801a970:	0801a9c9 	.word	0x0801a9c9
 801a974:	0801a9c9 	.word	0x0801a9c9
 801a978:	0801a9c9 	.word	0x0801a9c9
 801a97c:	0801a9c9 	.word	0x0801a9c9
 801a980:	0801a9c9 	.word	0x0801a9c9
 801a984:	0801a9c9 	.word	0x0801a9c9
 801a988:	0801a9c9 	.word	0x0801a9c9
 801a98c:	0801a9c9 	.word	0x0801a9c9
 801a990:	0801a9c9 	.word	0x0801a9c9
 801a994:	0801a9c9 	.word	0x0801a9c9
 801a998:	0801a9c9 	.word	0x0801a9c9
 801a99c:	0801a9c9 	.word	0x0801a9c9
 801a9a0:	0801a9c9 	.word	0x0801a9c9
 801a9a4:	0801a9c9 	.word	0x0801a9c9
 801a9a8:	0801a9c9 	.word	0x0801a9c9
 801a9ac:	0801a9c9 	.word	0x0801a9c9
 801a9b0:	0801a9c9 	.word	0x0801a9c9
 801a9b4:	0801a9c9 	.word	0x0801a9c9
 801a9b8:	0801a9c9 	.word	0x0801a9c9
 801a9bc:	0801a9c9 	.word	0x0801a9c9
 801a9c0:	0801a9c9 	.word	0x0801a9c9
 801a9c4:	0801a9c9 	.word	0x0801a9c9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 801a9c8:	bf00      	nop
  }

  return (USBD_OK);
 801a9ca:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801a9cc:	4618      	mov	r0, r3
 801a9ce:	370c      	adds	r7, #12
 801a9d0:	46bd      	mov	sp, r7
 801a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9d6:	4770      	bx	lr

0801a9d8 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 801a9d8:	b580      	push	{r7, lr}
 801a9da:	b082      	sub	sp, #8
 801a9dc:	af00      	add	r7, sp, #0
 801a9de:	6078      	str	r0, [r7, #4]
 801a9e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801a9e2:	6879      	ldr	r1, [r7, #4]
 801a9e4:	4805      	ldr	r0, [pc, #20]	@ (801a9fc <CDC_Receive_HS+0x24>)
 801a9e6:	f7fb fbe3 	bl	80161b0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801a9ea:	4804      	ldr	r0, [pc, #16]	@ (801a9fc <CDC_Receive_HS+0x24>)
 801a9ec:	f7fb fc3e 	bl	801626c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801a9f0:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801a9f2:	4618      	mov	r0, r3
 801a9f4:	3708      	adds	r7, #8
 801a9f6:	46bd      	mov	sp, r7
 801a9f8:	bd80      	pop	{r7, pc}
 801a9fa:	bf00      	nop
 801a9fc:	2400410c 	.word	0x2400410c

0801aa00 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 801aa00:	b580      	push	{r7, lr}
 801aa02:	b084      	sub	sp, #16
 801aa04:	af00      	add	r7, sp, #0
 801aa06:	6078      	str	r0, [r7, #4]
 801aa08:	460b      	mov	r3, r1
 801aa0a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801aa0c:	2300      	movs	r3, #0
 801aa0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 801aa10:	4b0d      	ldr	r3, [pc, #52]	@ (801aa48 <CDC_Transmit_HS+0x48>)
 801aa12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801aa16:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801aa18:	68bb      	ldr	r3, [r7, #8]
 801aa1a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801aa1e:	2b00      	cmp	r3, #0
 801aa20:	d001      	beq.n	801aa26 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 801aa22:	2301      	movs	r3, #1
 801aa24:	e00b      	b.n	801aa3e <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 801aa26:	887b      	ldrh	r3, [r7, #2]
 801aa28:	461a      	mov	r2, r3
 801aa2a:	6879      	ldr	r1, [r7, #4]
 801aa2c:	4806      	ldr	r0, [pc, #24]	@ (801aa48 <CDC_Transmit_HS+0x48>)
 801aa2e:	f7fb fb9d 	bl	801616c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 801aa32:	4805      	ldr	r0, [pc, #20]	@ (801aa48 <CDC_Transmit_HS+0x48>)
 801aa34:	f7fb fbda 	bl	80161ec <USBD_CDC_TransmitPacket>
 801aa38:	4603      	mov	r3, r0
 801aa3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801aa3c:	7bfb      	ldrb	r3, [r7, #15]
}
 801aa3e:	4618      	mov	r0, r3
 801aa40:	3710      	adds	r7, #16
 801aa42:	46bd      	mov	sp, r7
 801aa44:	bd80      	pop	{r7, pc}
 801aa46:	bf00      	nop
 801aa48:	2400410c 	.word	0x2400410c

0801aa4c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801aa4c:	b480      	push	{r7}
 801aa4e:	b087      	sub	sp, #28
 801aa50:	af00      	add	r7, sp, #0
 801aa52:	60f8      	str	r0, [r7, #12]
 801aa54:	60b9      	str	r1, [r7, #8]
 801aa56:	4613      	mov	r3, r2
 801aa58:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801aa5a:	2300      	movs	r3, #0
 801aa5c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801aa5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801aa62:	4618      	mov	r0, r3
 801aa64:	371c      	adds	r7, #28
 801aa66:	46bd      	mov	sp, r7
 801aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa6c:	4770      	bx	lr
	...

0801aa70 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801aa70:	b480      	push	{r7}
 801aa72:	b083      	sub	sp, #12
 801aa74:	af00      	add	r7, sp, #0
 801aa76:	4603      	mov	r3, r0
 801aa78:	6039      	str	r1, [r7, #0]
 801aa7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801aa7c:	683b      	ldr	r3, [r7, #0]
 801aa7e:	2212      	movs	r2, #18
 801aa80:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801aa82:	4b03      	ldr	r3, [pc, #12]	@ (801aa90 <USBD_HS_DeviceDescriptor+0x20>)
}
 801aa84:	4618      	mov	r0, r3
 801aa86:	370c      	adds	r7, #12
 801aa88:	46bd      	mov	sp, r7
 801aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa8e:	4770      	bx	lr
 801aa90:	240001cc 	.word	0x240001cc

0801aa94 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801aa94:	b480      	push	{r7}
 801aa96:	b083      	sub	sp, #12
 801aa98:	af00      	add	r7, sp, #0
 801aa9a:	4603      	mov	r3, r0
 801aa9c:	6039      	str	r1, [r7, #0]
 801aa9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801aaa0:	683b      	ldr	r3, [r7, #0]
 801aaa2:	2204      	movs	r2, #4
 801aaa4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801aaa6:	4b03      	ldr	r3, [pc, #12]	@ (801aab4 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 801aaa8:	4618      	mov	r0, r3
 801aaaa:	370c      	adds	r7, #12
 801aaac:	46bd      	mov	sp, r7
 801aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aab2:	4770      	bx	lr
 801aab4:	240001e0 	.word	0x240001e0

0801aab8 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801aab8:	b580      	push	{r7, lr}
 801aaba:	b082      	sub	sp, #8
 801aabc:	af00      	add	r7, sp, #0
 801aabe:	4603      	mov	r3, r0
 801aac0:	6039      	str	r1, [r7, #0]
 801aac2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801aac4:	79fb      	ldrb	r3, [r7, #7]
 801aac6:	2b00      	cmp	r3, #0
 801aac8:	d105      	bne.n	801aad6 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801aaca:	683a      	ldr	r2, [r7, #0]
 801aacc:	4907      	ldr	r1, [pc, #28]	@ (801aaec <USBD_HS_ProductStrDescriptor+0x34>)
 801aace:	4808      	ldr	r0, [pc, #32]	@ (801aaf0 <USBD_HS_ProductStrDescriptor+0x38>)
 801aad0:	f7fc fe18 	bl	8017704 <USBD_GetString>
 801aad4:	e004      	b.n	801aae0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801aad6:	683a      	ldr	r2, [r7, #0]
 801aad8:	4904      	ldr	r1, [pc, #16]	@ (801aaec <USBD_HS_ProductStrDescriptor+0x34>)
 801aada:	4805      	ldr	r0, [pc, #20]	@ (801aaf0 <USBD_HS_ProductStrDescriptor+0x38>)
 801aadc:	f7fc fe12 	bl	8017704 <USBD_GetString>
  }
  return USBD_StrDesc;
 801aae0:	4b02      	ldr	r3, [pc, #8]	@ (801aaec <USBD_HS_ProductStrDescriptor+0x34>)
}
 801aae2:	4618      	mov	r0, r3
 801aae4:	3708      	adds	r7, #8
 801aae6:	46bd      	mov	sp, r7
 801aae8:	bd80      	pop	{r7, pc}
 801aaea:	bf00      	nop
 801aaec:	240053e8 	.word	0x240053e8
 801aaf0:	0802029c 	.word	0x0802029c

0801aaf4 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801aaf4:	b580      	push	{r7, lr}
 801aaf6:	b082      	sub	sp, #8
 801aaf8:	af00      	add	r7, sp, #0
 801aafa:	4603      	mov	r3, r0
 801aafc:	6039      	str	r1, [r7, #0]
 801aafe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801ab00:	683a      	ldr	r2, [r7, #0]
 801ab02:	4904      	ldr	r1, [pc, #16]	@ (801ab14 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 801ab04:	4804      	ldr	r0, [pc, #16]	@ (801ab18 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801ab06:	f7fc fdfd 	bl	8017704 <USBD_GetString>
  return USBD_StrDesc;
 801ab0a:	4b02      	ldr	r3, [pc, #8]	@ (801ab14 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801ab0c:	4618      	mov	r0, r3
 801ab0e:	3708      	adds	r7, #8
 801ab10:	46bd      	mov	sp, r7
 801ab12:	bd80      	pop	{r7, pc}
 801ab14:	240053e8 	.word	0x240053e8
 801ab18:	080202b8 	.word	0x080202b8

0801ab1c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ab1c:	b580      	push	{r7, lr}
 801ab1e:	b082      	sub	sp, #8
 801ab20:	af00      	add	r7, sp, #0
 801ab22:	4603      	mov	r3, r0
 801ab24:	6039      	str	r1, [r7, #0]
 801ab26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801ab28:	683b      	ldr	r3, [r7, #0]
 801ab2a:	221a      	movs	r2, #26
 801ab2c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801ab2e:	f000 f843 	bl	801abb8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801ab32:	4b02      	ldr	r3, [pc, #8]	@ (801ab3c <USBD_HS_SerialStrDescriptor+0x20>)
}
 801ab34:	4618      	mov	r0, r3
 801ab36:	3708      	adds	r7, #8
 801ab38:	46bd      	mov	sp, r7
 801ab3a:	bd80      	pop	{r7, pc}
 801ab3c:	240001e4 	.word	0x240001e4

0801ab40 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ab40:	b580      	push	{r7, lr}
 801ab42:	b082      	sub	sp, #8
 801ab44:	af00      	add	r7, sp, #0
 801ab46:	4603      	mov	r3, r0
 801ab48:	6039      	str	r1, [r7, #0]
 801ab4a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801ab4c:	79fb      	ldrb	r3, [r7, #7]
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	d105      	bne.n	801ab5e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801ab52:	683a      	ldr	r2, [r7, #0]
 801ab54:	4907      	ldr	r1, [pc, #28]	@ (801ab74 <USBD_HS_ConfigStrDescriptor+0x34>)
 801ab56:	4808      	ldr	r0, [pc, #32]	@ (801ab78 <USBD_HS_ConfigStrDescriptor+0x38>)
 801ab58:	f7fc fdd4 	bl	8017704 <USBD_GetString>
 801ab5c:	e004      	b.n	801ab68 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801ab5e:	683a      	ldr	r2, [r7, #0]
 801ab60:	4904      	ldr	r1, [pc, #16]	@ (801ab74 <USBD_HS_ConfigStrDescriptor+0x34>)
 801ab62:	4805      	ldr	r0, [pc, #20]	@ (801ab78 <USBD_HS_ConfigStrDescriptor+0x38>)
 801ab64:	f7fc fdce 	bl	8017704 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ab68:	4b02      	ldr	r3, [pc, #8]	@ (801ab74 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801ab6a:	4618      	mov	r0, r3
 801ab6c:	3708      	adds	r7, #8
 801ab6e:	46bd      	mov	sp, r7
 801ab70:	bd80      	pop	{r7, pc}
 801ab72:	bf00      	nop
 801ab74:	240053e8 	.word	0x240053e8
 801ab78:	080202bc 	.word	0x080202bc

0801ab7c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ab7c:	b580      	push	{r7, lr}
 801ab7e:	b082      	sub	sp, #8
 801ab80:	af00      	add	r7, sp, #0
 801ab82:	4603      	mov	r3, r0
 801ab84:	6039      	str	r1, [r7, #0]
 801ab86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801ab88:	79fb      	ldrb	r3, [r7, #7]
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	d105      	bne.n	801ab9a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801ab8e:	683a      	ldr	r2, [r7, #0]
 801ab90:	4907      	ldr	r1, [pc, #28]	@ (801abb0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801ab92:	4808      	ldr	r0, [pc, #32]	@ (801abb4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 801ab94:	f7fc fdb6 	bl	8017704 <USBD_GetString>
 801ab98:	e004      	b.n	801aba4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801ab9a:	683a      	ldr	r2, [r7, #0]
 801ab9c:	4904      	ldr	r1, [pc, #16]	@ (801abb0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801ab9e:	4805      	ldr	r0, [pc, #20]	@ (801abb4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 801aba0:	f7fc fdb0 	bl	8017704 <USBD_GetString>
  }
  return USBD_StrDesc;
 801aba4:	4b02      	ldr	r3, [pc, #8]	@ (801abb0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801aba6:	4618      	mov	r0, r3
 801aba8:	3708      	adds	r7, #8
 801abaa:	46bd      	mov	sp, r7
 801abac:	bd80      	pop	{r7, pc}
 801abae:	bf00      	nop
 801abb0:	240053e8 	.word	0x240053e8
 801abb4:	080202c8 	.word	0x080202c8

0801abb8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801abb8:	b580      	push	{r7, lr}
 801abba:	b084      	sub	sp, #16
 801abbc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801abbe:	4b0f      	ldr	r3, [pc, #60]	@ (801abfc <Get_SerialNum+0x44>)
 801abc0:	681b      	ldr	r3, [r3, #0]
 801abc2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801abc4:	4b0e      	ldr	r3, [pc, #56]	@ (801ac00 <Get_SerialNum+0x48>)
 801abc6:	681b      	ldr	r3, [r3, #0]
 801abc8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801abca:	4b0e      	ldr	r3, [pc, #56]	@ (801ac04 <Get_SerialNum+0x4c>)
 801abcc:	681b      	ldr	r3, [r3, #0]
 801abce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801abd0:	68fa      	ldr	r2, [r7, #12]
 801abd2:	687b      	ldr	r3, [r7, #4]
 801abd4:	4413      	add	r3, r2
 801abd6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801abd8:	68fb      	ldr	r3, [r7, #12]
 801abda:	2b00      	cmp	r3, #0
 801abdc:	d009      	beq.n	801abf2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801abde:	2208      	movs	r2, #8
 801abe0:	4909      	ldr	r1, [pc, #36]	@ (801ac08 <Get_SerialNum+0x50>)
 801abe2:	68f8      	ldr	r0, [r7, #12]
 801abe4:	f000 f814 	bl	801ac10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801abe8:	2204      	movs	r2, #4
 801abea:	4908      	ldr	r1, [pc, #32]	@ (801ac0c <Get_SerialNum+0x54>)
 801abec:	68b8      	ldr	r0, [r7, #8]
 801abee:	f000 f80f 	bl	801ac10 <IntToUnicode>
  }
}
 801abf2:	bf00      	nop
 801abf4:	3710      	adds	r7, #16
 801abf6:	46bd      	mov	sp, r7
 801abf8:	bd80      	pop	{r7, pc}
 801abfa:	bf00      	nop
 801abfc:	1ff1e800 	.word	0x1ff1e800
 801ac00:	1ff1e804 	.word	0x1ff1e804
 801ac04:	1ff1e808 	.word	0x1ff1e808
 801ac08:	240001e6 	.word	0x240001e6
 801ac0c:	240001f6 	.word	0x240001f6

0801ac10 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801ac10:	b480      	push	{r7}
 801ac12:	b087      	sub	sp, #28
 801ac14:	af00      	add	r7, sp, #0
 801ac16:	60f8      	str	r0, [r7, #12]
 801ac18:	60b9      	str	r1, [r7, #8]
 801ac1a:	4613      	mov	r3, r2
 801ac1c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801ac1e:	2300      	movs	r3, #0
 801ac20:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801ac22:	2300      	movs	r3, #0
 801ac24:	75fb      	strb	r3, [r7, #23]
 801ac26:	e027      	b.n	801ac78 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801ac28:	68fb      	ldr	r3, [r7, #12]
 801ac2a:	0f1b      	lsrs	r3, r3, #28
 801ac2c:	2b09      	cmp	r3, #9
 801ac2e:	d80b      	bhi.n	801ac48 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801ac30:	68fb      	ldr	r3, [r7, #12]
 801ac32:	0f1b      	lsrs	r3, r3, #28
 801ac34:	b2da      	uxtb	r2, r3
 801ac36:	7dfb      	ldrb	r3, [r7, #23]
 801ac38:	005b      	lsls	r3, r3, #1
 801ac3a:	4619      	mov	r1, r3
 801ac3c:	68bb      	ldr	r3, [r7, #8]
 801ac3e:	440b      	add	r3, r1
 801ac40:	3230      	adds	r2, #48	@ 0x30
 801ac42:	b2d2      	uxtb	r2, r2
 801ac44:	701a      	strb	r2, [r3, #0]
 801ac46:	e00a      	b.n	801ac5e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801ac48:	68fb      	ldr	r3, [r7, #12]
 801ac4a:	0f1b      	lsrs	r3, r3, #28
 801ac4c:	b2da      	uxtb	r2, r3
 801ac4e:	7dfb      	ldrb	r3, [r7, #23]
 801ac50:	005b      	lsls	r3, r3, #1
 801ac52:	4619      	mov	r1, r3
 801ac54:	68bb      	ldr	r3, [r7, #8]
 801ac56:	440b      	add	r3, r1
 801ac58:	3237      	adds	r2, #55	@ 0x37
 801ac5a:	b2d2      	uxtb	r2, r2
 801ac5c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801ac5e:	68fb      	ldr	r3, [r7, #12]
 801ac60:	011b      	lsls	r3, r3, #4
 801ac62:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801ac64:	7dfb      	ldrb	r3, [r7, #23]
 801ac66:	005b      	lsls	r3, r3, #1
 801ac68:	3301      	adds	r3, #1
 801ac6a:	68ba      	ldr	r2, [r7, #8]
 801ac6c:	4413      	add	r3, r2
 801ac6e:	2200      	movs	r2, #0
 801ac70:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801ac72:	7dfb      	ldrb	r3, [r7, #23]
 801ac74:	3301      	adds	r3, #1
 801ac76:	75fb      	strb	r3, [r7, #23]
 801ac78:	7dfa      	ldrb	r2, [r7, #23]
 801ac7a:	79fb      	ldrb	r3, [r7, #7]
 801ac7c:	429a      	cmp	r2, r3
 801ac7e:	d3d3      	bcc.n	801ac28 <IntToUnicode+0x18>
  }
}
 801ac80:	bf00      	nop
 801ac82:	bf00      	nop
 801ac84:	371c      	adds	r7, #28
 801ac86:	46bd      	mov	sp, r7
 801ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac8c:	4770      	bx	lr
	...

0801ac90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801ac90:	b580      	push	{r7, lr}
 801ac92:	b0b2      	sub	sp, #200	@ 0xc8
 801ac94:	af00      	add	r7, sp, #0
 801ac96:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801ac98:	f107 0310 	add.w	r3, r7, #16
 801ac9c:	22b8      	movs	r2, #184	@ 0xb8
 801ac9e:	2100      	movs	r1, #0
 801aca0:	4618      	mov	r0, r3
 801aca2:	f002 f8dd 	bl	801ce60 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	681b      	ldr	r3, [r3, #0]
 801acaa:	4a1a      	ldr	r2, [pc, #104]	@ (801ad14 <HAL_PCD_MspInit+0x84>)
 801acac:	4293      	cmp	r3, r2
 801acae:	d12c      	bne.n	801ad0a <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801acb0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 801acb4:	f04f 0300 	mov.w	r3, #0
 801acb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801acbc:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 801acc0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801acc4:	f107 0310 	add.w	r3, r7, #16
 801acc8:	4618      	mov	r0, r3
 801acca:	f7f0 fdcf 	bl	800b86c <HAL_RCCEx_PeriphCLKConfig>
 801acce:	4603      	mov	r3, r0
 801acd0:	2b00      	cmp	r3, #0
 801acd2:	d001      	beq.n	801acd8 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 801acd4:	f7e7 fe0c 	bl	80028f0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801acd8:	f7ef fde8 	bl	800a8ac <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801acdc:	4b0e      	ldr	r3, [pc, #56]	@ (801ad18 <HAL_PCD_MspInit+0x88>)
 801acde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801ace2:	4a0d      	ldr	r2, [pc, #52]	@ (801ad18 <HAL_PCD_MspInit+0x88>)
 801ace4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801ace8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801acec:	4b0a      	ldr	r3, [pc, #40]	@ (801ad18 <HAL_PCD_MspInit+0x88>)
 801acee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801acf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801acf6:	60fb      	str	r3, [r7, #12]
 801acf8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801acfa:	2200      	movs	r2, #0
 801acfc:	2100      	movs	r1, #0
 801acfe:	204d      	movs	r0, #77	@ 0x4d
 801ad00:	f7eb fb59 	bl	80063b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801ad04:	204d      	movs	r0, #77	@ 0x4d
 801ad06:	f7eb fb70 	bl	80063ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801ad0a:	bf00      	nop
 801ad0c:	37c8      	adds	r7, #200	@ 0xc8
 801ad0e:	46bd      	mov	sp, r7
 801ad10:	bd80      	pop	{r7, pc}
 801ad12:	bf00      	nop
 801ad14:	40040000 	.word	0x40040000
 801ad18:	58024400 	.word	0x58024400

0801ad1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ad1c:	b580      	push	{r7, lr}
 801ad1e:	b082      	sub	sp, #8
 801ad20:	af00      	add	r7, sp, #0
 801ad22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 801ad2a:	687b      	ldr	r3, [r7, #4]
 801ad2c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 801ad30:	4619      	mov	r1, r3
 801ad32:	4610      	mov	r0, r2
 801ad34:	f7fb fb83 	bl	801643e <USBD_LL_SetupStage>
}
 801ad38:	bf00      	nop
 801ad3a:	3708      	adds	r7, #8
 801ad3c:	46bd      	mov	sp, r7
 801ad3e:	bd80      	pop	{r7, pc}

0801ad40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ad40:	b580      	push	{r7, lr}
 801ad42:	b082      	sub	sp, #8
 801ad44:	af00      	add	r7, sp, #0
 801ad46:	6078      	str	r0, [r7, #4]
 801ad48:	460b      	mov	r3, r1
 801ad4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801ad4c:	687b      	ldr	r3, [r7, #4]
 801ad4e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 801ad52:	78fa      	ldrb	r2, [r7, #3]
 801ad54:	6879      	ldr	r1, [r7, #4]
 801ad56:	4613      	mov	r3, r2
 801ad58:	00db      	lsls	r3, r3, #3
 801ad5a:	4413      	add	r3, r2
 801ad5c:	009b      	lsls	r3, r3, #2
 801ad5e:	440b      	add	r3, r1
 801ad60:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 801ad64:	681a      	ldr	r2, [r3, #0]
 801ad66:	78fb      	ldrb	r3, [r7, #3]
 801ad68:	4619      	mov	r1, r3
 801ad6a:	f7fb fbbd 	bl	80164e8 <USBD_LL_DataOutStage>
}
 801ad6e:	bf00      	nop
 801ad70:	3708      	adds	r7, #8
 801ad72:	46bd      	mov	sp, r7
 801ad74:	bd80      	pop	{r7, pc}

0801ad76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ad76:	b580      	push	{r7, lr}
 801ad78:	b082      	sub	sp, #8
 801ad7a:	af00      	add	r7, sp, #0
 801ad7c:	6078      	str	r0, [r7, #4]
 801ad7e:	460b      	mov	r3, r1
 801ad80:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801ad82:	687b      	ldr	r3, [r7, #4]
 801ad84:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 801ad88:	78fa      	ldrb	r2, [r7, #3]
 801ad8a:	6879      	ldr	r1, [r7, #4]
 801ad8c:	4613      	mov	r3, r2
 801ad8e:	00db      	lsls	r3, r3, #3
 801ad90:	4413      	add	r3, r2
 801ad92:	009b      	lsls	r3, r3, #2
 801ad94:	440b      	add	r3, r1
 801ad96:	3348      	adds	r3, #72	@ 0x48
 801ad98:	681a      	ldr	r2, [r3, #0]
 801ad9a:	78fb      	ldrb	r3, [r7, #3]
 801ad9c:	4619      	mov	r1, r3
 801ad9e:	f7fb fc56 	bl	801664e <USBD_LL_DataInStage>
}
 801ada2:	bf00      	nop
 801ada4:	3708      	adds	r7, #8
 801ada6:	46bd      	mov	sp, r7
 801ada8:	bd80      	pop	{r7, pc}

0801adaa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801adaa:	b580      	push	{r7, lr}
 801adac:	b082      	sub	sp, #8
 801adae:	af00      	add	r7, sp, #0
 801adb0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801adb2:	687b      	ldr	r3, [r7, #4]
 801adb4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801adb8:	4618      	mov	r0, r3
 801adba:	f7fb fd90 	bl	80168de <USBD_LL_SOF>
}
 801adbe:	bf00      	nop
 801adc0:	3708      	adds	r7, #8
 801adc2:	46bd      	mov	sp, r7
 801adc4:	bd80      	pop	{r7, pc}

0801adc6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801adc6:	b580      	push	{r7, lr}
 801adc8:	b084      	sub	sp, #16
 801adca:	af00      	add	r7, sp, #0
 801adcc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801adce:	2301      	movs	r3, #1
 801add0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801add2:	687b      	ldr	r3, [r7, #4]
 801add4:	691b      	ldr	r3, [r3, #16]
 801add6:	2b00      	cmp	r3, #0
 801add8:	d102      	bne.n	801ade0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801adda:	2300      	movs	r3, #0
 801addc:	73fb      	strb	r3, [r7, #15]
 801adde:	e008      	b.n	801adf2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	691b      	ldr	r3, [r3, #16]
 801ade4:	2b02      	cmp	r3, #2
 801ade6:	d102      	bne.n	801adee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801ade8:	2301      	movs	r3, #1
 801adea:	73fb      	strb	r3, [r7, #15]
 801adec:	e001      	b.n	801adf2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801adee:	f7e7 fd7f 	bl	80028f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801adf2:	687b      	ldr	r3, [r7, #4]
 801adf4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801adf8:	7bfa      	ldrb	r2, [r7, #15]
 801adfa:	4611      	mov	r1, r2
 801adfc:	4618      	mov	r0, r3
 801adfe:	f7fb fd2a 	bl	8016856 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801ae02:	687b      	ldr	r3, [r7, #4]
 801ae04:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801ae08:	4618      	mov	r0, r3
 801ae0a:	f7fb fcd2 	bl	80167b2 <USBD_LL_Reset>
}
 801ae0e:	bf00      	nop
 801ae10:	3710      	adds	r7, #16
 801ae12:	46bd      	mov	sp, r7
 801ae14:	bd80      	pop	{r7, pc}
	...

0801ae18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ae18:	b580      	push	{r7, lr}
 801ae1a:	b082      	sub	sp, #8
 801ae1c:	af00      	add	r7, sp, #0
 801ae1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801ae20:	687b      	ldr	r3, [r7, #4]
 801ae22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801ae26:	4618      	mov	r0, r3
 801ae28:	f7fb fd25 	bl	8016876 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801ae2c:	687b      	ldr	r3, [r7, #4]
 801ae2e:	681b      	ldr	r3, [r3, #0]
 801ae30:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801ae34:	681b      	ldr	r3, [r3, #0]
 801ae36:	687a      	ldr	r2, [r7, #4]
 801ae38:	6812      	ldr	r2, [r2, #0]
 801ae3a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801ae3e:	f043 0301 	orr.w	r3, r3, #1
 801ae42:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	6a1b      	ldr	r3, [r3, #32]
 801ae48:	2b00      	cmp	r3, #0
 801ae4a:	d005      	beq.n	801ae58 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801ae4c:	4b04      	ldr	r3, [pc, #16]	@ (801ae60 <HAL_PCD_SuspendCallback+0x48>)
 801ae4e:	691b      	ldr	r3, [r3, #16]
 801ae50:	4a03      	ldr	r2, [pc, #12]	@ (801ae60 <HAL_PCD_SuspendCallback+0x48>)
 801ae52:	f043 0306 	orr.w	r3, r3, #6
 801ae56:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801ae58:	bf00      	nop
 801ae5a:	3708      	adds	r7, #8
 801ae5c:	46bd      	mov	sp, r7
 801ae5e:	bd80      	pop	{r7, pc}
 801ae60:	e000ed00 	.word	0xe000ed00

0801ae64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ae64:	b580      	push	{r7, lr}
 801ae66:	b082      	sub	sp, #8
 801ae68:	af00      	add	r7, sp, #0
 801ae6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801ae72:	4618      	mov	r0, r3
 801ae74:	f7fb fd1b 	bl	80168ae <USBD_LL_Resume>
}
 801ae78:	bf00      	nop
 801ae7a:	3708      	adds	r7, #8
 801ae7c:	46bd      	mov	sp, r7
 801ae7e:	bd80      	pop	{r7, pc}

0801ae80 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ae80:	b580      	push	{r7, lr}
 801ae82:	b082      	sub	sp, #8
 801ae84:	af00      	add	r7, sp, #0
 801ae86:	6078      	str	r0, [r7, #4]
 801ae88:	460b      	mov	r3, r1
 801ae8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801ae8c:	687b      	ldr	r3, [r7, #4]
 801ae8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801ae92:	78fa      	ldrb	r2, [r7, #3]
 801ae94:	4611      	mov	r1, r2
 801ae96:	4618      	mov	r0, r3
 801ae98:	f7fb fd73 	bl	8016982 <USBD_LL_IsoOUTIncomplete>
}
 801ae9c:	bf00      	nop
 801ae9e:	3708      	adds	r7, #8
 801aea0:	46bd      	mov	sp, r7
 801aea2:	bd80      	pop	{r7, pc}

0801aea4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aea4:	b580      	push	{r7, lr}
 801aea6:	b082      	sub	sp, #8
 801aea8:	af00      	add	r7, sp, #0
 801aeaa:	6078      	str	r0, [r7, #4]
 801aeac:	460b      	mov	r3, r1
 801aeae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801aeb0:	687b      	ldr	r3, [r7, #4]
 801aeb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801aeb6:	78fa      	ldrb	r2, [r7, #3]
 801aeb8:	4611      	mov	r1, r2
 801aeba:	4618      	mov	r0, r3
 801aebc:	f7fb fd2f 	bl	801691e <USBD_LL_IsoINIncomplete>
}
 801aec0:	bf00      	nop
 801aec2:	3708      	adds	r7, #8
 801aec4:	46bd      	mov	sp, r7
 801aec6:	bd80      	pop	{r7, pc}

0801aec8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aec8:	b580      	push	{r7, lr}
 801aeca:	b082      	sub	sp, #8
 801aecc:	af00      	add	r7, sp, #0
 801aece:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801aed6:	4618      	mov	r0, r3
 801aed8:	f7fb fd85 	bl	80169e6 <USBD_LL_DevConnected>
}
 801aedc:	bf00      	nop
 801aede:	3708      	adds	r7, #8
 801aee0:	46bd      	mov	sp, r7
 801aee2:	bd80      	pop	{r7, pc}

0801aee4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aee4:	b580      	push	{r7, lr}
 801aee6:	b082      	sub	sp, #8
 801aee8:	af00      	add	r7, sp, #0
 801aeea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801aeec:	687b      	ldr	r3, [r7, #4]
 801aeee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801aef2:	4618      	mov	r0, r3
 801aef4:	f7fb fd82 	bl	80169fc <USBD_LL_DevDisconnected>
}
 801aef8:	bf00      	nop
 801aefa:	3708      	adds	r7, #8
 801aefc:	46bd      	mov	sp, r7
 801aefe:	bd80      	pop	{r7, pc}

0801af00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801af00:	b580      	push	{r7, lr}
 801af02:	b082      	sub	sp, #8
 801af04:	af00      	add	r7, sp, #0
 801af06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	781b      	ldrb	r3, [r3, #0]
 801af0c:	2b01      	cmp	r3, #1
 801af0e:	d140      	bne.n	801af92 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 801af10:	4a22      	ldr	r2, [pc, #136]	@ (801af9c <USBD_LL_Init+0x9c>)
 801af12:	687b      	ldr	r3, [r7, #4]
 801af14:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 801af18:	687b      	ldr	r3, [r7, #4]
 801af1a:	4a20      	ldr	r2, [pc, #128]	@ (801af9c <USBD_LL_Init+0x9c>)
 801af1c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801af20:	4b1e      	ldr	r3, [pc, #120]	@ (801af9c <USBD_LL_Init+0x9c>)
 801af22:	4a1f      	ldr	r2, [pc, #124]	@ (801afa0 <USBD_LL_Init+0xa0>)
 801af24:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 801af26:	4b1d      	ldr	r3, [pc, #116]	@ (801af9c <USBD_LL_Init+0x9c>)
 801af28:	2209      	movs	r2, #9
 801af2a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801af2c:	4b1b      	ldr	r3, [pc, #108]	@ (801af9c <USBD_LL_Init+0x9c>)
 801af2e:	2202      	movs	r2, #2
 801af30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801af32:	4b1a      	ldr	r3, [pc, #104]	@ (801af9c <USBD_LL_Init+0x9c>)
 801af34:	2200      	movs	r2, #0
 801af36:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 801af38:	4b18      	ldr	r3, [pc, #96]	@ (801af9c <USBD_LL_Init+0x9c>)
 801af3a:	2202      	movs	r2, #2
 801af3c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801af3e:	4b17      	ldr	r3, [pc, #92]	@ (801af9c <USBD_LL_Init+0x9c>)
 801af40:	2200      	movs	r2, #0
 801af42:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801af44:	4b15      	ldr	r3, [pc, #84]	@ (801af9c <USBD_LL_Init+0x9c>)
 801af46:	2200      	movs	r2, #0
 801af48:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801af4a:	4b14      	ldr	r3, [pc, #80]	@ (801af9c <USBD_LL_Init+0x9c>)
 801af4c:	2200      	movs	r2, #0
 801af4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 801af50:	4b12      	ldr	r3, [pc, #72]	@ (801af9c <USBD_LL_Init+0x9c>)
 801af52:	2200      	movs	r2, #0
 801af54:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801af56:	4b11      	ldr	r3, [pc, #68]	@ (801af9c <USBD_LL_Init+0x9c>)
 801af58:	2200      	movs	r2, #0
 801af5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801af5c:	4b0f      	ldr	r3, [pc, #60]	@ (801af9c <USBD_LL_Init+0x9c>)
 801af5e:	2200      	movs	r2, #0
 801af60:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801af62:	480e      	ldr	r0, [pc, #56]	@ (801af9c <USBD_LL_Init+0x9c>)
 801af64:	f7ee f9af 	bl	80092c6 <HAL_PCD_Init>
 801af68:	4603      	mov	r3, r0
 801af6a:	2b00      	cmp	r3, #0
 801af6c:	d001      	beq.n	801af72 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801af6e:	f7e7 fcbf 	bl	80028f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801af72:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801af76:	4809      	ldr	r0, [pc, #36]	@ (801af9c <USBD_LL_Init+0x9c>)
 801af78:	f7ef fc1d 	bl	800a7b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801af7c:	2280      	movs	r2, #128	@ 0x80
 801af7e:	2100      	movs	r1, #0
 801af80:	4806      	ldr	r0, [pc, #24]	@ (801af9c <USBD_LL_Init+0x9c>)
 801af82:	f7ef fbd1 	bl	800a728 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801af86:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 801af8a:	2101      	movs	r1, #1
 801af8c:	4803      	ldr	r0, [pc, #12]	@ (801af9c <USBD_LL_Init+0x9c>)
 801af8e:	f7ef fbcb 	bl	800a728 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801af92:	2300      	movs	r3, #0
}
 801af94:	4618      	mov	r0, r3
 801af96:	3708      	adds	r7, #8
 801af98:	46bd      	mov	sp, r7
 801af9a:	bd80      	pop	{r7, pc}
 801af9c:	240055e8 	.word	0x240055e8
 801afa0:	40040000 	.word	0x40040000

0801afa4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801afa4:	b580      	push	{r7, lr}
 801afa6:	b084      	sub	sp, #16
 801afa8:	af00      	add	r7, sp, #0
 801afaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801afac:	2300      	movs	r3, #0
 801afae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801afb0:	2300      	movs	r3, #0
 801afb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801afba:	4618      	mov	r0, r3
 801afbc:	f7ee faa7 	bl	800950e <HAL_PCD_Start>
 801afc0:	4603      	mov	r3, r0
 801afc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801afc4:	7bfb      	ldrb	r3, [r7, #15]
 801afc6:	4618      	mov	r0, r3
 801afc8:	f000 f942 	bl	801b250 <USBD_Get_USB_Status>
 801afcc:	4603      	mov	r3, r0
 801afce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801afd0:	7bbb      	ldrb	r3, [r7, #14]
}
 801afd2:	4618      	mov	r0, r3
 801afd4:	3710      	adds	r7, #16
 801afd6:	46bd      	mov	sp, r7
 801afd8:	bd80      	pop	{r7, pc}

0801afda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801afda:	b580      	push	{r7, lr}
 801afdc:	b084      	sub	sp, #16
 801afde:	af00      	add	r7, sp, #0
 801afe0:	6078      	str	r0, [r7, #4]
 801afe2:	4608      	mov	r0, r1
 801afe4:	4611      	mov	r1, r2
 801afe6:	461a      	mov	r2, r3
 801afe8:	4603      	mov	r3, r0
 801afea:	70fb      	strb	r3, [r7, #3]
 801afec:	460b      	mov	r3, r1
 801afee:	70bb      	strb	r3, [r7, #2]
 801aff0:	4613      	mov	r3, r2
 801aff2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aff4:	2300      	movs	r3, #0
 801aff6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aff8:	2300      	movs	r3, #0
 801affa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801b002:	78bb      	ldrb	r3, [r7, #2]
 801b004:	883a      	ldrh	r2, [r7, #0]
 801b006:	78f9      	ldrb	r1, [r7, #3]
 801b008:	f7ee ffa7 	bl	8009f5a <HAL_PCD_EP_Open>
 801b00c:	4603      	mov	r3, r0
 801b00e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b010:	7bfb      	ldrb	r3, [r7, #15]
 801b012:	4618      	mov	r0, r3
 801b014:	f000 f91c 	bl	801b250 <USBD_Get_USB_Status>
 801b018:	4603      	mov	r3, r0
 801b01a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b01c:	7bbb      	ldrb	r3, [r7, #14]
}
 801b01e:	4618      	mov	r0, r3
 801b020:	3710      	adds	r7, #16
 801b022:	46bd      	mov	sp, r7
 801b024:	bd80      	pop	{r7, pc}

0801b026 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b026:	b580      	push	{r7, lr}
 801b028:	b084      	sub	sp, #16
 801b02a:	af00      	add	r7, sp, #0
 801b02c:	6078      	str	r0, [r7, #4]
 801b02e:	460b      	mov	r3, r1
 801b030:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b032:	2300      	movs	r3, #0
 801b034:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b036:	2300      	movs	r3, #0
 801b038:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801b040:	78fa      	ldrb	r2, [r7, #3]
 801b042:	4611      	mov	r1, r2
 801b044:	4618      	mov	r0, r3
 801b046:	f7ee fff0 	bl	800a02a <HAL_PCD_EP_Close>
 801b04a:	4603      	mov	r3, r0
 801b04c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b04e:	7bfb      	ldrb	r3, [r7, #15]
 801b050:	4618      	mov	r0, r3
 801b052:	f000 f8fd 	bl	801b250 <USBD_Get_USB_Status>
 801b056:	4603      	mov	r3, r0
 801b058:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b05a:	7bbb      	ldrb	r3, [r7, #14]
}
 801b05c:	4618      	mov	r0, r3
 801b05e:	3710      	adds	r7, #16
 801b060:	46bd      	mov	sp, r7
 801b062:	bd80      	pop	{r7, pc}

0801b064 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b064:	b580      	push	{r7, lr}
 801b066:	b084      	sub	sp, #16
 801b068:	af00      	add	r7, sp, #0
 801b06a:	6078      	str	r0, [r7, #4]
 801b06c:	460b      	mov	r3, r1
 801b06e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b070:	2300      	movs	r3, #0
 801b072:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b074:	2300      	movs	r3, #0
 801b076:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801b078:	687b      	ldr	r3, [r7, #4]
 801b07a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801b07e:	78fa      	ldrb	r2, [r7, #3]
 801b080:	4611      	mov	r1, r2
 801b082:	4618      	mov	r0, r3
 801b084:	f7ef f8aa 	bl	800a1dc <HAL_PCD_EP_SetStall>
 801b088:	4603      	mov	r3, r0
 801b08a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b08c:	7bfb      	ldrb	r3, [r7, #15]
 801b08e:	4618      	mov	r0, r3
 801b090:	f000 f8de 	bl	801b250 <USBD_Get_USB_Status>
 801b094:	4603      	mov	r3, r0
 801b096:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b098:	7bbb      	ldrb	r3, [r7, #14]
}
 801b09a:	4618      	mov	r0, r3
 801b09c:	3710      	adds	r7, #16
 801b09e:	46bd      	mov	sp, r7
 801b0a0:	bd80      	pop	{r7, pc}

0801b0a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b0a2:	b580      	push	{r7, lr}
 801b0a4:	b084      	sub	sp, #16
 801b0a6:	af00      	add	r7, sp, #0
 801b0a8:	6078      	str	r0, [r7, #4]
 801b0aa:	460b      	mov	r3, r1
 801b0ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b0ae:	2300      	movs	r3, #0
 801b0b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b0b2:	2300      	movs	r3, #0
 801b0b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801b0b6:	687b      	ldr	r3, [r7, #4]
 801b0b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801b0bc:	78fa      	ldrb	r2, [r7, #3]
 801b0be:	4611      	mov	r1, r2
 801b0c0:	4618      	mov	r0, r3
 801b0c2:	f7ef f8ef 	bl	800a2a4 <HAL_PCD_EP_ClrStall>
 801b0c6:	4603      	mov	r3, r0
 801b0c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b0ca:	7bfb      	ldrb	r3, [r7, #15]
 801b0cc:	4618      	mov	r0, r3
 801b0ce:	f000 f8bf 	bl	801b250 <USBD_Get_USB_Status>
 801b0d2:	4603      	mov	r3, r0
 801b0d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b0d6:	7bbb      	ldrb	r3, [r7, #14]
}
 801b0d8:	4618      	mov	r0, r3
 801b0da:	3710      	adds	r7, #16
 801b0dc:	46bd      	mov	sp, r7
 801b0de:	bd80      	pop	{r7, pc}

0801b0e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b0e0:	b480      	push	{r7}
 801b0e2:	b085      	sub	sp, #20
 801b0e4:	af00      	add	r7, sp, #0
 801b0e6:	6078      	str	r0, [r7, #4]
 801b0e8:	460b      	mov	r3, r1
 801b0ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801b0f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801b0f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801b0f8:	2b00      	cmp	r3, #0
 801b0fa:	da0b      	bge.n	801b114 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801b0fc:	78fb      	ldrb	r3, [r7, #3]
 801b0fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801b102:	68f9      	ldr	r1, [r7, #12]
 801b104:	4613      	mov	r3, r2
 801b106:	00db      	lsls	r3, r3, #3
 801b108:	4413      	add	r3, r2
 801b10a:	009b      	lsls	r3, r3, #2
 801b10c:	440b      	add	r3, r1
 801b10e:	333e      	adds	r3, #62	@ 0x3e
 801b110:	781b      	ldrb	r3, [r3, #0]
 801b112:	e00b      	b.n	801b12c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801b114:	78fb      	ldrb	r3, [r7, #3]
 801b116:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801b11a:	68f9      	ldr	r1, [r7, #12]
 801b11c:	4613      	mov	r3, r2
 801b11e:	00db      	lsls	r3, r3, #3
 801b120:	4413      	add	r3, r2
 801b122:	009b      	lsls	r3, r3, #2
 801b124:	440b      	add	r3, r1
 801b126:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 801b12a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801b12c:	4618      	mov	r0, r3
 801b12e:	3714      	adds	r7, #20
 801b130:	46bd      	mov	sp, r7
 801b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b136:	4770      	bx	lr

0801b138 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801b138:	b580      	push	{r7, lr}
 801b13a:	b084      	sub	sp, #16
 801b13c:	af00      	add	r7, sp, #0
 801b13e:	6078      	str	r0, [r7, #4]
 801b140:	460b      	mov	r3, r1
 801b142:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b144:	2300      	movs	r3, #0
 801b146:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b148:	2300      	movs	r3, #0
 801b14a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801b152:	78fa      	ldrb	r2, [r7, #3]
 801b154:	4611      	mov	r1, r2
 801b156:	4618      	mov	r0, r3
 801b158:	f7ee feda 	bl	8009f10 <HAL_PCD_SetAddress>
 801b15c:	4603      	mov	r3, r0
 801b15e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b160:	7bfb      	ldrb	r3, [r7, #15]
 801b162:	4618      	mov	r0, r3
 801b164:	f000 f874 	bl	801b250 <USBD_Get_USB_Status>
 801b168:	4603      	mov	r3, r0
 801b16a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b16c:	7bbb      	ldrb	r3, [r7, #14]
}
 801b16e:	4618      	mov	r0, r3
 801b170:	3710      	adds	r7, #16
 801b172:	46bd      	mov	sp, r7
 801b174:	bd80      	pop	{r7, pc}

0801b176 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801b176:	b580      	push	{r7, lr}
 801b178:	b086      	sub	sp, #24
 801b17a:	af00      	add	r7, sp, #0
 801b17c:	60f8      	str	r0, [r7, #12]
 801b17e:	607a      	str	r2, [r7, #4]
 801b180:	603b      	str	r3, [r7, #0]
 801b182:	460b      	mov	r3, r1
 801b184:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b186:	2300      	movs	r3, #0
 801b188:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b18a:	2300      	movs	r3, #0
 801b18c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801b18e:	68fb      	ldr	r3, [r7, #12]
 801b190:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801b194:	7af9      	ldrb	r1, [r7, #11]
 801b196:	683b      	ldr	r3, [r7, #0]
 801b198:	687a      	ldr	r2, [r7, #4]
 801b19a:	f7ee ffe4 	bl	800a166 <HAL_PCD_EP_Transmit>
 801b19e:	4603      	mov	r3, r0
 801b1a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b1a2:	7dfb      	ldrb	r3, [r7, #23]
 801b1a4:	4618      	mov	r0, r3
 801b1a6:	f000 f853 	bl	801b250 <USBD_Get_USB_Status>
 801b1aa:	4603      	mov	r3, r0
 801b1ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801b1ae:	7dbb      	ldrb	r3, [r7, #22]
}
 801b1b0:	4618      	mov	r0, r3
 801b1b2:	3718      	adds	r7, #24
 801b1b4:	46bd      	mov	sp, r7
 801b1b6:	bd80      	pop	{r7, pc}

0801b1b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801b1b8:	b580      	push	{r7, lr}
 801b1ba:	b086      	sub	sp, #24
 801b1bc:	af00      	add	r7, sp, #0
 801b1be:	60f8      	str	r0, [r7, #12]
 801b1c0:	607a      	str	r2, [r7, #4]
 801b1c2:	603b      	str	r3, [r7, #0]
 801b1c4:	460b      	mov	r3, r1
 801b1c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b1c8:	2300      	movs	r3, #0
 801b1ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b1cc:	2300      	movs	r3, #0
 801b1ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801b1d0:	68fb      	ldr	r3, [r7, #12]
 801b1d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801b1d6:	7af9      	ldrb	r1, [r7, #11]
 801b1d8:	683b      	ldr	r3, [r7, #0]
 801b1da:	687a      	ldr	r2, [r7, #4]
 801b1dc:	f7ee ff6f 	bl	800a0be <HAL_PCD_EP_Receive>
 801b1e0:	4603      	mov	r3, r0
 801b1e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b1e4:	7dfb      	ldrb	r3, [r7, #23]
 801b1e6:	4618      	mov	r0, r3
 801b1e8:	f000 f832 	bl	801b250 <USBD_Get_USB_Status>
 801b1ec:	4603      	mov	r3, r0
 801b1ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801b1f0:	7dbb      	ldrb	r3, [r7, #22]
}
 801b1f2:	4618      	mov	r0, r3
 801b1f4:	3718      	adds	r7, #24
 801b1f6:	46bd      	mov	sp, r7
 801b1f8:	bd80      	pop	{r7, pc}

0801b1fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b1fa:	b580      	push	{r7, lr}
 801b1fc:	b082      	sub	sp, #8
 801b1fe:	af00      	add	r7, sp, #0
 801b200:	6078      	str	r0, [r7, #4]
 801b202:	460b      	mov	r3, r1
 801b204:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801b20c:	78fa      	ldrb	r2, [r7, #3]
 801b20e:	4611      	mov	r1, r2
 801b210:	4618      	mov	r0, r3
 801b212:	f7ee ff90 	bl	800a136 <HAL_PCD_EP_GetRxCount>
 801b216:	4603      	mov	r3, r0
}
 801b218:	4618      	mov	r0, r3
 801b21a:	3708      	adds	r7, #8
 801b21c:	46bd      	mov	sp, r7
 801b21e:	bd80      	pop	{r7, pc}

0801b220 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801b220:	b480      	push	{r7}
 801b222:	b083      	sub	sp, #12
 801b224:	af00      	add	r7, sp, #0
 801b226:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801b228:	4b03      	ldr	r3, [pc, #12]	@ (801b238 <USBD_static_malloc+0x18>)
}
 801b22a:	4618      	mov	r0, r3
 801b22c:	370c      	adds	r7, #12
 801b22e:	46bd      	mov	sp, r7
 801b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b234:	4770      	bx	lr
 801b236:	bf00      	nop
 801b238:	24005af4 	.word	0x24005af4

0801b23c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801b23c:	b480      	push	{r7}
 801b23e:	b083      	sub	sp, #12
 801b240:	af00      	add	r7, sp, #0
 801b242:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801b244:	bf00      	nop
 801b246:	370c      	adds	r7, #12
 801b248:	46bd      	mov	sp, r7
 801b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b24e:	4770      	bx	lr

0801b250 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801b250:	b480      	push	{r7}
 801b252:	b085      	sub	sp, #20
 801b254:	af00      	add	r7, sp, #0
 801b256:	4603      	mov	r3, r0
 801b258:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b25a:	2300      	movs	r3, #0
 801b25c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801b25e:	79fb      	ldrb	r3, [r7, #7]
 801b260:	2b03      	cmp	r3, #3
 801b262:	d817      	bhi.n	801b294 <USBD_Get_USB_Status+0x44>
 801b264:	a201      	add	r2, pc, #4	@ (adr r2, 801b26c <USBD_Get_USB_Status+0x1c>)
 801b266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b26a:	bf00      	nop
 801b26c:	0801b27d 	.word	0x0801b27d
 801b270:	0801b283 	.word	0x0801b283
 801b274:	0801b289 	.word	0x0801b289
 801b278:	0801b28f 	.word	0x0801b28f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801b27c:	2300      	movs	r3, #0
 801b27e:	73fb      	strb	r3, [r7, #15]
    break;
 801b280:	e00b      	b.n	801b29a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801b282:	2303      	movs	r3, #3
 801b284:	73fb      	strb	r3, [r7, #15]
    break;
 801b286:	e008      	b.n	801b29a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801b288:	2301      	movs	r3, #1
 801b28a:	73fb      	strb	r3, [r7, #15]
    break;
 801b28c:	e005      	b.n	801b29a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801b28e:	2303      	movs	r3, #3
 801b290:	73fb      	strb	r3, [r7, #15]
    break;
 801b292:	e002      	b.n	801b29a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801b294:	2303      	movs	r3, #3
 801b296:	73fb      	strb	r3, [r7, #15]
    break;
 801b298:	bf00      	nop
  }
  return usb_status;
 801b29a:	7bfb      	ldrb	r3, [r7, #15]
}
 801b29c:	4618      	mov	r0, r3
 801b29e:	3714      	adds	r7, #20
 801b2a0:	46bd      	mov	sp, r7
 801b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2a6:	4770      	bx	lr

0801b2a8 <__cvt>:
 801b2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b2aa:	ed2d 8b02 	vpush	{d8}
 801b2ae:	eeb0 8b40 	vmov.f64	d8, d0
 801b2b2:	b085      	sub	sp, #20
 801b2b4:	4617      	mov	r7, r2
 801b2b6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801b2b8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801b2ba:	ee18 2a90 	vmov	r2, s17
 801b2be:	f025 0520 	bic.w	r5, r5, #32
 801b2c2:	2a00      	cmp	r2, #0
 801b2c4:	bfb6      	itet	lt
 801b2c6:	222d      	movlt	r2, #45	@ 0x2d
 801b2c8:	2200      	movge	r2, #0
 801b2ca:	eeb1 8b40 	vneglt.f64	d8, d0
 801b2ce:	2d46      	cmp	r5, #70	@ 0x46
 801b2d0:	460c      	mov	r4, r1
 801b2d2:	701a      	strb	r2, [r3, #0]
 801b2d4:	d004      	beq.n	801b2e0 <__cvt+0x38>
 801b2d6:	2d45      	cmp	r5, #69	@ 0x45
 801b2d8:	d100      	bne.n	801b2dc <__cvt+0x34>
 801b2da:	3401      	adds	r4, #1
 801b2dc:	2102      	movs	r1, #2
 801b2de:	e000      	b.n	801b2e2 <__cvt+0x3a>
 801b2e0:	2103      	movs	r1, #3
 801b2e2:	ab03      	add	r3, sp, #12
 801b2e4:	9301      	str	r3, [sp, #4]
 801b2e6:	ab02      	add	r3, sp, #8
 801b2e8:	9300      	str	r3, [sp, #0]
 801b2ea:	4622      	mov	r2, r4
 801b2ec:	4633      	mov	r3, r6
 801b2ee:	eeb0 0b48 	vmov.f64	d0, d8
 801b2f2:	f001 fee5 	bl	801d0c0 <_dtoa_r>
 801b2f6:	2d47      	cmp	r5, #71	@ 0x47
 801b2f8:	d114      	bne.n	801b324 <__cvt+0x7c>
 801b2fa:	07fb      	lsls	r3, r7, #31
 801b2fc:	d50a      	bpl.n	801b314 <__cvt+0x6c>
 801b2fe:	1902      	adds	r2, r0, r4
 801b300:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b308:	bf08      	it	eq
 801b30a:	9203      	streq	r2, [sp, #12]
 801b30c:	2130      	movs	r1, #48	@ 0x30
 801b30e:	9b03      	ldr	r3, [sp, #12]
 801b310:	4293      	cmp	r3, r2
 801b312:	d319      	bcc.n	801b348 <__cvt+0xa0>
 801b314:	9b03      	ldr	r3, [sp, #12]
 801b316:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b318:	1a1b      	subs	r3, r3, r0
 801b31a:	6013      	str	r3, [r2, #0]
 801b31c:	b005      	add	sp, #20
 801b31e:	ecbd 8b02 	vpop	{d8}
 801b322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b324:	2d46      	cmp	r5, #70	@ 0x46
 801b326:	eb00 0204 	add.w	r2, r0, r4
 801b32a:	d1e9      	bne.n	801b300 <__cvt+0x58>
 801b32c:	7803      	ldrb	r3, [r0, #0]
 801b32e:	2b30      	cmp	r3, #48	@ 0x30
 801b330:	d107      	bne.n	801b342 <__cvt+0x9a>
 801b332:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b33a:	bf1c      	itt	ne
 801b33c:	f1c4 0401 	rsbne	r4, r4, #1
 801b340:	6034      	strne	r4, [r6, #0]
 801b342:	6833      	ldr	r3, [r6, #0]
 801b344:	441a      	add	r2, r3
 801b346:	e7db      	b.n	801b300 <__cvt+0x58>
 801b348:	1c5c      	adds	r4, r3, #1
 801b34a:	9403      	str	r4, [sp, #12]
 801b34c:	7019      	strb	r1, [r3, #0]
 801b34e:	e7de      	b.n	801b30e <__cvt+0x66>

0801b350 <__exponent>:
 801b350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b352:	2900      	cmp	r1, #0
 801b354:	bfba      	itte	lt
 801b356:	4249      	neglt	r1, r1
 801b358:	232d      	movlt	r3, #45	@ 0x2d
 801b35a:	232b      	movge	r3, #43	@ 0x2b
 801b35c:	2909      	cmp	r1, #9
 801b35e:	7002      	strb	r2, [r0, #0]
 801b360:	7043      	strb	r3, [r0, #1]
 801b362:	dd29      	ble.n	801b3b8 <__exponent+0x68>
 801b364:	f10d 0307 	add.w	r3, sp, #7
 801b368:	461d      	mov	r5, r3
 801b36a:	270a      	movs	r7, #10
 801b36c:	461a      	mov	r2, r3
 801b36e:	fbb1 f6f7 	udiv	r6, r1, r7
 801b372:	fb07 1416 	mls	r4, r7, r6, r1
 801b376:	3430      	adds	r4, #48	@ 0x30
 801b378:	f802 4c01 	strb.w	r4, [r2, #-1]
 801b37c:	460c      	mov	r4, r1
 801b37e:	2c63      	cmp	r4, #99	@ 0x63
 801b380:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801b384:	4631      	mov	r1, r6
 801b386:	dcf1      	bgt.n	801b36c <__exponent+0x1c>
 801b388:	3130      	adds	r1, #48	@ 0x30
 801b38a:	1e94      	subs	r4, r2, #2
 801b38c:	f803 1c01 	strb.w	r1, [r3, #-1]
 801b390:	1c41      	adds	r1, r0, #1
 801b392:	4623      	mov	r3, r4
 801b394:	42ab      	cmp	r3, r5
 801b396:	d30a      	bcc.n	801b3ae <__exponent+0x5e>
 801b398:	f10d 0309 	add.w	r3, sp, #9
 801b39c:	1a9b      	subs	r3, r3, r2
 801b39e:	42ac      	cmp	r4, r5
 801b3a0:	bf88      	it	hi
 801b3a2:	2300      	movhi	r3, #0
 801b3a4:	3302      	adds	r3, #2
 801b3a6:	4403      	add	r3, r0
 801b3a8:	1a18      	subs	r0, r3, r0
 801b3aa:	b003      	add	sp, #12
 801b3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b3ae:	f813 6b01 	ldrb.w	r6, [r3], #1
 801b3b2:	f801 6f01 	strb.w	r6, [r1, #1]!
 801b3b6:	e7ed      	b.n	801b394 <__exponent+0x44>
 801b3b8:	2330      	movs	r3, #48	@ 0x30
 801b3ba:	3130      	adds	r1, #48	@ 0x30
 801b3bc:	7083      	strb	r3, [r0, #2]
 801b3be:	70c1      	strb	r1, [r0, #3]
 801b3c0:	1d03      	adds	r3, r0, #4
 801b3c2:	e7f1      	b.n	801b3a8 <__exponent+0x58>
 801b3c4:	0000      	movs	r0, r0
	...

0801b3c8 <_printf_float>:
 801b3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3cc:	b08d      	sub	sp, #52	@ 0x34
 801b3ce:	460c      	mov	r4, r1
 801b3d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801b3d4:	4616      	mov	r6, r2
 801b3d6:	461f      	mov	r7, r3
 801b3d8:	4605      	mov	r5, r0
 801b3da:	f001 fd49 	bl	801ce70 <_localeconv_r>
 801b3de:	f8d0 b000 	ldr.w	fp, [r0]
 801b3e2:	4658      	mov	r0, fp
 801b3e4:	f7e4 ffe4 	bl	80003b0 <strlen>
 801b3e8:	2300      	movs	r3, #0
 801b3ea:	930a      	str	r3, [sp, #40]	@ 0x28
 801b3ec:	f8d8 3000 	ldr.w	r3, [r8]
 801b3f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 801b3f4:	6822      	ldr	r2, [r4, #0]
 801b3f6:	9005      	str	r0, [sp, #20]
 801b3f8:	3307      	adds	r3, #7
 801b3fa:	f023 0307 	bic.w	r3, r3, #7
 801b3fe:	f103 0108 	add.w	r1, r3, #8
 801b402:	f8c8 1000 	str.w	r1, [r8]
 801b406:	ed93 0b00 	vldr	d0, [r3]
 801b40a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 801b668 <_printf_float+0x2a0>
 801b40e:	eeb0 7bc0 	vabs.f64	d7, d0
 801b412:	eeb4 7b46 	vcmp.f64	d7, d6
 801b416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b41a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801b41e:	dd24      	ble.n	801b46a <_printf_float+0xa2>
 801b420:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801b424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b428:	d502      	bpl.n	801b430 <_printf_float+0x68>
 801b42a:	232d      	movs	r3, #45	@ 0x2d
 801b42c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b430:	498f      	ldr	r1, [pc, #572]	@ (801b670 <_printf_float+0x2a8>)
 801b432:	4b90      	ldr	r3, [pc, #576]	@ (801b674 <_printf_float+0x2ac>)
 801b434:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 801b438:	bf94      	ite	ls
 801b43a:	4688      	movls	r8, r1
 801b43c:	4698      	movhi	r8, r3
 801b43e:	f022 0204 	bic.w	r2, r2, #4
 801b442:	2303      	movs	r3, #3
 801b444:	6123      	str	r3, [r4, #16]
 801b446:	6022      	str	r2, [r4, #0]
 801b448:	f04f 0a00 	mov.w	sl, #0
 801b44c:	9700      	str	r7, [sp, #0]
 801b44e:	4633      	mov	r3, r6
 801b450:	aa0b      	add	r2, sp, #44	@ 0x2c
 801b452:	4621      	mov	r1, r4
 801b454:	4628      	mov	r0, r5
 801b456:	f000 f9d1 	bl	801b7fc <_printf_common>
 801b45a:	3001      	adds	r0, #1
 801b45c:	f040 8089 	bne.w	801b572 <_printf_float+0x1aa>
 801b460:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b464:	b00d      	add	sp, #52	@ 0x34
 801b466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b46a:	eeb4 0b40 	vcmp.f64	d0, d0
 801b46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b472:	d709      	bvc.n	801b488 <_printf_float+0xc0>
 801b474:	ee10 3a90 	vmov	r3, s1
 801b478:	2b00      	cmp	r3, #0
 801b47a:	bfbc      	itt	lt
 801b47c:	232d      	movlt	r3, #45	@ 0x2d
 801b47e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801b482:	497d      	ldr	r1, [pc, #500]	@ (801b678 <_printf_float+0x2b0>)
 801b484:	4b7d      	ldr	r3, [pc, #500]	@ (801b67c <_printf_float+0x2b4>)
 801b486:	e7d5      	b.n	801b434 <_printf_float+0x6c>
 801b488:	6863      	ldr	r3, [r4, #4]
 801b48a:	1c59      	adds	r1, r3, #1
 801b48c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 801b490:	d139      	bne.n	801b506 <_printf_float+0x13e>
 801b492:	2306      	movs	r3, #6
 801b494:	6063      	str	r3, [r4, #4]
 801b496:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801b49a:	2300      	movs	r3, #0
 801b49c:	6022      	str	r2, [r4, #0]
 801b49e:	9303      	str	r3, [sp, #12]
 801b4a0:	ab0a      	add	r3, sp, #40	@ 0x28
 801b4a2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801b4a6:	ab09      	add	r3, sp, #36	@ 0x24
 801b4a8:	9300      	str	r3, [sp, #0]
 801b4aa:	6861      	ldr	r1, [r4, #4]
 801b4ac:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801b4b0:	4628      	mov	r0, r5
 801b4b2:	f7ff fef9 	bl	801b2a8 <__cvt>
 801b4b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801b4ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801b4bc:	4680      	mov	r8, r0
 801b4be:	d129      	bne.n	801b514 <_printf_float+0x14c>
 801b4c0:	1cc8      	adds	r0, r1, #3
 801b4c2:	db02      	blt.n	801b4ca <_printf_float+0x102>
 801b4c4:	6863      	ldr	r3, [r4, #4]
 801b4c6:	4299      	cmp	r1, r3
 801b4c8:	dd41      	ble.n	801b54e <_printf_float+0x186>
 801b4ca:	f1a9 0902 	sub.w	r9, r9, #2
 801b4ce:	fa5f f989 	uxtb.w	r9, r9
 801b4d2:	3901      	subs	r1, #1
 801b4d4:	464a      	mov	r2, r9
 801b4d6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801b4da:	9109      	str	r1, [sp, #36]	@ 0x24
 801b4dc:	f7ff ff38 	bl	801b350 <__exponent>
 801b4e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b4e2:	1813      	adds	r3, r2, r0
 801b4e4:	2a01      	cmp	r2, #1
 801b4e6:	4682      	mov	sl, r0
 801b4e8:	6123      	str	r3, [r4, #16]
 801b4ea:	dc02      	bgt.n	801b4f2 <_printf_float+0x12a>
 801b4ec:	6822      	ldr	r2, [r4, #0]
 801b4ee:	07d2      	lsls	r2, r2, #31
 801b4f0:	d501      	bpl.n	801b4f6 <_printf_float+0x12e>
 801b4f2:	3301      	adds	r3, #1
 801b4f4:	6123      	str	r3, [r4, #16]
 801b4f6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801b4fa:	2b00      	cmp	r3, #0
 801b4fc:	d0a6      	beq.n	801b44c <_printf_float+0x84>
 801b4fe:	232d      	movs	r3, #45	@ 0x2d
 801b500:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b504:	e7a2      	b.n	801b44c <_printf_float+0x84>
 801b506:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801b50a:	d1c4      	bne.n	801b496 <_printf_float+0xce>
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d1c2      	bne.n	801b496 <_printf_float+0xce>
 801b510:	2301      	movs	r3, #1
 801b512:	e7bf      	b.n	801b494 <_printf_float+0xcc>
 801b514:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801b518:	d9db      	bls.n	801b4d2 <_printf_float+0x10a>
 801b51a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801b51e:	d118      	bne.n	801b552 <_printf_float+0x18a>
 801b520:	2900      	cmp	r1, #0
 801b522:	6863      	ldr	r3, [r4, #4]
 801b524:	dd0b      	ble.n	801b53e <_printf_float+0x176>
 801b526:	6121      	str	r1, [r4, #16]
 801b528:	b913      	cbnz	r3, 801b530 <_printf_float+0x168>
 801b52a:	6822      	ldr	r2, [r4, #0]
 801b52c:	07d0      	lsls	r0, r2, #31
 801b52e:	d502      	bpl.n	801b536 <_printf_float+0x16e>
 801b530:	3301      	adds	r3, #1
 801b532:	440b      	add	r3, r1
 801b534:	6123      	str	r3, [r4, #16]
 801b536:	65a1      	str	r1, [r4, #88]	@ 0x58
 801b538:	f04f 0a00 	mov.w	sl, #0
 801b53c:	e7db      	b.n	801b4f6 <_printf_float+0x12e>
 801b53e:	b913      	cbnz	r3, 801b546 <_printf_float+0x17e>
 801b540:	6822      	ldr	r2, [r4, #0]
 801b542:	07d2      	lsls	r2, r2, #31
 801b544:	d501      	bpl.n	801b54a <_printf_float+0x182>
 801b546:	3302      	adds	r3, #2
 801b548:	e7f4      	b.n	801b534 <_printf_float+0x16c>
 801b54a:	2301      	movs	r3, #1
 801b54c:	e7f2      	b.n	801b534 <_printf_float+0x16c>
 801b54e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801b552:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b554:	4299      	cmp	r1, r3
 801b556:	db05      	blt.n	801b564 <_printf_float+0x19c>
 801b558:	6823      	ldr	r3, [r4, #0]
 801b55a:	6121      	str	r1, [r4, #16]
 801b55c:	07d8      	lsls	r0, r3, #31
 801b55e:	d5ea      	bpl.n	801b536 <_printf_float+0x16e>
 801b560:	1c4b      	adds	r3, r1, #1
 801b562:	e7e7      	b.n	801b534 <_printf_float+0x16c>
 801b564:	2900      	cmp	r1, #0
 801b566:	bfd4      	ite	le
 801b568:	f1c1 0202 	rsble	r2, r1, #2
 801b56c:	2201      	movgt	r2, #1
 801b56e:	4413      	add	r3, r2
 801b570:	e7e0      	b.n	801b534 <_printf_float+0x16c>
 801b572:	6823      	ldr	r3, [r4, #0]
 801b574:	055a      	lsls	r2, r3, #21
 801b576:	d407      	bmi.n	801b588 <_printf_float+0x1c0>
 801b578:	6923      	ldr	r3, [r4, #16]
 801b57a:	4642      	mov	r2, r8
 801b57c:	4631      	mov	r1, r6
 801b57e:	4628      	mov	r0, r5
 801b580:	47b8      	blx	r7
 801b582:	3001      	adds	r0, #1
 801b584:	d12a      	bne.n	801b5dc <_printf_float+0x214>
 801b586:	e76b      	b.n	801b460 <_printf_float+0x98>
 801b588:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801b58c:	f240 80e0 	bls.w	801b750 <_printf_float+0x388>
 801b590:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801b594:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b59c:	d133      	bne.n	801b606 <_printf_float+0x23e>
 801b59e:	4a38      	ldr	r2, [pc, #224]	@ (801b680 <_printf_float+0x2b8>)
 801b5a0:	2301      	movs	r3, #1
 801b5a2:	4631      	mov	r1, r6
 801b5a4:	4628      	mov	r0, r5
 801b5a6:	47b8      	blx	r7
 801b5a8:	3001      	adds	r0, #1
 801b5aa:	f43f af59 	beq.w	801b460 <_printf_float+0x98>
 801b5ae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801b5b2:	4543      	cmp	r3, r8
 801b5b4:	db02      	blt.n	801b5bc <_printf_float+0x1f4>
 801b5b6:	6823      	ldr	r3, [r4, #0]
 801b5b8:	07d8      	lsls	r0, r3, #31
 801b5ba:	d50f      	bpl.n	801b5dc <_printf_float+0x214>
 801b5bc:	9b05      	ldr	r3, [sp, #20]
 801b5be:	465a      	mov	r2, fp
 801b5c0:	4631      	mov	r1, r6
 801b5c2:	4628      	mov	r0, r5
 801b5c4:	47b8      	blx	r7
 801b5c6:	3001      	adds	r0, #1
 801b5c8:	f43f af4a 	beq.w	801b460 <_printf_float+0x98>
 801b5cc:	f04f 0900 	mov.w	r9, #0
 801b5d0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801b5d4:	f104 0a1a 	add.w	sl, r4, #26
 801b5d8:	45c8      	cmp	r8, r9
 801b5da:	dc09      	bgt.n	801b5f0 <_printf_float+0x228>
 801b5dc:	6823      	ldr	r3, [r4, #0]
 801b5de:	079b      	lsls	r3, r3, #30
 801b5e0:	f100 8107 	bmi.w	801b7f2 <_printf_float+0x42a>
 801b5e4:	68e0      	ldr	r0, [r4, #12]
 801b5e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b5e8:	4298      	cmp	r0, r3
 801b5ea:	bfb8      	it	lt
 801b5ec:	4618      	movlt	r0, r3
 801b5ee:	e739      	b.n	801b464 <_printf_float+0x9c>
 801b5f0:	2301      	movs	r3, #1
 801b5f2:	4652      	mov	r2, sl
 801b5f4:	4631      	mov	r1, r6
 801b5f6:	4628      	mov	r0, r5
 801b5f8:	47b8      	blx	r7
 801b5fa:	3001      	adds	r0, #1
 801b5fc:	f43f af30 	beq.w	801b460 <_printf_float+0x98>
 801b600:	f109 0901 	add.w	r9, r9, #1
 801b604:	e7e8      	b.n	801b5d8 <_printf_float+0x210>
 801b606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b608:	2b00      	cmp	r3, #0
 801b60a:	dc3b      	bgt.n	801b684 <_printf_float+0x2bc>
 801b60c:	4a1c      	ldr	r2, [pc, #112]	@ (801b680 <_printf_float+0x2b8>)
 801b60e:	2301      	movs	r3, #1
 801b610:	4631      	mov	r1, r6
 801b612:	4628      	mov	r0, r5
 801b614:	47b8      	blx	r7
 801b616:	3001      	adds	r0, #1
 801b618:	f43f af22 	beq.w	801b460 <_printf_float+0x98>
 801b61c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801b620:	ea59 0303 	orrs.w	r3, r9, r3
 801b624:	d102      	bne.n	801b62c <_printf_float+0x264>
 801b626:	6823      	ldr	r3, [r4, #0]
 801b628:	07d9      	lsls	r1, r3, #31
 801b62a:	d5d7      	bpl.n	801b5dc <_printf_float+0x214>
 801b62c:	9b05      	ldr	r3, [sp, #20]
 801b62e:	465a      	mov	r2, fp
 801b630:	4631      	mov	r1, r6
 801b632:	4628      	mov	r0, r5
 801b634:	47b8      	blx	r7
 801b636:	3001      	adds	r0, #1
 801b638:	f43f af12 	beq.w	801b460 <_printf_float+0x98>
 801b63c:	f04f 0a00 	mov.w	sl, #0
 801b640:	f104 0b1a 	add.w	fp, r4, #26
 801b644:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b646:	425b      	negs	r3, r3
 801b648:	4553      	cmp	r3, sl
 801b64a:	dc01      	bgt.n	801b650 <_printf_float+0x288>
 801b64c:	464b      	mov	r3, r9
 801b64e:	e794      	b.n	801b57a <_printf_float+0x1b2>
 801b650:	2301      	movs	r3, #1
 801b652:	465a      	mov	r2, fp
 801b654:	4631      	mov	r1, r6
 801b656:	4628      	mov	r0, r5
 801b658:	47b8      	blx	r7
 801b65a:	3001      	adds	r0, #1
 801b65c:	f43f af00 	beq.w	801b460 <_printf_float+0x98>
 801b660:	f10a 0a01 	add.w	sl, sl, #1
 801b664:	e7ee      	b.n	801b644 <_printf_float+0x27c>
 801b666:	bf00      	nop
 801b668:	ffffffff 	.word	0xffffffff
 801b66c:	7fefffff 	.word	0x7fefffff
 801b670:	080207e8 	.word	0x080207e8
 801b674:	080207ec 	.word	0x080207ec
 801b678:	080207f0 	.word	0x080207f0
 801b67c:	080207f4 	.word	0x080207f4
 801b680:	08020a95 	.word	0x08020a95
 801b684:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801b686:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801b68a:	4553      	cmp	r3, sl
 801b68c:	bfa8      	it	ge
 801b68e:	4653      	movge	r3, sl
 801b690:	2b00      	cmp	r3, #0
 801b692:	4699      	mov	r9, r3
 801b694:	dc37      	bgt.n	801b706 <_printf_float+0x33e>
 801b696:	2300      	movs	r3, #0
 801b698:	9307      	str	r3, [sp, #28]
 801b69a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b69e:	f104 021a 	add.w	r2, r4, #26
 801b6a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801b6a4:	9907      	ldr	r1, [sp, #28]
 801b6a6:	9306      	str	r3, [sp, #24]
 801b6a8:	eba3 0309 	sub.w	r3, r3, r9
 801b6ac:	428b      	cmp	r3, r1
 801b6ae:	dc31      	bgt.n	801b714 <_printf_float+0x34c>
 801b6b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b6b2:	459a      	cmp	sl, r3
 801b6b4:	dc3b      	bgt.n	801b72e <_printf_float+0x366>
 801b6b6:	6823      	ldr	r3, [r4, #0]
 801b6b8:	07da      	lsls	r2, r3, #31
 801b6ba:	d438      	bmi.n	801b72e <_printf_float+0x366>
 801b6bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b6be:	ebaa 0903 	sub.w	r9, sl, r3
 801b6c2:	9b06      	ldr	r3, [sp, #24]
 801b6c4:	ebaa 0303 	sub.w	r3, sl, r3
 801b6c8:	4599      	cmp	r9, r3
 801b6ca:	bfa8      	it	ge
 801b6cc:	4699      	movge	r9, r3
 801b6ce:	f1b9 0f00 	cmp.w	r9, #0
 801b6d2:	dc34      	bgt.n	801b73e <_printf_float+0x376>
 801b6d4:	f04f 0800 	mov.w	r8, #0
 801b6d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b6dc:	f104 0b1a 	add.w	fp, r4, #26
 801b6e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b6e2:	ebaa 0303 	sub.w	r3, sl, r3
 801b6e6:	eba3 0309 	sub.w	r3, r3, r9
 801b6ea:	4543      	cmp	r3, r8
 801b6ec:	f77f af76 	ble.w	801b5dc <_printf_float+0x214>
 801b6f0:	2301      	movs	r3, #1
 801b6f2:	465a      	mov	r2, fp
 801b6f4:	4631      	mov	r1, r6
 801b6f6:	4628      	mov	r0, r5
 801b6f8:	47b8      	blx	r7
 801b6fa:	3001      	adds	r0, #1
 801b6fc:	f43f aeb0 	beq.w	801b460 <_printf_float+0x98>
 801b700:	f108 0801 	add.w	r8, r8, #1
 801b704:	e7ec      	b.n	801b6e0 <_printf_float+0x318>
 801b706:	4642      	mov	r2, r8
 801b708:	4631      	mov	r1, r6
 801b70a:	4628      	mov	r0, r5
 801b70c:	47b8      	blx	r7
 801b70e:	3001      	adds	r0, #1
 801b710:	d1c1      	bne.n	801b696 <_printf_float+0x2ce>
 801b712:	e6a5      	b.n	801b460 <_printf_float+0x98>
 801b714:	2301      	movs	r3, #1
 801b716:	4631      	mov	r1, r6
 801b718:	4628      	mov	r0, r5
 801b71a:	9206      	str	r2, [sp, #24]
 801b71c:	47b8      	blx	r7
 801b71e:	3001      	adds	r0, #1
 801b720:	f43f ae9e 	beq.w	801b460 <_printf_float+0x98>
 801b724:	9b07      	ldr	r3, [sp, #28]
 801b726:	9a06      	ldr	r2, [sp, #24]
 801b728:	3301      	adds	r3, #1
 801b72a:	9307      	str	r3, [sp, #28]
 801b72c:	e7b9      	b.n	801b6a2 <_printf_float+0x2da>
 801b72e:	9b05      	ldr	r3, [sp, #20]
 801b730:	465a      	mov	r2, fp
 801b732:	4631      	mov	r1, r6
 801b734:	4628      	mov	r0, r5
 801b736:	47b8      	blx	r7
 801b738:	3001      	adds	r0, #1
 801b73a:	d1bf      	bne.n	801b6bc <_printf_float+0x2f4>
 801b73c:	e690      	b.n	801b460 <_printf_float+0x98>
 801b73e:	9a06      	ldr	r2, [sp, #24]
 801b740:	464b      	mov	r3, r9
 801b742:	4442      	add	r2, r8
 801b744:	4631      	mov	r1, r6
 801b746:	4628      	mov	r0, r5
 801b748:	47b8      	blx	r7
 801b74a:	3001      	adds	r0, #1
 801b74c:	d1c2      	bne.n	801b6d4 <_printf_float+0x30c>
 801b74e:	e687      	b.n	801b460 <_printf_float+0x98>
 801b750:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801b754:	f1b9 0f01 	cmp.w	r9, #1
 801b758:	dc01      	bgt.n	801b75e <_printf_float+0x396>
 801b75a:	07db      	lsls	r3, r3, #31
 801b75c:	d536      	bpl.n	801b7cc <_printf_float+0x404>
 801b75e:	2301      	movs	r3, #1
 801b760:	4642      	mov	r2, r8
 801b762:	4631      	mov	r1, r6
 801b764:	4628      	mov	r0, r5
 801b766:	47b8      	blx	r7
 801b768:	3001      	adds	r0, #1
 801b76a:	f43f ae79 	beq.w	801b460 <_printf_float+0x98>
 801b76e:	9b05      	ldr	r3, [sp, #20]
 801b770:	465a      	mov	r2, fp
 801b772:	4631      	mov	r1, r6
 801b774:	4628      	mov	r0, r5
 801b776:	47b8      	blx	r7
 801b778:	3001      	adds	r0, #1
 801b77a:	f43f ae71 	beq.w	801b460 <_printf_float+0x98>
 801b77e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801b782:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b78a:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 801b78e:	d018      	beq.n	801b7c2 <_printf_float+0x3fa>
 801b790:	464b      	mov	r3, r9
 801b792:	f108 0201 	add.w	r2, r8, #1
 801b796:	4631      	mov	r1, r6
 801b798:	4628      	mov	r0, r5
 801b79a:	47b8      	blx	r7
 801b79c:	3001      	adds	r0, #1
 801b79e:	d10c      	bne.n	801b7ba <_printf_float+0x3f2>
 801b7a0:	e65e      	b.n	801b460 <_printf_float+0x98>
 801b7a2:	2301      	movs	r3, #1
 801b7a4:	465a      	mov	r2, fp
 801b7a6:	4631      	mov	r1, r6
 801b7a8:	4628      	mov	r0, r5
 801b7aa:	47b8      	blx	r7
 801b7ac:	3001      	adds	r0, #1
 801b7ae:	f43f ae57 	beq.w	801b460 <_printf_float+0x98>
 801b7b2:	f108 0801 	add.w	r8, r8, #1
 801b7b6:	45c8      	cmp	r8, r9
 801b7b8:	dbf3      	blt.n	801b7a2 <_printf_float+0x3da>
 801b7ba:	4653      	mov	r3, sl
 801b7bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801b7c0:	e6dc      	b.n	801b57c <_printf_float+0x1b4>
 801b7c2:	f04f 0800 	mov.w	r8, #0
 801b7c6:	f104 0b1a 	add.w	fp, r4, #26
 801b7ca:	e7f4      	b.n	801b7b6 <_printf_float+0x3ee>
 801b7cc:	2301      	movs	r3, #1
 801b7ce:	4642      	mov	r2, r8
 801b7d0:	e7e1      	b.n	801b796 <_printf_float+0x3ce>
 801b7d2:	2301      	movs	r3, #1
 801b7d4:	464a      	mov	r2, r9
 801b7d6:	4631      	mov	r1, r6
 801b7d8:	4628      	mov	r0, r5
 801b7da:	47b8      	blx	r7
 801b7dc:	3001      	adds	r0, #1
 801b7de:	f43f ae3f 	beq.w	801b460 <_printf_float+0x98>
 801b7e2:	f108 0801 	add.w	r8, r8, #1
 801b7e6:	68e3      	ldr	r3, [r4, #12]
 801b7e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801b7ea:	1a5b      	subs	r3, r3, r1
 801b7ec:	4543      	cmp	r3, r8
 801b7ee:	dcf0      	bgt.n	801b7d2 <_printf_float+0x40a>
 801b7f0:	e6f8      	b.n	801b5e4 <_printf_float+0x21c>
 801b7f2:	f04f 0800 	mov.w	r8, #0
 801b7f6:	f104 0919 	add.w	r9, r4, #25
 801b7fa:	e7f4      	b.n	801b7e6 <_printf_float+0x41e>

0801b7fc <_printf_common>:
 801b7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b800:	4616      	mov	r6, r2
 801b802:	4698      	mov	r8, r3
 801b804:	688a      	ldr	r2, [r1, #8]
 801b806:	690b      	ldr	r3, [r1, #16]
 801b808:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801b80c:	4293      	cmp	r3, r2
 801b80e:	bfb8      	it	lt
 801b810:	4613      	movlt	r3, r2
 801b812:	6033      	str	r3, [r6, #0]
 801b814:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801b818:	4607      	mov	r7, r0
 801b81a:	460c      	mov	r4, r1
 801b81c:	b10a      	cbz	r2, 801b822 <_printf_common+0x26>
 801b81e:	3301      	adds	r3, #1
 801b820:	6033      	str	r3, [r6, #0]
 801b822:	6823      	ldr	r3, [r4, #0]
 801b824:	0699      	lsls	r1, r3, #26
 801b826:	bf42      	ittt	mi
 801b828:	6833      	ldrmi	r3, [r6, #0]
 801b82a:	3302      	addmi	r3, #2
 801b82c:	6033      	strmi	r3, [r6, #0]
 801b82e:	6825      	ldr	r5, [r4, #0]
 801b830:	f015 0506 	ands.w	r5, r5, #6
 801b834:	d106      	bne.n	801b844 <_printf_common+0x48>
 801b836:	f104 0a19 	add.w	sl, r4, #25
 801b83a:	68e3      	ldr	r3, [r4, #12]
 801b83c:	6832      	ldr	r2, [r6, #0]
 801b83e:	1a9b      	subs	r3, r3, r2
 801b840:	42ab      	cmp	r3, r5
 801b842:	dc26      	bgt.n	801b892 <_printf_common+0x96>
 801b844:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801b848:	6822      	ldr	r2, [r4, #0]
 801b84a:	3b00      	subs	r3, #0
 801b84c:	bf18      	it	ne
 801b84e:	2301      	movne	r3, #1
 801b850:	0692      	lsls	r2, r2, #26
 801b852:	d42b      	bmi.n	801b8ac <_printf_common+0xb0>
 801b854:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801b858:	4641      	mov	r1, r8
 801b85a:	4638      	mov	r0, r7
 801b85c:	47c8      	blx	r9
 801b85e:	3001      	adds	r0, #1
 801b860:	d01e      	beq.n	801b8a0 <_printf_common+0xa4>
 801b862:	6823      	ldr	r3, [r4, #0]
 801b864:	6922      	ldr	r2, [r4, #16]
 801b866:	f003 0306 	and.w	r3, r3, #6
 801b86a:	2b04      	cmp	r3, #4
 801b86c:	bf02      	ittt	eq
 801b86e:	68e5      	ldreq	r5, [r4, #12]
 801b870:	6833      	ldreq	r3, [r6, #0]
 801b872:	1aed      	subeq	r5, r5, r3
 801b874:	68a3      	ldr	r3, [r4, #8]
 801b876:	bf0c      	ite	eq
 801b878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b87c:	2500      	movne	r5, #0
 801b87e:	4293      	cmp	r3, r2
 801b880:	bfc4      	itt	gt
 801b882:	1a9b      	subgt	r3, r3, r2
 801b884:	18ed      	addgt	r5, r5, r3
 801b886:	2600      	movs	r6, #0
 801b888:	341a      	adds	r4, #26
 801b88a:	42b5      	cmp	r5, r6
 801b88c:	d11a      	bne.n	801b8c4 <_printf_common+0xc8>
 801b88e:	2000      	movs	r0, #0
 801b890:	e008      	b.n	801b8a4 <_printf_common+0xa8>
 801b892:	2301      	movs	r3, #1
 801b894:	4652      	mov	r2, sl
 801b896:	4641      	mov	r1, r8
 801b898:	4638      	mov	r0, r7
 801b89a:	47c8      	blx	r9
 801b89c:	3001      	adds	r0, #1
 801b89e:	d103      	bne.n	801b8a8 <_printf_common+0xac>
 801b8a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b8a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b8a8:	3501      	adds	r5, #1
 801b8aa:	e7c6      	b.n	801b83a <_printf_common+0x3e>
 801b8ac:	18e1      	adds	r1, r4, r3
 801b8ae:	1c5a      	adds	r2, r3, #1
 801b8b0:	2030      	movs	r0, #48	@ 0x30
 801b8b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801b8b6:	4422      	add	r2, r4
 801b8b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801b8bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801b8c0:	3302      	adds	r3, #2
 801b8c2:	e7c7      	b.n	801b854 <_printf_common+0x58>
 801b8c4:	2301      	movs	r3, #1
 801b8c6:	4622      	mov	r2, r4
 801b8c8:	4641      	mov	r1, r8
 801b8ca:	4638      	mov	r0, r7
 801b8cc:	47c8      	blx	r9
 801b8ce:	3001      	adds	r0, #1
 801b8d0:	d0e6      	beq.n	801b8a0 <_printf_common+0xa4>
 801b8d2:	3601      	adds	r6, #1
 801b8d4:	e7d9      	b.n	801b88a <_printf_common+0x8e>
	...

0801b8d8 <_printf_i>:
 801b8d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b8dc:	7e0f      	ldrb	r7, [r1, #24]
 801b8de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801b8e0:	2f78      	cmp	r7, #120	@ 0x78
 801b8e2:	4691      	mov	r9, r2
 801b8e4:	4680      	mov	r8, r0
 801b8e6:	460c      	mov	r4, r1
 801b8e8:	469a      	mov	sl, r3
 801b8ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801b8ee:	d807      	bhi.n	801b900 <_printf_i+0x28>
 801b8f0:	2f62      	cmp	r7, #98	@ 0x62
 801b8f2:	d80a      	bhi.n	801b90a <_printf_i+0x32>
 801b8f4:	2f00      	cmp	r7, #0
 801b8f6:	f000 80d2 	beq.w	801ba9e <_printf_i+0x1c6>
 801b8fa:	2f58      	cmp	r7, #88	@ 0x58
 801b8fc:	f000 80b9 	beq.w	801ba72 <_printf_i+0x19a>
 801b900:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b904:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801b908:	e03a      	b.n	801b980 <_printf_i+0xa8>
 801b90a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801b90e:	2b15      	cmp	r3, #21
 801b910:	d8f6      	bhi.n	801b900 <_printf_i+0x28>
 801b912:	a101      	add	r1, pc, #4	@ (adr r1, 801b918 <_printf_i+0x40>)
 801b914:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b918:	0801b971 	.word	0x0801b971
 801b91c:	0801b985 	.word	0x0801b985
 801b920:	0801b901 	.word	0x0801b901
 801b924:	0801b901 	.word	0x0801b901
 801b928:	0801b901 	.word	0x0801b901
 801b92c:	0801b901 	.word	0x0801b901
 801b930:	0801b985 	.word	0x0801b985
 801b934:	0801b901 	.word	0x0801b901
 801b938:	0801b901 	.word	0x0801b901
 801b93c:	0801b901 	.word	0x0801b901
 801b940:	0801b901 	.word	0x0801b901
 801b944:	0801ba85 	.word	0x0801ba85
 801b948:	0801b9af 	.word	0x0801b9af
 801b94c:	0801ba3f 	.word	0x0801ba3f
 801b950:	0801b901 	.word	0x0801b901
 801b954:	0801b901 	.word	0x0801b901
 801b958:	0801baa7 	.word	0x0801baa7
 801b95c:	0801b901 	.word	0x0801b901
 801b960:	0801b9af 	.word	0x0801b9af
 801b964:	0801b901 	.word	0x0801b901
 801b968:	0801b901 	.word	0x0801b901
 801b96c:	0801ba47 	.word	0x0801ba47
 801b970:	6833      	ldr	r3, [r6, #0]
 801b972:	1d1a      	adds	r2, r3, #4
 801b974:	681b      	ldr	r3, [r3, #0]
 801b976:	6032      	str	r2, [r6, #0]
 801b978:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b97c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801b980:	2301      	movs	r3, #1
 801b982:	e09d      	b.n	801bac0 <_printf_i+0x1e8>
 801b984:	6833      	ldr	r3, [r6, #0]
 801b986:	6820      	ldr	r0, [r4, #0]
 801b988:	1d19      	adds	r1, r3, #4
 801b98a:	6031      	str	r1, [r6, #0]
 801b98c:	0606      	lsls	r6, r0, #24
 801b98e:	d501      	bpl.n	801b994 <_printf_i+0xbc>
 801b990:	681d      	ldr	r5, [r3, #0]
 801b992:	e003      	b.n	801b99c <_printf_i+0xc4>
 801b994:	0645      	lsls	r5, r0, #25
 801b996:	d5fb      	bpl.n	801b990 <_printf_i+0xb8>
 801b998:	f9b3 5000 	ldrsh.w	r5, [r3]
 801b99c:	2d00      	cmp	r5, #0
 801b99e:	da03      	bge.n	801b9a8 <_printf_i+0xd0>
 801b9a0:	232d      	movs	r3, #45	@ 0x2d
 801b9a2:	426d      	negs	r5, r5
 801b9a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b9a8:	4859      	ldr	r0, [pc, #356]	@ (801bb10 <_printf_i+0x238>)
 801b9aa:	230a      	movs	r3, #10
 801b9ac:	e011      	b.n	801b9d2 <_printf_i+0xfa>
 801b9ae:	6821      	ldr	r1, [r4, #0]
 801b9b0:	6833      	ldr	r3, [r6, #0]
 801b9b2:	0608      	lsls	r0, r1, #24
 801b9b4:	f853 5b04 	ldr.w	r5, [r3], #4
 801b9b8:	d402      	bmi.n	801b9c0 <_printf_i+0xe8>
 801b9ba:	0649      	lsls	r1, r1, #25
 801b9bc:	bf48      	it	mi
 801b9be:	b2ad      	uxthmi	r5, r5
 801b9c0:	2f6f      	cmp	r7, #111	@ 0x6f
 801b9c2:	4853      	ldr	r0, [pc, #332]	@ (801bb10 <_printf_i+0x238>)
 801b9c4:	6033      	str	r3, [r6, #0]
 801b9c6:	bf14      	ite	ne
 801b9c8:	230a      	movne	r3, #10
 801b9ca:	2308      	moveq	r3, #8
 801b9cc:	2100      	movs	r1, #0
 801b9ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801b9d2:	6866      	ldr	r6, [r4, #4]
 801b9d4:	60a6      	str	r6, [r4, #8]
 801b9d6:	2e00      	cmp	r6, #0
 801b9d8:	bfa2      	ittt	ge
 801b9da:	6821      	ldrge	r1, [r4, #0]
 801b9dc:	f021 0104 	bicge.w	r1, r1, #4
 801b9e0:	6021      	strge	r1, [r4, #0]
 801b9e2:	b90d      	cbnz	r5, 801b9e8 <_printf_i+0x110>
 801b9e4:	2e00      	cmp	r6, #0
 801b9e6:	d04b      	beq.n	801ba80 <_printf_i+0x1a8>
 801b9e8:	4616      	mov	r6, r2
 801b9ea:	fbb5 f1f3 	udiv	r1, r5, r3
 801b9ee:	fb03 5711 	mls	r7, r3, r1, r5
 801b9f2:	5dc7      	ldrb	r7, [r0, r7]
 801b9f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b9f8:	462f      	mov	r7, r5
 801b9fa:	42bb      	cmp	r3, r7
 801b9fc:	460d      	mov	r5, r1
 801b9fe:	d9f4      	bls.n	801b9ea <_printf_i+0x112>
 801ba00:	2b08      	cmp	r3, #8
 801ba02:	d10b      	bne.n	801ba1c <_printf_i+0x144>
 801ba04:	6823      	ldr	r3, [r4, #0]
 801ba06:	07df      	lsls	r7, r3, #31
 801ba08:	d508      	bpl.n	801ba1c <_printf_i+0x144>
 801ba0a:	6923      	ldr	r3, [r4, #16]
 801ba0c:	6861      	ldr	r1, [r4, #4]
 801ba0e:	4299      	cmp	r1, r3
 801ba10:	bfde      	ittt	le
 801ba12:	2330      	movle	r3, #48	@ 0x30
 801ba14:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ba18:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801ba1c:	1b92      	subs	r2, r2, r6
 801ba1e:	6122      	str	r2, [r4, #16]
 801ba20:	f8cd a000 	str.w	sl, [sp]
 801ba24:	464b      	mov	r3, r9
 801ba26:	aa03      	add	r2, sp, #12
 801ba28:	4621      	mov	r1, r4
 801ba2a:	4640      	mov	r0, r8
 801ba2c:	f7ff fee6 	bl	801b7fc <_printf_common>
 801ba30:	3001      	adds	r0, #1
 801ba32:	d14a      	bne.n	801baca <_printf_i+0x1f2>
 801ba34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ba38:	b004      	add	sp, #16
 801ba3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba3e:	6823      	ldr	r3, [r4, #0]
 801ba40:	f043 0320 	orr.w	r3, r3, #32
 801ba44:	6023      	str	r3, [r4, #0]
 801ba46:	4833      	ldr	r0, [pc, #204]	@ (801bb14 <_printf_i+0x23c>)
 801ba48:	2778      	movs	r7, #120	@ 0x78
 801ba4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801ba4e:	6823      	ldr	r3, [r4, #0]
 801ba50:	6831      	ldr	r1, [r6, #0]
 801ba52:	061f      	lsls	r7, r3, #24
 801ba54:	f851 5b04 	ldr.w	r5, [r1], #4
 801ba58:	d402      	bmi.n	801ba60 <_printf_i+0x188>
 801ba5a:	065f      	lsls	r7, r3, #25
 801ba5c:	bf48      	it	mi
 801ba5e:	b2ad      	uxthmi	r5, r5
 801ba60:	6031      	str	r1, [r6, #0]
 801ba62:	07d9      	lsls	r1, r3, #31
 801ba64:	bf44      	itt	mi
 801ba66:	f043 0320 	orrmi.w	r3, r3, #32
 801ba6a:	6023      	strmi	r3, [r4, #0]
 801ba6c:	b11d      	cbz	r5, 801ba76 <_printf_i+0x19e>
 801ba6e:	2310      	movs	r3, #16
 801ba70:	e7ac      	b.n	801b9cc <_printf_i+0xf4>
 801ba72:	4827      	ldr	r0, [pc, #156]	@ (801bb10 <_printf_i+0x238>)
 801ba74:	e7e9      	b.n	801ba4a <_printf_i+0x172>
 801ba76:	6823      	ldr	r3, [r4, #0]
 801ba78:	f023 0320 	bic.w	r3, r3, #32
 801ba7c:	6023      	str	r3, [r4, #0]
 801ba7e:	e7f6      	b.n	801ba6e <_printf_i+0x196>
 801ba80:	4616      	mov	r6, r2
 801ba82:	e7bd      	b.n	801ba00 <_printf_i+0x128>
 801ba84:	6833      	ldr	r3, [r6, #0]
 801ba86:	6825      	ldr	r5, [r4, #0]
 801ba88:	6961      	ldr	r1, [r4, #20]
 801ba8a:	1d18      	adds	r0, r3, #4
 801ba8c:	6030      	str	r0, [r6, #0]
 801ba8e:	062e      	lsls	r6, r5, #24
 801ba90:	681b      	ldr	r3, [r3, #0]
 801ba92:	d501      	bpl.n	801ba98 <_printf_i+0x1c0>
 801ba94:	6019      	str	r1, [r3, #0]
 801ba96:	e002      	b.n	801ba9e <_printf_i+0x1c6>
 801ba98:	0668      	lsls	r0, r5, #25
 801ba9a:	d5fb      	bpl.n	801ba94 <_printf_i+0x1bc>
 801ba9c:	8019      	strh	r1, [r3, #0]
 801ba9e:	2300      	movs	r3, #0
 801baa0:	6123      	str	r3, [r4, #16]
 801baa2:	4616      	mov	r6, r2
 801baa4:	e7bc      	b.n	801ba20 <_printf_i+0x148>
 801baa6:	6833      	ldr	r3, [r6, #0]
 801baa8:	1d1a      	adds	r2, r3, #4
 801baaa:	6032      	str	r2, [r6, #0]
 801baac:	681e      	ldr	r6, [r3, #0]
 801baae:	6862      	ldr	r2, [r4, #4]
 801bab0:	2100      	movs	r1, #0
 801bab2:	4630      	mov	r0, r6
 801bab4:	f7e4 fc2c 	bl	8000310 <memchr>
 801bab8:	b108      	cbz	r0, 801babe <_printf_i+0x1e6>
 801baba:	1b80      	subs	r0, r0, r6
 801babc:	6060      	str	r0, [r4, #4]
 801babe:	6863      	ldr	r3, [r4, #4]
 801bac0:	6123      	str	r3, [r4, #16]
 801bac2:	2300      	movs	r3, #0
 801bac4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bac8:	e7aa      	b.n	801ba20 <_printf_i+0x148>
 801baca:	6923      	ldr	r3, [r4, #16]
 801bacc:	4632      	mov	r2, r6
 801bace:	4649      	mov	r1, r9
 801bad0:	4640      	mov	r0, r8
 801bad2:	47d0      	blx	sl
 801bad4:	3001      	adds	r0, #1
 801bad6:	d0ad      	beq.n	801ba34 <_printf_i+0x15c>
 801bad8:	6823      	ldr	r3, [r4, #0]
 801bada:	079b      	lsls	r3, r3, #30
 801badc:	d413      	bmi.n	801bb06 <_printf_i+0x22e>
 801bade:	68e0      	ldr	r0, [r4, #12]
 801bae0:	9b03      	ldr	r3, [sp, #12]
 801bae2:	4298      	cmp	r0, r3
 801bae4:	bfb8      	it	lt
 801bae6:	4618      	movlt	r0, r3
 801bae8:	e7a6      	b.n	801ba38 <_printf_i+0x160>
 801baea:	2301      	movs	r3, #1
 801baec:	4632      	mov	r2, r6
 801baee:	4649      	mov	r1, r9
 801baf0:	4640      	mov	r0, r8
 801baf2:	47d0      	blx	sl
 801baf4:	3001      	adds	r0, #1
 801baf6:	d09d      	beq.n	801ba34 <_printf_i+0x15c>
 801baf8:	3501      	adds	r5, #1
 801bafa:	68e3      	ldr	r3, [r4, #12]
 801bafc:	9903      	ldr	r1, [sp, #12]
 801bafe:	1a5b      	subs	r3, r3, r1
 801bb00:	42ab      	cmp	r3, r5
 801bb02:	dcf2      	bgt.n	801baea <_printf_i+0x212>
 801bb04:	e7eb      	b.n	801bade <_printf_i+0x206>
 801bb06:	2500      	movs	r5, #0
 801bb08:	f104 0619 	add.w	r6, r4, #25
 801bb0c:	e7f5      	b.n	801bafa <_printf_i+0x222>
 801bb0e:	bf00      	nop
 801bb10:	080207f8 	.word	0x080207f8
 801bb14:	08020809 	.word	0x08020809

0801bb18 <_scanf_float>:
 801bb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb1c:	b087      	sub	sp, #28
 801bb1e:	4617      	mov	r7, r2
 801bb20:	9303      	str	r3, [sp, #12]
 801bb22:	688b      	ldr	r3, [r1, #8]
 801bb24:	1e5a      	subs	r2, r3, #1
 801bb26:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801bb2a:	bf81      	itttt	hi
 801bb2c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801bb30:	eb03 0b05 	addhi.w	fp, r3, r5
 801bb34:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801bb38:	608b      	strhi	r3, [r1, #8]
 801bb3a:	680b      	ldr	r3, [r1, #0]
 801bb3c:	460a      	mov	r2, r1
 801bb3e:	f04f 0500 	mov.w	r5, #0
 801bb42:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801bb46:	f842 3b1c 	str.w	r3, [r2], #28
 801bb4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801bb4e:	4680      	mov	r8, r0
 801bb50:	460c      	mov	r4, r1
 801bb52:	bf98      	it	ls
 801bb54:	f04f 0b00 	movls.w	fp, #0
 801bb58:	9201      	str	r2, [sp, #4]
 801bb5a:	4616      	mov	r6, r2
 801bb5c:	46aa      	mov	sl, r5
 801bb5e:	46a9      	mov	r9, r5
 801bb60:	9502      	str	r5, [sp, #8]
 801bb62:	68a2      	ldr	r2, [r4, #8]
 801bb64:	b152      	cbz	r2, 801bb7c <_scanf_float+0x64>
 801bb66:	683b      	ldr	r3, [r7, #0]
 801bb68:	781b      	ldrb	r3, [r3, #0]
 801bb6a:	2b4e      	cmp	r3, #78	@ 0x4e
 801bb6c:	d864      	bhi.n	801bc38 <_scanf_float+0x120>
 801bb6e:	2b40      	cmp	r3, #64	@ 0x40
 801bb70:	d83c      	bhi.n	801bbec <_scanf_float+0xd4>
 801bb72:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801bb76:	b2c8      	uxtb	r0, r1
 801bb78:	280e      	cmp	r0, #14
 801bb7a:	d93a      	bls.n	801bbf2 <_scanf_float+0xda>
 801bb7c:	f1b9 0f00 	cmp.w	r9, #0
 801bb80:	d003      	beq.n	801bb8a <_scanf_float+0x72>
 801bb82:	6823      	ldr	r3, [r4, #0]
 801bb84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801bb88:	6023      	str	r3, [r4, #0]
 801bb8a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801bb8e:	f1ba 0f01 	cmp.w	sl, #1
 801bb92:	f200 8117 	bhi.w	801bdc4 <_scanf_float+0x2ac>
 801bb96:	9b01      	ldr	r3, [sp, #4]
 801bb98:	429e      	cmp	r6, r3
 801bb9a:	f200 8108 	bhi.w	801bdae <_scanf_float+0x296>
 801bb9e:	2001      	movs	r0, #1
 801bba0:	b007      	add	sp, #28
 801bba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bba6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801bbaa:	2a0d      	cmp	r2, #13
 801bbac:	d8e6      	bhi.n	801bb7c <_scanf_float+0x64>
 801bbae:	a101      	add	r1, pc, #4	@ (adr r1, 801bbb4 <_scanf_float+0x9c>)
 801bbb0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801bbb4:	0801bcfb 	.word	0x0801bcfb
 801bbb8:	0801bb7d 	.word	0x0801bb7d
 801bbbc:	0801bb7d 	.word	0x0801bb7d
 801bbc0:	0801bb7d 	.word	0x0801bb7d
 801bbc4:	0801bd5b 	.word	0x0801bd5b
 801bbc8:	0801bd33 	.word	0x0801bd33
 801bbcc:	0801bb7d 	.word	0x0801bb7d
 801bbd0:	0801bb7d 	.word	0x0801bb7d
 801bbd4:	0801bd09 	.word	0x0801bd09
 801bbd8:	0801bb7d 	.word	0x0801bb7d
 801bbdc:	0801bb7d 	.word	0x0801bb7d
 801bbe0:	0801bb7d 	.word	0x0801bb7d
 801bbe4:	0801bb7d 	.word	0x0801bb7d
 801bbe8:	0801bcc1 	.word	0x0801bcc1
 801bbec:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801bbf0:	e7db      	b.n	801bbaa <_scanf_float+0x92>
 801bbf2:	290e      	cmp	r1, #14
 801bbf4:	d8c2      	bhi.n	801bb7c <_scanf_float+0x64>
 801bbf6:	a001      	add	r0, pc, #4	@ (adr r0, 801bbfc <_scanf_float+0xe4>)
 801bbf8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801bbfc:	0801bcb1 	.word	0x0801bcb1
 801bc00:	0801bb7d 	.word	0x0801bb7d
 801bc04:	0801bcb1 	.word	0x0801bcb1
 801bc08:	0801bd47 	.word	0x0801bd47
 801bc0c:	0801bb7d 	.word	0x0801bb7d
 801bc10:	0801bc59 	.word	0x0801bc59
 801bc14:	0801bc97 	.word	0x0801bc97
 801bc18:	0801bc97 	.word	0x0801bc97
 801bc1c:	0801bc97 	.word	0x0801bc97
 801bc20:	0801bc97 	.word	0x0801bc97
 801bc24:	0801bc97 	.word	0x0801bc97
 801bc28:	0801bc97 	.word	0x0801bc97
 801bc2c:	0801bc97 	.word	0x0801bc97
 801bc30:	0801bc97 	.word	0x0801bc97
 801bc34:	0801bc97 	.word	0x0801bc97
 801bc38:	2b6e      	cmp	r3, #110	@ 0x6e
 801bc3a:	d809      	bhi.n	801bc50 <_scanf_float+0x138>
 801bc3c:	2b60      	cmp	r3, #96	@ 0x60
 801bc3e:	d8b2      	bhi.n	801bba6 <_scanf_float+0x8e>
 801bc40:	2b54      	cmp	r3, #84	@ 0x54
 801bc42:	d07b      	beq.n	801bd3c <_scanf_float+0x224>
 801bc44:	2b59      	cmp	r3, #89	@ 0x59
 801bc46:	d199      	bne.n	801bb7c <_scanf_float+0x64>
 801bc48:	2d07      	cmp	r5, #7
 801bc4a:	d197      	bne.n	801bb7c <_scanf_float+0x64>
 801bc4c:	2508      	movs	r5, #8
 801bc4e:	e02c      	b.n	801bcaa <_scanf_float+0x192>
 801bc50:	2b74      	cmp	r3, #116	@ 0x74
 801bc52:	d073      	beq.n	801bd3c <_scanf_float+0x224>
 801bc54:	2b79      	cmp	r3, #121	@ 0x79
 801bc56:	e7f6      	b.n	801bc46 <_scanf_float+0x12e>
 801bc58:	6821      	ldr	r1, [r4, #0]
 801bc5a:	05c8      	lsls	r0, r1, #23
 801bc5c:	d51b      	bpl.n	801bc96 <_scanf_float+0x17e>
 801bc5e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801bc62:	6021      	str	r1, [r4, #0]
 801bc64:	f109 0901 	add.w	r9, r9, #1
 801bc68:	f1bb 0f00 	cmp.w	fp, #0
 801bc6c:	d003      	beq.n	801bc76 <_scanf_float+0x15e>
 801bc6e:	3201      	adds	r2, #1
 801bc70:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 801bc74:	60a2      	str	r2, [r4, #8]
 801bc76:	68a3      	ldr	r3, [r4, #8]
 801bc78:	3b01      	subs	r3, #1
 801bc7a:	60a3      	str	r3, [r4, #8]
 801bc7c:	6923      	ldr	r3, [r4, #16]
 801bc7e:	3301      	adds	r3, #1
 801bc80:	6123      	str	r3, [r4, #16]
 801bc82:	687b      	ldr	r3, [r7, #4]
 801bc84:	3b01      	subs	r3, #1
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	607b      	str	r3, [r7, #4]
 801bc8a:	f340 8087 	ble.w	801bd9c <_scanf_float+0x284>
 801bc8e:	683b      	ldr	r3, [r7, #0]
 801bc90:	3301      	adds	r3, #1
 801bc92:	603b      	str	r3, [r7, #0]
 801bc94:	e765      	b.n	801bb62 <_scanf_float+0x4a>
 801bc96:	eb1a 0105 	adds.w	r1, sl, r5
 801bc9a:	f47f af6f 	bne.w	801bb7c <_scanf_float+0x64>
 801bc9e:	6822      	ldr	r2, [r4, #0]
 801bca0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801bca4:	6022      	str	r2, [r4, #0]
 801bca6:	460d      	mov	r5, r1
 801bca8:	468a      	mov	sl, r1
 801bcaa:	f806 3b01 	strb.w	r3, [r6], #1
 801bcae:	e7e2      	b.n	801bc76 <_scanf_float+0x15e>
 801bcb0:	6822      	ldr	r2, [r4, #0]
 801bcb2:	0610      	lsls	r0, r2, #24
 801bcb4:	f57f af62 	bpl.w	801bb7c <_scanf_float+0x64>
 801bcb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801bcbc:	6022      	str	r2, [r4, #0]
 801bcbe:	e7f4      	b.n	801bcaa <_scanf_float+0x192>
 801bcc0:	f1ba 0f00 	cmp.w	sl, #0
 801bcc4:	d10e      	bne.n	801bce4 <_scanf_float+0x1cc>
 801bcc6:	f1b9 0f00 	cmp.w	r9, #0
 801bcca:	d10e      	bne.n	801bcea <_scanf_float+0x1d2>
 801bccc:	6822      	ldr	r2, [r4, #0]
 801bcce:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801bcd2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801bcd6:	d108      	bne.n	801bcea <_scanf_float+0x1d2>
 801bcd8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801bcdc:	6022      	str	r2, [r4, #0]
 801bcde:	f04f 0a01 	mov.w	sl, #1
 801bce2:	e7e2      	b.n	801bcaa <_scanf_float+0x192>
 801bce4:	f1ba 0f02 	cmp.w	sl, #2
 801bce8:	d055      	beq.n	801bd96 <_scanf_float+0x27e>
 801bcea:	2d01      	cmp	r5, #1
 801bcec:	d002      	beq.n	801bcf4 <_scanf_float+0x1dc>
 801bcee:	2d04      	cmp	r5, #4
 801bcf0:	f47f af44 	bne.w	801bb7c <_scanf_float+0x64>
 801bcf4:	3501      	adds	r5, #1
 801bcf6:	b2ed      	uxtb	r5, r5
 801bcf8:	e7d7      	b.n	801bcaa <_scanf_float+0x192>
 801bcfa:	f1ba 0f01 	cmp.w	sl, #1
 801bcfe:	f47f af3d 	bne.w	801bb7c <_scanf_float+0x64>
 801bd02:	f04f 0a02 	mov.w	sl, #2
 801bd06:	e7d0      	b.n	801bcaa <_scanf_float+0x192>
 801bd08:	b97d      	cbnz	r5, 801bd2a <_scanf_float+0x212>
 801bd0a:	f1b9 0f00 	cmp.w	r9, #0
 801bd0e:	f47f af38 	bne.w	801bb82 <_scanf_float+0x6a>
 801bd12:	6822      	ldr	r2, [r4, #0]
 801bd14:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801bd18:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801bd1c:	f040 8101 	bne.w	801bf22 <_scanf_float+0x40a>
 801bd20:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801bd24:	6022      	str	r2, [r4, #0]
 801bd26:	2501      	movs	r5, #1
 801bd28:	e7bf      	b.n	801bcaa <_scanf_float+0x192>
 801bd2a:	2d03      	cmp	r5, #3
 801bd2c:	d0e2      	beq.n	801bcf4 <_scanf_float+0x1dc>
 801bd2e:	2d05      	cmp	r5, #5
 801bd30:	e7de      	b.n	801bcf0 <_scanf_float+0x1d8>
 801bd32:	2d02      	cmp	r5, #2
 801bd34:	f47f af22 	bne.w	801bb7c <_scanf_float+0x64>
 801bd38:	2503      	movs	r5, #3
 801bd3a:	e7b6      	b.n	801bcaa <_scanf_float+0x192>
 801bd3c:	2d06      	cmp	r5, #6
 801bd3e:	f47f af1d 	bne.w	801bb7c <_scanf_float+0x64>
 801bd42:	2507      	movs	r5, #7
 801bd44:	e7b1      	b.n	801bcaa <_scanf_float+0x192>
 801bd46:	6822      	ldr	r2, [r4, #0]
 801bd48:	0591      	lsls	r1, r2, #22
 801bd4a:	f57f af17 	bpl.w	801bb7c <_scanf_float+0x64>
 801bd4e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801bd52:	6022      	str	r2, [r4, #0]
 801bd54:	f8cd 9008 	str.w	r9, [sp, #8]
 801bd58:	e7a7      	b.n	801bcaa <_scanf_float+0x192>
 801bd5a:	6822      	ldr	r2, [r4, #0]
 801bd5c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801bd60:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801bd64:	d006      	beq.n	801bd74 <_scanf_float+0x25c>
 801bd66:	0550      	lsls	r0, r2, #21
 801bd68:	f57f af08 	bpl.w	801bb7c <_scanf_float+0x64>
 801bd6c:	f1b9 0f00 	cmp.w	r9, #0
 801bd70:	f000 80d7 	beq.w	801bf22 <_scanf_float+0x40a>
 801bd74:	0591      	lsls	r1, r2, #22
 801bd76:	bf58      	it	pl
 801bd78:	9902      	ldrpl	r1, [sp, #8]
 801bd7a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801bd7e:	bf58      	it	pl
 801bd80:	eba9 0101 	subpl.w	r1, r9, r1
 801bd84:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801bd88:	bf58      	it	pl
 801bd8a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801bd8e:	6022      	str	r2, [r4, #0]
 801bd90:	f04f 0900 	mov.w	r9, #0
 801bd94:	e789      	b.n	801bcaa <_scanf_float+0x192>
 801bd96:	f04f 0a03 	mov.w	sl, #3
 801bd9a:	e786      	b.n	801bcaa <_scanf_float+0x192>
 801bd9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801bda0:	4639      	mov	r1, r7
 801bda2:	4640      	mov	r0, r8
 801bda4:	4798      	blx	r3
 801bda6:	2800      	cmp	r0, #0
 801bda8:	f43f aedb 	beq.w	801bb62 <_scanf_float+0x4a>
 801bdac:	e6e6      	b.n	801bb7c <_scanf_float+0x64>
 801bdae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801bdb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bdb6:	463a      	mov	r2, r7
 801bdb8:	4640      	mov	r0, r8
 801bdba:	4798      	blx	r3
 801bdbc:	6923      	ldr	r3, [r4, #16]
 801bdbe:	3b01      	subs	r3, #1
 801bdc0:	6123      	str	r3, [r4, #16]
 801bdc2:	e6e8      	b.n	801bb96 <_scanf_float+0x7e>
 801bdc4:	1e6b      	subs	r3, r5, #1
 801bdc6:	2b06      	cmp	r3, #6
 801bdc8:	d824      	bhi.n	801be14 <_scanf_float+0x2fc>
 801bdca:	2d02      	cmp	r5, #2
 801bdcc:	d836      	bhi.n	801be3c <_scanf_float+0x324>
 801bdce:	9b01      	ldr	r3, [sp, #4]
 801bdd0:	429e      	cmp	r6, r3
 801bdd2:	f67f aee4 	bls.w	801bb9e <_scanf_float+0x86>
 801bdd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801bdda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bdde:	463a      	mov	r2, r7
 801bde0:	4640      	mov	r0, r8
 801bde2:	4798      	blx	r3
 801bde4:	6923      	ldr	r3, [r4, #16]
 801bde6:	3b01      	subs	r3, #1
 801bde8:	6123      	str	r3, [r4, #16]
 801bdea:	e7f0      	b.n	801bdce <_scanf_float+0x2b6>
 801bdec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801bdf0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801bdf4:	463a      	mov	r2, r7
 801bdf6:	4640      	mov	r0, r8
 801bdf8:	4798      	blx	r3
 801bdfa:	6923      	ldr	r3, [r4, #16]
 801bdfc:	3b01      	subs	r3, #1
 801bdfe:	6123      	str	r3, [r4, #16]
 801be00:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801be04:	fa5f fa8a 	uxtb.w	sl, sl
 801be08:	f1ba 0f02 	cmp.w	sl, #2
 801be0c:	d1ee      	bne.n	801bdec <_scanf_float+0x2d4>
 801be0e:	3d03      	subs	r5, #3
 801be10:	b2ed      	uxtb	r5, r5
 801be12:	1b76      	subs	r6, r6, r5
 801be14:	6823      	ldr	r3, [r4, #0]
 801be16:	05da      	lsls	r2, r3, #23
 801be18:	d530      	bpl.n	801be7c <_scanf_float+0x364>
 801be1a:	055b      	lsls	r3, r3, #21
 801be1c:	d511      	bpl.n	801be42 <_scanf_float+0x32a>
 801be1e:	9b01      	ldr	r3, [sp, #4]
 801be20:	429e      	cmp	r6, r3
 801be22:	f67f aebc 	bls.w	801bb9e <_scanf_float+0x86>
 801be26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801be2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801be2e:	463a      	mov	r2, r7
 801be30:	4640      	mov	r0, r8
 801be32:	4798      	blx	r3
 801be34:	6923      	ldr	r3, [r4, #16]
 801be36:	3b01      	subs	r3, #1
 801be38:	6123      	str	r3, [r4, #16]
 801be3a:	e7f0      	b.n	801be1e <_scanf_float+0x306>
 801be3c:	46aa      	mov	sl, r5
 801be3e:	46b3      	mov	fp, r6
 801be40:	e7de      	b.n	801be00 <_scanf_float+0x2e8>
 801be42:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801be46:	6923      	ldr	r3, [r4, #16]
 801be48:	2965      	cmp	r1, #101	@ 0x65
 801be4a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801be4e:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 801be52:	6123      	str	r3, [r4, #16]
 801be54:	d00c      	beq.n	801be70 <_scanf_float+0x358>
 801be56:	2945      	cmp	r1, #69	@ 0x45
 801be58:	d00a      	beq.n	801be70 <_scanf_float+0x358>
 801be5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801be5e:	463a      	mov	r2, r7
 801be60:	4640      	mov	r0, r8
 801be62:	4798      	blx	r3
 801be64:	6923      	ldr	r3, [r4, #16]
 801be66:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801be6a:	3b01      	subs	r3, #1
 801be6c:	1eb5      	subs	r5, r6, #2
 801be6e:	6123      	str	r3, [r4, #16]
 801be70:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801be74:	463a      	mov	r2, r7
 801be76:	4640      	mov	r0, r8
 801be78:	4798      	blx	r3
 801be7a:	462e      	mov	r6, r5
 801be7c:	6822      	ldr	r2, [r4, #0]
 801be7e:	f012 0210 	ands.w	r2, r2, #16
 801be82:	d001      	beq.n	801be88 <_scanf_float+0x370>
 801be84:	2000      	movs	r0, #0
 801be86:	e68b      	b.n	801bba0 <_scanf_float+0x88>
 801be88:	7032      	strb	r2, [r6, #0]
 801be8a:	6823      	ldr	r3, [r4, #0]
 801be8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801be90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801be94:	d11a      	bne.n	801becc <_scanf_float+0x3b4>
 801be96:	9b02      	ldr	r3, [sp, #8]
 801be98:	454b      	cmp	r3, r9
 801be9a:	eba3 0209 	sub.w	r2, r3, r9
 801be9e:	d121      	bne.n	801bee4 <_scanf_float+0x3cc>
 801bea0:	9901      	ldr	r1, [sp, #4]
 801bea2:	2200      	movs	r2, #0
 801bea4:	4640      	mov	r0, r8
 801bea6:	f000 ff29 	bl	801ccfc <_strtod_r>
 801beaa:	9b03      	ldr	r3, [sp, #12]
 801beac:	6821      	ldr	r1, [r4, #0]
 801beae:	681b      	ldr	r3, [r3, #0]
 801beb0:	f011 0f02 	tst.w	r1, #2
 801beb4:	f103 0204 	add.w	r2, r3, #4
 801beb8:	d01f      	beq.n	801befa <_scanf_float+0x3e2>
 801beba:	9903      	ldr	r1, [sp, #12]
 801bebc:	600a      	str	r2, [r1, #0]
 801bebe:	681b      	ldr	r3, [r3, #0]
 801bec0:	ed83 0b00 	vstr	d0, [r3]
 801bec4:	68e3      	ldr	r3, [r4, #12]
 801bec6:	3301      	adds	r3, #1
 801bec8:	60e3      	str	r3, [r4, #12]
 801beca:	e7db      	b.n	801be84 <_scanf_float+0x36c>
 801becc:	9b04      	ldr	r3, [sp, #16]
 801bece:	2b00      	cmp	r3, #0
 801bed0:	d0e6      	beq.n	801bea0 <_scanf_float+0x388>
 801bed2:	9905      	ldr	r1, [sp, #20]
 801bed4:	230a      	movs	r3, #10
 801bed6:	3101      	adds	r1, #1
 801bed8:	4640      	mov	r0, r8
 801beda:	f000 ff8f 	bl	801cdfc <_strtol_r>
 801bede:	9b04      	ldr	r3, [sp, #16]
 801bee0:	9e05      	ldr	r6, [sp, #20]
 801bee2:	1ac2      	subs	r2, r0, r3
 801bee4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801bee8:	429e      	cmp	r6, r3
 801beea:	bf28      	it	cs
 801beec:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801bef0:	490d      	ldr	r1, [pc, #52]	@ (801bf28 <_scanf_float+0x410>)
 801bef2:	4630      	mov	r0, r6
 801bef4:	f000 f81c 	bl	801bf30 <siprintf>
 801bef8:	e7d2      	b.n	801bea0 <_scanf_float+0x388>
 801befa:	f011 0f04 	tst.w	r1, #4
 801befe:	9903      	ldr	r1, [sp, #12]
 801bf00:	600a      	str	r2, [r1, #0]
 801bf02:	d1dc      	bne.n	801bebe <_scanf_float+0x3a6>
 801bf04:	eeb4 0b40 	vcmp.f64	d0, d0
 801bf08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf0c:	681d      	ldr	r5, [r3, #0]
 801bf0e:	d705      	bvc.n	801bf1c <_scanf_float+0x404>
 801bf10:	4806      	ldr	r0, [pc, #24]	@ (801bf2c <_scanf_float+0x414>)
 801bf12:	f001 f845 	bl	801cfa0 <nanf>
 801bf16:	ed85 0a00 	vstr	s0, [r5]
 801bf1a:	e7d3      	b.n	801bec4 <_scanf_float+0x3ac>
 801bf1c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801bf20:	e7f9      	b.n	801bf16 <_scanf_float+0x3fe>
 801bf22:	f04f 0900 	mov.w	r9, #0
 801bf26:	e630      	b.n	801bb8a <_scanf_float+0x72>
 801bf28:	0802081a 	.word	0x0802081a
 801bf2c:	08020c2b 	.word	0x08020c2b

0801bf30 <siprintf>:
 801bf30:	b40e      	push	{r1, r2, r3}
 801bf32:	b500      	push	{lr}
 801bf34:	b09c      	sub	sp, #112	@ 0x70
 801bf36:	ab1d      	add	r3, sp, #116	@ 0x74
 801bf38:	9002      	str	r0, [sp, #8]
 801bf3a:	9006      	str	r0, [sp, #24]
 801bf3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801bf40:	4809      	ldr	r0, [pc, #36]	@ (801bf68 <siprintf+0x38>)
 801bf42:	9107      	str	r1, [sp, #28]
 801bf44:	9104      	str	r1, [sp, #16]
 801bf46:	4909      	ldr	r1, [pc, #36]	@ (801bf6c <siprintf+0x3c>)
 801bf48:	f853 2b04 	ldr.w	r2, [r3], #4
 801bf4c:	9105      	str	r1, [sp, #20]
 801bf4e:	6800      	ldr	r0, [r0, #0]
 801bf50:	9301      	str	r3, [sp, #4]
 801bf52:	a902      	add	r1, sp, #8
 801bf54:	f002 f9e8 	bl	801e328 <_svfiprintf_r>
 801bf58:	9b02      	ldr	r3, [sp, #8]
 801bf5a:	2200      	movs	r2, #0
 801bf5c:	701a      	strb	r2, [r3, #0]
 801bf5e:	b01c      	add	sp, #112	@ 0x70
 801bf60:	f85d eb04 	ldr.w	lr, [sp], #4
 801bf64:	b003      	add	sp, #12
 801bf66:	4770      	bx	lr
 801bf68:	24000378 	.word	0x24000378
 801bf6c:	ffff0208 	.word	0xffff0208

0801bf70 <siscanf>:
 801bf70:	b40e      	push	{r1, r2, r3}
 801bf72:	b530      	push	{r4, r5, lr}
 801bf74:	b09c      	sub	sp, #112	@ 0x70
 801bf76:	ac1f      	add	r4, sp, #124	@ 0x7c
 801bf78:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801bf7c:	f854 5b04 	ldr.w	r5, [r4], #4
 801bf80:	f8ad 2014 	strh.w	r2, [sp, #20]
 801bf84:	9002      	str	r0, [sp, #8]
 801bf86:	9006      	str	r0, [sp, #24]
 801bf88:	f7e4 fa12 	bl	80003b0 <strlen>
 801bf8c:	4b0b      	ldr	r3, [pc, #44]	@ (801bfbc <siscanf+0x4c>)
 801bf8e:	9003      	str	r0, [sp, #12]
 801bf90:	9007      	str	r0, [sp, #28]
 801bf92:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bf94:	480a      	ldr	r0, [pc, #40]	@ (801bfc0 <siscanf+0x50>)
 801bf96:	9401      	str	r4, [sp, #4]
 801bf98:	2300      	movs	r3, #0
 801bf9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801bf9c:	9314      	str	r3, [sp, #80]	@ 0x50
 801bf9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801bfa2:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bfa6:	462a      	mov	r2, r5
 801bfa8:	4623      	mov	r3, r4
 801bfaa:	a902      	add	r1, sp, #8
 801bfac:	6800      	ldr	r0, [r0, #0]
 801bfae:	f002 fb0f 	bl	801e5d0 <__ssvfiscanf_r>
 801bfb2:	b01c      	add	sp, #112	@ 0x70
 801bfb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801bfb8:	b003      	add	sp, #12
 801bfba:	4770      	bx	lr
 801bfbc:	0801bfe7 	.word	0x0801bfe7
 801bfc0:	24000378 	.word	0x24000378

0801bfc4 <__sread>:
 801bfc4:	b510      	push	{r4, lr}
 801bfc6:	460c      	mov	r4, r1
 801bfc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bfcc:	f000 ff76 	bl	801cebc <_read_r>
 801bfd0:	2800      	cmp	r0, #0
 801bfd2:	bfab      	itete	ge
 801bfd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801bfd6:	89a3      	ldrhlt	r3, [r4, #12]
 801bfd8:	181b      	addge	r3, r3, r0
 801bfda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801bfde:	bfac      	ite	ge
 801bfe0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801bfe2:	81a3      	strhlt	r3, [r4, #12]
 801bfe4:	bd10      	pop	{r4, pc}

0801bfe6 <__seofread>:
 801bfe6:	2000      	movs	r0, #0
 801bfe8:	4770      	bx	lr

0801bfea <__swrite>:
 801bfea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bfee:	461f      	mov	r7, r3
 801bff0:	898b      	ldrh	r3, [r1, #12]
 801bff2:	05db      	lsls	r3, r3, #23
 801bff4:	4605      	mov	r5, r0
 801bff6:	460c      	mov	r4, r1
 801bff8:	4616      	mov	r6, r2
 801bffa:	d505      	bpl.n	801c008 <__swrite+0x1e>
 801bffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c000:	2302      	movs	r3, #2
 801c002:	2200      	movs	r2, #0
 801c004:	f000 ff48 	bl	801ce98 <_lseek_r>
 801c008:	89a3      	ldrh	r3, [r4, #12]
 801c00a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c00e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c012:	81a3      	strh	r3, [r4, #12]
 801c014:	4632      	mov	r2, r6
 801c016:	463b      	mov	r3, r7
 801c018:	4628      	mov	r0, r5
 801c01a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c01e:	f000 bf5f 	b.w	801cee0 <_write_r>

0801c022 <__sseek>:
 801c022:	b510      	push	{r4, lr}
 801c024:	460c      	mov	r4, r1
 801c026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c02a:	f000 ff35 	bl	801ce98 <_lseek_r>
 801c02e:	1c43      	adds	r3, r0, #1
 801c030:	89a3      	ldrh	r3, [r4, #12]
 801c032:	bf15      	itete	ne
 801c034:	6560      	strne	r0, [r4, #84]	@ 0x54
 801c036:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801c03a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801c03e:	81a3      	strheq	r3, [r4, #12]
 801c040:	bf18      	it	ne
 801c042:	81a3      	strhne	r3, [r4, #12]
 801c044:	bd10      	pop	{r4, pc}

0801c046 <__sclose>:
 801c046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c04a:	f000 bf15 	b.w	801ce78 <_close_r>
	...

0801c050 <std>:
 801c050:	2300      	movs	r3, #0
 801c052:	b510      	push	{r4, lr}
 801c054:	4604      	mov	r4, r0
 801c056:	e9c0 3300 	strd	r3, r3, [r0]
 801c05a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c05e:	6083      	str	r3, [r0, #8]
 801c060:	8181      	strh	r1, [r0, #12]
 801c062:	6643      	str	r3, [r0, #100]	@ 0x64
 801c064:	81c2      	strh	r2, [r0, #14]
 801c066:	6183      	str	r3, [r0, #24]
 801c068:	4619      	mov	r1, r3
 801c06a:	2208      	movs	r2, #8
 801c06c:	305c      	adds	r0, #92	@ 0x5c
 801c06e:	f000 fef7 	bl	801ce60 <memset>
 801c072:	4b0d      	ldr	r3, [pc, #52]	@ (801c0a8 <std+0x58>)
 801c074:	6263      	str	r3, [r4, #36]	@ 0x24
 801c076:	4b0d      	ldr	r3, [pc, #52]	@ (801c0ac <std+0x5c>)
 801c078:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c07a:	4b0d      	ldr	r3, [pc, #52]	@ (801c0b0 <std+0x60>)
 801c07c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c07e:	4b0d      	ldr	r3, [pc, #52]	@ (801c0b4 <std+0x64>)
 801c080:	6323      	str	r3, [r4, #48]	@ 0x30
 801c082:	4b0d      	ldr	r3, [pc, #52]	@ (801c0b8 <std+0x68>)
 801c084:	6224      	str	r4, [r4, #32]
 801c086:	429c      	cmp	r4, r3
 801c088:	d006      	beq.n	801c098 <std+0x48>
 801c08a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801c08e:	4294      	cmp	r4, r2
 801c090:	d002      	beq.n	801c098 <std+0x48>
 801c092:	33d0      	adds	r3, #208	@ 0xd0
 801c094:	429c      	cmp	r4, r3
 801c096:	d105      	bne.n	801c0a4 <std+0x54>
 801c098:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801c09c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c0a0:	f000 bf5a 	b.w	801cf58 <__retarget_lock_init_recursive>
 801c0a4:	bd10      	pop	{r4, pc}
 801c0a6:	bf00      	nop
 801c0a8:	0801bfc5 	.word	0x0801bfc5
 801c0ac:	0801bfeb 	.word	0x0801bfeb
 801c0b0:	0801c023 	.word	0x0801c023
 801c0b4:	0801c047 	.word	0x0801c047
 801c0b8:	24005d14 	.word	0x24005d14

0801c0bc <stdio_exit_handler>:
 801c0bc:	4a02      	ldr	r2, [pc, #8]	@ (801c0c8 <stdio_exit_handler+0xc>)
 801c0be:	4903      	ldr	r1, [pc, #12]	@ (801c0cc <stdio_exit_handler+0x10>)
 801c0c0:	4803      	ldr	r0, [pc, #12]	@ (801c0d0 <stdio_exit_handler+0x14>)
 801c0c2:	f000 be9d 	b.w	801ce00 <_fwalk_sglue>
 801c0c6:	bf00      	nop
 801c0c8:	24000200 	.word	0x24000200
 801c0cc:	0801ee49 	.word	0x0801ee49
 801c0d0:	2400037c 	.word	0x2400037c

0801c0d4 <cleanup_stdio>:
 801c0d4:	6841      	ldr	r1, [r0, #4]
 801c0d6:	4b0c      	ldr	r3, [pc, #48]	@ (801c108 <cleanup_stdio+0x34>)
 801c0d8:	4299      	cmp	r1, r3
 801c0da:	b510      	push	{r4, lr}
 801c0dc:	4604      	mov	r4, r0
 801c0de:	d001      	beq.n	801c0e4 <cleanup_stdio+0x10>
 801c0e0:	f002 feb2 	bl	801ee48 <_fflush_r>
 801c0e4:	68a1      	ldr	r1, [r4, #8]
 801c0e6:	4b09      	ldr	r3, [pc, #36]	@ (801c10c <cleanup_stdio+0x38>)
 801c0e8:	4299      	cmp	r1, r3
 801c0ea:	d002      	beq.n	801c0f2 <cleanup_stdio+0x1e>
 801c0ec:	4620      	mov	r0, r4
 801c0ee:	f002 feab 	bl	801ee48 <_fflush_r>
 801c0f2:	68e1      	ldr	r1, [r4, #12]
 801c0f4:	4b06      	ldr	r3, [pc, #24]	@ (801c110 <cleanup_stdio+0x3c>)
 801c0f6:	4299      	cmp	r1, r3
 801c0f8:	d004      	beq.n	801c104 <cleanup_stdio+0x30>
 801c0fa:	4620      	mov	r0, r4
 801c0fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c100:	f002 bea2 	b.w	801ee48 <_fflush_r>
 801c104:	bd10      	pop	{r4, pc}
 801c106:	bf00      	nop
 801c108:	24005d14 	.word	0x24005d14
 801c10c:	24005d7c 	.word	0x24005d7c
 801c110:	24005de4 	.word	0x24005de4

0801c114 <global_stdio_init.part.0>:
 801c114:	b510      	push	{r4, lr}
 801c116:	4b0b      	ldr	r3, [pc, #44]	@ (801c144 <global_stdio_init.part.0+0x30>)
 801c118:	4c0b      	ldr	r4, [pc, #44]	@ (801c148 <global_stdio_init.part.0+0x34>)
 801c11a:	4a0c      	ldr	r2, [pc, #48]	@ (801c14c <global_stdio_init.part.0+0x38>)
 801c11c:	601a      	str	r2, [r3, #0]
 801c11e:	4620      	mov	r0, r4
 801c120:	2200      	movs	r2, #0
 801c122:	2104      	movs	r1, #4
 801c124:	f7ff ff94 	bl	801c050 <std>
 801c128:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801c12c:	2201      	movs	r2, #1
 801c12e:	2109      	movs	r1, #9
 801c130:	f7ff ff8e 	bl	801c050 <std>
 801c134:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801c138:	2202      	movs	r2, #2
 801c13a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c13e:	2112      	movs	r1, #18
 801c140:	f7ff bf86 	b.w	801c050 <std>
 801c144:	24005e4c 	.word	0x24005e4c
 801c148:	24005d14 	.word	0x24005d14
 801c14c:	0801c0bd 	.word	0x0801c0bd

0801c150 <__sfp_lock_acquire>:
 801c150:	4801      	ldr	r0, [pc, #4]	@ (801c158 <__sfp_lock_acquire+0x8>)
 801c152:	f000 bf02 	b.w	801cf5a <__retarget_lock_acquire_recursive>
 801c156:	bf00      	nop
 801c158:	24005e55 	.word	0x24005e55

0801c15c <__sfp_lock_release>:
 801c15c:	4801      	ldr	r0, [pc, #4]	@ (801c164 <__sfp_lock_release+0x8>)
 801c15e:	f000 befd 	b.w	801cf5c <__retarget_lock_release_recursive>
 801c162:	bf00      	nop
 801c164:	24005e55 	.word	0x24005e55

0801c168 <__sinit>:
 801c168:	b510      	push	{r4, lr}
 801c16a:	4604      	mov	r4, r0
 801c16c:	f7ff fff0 	bl	801c150 <__sfp_lock_acquire>
 801c170:	6a23      	ldr	r3, [r4, #32]
 801c172:	b11b      	cbz	r3, 801c17c <__sinit+0x14>
 801c174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c178:	f7ff bff0 	b.w	801c15c <__sfp_lock_release>
 801c17c:	4b04      	ldr	r3, [pc, #16]	@ (801c190 <__sinit+0x28>)
 801c17e:	6223      	str	r3, [r4, #32]
 801c180:	4b04      	ldr	r3, [pc, #16]	@ (801c194 <__sinit+0x2c>)
 801c182:	681b      	ldr	r3, [r3, #0]
 801c184:	2b00      	cmp	r3, #0
 801c186:	d1f5      	bne.n	801c174 <__sinit+0xc>
 801c188:	f7ff ffc4 	bl	801c114 <global_stdio_init.part.0>
 801c18c:	e7f2      	b.n	801c174 <__sinit+0xc>
 801c18e:	bf00      	nop
 801c190:	0801c0d5 	.word	0x0801c0d5
 801c194:	24005e4c 	.word	0x24005e4c

0801c198 <sulp>:
 801c198:	b570      	push	{r4, r5, r6, lr}
 801c19a:	4604      	mov	r4, r0
 801c19c:	460d      	mov	r5, r1
 801c19e:	4616      	mov	r6, r2
 801c1a0:	ec45 4b10 	vmov	d0, r4, r5
 801c1a4:	f003 f9f8 	bl	801f598 <__ulp>
 801c1a8:	b17e      	cbz	r6, 801c1ca <sulp+0x32>
 801c1aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801c1ae:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	dd09      	ble.n	801c1ca <sulp+0x32>
 801c1b6:	051b      	lsls	r3, r3, #20
 801c1b8:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801c1bc:	2000      	movs	r0, #0
 801c1be:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 801c1c2:	ec41 0b17 	vmov	d7, r0, r1
 801c1c6:	ee20 0b07 	vmul.f64	d0, d0, d7
 801c1ca:	bd70      	pop	{r4, r5, r6, pc}
 801c1cc:	0000      	movs	r0, r0
	...

0801c1d0 <_strtod_l>:
 801c1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1d4:	ed2d 8b0a 	vpush	{d8-d12}
 801c1d8:	b097      	sub	sp, #92	@ 0x5c
 801c1da:	4688      	mov	r8, r1
 801c1dc:	920e      	str	r2, [sp, #56]	@ 0x38
 801c1de:	2200      	movs	r2, #0
 801c1e0:	9212      	str	r2, [sp, #72]	@ 0x48
 801c1e2:	9005      	str	r0, [sp, #20]
 801c1e4:	f04f 0a00 	mov.w	sl, #0
 801c1e8:	f04f 0b00 	mov.w	fp, #0
 801c1ec:	460a      	mov	r2, r1
 801c1ee:	9211      	str	r2, [sp, #68]	@ 0x44
 801c1f0:	7811      	ldrb	r1, [r2, #0]
 801c1f2:	292b      	cmp	r1, #43	@ 0x2b
 801c1f4:	d04c      	beq.n	801c290 <_strtod_l+0xc0>
 801c1f6:	d839      	bhi.n	801c26c <_strtod_l+0x9c>
 801c1f8:	290d      	cmp	r1, #13
 801c1fa:	d833      	bhi.n	801c264 <_strtod_l+0x94>
 801c1fc:	2908      	cmp	r1, #8
 801c1fe:	d833      	bhi.n	801c268 <_strtod_l+0x98>
 801c200:	2900      	cmp	r1, #0
 801c202:	d03c      	beq.n	801c27e <_strtod_l+0xae>
 801c204:	2200      	movs	r2, #0
 801c206:	9208      	str	r2, [sp, #32]
 801c208:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801c20a:	782a      	ldrb	r2, [r5, #0]
 801c20c:	2a30      	cmp	r2, #48	@ 0x30
 801c20e:	f040 80b5 	bne.w	801c37c <_strtod_l+0x1ac>
 801c212:	786a      	ldrb	r2, [r5, #1]
 801c214:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801c218:	2a58      	cmp	r2, #88	@ 0x58
 801c21a:	d170      	bne.n	801c2fe <_strtod_l+0x12e>
 801c21c:	9302      	str	r3, [sp, #8]
 801c21e:	9b08      	ldr	r3, [sp, #32]
 801c220:	9301      	str	r3, [sp, #4]
 801c222:	ab12      	add	r3, sp, #72	@ 0x48
 801c224:	9300      	str	r3, [sp, #0]
 801c226:	4a8b      	ldr	r2, [pc, #556]	@ (801c454 <_strtod_l+0x284>)
 801c228:	9805      	ldr	r0, [sp, #20]
 801c22a:	ab13      	add	r3, sp, #76	@ 0x4c
 801c22c:	a911      	add	r1, sp, #68	@ 0x44
 801c22e:	f001 fd4f 	bl	801dcd0 <__gethex>
 801c232:	f010 060f 	ands.w	r6, r0, #15
 801c236:	4604      	mov	r4, r0
 801c238:	d005      	beq.n	801c246 <_strtod_l+0x76>
 801c23a:	2e06      	cmp	r6, #6
 801c23c:	d12a      	bne.n	801c294 <_strtod_l+0xc4>
 801c23e:	3501      	adds	r5, #1
 801c240:	2300      	movs	r3, #0
 801c242:	9511      	str	r5, [sp, #68]	@ 0x44
 801c244:	9308      	str	r3, [sp, #32]
 801c246:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c248:	2b00      	cmp	r3, #0
 801c24a:	f040 852f 	bne.w	801ccac <_strtod_l+0xadc>
 801c24e:	9b08      	ldr	r3, [sp, #32]
 801c250:	ec4b ab10 	vmov	d0, sl, fp
 801c254:	b1cb      	cbz	r3, 801c28a <_strtod_l+0xba>
 801c256:	eeb1 0b40 	vneg.f64	d0, d0
 801c25a:	b017      	add	sp, #92	@ 0x5c
 801c25c:	ecbd 8b0a 	vpop	{d8-d12}
 801c260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c264:	2920      	cmp	r1, #32
 801c266:	d1cd      	bne.n	801c204 <_strtod_l+0x34>
 801c268:	3201      	adds	r2, #1
 801c26a:	e7c0      	b.n	801c1ee <_strtod_l+0x1e>
 801c26c:	292d      	cmp	r1, #45	@ 0x2d
 801c26e:	d1c9      	bne.n	801c204 <_strtod_l+0x34>
 801c270:	2101      	movs	r1, #1
 801c272:	9108      	str	r1, [sp, #32]
 801c274:	1c51      	adds	r1, r2, #1
 801c276:	9111      	str	r1, [sp, #68]	@ 0x44
 801c278:	7852      	ldrb	r2, [r2, #1]
 801c27a:	2a00      	cmp	r2, #0
 801c27c:	d1c4      	bne.n	801c208 <_strtod_l+0x38>
 801c27e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c280:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 801c284:	2b00      	cmp	r3, #0
 801c286:	f040 850f 	bne.w	801cca8 <_strtod_l+0xad8>
 801c28a:	ec4b ab10 	vmov	d0, sl, fp
 801c28e:	e7e4      	b.n	801c25a <_strtod_l+0x8a>
 801c290:	2100      	movs	r1, #0
 801c292:	e7ee      	b.n	801c272 <_strtod_l+0xa2>
 801c294:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c296:	b13a      	cbz	r2, 801c2a8 <_strtod_l+0xd8>
 801c298:	2135      	movs	r1, #53	@ 0x35
 801c29a:	a814      	add	r0, sp, #80	@ 0x50
 801c29c:	f003 fa73 	bl	801f786 <__copybits>
 801c2a0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801c2a2:	9805      	ldr	r0, [sp, #20]
 801c2a4:	f002 fe44 	bl	801ef30 <_Bfree>
 801c2a8:	1e73      	subs	r3, r6, #1
 801c2aa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c2ac:	2b04      	cmp	r3, #4
 801c2ae:	d806      	bhi.n	801c2be <_strtod_l+0xee>
 801c2b0:	e8df f003 	tbb	[pc, r3]
 801c2b4:	201d0314 	.word	0x201d0314
 801c2b8:	14          	.byte	0x14
 801c2b9:	00          	.byte	0x00
 801c2ba:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 801c2be:	05e3      	lsls	r3, r4, #23
 801c2c0:	bf48      	it	mi
 801c2c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801c2c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801c2ca:	0d1b      	lsrs	r3, r3, #20
 801c2cc:	051b      	lsls	r3, r3, #20
 801c2ce:	2b00      	cmp	r3, #0
 801c2d0:	d1b9      	bne.n	801c246 <_strtod_l+0x76>
 801c2d2:	f000 fe17 	bl	801cf04 <__errno>
 801c2d6:	2322      	movs	r3, #34	@ 0x22
 801c2d8:	6003      	str	r3, [r0, #0]
 801c2da:	e7b4      	b.n	801c246 <_strtod_l+0x76>
 801c2dc:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 801c2e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801c2e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801c2e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801c2ec:	e7e7      	b.n	801c2be <_strtod_l+0xee>
 801c2ee:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 801c45c <_strtod_l+0x28c>
 801c2f2:	e7e4      	b.n	801c2be <_strtod_l+0xee>
 801c2f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 801c2f8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801c2fc:	e7df      	b.n	801c2be <_strtod_l+0xee>
 801c2fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c300:	1c5a      	adds	r2, r3, #1
 801c302:	9211      	str	r2, [sp, #68]	@ 0x44
 801c304:	785b      	ldrb	r3, [r3, #1]
 801c306:	2b30      	cmp	r3, #48	@ 0x30
 801c308:	d0f9      	beq.n	801c2fe <_strtod_l+0x12e>
 801c30a:	2b00      	cmp	r3, #0
 801c30c:	d09b      	beq.n	801c246 <_strtod_l+0x76>
 801c30e:	2301      	movs	r3, #1
 801c310:	2600      	movs	r6, #0
 801c312:	9307      	str	r3, [sp, #28]
 801c314:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c316:	930a      	str	r3, [sp, #40]	@ 0x28
 801c318:	46b1      	mov	r9, r6
 801c31a:	4635      	mov	r5, r6
 801c31c:	220a      	movs	r2, #10
 801c31e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801c320:	7804      	ldrb	r4, [r0, #0]
 801c322:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801c326:	b2d9      	uxtb	r1, r3
 801c328:	2909      	cmp	r1, #9
 801c32a:	d929      	bls.n	801c380 <_strtod_l+0x1b0>
 801c32c:	494a      	ldr	r1, [pc, #296]	@ (801c458 <_strtod_l+0x288>)
 801c32e:	2201      	movs	r2, #1
 801c330:	f000 fd84 	bl	801ce3c <strncmp>
 801c334:	b378      	cbz	r0, 801c396 <_strtod_l+0x1c6>
 801c336:	2000      	movs	r0, #0
 801c338:	4622      	mov	r2, r4
 801c33a:	462b      	mov	r3, r5
 801c33c:	4607      	mov	r7, r0
 801c33e:	9006      	str	r0, [sp, #24]
 801c340:	2a65      	cmp	r2, #101	@ 0x65
 801c342:	d001      	beq.n	801c348 <_strtod_l+0x178>
 801c344:	2a45      	cmp	r2, #69	@ 0x45
 801c346:	d117      	bne.n	801c378 <_strtod_l+0x1a8>
 801c348:	b91b      	cbnz	r3, 801c352 <_strtod_l+0x182>
 801c34a:	9b07      	ldr	r3, [sp, #28]
 801c34c:	4303      	orrs	r3, r0
 801c34e:	d096      	beq.n	801c27e <_strtod_l+0xae>
 801c350:	2300      	movs	r3, #0
 801c352:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 801c356:	f108 0201 	add.w	r2, r8, #1
 801c35a:	9211      	str	r2, [sp, #68]	@ 0x44
 801c35c:	f898 2001 	ldrb.w	r2, [r8, #1]
 801c360:	2a2b      	cmp	r2, #43	@ 0x2b
 801c362:	d06b      	beq.n	801c43c <_strtod_l+0x26c>
 801c364:	2a2d      	cmp	r2, #45	@ 0x2d
 801c366:	d071      	beq.n	801c44c <_strtod_l+0x27c>
 801c368:	f04f 0e00 	mov.w	lr, #0
 801c36c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 801c370:	2c09      	cmp	r4, #9
 801c372:	d979      	bls.n	801c468 <_strtod_l+0x298>
 801c374:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 801c378:	2400      	movs	r4, #0
 801c37a:	e094      	b.n	801c4a6 <_strtod_l+0x2d6>
 801c37c:	2300      	movs	r3, #0
 801c37e:	e7c7      	b.n	801c310 <_strtod_l+0x140>
 801c380:	2d08      	cmp	r5, #8
 801c382:	f100 0001 	add.w	r0, r0, #1
 801c386:	bfd4      	ite	le
 801c388:	fb02 3909 	mlale	r9, r2, r9, r3
 801c38c:	fb02 3606 	mlagt	r6, r2, r6, r3
 801c390:	3501      	adds	r5, #1
 801c392:	9011      	str	r0, [sp, #68]	@ 0x44
 801c394:	e7c3      	b.n	801c31e <_strtod_l+0x14e>
 801c396:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c398:	1c5a      	adds	r2, r3, #1
 801c39a:	9211      	str	r2, [sp, #68]	@ 0x44
 801c39c:	785a      	ldrb	r2, [r3, #1]
 801c39e:	b375      	cbz	r5, 801c3fe <_strtod_l+0x22e>
 801c3a0:	4607      	mov	r7, r0
 801c3a2:	462b      	mov	r3, r5
 801c3a4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801c3a8:	2909      	cmp	r1, #9
 801c3aa:	d913      	bls.n	801c3d4 <_strtod_l+0x204>
 801c3ac:	2101      	movs	r1, #1
 801c3ae:	9106      	str	r1, [sp, #24]
 801c3b0:	e7c6      	b.n	801c340 <_strtod_l+0x170>
 801c3b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c3b4:	1c5a      	adds	r2, r3, #1
 801c3b6:	9211      	str	r2, [sp, #68]	@ 0x44
 801c3b8:	785a      	ldrb	r2, [r3, #1]
 801c3ba:	3001      	adds	r0, #1
 801c3bc:	2a30      	cmp	r2, #48	@ 0x30
 801c3be:	d0f8      	beq.n	801c3b2 <_strtod_l+0x1e2>
 801c3c0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801c3c4:	2b08      	cmp	r3, #8
 801c3c6:	f200 8476 	bhi.w	801ccb6 <_strtod_l+0xae6>
 801c3ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c3cc:	930a      	str	r3, [sp, #40]	@ 0x28
 801c3ce:	4607      	mov	r7, r0
 801c3d0:	2000      	movs	r0, #0
 801c3d2:	4603      	mov	r3, r0
 801c3d4:	3a30      	subs	r2, #48	@ 0x30
 801c3d6:	f100 0101 	add.w	r1, r0, #1
 801c3da:	d023      	beq.n	801c424 <_strtod_l+0x254>
 801c3dc:	440f      	add	r7, r1
 801c3de:	eb00 0c03 	add.w	ip, r0, r3
 801c3e2:	4619      	mov	r1, r3
 801c3e4:	240a      	movs	r4, #10
 801c3e6:	4561      	cmp	r1, ip
 801c3e8:	d10b      	bne.n	801c402 <_strtod_l+0x232>
 801c3ea:	1c5c      	adds	r4, r3, #1
 801c3ec:	4403      	add	r3, r0
 801c3ee:	2b08      	cmp	r3, #8
 801c3f0:	4404      	add	r4, r0
 801c3f2:	dc11      	bgt.n	801c418 <_strtod_l+0x248>
 801c3f4:	230a      	movs	r3, #10
 801c3f6:	fb03 2909 	mla	r9, r3, r9, r2
 801c3fa:	2100      	movs	r1, #0
 801c3fc:	e013      	b.n	801c426 <_strtod_l+0x256>
 801c3fe:	4628      	mov	r0, r5
 801c400:	e7dc      	b.n	801c3bc <_strtod_l+0x1ec>
 801c402:	2908      	cmp	r1, #8
 801c404:	f101 0101 	add.w	r1, r1, #1
 801c408:	dc02      	bgt.n	801c410 <_strtod_l+0x240>
 801c40a:	fb04 f909 	mul.w	r9, r4, r9
 801c40e:	e7ea      	b.n	801c3e6 <_strtod_l+0x216>
 801c410:	2910      	cmp	r1, #16
 801c412:	bfd8      	it	le
 801c414:	4366      	mulle	r6, r4
 801c416:	e7e6      	b.n	801c3e6 <_strtod_l+0x216>
 801c418:	2b0f      	cmp	r3, #15
 801c41a:	dcee      	bgt.n	801c3fa <_strtod_l+0x22a>
 801c41c:	230a      	movs	r3, #10
 801c41e:	fb03 2606 	mla	r6, r3, r6, r2
 801c422:	e7ea      	b.n	801c3fa <_strtod_l+0x22a>
 801c424:	461c      	mov	r4, r3
 801c426:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c428:	1c5a      	adds	r2, r3, #1
 801c42a:	9211      	str	r2, [sp, #68]	@ 0x44
 801c42c:	785a      	ldrb	r2, [r3, #1]
 801c42e:	4608      	mov	r0, r1
 801c430:	4623      	mov	r3, r4
 801c432:	e7b7      	b.n	801c3a4 <_strtod_l+0x1d4>
 801c434:	2301      	movs	r3, #1
 801c436:	2700      	movs	r7, #0
 801c438:	9306      	str	r3, [sp, #24]
 801c43a:	e786      	b.n	801c34a <_strtod_l+0x17a>
 801c43c:	f04f 0e00 	mov.w	lr, #0
 801c440:	f108 0202 	add.w	r2, r8, #2
 801c444:	9211      	str	r2, [sp, #68]	@ 0x44
 801c446:	f898 2002 	ldrb.w	r2, [r8, #2]
 801c44a:	e78f      	b.n	801c36c <_strtod_l+0x19c>
 801c44c:	f04f 0e01 	mov.w	lr, #1
 801c450:	e7f6      	b.n	801c440 <_strtod_l+0x270>
 801c452:	bf00      	nop
 801c454:	08020838 	.word	0x08020838
 801c458:	0802081f 	.word	0x0802081f
 801c45c:	7ff00000 	.word	0x7ff00000
 801c460:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c462:	1c54      	adds	r4, r2, #1
 801c464:	9411      	str	r4, [sp, #68]	@ 0x44
 801c466:	7852      	ldrb	r2, [r2, #1]
 801c468:	2a30      	cmp	r2, #48	@ 0x30
 801c46a:	d0f9      	beq.n	801c460 <_strtod_l+0x290>
 801c46c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 801c470:	2c08      	cmp	r4, #8
 801c472:	d881      	bhi.n	801c378 <_strtod_l+0x1a8>
 801c474:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 801c478:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c47a:	9209      	str	r2, [sp, #36]	@ 0x24
 801c47c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c47e:	1c51      	adds	r1, r2, #1
 801c480:	9111      	str	r1, [sp, #68]	@ 0x44
 801c482:	7852      	ldrb	r2, [r2, #1]
 801c484:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 801c488:	2c09      	cmp	r4, #9
 801c48a:	d938      	bls.n	801c4fe <_strtod_l+0x32e>
 801c48c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801c48e:	1b0c      	subs	r4, r1, r4
 801c490:	2c08      	cmp	r4, #8
 801c492:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 801c496:	dc02      	bgt.n	801c49e <_strtod_l+0x2ce>
 801c498:	4564      	cmp	r4, ip
 801c49a:	bfa8      	it	ge
 801c49c:	4664      	movge	r4, ip
 801c49e:	f1be 0f00 	cmp.w	lr, #0
 801c4a2:	d000      	beq.n	801c4a6 <_strtod_l+0x2d6>
 801c4a4:	4264      	negs	r4, r4
 801c4a6:	2b00      	cmp	r3, #0
 801c4a8:	d14e      	bne.n	801c548 <_strtod_l+0x378>
 801c4aa:	9b07      	ldr	r3, [sp, #28]
 801c4ac:	4318      	orrs	r0, r3
 801c4ae:	f47f aeca 	bne.w	801c246 <_strtod_l+0x76>
 801c4b2:	9b06      	ldr	r3, [sp, #24]
 801c4b4:	2b00      	cmp	r3, #0
 801c4b6:	f47f aee2 	bne.w	801c27e <_strtod_l+0xae>
 801c4ba:	2a69      	cmp	r2, #105	@ 0x69
 801c4bc:	d027      	beq.n	801c50e <_strtod_l+0x33e>
 801c4be:	dc24      	bgt.n	801c50a <_strtod_l+0x33a>
 801c4c0:	2a49      	cmp	r2, #73	@ 0x49
 801c4c2:	d024      	beq.n	801c50e <_strtod_l+0x33e>
 801c4c4:	2a4e      	cmp	r2, #78	@ 0x4e
 801c4c6:	f47f aeda 	bne.w	801c27e <_strtod_l+0xae>
 801c4ca:	4997      	ldr	r1, [pc, #604]	@ (801c728 <_strtod_l+0x558>)
 801c4cc:	a811      	add	r0, sp, #68	@ 0x44
 801c4ce:	f001 fe21 	bl	801e114 <__match>
 801c4d2:	2800      	cmp	r0, #0
 801c4d4:	f43f aed3 	beq.w	801c27e <_strtod_l+0xae>
 801c4d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c4da:	781b      	ldrb	r3, [r3, #0]
 801c4dc:	2b28      	cmp	r3, #40	@ 0x28
 801c4de:	d12d      	bne.n	801c53c <_strtod_l+0x36c>
 801c4e0:	4992      	ldr	r1, [pc, #584]	@ (801c72c <_strtod_l+0x55c>)
 801c4e2:	aa14      	add	r2, sp, #80	@ 0x50
 801c4e4:	a811      	add	r0, sp, #68	@ 0x44
 801c4e6:	f001 fe29 	bl	801e13c <__hexnan>
 801c4ea:	2805      	cmp	r0, #5
 801c4ec:	d126      	bne.n	801c53c <_strtod_l+0x36c>
 801c4ee:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801c4f0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 801c4f4:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801c4f8:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801c4fc:	e6a3      	b.n	801c246 <_strtod_l+0x76>
 801c4fe:	240a      	movs	r4, #10
 801c500:	fb04 2c0c 	mla	ip, r4, ip, r2
 801c504:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 801c508:	e7b8      	b.n	801c47c <_strtod_l+0x2ac>
 801c50a:	2a6e      	cmp	r2, #110	@ 0x6e
 801c50c:	e7db      	b.n	801c4c6 <_strtod_l+0x2f6>
 801c50e:	4988      	ldr	r1, [pc, #544]	@ (801c730 <_strtod_l+0x560>)
 801c510:	a811      	add	r0, sp, #68	@ 0x44
 801c512:	f001 fdff 	bl	801e114 <__match>
 801c516:	2800      	cmp	r0, #0
 801c518:	f43f aeb1 	beq.w	801c27e <_strtod_l+0xae>
 801c51c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c51e:	4985      	ldr	r1, [pc, #532]	@ (801c734 <_strtod_l+0x564>)
 801c520:	3b01      	subs	r3, #1
 801c522:	a811      	add	r0, sp, #68	@ 0x44
 801c524:	9311      	str	r3, [sp, #68]	@ 0x44
 801c526:	f001 fdf5 	bl	801e114 <__match>
 801c52a:	b910      	cbnz	r0, 801c532 <_strtod_l+0x362>
 801c52c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c52e:	3301      	adds	r3, #1
 801c530:	9311      	str	r3, [sp, #68]	@ 0x44
 801c532:	f8df b214 	ldr.w	fp, [pc, #532]	@ 801c748 <_strtod_l+0x578>
 801c536:	f04f 0a00 	mov.w	sl, #0
 801c53a:	e684      	b.n	801c246 <_strtod_l+0x76>
 801c53c:	487e      	ldr	r0, [pc, #504]	@ (801c738 <_strtod_l+0x568>)
 801c53e:	f000 fd27 	bl	801cf90 <nan>
 801c542:	ec5b ab10 	vmov	sl, fp, d0
 801c546:	e67e      	b.n	801c246 <_strtod_l+0x76>
 801c548:	ee07 9a90 	vmov	s15, r9
 801c54c:	1be2      	subs	r2, r4, r7
 801c54e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801c552:	2d00      	cmp	r5, #0
 801c554:	bf08      	it	eq
 801c556:	461d      	moveq	r5, r3
 801c558:	2b10      	cmp	r3, #16
 801c55a:	9209      	str	r2, [sp, #36]	@ 0x24
 801c55c:	461a      	mov	r2, r3
 801c55e:	bfa8      	it	ge
 801c560:	2210      	movge	r2, #16
 801c562:	2b09      	cmp	r3, #9
 801c564:	ec5b ab17 	vmov	sl, fp, d7
 801c568:	dc15      	bgt.n	801c596 <_strtod_l+0x3c6>
 801c56a:	1be1      	subs	r1, r4, r7
 801c56c:	2900      	cmp	r1, #0
 801c56e:	f43f ae6a 	beq.w	801c246 <_strtod_l+0x76>
 801c572:	eba4 0107 	sub.w	r1, r4, r7
 801c576:	dd72      	ble.n	801c65e <_strtod_l+0x48e>
 801c578:	2916      	cmp	r1, #22
 801c57a:	dc59      	bgt.n	801c630 <_strtod_l+0x460>
 801c57c:	4b6f      	ldr	r3, [pc, #444]	@ (801c73c <_strtod_l+0x56c>)
 801c57e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c580:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c584:	ed93 7b00 	vldr	d7, [r3]
 801c588:	ec4b ab16 	vmov	d6, sl, fp
 801c58c:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c590:	ec5b ab17 	vmov	sl, fp, d7
 801c594:	e657      	b.n	801c246 <_strtod_l+0x76>
 801c596:	4969      	ldr	r1, [pc, #420]	@ (801c73c <_strtod_l+0x56c>)
 801c598:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801c59c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 801c5a0:	ee06 6a90 	vmov	s13, r6
 801c5a4:	2b0f      	cmp	r3, #15
 801c5a6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801c5aa:	eea7 6b05 	vfma.f64	d6, d7, d5
 801c5ae:	ec5b ab16 	vmov	sl, fp, d6
 801c5b2:	ddda      	ble.n	801c56a <_strtod_l+0x39a>
 801c5b4:	1a9a      	subs	r2, r3, r2
 801c5b6:	1be1      	subs	r1, r4, r7
 801c5b8:	440a      	add	r2, r1
 801c5ba:	2a00      	cmp	r2, #0
 801c5bc:	f340 8094 	ble.w	801c6e8 <_strtod_l+0x518>
 801c5c0:	f012 000f 	ands.w	r0, r2, #15
 801c5c4:	d00a      	beq.n	801c5dc <_strtod_l+0x40c>
 801c5c6:	495d      	ldr	r1, [pc, #372]	@ (801c73c <_strtod_l+0x56c>)
 801c5c8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801c5cc:	ed91 7b00 	vldr	d7, [r1]
 801c5d0:	ec4b ab16 	vmov	d6, sl, fp
 801c5d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c5d8:	ec5b ab17 	vmov	sl, fp, d7
 801c5dc:	f032 020f 	bics.w	r2, r2, #15
 801c5e0:	d073      	beq.n	801c6ca <_strtod_l+0x4fa>
 801c5e2:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 801c5e6:	dd47      	ble.n	801c678 <_strtod_l+0x4a8>
 801c5e8:	2400      	movs	r4, #0
 801c5ea:	4625      	mov	r5, r4
 801c5ec:	9407      	str	r4, [sp, #28]
 801c5ee:	4626      	mov	r6, r4
 801c5f0:	9a05      	ldr	r2, [sp, #20]
 801c5f2:	f8df b154 	ldr.w	fp, [pc, #340]	@ 801c748 <_strtod_l+0x578>
 801c5f6:	2322      	movs	r3, #34	@ 0x22
 801c5f8:	6013      	str	r3, [r2, #0]
 801c5fa:	f04f 0a00 	mov.w	sl, #0
 801c5fe:	9b07      	ldr	r3, [sp, #28]
 801c600:	2b00      	cmp	r3, #0
 801c602:	f43f ae20 	beq.w	801c246 <_strtod_l+0x76>
 801c606:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801c608:	9805      	ldr	r0, [sp, #20]
 801c60a:	f002 fc91 	bl	801ef30 <_Bfree>
 801c60e:	9805      	ldr	r0, [sp, #20]
 801c610:	4631      	mov	r1, r6
 801c612:	f002 fc8d 	bl	801ef30 <_Bfree>
 801c616:	9805      	ldr	r0, [sp, #20]
 801c618:	4629      	mov	r1, r5
 801c61a:	f002 fc89 	bl	801ef30 <_Bfree>
 801c61e:	9907      	ldr	r1, [sp, #28]
 801c620:	9805      	ldr	r0, [sp, #20]
 801c622:	f002 fc85 	bl	801ef30 <_Bfree>
 801c626:	9805      	ldr	r0, [sp, #20]
 801c628:	4621      	mov	r1, r4
 801c62a:	f002 fc81 	bl	801ef30 <_Bfree>
 801c62e:	e60a      	b.n	801c246 <_strtod_l+0x76>
 801c630:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 801c634:	1be0      	subs	r0, r4, r7
 801c636:	4281      	cmp	r1, r0
 801c638:	dbbc      	blt.n	801c5b4 <_strtod_l+0x3e4>
 801c63a:	4a40      	ldr	r2, [pc, #256]	@ (801c73c <_strtod_l+0x56c>)
 801c63c:	f1c3 030f 	rsb	r3, r3, #15
 801c640:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801c644:	ed91 7b00 	vldr	d7, [r1]
 801c648:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c64a:	ec4b ab16 	vmov	d6, sl, fp
 801c64e:	1acb      	subs	r3, r1, r3
 801c650:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801c654:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c658:	ed92 6b00 	vldr	d6, [r2]
 801c65c:	e796      	b.n	801c58c <_strtod_l+0x3bc>
 801c65e:	3116      	adds	r1, #22
 801c660:	dba8      	blt.n	801c5b4 <_strtod_l+0x3e4>
 801c662:	4b36      	ldr	r3, [pc, #216]	@ (801c73c <_strtod_l+0x56c>)
 801c664:	1b3c      	subs	r4, r7, r4
 801c666:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801c66a:	ed94 7b00 	vldr	d7, [r4]
 801c66e:	ec4b ab16 	vmov	d6, sl, fp
 801c672:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801c676:	e78b      	b.n	801c590 <_strtod_l+0x3c0>
 801c678:	2000      	movs	r0, #0
 801c67a:	ec4b ab17 	vmov	d7, sl, fp
 801c67e:	4e30      	ldr	r6, [pc, #192]	@ (801c740 <_strtod_l+0x570>)
 801c680:	1112      	asrs	r2, r2, #4
 801c682:	4601      	mov	r1, r0
 801c684:	2a01      	cmp	r2, #1
 801c686:	dc23      	bgt.n	801c6d0 <_strtod_l+0x500>
 801c688:	b108      	cbz	r0, 801c68e <_strtod_l+0x4be>
 801c68a:	ec5b ab17 	vmov	sl, fp, d7
 801c68e:	4a2c      	ldr	r2, [pc, #176]	@ (801c740 <_strtod_l+0x570>)
 801c690:	482c      	ldr	r0, [pc, #176]	@ (801c744 <_strtod_l+0x574>)
 801c692:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801c696:	ed92 7b00 	vldr	d7, [r2]
 801c69a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801c69e:	ec4b ab16 	vmov	d6, sl, fp
 801c6a2:	4a29      	ldr	r2, [pc, #164]	@ (801c748 <_strtod_l+0x578>)
 801c6a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c6a8:	ee17 1a90 	vmov	r1, s15
 801c6ac:	400a      	ands	r2, r1
 801c6ae:	4282      	cmp	r2, r0
 801c6b0:	ec5b ab17 	vmov	sl, fp, d7
 801c6b4:	d898      	bhi.n	801c5e8 <_strtod_l+0x418>
 801c6b6:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 801c6ba:	4282      	cmp	r2, r0
 801c6bc:	bf86      	itte	hi
 801c6be:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 801c74c <_strtod_l+0x57c>
 801c6c2:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 801c6c6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 801c6ca:	2200      	movs	r2, #0
 801c6cc:	9206      	str	r2, [sp, #24]
 801c6ce:	e076      	b.n	801c7be <_strtod_l+0x5ee>
 801c6d0:	f012 0f01 	tst.w	r2, #1
 801c6d4:	d004      	beq.n	801c6e0 <_strtod_l+0x510>
 801c6d6:	ed96 6b00 	vldr	d6, [r6]
 801c6da:	2001      	movs	r0, #1
 801c6dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c6e0:	3101      	adds	r1, #1
 801c6e2:	1052      	asrs	r2, r2, #1
 801c6e4:	3608      	adds	r6, #8
 801c6e6:	e7cd      	b.n	801c684 <_strtod_l+0x4b4>
 801c6e8:	d0ef      	beq.n	801c6ca <_strtod_l+0x4fa>
 801c6ea:	4252      	negs	r2, r2
 801c6ec:	f012 000f 	ands.w	r0, r2, #15
 801c6f0:	d00a      	beq.n	801c708 <_strtod_l+0x538>
 801c6f2:	4912      	ldr	r1, [pc, #72]	@ (801c73c <_strtod_l+0x56c>)
 801c6f4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801c6f8:	ed91 7b00 	vldr	d7, [r1]
 801c6fc:	ec4b ab16 	vmov	d6, sl, fp
 801c700:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801c704:	ec5b ab17 	vmov	sl, fp, d7
 801c708:	1112      	asrs	r2, r2, #4
 801c70a:	d0de      	beq.n	801c6ca <_strtod_l+0x4fa>
 801c70c:	2a1f      	cmp	r2, #31
 801c70e:	dd1f      	ble.n	801c750 <_strtod_l+0x580>
 801c710:	2400      	movs	r4, #0
 801c712:	4625      	mov	r5, r4
 801c714:	9407      	str	r4, [sp, #28]
 801c716:	4626      	mov	r6, r4
 801c718:	9a05      	ldr	r2, [sp, #20]
 801c71a:	2322      	movs	r3, #34	@ 0x22
 801c71c:	f04f 0a00 	mov.w	sl, #0
 801c720:	f04f 0b00 	mov.w	fp, #0
 801c724:	6013      	str	r3, [r2, #0]
 801c726:	e76a      	b.n	801c5fe <_strtod_l+0x42e>
 801c728:	080207f5 	.word	0x080207f5
 801c72c:	08020824 	.word	0x08020824
 801c730:	080207ed 	.word	0x080207ed
 801c734:	08020984 	.word	0x08020984
 801c738:	08020c2b 	.word	0x08020c2b
 801c73c:	08020b28 	.word	0x08020b28
 801c740:	08020b00 	.word	0x08020b00
 801c744:	7ca00000 	.word	0x7ca00000
 801c748:	7ff00000 	.word	0x7ff00000
 801c74c:	7fefffff 	.word	0x7fefffff
 801c750:	f012 0110 	ands.w	r1, r2, #16
 801c754:	bf18      	it	ne
 801c756:	216a      	movne	r1, #106	@ 0x6a
 801c758:	9106      	str	r1, [sp, #24]
 801c75a:	ec4b ab17 	vmov	d7, sl, fp
 801c75e:	49b0      	ldr	r1, [pc, #704]	@ (801ca20 <_strtod_l+0x850>)
 801c760:	2000      	movs	r0, #0
 801c762:	07d6      	lsls	r6, r2, #31
 801c764:	d504      	bpl.n	801c770 <_strtod_l+0x5a0>
 801c766:	ed91 6b00 	vldr	d6, [r1]
 801c76a:	2001      	movs	r0, #1
 801c76c:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c770:	1052      	asrs	r2, r2, #1
 801c772:	f101 0108 	add.w	r1, r1, #8
 801c776:	d1f4      	bne.n	801c762 <_strtod_l+0x592>
 801c778:	b108      	cbz	r0, 801c77e <_strtod_l+0x5ae>
 801c77a:	ec5b ab17 	vmov	sl, fp, d7
 801c77e:	9a06      	ldr	r2, [sp, #24]
 801c780:	b1b2      	cbz	r2, 801c7b0 <_strtod_l+0x5e0>
 801c782:	f3cb 510a 	ubfx	r1, fp, #20, #11
 801c786:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 801c78a:	2a00      	cmp	r2, #0
 801c78c:	4658      	mov	r0, fp
 801c78e:	dd0f      	ble.n	801c7b0 <_strtod_l+0x5e0>
 801c790:	2a1f      	cmp	r2, #31
 801c792:	dd55      	ble.n	801c840 <_strtod_l+0x670>
 801c794:	2a34      	cmp	r2, #52	@ 0x34
 801c796:	bfde      	ittt	le
 801c798:	f04f 32ff 	movle.w	r2, #4294967295	@ 0xffffffff
 801c79c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 801c7a0:	408a      	lslle	r2, r1
 801c7a2:	f04f 0a00 	mov.w	sl, #0
 801c7a6:	bfcc      	ite	gt
 801c7a8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801c7ac:	ea02 0b00 	andle.w	fp, r2, r0
 801c7b0:	ec4b ab17 	vmov	d7, sl, fp
 801c7b4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c7b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7bc:	d0a8      	beq.n	801c710 <_strtod_l+0x540>
 801c7be:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c7c0:	9805      	ldr	r0, [sp, #20]
 801c7c2:	f8cd 9000 	str.w	r9, [sp]
 801c7c6:	462a      	mov	r2, r5
 801c7c8:	f002 fc1a 	bl	801f000 <__s2b>
 801c7cc:	9007      	str	r0, [sp, #28]
 801c7ce:	2800      	cmp	r0, #0
 801c7d0:	f43f af0a 	beq.w	801c5e8 <_strtod_l+0x418>
 801c7d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c7d6:	1b3f      	subs	r7, r7, r4
 801c7d8:	2b00      	cmp	r3, #0
 801c7da:	bfb4      	ite	lt
 801c7dc:	463b      	movlt	r3, r7
 801c7de:	2300      	movge	r3, #0
 801c7e0:	930a      	str	r3, [sp, #40]	@ 0x28
 801c7e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c7e4:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 801ca10 <_strtod_l+0x840>
 801c7e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c7ec:	2400      	movs	r4, #0
 801c7ee:	930d      	str	r3, [sp, #52]	@ 0x34
 801c7f0:	4625      	mov	r5, r4
 801c7f2:	9b07      	ldr	r3, [sp, #28]
 801c7f4:	9805      	ldr	r0, [sp, #20]
 801c7f6:	6859      	ldr	r1, [r3, #4]
 801c7f8:	f002 fb5a 	bl	801eeb0 <_Balloc>
 801c7fc:	4606      	mov	r6, r0
 801c7fe:	2800      	cmp	r0, #0
 801c800:	f43f aef6 	beq.w	801c5f0 <_strtod_l+0x420>
 801c804:	9b07      	ldr	r3, [sp, #28]
 801c806:	691a      	ldr	r2, [r3, #16]
 801c808:	ec4b ab19 	vmov	d9, sl, fp
 801c80c:	3202      	adds	r2, #2
 801c80e:	f103 010c 	add.w	r1, r3, #12
 801c812:	0092      	lsls	r2, r2, #2
 801c814:	300c      	adds	r0, #12
 801c816:	f000 fba2 	bl	801cf5e <memcpy>
 801c81a:	eeb0 0b49 	vmov.f64	d0, d9
 801c81e:	9805      	ldr	r0, [sp, #20]
 801c820:	aa14      	add	r2, sp, #80	@ 0x50
 801c822:	a913      	add	r1, sp, #76	@ 0x4c
 801c824:	f002 ff28 	bl	801f678 <__d2b>
 801c828:	9012      	str	r0, [sp, #72]	@ 0x48
 801c82a:	2800      	cmp	r0, #0
 801c82c:	f43f aee0 	beq.w	801c5f0 <_strtod_l+0x420>
 801c830:	9805      	ldr	r0, [sp, #20]
 801c832:	2101      	movs	r1, #1
 801c834:	f002 fc7a 	bl	801f12c <__i2b>
 801c838:	4605      	mov	r5, r0
 801c83a:	b940      	cbnz	r0, 801c84e <_strtod_l+0x67e>
 801c83c:	2500      	movs	r5, #0
 801c83e:	e6d7      	b.n	801c5f0 <_strtod_l+0x420>
 801c840:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801c844:	fa01 f202 	lsl.w	r2, r1, r2
 801c848:	ea02 0a0a 	and.w	sl, r2, sl
 801c84c:	e7b0      	b.n	801c7b0 <_strtod_l+0x5e0>
 801c84e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 801c850:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c852:	2f00      	cmp	r7, #0
 801c854:	bfab      	itete	ge
 801c856:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 801c858:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 801c85a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 801c85e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 801c862:	bfac      	ite	ge
 801c864:	eb07 0903 	addge.w	r9, r7, r3
 801c868:	eba3 0807 	sublt.w	r8, r3, r7
 801c86c:	9b06      	ldr	r3, [sp, #24]
 801c86e:	1aff      	subs	r7, r7, r3
 801c870:	4417      	add	r7, r2
 801c872:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 801c876:	4a6b      	ldr	r2, [pc, #428]	@ (801ca24 <_strtod_l+0x854>)
 801c878:	3f01      	subs	r7, #1
 801c87a:	4297      	cmp	r7, r2
 801c87c:	da51      	bge.n	801c922 <_strtod_l+0x752>
 801c87e:	1bd1      	subs	r1, r2, r7
 801c880:	291f      	cmp	r1, #31
 801c882:	eba3 0301 	sub.w	r3, r3, r1
 801c886:	f04f 0201 	mov.w	r2, #1
 801c88a:	dc3e      	bgt.n	801c90a <_strtod_l+0x73a>
 801c88c:	408a      	lsls	r2, r1
 801c88e:	920c      	str	r2, [sp, #48]	@ 0x30
 801c890:	2200      	movs	r2, #0
 801c892:	920b      	str	r2, [sp, #44]	@ 0x2c
 801c894:	eb09 0703 	add.w	r7, r9, r3
 801c898:	4498      	add	r8, r3
 801c89a:	9b06      	ldr	r3, [sp, #24]
 801c89c:	45b9      	cmp	r9, r7
 801c89e:	4498      	add	r8, r3
 801c8a0:	464b      	mov	r3, r9
 801c8a2:	bfa8      	it	ge
 801c8a4:	463b      	movge	r3, r7
 801c8a6:	4543      	cmp	r3, r8
 801c8a8:	bfa8      	it	ge
 801c8aa:	4643      	movge	r3, r8
 801c8ac:	2b00      	cmp	r3, #0
 801c8ae:	bfc2      	ittt	gt
 801c8b0:	1aff      	subgt	r7, r7, r3
 801c8b2:	eba8 0803 	subgt.w	r8, r8, r3
 801c8b6:	eba9 0903 	subgt.w	r9, r9, r3
 801c8ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c8bc:	2b00      	cmp	r3, #0
 801c8be:	dd16      	ble.n	801c8ee <_strtod_l+0x71e>
 801c8c0:	4629      	mov	r1, r5
 801c8c2:	9805      	ldr	r0, [sp, #20]
 801c8c4:	461a      	mov	r2, r3
 801c8c6:	f002 fcf1 	bl	801f2ac <__pow5mult>
 801c8ca:	4605      	mov	r5, r0
 801c8cc:	2800      	cmp	r0, #0
 801c8ce:	d0b5      	beq.n	801c83c <_strtod_l+0x66c>
 801c8d0:	4601      	mov	r1, r0
 801c8d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c8d4:	9805      	ldr	r0, [sp, #20]
 801c8d6:	f002 fc3f 	bl	801f158 <__multiply>
 801c8da:	900f      	str	r0, [sp, #60]	@ 0x3c
 801c8dc:	2800      	cmp	r0, #0
 801c8de:	f43f ae87 	beq.w	801c5f0 <_strtod_l+0x420>
 801c8e2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801c8e4:	9805      	ldr	r0, [sp, #20]
 801c8e6:	f002 fb23 	bl	801ef30 <_Bfree>
 801c8ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c8ec:	9312      	str	r3, [sp, #72]	@ 0x48
 801c8ee:	2f00      	cmp	r7, #0
 801c8f0:	dc1b      	bgt.n	801c92a <_strtod_l+0x75a>
 801c8f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c8f4:	2b00      	cmp	r3, #0
 801c8f6:	dd21      	ble.n	801c93c <_strtod_l+0x76c>
 801c8f8:	4631      	mov	r1, r6
 801c8fa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c8fc:	9805      	ldr	r0, [sp, #20]
 801c8fe:	f002 fcd5 	bl	801f2ac <__pow5mult>
 801c902:	4606      	mov	r6, r0
 801c904:	b9d0      	cbnz	r0, 801c93c <_strtod_l+0x76c>
 801c906:	2600      	movs	r6, #0
 801c908:	e672      	b.n	801c5f0 <_strtod_l+0x420>
 801c90a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 801c90e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 801c912:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 801c916:	37e2      	adds	r7, #226	@ 0xe2
 801c918:	fa02 f107 	lsl.w	r1, r2, r7
 801c91c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c91e:	920c      	str	r2, [sp, #48]	@ 0x30
 801c920:	e7b8      	b.n	801c894 <_strtod_l+0x6c4>
 801c922:	2200      	movs	r2, #0
 801c924:	920b      	str	r2, [sp, #44]	@ 0x2c
 801c926:	2201      	movs	r2, #1
 801c928:	e7f9      	b.n	801c91e <_strtod_l+0x74e>
 801c92a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801c92c:	9805      	ldr	r0, [sp, #20]
 801c92e:	463a      	mov	r2, r7
 801c930:	f002 fd16 	bl	801f360 <__lshift>
 801c934:	9012      	str	r0, [sp, #72]	@ 0x48
 801c936:	2800      	cmp	r0, #0
 801c938:	d1db      	bne.n	801c8f2 <_strtod_l+0x722>
 801c93a:	e659      	b.n	801c5f0 <_strtod_l+0x420>
 801c93c:	f1b8 0f00 	cmp.w	r8, #0
 801c940:	dd07      	ble.n	801c952 <_strtod_l+0x782>
 801c942:	4631      	mov	r1, r6
 801c944:	9805      	ldr	r0, [sp, #20]
 801c946:	4642      	mov	r2, r8
 801c948:	f002 fd0a 	bl	801f360 <__lshift>
 801c94c:	4606      	mov	r6, r0
 801c94e:	2800      	cmp	r0, #0
 801c950:	d0d9      	beq.n	801c906 <_strtod_l+0x736>
 801c952:	f1b9 0f00 	cmp.w	r9, #0
 801c956:	dd08      	ble.n	801c96a <_strtod_l+0x79a>
 801c958:	4629      	mov	r1, r5
 801c95a:	9805      	ldr	r0, [sp, #20]
 801c95c:	464a      	mov	r2, r9
 801c95e:	f002 fcff 	bl	801f360 <__lshift>
 801c962:	4605      	mov	r5, r0
 801c964:	2800      	cmp	r0, #0
 801c966:	f43f ae43 	beq.w	801c5f0 <_strtod_l+0x420>
 801c96a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801c96c:	9805      	ldr	r0, [sp, #20]
 801c96e:	4632      	mov	r2, r6
 801c970:	f002 fd7e 	bl	801f470 <__mdiff>
 801c974:	4604      	mov	r4, r0
 801c976:	2800      	cmp	r0, #0
 801c978:	f43f ae3a 	beq.w	801c5f0 <_strtod_l+0x420>
 801c97c:	2300      	movs	r3, #0
 801c97e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 801c982:	60c3      	str	r3, [r0, #12]
 801c984:	4629      	mov	r1, r5
 801c986:	f002 fd57 	bl	801f438 <__mcmp>
 801c98a:	2800      	cmp	r0, #0
 801c98c:	da4e      	bge.n	801ca2c <_strtod_l+0x85c>
 801c98e:	ea58 080a 	orrs.w	r8, r8, sl
 801c992:	d174      	bne.n	801ca7e <_strtod_l+0x8ae>
 801c994:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c998:	2b00      	cmp	r3, #0
 801c99a:	d170      	bne.n	801ca7e <_strtod_l+0x8ae>
 801c99c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801c9a0:	0d1b      	lsrs	r3, r3, #20
 801c9a2:	051b      	lsls	r3, r3, #20
 801c9a4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801c9a8:	d969      	bls.n	801ca7e <_strtod_l+0x8ae>
 801c9aa:	6963      	ldr	r3, [r4, #20]
 801c9ac:	b913      	cbnz	r3, 801c9b4 <_strtod_l+0x7e4>
 801c9ae:	6923      	ldr	r3, [r4, #16]
 801c9b0:	2b01      	cmp	r3, #1
 801c9b2:	dd64      	ble.n	801ca7e <_strtod_l+0x8ae>
 801c9b4:	4621      	mov	r1, r4
 801c9b6:	2201      	movs	r2, #1
 801c9b8:	9805      	ldr	r0, [sp, #20]
 801c9ba:	f002 fcd1 	bl	801f360 <__lshift>
 801c9be:	4629      	mov	r1, r5
 801c9c0:	4604      	mov	r4, r0
 801c9c2:	f002 fd39 	bl	801f438 <__mcmp>
 801c9c6:	2800      	cmp	r0, #0
 801c9c8:	dd59      	ble.n	801ca7e <_strtod_l+0x8ae>
 801c9ca:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801c9ce:	9a06      	ldr	r2, [sp, #24]
 801c9d0:	0d1b      	lsrs	r3, r3, #20
 801c9d2:	051b      	lsls	r3, r3, #20
 801c9d4:	2a00      	cmp	r2, #0
 801c9d6:	d070      	beq.n	801caba <_strtod_l+0x8ea>
 801c9d8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801c9dc:	d86d      	bhi.n	801caba <_strtod_l+0x8ea>
 801c9de:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801c9e2:	f67f ae99 	bls.w	801c718 <_strtod_l+0x548>
 801c9e6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 801ca18 <_strtod_l+0x848>
 801c9ea:	ec4b ab16 	vmov	d6, sl, fp
 801c9ee:	4b0e      	ldr	r3, [pc, #56]	@ (801ca28 <_strtod_l+0x858>)
 801c9f0:	ee26 7b07 	vmul.f64	d7, d6, d7
 801c9f4:	ee17 2a90 	vmov	r2, s15
 801c9f8:	4013      	ands	r3, r2
 801c9fa:	ec5b ab17 	vmov	sl, fp, d7
 801c9fe:	2b00      	cmp	r3, #0
 801ca00:	f47f ae01 	bne.w	801c606 <_strtod_l+0x436>
 801ca04:	9a05      	ldr	r2, [sp, #20]
 801ca06:	2322      	movs	r3, #34	@ 0x22
 801ca08:	6013      	str	r3, [r2, #0]
 801ca0a:	e5fc      	b.n	801c606 <_strtod_l+0x436>
 801ca0c:	f3af 8000 	nop.w
 801ca10:	ffc00000 	.word	0xffc00000
 801ca14:	41dfffff 	.word	0x41dfffff
 801ca18:	00000000 	.word	0x00000000
 801ca1c:	39500000 	.word	0x39500000
 801ca20:	08020850 	.word	0x08020850
 801ca24:	fffffc02 	.word	0xfffffc02
 801ca28:	7ff00000 	.word	0x7ff00000
 801ca2c:	46d9      	mov	r9, fp
 801ca2e:	d15d      	bne.n	801caec <_strtod_l+0x91c>
 801ca30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ca34:	f1b8 0f00 	cmp.w	r8, #0
 801ca38:	d02a      	beq.n	801ca90 <_strtod_l+0x8c0>
 801ca3a:	4aab      	ldr	r2, [pc, #684]	@ (801cce8 <_strtod_l+0xb18>)
 801ca3c:	4293      	cmp	r3, r2
 801ca3e:	d12a      	bne.n	801ca96 <_strtod_l+0x8c6>
 801ca40:	9b06      	ldr	r3, [sp, #24]
 801ca42:	4652      	mov	r2, sl
 801ca44:	b1fb      	cbz	r3, 801ca86 <_strtod_l+0x8b6>
 801ca46:	4ba9      	ldr	r3, [pc, #676]	@ (801ccec <_strtod_l+0xb1c>)
 801ca48:	ea0b 0303 	and.w	r3, fp, r3
 801ca4c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801ca50:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801ca54:	d81a      	bhi.n	801ca8c <_strtod_l+0x8bc>
 801ca56:	0d1b      	lsrs	r3, r3, #20
 801ca58:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801ca5c:	fa01 f303 	lsl.w	r3, r1, r3
 801ca60:	429a      	cmp	r2, r3
 801ca62:	d118      	bne.n	801ca96 <_strtod_l+0x8c6>
 801ca64:	4ba2      	ldr	r3, [pc, #648]	@ (801ccf0 <_strtod_l+0xb20>)
 801ca66:	4599      	cmp	r9, r3
 801ca68:	d102      	bne.n	801ca70 <_strtod_l+0x8a0>
 801ca6a:	3201      	adds	r2, #1
 801ca6c:	f43f adc0 	beq.w	801c5f0 <_strtod_l+0x420>
 801ca70:	4b9e      	ldr	r3, [pc, #632]	@ (801ccec <_strtod_l+0xb1c>)
 801ca72:	ea09 0303 	and.w	r3, r9, r3
 801ca76:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 801ca7a:	f04f 0a00 	mov.w	sl, #0
 801ca7e:	9b06      	ldr	r3, [sp, #24]
 801ca80:	2b00      	cmp	r3, #0
 801ca82:	d1b0      	bne.n	801c9e6 <_strtod_l+0x816>
 801ca84:	e5bf      	b.n	801c606 <_strtod_l+0x436>
 801ca86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ca8a:	e7e9      	b.n	801ca60 <_strtod_l+0x890>
 801ca8c:	460b      	mov	r3, r1
 801ca8e:	e7e7      	b.n	801ca60 <_strtod_l+0x890>
 801ca90:	ea53 030a 	orrs.w	r3, r3, sl
 801ca94:	d099      	beq.n	801c9ca <_strtod_l+0x7fa>
 801ca96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ca98:	b1c3      	cbz	r3, 801cacc <_strtod_l+0x8fc>
 801ca9a:	ea13 0f09 	tst.w	r3, r9
 801ca9e:	d0ee      	beq.n	801ca7e <_strtod_l+0x8ae>
 801caa0:	9a06      	ldr	r2, [sp, #24]
 801caa2:	4650      	mov	r0, sl
 801caa4:	4659      	mov	r1, fp
 801caa6:	f1b8 0f00 	cmp.w	r8, #0
 801caaa:	d013      	beq.n	801cad4 <_strtod_l+0x904>
 801caac:	f7ff fb74 	bl	801c198 <sulp>
 801cab0:	ee39 7b00 	vadd.f64	d7, d9, d0
 801cab4:	ec5b ab17 	vmov	sl, fp, d7
 801cab8:	e7e1      	b.n	801ca7e <_strtod_l+0x8ae>
 801caba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801cabe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801cac2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801cac6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801caca:	e7d8      	b.n	801ca7e <_strtod_l+0x8ae>
 801cacc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cace:	ea13 0f0a 	tst.w	r3, sl
 801cad2:	e7e4      	b.n	801ca9e <_strtod_l+0x8ce>
 801cad4:	f7ff fb60 	bl	801c198 <sulp>
 801cad8:	ee39 0b40 	vsub.f64	d0, d9, d0
 801cadc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801cae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cae4:	ec5b ab10 	vmov	sl, fp, d0
 801cae8:	d1c9      	bne.n	801ca7e <_strtod_l+0x8ae>
 801caea:	e615      	b.n	801c718 <_strtod_l+0x548>
 801caec:	4629      	mov	r1, r5
 801caee:	4620      	mov	r0, r4
 801caf0:	f002 fe1a 	bl	801f728 <__ratio>
 801caf4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 801caf8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801cafc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb00:	d85d      	bhi.n	801cbbe <_strtod_l+0x9ee>
 801cb02:	f1b8 0f00 	cmp.w	r8, #0
 801cb06:	d164      	bne.n	801cbd2 <_strtod_l+0xa02>
 801cb08:	f1ba 0f00 	cmp.w	sl, #0
 801cb0c:	d14b      	bne.n	801cba6 <_strtod_l+0x9d6>
 801cb0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801cb12:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801cb16:	2b00      	cmp	r3, #0
 801cb18:	d160      	bne.n	801cbdc <_strtod_l+0xa0c>
 801cb1a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 801cb1e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801cb22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb26:	d401      	bmi.n	801cb2c <_strtod_l+0x95c>
 801cb28:	ee20 8b08 	vmul.f64	d8, d0, d8
 801cb2c:	eeb1 ab48 	vneg.f64	d10, d8
 801cb30:	486e      	ldr	r0, [pc, #440]	@ (801ccec <_strtod_l+0xb1c>)
 801cb32:	4970      	ldr	r1, [pc, #448]	@ (801ccf4 <_strtod_l+0xb24>)
 801cb34:	ea09 0700 	and.w	r7, r9, r0
 801cb38:	428f      	cmp	r7, r1
 801cb3a:	ec53 2b1a 	vmov	r2, r3, d10
 801cb3e:	d17d      	bne.n	801cc3c <_strtod_l+0xa6c>
 801cb40:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 801cb44:	ec4b ab1c 	vmov	d12, sl, fp
 801cb48:	eeb0 0b4c 	vmov.f64	d0, d12
 801cb4c:	f002 fd24 	bl	801f598 <__ulp>
 801cb50:	4866      	ldr	r0, [pc, #408]	@ (801ccec <_strtod_l+0xb1c>)
 801cb52:	eea0 cb0a 	vfma.f64	d12, d0, d10
 801cb56:	ee1c 3a90 	vmov	r3, s25
 801cb5a:	4a67      	ldr	r2, [pc, #412]	@ (801ccf8 <_strtod_l+0xb28>)
 801cb5c:	ea03 0100 	and.w	r1, r3, r0
 801cb60:	4291      	cmp	r1, r2
 801cb62:	ec5b ab1c 	vmov	sl, fp, d12
 801cb66:	d93c      	bls.n	801cbe2 <_strtod_l+0xa12>
 801cb68:	ee19 2a90 	vmov	r2, s19
 801cb6c:	4b60      	ldr	r3, [pc, #384]	@ (801ccf0 <_strtod_l+0xb20>)
 801cb6e:	429a      	cmp	r2, r3
 801cb70:	d104      	bne.n	801cb7c <_strtod_l+0x9ac>
 801cb72:	ee19 3a10 	vmov	r3, s18
 801cb76:	3301      	adds	r3, #1
 801cb78:	f43f ad3a 	beq.w	801c5f0 <_strtod_l+0x420>
 801cb7c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 801ccf0 <_strtod_l+0xb20>
 801cb80:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801cb84:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801cb86:	9805      	ldr	r0, [sp, #20]
 801cb88:	f002 f9d2 	bl	801ef30 <_Bfree>
 801cb8c:	9805      	ldr	r0, [sp, #20]
 801cb8e:	4631      	mov	r1, r6
 801cb90:	f002 f9ce 	bl	801ef30 <_Bfree>
 801cb94:	9805      	ldr	r0, [sp, #20]
 801cb96:	4629      	mov	r1, r5
 801cb98:	f002 f9ca 	bl	801ef30 <_Bfree>
 801cb9c:	9805      	ldr	r0, [sp, #20]
 801cb9e:	4621      	mov	r1, r4
 801cba0:	f002 f9c6 	bl	801ef30 <_Bfree>
 801cba4:	e625      	b.n	801c7f2 <_strtod_l+0x622>
 801cba6:	f1ba 0f01 	cmp.w	sl, #1
 801cbaa:	d103      	bne.n	801cbb4 <_strtod_l+0x9e4>
 801cbac:	f1bb 0f00 	cmp.w	fp, #0
 801cbb0:	f43f adb2 	beq.w	801c718 <_strtod_l+0x548>
 801cbb4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 801cbb8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801cbbc:	e7b8      	b.n	801cb30 <_strtod_l+0x960>
 801cbbe:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801cbc2:	ee20 8b08 	vmul.f64	d8, d0, d8
 801cbc6:	f1b8 0f00 	cmp.w	r8, #0
 801cbca:	d0af      	beq.n	801cb2c <_strtod_l+0x95c>
 801cbcc:	eeb0 ab48 	vmov.f64	d10, d8
 801cbd0:	e7ae      	b.n	801cb30 <_strtod_l+0x960>
 801cbd2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 801cbd6:	eeb0 8b4a 	vmov.f64	d8, d10
 801cbda:	e7a9      	b.n	801cb30 <_strtod_l+0x960>
 801cbdc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 801cbe0:	e7a6      	b.n	801cb30 <_strtod_l+0x960>
 801cbe2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801cbe6:	9b06      	ldr	r3, [sp, #24]
 801cbe8:	46d9      	mov	r9, fp
 801cbea:	2b00      	cmp	r3, #0
 801cbec:	d1ca      	bne.n	801cb84 <_strtod_l+0x9b4>
 801cbee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801cbf2:	0d1b      	lsrs	r3, r3, #20
 801cbf4:	051b      	lsls	r3, r3, #20
 801cbf6:	429f      	cmp	r7, r3
 801cbf8:	d1c4      	bne.n	801cb84 <_strtod_l+0x9b4>
 801cbfa:	ec51 0b18 	vmov	r0, r1, d8
 801cbfe:	f7e3 fdbd 	bl	800077c <__aeabi_d2lz>
 801cc02:	f7e3 fd75 	bl	80006f0 <__aeabi_l2d>
 801cc06:	f3cb 0913 	ubfx	r9, fp, #0, #20
 801cc0a:	ec41 0b17 	vmov	d7, r0, r1
 801cc0e:	ea49 090a 	orr.w	r9, r9, sl
 801cc12:	ea59 0908 	orrs.w	r9, r9, r8
 801cc16:	ee38 8b47 	vsub.f64	d8, d8, d7
 801cc1a:	d03c      	beq.n	801cc96 <_strtod_l+0xac6>
 801cc1c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 801ccd0 <_strtod_l+0xb00>
 801cc20:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801cc24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc28:	f53f aced 	bmi.w	801c606 <_strtod_l+0x436>
 801cc2c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 801ccd8 <_strtod_l+0xb08>
 801cc30:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801cc34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc38:	dda4      	ble.n	801cb84 <_strtod_l+0x9b4>
 801cc3a:	e4e4      	b.n	801c606 <_strtod_l+0x436>
 801cc3c:	9906      	ldr	r1, [sp, #24]
 801cc3e:	b1e1      	cbz	r1, 801cc7a <_strtod_l+0xaaa>
 801cc40:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 801cc44:	d819      	bhi.n	801cc7a <_strtod_l+0xaaa>
 801cc46:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801cc4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc4e:	d811      	bhi.n	801cc74 <_strtod_l+0xaa4>
 801cc50:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801cc54:	ee18 3a10 	vmov	r3, s16
 801cc58:	2b01      	cmp	r3, #1
 801cc5a:	bf38      	it	cc
 801cc5c:	2301      	movcc	r3, #1
 801cc5e:	ee08 3a10 	vmov	s16, r3
 801cc62:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801cc66:	f1b8 0f00 	cmp.w	r8, #0
 801cc6a:	d111      	bne.n	801cc90 <_strtod_l+0xac0>
 801cc6c:	eeb1 7b48 	vneg.f64	d7, d8
 801cc70:	ec53 2b17 	vmov	r2, r3, d7
 801cc74:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 801cc78:	1bcb      	subs	r3, r1, r7
 801cc7a:	eeb0 0b49 	vmov.f64	d0, d9
 801cc7e:	ec43 2b1a 	vmov	d10, r2, r3
 801cc82:	f002 fc89 	bl	801f598 <__ulp>
 801cc86:	eeaa 9b00 	vfma.f64	d9, d10, d0
 801cc8a:	ec5b ab19 	vmov	sl, fp, d9
 801cc8e:	e7aa      	b.n	801cbe6 <_strtod_l+0xa16>
 801cc90:	eeb0 7b48 	vmov.f64	d7, d8
 801cc94:	e7ec      	b.n	801cc70 <_strtod_l+0xaa0>
 801cc96:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 801cce0 <_strtod_l+0xb10>
 801cc9a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801cc9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cca2:	f57f af6f 	bpl.w	801cb84 <_strtod_l+0x9b4>
 801cca6:	e4ae      	b.n	801c606 <_strtod_l+0x436>
 801cca8:	2300      	movs	r3, #0
 801ccaa:	9308      	str	r3, [sp, #32]
 801ccac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ccae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ccb0:	6013      	str	r3, [r2, #0]
 801ccb2:	f7ff bacc 	b.w	801c24e <_strtod_l+0x7e>
 801ccb6:	2a65      	cmp	r2, #101	@ 0x65
 801ccb8:	f43f abbc 	beq.w	801c434 <_strtod_l+0x264>
 801ccbc:	2a45      	cmp	r2, #69	@ 0x45
 801ccbe:	f43f abb9 	beq.w	801c434 <_strtod_l+0x264>
 801ccc2:	2301      	movs	r3, #1
 801ccc4:	9306      	str	r3, [sp, #24]
 801ccc6:	f7ff bbf0 	b.w	801c4aa <_strtod_l+0x2da>
 801ccca:	bf00      	nop
 801cccc:	f3af 8000 	nop.w
 801ccd0:	94a03595 	.word	0x94a03595
 801ccd4:	3fdfffff 	.word	0x3fdfffff
 801ccd8:	35afe535 	.word	0x35afe535
 801ccdc:	3fe00000 	.word	0x3fe00000
 801cce0:	94a03595 	.word	0x94a03595
 801cce4:	3fcfffff 	.word	0x3fcfffff
 801cce8:	000fffff 	.word	0x000fffff
 801ccec:	7ff00000 	.word	0x7ff00000
 801ccf0:	7fefffff 	.word	0x7fefffff
 801ccf4:	7fe00000 	.word	0x7fe00000
 801ccf8:	7c9fffff 	.word	0x7c9fffff

0801ccfc <_strtod_r>:
 801ccfc:	4b01      	ldr	r3, [pc, #4]	@ (801cd04 <_strtod_r+0x8>)
 801ccfe:	f7ff ba67 	b.w	801c1d0 <_strtod_l>
 801cd02:	bf00      	nop
 801cd04:	2400020c 	.word	0x2400020c

0801cd08 <_strtol_l.constprop.0>:
 801cd08:	2b24      	cmp	r3, #36	@ 0x24
 801cd0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cd0e:	4686      	mov	lr, r0
 801cd10:	4690      	mov	r8, r2
 801cd12:	d801      	bhi.n	801cd18 <_strtol_l.constprop.0+0x10>
 801cd14:	2b01      	cmp	r3, #1
 801cd16:	d106      	bne.n	801cd26 <_strtol_l.constprop.0+0x1e>
 801cd18:	f000 f8f4 	bl	801cf04 <__errno>
 801cd1c:	2316      	movs	r3, #22
 801cd1e:	6003      	str	r3, [r0, #0]
 801cd20:	2000      	movs	r0, #0
 801cd22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cd26:	4834      	ldr	r0, [pc, #208]	@ (801cdf8 <_strtol_l.constprop.0+0xf0>)
 801cd28:	460d      	mov	r5, r1
 801cd2a:	462a      	mov	r2, r5
 801cd2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cd30:	5d06      	ldrb	r6, [r0, r4]
 801cd32:	f016 0608 	ands.w	r6, r6, #8
 801cd36:	d1f8      	bne.n	801cd2a <_strtol_l.constprop.0+0x22>
 801cd38:	2c2d      	cmp	r4, #45	@ 0x2d
 801cd3a:	d12d      	bne.n	801cd98 <_strtol_l.constprop.0+0x90>
 801cd3c:	782c      	ldrb	r4, [r5, #0]
 801cd3e:	2601      	movs	r6, #1
 801cd40:	1c95      	adds	r5, r2, #2
 801cd42:	f033 0210 	bics.w	r2, r3, #16
 801cd46:	d109      	bne.n	801cd5c <_strtol_l.constprop.0+0x54>
 801cd48:	2c30      	cmp	r4, #48	@ 0x30
 801cd4a:	d12a      	bne.n	801cda2 <_strtol_l.constprop.0+0x9a>
 801cd4c:	782a      	ldrb	r2, [r5, #0]
 801cd4e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801cd52:	2a58      	cmp	r2, #88	@ 0x58
 801cd54:	d125      	bne.n	801cda2 <_strtol_l.constprop.0+0x9a>
 801cd56:	786c      	ldrb	r4, [r5, #1]
 801cd58:	2310      	movs	r3, #16
 801cd5a:	3502      	adds	r5, #2
 801cd5c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801cd60:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 801cd64:	2200      	movs	r2, #0
 801cd66:	fbbc f9f3 	udiv	r9, ip, r3
 801cd6a:	4610      	mov	r0, r2
 801cd6c:	fb03 ca19 	mls	sl, r3, r9, ip
 801cd70:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801cd74:	2f09      	cmp	r7, #9
 801cd76:	d81b      	bhi.n	801cdb0 <_strtol_l.constprop.0+0xa8>
 801cd78:	463c      	mov	r4, r7
 801cd7a:	42a3      	cmp	r3, r4
 801cd7c:	dd27      	ble.n	801cdce <_strtol_l.constprop.0+0xc6>
 801cd7e:	1c57      	adds	r7, r2, #1
 801cd80:	d007      	beq.n	801cd92 <_strtol_l.constprop.0+0x8a>
 801cd82:	4581      	cmp	r9, r0
 801cd84:	d320      	bcc.n	801cdc8 <_strtol_l.constprop.0+0xc0>
 801cd86:	d101      	bne.n	801cd8c <_strtol_l.constprop.0+0x84>
 801cd88:	45a2      	cmp	sl, r4
 801cd8a:	db1d      	blt.n	801cdc8 <_strtol_l.constprop.0+0xc0>
 801cd8c:	fb00 4003 	mla	r0, r0, r3, r4
 801cd90:	2201      	movs	r2, #1
 801cd92:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cd96:	e7eb      	b.n	801cd70 <_strtol_l.constprop.0+0x68>
 801cd98:	2c2b      	cmp	r4, #43	@ 0x2b
 801cd9a:	bf04      	itt	eq
 801cd9c:	782c      	ldrbeq	r4, [r5, #0]
 801cd9e:	1c95      	addeq	r5, r2, #2
 801cda0:	e7cf      	b.n	801cd42 <_strtol_l.constprop.0+0x3a>
 801cda2:	2b00      	cmp	r3, #0
 801cda4:	d1da      	bne.n	801cd5c <_strtol_l.constprop.0+0x54>
 801cda6:	2c30      	cmp	r4, #48	@ 0x30
 801cda8:	bf0c      	ite	eq
 801cdaa:	2308      	moveq	r3, #8
 801cdac:	230a      	movne	r3, #10
 801cdae:	e7d5      	b.n	801cd5c <_strtol_l.constprop.0+0x54>
 801cdb0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801cdb4:	2f19      	cmp	r7, #25
 801cdb6:	d801      	bhi.n	801cdbc <_strtol_l.constprop.0+0xb4>
 801cdb8:	3c37      	subs	r4, #55	@ 0x37
 801cdba:	e7de      	b.n	801cd7a <_strtol_l.constprop.0+0x72>
 801cdbc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801cdc0:	2f19      	cmp	r7, #25
 801cdc2:	d804      	bhi.n	801cdce <_strtol_l.constprop.0+0xc6>
 801cdc4:	3c57      	subs	r4, #87	@ 0x57
 801cdc6:	e7d8      	b.n	801cd7a <_strtol_l.constprop.0+0x72>
 801cdc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801cdcc:	e7e1      	b.n	801cd92 <_strtol_l.constprop.0+0x8a>
 801cdce:	1c53      	adds	r3, r2, #1
 801cdd0:	d108      	bne.n	801cde4 <_strtol_l.constprop.0+0xdc>
 801cdd2:	2322      	movs	r3, #34	@ 0x22
 801cdd4:	f8ce 3000 	str.w	r3, [lr]
 801cdd8:	4660      	mov	r0, ip
 801cdda:	f1b8 0f00 	cmp.w	r8, #0
 801cdde:	d0a0      	beq.n	801cd22 <_strtol_l.constprop.0+0x1a>
 801cde0:	1e69      	subs	r1, r5, #1
 801cde2:	e006      	b.n	801cdf2 <_strtol_l.constprop.0+0xea>
 801cde4:	b106      	cbz	r6, 801cde8 <_strtol_l.constprop.0+0xe0>
 801cde6:	4240      	negs	r0, r0
 801cde8:	f1b8 0f00 	cmp.w	r8, #0
 801cdec:	d099      	beq.n	801cd22 <_strtol_l.constprop.0+0x1a>
 801cdee:	2a00      	cmp	r2, #0
 801cdf0:	d1f6      	bne.n	801cde0 <_strtol_l.constprop.0+0xd8>
 801cdf2:	f8c8 1000 	str.w	r1, [r8]
 801cdf6:	e794      	b.n	801cd22 <_strtol_l.constprop.0+0x1a>
 801cdf8:	08020881 	.word	0x08020881

0801cdfc <_strtol_r>:
 801cdfc:	f7ff bf84 	b.w	801cd08 <_strtol_l.constprop.0>

0801ce00 <_fwalk_sglue>:
 801ce00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ce04:	4607      	mov	r7, r0
 801ce06:	4688      	mov	r8, r1
 801ce08:	4614      	mov	r4, r2
 801ce0a:	2600      	movs	r6, #0
 801ce0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ce10:	f1b9 0901 	subs.w	r9, r9, #1
 801ce14:	d505      	bpl.n	801ce22 <_fwalk_sglue+0x22>
 801ce16:	6824      	ldr	r4, [r4, #0]
 801ce18:	2c00      	cmp	r4, #0
 801ce1a:	d1f7      	bne.n	801ce0c <_fwalk_sglue+0xc>
 801ce1c:	4630      	mov	r0, r6
 801ce1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ce22:	89ab      	ldrh	r3, [r5, #12]
 801ce24:	2b01      	cmp	r3, #1
 801ce26:	d907      	bls.n	801ce38 <_fwalk_sglue+0x38>
 801ce28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ce2c:	3301      	adds	r3, #1
 801ce2e:	d003      	beq.n	801ce38 <_fwalk_sglue+0x38>
 801ce30:	4629      	mov	r1, r5
 801ce32:	4638      	mov	r0, r7
 801ce34:	47c0      	blx	r8
 801ce36:	4306      	orrs	r6, r0
 801ce38:	3568      	adds	r5, #104	@ 0x68
 801ce3a:	e7e9      	b.n	801ce10 <_fwalk_sglue+0x10>

0801ce3c <strncmp>:
 801ce3c:	b510      	push	{r4, lr}
 801ce3e:	b16a      	cbz	r2, 801ce5c <strncmp+0x20>
 801ce40:	3901      	subs	r1, #1
 801ce42:	1884      	adds	r4, r0, r2
 801ce44:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ce48:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801ce4c:	429a      	cmp	r2, r3
 801ce4e:	d103      	bne.n	801ce58 <strncmp+0x1c>
 801ce50:	42a0      	cmp	r0, r4
 801ce52:	d001      	beq.n	801ce58 <strncmp+0x1c>
 801ce54:	2a00      	cmp	r2, #0
 801ce56:	d1f5      	bne.n	801ce44 <strncmp+0x8>
 801ce58:	1ad0      	subs	r0, r2, r3
 801ce5a:	bd10      	pop	{r4, pc}
 801ce5c:	4610      	mov	r0, r2
 801ce5e:	e7fc      	b.n	801ce5a <strncmp+0x1e>

0801ce60 <memset>:
 801ce60:	4402      	add	r2, r0
 801ce62:	4603      	mov	r3, r0
 801ce64:	4293      	cmp	r3, r2
 801ce66:	d100      	bne.n	801ce6a <memset+0xa>
 801ce68:	4770      	bx	lr
 801ce6a:	f803 1b01 	strb.w	r1, [r3], #1
 801ce6e:	e7f9      	b.n	801ce64 <memset+0x4>

0801ce70 <_localeconv_r>:
 801ce70:	4800      	ldr	r0, [pc, #0]	@ (801ce74 <_localeconv_r+0x4>)
 801ce72:	4770      	bx	lr
 801ce74:	240002fc 	.word	0x240002fc

0801ce78 <_close_r>:
 801ce78:	b538      	push	{r3, r4, r5, lr}
 801ce7a:	4d06      	ldr	r5, [pc, #24]	@ (801ce94 <_close_r+0x1c>)
 801ce7c:	2300      	movs	r3, #0
 801ce7e:	4604      	mov	r4, r0
 801ce80:	4608      	mov	r0, r1
 801ce82:	602b      	str	r3, [r5, #0]
 801ce84:	f7e7 f828 	bl	8003ed8 <_close>
 801ce88:	1c43      	adds	r3, r0, #1
 801ce8a:	d102      	bne.n	801ce92 <_close_r+0x1a>
 801ce8c:	682b      	ldr	r3, [r5, #0]
 801ce8e:	b103      	cbz	r3, 801ce92 <_close_r+0x1a>
 801ce90:	6023      	str	r3, [r4, #0]
 801ce92:	bd38      	pop	{r3, r4, r5, pc}
 801ce94:	24005e50 	.word	0x24005e50

0801ce98 <_lseek_r>:
 801ce98:	b538      	push	{r3, r4, r5, lr}
 801ce9a:	4d07      	ldr	r5, [pc, #28]	@ (801ceb8 <_lseek_r+0x20>)
 801ce9c:	4604      	mov	r4, r0
 801ce9e:	4608      	mov	r0, r1
 801cea0:	4611      	mov	r1, r2
 801cea2:	2200      	movs	r2, #0
 801cea4:	602a      	str	r2, [r5, #0]
 801cea6:	461a      	mov	r2, r3
 801cea8:	f7e7 f83d 	bl	8003f26 <_lseek>
 801ceac:	1c43      	adds	r3, r0, #1
 801ceae:	d102      	bne.n	801ceb6 <_lseek_r+0x1e>
 801ceb0:	682b      	ldr	r3, [r5, #0]
 801ceb2:	b103      	cbz	r3, 801ceb6 <_lseek_r+0x1e>
 801ceb4:	6023      	str	r3, [r4, #0]
 801ceb6:	bd38      	pop	{r3, r4, r5, pc}
 801ceb8:	24005e50 	.word	0x24005e50

0801cebc <_read_r>:
 801cebc:	b538      	push	{r3, r4, r5, lr}
 801cebe:	4d07      	ldr	r5, [pc, #28]	@ (801cedc <_read_r+0x20>)
 801cec0:	4604      	mov	r4, r0
 801cec2:	4608      	mov	r0, r1
 801cec4:	4611      	mov	r1, r2
 801cec6:	2200      	movs	r2, #0
 801cec8:	602a      	str	r2, [r5, #0]
 801ceca:	461a      	mov	r2, r3
 801cecc:	f7e6 ffcb 	bl	8003e66 <_read>
 801ced0:	1c43      	adds	r3, r0, #1
 801ced2:	d102      	bne.n	801ceda <_read_r+0x1e>
 801ced4:	682b      	ldr	r3, [r5, #0]
 801ced6:	b103      	cbz	r3, 801ceda <_read_r+0x1e>
 801ced8:	6023      	str	r3, [r4, #0]
 801ceda:	bd38      	pop	{r3, r4, r5, pc}
 801cedc:	24005e50 	.word	0x24005e50

0801cee0 <_write_r>:
 801cee0:	b538      	push	{r3, r4, r5, lr}
 801cee2:	4d07      	ldr	r5, [pc, #28]	@ (801cf00 <_write_r+0x20>)
 801cee4:	4604      	mov	r4, r0
 801cee6:	4608      	mov	r0, r1
 801cee8:	4611      	mov	r1, r2
 801ceea:	2200      	movs	r2, #0
 801ceec:	602a      	str	r2, [r5, #0]
 801ceee:	461a      	mov	r2, r3
 801cef0:	f7e6 ffd6 	bl	8003ea0 <_write>
 801cef4:	1c43      	adds	r3, r0, #1
 801cef6:	d102      	bne.n	801cefe <_write_r+0x1e>
 801cef8:	682b      	ldr	r3, [r5, #0]
 801cefa:	b103      	cbz	r3, 801cefe <_write_r+0x1e>
 801cefc:	6023      	str	r3, [r4, #0]
 801cefe:	bd38      	pop	{r3, r4, r5, pc}
 801cf00:	24005e50 	.word	0x24005e50

0801cf04 <__errno>:
 801cf04:	4b01      	ldr	r3, [pc, #4]	@ (801cf0c <__errno+0x8>)
 801cf06:	6818      	ldr	r0, [r3, #0]
 801cf08:	4770      	bx	lr
 801cf0a:	bf00      	nop
 801cf0c:	24000378 	.word	0x24000378

0801cf10 <__libc_init_array>:
 801cf10:	b570      	push	{r4, r5, r6, lr}
 801cf12:	4d0d      	ldr	r5, [pc, #52]	@ (801cf48 <__libc_init_array+0x38>)
 801cf14:	4c0d      	ldr	r4, [pc, #52]	@ (801cf4c <__libc_init_array+0x3c>)
 801cf16:	1b64      	subs	r4, r4, r5
 801cf18:	10a4      	asrs	r4, r4, #2
 801cf1a:	2600      	movs	r6, #0
 801cf1c:	42a6      	cmp	r6, r4
 801cf1e:	d109      	bne.n	801cf34 <__libc_init_array+0x24>
 801cf20:	4d0b      	ldr	r5, [pc, #44]	@ (801cf50 <__libc_init_array+0x40>)
 801cf22:	4c0c      	ldr	r4, [pc, #48]	@ (801cf54 <__libc_init_array+0x44>)
 801cf24:	f003 f874 	bl	8020010 <_init>
 801cf28:	1b64      	subs	r4, r4, r5
 801cf2a:	10a4      	asrs	r4, r4, #2
 801cf2c:	2600      	movs	r6, #0
 801cf2e:	42a6      	cmp	r6, r4
 801cf30:	d105      	bne.n	801cf3e <__libc_init_array+0x2e>
 801cf32:	bd70      	pop	{r4, r5, r6, pc}
 801cf34:	f855 3b04 	ldr.w	r3, [r5], #4
 801cf38:	4798      	blx	r3
 801cf3a:	3601      	adds	r6, #1
 801cf3c:	e7ee      	b.n	801cf1c <__libc_init_array+0xc>
 801cf3e:	f855 3b04 	ldr.w	r3, [r5], #4
 801cf42:	4798      	blx	r3
 801cf44:	3601      	adds	r6, #1
 801cf46:	e7f2      	b.n	801cf2e <__libc_init_array+0x1e>
 801cf48:	08020c34 	.word	0x08020c34
 801cf4c:	08020c34 	.word	0x08020c34
 801cf50:	08020c34 	.word	0x08020c34
 801cf54:	08020c38 	.word	0x08020c38

0801cf58 <__retarget_lock_init_recursive>:
 801cf58:	4770      	bx	lr

0801cf5a <__retarget_lock_acquire_recursive>:
 801cf5a:	4770      	bx	lr

0801cf5c <__retarget_lock_release_recursive>:
 801cf5c:	4770      	bx	lr

0801cf5e <memcpy>:
 801cf5e:	440a      	add	r2, r1
 801cf60:	4291      	cmp	r1, r2
 801cf62:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801cf66:	d100      	bne.n	801cf6a <memcpy+0xc>
 801cf68:	4770      	bx	lr
 801cf6a:	b510      	push	{r4, lr}
 801cf6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cf70:	f803 4f01 	strb.w	r4, [r3, #1]!
 801cf74:	4291      	cmp	r1, r2
 801cf76:	d1f9      	bne.n	801cf6c <memcpy+0xe>
 801cf78:	bd10      	pop	{r4, pc}

0801cf7a <strcpy>:
 801cf7a:	4603      	mov	r3, r0
 801cf7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cf80:	f803 2b01 	strb.w	r2, [r3], #1
 801cf84:	2a00      	cmp	r2, #0
 801cf86:	d1f9      	bne.n	801cf7c <strcpy+0x2>
 801cf88:	4770      	bx	lr
 801cf8a:	0000      	movs	r0, r0
 801cf8c:	0000      	movs	r0, r0
	...

0801cf90 <nan>:
 801cf90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801cf98 <nan+0x8>
 801cf94:	4770      	bx	lr
 801cf96:	bf00      	nop
 801cf98:	00000000 	.word	0x00000000
 801cf9c:	7ff80000 	.word	0x7ff80000

0801cfa0 <nanf>:
 801cfa0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801cfa8 <nanf+0x8>
 801cfa4:	4770      	bx	lr
 801cfa6:	bf00      	nop
 801cfa8:	7fc00000 	.word	0x7fc00000

0801cfac <quorem>:
 801cfac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfb0:	6903      	ldr	r3, [r0, #16]
 801cfb2:	690c      	ldr	r4, [r1, #16]
 801cfb4:	42a3      	cmp	r3, r4
 801cfb6:	4607      	mov	r7, r0
 801cfb8:	db7e      	blt.n	801d0b8 <quorem+0x10c>
 801cfba:	3c01      	subs	r4, #1
 801cfbc:	f101 0814 	add.w	r8, r1, #20
 801cfc0:	00a3      	lsls	r3, r4, #2
 801cfc2:	f100 0514 	add.w	r5, r0, #20
 801cfc6:	9300      	str	r3, [sp, #0]
 801cfc8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cfcc:	9301      	str	r3, [sp, #4]
 801cfce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801cfd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cfd6:	3301      	adds	r3, #1
 801cfd8:	429a      	cmp	r2, r3
 801cfda:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801cfde:	fbb2 f6f3 	udiv	r6, r2, r3
 801cfe2:	d32e      	bcc.n	801d042 <quorem+0x96>
 801cfe4:	f04f 0a00 	mov.w	sl, #0
 801cfe8:	46c4      	mov	ip, r8
 801cfea:	46ae      	mov	lr, r5
 801cfec:	46d3      	mov	fp, sl
 801cfee:	f85c 3b04 	ldr.w	r3, [ip], #4
 801cff2:	b298      	uxth	r0, r3
 801cff4:	fb06 a000 	mla	r0, r6, r0, sl
 801cff8:	0c02      	lsrs	r2, r0, #16
 801cffa:	0c1b      	lsrs	r3, r3, #16
 801cffc:	fb06 2303 	mla	r3, r6, r3, r2
 801d000:	f8de 2000 	ldr.w	r2, [lr]
 801d004:	b280      	uxth	r0, r0
 801d006:	b292      	uxth	r2, r2
 801d008:	1a12      	subs	r2, r2, r0
 801d00a:	445a      	add	r2, fp
 801d00c:	f8de 0000 	ldr.w	r0, [lr]
 801d010:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d014:	b29b      	uxth	r3, r3
 801d016:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801d01a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801d01e:	b292      	uxth	r2, r2
 801d020:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801d024:	45e1      	cmp	r9, ip
 801d026:	f84e 2b04 	str.w	r2, [lr], #4
 801d02a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801d02e:	d2de      	bcs.n	801cfee <quorem+0x42>
 801d030:	9b00      	ldr	r3, [sp, #0]
 801d032:	58eb      	ldr	r3, [r5, r3]
 801d034:	b92b      	cbnz	r3, 801d042 <quorem+0x96>
 801d036:	9b01      	ldr	r3, [sp, #4]
 801d038:	3b04      	subs	r3, #4
 801d03a:	429d      	cmp	r5, r3
 801d03c:	461a      	mov	r2, r3
 801d03e:	d32f      	bcc.n	801d0a0 <quorem+0xf4>
 801d040:	613c      	str	r4, [r7, #16]
 801d042:	4638      	mov	r0, r7
 801d044:	f002 f9f8 	bl	801f438 <__mcmp>
 801d048:	2800      	cmp	r0, #0
 801d04a:	db25      	blt.n	801d098 <quorem+0xec>
 801d04c:	4629      	mov	r1, r5
 801d04e:	2000      	movs	r0, #0
 801d050:	f858 2b04 	ldr.w	r2, [r8], #4
 801d054:	f8d1 c000 	ldr.w	ip, [r1]
 801d058:	fa1f fe82 	uxth.w	lr, r2
 801d05c:	fa1f f38c 	uxth.w	r3, ip
 801d060:	eba3 030e 	sub.w	r3, r3, lr
 801d064:	4403      	add	r3, r0
 801d066:	0c12      	lsrs	r2, r2, #16
 801d068:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801d06c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801d070:	b29b      	uxth	r3, r3
 801d072:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d076:	45c1      	cmp	r9, r8
 801d078:	f841 3b04 	str.w	r3, [r1], #4
 801d07c:	ea4f 4022 	mov.w	r0, r2, asr #16
 801d080:	d2e6      	bcs.n	801d050 <quorem+0xa4>
 801d082:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d086:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d08a:	b922      	cbnz	r2, 801d096 <quorem+0xea>
 801d08c:	3b04      	subs	r3, #4
 801d08e:	429d      	cmp	r5, r3
 801d090:	461a      	mov	r2, r3
 801d092:	d30b      	bcc.n	801d0ac <quorem+0x100>
 801d094:	613c      	str	r4, [r7, #16]
 801d096:	3601      	adds	r6, #1
 801d098:	4630      	mov	r0, r6
 801d09a:	b003      	add	sp, #12
 801d09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0a0:	6812      	ldr	r2, [r2, #0]
 801d0a2:	3b04      	subs	r3, #4
 801d0a4:	2a00      	cmp	r2, #0
 801d0a6:	d1cb      	bne.n	801d040 <quorem+0x94>
 801d0a8:	3c01      	subs	r4, #1
 801d0aa:	e7c6      	b.n	801d03a <quorem+0x8e>
 801d0ac:	6812      	ldr	r2, [r2, #0]
 801d0ae:	3b04      	subs	r3, #4
 801d0b0:	2a00      	cmp	r2, #0
 801d0b2:	d1ef      	bne.n	801d094 <quorem+0xe8>
 801d0b4:	3c01      	subs	r4, #1
 801d0b6:	e7ea      	b.n	801d08e <quorem+0xe2>
 801d0b8:	2000      	movs	r0, #0
 801d0ba:	e7ee      	b.n	801d09a <quorem+0xee>
 801d0bc:	0000      	movs	r0, r0
	...

0801d0c0 <_dtoa_r>:
 801d0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0c4:	ed2d 8b02 	vpush	{d8}
 801d0c8:	69c7      	ldr	r7, [r0, #28]
 801d0ca:	b091      	sub	sp, #68	@ 0x44
 801d0cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 801d0d0:	ec55 4b10 	vmov	r4, r5, d0
 801d0d4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801d0d6:	9107      	str	r1, [sp, #28]
 801d0d8:	4681      	mov	r9, r0
 801d0da:	9209      	str	r2, [sp, #36]	@ 0x24
 801d0dc:	930d      	str	r3, [sp, #52]	@ 0x34
 801d0de:	b97f      	cbnz	r7, 801d100 <_dtoa_r+0x40>
 801d0e0:	2010      	movs	r0, #16
 801d0e2:	f001 fbe9 	bl	801e8b8 <malloc>
 801d0e6:	4602      	mov	r2, r0
 801d0e8:	f8c9 001c 	str.w	r0, [r9, #28]
 801d0ec:	b920      	cbnz	r0, 801d0f8 <_dtoa_r+0x38>
 801d0ee:	4ba0      	ldr	r3, [pc, #640]	@ (801d370 <_dtoa_r+0x2b0>)
 801d0f0:	21ef      	movs	r1, #239	@ 0xef
 801d0f2:	48a0      	ldr	r0, [pc, #640]	@ (801d374 <_dtoa_r+0x2b4>)
 801d0f4:	f002 fc9c 	bl	801fa30 <__assert_func>
 801d0f8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801d0fc:	6007      	str	r7, [r0, #0]
 801d0fe:	60c7      	str	r7, [r0, #12]
 801d100:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801d104:	6819      	ldr	r1, [r3, #0]
 801d106:	b159      	cbz	r1, 801d120 <_dtoa_r+0x60>
 801d108:	685a      	ldr	r2, [r3, #4]
 801d10a:	604a      	str	r2, [r1, #4]
 801d10c:	2301      	movs	r3, #1
 801d10e:	4093      	lsls	r3, r2
 801d110:	608b      	str	r3, [r1, #8]
 801d112:	4648      	mov	r0, r9
 801d114:	f001 ff0c 	bl	801ef30 <_Bfree>
 801d118:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801d11c:	2200      	movs	r2, #0
 801d11e:	601a      	str	r2, [r3, #0]
 801d120:	1e2b      	subs	r3, r5, #0
 801d122:	bfbb      	ittet	lt
 801d124:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801d128:	9303      	strlt	r3, [sp, #12]
 801d12a:	2300      	movge	r3, #0
 801d12c:	2201      	movlt	r2, #1
 801d12e:	bfac      	ite	ge
 801d130:	6033      	strge	r3, [r6, #0]
 801d132:	6032      	strlt	r2, [r6, #0]
 801d134:	4b90      	ldr	r3, [pc, #576]	@ (801d378 <_dtoa_r+0x2b8>)
 801d136:	9e03      	ldr	r6, [sp, #12]
 801d138:	43b3      	bics	r3, r6
 801d13a:	d110      	bne.n	801d15e <_dtoa_r+0x9e>
 801d13c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d13e:	f242 730f 	movw	r3, #9999	@ 0x270f
 801d142:	6013      	str	r3, [r2, #0]
 801d144:	f3c6 0313 	ubfx	r3, r6, #0, #20
 801d148:	4323      	orrs	r3, r4
 801d14a:	f000 84de 	beq.w	801db0a <_dtoa_r+0xa4a>
 801d14e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d150:	4f8a      	ldr	r7, [pc, #552]	@ (801d37c <_dtoa_r+0x2bc>)
 801d152:	2b00      	cmp	r3, #0
 801d154:	f000 84e0 	beq.w	801db18 <_dtoa_r+0xa58>
 801d158:	1cfb      	adds	r3, r7, #3
 801d15a:	f000 bcdb 	b.w	801db14 <_dtoa_r+0xa54>
 801d15e:	ed9d 8b02 	vldr	d8, [sp, #8]
 801d162:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801d166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d16a:	d10a      	bne.n	801d182 <_dtoa_r+0xc2>
 801d16c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d16e:	2301      	movs	r3, #1
 801d170:	6013      	str	r3, [r2, #0]
 801d172:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d174:	b113      	cbz	r3, 801d17c <_dtoa_r+0xbc>
 801d176:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801d178:	4b81      	ldr	r3, [pc, #516]	@ (801d380 <_dtoa_r+0x2c0>)
 801d17a:	6013      	str	r3, [r2, #0]
 801d17c:	4f81      	ldr	r7, [pc, #516]	@ (801d384 <_dtoa_r+0x2c4>)
 801d17e:	f000 bccb 	b.w	801db18 <_dtoa_r+0xa58>
 801d182:	aa0e      	add	r2, sp, #56	@ 0x38
 801d184:	a90f      	add	r1, sp, #60	@ 0x3c
 801d186:	4648      	mov	r0, r9
 801d188:	eeb0 0b48 	vmov.f64	d0, d8
 801d18c:	f002 fa74 	bl	801f678 <__d2b>
 801d190:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801d194:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d196:	9001      	str	r0, [sp, #4]
 801d198:	2b00      	cmp	r3, #0
 801d19a:	d045      	beq.n	801d228 <_dtoa_r+0x168>
 801d19c:	eeb0 7b48 	vmov.f64	d7, d8
 801d1a0:	ee18 1a90 	vmov	r1, s17
 801d1a4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801d1a8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801d1ac:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 801d1b0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801d1b4:	2500      	movs	r5, #0
 801d1b6:	ee07 1a90 	vmov	s15, r1
 801d1ba:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801d1be:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801d358 <_dtoa_r+0x298>
 801d1c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d1c6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801d360 <_dtoa_r+0x2a0>
 801d1ca:	eea7 6b05 	vfma.f64	d6, d7, d5
 801d1ce:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801d368 <_dtoa_r+0x2a8>
 801d1d2:	ee07 3a90 	vmov	s15, r3
 801d1d6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801d1da:	eeb0 7b46 	vmov.f64	d7, d6
 801d1de:	eea4 7b05 	vfma.f64	d7, d4, d5
 801d1e2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801d1e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801d1ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d1ee:	ee16 8a90 	vmov	r8, s13
 801d1f2:	d508      	bpl.n	801d206 <_dtoa_r+0x146>
 801d1f4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801d1f8:	eeb4 6b47 	vcmp.f64	d6, d7
 801d1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d200:	bf18      	it	ne
 801d202:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 801d206:	f1b8 0f16 	cmp.w	r8, #22
 801d20a:	d82b      	bhi.n	801d264 <_dtoa_r+0x1a4>
 801d20c:	495e      	ldr	r1, [pc, #376]	@ (801d388 <_dtoa_r+0x2c8>)
 801d20e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801d212:	ed91 7b00 	vldr	d7, [r1]
 801d216:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801d21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d21e:	d501      	bpl.n	801d224 <_dtoa_r+0x164>
 801d220:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801d224:	2100      	movs	r1, #0
 801d226:	e01e      	b.n	801d266 <_dtoa_r+0x1a6>
 801d228:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d22a:	4413      	add	r3, r2
 801d22c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 801d230:	2920      	cmp	r1, #32
 801d232:	bfc1      	itttt	gt
 801d234:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 801d238:	408e      	lslgt	r6, r1
 801d23a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801d23e:	fa24 f101 	lsrgt.w	r1, r4, r1
 801d242:	bfd6      	itet	le
 801d244:	f1c1 0120 	rsble	r1, r1, #32
 801d248:	4331      	orrgt	r1, r6
 801d24a:	fa04 f101 	lslle.w	r1, r4, r1
 801d24e:	ee07 1a90 	vmov	s15, r1
 801d252:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801d256:	3b01      	subs	r3, #1
 801d258:	ee17 1a90 	vmov	r1, s15
 801d25c:	2501      	movs	r5, #1
 801d25e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801d262:	e7a8      	b.n	801d1b6 <_dtoa_r+0xf6>
 801d264:	2101      	movs	r1, #1
 801d266:	1ad2      	subs	r2, r2, r3
 801d268:	1e53      	subs	r3, r2, #1
 801d26a:	9306      	str	r3, [sp, #24]
 801d26c:	bf45      	ittet	mi
 801d26e:	f1c2 0301 	rsbmi	r3, r2, #1
 801d272:	9305      	strmi	r3, [sp, #20]
 801d274:	2300      	movpl	r3, #0
 801d276:	2300      	movmi	r3, #0
 801d278:	bf4c      	ite	mi
 801d27a:	9306      	strmi	r3, [sp, #24]
 801d27c:	9305      	strpl	r3, [sp, #20]
 801d27e:	f1b8 0f00 	cmp.w	r8, #0
 801d282:	910c      	str	r1, [sp, #48]	@ 0x30
 801d284:	db18      	blt.n	801d2b8 <_dtoa_r+0x1f8>
 801d286:	9b06      	ldr	r3, [sp, #24]
 801d288:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801d28c:	4443      	add	r3, r8
 801d28e:	9306      	str	r3, [sp, #24]
 801d290:	2300      	movs	r3, #0
 801d292:	9a07      	ldr	r2, [sp, #28]
 801d294:	2a09      	cmp	r2, #9
 801d296:	d849      	bhi.n	801d32c <_dtoa_r+0x26c>
 801d298:	2a05      	cmp	r2, #5
 801d29a:	bfc4      	itt	gt
 801d29c:	3a04      	subgt	r2, #4
 801d29e:	9207      	strgt	r2, [sp, #28]
 801d2a0:	9a07      	ldr	r2, [sp, #28]
 801d2a2:	f1a2 0202 	sub.w	r2, r2, #2
 801d2a6:	bfcc      	ite	gt
 801d2a8:	2400      	movgt	r4, #0
 801d2aa:	2401      	movle	r4, #1
 801d2ac:	2a03      	cmp	r2, #3
 801d2ae:	d848      	bhi.n	801d342 <_dtoa_r+0x282>
 801d2b0:	e8df f002 	tbb	[pc, r2]
 801d2b4:	3a2c2e0b 	.word	0x3a2c2e0b
 801d2b8:	9b05      	ldr	r3, [sp, #20]
 801d2ba:	2200      	movs	r2, #0
 801d2bc:	eba3 0308 	sub.w	r3, r3, r8
 801d2c0:	9305      	str	r3, [sp, #20]
 801d2c2:	920a      	str	r2, [sp, #40]	@ 0x28
 801d2c4:	f1c8 0300 	rsb	r3, r8, #0
 801d2c8:	e7e3      	b.n	801d292 <_dtoa_r+0x1d2>
 801d2ca:	2200      	movs	r2, #0
 801d2cc:	9208      	str	r2, [sp, #32]
 801d2ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d2d0:	2a00      	cmp	r2, #0
 801d2d2:	dc39      	bgt.n	801d348 <_dtoa_r+0x288>
 801d2d4:	f04f 0b01 	mov.w	fp, #1
 801d2d8:	46da      	mov	sl, fp
 801d2da:	465a      	mov	r2, fp
 801d2dc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801d2e0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801d2e4:	2100      	movs	r1, #0
 801d2e6:	2004      	movs	r0, #4
 801d2e8:	f100 0614 	add.w	r6, r0, #20
 801d2ec:	4296      	cmp	r6, r2
 801d2ee:	d930      	bls.n	801d352 <_dtoa_r+0x292>
 801d2f0:	6079      	str	r1, [r7, #4]
 801d2f2:	4648      	mov	r0, r9
 801d2f4:	9304      	str	r3, [sp, #16]
 801d2f6:	f001 fddb 	bl	801eeb0 <_Balloc>
 801d2fa:	9b04      	ldr	r3, [sp, #16]
 801d2fc:	4607      	mov	r7, r0
 801d2fe:	2800      	cmp	r0, #0
 801d300:	d146      	bne.n	801d390 <_dtoa_r+0x2d0>
 801d302:	4b22      	ldr	r3, [pc, #136]	@ (801d38c <_dtoa_r+0x2cc>)
 801d304:	4602      	mov	r2, r0
 801d306:	f240 11af 	movw	r1, #431	@ 0x1af
 801d30a:	e6f2      	b.n	801d0f2 <_dtoa_r+0x32>
 801d30c:	2201      	movs	r2, #1
 801d30e:	e7dd      	b.n	801d2cc <_dtoa_r+0x20c>
 801d310:	2200      	movs	r2, #0
 801d312:	9208      	str	r2, [sp, #32]
 801d314:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d316:	eb08 0b02 	add.w	fp, r8, r2
 801d31a:	f10b 0a01 	add.w	sl, fp, #1
 801d31e:	4652      	mov	r2, sl
 801d320:	2a01      	cmp	r2, #1
 801d322:	bfb8      	it	lt
 801d324:	2201      	movlt	r2, #1
 801d326:	e7db      	b.n	801d2e0 <_dtoa_r+0x220>
 801d328:	2201      	movs	r2, #1
 801d32a:	e7f2      	b.n	801d312 <_dtoa_r+0x252>
 801d32c:	2401      	movs	r4, #1
 801d32e:	2200      	movs	r2, #0
 801d330:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801d334:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801d338:	2100      	movs	r1, #0
 801d33a:	46da      	mov	sl, fp
 801d33c:	2212      	movs	r2, #18
 801d33e:	9109      	str	r1, [sp, #36]	@ 0x24
 801d340:	e7ce      	b.n	801d2e0 <_dtoa_r+0x220>
 801d342:	2201      	movs	r2, #1
 801d344:	9208      	str	r2, [sp, #32]
 801d346:	e7f5      	b.n	801d334 <_dtoa_r+0x274>
 801d348:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801d34c:	46da      	mov	sl, fp
 801d34e:	465a      	mov	r2, fp
 801d350:	e7c6      	b.n	801d2e0 <_dtoa_r+0x220>
 801d352:	3101      	adds	r1, #1
 801d354:	0040      	lsls	r0, r0, #1
 801d356:	e7c7      	b.n	801d2e8 <_dtoa_r+0x228>
 801d358:	636f4361 	.word	0x636f4361
 801d35c:	3fd287a7 	.word	0x3fd287a7
 801d360:	8b60c8b3 	.word	0x8b60c8b3
 801d364:	3fc68a28 	.word	0x3fc68a28
 801d368:	509f79fb 	.word	0x509f79fb
 801d36c:	3fd34413 	.word	0x3fd34413
 801d370:	0802098e 	.word	0x0802098e
 801d374:	080209a5 	.word	0x080209a5
 801d378:	7ff00000 	.word	0x7ff00000
 801d37c:	0802098a 	.word	0x0802098a
 801d380:	08020a96 	.word	0x08020a96
 801d384:	08020a95 	.word	0x08020a95
 801d388:	08020b28 	.word	0x08020b28
 801d38c:	080209fd 	.word	0x080209fd
 801d390:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801d394:	f1ba 0f0e 	cmp.w	sl, #14
 801d398:	6010      	str	r0, [r2, #0]
 801d39a:	d86f      	bhi.n	801d47c <_dtoa_r+0x3bc>
 801d39c:	2c00      	cmp	r4, #0
 801d39e:	d06d      	beq.n	801d47c <_dtoa_r+0x3bc>
 801d3a0:	f1b8 0f00 	cmp.w	r8, #0
 801d3a4:	f340 80c2 	ble.w	801d52c <_dtoa_r+0x46c>
 801d3a8:	4aca      	ldr	r2, [pc, #808]	@ (801d6d4 <_dtoa_r+0x614>)
 801d3aa:	f008 010f 	and.w	r1, r8, #15
 801d3ae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801d3b2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801d3b6:	ed92 7b00 	vldr	d7, [r2]
 801d3ba:	ea4f 1128 	mov.w	r1, r8, asr #4
 801d3be:	f000 80a9 	beq.w	801d514 <_dtoa_r+0x454>
 801d3c2:	4ac5      	ldr	r2, [pc, #788]	@ (801d6d8 <_dtoa_r+0x618>)
 801d3c4:	ed92 6b08 	vldr	d6, [r2, #32]
 801d3c8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801d3cc:	ed8d 6b02 	vstr	d6, [sp, #8]
 801d3d0:	f001 010f 	and.w	r1, r1, #15
 801d3d4:	2203      	movs	r2, #3
 801d3d6:	48c0      	ldr	r0, [pc, #768]	@ (801d6d8 <_dtoa_r+0x618>)
 801d3d8:	2900      	cmp	r1, #0
 801d3da:	f040 809d 	bne.w	801d518 <_dtoa_r+0x458>
 801d3de:	ed9d 6b02 	vldr	d6, [sp, #8]
 801d3e2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801d3e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 801d3ea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801d3ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d3f0:	2900      	cmp	r1, #0
 801d3f2:	f000 80c1 	beq.w	801d578 <_dtoa_r+0x4b8>
 801d3f6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801d3fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801d3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d402:	f140 80b9 	bpl.w	801d578 <_dtoa_r+0x4b8>
 801d406:	f1ba 0f00 	cmp.w	sl, #0
 801d40a:	f000 80b5 	beq.w	801d578 <_dtoa_r+0x4b8>
 801d40e:	f1bb 0f00 	cmp.w	fp, #0
 801d412:	dd31      	ble.n	801d478 <_dtoa_r+0x3b8>
 801d414:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 801d418:	ee27 7b06 	vmul.f64	d7, d7, d6
 801d41c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801d420:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 801d424:	9104      	str	r1, [sp, #16]
 801d426:	3201      	adds	r2, #1
 801d428:	465c      	mov	r4, fp
 801d42a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801d42e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801d432:	ee07 2a90 	vmov	s15, r2
 801d436:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d43a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801d43e:	ee15 2a90 	vmov	r2, s11
 801d442:	ec51 0b15 	vmov	r0, r1, d5
 801d446:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801d44a:	2c00      	cmp	r4, #0
 801d44c:	f040 8098 	bne.w	801d580 <_dtoa_r+0x4c0>
 801d450:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801d454:	ee36 6b47 	vsub.f64	d6, d6, d7
 801d458:	ec41 0b17 	vmov	d7, r0, r1
 801d45c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801d460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d464:	f300 8261 	bgt.w	801d92a <_dtoa_r+0x86a>
 801d468:	eeb1 7b47 	vneg.f64	d7, d7
 801d46c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801d470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d474:	f100 80f5 	bmi.w	801d662 <_dtoa_r+0x5a2>
 801d478:	ed8d 8b02 	vstr	d8, [sp, #8]
 801d47c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d47e:	2a00      	cmp	r2, #0
 801d480:	f2c0 812c 	blt.w	801d6dc <_dtoa_r+0x61c>
 801d484:	f1b8 0f0e 	cmp.w	r8, #14
 801d488:	f300 8128 	bgt.w	801d6dc <_dtoa_r+0x61c>
 801d48c:	4b91      	ldr	r3, [pc, #580]	@ (801d6d4 <_dtoa_r+0x614>)
 801d48e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801d492:	ed93 6b00 	vldr	d6, [r3]
 801d496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d498:	2b00      	cmp	r3, #0
 801d49a:	da03      	bge.n	801d4a4 <_dtoa_r+0x3e4>
 801d49c:	f1ba 0f00 	cmp.w	sl, #0
 801d4a0:	f340 80d2 	ble.w	801d648 <_dtoa_r+0x588>
 801d4a4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801d4a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d4ac:	463e      	mov	r6, r7
 801d4ae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801d4b2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801d4b6:	ee15 3a10 	vmov	r3, s10
 801d4ba:	3330      	adds	r3, #48	@ 0x30
 801d4bc:	f806 3b01 	strb.w	r3, [r6], #1
 801d4c0:	1bf3      	subs	r3, r6, r7
 801d4c2:	459a      	cmp	sl, r3
 801d4c4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801d4c8:	eea3 7b46 	vfms.f64	d7, d3, d6
 801d4cc:	f040 80f8 	bne.w	801d6c0 <_dtoa_r+0x600>
 801d4d0:	ee37 7b07 	vadd.f64	d7, d7, d7
 801d4d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801d4d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d4dc:	f300 80dd 	bgt.w	801d69a <_dtoa_r+0x5da>
 801d4e0:	eeb4 7b46 	vcmp.f64	d7, d6
 801d4e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d4e8:	d104      	bne.n	801d4f4 <_dtoa_r+0x434>
 801d4ea:	ee15 3a10 	vmov	r3, s10
 801d4ee:	07db      	lsls	r3, r3, #31
 801d4f0:	f100 80d3 	bmi.w	801d69a <_dtoa_r+0x5da>
 801d4f4:	9901      	ldr	r1, [sp, #4]
 801d4f6:	4648      	mov	r0, r9
 801d4f8:	f001 fd1a 	bl	801ef30 <_Bfree>
 801d4fc:	2300      	movs	r3, #0
 801d4fe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d500:	7033      	strb	r3, [r6, #0]
 801d502:	f108 0301 	add.w	r3, r8, #1
 801d506:	6013      	str	r3, [r2, #0]
 801d508:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d50a:	2b00      	cmp	r3, #0
 801d50c:	f000 8304 	beq.w	801db18 <_dtoa_r+0xa58>
 801d510:	601e      	str	r6, [r3, #0]
 801d512:	e301      	b.n	801db18 <_dtoa_r+0xa58>
 801d514:	2202      	movs	r2, #2
 801d516:	e75e      	b.n	801d3d6 <_dtoa_r+0x316>
 801d518:	07cc      	lsls	r4, r1, #31
 801d51a:	d504      	bpl.n	801d526 <_dtoa_r+0x466>
 801d51c:	ed90 6b00 	vldr	d6, [r0]
 801d520:	3201      	adds	r2, #1
 801d522:	ee27 7b06 	vmul.f64	d7, d7, d6
 801d526:	1049      	asrs	r1, r1, #1
 801d528:	3008      	adds	r0, #8
 801d52a:	e755      	b.n	801d3d8 <_dtoa_r+0x318>
 801d52c:	d022      	beq.n	801d574 <_dtoa_r+0x4b4>
 801d52e:	f1c8 0100 	rsb	r1, r8, #0
 801d532:	4a68      	ldr	r2, [pc, #416]	@ (801d6d4 <_dtoa_r+0x614>)
 801d534:	f001 000f 	and.w	r0, r1, #15
 801d538:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801d53c:	ed92 7b00 	vldr	d7, [r2]
 801d540:	ee28 7b07 	vmul.f64	d7, d8, d7
 801d544:	ed8d 7b02 	vstr	d7, [sp, #8]
 801d548:	4863      	ldr	r0, [pc, #396]	@ (801d6d8 <_dtoa_r+0x618>)
 801d54a:	1109      	asrs	r1, r1, #4
 801d54c:	2400      	movs	r4, #0
 801d54e:	2202      	movs	r2, #2
 801d550:	b929      	cbnz	r1, 801d55e <_dtoa_r+0x49e>
 801d552:	2c00      	cmp	r4, #0
 801d554:	f43f af49 	beq.w	801d3ea <_dtoa_r+0x32a>
 801d558:	ed8d 7b02 	vstr	d7, [sp, #8]
 801d55c:	e745      	b.n	801d3ea <_dtoa_r+0x32a>
 801d55e:	07ce      	lsls	r6, r1, #31
 801d560:	d505      	bpl.n	801d56e <_dtoa_r+0x4ae>
 801d562:	ed90 6b00 	vldr	d6, [r0]
 801d566:	3201      	adds	r2, #1
 801d568:	2401      	movs	r4, #1
 801d56a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801d56e:	1049      	asrs	r1, r1, #1
 801d570:	3008      	adds	r0, #8
 801d572:	e7ed      	b.n	801d550 <_dtoa_r+0x490>
 801d574:	2202      	movs	r2, #2
 801d576:	e738      	b.n	801d3ea <_dtoa_r+0x32a>
 801d578:	f8cd 8010 	str.w	r8, [sp, #16]
 801d57c:	4654      	mov	r4, sl
 801d57e:	e754      	b.n	801d42a <_dtoa_r+0x36a>
 801d580:	4a54      	ldr	r2, [pc, #336]	@ (801d6d4 <_dtoa_r+0x614>)
 801d582:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801d586:	ed12 4b02 	vldr	d4, [r2, #-8]
 801d58a:	9a08      	ldr	r2, [sp, #32]
 801d58c:	ec41 0b17 	vmov	d7, r0, r1
 801d590:	443c      	add	r4, r7
 801d592:	b34a      	cbz	r2, 801d5e8 <_dtoa_r+0x528>
 801d594:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801d598:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801d59c:	463e      	mov	r6, r7
 801d59e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801d5a2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801d5a6:	ee35 7b47 	vsub.f64	d7, d5, d7
 801d5aa:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801d5ae:	ee14 2a90 	vmov	r2, s9
 801d5b2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801d5b6:	3230      	adds	r2, #48	@ 0x30
 801d5b8:	ee36 6b45 	vsub.f64	d6, d6, d5
 801d5bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801d5c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d5c4:	f806 2b01 	strb.w	r2, [r6], #1
 801d5c8:	d438      	bmi.n	801d63c <_dtoa_r+0x57c>
 801d5ca:	ee32 5b46 	vsub.f64	d5, d2, d6
 801d5ce:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801d5d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d5d6:	d462      	bmi.n	801d69e <_dtoa_r+0x5de>
 801d5d8:	42a6      	cmp	r6, r4
 801d5da:	f43f af4d 	beq.w	801d478 <_dtoa_r+0x3b8>
 801d5de:	ee27 7b03 	vmul.f64	d7, d7, d3
 801d5e2:	ee26 6b03 	vmul.f64	d6, d6, d3
 801d5e6:	e7e0      	b.n	801d5aa <_dtoa_r+0x4ea>
 801d5e8:	4621      	mov	r1, r4
 801d5ea:	463e      	mov	r6, r7
 801d5ec:	ee27 7b04 	vmul.f64	d7, d7, d4
 801d5f0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801d5f4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801d5f8:	ee14 2a90 	vmov	r2, s9
 801d5fc:	3230      	adds	r2, #48	@ 0x30
 801d5fe:	f806 2b01 	strb.w	r2, [r6], #1
 801d602:	42a6      	cmp	r6, r4
 801d604:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801d608:	ee36 6b45 	vsub.f64	d6, d6, d5
 801d60c:	d119      	bne.n	801d642 <_dtoa_r+0x582>
 801d60e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801d612:	ee37 4b05 	vadd.f64	d4, d7, d5
 801d616:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801d61a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d61e:	dc3e      	bgt.n	801d69e <_dtoa_r+0x5de>
 801d620:	ee35 5b47 	vsub.f64	d5, d5, d7
 801d624:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801d628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d62c:	f57f af24 	bpl.w	801d478 <_dtoa_r+0x3b8>
 801d630:	460e      	mov	r6, r1
 801d632:	3901      	subs	r1, #1
 801d634:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d638:	2b30      	cmp	r3, #48	@ 0x30
 801d63a:	d0f9      	beq.n	801d630 <_dtoa_r+0x570>
 801d63c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801d640:	e758      	b.n	801d4f4 <_dtoa_r+0x434>
 801d642:	ee26 6b03 	vmul.f64	d6, d6, d3
 801d646:	e7d5      	b.n	801d5f4 <_dtoa_r+0x534>
 801d648:	d10b      	bne.n	801d662 <_dtoa_r+0x5a2>
 801d64a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801d64e:	ee26 6b07 	vmul.f64	d6, d6, d7
 801d652:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d656:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801d65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d65e:	f2c0 8161 	blt.w	801d924 <_dtoa_r+0x864>
 801d662:	2400      	movs	r4, #0
 801d664:	4625      	mov	r5, r4
 801d666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d668:	43db      	mvns	r3, r3
 801d66a:	9304      	str	r3, [sp, #16]
 801d66c:	463e      	mov	r6, r7
 801d66e:	f04f 0800 	mov.w	r8, #0
 801d672:	4621      	mov	r1, r4
 801d674:	4648      	mov	r0, r9
 801d676:	f001 fc5b 	bl	801ef30 <_Bfree>
 801d67a:	2d00      	cmp	r5, #0
 801d67c:	d0de      	beq.n	801d63c <_dtoa_r+0x57c>
 801d67e:	f1b8 0f00 	cmp.w	r8, #0
 801d682:	d005      	beq.n	801d690 <_dtoa_r+0x5d0>
 801d684:	45a8      	cmp	r8, r5
 801d686:	d003      	beq.n	801d690 <_dtoa_r+0x5d0>
 801d688:	4641      	mov	r1, r8
 801d68a:	4648      	mov	r0, r9
 801d68c:	f001 fc50 	bl	801ef30 <_Bfree>
 801d690:	4629      	mov	r1, r5
 801d692:	4648      	mov	r0, r9
 801d694:	f001 fc4c 	bl	801ef30 <_Bfree>
 801d698:	e7d0      	b.n	801d63c <_dtoa_r+0x57c>
 801d69a:	f8cd 8010 	str.w	r8, [sp, #16]
 801d69e:	4633      	mov	r3, r6
 801d6a0:	461e      	mov	r6, r3
 801d6a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d6a6:	2a39      	cmp	r2, #57	@ 0x39
 801d6a8:	d106      	bne.n	801d6b8 <_dtoa_r+0x5f8>
 801d6aa:	429f      	cmp	r7, r3
 801d6ac:	d1f8      	bne.n	801d6a0 <_dtoa_r+0x5e0>
 801d6ae:	9a04      	ldr	r2, [sp, #16]
 801d6b0:	3201      	adds	r2, #1
 801d6b2:	9204      	str	r2, [sp, #16]
 801d6b4:	2230      	movs	r2, #48	@ 0x30
 801d6b6:	703a      	strb	r2, [r7, #0]
 801d6b8:	781a      	ldrb	r2, [r3, #0]
 801d6ba:	3201      	adds	r2, #1
 801d6bc:	701a      	strb	r2, [r3, #0]
 801d6be:	e7bd      	b.n	801d63c <_dtoa_r+0x57c>
 801d6c0:	ee27 7b04 	vmul.f64	d7, d7, d4
 801d6c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801d6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d6cc:	f47f aeef 	bne.w	801d4ae <_dtoa_r+0x3ee>
 801d6d0:	e710      	b.n	801d4f4 <_dtoa_r+0x434>
 801d6d2:	bf00      	nop
 801d6d4:	08020b28 	.word	0x08020b28
 801d6d8:	08020b00 	.word	0x08020b00
 801d6dc:	9908      	ldr	r1, [sp, #32]
 801d6de:	2900      	cmp	r1, #0
 801d6e0:	f000 80e3 	beq.w	801d8aa <_dtoa_r+0x7ea>
 801d6e4:	9907      	ldr	r1, [sp, #28]
 801d6e6:	2901      	cmp	r1, #1
 801d6e8:	f300 80c8 	bgt.w	801d87c <_dtoa_r+0x7bc>
 801d6ec:	2d00      	cmp	r5, #0
 801d6ee:	f000 80c1 	beq.w	801d874 <_dtoa_r+0x7b4>
 801d6f2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801d6f6:	9e05      	ldr	r6, [sp, #20]
 801d6f8:	461c      	mov	r4, r3
 801d6fa:	9304      	str	r3, [sp, #16]
 801d6fc:	9b05      	ldr	r3, [sp, #20]
 801d6fe:	4413      	add	r3, r2
 801d700:	9305      	str	r3, [sp, #20]
 801d702:	9b06      	ldr	r3, [sp, #24]
 801d704:	2101      	movs	r1, #1
 801d706:	4413      	add	r3, r2
 801d708:	4648      	mov	r0, r9
 801d70a:	9306      	str	r3, [sp, #24]
 801d70c:	f001 fd0e 	bl	801f12c <__i2b>
 801d710:	9b04      	ldr	r3, [sp, #16]
 801d712:	4605      	mov	r5, r0
 801d714:	b166      	cbz	r6, 801d730 <_dtoa_r+0x670>
 801d716:	9a06      	ldr	r2, [sp, #24]
 801d718:	2a00      	cmp	r2, #0
 801d71a:	dd09      	ble.n	801d730 <_dtoa_r+0x670>
 801d71c:	42b2      	cmp	r2, r6
 801d71e:	9905      	ldr	r1, [sp, #20]
 801d720:	bfa8      	it	ge
 801d722:	4632      	movge	r2, r6
 801d724:	1a89      	subs	r1, r1, r2
 801d726:	9105      	str	r1, [sp, #20]
 801d728:	9906      	ldr	r1, [sp, #24]
 801d72a:	1ab6      	subs	r6, r6, r2
 801d72c:	1a8a      	subs	r2, r1, r2
 801d72e:	9206      	str	r2, [sp, #24]
 801d730:	b1fb      	cbz	r3, 801d772 <_dtoa_r+0x6b2>
 801d732:	9a08      	ldr	r2, [sp, #32]
 801d734:	2a00      	cmp	r2, #0
 801d736:	f000 80bc 	beq.w	801d8b2 <_dtoa_r+0x7f2>
 801d73a:	b19c      	cbz	r4, 801d764 <_dtoa_r+0x6a4>
 801d73c:	4629      	mov	r1, r5
 801d73e:	4622      	mov	r2, r4
 801d740:	4648      	mov	r0, r9
 801d742:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d744:	f001 fdb2 	bl	801f2ac <__pow5mult>
 801d748:	9a01      	ldr	r2, [sp, #4]
 801d74a:	4601      	mov	r1, r0
 801d74c:	4605      	mov	r5, r0
 801d74e:	4648      	mov	r0, r9
 801d750:	f001 fd02 	bl	801f158 <__multiply>
 801d754:	9901      	ldr	r1, [sp, #4]
 801d756:	9004      	str	r0, [sp, #16]
 801d758:	4648      	mov	r0, r9
 801d75a:	f001 fbe9 	bl	801ef30 <_Bfree>
 801d75e:	9a04      	ldr	r2, [sp, #16]
 801d760:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d762:	9201      	str	r2, [sp, #4]
 801d764:	1b1a      	subs	r2, r3, r4
 801d766:	d004      	beq.n	801d772 <_dtoa_r+0x6b2>
 801d768:	9901      	ldr	r1, [sp, #4]
 801d76a:	4648      	mov	r0, r9
 801d76c:	f001 fd9e 	bl	801f2ac <__pow5mult>
 801d770:	9001      	str	r0, [sp, #4]
 801d772:	2101      	movs	r1, #1
 801d774:	4648      	mov	r0, r9
 801d776:	f001 fcd9 	bl	801f12c <__i2b>
 801d77a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d77c:	4604      	mov	r4, r0
 801d77e:	2b00      	cmp	r3, #0
 801d780:	f000 81d0 	beq.w	801db24 <_dtoa_r+0xa64>
 801d784:	461a      	mov	r2, r3
 801d786:	4601      	mov	r1, r0
 801d788:	4648      	mov	r0, r9
 801d78a:	f001 fd8f 	bl	801f2ac <__pow5mult>
 801d78e:	9b07      	ldr	r3, [sp, #28]
 801d790:	2b01      	cmp	r3, #1
 801d792:	4604      	mov	r4, r0
 801d794:	f300 8095 	bgt.w	801d8c2 <_dtoa_r+0x802>
 801d798:	9b02      	ldr	r3, [sp, #8]
 801d79a:	2b00      	cmp	r3, #0
 801d79c:	f040 808b 	bne.w	801d8b6 <_dtoa_r+0x7f6>
 801d7a0:	9b03      	ldr	r3, [sp, #12]
 801d7a2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801d7a6:	2a00      	cmp	r2, #0
 801d7a8:	f040 8087 	bne.w	801d8ba <_dtoa_r+0x7fa>
 801d7ac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801d7b0:	0d12      	lsrs	r2, r2, #20
 801d7b2:	0512      	lsls	r2, r2, #20
 801d7b4:	2a00      	cmp	r2, #0
 801d7b6:	f000 8082 	beq.w	801d8be <_dtoa_r+0x7fe>
 801d7ba:	9b05      	ldr	r3, [sp, #20]
 801d7bc:	3301      	adds	r3, #1
 801d7be:	9305      	str	r3, [sp, #20]
 801d7c0:	9b06      	ldr	r3, [sp, #24]
 801d7c2:	3301      	adds	r3, #1
 801d7c4:	9306      	str	r3, [sp, #24]
 801d7c6:	2301      	movs	r3, #1
 801d7c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d7ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d7cc:	2b00      	cmp	r3, #0
 801d7ce:	f000 81af 	beq.w	801db30 <_dtoa_r+0xa70>
 801d7d2:	6922      	ldr	r2, [r4, #16]
 801d7d4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801d7d8:	6910      	ldr	r0, [r2, #16]
 801d7da:	f001 fc5b 	bl	801f094 <__hi0bits>
 801d7de:	f1c0 0020 	rsb	r0, r0, #32
 801d7e2:	9b06      	ldr	r3, [sp, #24]
 801d7e4:	4418      	add	r0, r3
 801d7e6:	f010 001f 	ands.w	r0, r0, #31
 801d7ea:	d076      	beq.n	801d8da <_dtoa_r+0x81a>
 801d7ec:	f1c0 0220 	rsb	r2, r0, #32
 801d7f0:	2a04      	cmp	r2, #4
 801d7f2:	dd69      	ble.n	801d8c8 <_dtoa_r+0x808>
 801d7f4:	9b05      	ldr	r3, [sp, #20]
 801d7f6:	f1c0 001c 	rsb	r0, r0, #28
 801d7fa:	4403      	add	r3, r0
 801d7fc:	9305      	str	r3, [sp, #20]
 801d7fe:	9b06      	ldr	r3, [sp, #24]
 801d800:	4406      	add	r6, r0
 801d802:	4403      	add	r3, r0
 801d804:	9306      	str	r3, [sp, #24]
 801d806:	9b05      	ldr	r3, [sp, #20]
 801d808:	2b00      	cmp	r3, #0
 801d80a:	dd05      	ble.n	801d818 <_dtoa_r+0x758>
 801d80c:	9901      	ldr	r1, [sp, #4]
 801d80e:	461a      	mov	r2, r3
 801d810:	4648      	mov	r0, r9
 801d812:	f001 fda5 	bl	801f360 <__lshift>
 801d816:	9001      	str	r0, [sp, #4]
 801d818:	9b06      	ldr	r3, [sp, #24]
 801d81a:	2b00      	cmp	r3, #0
 801d81c:	dd05      	ble.n	801d82a <_dtoa_r+0x76a>
 801d81e:	4621      	mov	r1, r4
 801d820:	461a      	mov	r2, r3
 801d822:	4648      	mov	r0, r9
 801d824:	f001 fd9c 	bl	801f360 <__lshift>
 801d828:	4604      	mov	r4, r0
 801d82a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d82c:	2b00      	cmp	r3, #0
 801d82e:	d056      	beq.n	801d8de <_dtoa_r+0x81e>
 801d830:	9801      	ldr	r0, [sp, #4]
 801d832:	4621      	mov	r1, r4
 801d834:	f001 fe00 	bl	801f438 <__mcmp>
 801d838:	2800      	cmp	r0, #0
 801d83a:	da50      	bge.n	801d8de <_dtoa_r+0x81e>
 801d83c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 801d840:	9304      	str	r3, [sp, #16]
 801d842:	9901      	ldr	r1, [sp, #4]
 801d844:	2300      	movs	r3, #0
 801d846:	220a      	movs	r2, #10
 801d848:	4648      	mov	r0, r9
 801d84a:	f001 fb93 	bl	801ef74 <__multadd>
 801d84e:	9b08      	ldr	r3, [sp, #32]
 801d850:	9001      	str	r0, [sp, #4]
 801d852:	2b00      	cmp	r3, #0
 801d854:	f000 816e 	beq.w	801db34 <_dtoa_r+0xa74>
 801d858:	4629      	mov	r1, r5
 801d85a:	2300      	movs	r3, #0
 801d85c:	220a      	movs	r2, #10
 801d85e:	4648      	mov	r0, r9
 801d860:	f001 fb88 	bl	801ef74 <__multadd>
 801d864:	f1bb 0f00 	cmp.w	fp, #0
 801d868:	4605      	mov	r5, r0
 801d86a:	dc64      	bgt.n	801d936 <_dtoa_r+0x876>
 801d86c:	9b07      	ldr	r3, [sp, #28]
 801d86e:	2b02      	cmp	r3, #2
 801d870:	dc3e      	bgt.n	801d8f0 <_dtoa_r+0x830>
 801d872:	e060      	b.n	801d936 <_dtoa_r+0x876>
 801d874:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d876:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801d87a:	e73c      	b.n	801d6f6 <_dtoa_r+0x636>
 801d87c:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 801d880:	42a3      	cmp	r3, r4
 801d882:	bfbf      	itttt	lt
 801d884:	1ae2      	sublt	r2, r4, r3
 801d886:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801d888:	189b      	addlt	r3, r3, r2
 801d88a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801d88c:	bfae      	itee	ge
 801d88e:	1b1c      	subge	r4, r3, r4
 801d890:	4623      	movlt	r3, r4
 801d892:	2400      	movlt	r4, #0
 801d894:	f1ba 0f00 	cmp.w	sl, #0
 801d898:	bfb5      	itete	lt
 801d89a:	9a05      	ldrlt	r2, [sp, #20]
 801d89c:	9e05      	ldrge	r6, [sp, #20]
 801d89e:	eba2 060a 	sublt.w	r6, r2, sl
 801d8a2:	4652      	movge	r2, sl
 801d8a4:	bfb8      	it	lt
 801d8a6:	2200      	movlt	r2, #0
 801d8a8:	e727      	b.n	801d6fa <_dtoa_r+0x63a>
 801d8aa:	9e05      	ldr	r6, [sp, #20]
 801d8ac:	9d08      	ldr	r5, [sp, #32]
 801d8ae:	461c      	mov	r4, r3
 801d8b0:	e730      	b.n	801d714 <_dtoa_r+0x654>
 801d8b2:	461a      	mov	r2, r3
 801d8b4:	e758      	b.n	801d768 <_dtoa_r+0x6a8>
 801d8b6:	2300      	movs	r3, #0
 801d8b8:	e786      	b.n	801d7c8 <_dtoa_r+0x708>
 801d8ba:	9b02      	ldr	r3, [sp, #8]
 801d8bc:	e784      	b.n	801d7c8 <_dtoa_r+0x708>
 801d8be:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d8c0:	e783      	b.n	801d7ca <_dtoa_r+0x70a>
 801d8c2:	2300      	movs	r3, #0
 801d8c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d8c6:	e784      	b.n	801d7d2 <_dtoa_r+0x712>
 801d8c8:	d09d      	beq.n	801d806 <_dtoa_r+0x746>
 801d8ca:	9b05      	ldr	r3, [sp, #20]
 801d8cc:	321c      	adds	r2, #28
 801d8ce:	4413      	add	r3, r2
 801d8d0:	9305      	str	r3, [sp, #20]
 801d8d2:	9b06      	ldr	r3, [sp, #24]
 801d8d4:	4416      	add	r6, r2
 801d8d6:	4413      	add	r3, r2
 801d8d8:	e794      	b.n	801d804 <_dtoa_r+0x744>
 801d8da:	4602      	mov	r2, r0
 801d8dc:	e7f5      	b.n	801d8ca <_dtoa_r+0x80a>
 801d8de:	f1ba 0f00 	cmp.w	sl, #0
 801d8e2:	f8cd 8010 	str.w	r8, [sp, #16]
 801d8e6:	46d3      	mov	fp, sl
 801d8e8:	dc21      	bgt.n	801d92e <_dtoa_r+0x86e>
 801d8ea:	9b07      	ldr	r3, [sp, #28]
 801d8ec:	2b02      	cmp	r3, #2
 801d8ee:	dd1e      	ble.n	801d92e <_dtoa_r+0x86e>
 801d8f0:	f1bb 0f00 	cmp.w	fp, #0
 801d8f4:	f47f aeb7 	bne.w	801d666 <_dtoa_r+0x5a6>
 801d8f8:	4621      	mov	r1, r4
 801d8fa:	465b      	mov	r3, fp
 801d8fc:	2205      	movs	r2, #5
 801d8fe:	4648      	mov	r0, r9
 801d900:	f001 fb38 	bl	801ef74 <__multadd>
 801d904:	4601      	mov	r1, r0
 801d906:	4604      	mov	r4, r0
 801d908:	9801      	ldr	r0, [sp, #4]
 801d90a:	f001 fd95 	bl	801f438 <__mcmp>
 801d90e:	2800      	cmp	r0, #0
 801d910:	f77f aea9 	ble.w	801d666 <_dtoa_r+0x5a6>
 801d914:	463e      	mov	r6, r7
 801d916:	2331      	movs	r3, #49	@ 0x31
 801d918:	f806 3b01 	strb.w	r3, [r6], #1
 801d91c:	9b04      	ldr	r3, [sp, #16]
 801d91e:	3301      	adds	r3, #1
 801d920:	9304      	str	r3, [sp, #16]
 801d922:	e6a4      	b.n	801d66e <_dtoa_r+0x5ae>
 801d924:	f8cd 8010 	str.w	r8, [sp, #16]
 801d928:	4654      	mov	r4, sl
 801d92a:	4625      	mov	r5, r4
 801d92c:	e7f2      	b.n	801d914 <_dtoa_r+0x854>
 801d92e:	9b08      	ldr	r3, [sp, #32]
 801d930:	2b00      	cmp	r3, #0
 801d932:	f000 8103 	beq.w	801db3c <_dtoa_r+0xa7c>
 801d936:	2e00      	cmp	r6, #0
 801d938:	dd05      	ble.n	801d946 <_dtoa_r+0x886>
 801d93a:	4629      	mov	r1, r5
 801d93c:	4632      	mov	r2, r6
 801d93e:	4648      	mov	r0, r9
 801d940:	f001 fd0e 	bl	801f360 <__lshift>
 801d944:	4605      	mov	r5, r0
 801d946:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d948:	2b00      	cmp	r3, #0
 801d94a:	d058      	beq.n	801d9fe <_dtoa_r+0x93e>
 801d94c:	6869      	ldr	r1, [r5, #4]
 801d94e:	4648      	mov	r0, r9
 801d950:	f001 faae 	bl	801eeb0 <_Balloc>
 801d954:	4606      	mov	r6, r0
 801d956:	b928      	cbnz	r0, 801d964 <_dtoa_r+0x8a4>
 801d958:	4b82      	ldr	r3, [pc, #520]	@ (801db64 <_dtoa_r+0xaa4>)
 801d95a:	4602      	mov	r2, r0
 801d95c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801d960:	f7ff bbc7 	b.w	801d0f2 <_dtoa_r+0x32>
 801d964:	692a      	ldr	r2, [r5, #16]
 801d966:	3202      	adds	r2, #2
 801d968:	0092      	lsls	r2, r2, #2
 801d96a:	f105 010c 	add.w	r1, r5, #12
 801d96e:	300c      	adds	r0, #12
 801d970:	f7ff faf5 	bl	801cf5e <memcpy>
 801d974:	2201      	movs	r2, #1
 801d976:	4631      	mov	r1, r6
 801d978:	4648      	mov	r0, r9
 801d97a:	f001 fcf1 	bl	801f360 <__lshift>
 801d97e:	1c7b      	adds	r3, r7, #1
 801d980:	9305      	str	r3, [sp, #20]
 801d982:	eb07 030b 	add.w	r3, r7, fp
 801d986:	9309      	str	r3, [sp, #36]	@ 0x24
 801d988:	9b02      	ldr	r3, [sp, #8]
 801d98a:	f003 0301 	and.w	r3, r3, #1
 801d98e:	46a8      	mov	r8, r5
 801d990:	9308      	str	r3, [sp, #32]
 801d992:	4605      	mov	r5, r0
 801d994:	9b05      	ldr	r3, [sp, #20]
 801d996:	9801      	ldr	r0, [sp, #4]
 801d998:	4621      	mov	r1, r4
 801d99a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 801d99e:	f7ff fb05 	bl	801cfac <quorem>
 801d9a2:	4641      	mov	r1, r8
 801d9a4:	9002      	str	r0, [sp, #8]
 801d9a6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801d9aa:	9801      	ldr	r0, [sp, #4]
 801d9ac:	f001 fd44 	bl	801f438 <__mcmp>
 801d9b0:	462a      	mov	r2, r5
 801d9b2:	9006      	str	r0, [sp, #24]
 801d9b4:	4621      	mov	r1, r4
 801d9b6:	4648      	mov	r0, r9
 801d9b8:	f001 fd5a 	bl	801f470 <__mdiff>
 801d9bc:	68c2      	ldr	r2, [r0, #12]
 801d9be:	4606      	mov	r6, r0
 801d9c0:	b9fa      	cbnz	r2, 801da02 <_dtoa_r+0x942>
 801d9c2:	4601      	mov	r1, r0
 801d9c4:	9801      	ldr	r0, [sp, #4]
 801d9c6:	f001 fd37 	bl	801f438 <__mcmp>
 801d9ca:	4602      	mov	r2, r0
 801d9cc:	4631      	mov	r1, r6
 801d9ce:	4648      	mov	r0, r9
 801d9d0:	920a      	str	r2, [sp, #40]	@ 0x28
 801d9d2:	f001 faad 	bl	801ef30 <_Bfree>
 801d9d6:	9b07      	ldr	r3, [sp, #28]
 801d9d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d9da:	9e05      	ldr	r6, [sp, #20]
 801d9dc:	ea43 0102 	orr.w	r1, r3, r2
 801d9e0:	9b08      	ldr	r3, [sp, #32]
 801d9e2:	4319      	orrs	r1, r3
 801d9e4:	d10f      	bne.n	801da06 <_dtoa_r+0x946>
 801d9e6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801d9ea:	d028      	beq.n	801da3e <_dtoa_r+0x97e>
 801d9ec:	9b06      	ldr	r3, [sp, #24]
 801d9ee:	2b00      	cmp	r3, #0
 801d9f0:	dd02      	ble.n	801d9f8 <_dtoa_r+0x938>
 801d9f2:	9b02      	ldr	r3, [sp, #8]
 801d9f4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801d9f8:	f88b a000 	strb.w	sl, [fp]
 801d9fc:	e639      	b.n	801d672 <_dtoa_r+0x5b2>
 801d9fe:	4628      	mov	r0, r5
 801da00:	e7bd      	b.n	801d97e <_dtoa_r+0x8be>
 801da02:	2201      	movs	r2, #1
 801da04:	e7e2      	b.n	801d9cc <_dtoa_r+0x90c>
 801da06:	9b06      	ldr	r3, [sp, #24]
 801da08:	2b00      	cmp	r3, #0
 801da0a:	db04      	blt.n	801da16 <_dtoa_r+0x956>
 801da0c:	9907      	ldr	r1, [sp, #28]
 801da0e:	430b      	orrs	r3, r1
 801da10:	9908      	ldr	r1, [sp, #32]
 801da12:	430b      	orrs	r3, r1
 801da14:	d120      	bne.n	801da58 <_dtoa_r+0x998>
 801da16:	2a00      	cmp	r2, #0
 801da18:	ddee      	ble.n	801d9f8 <_dtoa_r+0x938>
 801da1a:	9901      	ldr	r1, [sp, #4]
 801da1c:	2201      	movs	r2, #1
 801da1e:	4648      	mov	r0, r9
 801da20:	f001 fc9e 	bl	801f360 <__lshift>
 801da24:	4621      	mov	r1, r4
 801da26:	9001      	str	r0, [sp, #4]
 801da28:	f001 fd06 	bl	801f438 <__mcmp>
 801da2c:	2800      	cmp	r0, #0
 801da2e:	dc03      	bgt.n	801da38 <_dtoa_r+0x978>
 801da30:	d1e2      	bne.n	801d9f8 <_dtoa_r+0x938>
 801da32:	f01a 0f01 	tst.w	sl, #1
 801da36:	d0df      	beq.n	801d9f8 <_dtoa_r+0x938>
 801da38:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801da3c:	d1d9      	bne.n	801d9f2 <_dtoa_r+0x932>
 801da3e:	2339      	movs	r3, #57	@ 0x39
 801da40:	f88b 3000 	strb.w	r3, [fp]
 801da44:	4633      	mov	r3, r6
 801da46:	461e      	mov	r6, r3
 801da48:	3b01      	subs	r3, #1
 801da4a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801da4e:	2a39      	cmp	r2, #57	@ 0x39
 801da50:	d053      	beq.n	801dafa <_dtoa_r+0xa3a>
 801da52:	3201      	adds	r2, #1
 801da54:	701a      	strb	r2, [r3, #0]
 801da56:	e60c      	b.n	801d672 <_dtoa_r+0x5b2>
 801da58:	2a00      	cmp	r2, #0
 801da5a:	dd07      	ble.n	801da6c <_dtoa_r+0x9ac>
 801da5c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801da60:	d0ed      	beq.n	801da3e <_dtoa_r+0x97e>
 801da62:	f10a 0301 	add.w	r3, sl, #1
 801da66:	f88b 3000 	strb.w	r3, [fp]
 801da6a:	e602      	b.n	801d672 <_dtoa_r+0x5b2>
 801da6c:	9b05      	ldr	r3, [sp, #20]
 801da6e:	9a05      	ldr	r2, [sp, #20]
 801da70:	f803 ac01 	strb.w	sl, [r3, #-1]
 801da74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801da76:	4293      	cmp	r3, r2
 801da78:	d029      	beq.n	801dace <_dtoa_r+0xa0e>
 801da7a:	9901      	ldr	r1, [sp, #4]
 801da7c:	2300      	movs	r3, #0
 801da7e:	220a      	movs	r2, #10
 801da80:	4648      	mov	r0, r9
 801da82:	f001 fa77 	bl	801ef74 <__multadd>
 801da86:	45a8      	cmp	r8, r5
 801da88:	9001      	str	r0, [sp, #4]
 801da8a:	f04f 0300 	mov.w	r3, #0
 801da8e:	f04f 020a 	mov.w	r2, #10
 801da92:	4641      	mov	r1, r8
 801da94:	4648      	mov	r0, r9
 801da96:	d107      	bne.n	801daa8 <_dtoa_r+0x9e8>
 801da98:	f001 fa6c 	bl	801ef74 <__multadd>
 801da9c:	4680      	mov	r8, r0
 801da9e:	4605      	mov	r5, r0
 801daa0:	9b05      	ldr	r3, [sp, #20]
 801daa2:	3301      	adds	r3, #1
 801daa4:	9305      	str	r3, [sp, #20]
 801daa6:	e775      	b.n	801d994 <_dtoa_r+0x8d4>
 801daa8:	f001 fa64 	bl	801ef74 <__multadd>
 801daac:	4629      	mov	r1, r5
 801daae:	4680      	mov	r8, r0
 801dab0:	2300      	movs	r3, #0
 801dab2:	220a      	movs	r2, #10
 801dab4:	4648      	mov	r0, r9
 801dab6:	f001 fa5d 	bl	801ef74 <__multadd>
 801daba:	4605      	mov	r5, r0
 801dabc:	e7f0      	b.n	801daa0 <_dtoa_r+0x9e0>
 801dabe:	f1bb 0f00 	cmp.w	fp, #0
 801dac2:	bfcc      	ite	gt
 801dac4:	465e      	movgt	r6, fp
 801dac6:	2601      	movle	r6, #1
 801dac8:	443e      	add	r6, r7
 801daca:	f04f 0800 	mov.w	r8, #0
 801dace:	9901      	ldr	r1, [sp, #4]
 801dad0:	2201      	movs	r2, #1
 801dad2:	4648      	mov	r0, r9
 801dad4:	f001 fc44 	bl	801f360 <__lshift>
 801dad8:	4621      	mov	r1, r4
 801dada:	9001      	str	r0, [sp, #4]
 801dadc:	f001 fcac 	bl	801f438 <__mcmp>
 801dae0:	2800      	cmp	r0, #0
 801dae2:	dcaf      	bgt.n	801da44 <_dtoa_r+0x984>
 801dae4:	d102      	bne.n	801daec <_dtoa_r+0xa2c>
 801dae6:	f01a 0f01 	tst.w	sl, #1
 801daea:	d1ab      	bne.n	801da44 <_dtoa_r+0x984>
 801daec:	4633      	mov	r3, r6
 801daee:	461e      	mov	r6, r3
 801daf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801daf4:	2a30      	cmp	r2, #48	@ 0x30
 801daf6:	d0fa      	beq.n	801daee <_dtoa_r+0xa2e>
 801daf8:	e5bb      	b.n	801d672 <_dtoa_r+0x5b2>
 801dafa:	429f      	cmp	r7, r3
 801dafc:	d1a3      	bne.n	801da46 <_dtoa_r+0x986>
 801dafe:	9b04      	ldr	r3, [sp, #16]
 801db00:	3301      	adds	r3, #1
 801db02:	9304      	str	r3, [sp, #16]
 801db04:	2331      	movs	r3, #49	@ 0x31
 801db06:	703b      	strb	r3, [r7, #0]
 801db08:	e5b3      	b.n	801d672 <_dtoa_r+0x5b2>
 801db0a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801db0c:	4f16      	ldr	r7, [pc, #88]	@ (801db68 <_dtoa_r+0xaa8>)
 801db0e:	b11b      	cbz	r3, 801db18 <_dtoa_r+0xa58>
 801db10:	f107 0308 	add.w	r3, r7, #8
 801db14:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801db16:	6013      	str	r3, [r2, #0]
 801db18:	4638      	mov	r0, r7
 801db1a:	b011      	add	sp, #68	@ 0x44
 801db1c:	ecbd 8b02 	vpop	{d8}
 801db20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db24:	9b07      	ldr	r3, [sp, #28]
 801db26:	2b01      	cmp	r3, #1
 801db28:	f77f ae36 	ble.w	801d798 <_dtoa_r+0x6d8>
 801db2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801db2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801db30:	2001      	movs	r0, #1
 801db32:	e656      	b.n	801d7e2 <_dtoa_r+0x722>
 801db34:	f1bb 0f00 	cmp.w	fp, #0
 801db38:	f77f aed7 	ble.w	801d8ea <_dtoa_r+0x82a>
 801db3c:	463e      	mov	r6, r7
 801db3e:	9801      	ldr	r0, [sp, #4]
 801db40:	4621      	mov	r1, r4
 801db42:	f7ff fa33 	bl	801cfac <quorem>
 801db46:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801db4a:	f806 ab01 	strb.w	sl, [r6], #1
 801db4e:	1bf2      	subs	r2, r6, r7
 801db50:	4593      	cmp	fp, r2
 801db52:	ddb4      	ble.n	801dabe <_dtoa_r+0x9fe>
 801db54:	9901      	ldr	r1, [sp, #4]
 801db56:	2300      	movs	r3, #0
 801db58:	220a      	movs	r2, #10
 801db5a:	4648      	mov	r0, r9
 801db5c:	f001 fa0a 	bl	801ef74 <__multadd>
 801db60:	9001      	str	r0, [sp, #4]
 801db62:	e7ec      	b.n	801db3e <_dtoa_r+0xa7e>
 801db64:	080209fd 	.word	0x080209fd
 801db68:	08020981 	.word	0x08020981

0801db6c <_free_r>:
 801db6c:	b538      	push	{r3, r4, r5, lr}
 801db6e:	4605      	mov	r5, r0
 801db70:	2900      	cmp	r1, #0
 801db72:	d041      	beq.n	801dbf8 <_free_r+0x8c>
 801db74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801db78:	1f0c      	subs	r4, r1, #4
 801db7a:	2b00      	cmp	r3, #0
 801db7c:	bfb8      	it	lt
 801db7e:	18e4      	addlt	r4, r4, r3
 801db80:	f001 f98a 	bl	801ee98 <__malloc_lock>
 801db84:	4a1d      	ldr	r2, [pc, #116]	@ (801dbfc <_free_r+0x90>)
 801db86:	6813      	ldr	r3, [r2, #0]
 801db88:	b933      	cbnz	r3, 801db98 <_free_r+0x2c>
 801db8a:	6063      	str	r3, [r4, #4]
 801db8c:	6014      	str	r4, [r2, #0]
 801db8e:	4628      	mov	r0, r5
 801db90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801db94:	f001 b986 	b.w	801eea4 <__malloc_unlock>
 801db98:	42a3      	cmp	r3, r4
 801db9a:	d908      	bls.n	801dbae <_free_r+0x42>
 801db9c:	6820      	ldr	r0, [r4, #0]
 801db9e:	1821      	adds	r1, r4, r0
 801dba0:	428b      	cmp	r3, r1
 801dba2:	bf01      	itttt	eq
 801dba4:	6819      	ldreq	r1, [r3, #0]
 801dba6:	685b      	ldreq	r3, [r3, #4]
 801dba8:	1809      	addeq	r1, r1, r0
 801dbaa:	6021      	streq	r1, [r4, #0]
 801dbac:	e7ed      	b.n	801db8a <_free_r+0x1e>
 801dbae:	461a      	mov	r2, r3
 801dbb0:	685b      	ldr	r3, [r3, #4]
 801dbb2:	b10b      	cbz	r3, 801dbb8 <_free_r+0x4c>
 801dbb4:	42a3      	cmp	r3, r4
 801dbb6:	d9fa      	bls.n	801dbae <_free_r+0x42>
 801dbb8:	6811      	ldr	r1, [r2, #0]
 801dbba:	1850      	adds	r0, r2, r1
 801dbbc:	42a0      	cmp	r0, r4
 801dbbe:	d10b      	bne.n	801dbd8 <_free_r+0x6c>
 801dbc0:	6820      	ldr	r0, [r4, #0]
 801dbc2:	4401      	add	r1, r0
 801dbc4:	1850      	adds	r0, r2, r1
 801dbc6:	4283      	cmp	r3, r0
 801dbc8:	6011      	str	r1, [r2, #0]
 801dbca:	d1e0      	bne.n	801db8e <_free_r+0x22>
 801dbcc:	6818      	ldr	r0, [r3, #0]
 801dbce:	685b      	ldr	r3, [r3, #4]
 801dbd0:	6053      	str	r3, [r2, #4]
 801dbd2:	4408      	add	r0, r1
 801dbd4:	6010      	str	r0, [r2, #0]
 801dbd6:	e7da      	b.n	801db8e <_free_r+0x22>
 801dbd8:	d902      	bls.n	801dbe0 <_free_r+0x74>
 801dbda:	230c      	movs	r3, #12
 801dbdc:	602b      	str	r3, [r5, #0]
 801dbde:	e7d6      	b.n	801db8e <_free_r+0x22>
 801dbe0:	6820      	ldr	r0, [r4, #0]
 801dbe2:	1821      	adds	r1, r4, r0
 801dbe4:	428b      	cmp	r3, r1
 801dbe6:	bf04      	itt	eq
 801dbe8:	6819      	ldreq	r1, [r3, #0]
 801dbea:	685b      	ldreq	r3, [r3, #4]
 801dbec:	6063      	str	r3, [r4, #4]
 801dbee:	bf04      	itt	eq
 801dbf0:	1809      	addeq	r1, r1, r0
 801dbf2:	6021      	streq	r1, [r4, #0]
 801dbf4:	6054      	str	r4, [r2, #4]
 801dbf6:	e7ca      	b.n	801db8e <_free_r+0x22>
 801dbf8:	bd38      	pop	{r3, r4, r5, pc}
 801dbfa:	bf00      	nop
 801dbfc:	24005e5c 	.word	0x24005e5c

0801dc00 <rshift>:
 801dc00:	6903      	ldr	r3, [r0, #16]
 801dc02:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801dc06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dc0a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801dc0e:	f100 0414 	add.w	r4, r0, #20
 801dc12:	dd45      	ble.n	801dca0 <rshift+0xa0>
 801dc14:	f011 011f 	ands.w	r1, r1, #31
 801dc18:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801dc1c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801dc20:	d10c      	bne.n	801dc3c <rshift+0x3c>
 801dc22:	f100 0710 	add.w	r7, r0, #16
 801dc26:	4629      	mov	r1, r5
 801dc28:	42b1      	cmp	r1, r6
 801dc2a:	d334      	bcc.n	801dc96 <rshift+0x96>
 801dc2c:	1a9b      	subs	r3, r3, r2
 801dc2e:	009b      	lsls	r3, r3, #2
 801dc30:	1eea      	subs	r2, r5, #3
 801dc32:	4296      	cmp	r6, r2
 801dc34:	bf38      	it	cc
 801dc36:	2300      	movcc	r3, #0
 801dc38:	4423      	add	r3, r4
 801dc3a:	e015      	b.n	801dc68 <rshift+0x68>
 801dc3c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801dc40:	f1c1 0820 	rsb	r8, r1, #32
 801dc44:	40cf      	lsrs	r7, r1
 801dc46:	f105 0e04 	add.w	lr, r5, #4
 801dc4a:	46a1      	mov	r9, r4
 801dc4c:	4576      	cmp	r6, lr
 801dc4e:	46f4      	mov	ip, lr
 801dc50:	d815      	bhi.n	801dc7e <rshift+0x7e>
 801dc52:	1a9a      	subs	r2, r3, r2
 801dc54:	0092      	lsls	r2, r2, #2
 801dc56:	3a04      	subs	r2, #4
 801dc58:	3501      	adds	r5, #1
 801dc5a:	42ae      	cmp	r6, r5
 801dc5c:	bf38      	it	cc
 801dc5e:	2200      	movcc	r2, #0
 801dc60:	18a3      	adds	r3, r4, r2
 801dc62:	50a7      	str	r7, [r4, r2]
 801dc64:	b107      	cbz	r7, 801dc68 <rshift+0x68>
 801dc66:	3304      	adds	r3, #4
 801dc68:	1b1a      	subs	r2, r3, r4
 801dc6a:	42a3      	cmp	r3, r4
 801dc6c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801dc70:	bf08      	it	eq
 801dc72:	2300      	moveq	r3, #0
 801dc74:	6102      	str	r2, [r0, #16]
 801dc76:	bf08      	it	eq
 801dc78:	6143      	streq	r3, [r0, #20]
 801dc7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dc7e:	f8dc c000 	ldr.w	ip, [ip]
 801dc82:	fa0c fc08 	lsl.w	ip, ip, r8
 801dc86:	ea4c 0707 	orr.w	r7, ip, r7
 801dc8a:	f849 7b04 	str.w	r7, [r9], #4
 801dc8e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801dc92:	40cf      	lsrs	r7, r1
 801dc94:	e7da      	b.n	801dc4c <rshift+0x4c>
 801dc96:	f851 cb04 	ldr.w	ip, [r1], #4
 801dc9a:	f847 cf04 	str.w	ip, [r7, #4]!
 801dc9e:	e7c3      	b.n	801dc28 <rshift+0x28>
 801dca0:	4623      	mov	r3, r4
 801dca2:	e7e1      	b.n	801dc68 <rshift+0x68>

0801dca4 <__hexdig_fun>:
 801dca4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801dca8:	2b09      	cmp	r3, #9
 801dcaa:	d802      	bhi.n	801dcb2 <__hexdig_fun+0xe>
 801dcac:	3820      	subs	r0, #32
 801dcae:	b2c0      	uxtb	r0, r0
 801dcb0:	4770      	bx	lr
 801dcb2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801dcb6:	2b05      	cmp	r3, #5
 801dcb8:	d801      	bhi.n	801dcbe <__hexdig_fun+0x1a>
 801dcba:	3847      	subs	r0, #71	@ 0x47
 801dcbc:	e7f7      	b.n	801dcae <__hexdig_fun+0xa>
 801dcbe:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801dcc2:	2b05      	cmp	r3, #5
 801dcc4:	d801      	bhi.n	801dcca <__hexdig_fun+0x26>
 801dcc6:	3827      	subs	r0, #39	@ 0x27
 801dcc8:	e7f1      	b.n	801dcae <__hexdig_fun+0xa>
 801dcca:	2000      	movs	r0, #0
 801dccc:	4770      	bx	lr
	...

0801dcd0 <__gethex>:
 801dcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dcd4:	b085      	sub	sp, #20
 801dcd6:	468a      	mov	sl, r1
 801dcd8:	9302      	str	r3, [sp, #8]
 801dcda:	680b      	ldr	r3, [r1, #0]
 801dcdc:	9001      	str	r0, [sp, #4]
 801dcde:	4690      	mov	r8, r2
 801dce0:	1c9c      	adds	r4, r3, #2
 801dce2:	46a1      	mov	r9, r4
 801dce4:	f814 0b01 	ldrb.w	r0, [r4], #1
 801dce8:	2830      	cmp	r0, #48	@ 0x30
 801dcea:	d0fa      	beq.n	801dce2 <__gethex+0x12>
 801dcec:	eba9 0303 	sub.w	r3, r9, r3
 801dcf0:	f1a3 0b02 	sub.w	fp, r3, #2
 801dcf4:	f7ff ffd6 	bl	801dca4 <__hexdig_fun>
 801dcf8:	4605      	mov	r5, r0
 801dcfa:	2800      	cmp	r0, #0
 801dcfc:	d168      	bne.n	801ddd0 <__gethex+0x100>
 801dcfe:	49a0      	ldr	r1, [pc, #640]	@ (801df80 <__gethex+0x2b0>)
 801dd00:	2201      	movs	r2, #1
 801dd02:	4648      	mov	r0, r9
 801dd04:	f7ff f89a 	bl	801ce3c <strncmp>
 801dd08:	4607      	mov	r7, r0
 801dd0a:	2800      	cmp	r0, #0
 801dd0c:	d167      	bne.n	801ddde <__gethex+0x10e>
 801dd0e:	f899 0001 	ldrb.w	r0, [r9, #1]
 801dd12:	4626      	mov	r6, r4
 801dd14:	f7ff ffc6 	bl	801dca4 <__hexdig_fun>
 801dd18:	2800      	cmp	r0, #0
 801dd1a:	d062      	beq.n	801dde2 <__gethex+0x112>
 801dd1c:	4623      	mov	r3, r4
 801dd1e:	7818      	ldrb	r0, [r3, #0]
 801dd20:	2830      	cmp	r0, #48	@ 0x30
 801dd22:	4699      	mov	r9, r3
 801dd24:	f103 0301 	add.w	r3, r3, #1
 801dd28:	d0f9      	beq.n	801dd1e <__gethex+0x4e>
 801dd2a:	f7ff ffbb 	bl	801dca4 <__hexdig_fun>
 801dd2e:	fab0 f580 	clz	r5, r0
 801dd32:	096d      	lsrs	r5, r5, #5
 801dd34:	f04f 0b01 	mov.w	fp, #1
 801dd38:	464a      	mov	r2, r9
 801dd3a:	4616      	mov	r6, r2
 801dd3c:	3201      	adds	r2, #1
 801dd3e:	7830      	ldrb	r0, [r6, #0]
 801dd40:	f7ff ffb0 	bl	801dca4 <__hexdig_fun>
 801dd44:	2800      	cmp	r0, #0
 801dd46:	d1f8      	bne.n	801dd3a <__gethex+0x6a>
 801dd48:	498d      	ldr	r1, [pc, #564]	@ (801df80 <__gethex+0x2b0>)
 801dd4a:	2201      	movs	r2, #1
 801dd4c:	4630      	mov	r0, r6
 801dd4e:	f7ff f875 	bl	801ce3c <strncmp>
 801dd52:	2800      	cmp	r0, #0
 801dd54:	d13f      	bne.n	801ddd6 <__gethex+0x106>
 801dd56:	b944      	cbnz	r4, 801dd6a <__gethex+0x9a>
 801dd58:	1c74      	adds	r4, r6, #1
 801dd5a:	4622      	mov	r2, r4
 801dd5c:	4616      	mov	r6, r2
 801dd5e:	3201      	adds	r2, #1
 801dd60:	7830      	ldrb	r0, [r6, #0]
 801dd62:	f7ff ff9f 	bl	801dca4 <__hexdig_fun>
 801dd66:	2800      	cmp	r0, #0
 801dd68:	d1f8      	bne.n	801dd5c <__gethex+0x8c>
 801dd6a:	1ba4      	subs	r4, r4, r6
 801dd6c:	00a7      	lsls	r7, r4, #2
 801dd6e:	7833      	ldrb	r3, [r6, #0]
 801dd70:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801dd74:	2b50      	cmp	r3, #80	@ 0x50
 801dd76:	d13e      	bne.n	801ddf6 <__gethex+0x126>
 801dd78:	7873      	ldrb	r3, [r6, #1]
 801dd7a:	2b2b      	cmp	r3, #43	@ 0x2b
 801dd7c:	d033      	beq.n	801dde6 <__gethex+0x116>
 801dd7e:	2b2d      	cmp	r3, #45	@ 0x2d
 801dd80:	d034      	beq.n	801ddec <__gethex+0x11c>
 801dd82:	1c71      	adds	r1, r6, #1
 801dd84:	2400      	movs	r4, #0
 801dd86:	7808      	ldrb	r0, [r1, #0]
 801dd88:	f7ff ff8c 	bl	801dca4 <__hexdig_fun>
 801dd8c:	1e43      	subs	r3, r0, #1
 801dd8e:	b2db      	uxtb	r3, r3
 801dd90:	2b18      	cmp	r3, #24
 801dd92:	d830      	bhi.n	801ddf6 <__gethex+0x126>
 801dd94:	f1a0 0210 	sub.w	r2, r0, #16
 801dd98:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801dd9c:	f7ff ff82 	bl	801dca4 <__hexdig_fun>
 801dda0:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 801dda4:	fa5f fc8c 	uxtb.w	ip, ip
 801dda8:	f1bc 0f18 	cmp.w	ip, #24
 801ddac:	f04f 030a 	mov.w	r3, #10
 801ddb0:	d91e      	bls.n	801ddf0 <__gethex+0x120>
 801ddb2:	b104      	cbz	r4, 801ddb6 <__gethex+0xe6>
 801ddb4:	4252      	negs	r2, r2
 801ddb6:	4417      	add	r7, r2
 801ddb8:	f8ca 1000 	str.w	r1, [sl]
 801ddbc:	b1ed      	cbz	r5, 801ddfa <__gethex+0x12a>
 801ddbe:	f1bb 0f00 	cmp.w	fp, #0
 801ddc2:	bf0c      	ite	eq
 801ddc4:	2506      	moveq	r5, #6
 801ddc6:	2500      	movne	r5, #0
 801ddc8:	4628      	mov	r0, r5
 801ddca:	b005      	add	sp, #20
 801ddcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddd0:	2500      	movs	r5, #0
 801ddd2:	462c      	mov	r4, r5
 801ddd4:	e7b0      	b.n	801dd38 <__gethex+0x68>
 801ddd6:	2c00      	cmp	r4, #0
 801ddd8:	d1c7      	bne.n	801dd6a <__gethex+0x9a>
 801ddda:	4627      	mov	r7, r4
 801dddc:	e7c7      	b.n	801dd6e <__gethex+0x9e>
 801ddde:	464e      	mov	r6, r9
 801dde0:	462f      	mov	r7, r5
 801dde2:	2501      	movs	r5, #1
 801dde4:	e7c3      	b.n	801dd6e <__gethex+0x9e>
 801dde6:	2400      	movs	r4, #0
 801dde8:	1cb1      	adds	r1, r6, #2
 801ddea:	e7cc      	b.n	801dd86 <__gethex+0xb6>
 801ddec:	2401      	movs	r4, #1
 801ddee:	e7fb      	b.n	801dde8 <__gethex+0x118>
 801ddf0:	fb03 0002 	mla	r0, r3, r2, r0
 801ddf4:	e7ce      	b.n	801dd94 <__gethex+0xc4>
 801ddf6:	4631      	mov	r1, r6
 801ddf8:	e7de      	b.n	801ddb8 <__gethex+0xe8>
 801ddfa:	eba6 0309 	sub.w	r3, r6, r9
 801ddfe:	3b01      	subs	r3, #1
 801de00:	4629      	mov	r1, r5
 801de02:	2b07      	cmp	r3, #7
 801de04:	dc0a      	bgt.n	801de1c <__gethex+0x14c>
 801de06:	9801      	ldr	r0, [sp, #4]
 801de08:	f001 f852 	bl	801eeb0 <_Balloc>
 801de0c:	4604      	mov	r4, r0
 801de0e:	b940      	cbnz	r0, 801de22 <__gethex+0x152>
 801de10:	4b5c      	ldr	r3, [pc, #368]	@ (801df84 <__gethex+0x2b4>)
 801de12:	4602      	mov	r2, r0
 801de14:	21e4      	movs	r1, #228	@ 0xe4
 801de16:	485c      	ldr	r0, [pc, #368]	@ (801df88 <__gethex+0x2b8>)
 801de18:	f001 fe0a 	bl	801fa30 <__assert_func>
 801de1c:	3101      	adds	r1, #1
 801de1e:	105b      	asrs	r3, r3, #1
 801de20:	e7ef      	b.n	801de02 <__gethex+0x132>
 801de22:	f100 0a14 	add.w	sl, r0, #20
 801de26:	2300      	movs	r3, #0
 801de28:	4655      	mov	r5, sl
 801de2a:	469b      	mov	fp, r3
 801de2c:	45b1      	cmp	r9, r6
 801de2e:	d337      	bcc.n	801dea0 <__gethex+0x1d0>
 801de30:	f845 bb04 	str.w	fp, [r5], #4
 801de34:	eba5 050a 	sub.w	r5, r5, sl
 801de38:	10ad      	asrs	r5, r5, #2
 801de3a:	6125      	str	r5, [r4, #16]
 801de3c:	4658      	mov	r0, fp
 801de3e:	f001 f929 	bl	801f094 <__hi0bits>
 801de42:	016d      	lsls	r5, r5, #5
 801de44:	f8d8 6000 	ldr.w	r6, [r8]
 801de48:	1a2d      	subs	r5, r5, r0
 801de4a:	42b5      	cmp	r5, r6
 801de4c:	dd54      	ble.n	801def8 <__gethex+0x228>
 801de4e:	1bad      	subs	r5, r5, r6
 801de50:	4629      	mov	r1, r5
 801de52:	4620      	mov	r0, r4
 801de54:	f001 fcba 	bl	801f7cc <__any_on>
 801de58:	4681      	mov	r9, r0
 801de5a:	b178      	cbz	r0, 801de7c <__gethex+0x1ac>
 801de5c:	1e6b      	subs	r3, r5, #1
 801de5e:	1159      	asrs	r1, r3, #5
 801de60:	f003 021f 	and.w	r2, r3, #31
 801de64:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801de68:	f04f 0901 	mov.w	r9, #1
 801de6c:	fa09 f202 	lsl.w	r2, r9, r2
 801de70:	420a      	tst	r2, r1
 801de72:	d003      	beq.n	801de7c <__gethex+0x1ac>
 801de74:	454b      	cmp	r3, r9
 801de76:	dc36      	bgt.n	801dee6 <__gethex+0x216>
 801de78:	f04f 0902 	mov.w	r9, #2
 801de7c:	4629      	mov	r1, r5
 801de7e:	4620      	mov	r0, r4
 801de80:	f7ff febe 	bl	801dc00 <rshift>
 801de84:	442f      	add	r7, r5
 801de86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801de8a:	42bb      	cmp	r3, r7
 801de8c:	da42      	bge.n	801df14 <__gethex+0x244>
 801de8e:	9801      	ldr	r0, [sp, #4]
 801de90:	4621      	mov	r1, r4
 801de92:	f001 f84d 	bl	801ef30 <_Bfree>
 801de96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801de98:	2300      	movs	r3, #0
 801de9a:	6013      	str	r3, [r2, #0]
 801de9c:	25a3      	movs	r5, #163	@ 0xa3
 801de9e:	e793      	b.n	801ddc8 <__gethex+0xf8>
 801dea0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801dea4:	2a2e      	cmp	r2, #46	@ 0x2e
 801dea6:	d012      	beq.n	801dece <__gethex+0x1fe>
 801dea8:	2b20      	cmp	r3, #32
 801deaa:	d104      	bne.n	801deb6 <__gethex+0x1e6>
 801deac:	f845 bb04 	str.w	fp, [r5], #4
 801deb0:	f04f 0b00 	mov.w	fp, #0
 801deb4:	465b      	mov	r3, fp
 801deb6:	7830      	ldrb	r0, [r6, #0]
 801deb8:	9303      	str	r3, [sp, #12]
 801deba:	f7ff fef3 	bl	801dca4 <__hexdig_fun>
 801debe:	9b03      	ldr	r3, [sp, #12]
 801dec0:	f000 000f 	and.w	r0, r0, #15
 801dec4:	4098      	lsls	r0, r3
 801dec6:	ea4b 0b00 	orr.w	fp, fp, r0
 801deca:	3304      	adds	r3, #4
 801decc:	e7ae      	b.n	801de2c <__gethex+0x15c>
 801dece:	45b1      	cmp	r9, r6
 801ded0:	d8ea      	bhi.n	801dea8 <__gethex+0x1d8>
 801ded2:	492b      	ldr	r1, [pc, #172]	@ (801df80 <__gethex+0x2b0>)
 801ded4:	9303      	str	r3, [sp, #12]
 801ded6:	2201      	movs	r2, #1
 801ded8:	4630      	mov	r0, r6
 801deda:	f7fe ffaf 	bl	801ce3c <strncmp>
 801dede:	9b03      	ldr	r3, [sp, #12]
 801dee0:	2800      	cmp	r0, #0
 801dee2:	d1e1      	bne.n	801dea8 <__gethex+0x1d8>
 801dee4:	e7a2      	b.n	801de2c <__gethex+0x15c>
 801dee6:	1ea9      	subs	r1, r5, #2
 801dee8:	4620      	mov	r0, r4
 801deea:	f001 fc6f 	bl	801f7cc <__any_on>
 801deee:	2800      	cmp	r0, #0
 801def0:	d0c2      	beq.n	801de78 <__gethex+0x1a8>
 801def2:	f04f 0903 	mov.w	r9, #3
 801def6:	e7c1      	b.n	801de7c <__gethex+0x1ac>
 801def8:	da09      	bge.n	801df0e <__gethex+0x23e>
 801defa:	1b75      	subs	r5, r6, r5
 801defc:	4621      	mov	r1, r4
 801defe:	9801      	ldr	r0, [sp, #4]
 801df00:	462a      	mov	r2, r5
 801df02:	f001 fa2d 	bl	801f360 <__lshift>
 801df06:	1b7f      	subs	r7, r7, r5
 801df08:	4604      	mov	r4, r0
 801df0a:	f100 0a14 	add.w	sl, r0, #20
 801df0e:	f04f 0900 	mov.w	r9, #0
 801df12:	e7b8      	b.n	801de86 <__gethex+0x1b6>
 801df14:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801df18:	42bd      	cmp	r5, r7
 801df1a:	dd6f      	ble.n	801dffc <__gethex+0x32c>
 801df1c:	1bed      	subs	r5, r5, r7
 801df1e:	42ae      	cmp	r6, r5
 801df20:	dc34      	bgt.n	801df8c <__gethex+0x2bc>
 801df22:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801df26:	2b02      	cmp	r3, #2
 801df28:	d022      	beq.n	801df70 <__gethex+0x2a0>
 801df2a:	2b03      	cmp	r3, #3
 801df2c:	d024      	beq.n	801df78 <__gethex+0x2a8>
 801df2e:	2b01      	cmp	r3, #1
 801df30:	d115      	bne.n	801df5e <__gethex+0x28e>
 801df32:	42ae      	cmp	r6, r5
 801df34:	d113      	bne.n	801df5e <__gethex+0x28e>
 801df36:	2e01      	cmp	r6, #1
 801df38:	d10b      	bne.n	801df52 <__gethex+0x282>
 801df3a:	9a02      	ldr	r2, [sp, #8]
 801df3c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801df40:	6013      	str	r3, [r2, #0]
 801df42:	2301      	movs	r3, #1
 801df44:	6123      	str	r3, [r4, #16]
 801df46:	f8ca 3000 	str.w	r3, [sl]
 801df4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801df4c:	2562      	movs	r5, #98	@ 0x62
 801df4e:	601c      	str	r4, [r3, #0]
 801df50:	e73a      	b.n	801ddc8 <__gethex+0xf8>
 801df52:	1e71      	subs	r1, r6, #1
 801df54:	4620      	mov	r0, r4
 801df56:	f001 fc39 	bl	801f7cc <__any_on>
 801df5a:	2800      	cmp	r0, #0
 801df5c:	d1ed      	bne.n	801df3a <__gethex+0x26a>
 801df5e:	9801      	ldr	r0, [sp, #4]
 801df60:	4621      	mov	r1, r4
 801df62:	f000 ffe5 	bl	801ef30 <_Bfree>
 801df66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801df68:	2300      	movs	r3, #0
 801df6a:	6013      	str	r3, [r2, #0]
 801df6c:	2550      	movs	r5, #80	@ 0x50
 801df6e:	e72b      	b.n	801ddc8 <__gethex+0xf8>
 801df70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801df72:	2b00      	cmp	r3, #0
 801df74:	d1f3      	bne.n	801df5e <__gethex+0x28e>
 801df76:	e7e0      	b.n	801df3a <__gethex+0x26a>
 801df78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801df7a:	2b00      	cmp	r3, #0
 801df7c:	d1dd      	bne.n	801df3a <__gethex+0x26a>
 801df7e:	e7ee      	b.n	801df5e <__gethex+0x28e>
 801df80:	0802081f 	.word	0x0802081f
 801df84:	080209fd 	.word	0x080209fd
 801df88:	08020a0e 	.word	0x08020a0e
 801df8c:	1e6f      	subs	r7, r5, #1
 801df8e:	f1b9 0f00 	cmp.w	r9, #0
 801df92:	d130      	bne.n	801dff6 <__gethex+0x326>
 801df94:	b127      	cbz	r7, 801dfa0 <__gethex+0x2d0>
 801df96:	4639      	mov	r1, r7
 801df98:	4620      	mov	r0, r4
 801df9a:	f001 fc17 	bl	801f7cc <__any_on>
 801df9e:	4681      	mov	r9, r0
 801dfa0:	117a      	asrs	r2, r7, #5
 801dfa2:	2301      	movs	r3, #1
 801dfa4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801dfa8:	f007 071f 	and.w	r7, r7, #31
 801dfac:	40bb      	lsls	r3, r7
 801dfae:	4213      	tst	r3, r2
 801dfb0:	4629      	mov	r1, r5
 801dfb2:	4620      	mov	r0, r4
 801dfb4:	bf18      	it	ne
 801dfb6:	f049 0902 	orrne.w	r9, r9, #2
 801dfba:	f7ff fe21 	bl	801dc00 <rshift>
 801dfbe:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801dfc2:	1b76      	subs	r6, r6, r5
 801dfc4:	2502      	movs	r5, #2
 801dfc6:	f1b9 0f00 	cmp.w	r9, #0
 801dfca:	d047      	beq.n	801e05c <__gethex+0x38c>
 801dfcc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801dfd0:	2b02      	cmp	r3, #2
 801dfd2:	d015      	beq.n	801e000 <__gethex+0x330>
 801dfd4:	2b03      	cmp	r3, #3
 801dfd6:	d017      	beq.n	801e008 <__gethex+0x338>
 801dfd8:	2b01      	cmp	r3, #1
 801dfda:	d109      	bne.n	801dff0 <__gethex+0x320>
 801dfdc:	f019 0f02 	tst.w	r9, #2
 801dfe0:	d006      	beq.n	801dff0 <__gethex+0x320>
 801dfe2:	f8da 3000 	ldr.w	r3, [sl]
 801dfe6:	ea49 0903 	orr.w	r9, r9, r3
 801dfea:	f019 0f01 	tst.w	r9, #1
 801dfee:	d10e      	bne.n	801e00e <__gethex+0x33e>
 801dff0:	f045 0510 	orr.w	r5, r5, #16
 801dff4:	e032      	b.n	801e05c <__gethex+0x38c>
 801dff6:	f04f 0901 	mov.w	r9, #1
 801dffa:	e7d1      	b.n	801dfa0 <__gethex+0x2d0>
 801dffc:	2501      	movs	r5, #1
 801dffe:	e7e2      	b.n	801dfc6 <__gethex+0x2f6>
 801e000:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e002:	f1c3 0301 	rsb	r3, r3, #1
 801e006:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e008:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e00a:	2b00      	cmp	r3, #0
 801e00c:	d0f0      	beq.n	801dff0 <__gethex+0x320>
 801e00e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801e012:	f104 0314 	add.w	r3, r4, #20
 801e016:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801e01a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801e01e:	f04f 0c00 	mov.w	ip, #0
 801e022:	4618      	mov	r0, r3
 801e024:	f853 2b04 	ldr.w	r2, [r3], #4
 801e028:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801e02c:	d01b      	beq.n	801e066 <__gethex+0x396>
 801e02e:	3201      	adds	r2, #1
 801e030:	6002      	str	r2, [r0, #0]
 801e032:	2d02      	cmp	r5, #2
 801e034:	f104 0314 	add.w	r3, r4, #20
 801e038:	d13c      	bne.n	801e0b4 <__gethex+0x3e4>
 801e03a:	f8d8 2000 	ldr.w	r2, [r8]
 801e03e:	3a01      	subs	r2, #1
 801e040:	42b2      	cmp	r2, r6
 801e042:	d109      	bne.n	801e058 <__gethex+0x388>
 801e044:	1171      	asrs	r1, r6, #5
 801e046:	2201      	movs	r2, #1
 801e048:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801e04c:	f006 061f 	and.w	r6, r6, #31
 801e050:	fa02 f606 	lsl.w	r6, r2, r6
 801e054:	421e      	tst	r6, r3
 801e056:	d13a      	bne.n	801e0ce <__gethex+0x3fe>
 801e058:	f045 0520 	orr.w	r5, r5, #32
 801e05c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e05e:	601c      	str	r4, [r3, #0]
 801e060:	9b02      	ldr	r3, [sp, #8]
 801e062:	601f      	str	r7, [r3, #0]
 801e064:	e6b0      	b.n	801ddc8 <__gethex+0xf8>
 801e066:	4299      	cmp	r1, r3
 801e068:	f843 cc04 	str.w	ip, [r3, #-4]
 801e06c:	d8d9      	bhi.n	801e022 <__gethex+0x352>
 801e06e:	68a3      	ldr	r3, [r4, #8]
 801e070:	459b      	cmp	fp, r3
 801e072:	db17      	blt.n	801e0a4 <__gethex+0x3d4>
 801e074:	6861      	ldr	r1, [r4, #4]
 801e076:	9801      	ldr	r0, [sp, #4]
 801e078:	3101      	adds	r1, #1
 801e07a:	f000 ff19 	bl	801eeb0 <_Balloc>
 801e07e:	4681      	mov	r9, r0
 801e080:	b918      	cbnz	r0, 801e08a <__gethex+0x3ba>
 801e082:	4b1a      	ldr	r3, [pc, #104]	@ (801e0ec <__gethex+0x41c>)
 801e084:	4602      	mov	r2, r0
 801e086:	2184      	movs	r1, #132	@ 0x84
 801e088:	e6c5      	b.n	801de16 <__gethex+0x146>
 801e08a:	6922      	ldr	r2, [r4, #16]
 801e08c:	3202      	adds	r2, #2
 801e08e:	f104 010c 	add.w	r1, r4, #12
 801e092:	0092      	lsls	r2, r2, #2
 801e094:	300c      	adds	r0, #12
 801e096:	f7fe ff62 	bl	801cf5e <memcpy>
 801e09a:	4621      	mov	r1, r4
 801e09c:	9801      	ldr	r0, [sp, #4]
 801e09e:	f000 ff47 	bl	801ef30 <_Bfree>
 801e0a2:	464c      	mov	r4, r9
 801e0a4:	6923      	ldr	r3, [r4, #16]
 801e0a6:	1c5a      	adds	r2, r3, #1
 801e0a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801e0ac:	6122      	str	r2, [r4, #16]
 801e0ae:	2201      	movs	r2, #1
 801e0b0:	615a      	str	r2, [r3, #20]
 801e0b2:	e7be      	b.n	801e032 <__gethex+0x362>
 801e0b4:	6922      	ldr	r2, [r4, #16]
 801e0b6:	455a      	cmp	r2, fp
 801e0b8:	dd0b      	ble.n	801e0d2 <__gethex+0x402>
 801e0ba:	2101      	movs	r1, #1
 801e0bc:	4620      	mov	r0, r4
 801e0be:	f7ff fd9f 	bl	801dc00 <rshift>
 801e0c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e0c6:	3701      	adds	r7, #1
 801e0c8:	42bb      	cmp	r3, r7
 801e0ca:	f6ff aee0 	blt.w	801de8e <__gethex+0x1be>
 801e0ce:	2501      	movs	r5, #1
 801e0d0:	e7c2      	b.n	801e058 <__gethex+0x388>
 801e0d2:	f016 061f 	ands.w	r6, r6, #31
 801e0d6:	d0fa      	beq.n	801e0ce <__gethex+0x3fe>
 801e0d8:	4453      	add	r3, sl
 801e0da:	f1c6 0620 	rsb	r6, r6, #32
 801e0de:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801e0e2:	f000 ffd7 	bl	801f094 <__hi0bits>
 801e0e6:	42b0      	cmp	r0, r6
 801e0e8:	dbe7      	blt.n	801e0ba <__gethex+0x3ea>
 801e0ea:	e7f0      	b.n	801e0ce <__gethex+0x3fe>
 801e0ec:	080209fd 	.word	0x080209fd

0801e0f0 <L_shift>:
 801e0f0:	f1c2 0208 	rsb	r2, r2, #8
 801e0f4:	0092      	lsls	r2, r2, #2
 801e0f6:	b570      	push	{r4, r5, r6, lr}
 801e0f8:	f1c2 0620 	rsb	r6, r2, #32
 801e0fc:	6843      	ldr	r3, [r0, #4]
 801e0fe:	6804      	ldr	r4, [r0, #0]
 801e100:	fa03 f506 	lsl.w	r5, r3, r6
 801e104:	432c      	orrs	r4, r5
 801e106:	40d3      	lsrs	r3, r2
 801e108:	6004      	str	r4, [r0, #0]
 801e10a:	f840 3f04 	str.w	r3, [r0, #4]!
 801e10e:	4288      	cmp	r0, r1
 801e110:	d3f4      	bcc.n	801e0fc <L_shift+0xc>
 801e112:	bd70      	pop	{r4, r5, r6, pc}

0801e114 <__match>:
 801e114:	b530      	push	{r4, r5, lr}
 801e116:	6803      	ldr	r3, [r0, #0]
 801e118:	3301      	adds	r3, #1
 801e11a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e11e:	b914      	cbnz	r4, 801e126 <__match+0x12>
 801e120:	6003      	str	r3, [r0, #0]
 801e122:	2001      	movs	r0, #1
 801e124:	bd30      	pop	{r4, r5, pc}
 801e126:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e12a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801e12e:	2d19      	cmp	r5, #25
 801e130:	bf98      	it	ls
 801e132:	3220      	addls	r2, #32
 801e134:	42a2      	cmp	r2, r4
 801e136:	d0f0      	beq.n	801e11a <__match+0x6>
 801e138:	2000      	movs	r0, #0
 801e13a:	e7f3      	b.n	801e124 <__match+0x10>

0801e13c <__hexnan>:
 801e13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e140:	680b      	ldr	r3, [r1, #0]
 801e142:	6801      	ldr	r1, [r0, #0]
 801e144:	115e      	asrs	r6, r3, #5
 801e146:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801e14a:	f013 031f 	ands.w	r3, r3, #31
 801e14e:	b087      	sub	sp, #28
 801e150:	bf18      	it	ne
 801e152:	3604      	addne	r6, #4
 801e154:	2500      	movs	r5, #0
 801e156:	1f37      	subs	r7, r6, #4
 801e158:	4682      	mov	sl, r0
 801e15a:	4690      	mov	r8, r2
 801e15c:	9301      	str	r3, [sp, #4]
 801e15e:	f846 5c04 	str.w	r5, [r6, #-4]
 801e162:	46b9      	mov	r9, r7
 801e164:	463c      	mov	r4, r7
 801e166:	9502      	str	r5, [sp, #8]
 801e168:	46ab      	mov	fp, r5
 801e16a:	784a      	ldrb	r2, [r1, #1]
 801e16c:	1c4b      	adds	r3, r1, #1
 801e16e:	9303      	str	r3, [sp, #12]
 801e170:	b342      	cbz	r2, 801e1c4 <__hexnan+0x88>
 801e172:	4610      	mov	r0, r2
 801e174:	9105      	str	r1, [sp, #20]
 801e176:	9204      	str	r2, [sp, #16]
 801e178:	f7ff fd94 	bl	801dca4 <__hexdig_fun>
 801e17c:	2800      	cmp	r0, #0
 801e17e:	d151      	bne.n	801e224 <__hexnan+0xe8>
 801e180:	9a04      	ldr	r2, [sp, #16]
 801e182:	9905      	ldr	r1, [sp, #20]
 801e184:	2a20      	cmp	r2, #32
 801e186:	d818      	bhi.n	801e1ba <__hexnan+0x7e>
 801e188:	9b02      	ldr	r3, [sp, #8]
 801e18a:	459b      	cmp	fp, r3
 801e18c:	dd13      	ble.n	801e1b6 <__hexnan+0x7a>
 801e18e:	454c      	cmp	r4, r9
 801e190:	d206      	bcs.n	801e1a0 <__hexnan+0x64>
 801e192:	2d07      	cmp	r5, #7
 801e194:	dc04      	bgt.n	801e1a0 <__hexnan+0x64>
 801e196:	462a      	mov	r2, r5
 801e198:	4649      	mov	r1, r9
 801e19a:	4620      	mov	r0, r4
 801e19c:	f7ff ffa8 	bl	801e0f0 <L_shift>
 801e1a0:	4544      	cmp	r4, r8
 801e1a2:	d952      	bls.n	801e24a <__hexnan+0x10e>
 801e1a4:	2300      	movs	r3, #0
 801e1a6:	f1a4 0904 	sub.w	r9, r4, #4
 801e1aa:	f844 3c04 	str.w	r3, [r4, #-4]
 801e1ae:	f8cd b008 	str.w	fp, [sp, #8]
 801e1b2:	464c      	mov	r4, r9
 801e1b4:	461d      	mov	r5, r3
 801e1b6:	9903      	ldr	r1, [sp, #12]
 801e1b8:	e7d7      	b.n	801e16a <__hexnan+0x2e>
 801e1ba:	2a29      	cmp	r2, #41	@ 0x29
 801e1bc:	d157      	bne.n	801e26e <__hexnan+0x132>
 801e1be:	3102      	adds	r1, #2
 801e1c0:	f8ca 1000 	str.w	r1, [sl]
 801e1c4:	f1bb 0f00 	cmp.w	fp, #0
 801e1c8:	d051      	beq.n	801e26e <__hexnan+0x132>
 801e1ca:	454c      	cmp	r4, r9
 801e1cc:	d206      	bcs.n	801e1dc <__hexnan+0xa0>
 801e1ce:	2d07      	cmp	r5, #7
 801e1d0:	dc04      	bgt.n	801e1dc <__hexnan+0xa0>
 801e1d2:	462a      	mov	r2, r5
 801e1d4:	4649      	mov	r1, r9
 801e1d6:	4620      	mov	r0, r4
 801e1d8:	f7ff ff8a 	bl	801e0f0 <L_shift>
 801e1dc:	4544      	cmp	r4, r8
 801e1de:	d936      	bls.n	801e24e <__hexnan+0x112>
 801e1e0:	f1a8 0204 	sub.w	r2, r8, #4
 801e1e4:	4623      	mov	r3, r4
 801e1e6:	f853 1b04 	ldr.w	r1, [r3], #4
 801e1ea:	f842 1f04 	str.w	r1, [r2, #4]!
 801e1ee:	429f      	cmp	r7, r3
 801e1f0:	d2f9      	bcs.n	801e1e6 <__hexnan+0xaa>
 801e1f2:	1b3b      	subs	r3, r7, r4
 801e1f4:	f023 0303 	bic.w	r3, r3, #3
 801e1f8:	3304      	adds	r3, #4
 801e1fa:	3401      	adds	r4, #1
 801e1fc:	3e03      	subs	r6, #3
 801e1fe:	42b4      	cmp	r4, r6
 801e200:	bf88      	it	hi
 801e202:	2304      	movhi	r3, #4
 801e204:	4443      	add	r3, r8
 801e206:	2200      	movs	r2, #0
 801e208:	f843 2b04 	str.w	r2, [r3], #4
 801e20c:	429f      	cmp	r7, r3
 801e20e:	d2fb      	bcs.n	801e208 <__hexnan+0xcc>
 801e210:	683b      	ldr	r3, [r7, #0]
 801e212:	b91b      	cbnz	r3, 801e21c <__hexnan+0xe0>
 801e214:	4547      	cmp	r7, r8
 801e216:	d128      	bne.n	801e26a <__hexnan+0x12e>
 801e218:	2301      	movs	r3, #1
 801e21a:	603b      	str	r3, [r7, #0]
 801e21c:	2005      	movs	r0, #5
 801e21e:	b007      	add	sp, #28
 801e220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e224:	3501      	adds	r5, #1
 801e226:	2d08      	cmp	r5, #8
 801e228:	f10b 0b01 	add.w	fp, fp, #1
 801e22c:	dd06      	ble.n	801e23c <__hexnan+0x100>
 801e22e:	4544      	cmp	r4, r8
 801e230:	d9c1      	bls.n	801e1b6 <__hexnan+0x7a>
 801e232:	2300      	movs	r3, #0
 801e234:	f844 3c04 	str.w	r3, [r4, #-4]
 801e238:	2501      	movs	r5, #1
 801e23a:	3c04      	subs	r4, #4
 801e23c:	6822      	ldr	r2, [r4, #0]
 801e23e:	f000 000f 	and.w	r0, r0, #15
 801e242:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801e246:	6020      	str	r0, [r4, #0]
 801e248:	e7b5      	b.n	801e1b6 <__hexnan+0x7a>
 801e24a:	2508      	movs	r5, #8
 801e24c:	e7b3      	b.n	801e1b6 <__hexnan+0x7a>
 801e24e:	9b01      	ldr	r3, [sp, #4]
 801e250:	2b00      	cmp	r3, #0
 801e252:	d0dd      	beq.n	801e210 <__hexnan+0xd4>
 801e254:	f1c3 0320 	rsb	r3, r3, #32
 801e258:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e25c:	40da      	lsrs	r2, r3
 801e25e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801e262:	4013      	ands	r3, r2
 801e264:	f846 3c04 	str.w	r3, [r6, #-4]
 801e268:	e7d2      	b.n	801e210 <__hexnan+0xd4>
 801e26a:	3f04      	subs	r7, #4
 801e26c:	e7d0      	b.n	801e210 <__hexnan+0xd4>
 801e26e:	2004      	movs	r0, #4
 801e270:	e7d5      	b.n	801e21e <__hexnan+0xe2>

0801e272 <__ssputs_r>:
 801e272:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e276:	688e      	ldr	r6, [r1, #8]
 801e278:	461f      	mov	r7, r3
 801e27a:	42be      	cmp	r6, r7
 801e27c:	680b      	ldr	r3, [r1, #0]
 801e27e:	4682      	mov	sl, r0
 801e280:	460c      	mov	r4, r1
 801e282:	4690      	mov	r8, r2
 801e284:	d82d      	bhi.n	801e2e2 <__ssputs_r+0x70>
 801e286:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e28a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801e28e:	d026      	beq.n	801e2de <__ssputs_r+0x6c>
 801e290:	6965      	ldr	r5, [r4, #20]
 801e292:	6909      	ldr	r1, [r1, #16]
 801e294:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e298:	eba3 0901 	sub.w	r9, r3, r1
 801e29c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e2a0:	1c7b      	adds	r3, r7, #1
 801e2a2:	444b      	add	r3, r9
 801e2a4:	106d      	asrs	r5, r5, #1
 801e2a6:	429d      	cmp	r5, r3
 801e2a8:	bf38      	it	cc
 801e2aa:	461d      	movcc	r5, r3
 801e2ac:	0553      	lsls	r3, r2, #21
 801e2ae:	d527      	bpl.n	801e300 <__ssputs_r+0x8e>
 801e2b0:	4629      	mov	r1, r5
 801e2b2:	f000 fb2b 	bl	801e90c <_malloc_r>
 801e2b6:	4606      	mov	r6, r0
 801e2b8:	b360      	cbz	r0, 801e314 <__ssputs_r+0xa2>
 801e2ba:	6921      	ldr	r1, [r4, #16]
 801e2bc:	464a      	mov	r2, r9
 801e2be:	f7fe fe4e 	bl	801cf5e <memcpy>
 801e2c2:	89a3      	ldrh	r3, [r4, #12]
 801e2c4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801e2c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e2cc:	81a3      	strh	r3, [r4, #12]
 801e2ce:	6126      	str	r6, [r4, #16]
 801e2d0:	6165      	str	r5, [r4, #20]
 801e2d2:	444e      	add	r6, r9
 801e2d4:	eba5 0509 	sub.w	r5, r5, r9
 801e2d8:	6026      	str	r6, [r4, #0]
 801e2da:	60a5      	str	r5, [r4, #8]
 801e2dc:	463e      	mov	r6, r7
 801e2de:	42be      	cmp	r6, r7
 801e2e0:	d900      	bls.n	801e2e4 <__ssputs_r+0x72>
 801e2e2:	463e      	mov	r6, r7
 801e2e4:	6820      	ldr	r0, [r4, #0]
 801e2e6:	4632      	mov	r2, r6
 801e2e8:	4641      	mov	r1, r8
 801e2ea:	f001 fb76 	bl	801f9da <memmove>
 801e2ee:	68a3      	ldr	r3, [r4, #8]
 801e2f0:	1b9b      	subs	r3, r3, r6
 801e2f2:	60a3      	str	r3, [r4, #8]
 801e2f4:	6823      	ldr	r3, [r4, #0]
 801e2f6:	4433      	add	r3, r6
 801e2f8:	6023      	str	r3, [r4, #0]
 801e2fa:	2000      	movs	r0, #0
 801e2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e300:	462a      	mov	r2, r5
 801e302:	f001 fabe 	bl	801f882 <_realloc_r>
 801e306:	4606      	mov	r6, r0
 801e308:	2800      	cmp	r0, #0
 801e30a:	d1e0      	bne.n	801e2ce <__ssputs_r+0x5c>
 801e30c:	6921      	ldr	r1, [r4, #16]
 801e30e:	4650      	mov	r0, sl
 801e310:	f7ff fc2c 	bl	801db6c <_free_r>
 801e314:	230c      	movs	r3, #12
 801e316:	f8ca 3000 	str.w	r3, [sl]
 801e31a:	89a3      	ldrh	r3, [r4, #12]
 801e31c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e320:	81a3      	strh	r3, [r4, #12]
 801e322:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e326:	e7e9      	b.n	801e2fc <__ssputs_r+0x8a>

0801e328 <_svfiprintf_r>:
 801e328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e32c:	4698      	mov	r8, r3
 801e32e:	898b      	ldrh	r3, [r1, #12]
 801e330:	061b      	lsls	r3, r3, #24
 801e332:	b09d      	sub	sp, #116	@ 0x74
 801e334:	4607      	mov	r7, r0
 801e336:	460d      	mov	r5, r1
 801e338:	4614      	mov	r4, r2
 801e33a:	d510      	bpl.n	801e35e <_svfiprintf_r+0x36>
 801e33c:	690b      	ldr	r3, [r1, #16]
 801e33e:	b973      	cbnz	r3, 801e35e <_svfiprintf_r+0x36>
 801e340:	2140      	movs	r1, #64	@ 0x40
 801e342:	f000 fae3 	bl	801e90c <_malloc_r>
 801e346:	6028      	str	r0, [r5, #0]
 801e348:	6128      	str	r0, [r5, #16]
 801e34a:	b930      	cbnz	r0, 801e35a <_svfiprintf_r+0x32>
 801e34c:	230c      	movs	r3, #12
 801e34e:	603b      	str	r3, [r7, #0]
 801e350:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e354:	b01d      	add	sp, #116	@ 0x74
 801e356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e35a:	2340      	movs	r3, #64	@ 0x40
 801e35c:	616b      	str	r3, [r5, #20]
 801e35e:	2300      	movs	r3, #0
 801e360:	9309      	str	r3, [sp, #36]	@ 0x24
 801e362:	2320      	movs	r3, #32
 801e364:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e368:	f8cd 800c 	str.w	r8, [sp, #12]
 801e36c:	2330      	movs	r3, #48	@ 0x30
 801e36e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801e50c <_svfiprintf_r+0x1e4>
 801e372:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e376:	f04f 0901 	mov.w	r9, #1
 801e37a:	4623      	mov	r3, r4
 801e37c:	469a      	mov	sl, r3
 801e37e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e382:	b10a      	cbz	r2, 801e388 <_svfiprintf_r+0x60>
 801e384:	2a25      	cmp	r2, #37	@ 0x25
 801e386:	d1f9      	bne.n	801e37c <_svfiprintf_r+0x54>
 801e388:	ebba 0b04 	subs.w	fp, sl, r4
 801e38c:	d00b      	beq.n	801e3a6 <_svfiprintf_r+0x7e>
 801e38e:	465b      	mov	r3, fp
 801e390:	4622      	mov	r2, r4
 801e392:	4629      	mov	r1, r5
 801e394:	4638      	mov	r0, r7
 801e396:	f7ff ff6c 	bl	801e272 <__ssputs_r>
 801e39a:	3001      	adds	r0, #1
 801e39c:	f000 80a7 	beq.w	801e4ee <_svfiprintf_r+0x1c6>
 801e3a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e3a2:	445a      	add	r2, fp
 801e3a4:	9209      	str	r2, [sp, #36]	@ 0x24
 801e3a6:	f89a 3000 	ldrb.w	r3, [sl]
 801e3aa:	2b00      	cmp	r3, #0
 801e3ac:	f000 809f 	beq.w	801e4ee <_svfiprintf_r+0x1c6>
 801e3b0:	2300      	movs	r3, #0
 801e3b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e3b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e3ba:	f10a 0a01 	add.w	sl, sl, #1
 801e3be:	9304      	str	r3, [sp, #16]
 801e3c0:	9307      	str	r3, [sp, #28]
 801e3c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e3c6:	931a      	str	r3, [sp, #104]	@ 0x68
 801e3c8:	4654      	mov	r4, sl
 801e3ca:	2205      	movs	r2, #5
 801e3cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e3d0:	484e      	ldr	r0, [pc, #312]	@ (801e50c <_svfiprintf_r+0x1e4>)
 801e3d2:	f7e1 ff9d 	bl	8000310 <memchr>
 801e3d6:	9a04      	ldr	r2, [sp, #16]
 801e3d8:	b9d8      	cbnz	r0, 801e412 <_svfiprintf_r+0xea>
 801e3da:	06d0      	lsls	r0, r2, #27
 801e3dc:	bf44      	itt	mi
 801e3de:	2320      	movmi	r3, #32
 801e3e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e3e4:	0711      	lsls	r1, r2, #28
 801e3e6:	bf44      	itt	mi
 801e3e8:	232b      	movmi	r3, #43	@ 0x2b
 801e3ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e3ee:	f89a 3000 	ldrb.w	r3, [sl]
 801e3f2:	2b2a      	cmp	r3, #42	@ 0x2a
 801e3f4:	d015      	beq.n	801e422 <_svfiprintf_r+0xfa>
 801e3f6:	9a07      	ldr	r2, [sp, #28]
 801e3f8:	4654      	mov	r4, sl
 801e3fa:	2000      	movs	r0, #0
 801e3fc:	f04f 0c0a 	mov.w	ip, #10
 801e400:	4621      	mov	r1, r4
 801e402:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e406:	3b30      	subs	r3, #48	@ 0x30
 801e408:	2b09      	cmp	r3, #9
 801e40a:	d94b      	bls.n	801e4a4 <_svfiprintf_r+0x17c>
 801e40c:	b1b0      	cbz	r0, 801e43c <_svfiprintf_r+0x114>
 801e40e:	9207      	str	r2, [sp, #28]
 801e410:	e014      	b.n	801e43c <_svfiprintf_r+0x114>
 801e412:	eba0 0308 	sub.w	r3, r0, r8
 801e416:	fa09 f303 	lsl.w	r3, r9, r3
 801e41a:	4313      	orrs	r3, r2
 801e41c:	9304      	str	r3, [sp, #16]
 801e41e:	46a2      	mov	sl, r4
 801e420:	e7d2      	b.n	801e3c8 <_svfiprintf_r+0xa0>
 801e422:	9b03      	ldr	r3, [sp, #12]
 801e424:	1d19      	adds	r1, r3, #4
 801e426:	681b      	ldr	r3, [r3, #0]
 801e428:	9103      	str	r1, [sp, #12]
 801e42a:	2b00      	cmp	r3, #0
 801e42c:	bfbb      	ittet	lt
 801e42e:	425b      	neglt	r3, r3
 801e430:	f042 0202 	orrlt.w	r2, r2, #2
 801e434:	9307      	strge	r3, [sp, #28]
 801e436:	9307      	strlt	r3, [sp, #28]
 801e438:	bfb8      	it	lt
 801e43a:	9204      	strlt	r2, [sp, #16]
 801e43c:	7823      	ldrb	r3, [r4, #0]
 801e43e:	2b2e      	cmp	r3, #46	@ 0x2e
 801e440:	d10a      	bne.n	801e458 <_svfiprintf_r+0x130>
 801e442:	7863      	ldrb	r3, [r4, #1]
 801e444:	2b2a      	cmp	r3, #42	@ 0x2a
 801e446:	d132      	bne.n	801e4ae <_svfiprintf_r+0x186>
 801e448:	9b03      	ldr	r3, [sp, #12]
 801e44a:	1d1a      	adds	r2, r3, #4
 801e44c:	681b      	ldr	r3, [r3, #0]
 801e44e:	9203      	str	r2, [sp, #12]
 801e450:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e454:	3402      	adds	r4, #2
 801e456:	9305      	str	r3, [sp, #20]
 801e458:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801e51c <_svfiprintf_r+0x1f4>
 801e45c:	7821      	ldrb	r1, [r4, #0]
 801e45e:	2203      	movs	r2, #3
 801e460:	4650      	mov	r0, sl
 801e462:	f7e1 ff55 	bl	8000310 <memchr>
 801e466:	b138      	cbz	r0, 801e478 <_svfiprintf_r+0x150>
 801e468:	9b04      	ldr	r3, [sp, #16]
 801e46a:	eba0 000a 	sub.w	r0, r0, sl
 801e46e:	2240      	movs	r2, #64	@ 0x40
 801e470:	4082      	lsls	r2, r0
 801e472:	4313      	orrs	r3, r2
 801e474:	3401      	adds	r4, #1
 801e476:	9304      	str	r3, [sp, #16]
 801e478:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e47c:	4824      	ldr	r0, [pc, #144]	@ (801e510 <_svfiprintf_r+0x1e8>)
 801e47e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e482:	2206      	movs	r2, #6
 801e484:	f7e1 ff44 	bl	8000310 <memchr>
 801e488:	2800      	cmp	r0, #0
 801e48a:	d036      	beq.n	801e4fa <_svfiprintf_r+0x1d2>
 801e48c:	4b21      	ldr	r3, [pc, #132]	@ (801e514 <_svfiprintf_r+0x1ec>)
 801e48e:	bb1b      	cbnz	r3, 801e4d8 <_svfiprintf_r+0x1b0>
 801e490:	9b03      	ldr	r3, [sp, #12]
 801e492:	3307      	adds	r3, #7
 801e494:	f023 0307 	bic.w	r3, r3, #7
 801e498:	3308      	adds	r3, #8
 801e49a:	9303      	str	r3, [sp, #12]
 801e49c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e49e:	4433      	add	r3, r6
 801e4a0:	9309      	str	r3, [sp, #36]	@ 0x24
 801e4a2:	e76a      	b.n	801e37a <_svfiprintf_r+0x52>
 801e4a4:	fb0c 3202 	mla	r2, ip, r2, r3
 801e4a8:	460c      	mov	r4, r1
 801e4aa:	2001      	movs	r0, #1
 801e4ac:	e7a8      	b.n	801e400 <_svfiprintf_r+0xd8>
 801e4ae:	2300      	movs	r3, #0
 801e4b0:	3401      	adds	r4, #1
 801e4b2:	9305      	str	r3, [sp, #20]
 801e4b4:	4619      	mov	r1, r3
 801e4b6:	f04f 0c0a 	mov.w	ip, #10
 801e4ba:	4620      	mov	r0, r4
 801e4bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e4c0:	3a30      	subs	r2, #48	@ 0x30
 801e4c2:	2a09      	cmp	r2, #9
 801e4c4:	d903      	bls.n	801e4ce <_svfiprintf_r+0x1a6>
 801e4c6:	2b00      	cmp	r3, #0
 801e4c8:	d0c6      	beq.n	801e458 <_svfiprintf_r+0x130>
 801e4ca:	9105      	str	r1, [sp, #20]
 801e4cc:	e7c4      	b.n	801e458 <_svfiprintf_r+0x130>
 801e4ce:	fb0c 2101 	mla	r1, ip, r1, r2
 801e4d2:	4604      	mov	r4, r0
 801e4d4:	2301      	movs	r3, #1
 801e4d6:	e7f0      	b.n	801e4ba <_svfiprintf_r+0x192>
 801e4d8:	ab03      	add	r3, sp, #12
 801e4da:	9300      	str	r3, [sp, #0]
 801e4dc:	462a      	mov	r2, r5
 801e4de:	4b0e      	ldr	r3, [pc, #56]	@ (801e518 <_svfiprintf_r+0x1f0>)
 801e4e0:	a904      	add	r1, sp, #16
 801e4e2:	4638      	mov	r0, r7
 801e4e4:	f7fc ff70 	bl	801b3c8 <_printf_float>
 801e4e8:	1c42      	adds	r2, r0, #1
 801e4ea:	4606      	mov	r6, r0
 801e4ec:	d1d6      	bne.n	801e49c <_svfiprintf_r+0x174>
 801e4ee:	89ab      	ldrh	r3, [r5, #12]
 801e4f0:	065b      	lsls	r3, r3, #25
 801e4f2:	f53f af2d 	bmi.w	801e350 <_svfiprintf_r+0x28>
 801e4f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e4f8:	e72c      	b.n	801e354 <_svfiprintf_r+0x2c>
 801e4fa:	ab03      	add	r3, sp, #12
 801e4fc:	9300      	str	r3, [sp, #0]
 801e4fe:	462a      	mov	r2, r5
 801e500:	4b05      	ldr	r3, [pc, #20]	@ (801e518 <_svfiprintf_r+0x1f0>)
 801e502:	a904      	add	r1, sp, #16
 801e504:	4638      	mov	r0, r7
 801e506:	f7fd f9e7 	bl	801b8d8 <_printf_i>
 801e50a:	e7ed      	b.n	801e4e8 <_svfiprintf_r+0x1c0>
 801e50c:	08020a6e 	.word	0x08020a6e
 801e510:	08020a78 	.word	0x08020a78
 801e514:	0801b3c9 	.word	0x0801b3c9
 801e518:	0801e273 	.word	0x0801e273
 801e51c:	08020a74 	.word	0x08020a74

0801e520 <_sungetc_r>:
 801e520:	b538      	push	{r3, r4, r5, lr}
 801e522:	1c4b      	adds	r3, r1, #1
 801e524:	4614      	mov	r4, r2
 801e526:	d103      	bne.n	801e530 <_sungetc_r+0x10>
 801e528:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801e52c:	4628      	mov	r0, r5
 801e52e:	bd38      	pop	{r3, r4, r5, pc}
 801e530:	8993      	ldrh	r3, [r2, #12]
 801e532:	f023 0320 	bic.w	r3, r3, #32
 801e536:	8193      	strh	r3, [r2, #12]
 801e538:	6853      	ldr	r3, [r2, #4]
 801e53a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801e53c:	b2cd      	uxtb	r5, r1
 801e53e:	b18a      	cbz	r2, 801e564 <_sungetc_r+0x44>
 801e540:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801e542:	429a      	cmp	r2, r3
 801e544:	dd08      	ble.n	801e558 <_sungetc_r+0x38>
 801e546:	6823      	ldr	r3, [r4, #0]
 801e548:	1e5a      	subs	r2, r3, #1
 801e54a:	6022      	str	r2, [r4, #0]
 801e54c:	f803 5c01 	strb.w	r5, [r3, #-1]
 801e550:	6863      	ldr	r3, [r4, #4]
 801e552:	3301      	adds	r3, #1
 801e554:	6063      	str	r3, [r4, #4]
 801e556:	e7e9      	b.n	801e52c <_sungetc_r+0xc>
 801e558:	4621      	mov	r1, r4
 801e55a:	f001 f958 	bl	801f80e <__submore>
 801e55e:	2800      	cmp	r0, #0
 801e560:	d0f1      	beq.n	801e546 <_sungetc_r+0x26>
 801e562:	e7e1      	b.n	801e528 <_sungetc_r+0x8>
 801e564:	6921      	ldr	r1, [r4, #16]
 801e566:	6822      	ldr	r2, [r4, #0]
 801e568:	b141      	cbz	r1, 801e57c <_sungetc_r+0x5c>
 801e56a:	4291      	cmp	r1, r2
 801e56c:	d206      	bcs.n	801e57c <_sungetc_r+0x5c>
 801e56e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801e572:	42a9      	cmp	r1, r5
 801e574:	d102      	bne.n	801e57c <_sungetc_r+0x5c>
 801e576:	3a01      	subs	r2, #1
 801e578:	6022      	str	r2, [r4, #0]
 801e57a:	e7ea      	b.n	801e552 <_sungetc_r+0x32>
 801e57c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 801e580:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e584:	6363      	str	r3, [r4, #52]	@ 0x34
 801e586:	2303      	movs	r3, #3
 801e588:	63a3      	str	r3, [r4, #56]	@ 0x38
 801e58a:	4623      	mov	r3, r4
 801e58c:	f803 5f46 	strb.w	r5, [r3, #70]!
 801e590:	6023      	str	r3, [r4, #0]
 801e592:	2301      	movs	r3, #1
 801e594:	e7de      	b.n	801e554 <_sungetc_r+0x34>

0801e596 <__ssrefill_r>:
 801e596:	b510      	push	{r4, lr}
 801e598:	460c      	mov	r4, r1
 801e59a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801e59c:	b169      	cbz	r1, 801e5ba <__ssrefill_r+0x24>
 801e59e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e5a2:	4299      	cmp	r1, r3
 801e5a4:	d001      	beq.n	801e5aa <__ssrefill_r+0x14>
 801e5a6:	f7ff fae1 	bl	801db6c <_free_r>
 801e5aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e5ac:	6063      	str	r3, [r4, #4]
 801e5ae:	2000      	movs	r0, #0
 801e5b0:	6360      	str	r0, [r4, #52]	@ 0x34
 801e5b2:	b113      	cbz	r3, 801e5ba <__ssrefill_r+0x24>
 801e5b4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801e5b6:	6023      	str	r3, [r4, #0]
 801e5b8:	bd10      	pop	{r4, pc}
 801e5ba:	6923      	ldr	r3, [r4, #16]
 801e5bc:	6023      	str	r3, [r4, #0]
 801e5be:	2300      	movs	r3, #0
 801e5c0:	6063      	str	r3, [r4, #4]
 801e5c2:	89a3      	ldrh	r3, [r4, #12]
 801e5c4:	f043 0320 	orr.w	r3, r3, #32
 801e5c8:	81a3      	strh	r3, [r4, #12]
 801e5ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e5ce:	e7f3      	b.n	801e5b8 <__ssrefill_r+0x22>

0801e5d0 <__ssvfiscanf_r>:
 801e5d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e5d4:	460c      	mov	r4, r1
 801e5d6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 801e5da:	2100      	movs	r1, #0
 801e5dc:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801e5e0:	49a5      	ldr	r1, [pc, #660]	@ (801e878 <__ssvfiscanf_r+0x2a8>)
 801e5e2:	91a0      	str	r1, [sp, #640]	@ 0x280
 801e5e4:	f10d 0804 	add.w	r8, sp, #4
 801e5e8:	49a4      	ldr	r1, [pc, #656]	@ (801e87c <__ssvfiscanf_r+0x2ac>)
 801e5ea:	4fa5      	ldr	r7, [pc, #660]	@ (801e880 <__ssvfiscanf_r+0x2b0>)
 801e5ec:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801e5f0:	4606      	mov	r6, r0
 801e5f2:	91a1      	str	r1, [sp, #644]	@ 0x284
 801e5f4:	9300      	str	r3, [sp, #0]
 801e5f6:	7813      	ldrb	r3, [r2, #0]
 801e5f8:	2b00      	cmp	r3, #0
 801e5fa:	f000 8158 	beq.w	801e8ae <__ssvfiscanf_r+0x2de>
 801e5fe:	5cf9      	ldrb	r1, [r7, r3]
 801e600:	f011 0108 	ands.w	r1, r1, #8
 801e604:	f102 0501 	add.w	r5, r2, #1
 801e608:	d019      	beq.n	801e63e <__ssvfiscanf_r+0x6e>
 801e60a:	6863      	ldr	r3, [r4, #4]
 801e60c:	2b00      	cmp	r3, #0
 801e60e:	dd0f      	ble.n	801e630 <__ssvfiscanf_r+0x60>
 801e610:	6823      	ldr	r3, [r4, #0]
 801e612:	781a      	ldrb	r2, [r3, #0]
 801e614:	5cba      	ldrb	r2, [r7, r2]
 801e616:	0712      	lsls	r2, r2, #28
 801e618:	d401      	bmi.n	801e61e <__ssvfiscanf_r+0x4e>
 801e61a:	462a      	mov	r2, r5
 801e61c:	e7eb      	b.n	801e5f6 <__ssvfiscanf_r+0x26>
 801e61e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801e620:	3201      	adds	r2, #1
 801e622:	9245      	str	r2, [sp, #276]	@ 0x114
 801e624:	6862      	ldr	r2, [r4, #4]
 801e626:	3301      	adds	r3, #1
 801e628:	3a01      	subs	r2, #1
 801e62a:	6062      	str	r2, [r4, #4]
 801e62c:	6023      	str	r3, [r4, #0]
 801e62e:	e7ec      	b.n	801e60a <__ssvfiscanf_r+0x3a>
 801e630:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801e632:	4621      	mov	r1, r4
 801e634:	4630      	mov	r0, r6
 801e636:	4798      	blx	r3
 801e638:	2800      	cmp	r0, #0
 801e63a:	d0e9      	beq.n	801e610 <__ssvfiscanf_r+0x40>
 801e63c:	e7ed      	b.n	801e61a <__ssvfiscanf_r+0x4a>
 801e63e:	2b25      	cmp	r3, #37	@ 0x25
 801e640:	d012      	beq.n	801e668 <__ssvfiscanf_r+0x98>
 801e642:	4699      	mov	r9, r3
 801e644:	6863      	ldr	r3, [r4, #4]
 801e646:	2b00      	cmp	r3, #0
 801e648:	f340 8093 	ble.w	801e772 <__ssvfiscanf_r+0x1a2>
 801e64c:	6822      	ldr	r2, [r4, #0]
 801e64e:	7813      	ldrb	r3, [r2, #0]
 801e650:	454b      	cmp	r3, r9
 801e652:	f040 812c 	bne.w	801e8ae <__ssvfiscanf_r+0x2de>
 801e656:	6863      	ldr	r3, [r4, #4]
 801e658:	3b01      	subs	r3, #1
 801e65a:	6063      	str	r3, [r4, #4]
 801e65c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801e65e:	3201      	adds	r2, #1
 801e660:	3301      	adds	r3, #1
 801e662:	6022      	str	r2, [r4, #0]
 801e664:	9345      	str	r3, [sp, #276]	@ 0x114
 801e666:	e7d8      	b.n	801e61a <__ssvfiscanf_r+0x4a>
 801e668:	9141      	str	r1, [sp, #260]	@ 0x104
 801e66a:	9143      	str	r1, [sp, #268]	@ 0x10c
 801e66c:	7853      	ldrb	r3, [r2, #1]
 801e66e:	2b2a      	cmp	r3, #42	@ 0x2a
 801e670:	bf02      	ittt	eq
 801e672:	2310      	moveq	r3, #16
 801e674:	1c95      	addeq	r5, r2, #2
 801e676:	9341      	streq	r3, [sp, #260]	@ 0x104
 801e678:	220a      	movs	r2, #10
 801e67a:	46a9      	mov	r9, r5
 801e67c:	f819 1b01 	ldrb.w	r1, [r9], #1
 801e680:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801e684:	2b09      	cmp	r3, #9
 801e686:	d91e      	bls.n	801e6c6 <__ssvfiscanf_r+0xf6>
 801e688:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 801e884 <__ssvfiscanf_r+0x2b4>
 801e68c:	2203      	movs	r2, #3
 801e68e:	4650      	mov	r0, sl
 801e690:	f7e1 fe3e 	bl	8000310 <memchr>
 801e694:	b138      	cbz	r0, 801e6a6 <__ssvfiscanf_r+0xd6>
 801e696:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801e698:	eba0 000a 	sub.w	r0, r0, sl
 801e69c:	2301      	movs	r3, #1
 801e69e:	4083      	lsls	r3, r0
 801e6a0:	4313      	orrs	r3, r2
 801e6a2:	9341      	str	r3, [sp, #260]	@ 0x104
 801e6a4:	464d      	mov	r5, r9
 801e6a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 801e6aa:	2b78      	cmp	r3, #120	@ 0x78
 801e6ac:	d806      	bhi.n	801e6bc <__ssvfiscanf_r+0xec>
 801e6ae:	2b57      	cmp	r3, #87	@ 0x57
 801e6b0:	d810      	bhi.n	801e6d4 <__ssvfiscanf_r+0x104>
 801e6b2:	2b25      	cmp	r3, #37	@ 0x25
 801e6b4:	d0c5      	beq.n	801e642 <__ssvfiscanf_r+0x72>
 801e6b6:	d857      	bhi.n	801e768 <__ssvfiscanf_r+0x198>
 801e6b8:	2b00      	cmp	r3, #0
 801e6ba:	d065      	beq.n	801e788 <__ssvfiscanf_r+0x1b8>
 801e6bc:	2303      	movs	r3, #3
 801e6be:	9347      	str	r3, [sp, #284]	@ 0x11c
 801e6c0:	230a      	movs	r3, #10
 801e6c2:	9342      	str	r3, [sp, #264]	@ 0x108
 801e6c4:	e078      	b.n	801e7b8 <__ssvfiscanf_r+0x1e8>
 801e6c6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801e6c8:	fb02 1103 	mla	r1, r2, r3, r1
 801e6cc:	3930      	subs	r1, #48	@ 0x30
 801e6ce:	9143      	str	r1, [sp, #268]	@ 0x10c
 801e6d0:	464d      	mov	r5, r9
 801e6d2:	e7d2      	b.n	801e67a <__ssvfiscanf_r+0xaa>
 801e6d4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801e6d8:	2a20      	cmp	r2, #32
 801e6da:	d8ef      	bhi.n	801e6bc <__ssvfiscanf_r+0xec>
 801e6dc:	a101      	add	r1, pc, #4	@ (adr r1, 801e6e4 <__ssvfiscanf_r+0x114>)
 801e6de:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801e6e2:	bf00      	nop
 801e6e4:	0801e797 	.word	0x0801e797
 801e6e8:	0801e6bd 	.word	0x0801e6bd
 801e6ec:	0801e6bd 	.word	0x0801e6bd
 801e6f0:	0801e7f1 	.word	0x0801e7f1
 801e6f4:	0801e6bd 	.word	0x0801e6bd
 801e6f8:	0801e6bd 	.word	0x0801e6bd
 801e6fc:	0801e6bd 	.word	0x0801e6bd
 801e700:	0801e6bd 	.word	0x0801e6bd
 801e704:	0801e6bd 	.word	0x0801e6bd
 801e708:	0801e6bd 	.word	0x0801e6bd
 801e70c:	0801e6bd 	.word	0x0801e6bd
 801e710:	0801e807 	.word	0x0801e807
 801e714:	0801e7ed 	.word	0x0801e7ed
 801e718:	0801e76f 	.word	0x0801e76f
 801e71c:	0801e76f 	.word	0x0801e76f
 801e720:	0801e76f 	.word	0x0801e76f
 801e724:	0801e6bd 	.word	0x0801e6bd
 801e728:	0801e7a9 	.word	0x0801e7a9
 801e72c:	0801e6bd 	.word	0x0801e6bd
 801e730:	0801e6bd 	.word	0x0801e6bd
 801e734:	0801e6bd 	.word	0x0801e6bd
 801e738:	0801e6bd 	.word	0x0801e6bd
 801e73c:	0801e817 	.word	0x0801e817
 801e740:	0801e7b1 	.word	0x0801e7b1
 801e744:	0801e78f 	.word	0x0801e78f
 801e748:	0801e6bd 	.word	0x0801e6bd
 801e74c:	0801e6bd 	.word	0x0801e6bd
 801e750:	0801e813 	.word	0x0801e813
 801e754:	0801e6bd 	.word	0x0801e6bd
 801e758:	0801e7ed 	.word	0x0801e7ed
 801e75c:	0801e6bd 	.word	0x0801e6bd
 801e760:	0801e6bd 	.word	0x0801e6bd
 801e764:	0801e797 	.word	0x0801e797
 801e768:	3b45      	subs	r3, #69	@ 0x45
 801e76a:	2b02      	cmp	r3, #2
 801e76c:	d8a6      	bhi.n	801e6bc <__ssvfiscanf_r+0xec>
 801e76e:	2305      	movs	r3, #5
 801e770:	e021      	b.n	801e7b6 <__ssvfiscanf_r+0x1e6>
 801e772:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801e774:	4621      	mov	r1, r4
 801e776:	4630      	mov	r0, r6
 801e778:	4798      	blx	r3
 801e77a:	2800      	cmp	r0, #0
 801e77c:	f43f af66 	beq.w	801e64c <__ssvfiscanf_r+0x7c>
 801e780:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801e782:	2800      	cmp	r0, #0
 801e784:	f040 808b 	bne.w	801e89e <__ssvfiscanf_r+0x2ce>
 801e788:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e78c:	e08b      	b.n	801e8a6 <__ssvfiscanf_r+0x2d6>
 801e78e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801e790:	f042 0220 	orr.w	r2, r2, #32
 801e794:	9241      	str	r2, [sp, #260]	@ 0x104
 801e796:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801e798:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801e79c:	9241      	str	r2, [sp, #260]	@ 0x104
 801e79e:	2210      	movs	r2, #16
 801e7a0:	2b6e      	cmp	r3, #110	@ 0x6e
 801e7a2:	9242      	str	r2, [sp, #264]	@ 0x108
 801e7a4:	d902      	bls.n	801e7ac <__ssvfiscanf_r+0x1dc>
 801e7a6:	e005      	b.n	801e7b4 <__ssvfiscanf_r+0x1e4>
 801e7a8:	2300      	movs	r3, #0
 801e7aa:	9342      	str	r3, [sp, #264]	@ 0x108
 801e7ac:	2303      	movs	r3, #3
 801e7ae:	e002      	b.n	801e7b6 <__ssvfiscanf_r+0x1e6>
 801e7b0:	2308      	movs	r3, #8
 801e7b2:	9342      	str	r3, [sp, #264]	@ 0x108
 801e7b4:	2304      	movs	r3, #4
 801e7b6:	9347      	str	r3, [sp, #284]	@ 0x11c
 801e7b8:	6863      	ldr	r3, [r4, #4]
 801e7ba:	2b00      	cmp	r3, #0
 801e7bc:	dd39      	ble.n	801e832 <__ssvfiscanf_r+0x262>
 801e7be:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801e7c0:	0659      	lsls	r1, r3, #25
 801e7c2:	d404      	bmi.n	801e7ce <__ssvfiscanf_r+0x1fe>
 801e7c4:	6823      	ldr	r3, [r4, #0]
 801e7c6:	781a      	ldrb	r2, [r3, #0]
 801e7c8:	5cba      	ldrb	r2, [r7, r2]
 801e7ca:	0712      	lsls	r2, r2, #28
 801e7cc:	d438      	bmi.n	801e840 <__ssvfiscanf_r+0x270>
 801e7ce:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801e7d0:	2b02      	cmp	r3, #2
 801e7d2:	dc47      	bgt.n	801e864 <__ssvfiscanf_r+0x294>
 801e7d4:	466b      	mov	r3, sp
 801e7d6:	4622      	mov	r2, r4
 801e7d8:	a941      	add	r1, sp, #260	@ 0x104
 801e7da:	4630      	mov	r0, r6
 801e7dc:	f000 f928 	bl	801ea30 <_scanf_chars>
 801e7e0:	2801      	cmp	r0, #1
 801e7e2:	d064      	beq.n	801e8ae <__ssvfiscanf_r+0x2de>
 801e7e4:	2802      	cmp	r0, #2
 801e7e6:	f47f af18 	bne.w	801e61a <__ssvfiscanf_r+0x4a>
 801e7ea:	e7c9      	b.n	801e780 <__ssvfiscanf_r+0x1b0>
 801e7ec:	220a      	movs	r2, #10
 801e7ee:	e7d7      	b.n	801e7a0 <__ssvfiscanf_r+0x1d0>
 801e7f0:	4629      	mov	r1, r5
 801e7f2:	4640      	mov	r0, r8
 801e7f4:	f000 fa6a 	bl	801eccc <__sccl>
 801e7f8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801e7fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e7fe:	9341      	str	r3, [sp, #260]	@ 0x104
 801e800:	4605      	mov	r5, r0
 801e802:	2301      	movs	r3, #1
 801e804:	e7d7      	b.n	801e7b6 <__ssvfiscanf_r+0x1e6>
 801e806:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801e808:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e80c:	9341      	str	r3, [sp, #260]	@ 0x104
 801e80e:	2300      	movs	r3, #0
 801e810:	e7d1      	b.n	801e7b6 <__ssvfiscanf_r+0x1e6>
 801e812:	2302      	movs	r3, #2
 801e814:	e7cf      	b.n	801e7b6 <__ssvfiscanf_r+0x1e6>
 801e816:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801e818:	06c3      	lsls	r3, r0, #27
 801e81a:	f53f aefe 	bmi.w	801e61a <__ssvfiscanf_r+0x4a>
 801e81e:	9b00      	ldr	r3, [sp, #0]
 801e820:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801e822:	1d19      	adds	r1, r3, #4
 801e824:	9100      	str	r1, [sp, #0]
 801e826:	681b      	ldr	r3, [r3, #0]
 801e828:	07c0      	lsls	r0, r0, #31
 801e82a:	bf4c      	ite	mi
 801e82c:	801a      	strhmi	r2, [r3, #0]
 801e82e:	601a      	strpl	r2, [r3, #0]
 801e830:	e6f3      	b.n	801e61a <__ssvfiscanf_r+0x4a>
 801e832:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801e834:	4621      	mov	r1, r4
 801e836:	4630      	mov	r0, r6
 801e838:	4798      	blx	r3
 801e83a:	2800      	cmp	r0, #0
 801e83c:	d0bf      	beq.n	801e7be <__ssvfiscanf_r+0x1ee>
 801e83e:	e79f      	b.n	801e780 <__ssvfiscanf_r+0x1b0>
 801e840:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801e842:	3201      	adds	r2, #1
 801e844:	9245      	str	r2, [sp, #276]	@ 0x114
 801e846:	6862      	ldr	r2, [r4, #4]
 801e848:	3a01      	subs	r2, #1
 801e84a:	2a00      	cmp	r2, #0
 801e84c:	6062      	str	r2, [r4, #4]
 801e84e:	dd02      	ble.n	801e856 <__ssvfiscanf_r+0x286>
 801e850:	3301      	adds	r3, #1
 801e852:	6023      	str	r3, [r4, #0]
 801e854:	e7b6      	b.n	801e7c4 <__ssvfiscanf_r+0x1f4>
 801e856:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801e858:	4621      	mov	r1, r4
 801e85a:	4630      	mov	r0, r6
 801e85c:	4798      	blx	r3
 801e85e:	2800      	cmp	r0, #0
 801e860:	d0b0      	beq.n	801e7c4 <__ssvfiscanf_r+0x1f4>
 801e862:	e78d      	b.n	801e780 <__ssvfiscanf_r+0x1b0>
 801e864:	2b04      	cmp	r3, #4
 801e866:	dc0f      	bgt.n	801e888 <__ssvfiscanf_r+0x2b8>
 801e868:	466b      	mov	r3, sp
 801e86a:	4622      	mov	r2, r4
 801e86c:	a941      	add	r1, sp, #260	@ 0x104
 801e86e:	4630      	mov	r0, r6
 801e870:	f000 f938 	bl	801eae4 <_scanf_i>
 801e874:	e7b4      	b.n	801e7e0 <__ssvfiscanf_r+0x210>
 801e876:	bf00      	nop
 801e878:	0801e521 	.word	0x0801e521
 801e87c:	0801e597 	.word	0x0801e597
 801e880:	08020881 	.word	0x08020881
 801e884:	08020a74 	.word	0x08020a74
 801e888:	4b0a      	ldr	r3, [pc, #40]	@ (801e8b4 <__ssvfiscanf_r+0x2e4>)
 801e88a:	2b00      	cmp	r3, #0
 801e88c:	f43f aec5 	beq.w	801e61a <__ssvfiscanf_r+0x4a>
 801e890:	466b      	mov	r3, sp
 801e892:	4622      	mov	r2, r4
 801e894:	a941      	add	r1, sp, #260	@ 0x104
 801e896:	4630      	mov	r0, r6
 801e898:	f7fd f93e 	bl	801bb18 <_scanf_float>
 801e89c:	e7a0      	b.n	801e7e0 <__ssvfiscanf_r+0x210>
 801e89e:	89a3      	ldrh	r3, [r4, #12]
 801e8a0:	065b      	lsls	r3, r3, #25
 801e8a2:	f53f af71 	bmi.w	801e788 <__ssvfiscanf_r+0x1b8>
 801e8a6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801e8aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e8ae:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801e8b0:	e7f9      	b.n	801e8a6 <__ssvfiscanf_r+0x2d6>
 801e8b2:	bf00      	nop
 801e8b4:	0801bb19 	.word	0x0801bb19

0801e8b8 <malloc>:
 801e8b8:	4b02      	ldr	r3, [pc, #8]	@ (801e8c4 <malloc+0xc>)
 801e8ba:	4601      	mov	r1, r0
 801e8bc:	6818      	ldr	r0, [r3, #0]
 801e8be:	f000 b825 	b.w	801e90c <_malloc_r>
 801e8c2:	bf00      	nop
 801e8c4:	24000378 	.word	0x24000378

0801e8c8 <sbrk_aligned>:
 801e8c8:	b570      	push	{r4, r5, r6, lr}
 801e8ca:	4e0f      	ldr	r6, [pc, #60]	@ (801e908 <sbrk_aligned+0x40>)
 801e8cc:	460c      	mov	r4, r1
 801e8ce:	6831      	ldr	r1, [r6, #0]
 801e8d0:	4605      	mov	r5, r0
 801e8d2:	b911      	cbnz	r1, 801e8da <sbrk_aligned+0x12>
 801e8d4:	f001 f89c 	bl	801fa10 <_sbrk_r>
 801e8d8:	6030      	str	r0, [r6, #0]
 801e8da:	4621      	mov	r1, r4
 801e8dc:	4628      	mov	r0, r5
 801e8de:	f001 f897 	bl	801fa10 <_sbrk_r>
 801e8e2:	1c43      	adds	r3, r0, #1
 801e8e4:	d103      	bne.n	801e8ee <sbrk_aligned+0x26>
 801e8e6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801e8ea:	4620      	mov	r0, r4
 801e8ec:	bd70      	pop	{r4, r5, r6, pc}
 801e8ee:	1cc4      	adds	r4, r0, #3
 801e8f0:	f024 0403 	bic.w	r4, r4, #3
 801e8f4:	42a0      	cmp	r0, r4
 801e8f6:	d0f8      	beq.n	801e8ea <sbrk_aligned+0x22>
 801e8f8:	1a21      	subs	r1, r4, r0
 801e8fa:	4628      	mov	r0, r5
 801e8fc:	f001 f888 	bl	801fa10 <_sbrk_r>
 801e900:	3001      	adds	r0, #1
 801e902:	d1f2      	bne.n	801e8ea <sbrk_aligned+0x22>
 801e904:	e7ef      	b.n	801e8e6 <sbrk_aligned+0x1e>
 801e906:	bf00      	nop
 801e908:	24005e58 	.word	0x24005e58

0801e90c <_malloc_r>:
 801e90c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e910:	1ccd      	adds	r5, r1, #3
 801e912:	f025 0503 	bic.w	r5, r5, #3
 801e916:	3508      	adds	r5, #8
 801e918:	2d0c      	cmp	r5, #12
 801e91a:	bf38      	it	cc
 801e91c:	250c      	movcc	r5, #12
 801e91e:	2d00      	cmp	r5, #0
 801e920:	4606      	mov	r6, r0
 801e922:	db01      	blt.n	801e928 <_malloc_r+0x1c>
 801e924:	42a9      	cmp	r1, r5
 801e926:	d904      	bls.n	801e932 <_malloc_r+0x26>
 801e928:	230c      	movs	r3, #12
 801e92a:	6033      	str	r3, [r6, #0]
 801e92c:	2000      	movs	r0, #0
 801e92e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e932:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801ea08 <_malloc_r+0xfc>
 801e936:	f000 faaf 	bl	801ee98 <__malloc_lock>
 801e93a:	f8d8 3000 	ldr.w	r3, [r8]
 801e93e:	461c      	mov	r4, r3
 801e940:	bb44      	cbnz	r4, 801e994 <_malloc_r+0x88>
 801e942:	4629      	mov	r1, r5
 801e944:	4630      	mov	r0, r6
 801e946:	f7ff ffbf 	bl	801e8c8 <sbrk_aligned>
 801e94a:	1c43      	adds	r3, r0, #1
 801e94c:	4604      	mov	r4, r0
 801e94e:	d158      	bne.n	801ea02 <_malloc_r+0xf6>
 801e950:	f8d8 4000 	ldr.w	r4, [r8]
 801e954:	4627      	mov	r7, r4
 801e956:	2f00      	cmp	r7, #0
 801e958:	d143      	bne.n	801e9e2 <_malloc_r+0xd6>
 801e95a:	2c00      	cmp	r4, #0
 801e95c:	d04b      	beq.n	801e9f6 <_malloc_r+0xea>
 801e95e:	6823      	ldr	r3, [r4, #0]
 801e960:	4639      	mov	r1, r7
 801e962:	4630      	mov	r0, r6
 801e964:	eb04 0903 	add.w	r9, r4, r3
 801e968:	f001 f852 	bl	801fa10 <_sbrk_r>
 801e96c:	4581      	cmp	r9, r0
 801e96e:	d142      	bne.n	801e9f6 <_malloc_r+0xea>
 801e970:	6821      	ldr	r1, [r4, #0]
 801e972:	1a6d      	subs	r5, r5, r1
 801e974:	4629      	mov	r1, r5
 801e976:	4630      	mov	r0, r6
 801e978:	f7ff ffa6 	bl	801e8c8 <sbrk_aligned>
 801e97c:	3001      	adds	r0, #1
 801e97e:	d03a      	beq.n	801e9f6 <_malloc_r+0xea>
 801e980:	6823      	ldr	r3, [r4, #0]
 801e982:	442b      	add	r3, r5
 801e984:	6023      	str	r3, [r4, #0]
 801e986:	f8d8 3000 	ldr.w	r3, [r8]
 801e98a:	685a      	ldr	r2, [r3, #4]
 801e98c:	bb62      	cbnz	r2, 801e9e8 <_malloc_r+0xdc>
 801e98e:	f8c8 7000 	str.w	r7, [r8]
 801e992:	e00f      	b.n	801e9b4 <_malloc_r+0xa8>
 801e994:	6822      	ldr	r2, [r4, #0]
 801e996:	1b52      	subs	r2, r2, r5
 801e998:	d420      	bmi.n	801e9dc <_malloc_r+0xd0>
 801e99a:	2a0b      	cmp	r2, #11
 801e99c:	d917      	bls.n	801e9ce <_malloc_r+0xc2>
 801e99e:	1961      	adds	r1, r4, r5
 801e9a0:	42a3      	cmp	r3, r4
 801e9a2:	6025      	str	r5, [r4, #0]
 801e9a4:	bf18      	it	ne
 801e9a6:	6059      	strne	r1, [r3, #4]
 801e9a8:	6863      	ldr	r3, [r4, #4]
 801e9aa:	bf08      	it	eq
 801e9ac:	f8c8 1000 	streq.w	r1, [r8]
 801e9b0:	5162      	str	r2, [r4, r5]
 801e9b2:	604b      	str	r3, [r1, #4]
 801e9b4:	4630      	mov	r0, r6
 801e9b6:	f000 fa75 	bl	801eea4 <__malloc_unlock>
 801e9ba:	f104 000b 	add.w	r0, r4, #11
 801e9be:	1d23      	adds	r3, r4, #4
 801e9c0:	f020 0007 	bic.w	r0, r0, #7
 801e9c4:	1ac2      	subs	r2, r0, r3
 801e9c6:	bf1c      	itt	ne
 801e9c8:	1a1b      	subne	r3, r3, r0
 801e9ca:	50a3      	strne	r3, [r4, r2]
 801e9cc:	e7af      	b.n	801e92e <_malloc_r+0x22>
 801e9ce:	6862      	ldr	r2, [r4, #4]
 801e9d0:	42a3      	cmp	r3, r4
 801e9d2:	bf0c      	ite	eq
 801e9d4:	f8c8 2000 	streq.w	r2, [r8]
 801e9d8:	605a      	strne	r2, [r3, #4]
 801e9da:	e7eb      	b.n	801e9b4 <_malloc_r+0xa8>
 801e9dc:	4623      	mov	r3, r4
 801e9de:	6864      	ldr	r4, [r4, #4]
 801e9e0:	e7ae      	b.n	801e940 <_malloc_r+0x34>
 801e9e2:	463c      	mov	r4, r7
 801e9e4:	687f      	ldr	r7, [r7, #4]
 801e9e6:	e7b6      	b.n	801e956 <_malloc_r+0x4a>
 801e9e8:	461a      	mov	r2, r3
 801e9ea:	685b      	ldr	r3, [r3, #4]
 801e9ec:	42a3      	cmp	r3, r4
 801e9ee:	d1fb      	bne.n	801e9e8 <_malloc_r+0xdc>
 801e9f0:	2300      	movs	r3, #0
 801e9f2:	6053      	str	r3, [r2, #4]
 801e9f4:	e7de      	b.n	801e9b4 <_malloc_r+0xa8>
 801e9f6:	230c      	movs	r3, #12
 801e9f8:	6033      	str	r3, [r6, #0]
 801e9fa:	4630      	mov	r0, r6
 801e9fc:	f000 fa52 	bl	801eea4 <__malloc_unlock>
 801ea00:	e794      	b.n	801e92c <_malloc_r+0x20>
 801ea02:	6005      	str	r5, [r0, #0]
 801ea04:	e7d6      	b.n	801e9b4 <_malloc_r+0xa8>
 801ea06:	bf00      	nop
 801ea08:	24005e5c 	.word	0x24005e5c

0801ea0c <__ascii_mbtowc>:
 801ea0c:	b082      	sub	sp, #8
 801ea0e:	b901      	cbnz	r1, 801ea12 <__ascii_mbtowc+0x6>
 801ea10:	a901      	add	r1, sp, #4
 801ea12:	b142      	cbz	r2, 801ea26 <__ascii_mbtowc+0x1a>
 801ea14:	b14b      	cbz	r3, 801ea2a <__ascii_mbtowc+0x1e>
 801ea16:	7813      	ldrb	r3, [r2, #0]
 801ea18:	600b      	str	r3, [r1, #0]
 801ea1a:	7812      	ldrb	r2, [r2, #0]
 801ea1c:	1e10      	subs	r0, r2, #0
 801ea1e:	bf18      	it	ne
 801ea20:	2001      	movne	r0, #1
 801ea22:	b002      	add	sp, #8
 801ea24:	4770      	bx	lr
 801ea26:	4610      	mov	r0, r2
 801ea28:	e7fb      	b.n	801ea22 <__ascii_mbtowc+0x16>
 801ea2a:	f06f 0001 	mvn.w	r0, #1
 801ea2e:	e7f8      	b.n	801ea22 <__ascii_mbtowc+0x16>

0801ea30 <_scanf_chars>:
 801ea30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ea34:	4615      	mov	r5, r2
 801ea36:	688a      	ldr	r2, [r1, #8]
 801ea38:	4680      	mov	r8, r0
 801ea3a:	460c      	mov	r4, r1
 801ea3c:	b932      	cbnz	r2, 801ea4c <_scanf_chars+0x1c>
 801ea3e:	698a      	ldr	r2, [r1, #24]
 801ea40:	2a00      	cmp	r2, #0
 801ea42:	bf14      	ite	ne
 801ea44:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 801ea48:	2201      	moveq	r2, #1
 801ea4a:	608a      	str	r2, [r1, #8]
 801ea4c:	6822      	ldr	r2, [r4, #0]
 801ea4e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801eae0 <_scanf_chars+0xb0>
 801ea52:	06d1      	lsls	r1, r2, #27
 801ea54:	bf5f      	itttt	pl
 801ea56:	681a      	ldrpl	r2, [r3, #0]
 801ea58:	1d11      	addpl	r1, r2, #4
 801ea5a:	6019      	strpl	r1, [r3, #0]
 801ea5c:	6816      	ldrpl	r6, [r2, #0]
 801ea5e:	2700      	movs	r7, #0
 801ea60:	69a0      	ldr	r0, [r4, #24]
 801ea62:	b188      	cbz	r0, 801ea88 <_scanf_chars+0x58>
 801ea64:	2801      	cmp	r0, #1
 801ea66:	d107      	bne.n	801ea78 <_scanf_chars+0x48>
 801ea68:	682b      	ldr	r3, [r5, #0]
 801ea6a:	781a      	ldrb	r2, [r3, #0]
 801ea6c:	6963      	ldr	r3, [r4, #20]
 801ea6e:	5c9b      	ldrb	r3, [r3, r2]
 801ea70:	b953      	cbnz	r3, 801ea88 <_scanf_chars+0x58>
 801ea72:	2f00      	cmp	r7, #0
 801ea74:	d031      	beq.n	801eada <_scanf_chars+0xaa>
 801ea76:	e022      	b.n	801eabe <_scanf_chars+0x8e>
 801ea78:	2802      	cmp	r0, #2
 801ea7a:	d120      	bne.n	801eabe <_scanf_chars+0x8e>
 801ea7c:	682b      	ldr	r3, [r5, #0]
 801ea7e:	781b      	ldrb	r3, [r3, #0]
 801ea80:	f819 3003 	ldrb.w	r3, [r9, r3]
 801ea84:	071b      	lsls	r3, r3, #28
 801ea86:	d41a      	bmi.n	801eabe <_scanf_chars+0x8e>
 801ea88:	6823      	ldr	r3, [r4, #0]
 801ea8a:	06da      	lsls	r2, r3, #27
 801ea8c:	bf5e      	ittt	pl
 801ea8e:	682b      	ldrpl	r3, [r5, #0]
 801ea90:	781b      	ldrbpl	r3, [r3, #0]
 801ea92:	f806 3b01 	strbpl.w	r3, [r6], #1
 801ea96:	682a      	ldr	r2, [r5, #0]
 801ea98:	686b      	ldr	r3, [r5, #4]
 801ea9a:	3201      	adds	r2, #1
 801ea9c:	602a      	str	r2, [r5, #0]
 801ea9e:	68a2      	ldr	r2, [r4, #8]
 801eaa0:	3b01      	subs	r3, #1
 801eaa2:	3a01      	subs	r2, #1
 801eaa4:	606b      	str	r3, [r5, #4]
 801eaa6:	3701      	adds	r7, #1
 801eaa8:	60a2      	str	r2, [r4, #8]
 801eaaa:	b142      	cbz	r2, 801eabe <_scanf_chars+0x8e>
 801eaac:	2b00      	cmp	r3, #0
 801eaae:	dcd7      	bgt.n	801ea60 <_scanf_chars+0x30>
 801eab0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801eab4:	4629      	mov	r1, r5
 801eab6:	4640      	mov	r0, r8
 801eab8:	4798      	blx	r3
 801eaba:	2800      	cmp	r0, #0
 801eabc:	d0d0      	beq.n	801ea60 <_scanf_chars+0x30>
 801eabe:	6823      	ldr	r3, [r4, #0]
 801eac0:	f013 0310 	ands.w	r3, r3, #16
 801eac4:	d105      	bne.n	801ead2 <_scanf_chars+0xa2>
 801eac6:	68e2      	ldr	r2, [r4, #12]
 801eac8:	3201      	adds	r2, #1
 801eaca:	60e2      	str	r2, [r4, #12]
 801eacc:	69a2      	ldr	r2, [r4, #24]
 801eace:	b102      	cbz	r2, 801ead2 <_scanf_chars+0xa2>
 801ead0:	7033      	strb	r3, [r6, #0]
 801ead2:	6923      	ldr	r3, [r4, #16]
 801ead4:	443b      	add	r3, r7
 801ead6:	6123      	str	r3, [r4, #16]
 801ead8:	2000      	movs	r0, #0
 801eada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eade:	bf00      	nop
 801eae0:	08020881 	.word	0x08020881

0801eae4 <_scanf_i>:
 801eae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eae8:	4698      	mov	r8, r3
 801eaea:	4b74      	ldr	r3, [pc, #464]	@ (801ecbc <_scanf_i+0x1d8>)
 801eaec:	460c      	mov	r4, r1
 801eaee:	4682      	mov	sl, r0
 801eaf0:	4616      	mov	r6, r2
 801eaf2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801eaf6:	b087      	sub	sp, #28
 801eaf8:	ab03      	add	r3, sp, #12
 801eafa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801eafe:	4b70      	ldr	r3, [pc, #448]	@ (801ecc0 <_scanf_i+0x1dc>)
 801eb00:	69a1      	ldr	r1, [r4, #24]
 801eb02:	4a70      	ldr	r2, [pc, #448]	@ (801ecc4 <_scanf_i+0x1e0>)
 801eb04:	2903      	cmp	r1, #3
 801eb06:	bf08      	it	eq
 801eb08:	461a      	moveq	r2, r3
 801eb0a:	68a3      	ldr	r3, [r4, #8]
 801eb0c:	9201      	str	r2, [sp, #4]
 801eb0e:	1e5a      	subs	r2, r3, #1
 801eb10:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801eb14:	bf88      	it	hi
 801eb16:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801eb1a:	4627      	mov	r7, r4
 801eb1c:	bf82      	ittt	hi
 801eb1e:	eb03 0905 	addhi.w	r9, r3, r5
 801eb22:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801eb26:	60a3      	strhi	r3, [r4, #8]
 801eb28:	f857 3b1c 	ldr.w	r3, [r7], #28
 801eb2c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801eb30:	bf98      	it	ls
 801eb32:	f04f 0900 	movls.w	r9, #0
 801eb36:	6023      	str	r3, [r4, #0]
 801eb38:	463d      	mov	r5, r7
 801eb3a:	f04f 0b00 	mov.w	fp, #0
 801eb3e:	6831      	ldr	r1, [r6, #0]
 801eb40:	ab03      	add	r3, sp, #12
 801eb42:	7809      	ldrb	r1, [r1, #0]
 801eb44:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801eb48:	2202      	movs	r2, #2
 801eb4a:	f7e1 fbe1 	bl	8000310 <memchr>
 801eb4e:	b328      	cbz	r0, 801eb9c <_scanf_i+0xb8>
 801eb50:	f1bb 0f01 	cmp.w	fp, #1
 801eb54:	d159      	bne.n	801ec0a <_scanf_i+0x126>
 801eb56:	6862      	ldr	r2, [r4, #4]
 801eb58:	b92a      	cbnz	r2, 801eb66 <_scanf_i+0x82>
 801eb5a:	6822      	ldr	r2, [r4, #0]
 801eb5c:	2108      	movs	r1, #8
 801eb5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801eb62:	6061      	str	r1, [r4, #4]
 801eb64:	6022      	str	r2, [r4, #0]
 801eb66:	6822      	ldr	r2, [r4, #0]
 801eb68:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801eb6c:	6022      	str	r2, [r4, #0]
 801eb6e:	68a2      	ldr	r2, [r4, #8]
 801eb70:	1e51      	subs	r1, r2, #1
 801eb72:	60a1      	str	r1, [r4, #8]
 801eb74:	b192      	cbz	r2, 801eb9c <_scanf_i+0xb8>
 801eb76:	6832      	ldr	r2, [r6, #0]
 801eb78:	1c51      	adds	r1, r2, #1
 801eb7a:	6031      	str	r1, [r6, #0]
 801eb7c:	7812      	ldrb	r2, [r2, #0]
 801eb7e:	f805 2b01 	strb.w	r2, [r5], #1
 801eb82:	6872      	ldr	r2, [r6, #4]
 801eb84:	3a01      	subs	r2, #1
 801eb86:	2a00      	cmp	r2, #0
 801eb88:	6072      	str	r2, [r6, #4]
 801eb8a:	dc07      	bgt.n	801eb9c <_scanf_i+0xb8>
 801eb8c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801eb90:	4631      	mov	r1, r6
 801eb92:	4650      	mov	r0, sl
 801eb94:	4790      	blx	r2
 801eb96:	2800      	cmp	r0, #0
 801eb98:	f040 8085 	bne.w	801eca6 <_scanf_i+0x1c2>
 801eb9c:	f10b 0b01 	add.w	fp, fp, #1
 801eba0:	f1bb 0f03 	cmp.w	fp, #3
 801eba4:	d1cb      	bne.n	801eb3e <_scanf_i+0x5a>
 801eba6:	6863      	ldr	r3, [r4, #4]
 801eba8:	b90b      	cbnz	r3, 801ebae <_scanf_i+0xca>
 801ebaa:	230a      	movs	r3, #10
 801ebac:	6063      	str	r3, [r4, #4]
 801ebae:	6863      	ldr	r3, [r4, #4]
 801ebb0:	4945      	ldr	r1, [pc, #276]	@ (801ecc8 <_scanf_i+0x1e4>)
 801ebb2:	6960      	ldr	r0, [r4, #20]
 801ebb4:	1ac9      	subs	r1, r1, r3
 801ebb6:	f000 f889 	bl	801eccc <__sccl>
 801ebba:	f04f 0b00 	mov.w	fp, #0
 801ebbe:	68a3      	ldr	r3, [r4, #8]
 801ebc0:	6822      	ldr	r2, [r4, #0]
 801ebc2:	2b00      	cmp	r3, #0
 801ebc4:	d03d      	beq.n	801ec42 <_scanf_i+0x15e>
 801ebc6:	6831      	ldr	r1, [r6, #0]
 801ebc8:	6960      	ldr	r0, [r4, #20]
 801ebca:	f891 c000 	ldrb.w	ip, [r1]
 801ebce:	f810 000c 	ldrb.w	r0, [r0, ip]
 801ebd2:	2800      	cmp	r0, #0
 801ebd4:	d035      	beq.n	801ec42 <_scanf_i+0x15e>
 801ebd6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801ebda:	d124      	bne.n	801ec26 <_scanf_i+0x142>
 801ebdc:	0510      	lsls	r0, r2, #20
 801ebde:	d522      	bpl.n	801ec26 <_scanf_i+0x142>
 801ebe0:	f10b 0b01 	add.w	fp, fp, #1
 801ebe4:	f1b9 0f00 	cmp.w	r9, #0
 801ebe8:	d003      	beq.n	801ebf2 <_scanf_i+0x10e>
 801ebea:	3301      	adds	r3, #1
 801ebec:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 801ebf0:	60a3      	str	r3, [r4, #8]
 801ebf2:	6873      	ldr	r3, [r6, #4]
 801ebf4:	3b01      	subs	r3, #1
 801ebf6:	2b00      	cmp	r3, #0
 801ebf8:	6073      	str	r3, [r6, #4]
 801ebfa:	dd1b      	ble.n	801ec34 <_scanf_i+0x150>
 801ebfc:	6833      	ldr	r3, [r6, #0]
 801ebfe:	3301      	adds	r3, #1
 801ec00:	6033      	str	r3, [r6, #0]
 801ec02:	68a3      	ldr	r3, [r4, #8]
 801ec04:	3b01      	subs	r3, #1
 801ec06:	60a3      	str	r3, [r4, #8]
 801ec08:	e7d9      	b.n	801ebbe <_scanf_i+0xda>
 801ec0a:	f1bb 0f02 	cmp.w	fp, #2
 801ec0e:	d1ae      	bne.n	801eb6e <_scanf_i+0x8a>
 801ec10:	6822      	ldr	r2, [r4, #0]
 801ec12:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801ec16:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801ec1a:	d1bf      	bne.n	801eb9c <_scanf_i+0xb8>
 801ec1c:	2110      	movs	r1, #16
 801ec1e:	6061      	str	r1, [r4, #4]
 801ec20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801ec24:	e7a2      	b.n	801eb6c <_scanf_i+0x88>
 801ec26:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801ec2a:	6022      	str	r2, [r4, #0]
 801ec2c:	780b      	ldrb	r3, [r1, #0]
 801ec2e:	f805 3b01 	strb.w	r3, [r5], #1
 801ec32:	e7de      	b.n	801ebf2 <_scanf_i+0x10e>
 801ec34:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801ec38:	4631      	mov	r1, r6
 801ec3a:	4650      	mov	r0, sl
 801ec3c:	4798      	blx	r3
 801ec3e:	2800      	cmp	r0, #0
 801ec40:	d0df      	beq.n	801ec02 <_scanf_i+0x11e>
 801ec42:	6823      	ldr	r3, [r4, #0]
 801ec44:	05d9      	lsls	r1, r3, #23
 801ec46:	d50d      	bpl.n	801ec64 <_scanf_i+0x180>
 801ec48:	42bd      	cmp	r5, r7
 801ec4a:	d909      	bls.n	801ec60 <_scanf_i+0x17c>
 801ec4c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801ec50:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801ec54:	4632      	mov	r2, r6
 801ec56:	4650      	mov	r0, sl
 801ec58:	4798      	blx	r3
 801ec5a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 801ec5e:	464d      	mov	r5, r9
 801ec60:	42bd      	cmp	r5, r7
 801ec62:	d028      	beq.n	801ecb6 <_scanf_i+0x1d2>
 801ec64:	6822      	ldr	r2, [r4, #0]
 801ec66:	f012 0210 	ands.w	r2, r2, #16
 801ec6a:	d113      	bne.n	801ec94 <_scanf_i+0x1b0>
 801ec6c:	702a      	strb	r2, [r5, #0]
 801ec6e:	6863      	ldr	r3, [r4, #4]
 801ec70:	9e01      	ldr	r6, [sp, #4]
 801ec72:	4639      	mov	r1, r7
 801ec74:	4650      	mov	r0, sl
 801ec76:	47b0      	blx	r6
 801ec78:	f8d8 3000 	ldr.w	r3, [r8]
 801ec7c:	6821      	ldr	r1, [r4, #0]
 801ec7e:	1d1a      	adds	r2, r3, #4
 801ec80:	f8c8 2000 	str.w	r2, [r8]
 801ec84:	f011 0f20 	tst.w	r1, #32
 801ec88:	681b      	ldr	r3, [r3, #0]
 801ec8a:	d00f      	beq.n	801ecac <_scanf_i+0x1c8>
 801ec8c:	6018      	str	r0, [r3, #0]
 801ec8e:	68e3      	ldr	r3, [r4, #12]
 801ec90:	3301      	adds	r3, #1
 801ec92:	60e3      	str	r3, [r4, #12]
 801ec94:	6923      	ldr	r3, [r4, #16]
 801ec96:	1bed      	subs	r5, r5, r7
 801ec98:	445d      	add	r5, fp
 801ec9a:	442b      	add	r3, r5
 801ec9c:	6123      	str	r3, [r4, #16]
 801ec9e:	2000      	movs	r0, #0
 801eca0:	b007      	add	sp, #28
 801eca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eca6:	f04f 0b00 	mov.w	fp, #0
 801ecaa:	e7ca      	b.n	801ec42 <_scanf_i+0x15e>
 801ecac:	07ca      	lsls	r2, r1, #31
 801ecae:	bf4c      	ite	mi
 801ecb0:	8018      	strhmi	r0, [r3, #0]
 801ecb2:	6018      	strpl	r0, [r3, #0]
 801ecb4:	e7eb      	b.n	801ec8e <_scanf_i+0x1aa>
 801ecb6:	2001      	movs	r0, #1
 801ecb8:	e7f2      	b.n	801eca0 <_scanf_i+0x1bc>
 801ecba:	bf00      	nop
 801ecbc:	080202d8 	.word	0x080202d8
 801ecc0:	0801cdfd 	.word	0x0801cdfd
 801ecc4:	0801f9bd 	.word	0x0801f9bd
 801ecc8:	08020a8f 	.word	0x08020a8f

0801eccc <__sccl>:
 801eccc:	b570      	push	{r4, r5, r6, lr}
 801ecce:	780b      	ldrb	r3, [r1, #0]
 801ecd0:	4604      	mov	r4, r0
 801ecd2:	2b5e      	cmp	r3, #94	@ 0x5e
 801ecd4:	bf0b      	itete	eq
 801ecd6:	784b      	ldrbeq	r3, [r1, #1]
 801ecd8:	1c4a      	addne	r2, r1, #1
 801ecda:	1c8a      	addeq	r2, r1, #2
 801ecdc:	2100      	movne	r1, #0
 801ecde:	bf08      	it	eq
 801ece0:	2101      	moveq	r1, #1
 801ece2:	3801      	subs	r0, #1
 801ece4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801ece8:	f800 1f01 	strb.w	r1, [r0, #1]!
 801ecec:	42a8      	cmp	r0, r5
 801ecee:	d1fb      	bne.n	801ece8 <__sccl+0x1c>
 801ecf0:	b90b      	cbnz	r3, 801ecf6 <__sccl+0x2a>
 801ecf2:	1e50      	subs	r0, r2, #1
 801ecf4:	bd70      	pop	{r4, r5, r6, pc}
 801ecf6:	f081 0101 	eor.w	r1, r1, #1
 801ecfa:	54e1      	strb	r1, [r4, r3]
 801ecfc:	4610      	mov	r0, r2
 801ecfe:	4602      	mov	r2, r0
 801ed00:	f812 5b01 	ldrb.w	r5, [r2], #1
 801ed04:	2d2d      	cmp	r5, #45	@ 0x2d
 801ed06:	d005      	beq.n	801ed14 <__sccl+0x48>
 801ed08:	2d5d      	cmp	r5, #93	@ 0x5d
 801ed0a:	d016      	beq.n	801ed3a <__sccl+0x6e>
 801ed0c:	2d00      	cmp	r5, #0
 801ed0e:	d0f1      	beq.n	801ecf4 <__sccl+0x28>
 801ed10:	462b      	mov	r3, r5
 801ed12:	e7f2      	b.n	801ecfa <__sccl+0x2e>
 801ed14:	7846      	ldrb	r6, [r0, #1]
 801ed16:	2e5d      	cmp	r6, #93	@ 0x5d
 801ed18:	d0fa      	beq.n	801ed10 <__sccl+0x44>
 801ed1a:	42b3      	cmp	r3, r6
 801ed1c:	dcf8      	bgt.n	801ed10 <__sccl+0x44>
 801ed1e:	3002      	adds	r0, #2
 801ed20:	461a      	mov	r2, r3
 801ed22:	3201      	adds	r2, #1
 801ed24:	4296      	cmp	r6, r2
 801ed26:	54a1      	strb	r1, [r4, r2]
 801ed28:	dcfb      	bgt.n	801ed22 <__sccl+0x56>
 801ed2a:	1af2      	subs	r2, r6, r3
 801ed2c:	3a01      	subs	r2, #1
 801ed2e:	1c5d      	adds	r5, r3, #1
 801ed30:	42b3      	cmp	r3, r6
 801ed32:	bfa8      	it	ge
 801ed34:	2200      	movge	r2, #0
 801ed36:	18ab      	adds	r3, r5, r2
 801ed38:	e7e1      	b.n	801ecfe <__sccl+0x32>
 801ed3a:	4610      	mov	r0, r2
 801ed3c:	e7da      	b.n	801ecf4 <__sccl+0x28>
	...

0801ed40 <__sflush_r>:
 801ed40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ed44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ed48:	0716      	lsls	r6, r2, #28
 801ed4a:	4605      	mov	r5, r0
 801ed4c:	460c      	mov	r4, r1
 801ed4e:	d454      	bmi.n	801edfa <__sflush_r+0xba>
 801ed50:	684b      	ldr	r3, [r1, #4]
 801ed52:	2b00      	cmp	r3, #0
 801ed54:	dc02      	bgt.n	801ed5c <__sflush_r+0x1c>
 801ed56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801ed58:	2b00      	cmp	r3, #0
 801ed5a:	dd48      	ble.n	801edee <__sflush_r+0xae>
 801ed5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ed5e:	2e00      	cmp	r6, #0
 801ed60:	d045      	beq.n	801edee <__sflush_r+0xae>
 801ed62:	2300      	movs	r3, #0
 801ed64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801ed68:	682f      	ldr	r7, [r5, #0]
 801ed6a:	6a21      	ldr	r1, [r4, #32]
 801ed6c:	602b      	str	r3, [r5, #0]
 801ed6e:	d030      	beq.n	801edd2 <__sflush_r+0x92>
 801ed70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ed72:	89a3      	ldrh	r3, [r4, #12]
 801ed74:	0759      	lsls	r1, r3, #29
 801ed76:	d505      	bpl.n	801ed84 <__sflush_r+0x44>
 801ed78:	6863      	ldr	r3, [r4, #4]
 801ed7a:	1ad2      	subs	r2, r2, r3
 801ed7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ed7e:	b10b      	cbz	r3, 801ed84 <__sflush_r+0x44>
 801ed80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ed82:	1ad2      	subs	r2, r2, r3
 801ed84:	2300      	movs	r3, #0
 801ed86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ed88:	6a21      	ldr	r1, [r4, #32]
 801ed8a:	4628      	mov	r0, r5
 801ed8c:	47b0      	blx	r6
 801ed8e:	1c43      	adds	r3, r0, #1
 801ed90:	89a3      	ldrh	r3, [r4, #12]
 801ed92:	d106      	bne.n	801eda2 <__sflush_r+0x62>
 801ed94:	6829      	ldr	r1, [r5, #0]
 801ed96:	291d      	cmp	r1, #29
 801ed98:	d82b      	bhi.n	801edf2 <__sflush_r+0xb2>
 801ed9a:	4a2a      	ldr	r2, [pc, #168]	@ (801ee44 <__sflush_r+0x104>)
 801ed9c:	410a      	asrs	r2, r1
 801ed9e:	07d6      	lsls	r6, r2, #31
 801eda0:	d427      	bmi.n	801edf2 <__sflush_r+0xb2>
 801eda2:	2200      	movs	r2, #0
 801eda4:	6062      	str	r2, [r4, #4]
 801eda6:	04d9      	lsls	r1, r3, #19
 801eda8:	6922      	ldr	r2, [r4, #16]
 801edaa:	6022      	str	r2, [r4, #0]
 801edac:	d504      	bpl.n	801edb8 <__sflush_r+0x78>
 801edae:	1c42      	adds	r2, r0, #1
 801edb0:	d101      	bne.n	801edb6 <__sflush_r+0x76>
 801edb2:	682b      	ldr	r3, [r5, #0]
 801edb4:	b903      	cbnz	r3, 801edb8 <__sflush_r+0x78>
 801edb6:	6560      	str	r0, [r4, #84]	@ 0x54
 801edb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801edba:	602f      	str	r7, [r5, #0]
 801edbc:	b1b9      	cbz	r1, 801edee <__sflush_r+0xae>
 801edbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801edc2:	4299      	cmp	r1, r3
 801edc4:	d002      	beq.n	801edcc <__sflush_r+0x8c>
 801edc6:	4628      	mov	r0, r5
 801edc8:	f7fe fed0 	bl	801db6c <_free_r>
 801edcc:	2300      	movs	r3, #0
 801edce:	6363      	str	r3, [r4, #52]	@ 0x34
 801edd0:	e00d      	b.n	801edee <__sflush_r+0xae>
 801edd2:	2301      	movs	r3, #1
 801edd4:	4628      	mov	r0, r5
 801edd6:	47b0      	blx	r6
 801edd8:	4602      	mov	r2, r0
 801edda:	1c50      	adds	r0, r2, #1
 801eddc:	d1c9      	bne.n	801ed72 <__sflush_r+0x32>
 801edde:	682b      	ldr	r3, [r5, #0]
 801ede0:	2b00      	cmp	r3, #0
 801ede2:	d0c6      	beq.n	801ed72 <__sflush_r+0x32>
 801ede4:	2b1d      	cmp	r3, #29
 801ede6:	d001      	beq.n	801edec <__sflush_r+0xac>
 801ede8:	2b16      	cmp	r3, #22
 801edea:	d11e      	bne.n	801ee2a <__sflush_r+0xea>
 801edec:	602f      	str	r7, [r5, #0]
 801edee:	2000      	movs	r0, #0
 801edf0:	e022      	b.n	801ee38 <__sflush_r+0xf8>
 801edf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801edf6:	b21b      	sxth	r3, r3
 801edf8:	e01b      	b.n	801ee32 <__sflush_r+0xf2>
 801edfa:	690f      	ldr	r7, [r1, #16]
 801edfc:	2f00      	cmp	r7, #0
 801edfe:	d0f6      	beq.n	801edee <__sflush_r+0xae>
 801ee00:	0793      	lsls	r3, r2, #30
 801ee02:	680e      	ldr	r6, [r1, #0]
 801ee04:	bf08      	it	eq
 801ee06:	694b      	ldreq	r3, [r1, #20]
 801ee08:	600f      	str	r7, [r1, #0]
 801ee0a:	bf18      	it	ne
 801ee0c:	2300      	movne	r3, #0
 801ee0e:	eba6 0807 	sub.w	r8, r6, r7
 801ee12:	608b      	str	r3, [r1, #8]
 801ee14:	f1b8 0f00 	cmp.w	r8, #0
 801ee18:	dde9      	ble.n	801edee <__sflush_r+0xae>
 801ee1a:	6a21      	ldr	r1, [r4, #32]
 801ee1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801ee1e:	4643      	mov	r3, r8
 801ee20:	463a      	mov	r2, r7
 801ee22:	4628      	mov	r0, r5
 801ee24:	47b0      	blx	r6
 801ee26:	2800      	cmp	r0, #0
 801ee28:	dc08      	bgt.n	801ee3c <__sflush_r+0xfc>
 801ee2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ee2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ee32:	81a3      	strh	r3, [r4, #12]
 801ee34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ee38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ee3c:	4407      	add	r7, r0
 801ee3e:	eba8 0800 	sub.w	r8, r8, r0
 801ee42:	e7e7      	b.n	801ee14 <__sflush_r+0xd4>
 801ee44:	dfbffffe 	.word	0xdfbffffe

0801ee48 <_fflush_r>:
 801ee48:	b538      	push	{r3, r4, r5, lr}
 801ee4a:	690b      	ldr	r3, [r1, #16]
 801ee4c:	4605      	mov	r5, r0
 801ee4e:	460c      	mov	r4, r1
 801ee50:	b913      	cbnz	r3, 801ee58 <_fflush_r+0x10>
 801ee52:	2500      	movs	r5, #0
 801ee54:	4628      	mov	r0, r5
 801ee56:	bd38      	pop	{r3, r4, r5, pc}
 801ee58:	b118      	cbz	r0, 801ee62 <_fflush_r+0x1a>
 801ee5a:	6a03      	ldr	r3, [r0, #32]
 801ee5c:	b90b      	cbnz	r3, 801ee62 <_fflush_r+0x1a>
 801ee5e:	f7fd f983 	bl	801c168 <__sinit>
 801ee62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ee66:	2b00      	cmp	r3, #0
 801ee68:	d0f3      	beq.n	801ee52 <_fflush_r+0xa>
 801ee6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ee6c:	07d0      	lsls	r0, r2, #31
 801ee6e:	d404      	bmi.n	801ee7a <_fflush_r+0x32>
 801ee70:	0599      	lsls	r1, r3, #22
 801ee72:	d402      	bmi.n	801ee7a <_fflush_r+0x32>
 801ee74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ee76:	f7fe f870 	bl	801cf5a <__retarget_lock_acquire_recursive>
 801ee7a:	4628      	mov	r0, r5
 801ee7c:	4621      	mov	r1, r4
 801ee7e:	f7ff ff5f 	bl	801ed40 <__sflush_r>
 801ee82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ee84:	07da      	lsls	r2, r3, #31
 801ee86:	4605      	mov	r5, r0
 801ee88:	d4e4      	bmi.n	801ee54 <_fflush_r+0xc>
 801ee8a:	89a3      	ldrh	r3, [r4, #12]
 801ee8c:	059b      	lsls	r3, r3, #22
 801ee8e:	d4e1      	bmi.n	801ee54 <_fflush_r+0xc>
 801ee90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ee92:	f7fe f863 	bl	801cf5c <__retarget_lock_release_recursive>
 801ee96:	e7dd      	b.n	801ee54 <_fflush_r+0xc>

0801ee98 <__malloc_lock>:
 801ee98:	4801      	ldr	r0, [pc, #4]	@ (801eea0 <__malloc_lock+0x8>)
 801ee9a:	f7fe b85e 	b.w	801cf5a <__retarget_lock_acquire_recursive>
 801ee9e:	bf00      	nop
 801eea0:	24005e54 	.word	0x24005e54

0801eea4 <__malloc_unlock>:
 801eea4:	4801      	ldr	r0, [pc, #4]	@ (801eeac <__malloc_unlock+0x8>)
 801eea6:	f7fe b859 	b.w	801cf5c <__retarget_lock_release_recursive>
 801eeaa:	bf00      	nop
 801eeac:	24005e54 	.word	0x24005e54

0801eeb0 <_Balloc>:
 801eeb0:	b570      	push	{r4, r5, r6, lr}
 801eeb2:	69c6      	ldr	r6, [r0, #28]
 801eeb4:	4604      	mov	r4, r0
 801eeb6:	460d      	mov	r5, r1
 801eeb8:	b976      	cbnz	r6, 801eed8 <_Balloc+0x28>
 801eeba:	2010      	movs	r0, #16
 801eebc:	f7ff fcfc 	bl	801e8b8 <malloc>
 801eec0:	4602      	mov	r2, r0
 801eec2:	61e0      	str	r0, [r4, #28]
 801eec4:	b920      	cbnz	r0, 801eed0 <_Balloc+0x20>
 801eec6:	4b18      	ldr	r3, [pc, #96]	@ (801ef28 <_Balloc+0x78>)
 801eec8:	4818      	ldr	r0, [pc, #96]	@ (801ef2c <_Balloc+0x7c>)
 801eeca:	216b      	movs	r1, #107	@ 0x6b
 801eecc:	f000 fdb0 	bl	801fa30 <__assert_func>
 801eed0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801eed4:	6006      	str	r6, [r0, #0]
 801eed6:	60c6      	str	r6, [r0, #12]
 801eed8:	69e6      	ldr	r6, [r4, #28]
 801eeda:	68f3      	ldr	r3, [r6, #12]
 801eedc:	b183      	cbz	r3, 801ef00 <_Balloc+0x50>
 801eede:	69e3      	ldr	r3, [r4, #28]
 801eee0:	68db      	ldr	r3, [r3, #12]
 801eee2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801eee6:	b9b8      	cbnz	r0, 801ef18 <_Balloc+0x68>
 801eee8:	2101      	movs	r1, #1
 801eeea:	fa01 f605 	lsl.w	r6, r1, r5
 801eeee:	1d72      	adds	r2, r6, #5
 801eef0:	0092      	lsls	r2, r2, #2
 801eef2:	4620      	mov	r0, r4
 801eef4:	f000 fdba 	bl	801fa6c <_calloc_r>
 801eef8:	b160      	cbz	r0, 801ef14 <_Balloc+0x64>
 801eefa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801eefe:	e00e      	b.n	801ef1e <_Balloc+0x6e>
 801ef00:	2221      	movs	r2, #33	@ 0x21
 801ef02:	2104      	movs	r1, #4
 801ef04:	4620      	mov	r0, r4
 801ef06:	f000 fdb1 	bl	801fa6c <_calloc_r>
 801ef0a:	69e3      	ldr	r3, [r4, #28]
 801ef0c:	60f0      	str	r0, [r6, #12]
 801ef0e:	68db      	ldr	r3, [r3, #12]
 801ef10:	2b00      	cmp	r3, #0
 801ef12:	d1e4      	bne.n	801eede <_Balloc+0x2e>
 801ef14:	2000      	movs	r0, #0
 801ef16:	bd70      	pop	{r4, r5, r6, pc}
 801ef18:	6802      	ldr	r2, [r0, #0]
 801ef1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ef1e:	2300      	movs	r3, #0
 801ef20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ef24:	e7f7      	b.n	801ef16 <_Balloc+0x66>
 801ef26:	bf00      	nop
 801ef28:	0802098e 	.word	0x0802098e
 801ef2c:	08020a9a 	.word	0x08020a9a

0801ef30 <_Bfree>:
 801ef30:	b570      	push	{r4, r5, r6, lr}
 801ef32:	69c6      	ldr	r6, [r0, #28]
 801ef34:	4605      	mov	r5, r0
 801ef36:	460c      	mov	r4, r1
 801ef38:	b976      	cbnz	r6, 801ef58 <_Bfree+0x28>
 801ef3a:	2010      	movs	r0, #16
 801ef3c:	f7ff fcbc 	bl	801e8b8 <malloc>
 801ef40:	4602      	mov	r2, r0
 801ef42:	61e8      	str	r0, [r5, #28]
 801ef44:	b920      	cbnz	r0, 801ef50 <_Bfree+0x20>
 801ef46:	4b09      	ldr	r3, [pc, #36]	@ (801ef6c <_Bfree+0x3c>)
 801ef48:	4809      	ldr	r0, [pc, #36]	@ (801ef70 <_Bfree+0x40>)
 801ef4a:	218f      	movs	r1, #143	@ 0x8f
 801ef4c:	f000 fd70 	bl	801fa30 <__assert_func>
 801ef50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ef54:	6006      	str	r6, [r0, #0]
 801ef56:	60c6      	str	r6, [r0, #12]
 801ef58:	b13c      	cbz	r4, 801ef6a <_Bfree+0x3a>
 801ef5a:	69eb      	ldr	r3, [r5, #28]
 801ef5c:	6862      	ldr	r2, [r4, #4]
 801ef5e:	68db      	ldr	r3, [r3, #12]
 801ef60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ef64:	6021      	str	r1, [r4, #0]
 801ef66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ef6a:	bd70      	pop	{r4, r5, r6, pc}
 801ef6c:	0802098e 	.word	0x0802098e
 801ef70:	08020a9a 	.word	0x08020a9a

0801ef74 <__multadd>:
 801ef74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ef78:	690d      	ldr	r5, [r1, #16]
 801ef7a:	4607      	mov	r7, r0
 801ef7c:	460c      	mov	r4, r1
 801ef7e:	461e      	mov	r6, r3
 801ef80:	f101 0c14 	add.w	ip, r1, #20
 801ef84:	2000      	movs	r0, #0
 801ef86:	f8dc 3000 	ldr.w	r3, [ip]
 801ef8a:	b299      	uxth	r1, r3
 801ef8c:	fb02 6101 	mla	r1, r2, r1, r6
 801ef90:	0c1e      	lsrs	r6, r3, #16
 801ef92:	0c0b      	lsrs	r3, r1, #16
 801ef94:	fb02 3306 	mla	r3, r2, r6, r3
 801ef98:	b289      	uxth	r1, r1
 801ef9a:	3001      	adds	r0, #1
 801ef9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801efa0:	4285      	cmp	r5, r0
 801efa2:	f84c 1b04 	str.w	r1, [ip], #4
 801efa6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801efaa:	dcec      	bgt.n	801ef86 <__multadd+0x12>
 801efac:	b30e      	cbz	r6, 801eff2 <__multadd+0x7e>
 801efae:	68a3      	ldr	r3, [r4, #8]
 801efb0:	42ab      	cmp	r3, r5
 801efb2:	dc19      	bgt.n	801efe8 <__multadd+0x74>
 801efb4:	6861      	ldr	r1, [r4, #4]
 801efb6:	4638      	mov	r0, r7
 801efb8:	3101      	adds	r1, #1
 801efba:	f7ff ff79 	bl	801eeb0 <_Balloc>
 801efbe:	4680      	mov	r8, r0
 801efc0:	b928      	cbnz	r0, 801efce <__multadd+0x5a>
 801efc2:	4602      	mov	r2, r0
 801efc4:	4b0c      	ldr	r3, [pc, #48]	@ (801eff8 <__multadd+0x84>)
 801efc6:	480d      	ldr	r0, [pc, #52]	@ (801effc <__multadd+0x88>)
 801efc8:	21ba      	movs	r1, #186	@ 0xba
 801efca:	f000 fd31 	bl	801fa30 <__assert_func>
 801efce:	6922      	ldr	r2, [r4, #16]
 801efd0:	3202      	adds	r2, #2
 801efd2:	f104 010c 	add.w	r1, r4, #12
 801efd6:	0092      	lsls	r2, r2, #2
 801efd8:	300c      	adds	r0, #12
 801efda:	f7fd ffc0 	bl	801cf5e <memcpy>
 801efde:	4621      	mov	r1, r4
 801efe0:	4638      	mov	r0, r7
 801efe2:	f7ff ffa5 	bl	801ef30 <_Bfree>
 801efe6:	4644      	mov	r4, r8
 801efe8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801efec:	3501      	adds	r5, #1
 801efee:	615e      	str	r6, [r3, #20]
 801eff0:	6125      	str	r5, [r4, #16]
 801eff2:	4620      	mov	r0, r4
 801eff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eff8:	080209fd 	.word	0x080209fd
 801effc:	08020a9a 	.word	0x08020a9a

0801f000 <__s2b>:
 801f000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f004:	460c      	mov	r4, r1
 801f006:	4615      	mov	r5, r2
 801f008:	461f      	mov	r7, r3
 801f00a:	2209      	movs	r2, #9
 801f00c:	3308      	adds	r3, #8
 801f00e:	4606      	mov	r6, r0
 801f010:	fb93 f3f2 	sdiv	r3, r3, r2
 801f014:	2100      	movs	r1, #0
 801f016:	2201      	movs	r2, #1
 801f018:	429a      	cmp	r2, r3
 801f01a:	db09      	blt.n	801f030 <__s2b+0x30>
 801f01c:	4630      	mov	r0, r6
 801f01e:	f7ff ff47 	bl	801eeb0 <_Balloc>
 801f022:	b940      	cbnz	r0, 801f036 <__s2b+0x36>
 801f024:	4602      	mov	r2, r0
 801f026:	4b19      	ldr	r3, [pc, #100]	@ (801f08c <__s2b+0x8c>)
 801f028:	4819      	ldr	r0, [pc, #100]	@ (801f090 <__s2b+0x90>)
 801f02a:	21d3      	movs	r1, #211	@ 0xd3
 801f02c:	f000 fd00 	bl	801fa30 <__assert_func>
 801f030:	0052      	lsls	r2, r2, #1
 801f032:	3101      	adds	r1, #1
 801f034:	e7f0      	b.n	801f018 <__s2b+0x18>
 801f036:	9b08      	ldr	r3, [sp, #32]
 801f038:	6143      	str	r3, [r0, #20]
 801f03a:	2d09      	cmp	r5, #9
 801f03c:	f04f 0301 	mov.w	r3, #1
 801f040:	6103      	str	r3, [r0, #16]
 801f042:	dd16      	ble.n	801f072 <__s2b+0x72>
 801f044:	f104 0909 	add.w	r9, r4, #9
 801f048:	46c8      	mov	r8, r9
 801f04a:	442c      	add	r4, r5
 801f04c:	f818 3b01 	ldrb.w	r3, [r8], #1
 801f050:	4601      	mov	r1, r0
 801f052:	3b30      	subs	r3, #48	@ 0x30
 801f054:	220a      	movs	r2, #10
 801f056:	4630      	mov	r0, r6
 801f058:	f7ff ff8c 	bl	801ef74 <__multadd>
 801f05c:	45a0      	cmp	r8, r4
 801f05e:	d1f5      	bne.n	801f04c <__s2b+0x4c>
 801f060:	f1a5 0408 	sub.w	r4, r5, #8
 801f064:	444c      	add	r4, r9
 801f066:	1b2d      	subs	r5, r5, r4
 801f068:	1963      	adds	r3, r4, r5
 801f06a:	42bb      	cmp	r3, r7
 801f06c:	db04      	blt.n	801f078 <__s2b+0x78>
 801f06e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f072:	340a      	adds	r4, #10
 801f074:	2509      	movs	r5, #9
 801f076:	e7f6      	b.n	801f066 <__s2b+0x66>
 801f078:	f814 3b01 	ldrb.w	r3, [r4], #1
 801f07c:	4601      	mov	r1, r0
 801f07e:	3b30      	subs	r3, #48	@ 0x30
 801f080:	220a      	movs	r2, #10
 801f082:	4630      	mov	r0, r6
 801f084:	f7ff ff76 	bl	801ef74 <__multadd>
 801f088:	e7ee      	b.n	801f068 <__s2b+0x68>
 801f08a:	bf00      	nop
 801f08c:	080209fd 	.word	0x080209fd
 801f090:	08020a9a 	.word	0x08020a9a

0801f094 <__hi0bits>:
 801f094:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801f098:	4603      	mov	r3, r0
 801f09a:	bf36      	itet	cc
 801f09c:	0403      	lslcc	r3, r0, #16
 801f09e:	2000      	movcs	r0, #0
 801f0a0:	2010      	movcc	r0, #16
 801f0a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801f0a6:	bf3c      	itt	cc
 801f0a8:	021b      	lslcc	r3, r3, #8
 801f0aa:	3008      	addcc	r0, #8
 801f0ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801f0b0:	bf3c      	itt	cc
 801f0b2:	011b      	lslcc	r3, r3, #4
 801f0b4:	3004      	addcc	r0, #4
 801f0b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f0ba:	bf3c      	itt	cc
 801f0bc:	009b      	lslcc	r3, r3, #2
 801f0be:	3002      	addcc	r0, #2
 801f0c0:	2b00      	cmp	r3, #0
 801f0c2:	db05      	blt.n	801f0d0 <__hi0bits+0x3c>
 801f0c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801f0c8:	f100 0001 	add.w	r0, r0, #1
 801f0cc:	bf08      	it	eq
 801f0ce:	2020      	moveq	r0, #32
 801f0d0:	4770      	bx	lr

0801f0d2 <__lo0bits>:
 801f0d2:	6803      	ldr	r3, [r0, #0]
 801f0d4:	4602      	mov	r2, r0
 801f0d6:	f013 0007 	ands.w	r0, r3, #7
 801f0da:	d00b      	beq.n	801f0f4 <__lo0bits+0x22>
 801f0dc:	07d9      	lsls	r1, r3, #31
 801f0de:	d421      	bmi.n	801f124 <__lo0bits+0x52>
 801f0e0:	0798      	lsls	r0, r3, #30
 801f0e2:	bf49      	itett	mi
 801f0e4:	085b      	lsrmi	r3, r3, #1
 801f0e6:	089b      	lsrpl	r3, r3, #2
 801f0e8:	2001      	movmi	r0, #1
 801f0ea:	6013      	strmi	r3, [r2, #0]
 801f0ec:	bf5c      	itt	pl
 801f0ee:	6013      	strpl	r3, [r2, #0]
 801f0f0:	2002      	movpl	r0, #2
 801f0f2:	4770      	bx	lr
 801f0f4:	b299      	uxth	r1, r3
 801f0f6:	b909      	cbnz	r1, 801f0fc <__lo0bits+0x2a>
 801f0f8:	0c1b      	lsrs	r3, r3, #16
 801f0fa:	2010      	movs	r0, #16
 801f0fc:	b2d9      	uxtb	r1, r3
 801f0fe:	b909      	cbnz	r1, 801f104 <__lo0bits+0x32>
 801f100:	3008      	adds	r0, #8
 801f102:	0a1b      	lsrs	r3, r3, #8
 801f104:	0719      	lsls	r1, r3, #28
 801f106:	bf04      	itt	eq
 801f108:	091b      	lsreq	r3, r3, #4
 801f10a:	3004      	addeq	r0, #4
 801f10c:	0799      	lsls	r1, r3, #30
 801f10e:	bf04      	itt	eq
 801f110:	089b      	lsreq	r3, r3, #2
 801f112:	3002      	addeq	r0, #2
 801f114:	07d9      	lsls	r1, r3, #31
 801f116:	d403      	bmi.n	801f120 <__lo0bits+0x4e>
 801f118:	085b      	lsrs	r3, r3, #1
 801f11a:	f100 0001 	add.w	r0, r0, #1
 801f11e:	d003      	beq.n	801f128 <__lo0bits+0x56>
 801f120:	6013      	str	r3, [r2, #0]
 801f122:	4770      	bx	lr
 801f124:	2000      	movs	r0, #0
 801f126:	4770      	bx	lr
 801f128:	2020      	movs	r0, #32
 801f12a:	4770      	bx	lr

0801f12c <__i2b>:
 801f12c:	b510      	push	{r4, lr}
 801f12e:	460c      	mov	r4, r1
 801f130:	2101      	movs	r1, #1
 801f132:	f7ff febd 	bl	801eeb0 <_Balloc>
 801f136:	4602      	mov	r2, r0
 801f138:	b928      	cbnz	r0, 801f146 <__i2b+0x1a>
 801f13a:	4b05      	ldr	r3, [pc, #20]	@ (801f150 <__i2b+0x24>)
 801f13c:	4805      	ldr	r0, [pc, #20]	@ (801f154 <__i2b+0x28>)
 801f13e:	f240 1145 	movw	r1, #325	@ 0x145
 801f142:	f000 fc75 	bl	801fa30 <__assert_func>
 801f146:	2301      	movs	r3, #1
 801f148:	6144      	str	r4, [r0, #20]
 801f14a:	6103      	str	r3, [r0, #16]
 801f14c:	bd10      	pop	{r4, pc}
 801f14e:	bf00      	nop
 801f150:	080209fd 	.word	0x080209fd
 801f154:	08020a9a 	.word	0x08020a9a

0801f158 <__multiply>:
 801f158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f15c:	4614      	mov	r4, r2
 801f15e:	690a      	ldr	r2, [r1, #16]
 801f160:	6923      	ldr	r3, [r4, #16]
 801f162:	429a      	cmp	r2, r3
 801f164:	bfa8      	it	ge
 801f166:	4623      	movge	r3, r4
 801f168:	460f      	mov	r7, r1
 801f16a:	bfa4      	itt	ge
 801f16c:	460c      	movge	r4, r1
 801f16e:	461f      	movge	r7, r3
 801f170:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801f174:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801f178:	68a3      	ldr	r3, [r4, #8]
 801f17a:	6861      	ldr	r1, [r4, #4]
 801f17c:	eb0a 0609 	add.w	r6, sl, r9
 801f180:	42b3      	cmp	r3, r6
 801f182:	b085      	sub	sp, #20
 801f184:	bfb8      	it	lt
 801f186:	3101      	addlt	r1, #1
 801f188:	f7ff fe92 	bl	801eeb0 <_Balloc>
 801f18c:	b930      	cbnz	r0, 801f19c <__multiply+0x44>
 801f18e:	4602      	mov	r2, r0
 801f190:	4b44      	ldr	r3, [pc, #272]	@ (801f2a4 <__multiply+0x14c>)
 801f192:	4845      	ldr	r0, [pc, #276]	@ (801f2a8 <__multiply+0x150>)
 801f194:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801f198:	f000 fc4a 	bl	801fa30 <__assert_func>
 801f19c:	f100 0514 	add.w	r5, r0, #20
 801f1a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801f1a4:	462b      	mov	r3, r5
 801f1a6:	2200      	movs	r2, #0
 801f1a8:	4543      	cmp	r3, r8
 801f1aa:	d321      	bcc.n	801f1f0 <__multiply+0x98>
 801f1ac:	f107 0114 	add.w	r1, r7, #20
 801f1b0:	f104 0214 	add.w	r2, r4, #20
 801f1b4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801f1b8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801f1bc:	9302      	str	r3, [sp, #8]
 801f1be:	1b13      	subs	r3, r2, r4
 801f1c0:	3b15      	subs	r3, #21
 801f1c2:	f023 0303 	bic.w	r3, r3, #3
 801f1c6:	3304      	adds	r3, #4
 801f1c8:	f104 0715 	add.w	r7, r4, #21
 801f1cc:	42ba      	cmp	r2, r7
 801f1ce:	bf38      	it	cc
 801f1d0:	2304      	movcc	r3, #4
 801f1d2:	9301      	str	r3, [sp, #4]
 801f1d4:	9b02      	ldr	r3, [sp, #8]
 801f1d6:	9103      	str	r1, [sp, #12]
 801f1d8:	428b      	cmp	r3, r1
 801f1da:	d80c      	bhi.n	801f1f6 <__multiply+0x9e>
 801f1dc:	2e00      	cmp	r6, #0
 801f1de:	dd03      	ble.n	801f1e8 <__multiply+0x90>
 801f1e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801f1e4:	2b00      	cmp	r3, #0
 801f1e6:	d05b      	beq.n	801f2a0 <__multiply+0x148>
 801f1e8:	6106      	str	r6, [r0, #16]
 801f1ea:	b005      	add	sp, #20
 801f1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1f0:	f843 2b04 	str.w	r2, [r3], #4
 801f1f4:	e7d8      	b.n	801f1a8 <__multiply+0x50>
 801f1f6:	f8b1 a000 	ldrh.w	sl, [r1]
 801f1fa:	f1ba 0f00 	cmp.w	sl, #0
 801f1fe:	d024      	beq.n	801f24a <__multiply+0xf2>
 801f200:	f104 0e14 	add.w	lr, r4, #20
 801f204:	46a9      	mov	r9, r5
 801f206:	f04f 0c00 	mov.w	ip, #0
 801f20a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801f20e:	f8d9 3000 	ldr.w	r3, [r9]
 801f212:	fa1f fb87 	uxth.w	fp, r7
 801f216:	b29b      	uxth	r3, r3
 801f218:	fb0a 330b 	mla	r3, sl, fp, r3
 801f21c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801f220:	f8d9 7000 	ldr.w	r7, [r9]
 801f224:	4463      	add	r3, ip
 801f226:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801f22a:	fb0a c70b 	mla	r7, sl, fp, ip
 801f22e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801f232:	b29b      	uxth	r3, r3
 801f234:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801f238:	4572      	cmp	r2, lr
 801f23a:	f849 3b04 	str.w	r3, [r9], #4
 801f23e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801f242:	d8e2      	bhi.n	801f20a <__multiply+0xb2>
 801f244:	9b01      	ldr	r3, [sp, #4]
 801f246:	f845 c003 	str.w	ip, [r5, r3]
 801f24a:	9b03      	ldr	r3, [sp, #12]
 801f24c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801f250:	3104      	adds	r1, #4
 801f252:	f1b9 0f00 	cmp.w	r9, #0
 801f256:	d021      	beq.n	801f29c <__multiply+0x144>
 801f258:	682b      	ldr	r3, [r5, #0]
 801f25a:	f104 0c14 	add.w	ip, r4, #20
 801f25e:	46ae      	mov	lr, r5
 801f260:	f04f 0a00 	mov.w	sl, #0
 801f264:	f8bc b000 	ldrh.w	fp, [ip]
 801f268:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801f26c:	fb09 770b 	mla	r7, r9, fp, r7
 801f270:	4457      	add	r7, sl
 801f272:	b29b      	uxth	r3, r3
 801f274:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801f278:	f84e 3b04 	str.w	r3, [lr], #4
 801f27c:	f85c 3b04 	ldr.w	r3, [ip], #4
 801f280:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f284:	f8be 3000 	ldrh.w	r3, [lr]
 801f288:	fb09 330a 	mla	r3, r9, sl, r3
 801f28c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801f290:	4562      	cmp	r2, ip
 801f292:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f296:	d8e5      	bhi.n	801f264 <__multiply+0x10c>
 801f298:	9f01      	ldr	r7, [sp, #4]
 801f29a:	51eb      	str	r3, [r5, r7]
 801f29c:	3504      	adds	r5, #4
 801f29e:	e799      	b.n	801f1d4 <__multiply+0x7c>
 801f2a0:	3e01      	subs	r6, #1
 801f2a2:	e79b      	b.n	801f1dc <__multiply+0x84>
 801f2a4:	080209fd 	.word	0x080209fd
 801f2a8:	08020a9a 	.word	0x08020a9a

0801f2ac <__pow5mult>:
 801f2ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f2b0:	4615      	mov	r5, r2
 801f2b2:	f012 0203 	ands.w	r2, r2, #3
 801f2b6:	4607      	mov	r7, r0
 801f2b8:	460e      	mov	r6, r1
 801f2ba:	d007      	beq.n	801f2cc <__pow5mult+0x20>
 801f2bc:	4c25      	ldr	r4, [pc, #148]	@ (801f354 <__pow5mult+0xa8>)
 801f2be:	3a01      	subs	r2, #1
 801f2c0:	2300      	movs	r3, #0
 801f2c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f2c6:	f7ff fe55 	bl	801ef74 <__multadd>
 801f2ca:	4606      	mov	r6, r0
 801f2cc:	10ad      	asrs	r5, r5, #2
 801f2ce:	d03d      	beq.n	801f34c <__pow5mult+0xa0>
 801f2d0:	69fc      	ldr	r4, [r7, #28]
 801f2d2:	b97c      	cbnz	r4, 801f2f4 <__pow5mult+0x48>
 801f2d4:	2010      	movs	r0, #16
 801f2d6:	f7ff faef 	bl	801e8b8 <malloc>
 801f2da:	4602      	mov	r2, r0
 801f2dc:	61f8      	str	r0, [r7, #28]
 801f2de:	b928      	cbnz	r0, 801f2ec <__pow5mult+0x40>
 801f2e0:	4b1d      	ldr	r3, [pc, #116]	@ (801f358 <__pow5mult+0xac>)
 801f2e2:	481e      	ldr	r0, [pc, #120]	@ (801f35c <__pow5mult+0xb0>)
 801f2e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801f2e8:	f000 fba2 	bl	801fa30 <__assert_func>
 801f2ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801f2f0:	6004      	str	r4, [r0, #0]
 801f2f2:	60c4      	str	r4, [r0, #12]
 801f2f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801f2f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801f2fc:	b94c      	cbnz	r4, 801f312 <__pow5mult+0x66>
 801f2fe:	f240 2171 	movw	r1, #625	@ 0x271
 801f302:	4638      	mov	r0, r7
 801f304:	f7ff ff12 	bl	801f12c <__i2b>
 801f308:	2300      	movs	r3, #0
 801f30a:	f8c8 0008 	str.w	r0, [r8, #8]
 801f30e:	4604      	mov	r4, r0
 801f310:	6003      	str	r3, [r0, #0]
 801f312:	f04f 0900 	mov.w	r9, #0
 801f316:	07eb      	lsls	r3, r5, #31
 801f318:	d50a      	bpl.n	801f330 <__pow5mult+0x84>
 801f31a:	4631      	mov	r1, r6
 801f31c:	4622      	mov	r2, r4
 801f31e:	4638      	mov	r0, r7
 801f320:	f7ff ff1a 	bl	801f158 <__multiply>
 801f324:	4631      	mov	r1, r6
 801f326:	4680      	mov	r8, r0
 801f328:	4638      	mov	r0, r7
 801f32a:	f7ff fe01 	bl	801ef30 <_Bfree>
 801f32e:	4646      	mov	r6, r8
 801f330:	106d      	asrs	r5, r5, #1
 801f332:	d00b      	beq.n	801f34c <__pow5mult+0xa0>
 801f334:	6820      	ldr	r0, [r4, #0]
 801f336:	b938      	cbnz	r0, 801f348 <__pow5mult+0x9c>
 801f338:	4622      	mov	r2, r4
 801f33a:	4621      	mov	r1, r4
 801f33c:	4638      	mov	r0, r7
 801f33e:	f7ff ff0b 	bl	801f158 <__multiply>
 801f342:	6020      	str	r0, [r4, #0]
 801f344:	f8c0 9000 	str.w	r9, [r0]
 801f348:	4604      	mov	r4, r0
 801f34a:	e7e4      	b.n	801f316 <__pow5mult+0x6a>
 801f34c:	4630      	mov	r0, r6
 801f34e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f352:	bf00      	nop
 801f354:	08020af4 	.word	0x08020af4
 801f358:	0802098e 	.word	0x0802098e
 801f35c:	08020a9a 	.word	0x08020a9a

0801f360 <__lshift>:
 801f360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f364:	460c      	mov	r4, r1
 801f366:	6849      	ldr	r1, [r1, #4]
 801f368:	6923      	ldr	r3, [r4, #16]
 801f36a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801f36e:	68a3      	ldr	r3, [r4, #8]
 801f370:	4607      	mov	r7, r0
 801f372:	4691      	mov	r9, r2
 801f374:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801f378:	f108 0601 	add.w	r6, r8, #1
 801f37c:	42b3      	cmp	r3, r6
 801f37e:	db0b      	blt.n	801f398 <__lshift+0x38>
 801f380:	4638      	mov	r0, r7
 801f382:	f7ff fd95 	bl	801eeb0 <_Balloc>
 801f386:	4605      	mov	r5, r0
 801f388:	b948      	cbnz	r0, 801f39e <__lshift+0x3e>
 801f38a:	4602      	mov	r2, r0
 801f38c:	4b28      	ldr	r3, [pc, #160]	@ (801f430 <__lshift+0xd0>)
 801f38e:	4829      	ldr	r0, [pc, #164]	@ (801f434 <__lshift+0xd4>)
 801f390:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801f394:	f000 fb4c 	bl	801fa30 <__assert_func>
 801f398:	3101      	adds	r1, #1
 801f39a:	005b      	lsls	r3, r3, #1
 801f39c:	e7ee      	b.n	801f37c <__lshift+0x1c>
 801f39e:	2300      	movs	r3, #0
 801f3a0:	f100 0114 	add.w	r1, r0, #20
 801f3a4:	f100 0210 	add.w	r2, r0, #16
 801f3a8:	4618      	mov	r0, r3
 801f3aa:	4553      	cmp	r3, sl
 801f3ac:	db33      	blt.n	801f416 <__lshift+0xb6>
 801f3ae:	6920      	ldr	r0, [r4, #16]
 801f3b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801f3b4:	f104 0314 	add.w	r3, r4, #20
 801f3b8:	f019 091f 	ands.w	r9, r9, #31
 801f3bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801f3c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801f3c4:	d02b      	beq.n	801f41e <__lshift+0xbe>
 801f3c6:	f1c9 0e20 	rsb	lr, r9, #32
 801f3ca:	468a      	mov	sl, r1
 801f3cc:	2200      	movs	r2, #0
 801f3ce:	6818      	ldr	r0, [r3, #0]
 801f3d0:	fa00 f009 	lsl.w	r0, r0, r9
 801f3d4:	4310      	orrs	r0, r2
 801f3d6:	f84a 0b04 	str.w	r0, [sl], #4
 801f3da:	f853 2b04 	ldr.w	r2, [r3], #4
 801f3de:	459c      	cmp	ip, r3
 801f3e0:	fa22 f20e 	lsr.w	r2, r2, lr
 801f3e4:	d8f3      	bhi.n	801f3ce <__lshift+0x6e>
 801f3e6:	ebac 0304 	sub.w	r3, ip, r4
 801f3ea:	3b15      	subs	r3, #21
 801f3ec:	f023 0303 	bic.w	r3, r3, #3
 801f3f0:	3304      	adds	r3, #4
 801f3f2:	f104 0015 	add.w	r0, r4, #21
 801f3f6:	4584      	cmp	ip, r0
 801f3f8:	bf38      	it	cc
 801f3fa:	2304      	movcc	r3, #4
 801f3fc:	50ca      	str	r2, [r1, r3]
 801f3fe:	b10a      	cbz	r2, 801f404 <__lshift+0xa4>
 801f400:	f108 0602 	add.w	r6, r8, #2
 801f404:	3e01      	subs	r6, #1
 801f406:	4638      	mov	r0, r7
 801f408:	612e      	str	r6, [r5, #16]
 801f40a:	4621      	mov	r1, r4
 801f40c:	f7ff fd90 	bl	801ef30 <_Bfree>
 801f410:	4628      	mov	r0, r5
 801f412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f416:	f842 0f04 	str.w	r0, [r2, #4]!
 801f41a:	3301      	adds	r3, #1
 801f41c:	e7c5      	b.n	801f3aa <__lshift+0x4a>
 801f41e:	3904      	subs	r1, #4
 801f420:	f853 2b04 	ldr.w	r2, [r3], #4
 801f424:	f841 2f04 	str.w	r2, [r1, #4]!
 801f428:	459c      	cmp	ip, r3
 801f42a:	d8f9      	bhi.n	801f420 <__lshift+0xc0>
 801f42c:	e7ea      	b.n	801f404 <__lshift+0xa4>
 801f42e:	bf00      	nop
 801f430:	080209fd 	.word	0x080209fd
 801f434:	08020a9a 	.word	0x08020a9a

0801f438 <__mcmp>:
 801f438:	690a      	ldr	r2, [r1, #16]
 801f43a:	4603      	mov	r3, r0
 801f43c:	6900      	ldr	r0, [r0, #16]
 801f43e:	1a80      	subs	r0, r0, r2
 801f440:	b530      	push	{r4, r5, lr}
 801f442:	d10e      	bne.n	801f462 <__mcmp+0x2a>
 801f444:	3314      	adds	r3, #20
 801f446:	3114      	adds	r1, #20
 801f448:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801f44c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801f450:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801f454:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801f458:	4295      	cmp	r5, r2
 801f45a:	d003      	beq.n	801f464 <__mcmp+0x2c>
 801f45c:	d205      	bcs.n	801f46a <__mcmp+0x32>
 801f45e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f462:	bd30      	pop	{r4, r5, pc}
 801f464:	42a3      	cmp	r3, r4
 801f466:	d3f3      	bcc.n	801f450 <__mcmp+0x18>
 801f468:	e7fb      	b.n	801f462 <__mcmp+0x2a>
 801f46a:	2001      	movs	r0, #1
 801f46c:	e7f9      	b.n	801f462 <__mcmp+0x2a>
	...

0801f470 <__mdiff>:
 801f470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f474:	4689      	mov	r9, r1
 801f476:	4606      	mov	r6, r0
 801f478:	4611      	mov	r1, r2
 801f47a:	4648      	mov	r0, r9
 801f47c:	4614      	mov	r4, r2
 801f47e:	f7ff ffdb 	bl	801f438 <__mcmp>
 801f482:	1e05      	subs	r5, r0, #0
 801f484:	d112      	bne.n	801f4ac <__mdiff+0x3c>
 801f486:	4629      	mov	r1, r5
 801f488:	4630      	mov	r0, r6
 801f48a:	f7ff fd11 	bl	801eeb0 <_Balloc>
 801f48e:	4602      	mov	r2, r0
 801f490:	b928      	cbnz	r0, 801f49e <__mdiff+0x2e>
 801f492:	4b3f      	ldr	r3, [pc, #252]	@ (801f590 <__mdiff+0x120>)
 801f494:	f240 2137 	movw	r1, #567	@ 0x237
 801f498:	483e      	ldr	r0, [pc, #248]	@ (801f594 <__mdiff+0x124>)
 801f49a:	f000 fac9 	bl	801fa30 <__assert_func>
 801f49e:	2301      	movs	r3, #1
 801f4a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801f4a4:	4610      	mov	r0, r2
 801f4a6:	b003      	add	sp, #12
 801f4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4ac:	bfbc      	itt	lt
 801f4ae:	464b      	movlt	r3, r9
 801f4b0:	46a1      	movlt	r9, r4
 801f4b2:	4630      	mov	r0, r6
 801f4b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801f4b8:	bfba      	itte	lt
 801f4ba:	461c      	movlt	r4, r3
 801f4bc:	2501      	movlt	r5, #1
 801f4be:	2500      	movge	r5, #0
 801f4c0:	f7ff fcf6 	bl	801eeb0 <_Balloc>
 801f4c4:	4602      	mov	r2, r0
 801f4c6:	b918      	cbnz	r0, 801f4d0 <__mdiff+0x60>
 801f4c8:	4b31      	ldr	r3, [pc, #196]	@ (801f590 <__mdiff+0x120>)
 801f4ca:	f240 2145 	movw	r1, #581	@ 0x245
 801f4ce:	e7e3      	b.n	801f498 <__mdiff+0x28>
 801f4d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801f4d4:	6926      	ldr	r6, [r4, #16]
 801f4d6:	60c5      	str	r5, [r0, #12]
 801f4d8:	f109 0310 	add.w	r3, r9, #16
 801f4dc:	f109 0514 	add.w	r5, r9, #20
 801f4e0:	f104 0e14 	add.w	lr, r4, #20
 801f4e4:	f100 0b14 	add.w	fp, r0, #20
 801f4e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801f4ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801f4f0:	9301      	str	r3, [sp, #4]
 801f4f2:	46d9      	mov	r9, fp
 801f4f4:	f04f 0c00 	mov.w	ip, #0
 801f4f8:	9b01      	ldr	r3, [sp, #4]
 801f4fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 801f4fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 801f502:	9301      	str	r3, [sp, #4]
 801f504:	fa1f f38a 	uxth.w	r3, sl
 801f508:	4619      	mov	r1, r3
 801f50a:	b283      	uxth	r3, r0
 801f50c:	1acb      	subs	r3, r1, r3
 801f50e:	0c00      	lsrs	r0, r0, #16
 801f510:	4463      	add	r3, ip
 801f512:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801f516:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801f51a:	b29b      	uxth	r3, r3
 801f51c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801f520:	4576      	cmp	r6, lr
 801f522:	f849 3b04 	str.w	r3, [r9], #4
 801f526:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801f52a:	d8e5      	bhi.n	801f4f8 <__mdiff+0x88>
 801f52c:	1b33      	subs	r3, r6, r4
 801f52e:	3b15      	subs	r3, #21
 801f530:	f023 0303 	bic.w	r3, r3, #3
 801f534:	3415      	adds	r4, #21
 801f536:	3304      	adds	r3, #4
 801f538:	42a6      	cmp	r6, r4
 801f53a:	bf38      	it	cc
 801f53c:	2304      	movcc	r3, #4
 801f53e:	441d      	add	r5, r3
 801f540:	445b      	add	r3, fp
 801f542:	461e      	mov	r6, r3
 801f544:	462c      	mov	r4, r5
 801f546:	4544      	cmp	r4, r8
 801f548:	d30e      	bcc.n	801f568 <__mdiff+0xf8>
 801f54a:	f108 0103 	add.w	r1, r8, #3
 801f54e:	1b49      	subs	r1, r1, r5
 801f550:	f021 0103 	bic.w	r1, r1, #3
 801f554:	3d03      	subs	r5, #3
 801f556:	45a8      	cmp	r8, r5
 801f558:	bf38      	it	cc
 801f55a:	2100      	movcc	r1, #0
 801f55c:	440b      	add	r3, r1
 801f55e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f562:	b191      	cbz	r1, 801f58a <__mdiff+0x11a>
 801f564:	6117      	str	r7, [r2, #16]
 801f566:	e79d      	b.n	801f4a4 <__mdiff+0x34>
 801f568:	f854 1b04 	ldr.w	r1, [r4], #4
 801f56c:	46e6      	mov	lr, ip
 801f56e:	0c08      	lsrs	r0, r1, #16
 801f570:	fa1c fc81 	uxtah	ip, ip, r1
 801f574:	4471      	add	r1, lr
 801f576:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801f57a:	b289      	uxth	r1, r1
 801f57c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801f580:	f846 1b04 	str.w	r1, [r6], #4
 801f584:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801f588:	e7dd      	b.n	801f546 <__mdiff+0xd6>
 801f58a:	3f01      	subs	r7, #1
 801f58c:	e7e7      	b.n	801f55e <__mdiff+0xee>
 801f58e:	bf00      	nop
 801f590:	080209fd 	.word	0x080209fd
 801f594:	08020a9a 	.word	0x08020a9a

0801f598 <__ulp>:
 801f598:	b082      	sub	sp, #8
 801f59a:	ed8d 0b00 	vstr	d0, [sp]
 801f59e:	9a01      	ldr	r2, [sp, #4]
 801f5a0:	4b0f      	ldr	r3, [pc, #60]	@ (801f5e0 <__ulp+0x48>)
 801f5a2:	4013      	ands	r3, r2
 801f5a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801f5a8:	2b00      	cmp	r3, #0
 801f5aa:	dc08      	bgt.n	801f5be <__ulp+0x26>
 801f5ac:	425b      	negs	r3, r3
 801f5ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801f5b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 801f5b6:	da04      	bge.n	801f5c2 <__ulp+0x2a>
 801f5b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801f5bc:	4113      	asrs	r3, r2
 801f5be:	2200      	movs	r2, #0
 801f5c0:	e008      	b.n	801f5d4 <__ulp+0x3c>
 801f5c2:	f1a2 0314 	sub.w	r3, r2, #20
 801f5c6:	2b1e      	cmp	r3, #30
 801f5c8:	bfda      	itte	le
 801f5ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801f5ce:	40da      	lsrle	r2, r3
 801f5d0:	2201      	movgt	r2, #1
 801f5d2:	2300      	movs	r3, #0
 801f5d4:	4619      	mov	r1, r3
 801f5d6:	4610      	mov	r0, r2
 801f5d8:	ec41 0b10 	vmov	d0, r0, r1
 801f5dc:	b002      	add	sp, #8
 801f5de:	4770      	bx	lr
 801f5e0:	7ff00000 	.word	0x7ff00000

0801f5e4 <__b2d>:
 801f5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f5e8:	6906      	ldr	r6, [r0, #16]
 801f5ea:	f100 0814 	add.w	r8, r0, #20
 801f5ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801f5f2:	1f37      	subs	r7, r6, #4
 801f5f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801f5f8:	4610      	mov	r0, r2
 801f5fa:	f7ff fd4b 	bl	801f094 <__hi0bits>
 801f5fe:	f1c0 0320 	rsb	r3, r0, #32
 801f602:	280a      	cmp	r0, #10
 801f604:	600b      	str	r3, [r1, #0]
 801f606:	491b      	ldr	r1, [pc, #108]	@ (801f674 <__b2d+0x90>)
 801f608:	dc15      	bgt.n	801f636 <__b2d+0x52>
 801f60a:	f1c0 0c0b 	rsb	ip, r0, #11
 801f60e:	fa22 f30c 	lsr.w	r3, r2, ip
 801f612:	45b8      	cmp	r8, r7
 801f614:	ea43 0501 	orr.w	r5, r3, r1
 801f618:	bf34      	ite	cc
 801f61a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801f61e:	2300      	movcs	r3, #0
 801f620:	3015      	adds	r0, #21
 801f622:	fa02 f000 	lsl.w	r0, r2, r0
 801f626:	fa23 f30c 	lsr.w	r3, r3, ip
 801f62a:	4303      	orrs	r3, r0
 801f62c:	461c      	mov	r4, r3
 801f62e:	ec45 4b10 	vmov	d0, r4, r5
 801f632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f636:	45b8      	cmp	r8, r7
 801f638:	bf3a      	itte	cc
 801f63a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801f63e:	f1a6 0708 	subcc.w	r7, r6, #8
 801f642:	2300      	movcs	r3, #0
 801f644:	380b      	subs	r0, #11
 801f646:	d012      	beq.n	801f66e <__b2d+0x8a>
 801f648:	f1c0 0120 	rsb	r1, r0, #32
 801f64c:	fa23 f401 	lsr.w	r4, r3, r1
 801f650:	4082      	lsls	r2, r0
 801f652:	4322      	orrs	r2, r4
 801f654:	4547      	cmp	r7, r8
 801f656:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801f65a:	bf8c      	ite	hi
 801f65c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801f660:	2200      	movls	r2, #0
 801f662:	4083      	lsls	r3, r0
 801f664:	40ca      	lsrs	r2, r1
 801f666:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801f66a:	4313      	orrs	r3, r2
 801f66c:	e7de      	b.n	801f62c <__b2d+0x48>
 801f66e:	ea42 0501 	orr.w	r5, r2, r1
 801f672:	e7db      	b.n	801f62c <__b2d+0x48>
 801f674:	3ff00000 	.word	0x3ff00000

0801f678 <__d2b>:
 801f678:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f67c:	460f      	mov	r7, r1
 801f67e:	2101      	movs	r1, #1
 801f680:	ec59 8b10 	vmov	r8, r9, d0
 801f684:	4616      	mov	r6, r2
 801f686:	f7ff fc13 	bl	801eeb0 <_Balloc>
 801f68a:	4604      	mov	r4, r0
 801f68c:	b930      	cbnz	r0, 801f69c <__d2b+0x24>
 801f68e:	4602      	mov	r2, r0
 801f690:	4b23      	ldr	r3, [pc, #140]	@ (801f720 <__d2b+0xa8>)
 801f692:	4824      	ldr	r0, [pc, #144]	@ (801f724 <__d2b+0xac>)
 801f694:	f240 310f 	movw	r1, #783	@ 0x30f
 801f698:	f000 f9ca 	bl	801fa30 <__assert_func>
 801f69c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801f6a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801f6a4:	b10d      	cbz	r5, 801f6aa <__d2b+0x32>
 801f6a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f6aa:	9301      	str	r3, [sp, #4]
 801f6ac:	f1b8 0300 	subs.w	r3, r8, #0
 801f6b0:	d023      	beq.n	801f6fa <__d2b+0x82>
 801f6b2:	4668      	mov	r0, sp
 801f6b4:	9300      	str	r3, [sp, #0]
 801f6b6:	f7ff fd0c 	bl	801f0d2 <__lo0bits>
 801f6ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 801f6be:	b1d0      	cbz	r0, 801f6f6 <__d2b+0x7e>
 801f6c0:	f1c0 0320 	rsb	r3, r0, #32
 801f6c4:	fa02 f303 	lsl.w	r3, r2, r3
 801f6c8:	430b      	orrs	r3, r1
 801f6ca:	40c2      	lsrs	r2, r0
 801f6cc:	6163      	str	r3, [r4, #20]
 801f6ce:	9201      	str	r2, [sp, #4]
 801f6d0:	9b01      	ldr	r3, [sp, #4]
 801f6d2:	61a3      	str	r3, [r4, #24]
 801f6d4:	2b00      	cmp	r3, #0
 801f6d6:	bf0c      	ite	eq
 801f6d8:	2201      	moveq	r2, #1
 801f6da:	2202      	movne	r2, #2
 801f6dc:	6122      	str	r2, [r4, #16]
 801f6de:	b1a5      	cbz	r5, 801f70a <__d2b+0x92>
 801f6e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801f6e4:	4405      	add	r5, r0
 801f6e6:	603d      	str	r5, [r7, #0]
 801f6e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801f6ec:	6030      	str	r0, [r6, #0]
 801f6ee:	4620      	mov	r0, r4
 801f6f0:	b003      	add	sp, #12
 801f6f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f6f6:	6161      	str	r1, [r4, #20]
 801f6f8:	e7ea      	b.n	801f6d0 <__d2b+0x58>
 801f6fa:	a801      	add	r0, sp, #4
 801f6fc:	f7ff fce9 	bl	801f0d2 <__lo0bits>
 801f700:	9b01      	ldr	r3, [sp, #4]
 801f702:	6163      	str	r3, [r4, #20]
 801f704:	3020      	adds	r0, #32
 801f706:	2201      	movs	r2, #1
 801f708:	e7e8      	b.n	801f6dc <__d2b+0x64>
 801f70a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f70e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801f712:	6038      	str	r0, [r7, #0]
 801f714:	6918      	ldr	r0, [r3, #16]
 801f716:	f7ff fcbd 	bl	801f094 <__hi0bits>
 801f71a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f71e:	e7e5      	b.n	801f6ec <__d2b+0x74>
 801f720:	080209fd 	.word	0x080209fd
 801f724:	08020a9a 	.word	0x08020a9a

0801f728 <__ratio>:
 801f728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f72c:	4688      	mov	r8, r1
 801f72e:	4669      	mov	r1, sp
 801f730:	4681      	mov	r9, r0
 801f732:	f7ff ff57 	bl	801f5e4 <__b2d>
 801f736:	a901      	add	r1, sp, #4
 801f738:	4640      	mov	r0, r8
 801f73a:	ec55 4b10 	vmov	r4, r5, d0
 801f73e:	f7ff ff51 	bl	801f5e4 <__b2d>
 801f742:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801f746:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801f74a:	1ad2      	subs	r2, r2, r3
 801f74c:	e9dd 3100 	ldrd	r3, r1, [sp]
 801f750:	1a5b      	subs	r3, r3, r1
 801f752:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801f756:	ec57 6b10 	vmov	r6, r7, d0
 801f75a:	2b00      	cmp	r3, #0
 801f75c:	bfd6      	itet	le
 801f75e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801f762:	462a      	movgt	r2, r5
 801f764:	463a      	movle	r2, r7
 801f766:	46ab      	mov	fp, r5
 801f768:	46a2      	mov	sl, r4
 801f76a:	bfce      	itee	gt
 801f76c:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801f770:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801f774:	ee00 3a90 	vmovle	s1, r3
 801f778:	ec4b ab17 	vmov	d7, sl, fp
 801f77c:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801f780:	b003      	add	sp, #12
 801f782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f786 <__copybits>:
 801f786:	3901      	subs	r1, #1
 801f788:	b570      	push	{r4, r5, r6, lr}
 801f78a:	1149      	asrs	r1, r1, #5
 801f78c:	6914      	ldr	r4, [r2, #16]
 801f78e:	3101      	adds	r1, #1
 801f790:	f102 0314 	add.w	r3, r2, #20
 801f794:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801f798:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801f79c:	1f05      	subs	r5, r0, #4
 801f79e:	42a3      	cmp	r3, r4
 801f7a0:	d30c      	bcc.n	801f7bc <__copybits+0x36>
 801f7a2:	1aa3      	subs	r3, r4, r2
 801f7a4:	3b11      	subs	r3, #17
 801f7a6:	f023 0303 	bic.w	r3, r3, #3
 801f7aa:	3211      	adds	r2, #17
 801f7ac:	42a2      	cmp	r2, r4
 801f7ae:	bf88      	it	hi
 801f7b0:	2300      	movhi	r3, #0
 801f7b2:	4418      	add	r0, r3
 801f7b4:	2300      	movs	r3, #0
 801f7b6:	4288      	cmp	r0, r1
 801f7b8:	d305      	bcc.n	801f7c6 <__copybits+0x40>
 801f7ba:	bd70      	pop	{r4, r5, r6, pc}
 801f7bc:	f853 6b04 	ldr.w	r6, [r3], #4
 801f7c0:	f845 6f04 	str.w	r6, [r5, #4]!
 801f7c4:	e7eb      	b.n	801f79e <__copybits+0x18>
 801f7c6:	f840 3b04 	str.w	r3, [r0], #4
 801f7ca:	e7f4      	b.n	801f7b6 <__copybits+0x30>

0801f7cc <__any_on>:
 801f7cc:	f100 0214 	add.w	r2, r0, #20
 801f7d0:	6900      	ldr	r0, [r0, #16]
 801f7d2:	114b      	asrs	r3, r1, #5
 801f7d4:	4298      	cmp	r0, r3
 801f7d6:	b510      	push	{r4, lr}
 801f7d8:	db11      	blt.n	801f7fe <__any_on+0x32>
 801f7da:	dd0a      	ble.n	801f7f2 <__any_on+0x26>
 801f7dc:	f011 011f 	ands.w	r1, r1, #31
 801f7e0:	d007      	beq.n	801f7f2 <__any_on+0x26>
 801f7e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801f7e6:	fa24 f001 	lsr.w	r0, r4, r1
 801f7ea:	fa00 f101 	lsl.w	r1, r0, r1
 801f7ee:	428c      	cmp	r4, r1
 801f7f0:	d10b      	bne.n	801f80a <__any_on+0x3e>
 801f7f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f7f6:	4293      	cmp	r3, r2
 801f7f8:	d803      	bhi.n	801f802 <__any_on+0x36>
 801f7fa:	2000      	movs	r0, #0
 801f7fc:	bd10      	pop	{r4, pc}
 801f7fe:	4603      	mov	r3, r0
 801f800:	e7f7      	b.n	801f7f2 <__any_on+0x26>
 801f802:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f806:	2900      	cmp	r1, #0
 801f808:	d0f5      	beq.n	801f7f6 <__any_on+0x2a>
 801f80a:	2001      	movs	r0, #1
 801f80c:	e7f6      	b.n	801f7fc <__any_on+0x30>

0801f80e <__submore>:
 801f80e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f812:	460c      	mov	r4, r1
 801f814:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801f816:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f81a:	4299      	cmp	r1, r3
 801f81c:	d11d      	bne.n	801f85a <__submore+0x4c>
 801f81e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801f822:	f7ff f873 	bl	801e90c <_malloc_r>
 801f826:	b918      	cbnz	r0, 801f830 <__submore+0x22>
 801f828:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f830:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801f834:	63a3      	str	r3, [r4, #56]	@ 0x38
 801f836:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801f83a:	6360      	str	r0, [r4, #52]	@ 0x34
 801f83c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801f840:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801f844:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801f848:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801f84c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801f850:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801f854:	6020      	str	r0, [r4, #0]
 801f856:	2000      	movs	r0, #0
 801f858:	e7e8      	b.n	801f82c <__submore+0x1e>
 801f85a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801f85c:	0077      	lsls	r7, r6, #1
 801f85e:	463a      	mov	r2, r7
 801f860:	f000 f80f 	bl	801f882 <_realloc_r>
 801f864:	4605      	mov	r5, r0
 801f866:	2800      	cmp	r0, #0
 801f868:	d0de      	beq.n	801f828 <__submore+0x1a>
 801f86a:	eb00 0806 	add.w	r8, r0, r6
 801f86e:	4601      	mov	r1, r0
 801f870:	4632      	mov	r2, r6
 801f872:	4640      	mov	r0, r8
 801f874:	f7fd fb73 	bl	801cf5e <memcpy>
 801f878:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801f87c:	f8c4 8000 	str.w	r8, [r4]
 801f880:	e7e9      	b.n	801f856 <__submore+0x48>

0801f882 <_realloc_r>:
 801f882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f886:	4680      	mov	r8, r0
 801f888:	4615      	mov	r5, r2
 801f88a:	460c      	mov	r4, r1
 801f88c:	b921      	cbnz	r1, 801f898 <_realloc_r+0x16>
 801f88e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f892:	4611      	mov	r1, r2
 801f894:	f7ff b83a 	b.w	801e90c <_malloc_r>
 801f898:	b92a      	cbnz	r2, 801f8a6 <_realloc_r+0x24>
 801f89a:	f7fe f967 	bl	801db6c <_free_r>
 801f89e:	2400      	movs	r4, #0
 801f8a0:	4620      	mov	r0, r4
 801f8a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f8a6:	f000 f8f5 	bl	801fa94 <_malloc_usable_size_r>
 801f8aa:	4285      	cmp	r5, r0
 801f8ac:	4606      	mov	r6, r0
 801f8ae:	d802      	bhi.n	801f8b6 <_realloc_r+0x34>
 801f8b0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801f8b4:	d8f4      	bhi.n	801f8a0 <_realloc_r+0x1e>
 801f8b6:	4629      	mov	r1, r5
 801f8b8:	4640      	mov	r0, r8
 801f8ba:	f7ff f827 	bl	801e90c <_malloc_r>
 801f8be:	4607      	mov	r7, r0
 801f8c0:	2800      	cmp	r0, #0
 801f8c2:	d0ec      	beq.n	801f89e <_realloc_r+0x1c>
 801f8c4:	42b5      	cmp	r5, r6
 801f8c6:	462a      	mov	r2, r5
 801f8c8:	4621      	mov	r1, r4
 801f8ca:	bf28      	it	cs
 801f8cc:	4632      	movcs	r2, r6
 801f8ce:	f7fd fb46 	bl	801cf5e <memcpy>
 801f8d2:	4621      	mov	r1, r4
 801f8d4:	4640      	mov	r0, r8
 801f8d6:	f7fe f949 	bl	801db6c <_free_r>
 801f8da:	463c      	mov	r4, r7
 801f8dc:	e7e0      	b.n	801f8a0 <_realloc_r+0x1e>
	...

0801f8e0 <_strtoul_l.constprop.0>:
 801f8e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f8e4:	4e34      	ldr	r6, [pc, #208]	@ (801f9b8 <_strtoul_l.constprop.0+0xd8>)
 801f8e6:	4686      	mov	lr, r0
 801f8e8:	460d      	mov	r5, r1
 801f8ea:	4628      	mov	r0, r5
 801f8ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f8f0:	5d37      	ldrb	r7, [r6, r4]
 801f8f2:	f017 0708 	ands.w	r7, r7, #8
 801f8f6:	d1f8      	bne.n	801f8ea <_strtoul_l.constprop.0+0xa>
 801f8f8:	2c2d      	cmp	r4, #45	@ 0x2d
 801f8fa:	d12f      	bne.n	801f95c <_strtoul_l.constprop.0+0x7c>
 801f8fc:	782c      	ldrb	r4, [r5, #0]
 801f8fe:	2701      	movs	r7, #1
 801f900:	1c85      	adds	r5, r0, #2
 801f902:	f033 0010 	bics.w	r0, r3, #16
 801f906:	d109      	bne.n	801f91c <_strtoul_l.constprop.0+0x3c>
 801f908:	2c30      	cmp	r4, #48	@ 0x30
 801f90a:	d12c      	bne.n	801f966 <_strtoul_l.constprop.0+0x86>
 801f90c:	7828      	ldrb	r0, [r5, #0]
 801f90e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801f912:	2858      	cmp	r0, #88	@ 0x58
 801f914:	d127      	bne.n	801f966 <_strtoul_l.constprop.0+0x86>
 801f916:	786c      	ldrb	r4, [r5, #1]
 801f918:	2310      	movs	r3, #16
 801f91a:	3502      	adds	r5, #2
 801f91c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801f920:	2600      	movs	r6, #0
 801f922:	fbb8 f8f3 	udiv	r8, r8, r3
 801f926:	fb03 f908 	mul.w	r9, r3, r8
 801f92a:	ea6f 0909 	mvn.w	r9, r9
 801f92e:	4630      	mov	r0, r6
 801f930:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801f934:	f1bc 0f09 	cmp.w	ip, #9
 801f938:	d81c      	bhi.n	801f974 <_strtoul_l.constprop.0+0x94>
 801f93a:	4664      	mov	r4, ip
 801f93c:	42a3      	cmp	r3, r4
 801f93e:	dd2a      	ble.n	801f996 <_strtoul_l.constprop.0+0xb6>
 801f940:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801f944:	d007      	beq.n	801f956 <_strtoul_l.constprop.0+0x76>
 801f946:	4580      	cmp	r8, r0
 801f948:	d322      	bcc.n	801f990 <_strtoul_l.constprop.0+0xb0>
 801f94a:	d101      	bne.n	801f950 <_strtoul_l.constprop.0+0x70>
 801f94c:	45a1      	cmp	r9, r4
 801f94e:	db1f      	blt.n	801f990 <_strtoul_l.constprop.0+0xb0>
 801f950:	fb00 4003 	mla	r0, r0, r3, r4
 801f954:	2601      	movs	r6, #1
 801f956:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f95a:	e7e9      	b.n	801f930 <_strtoul_l.constprop.0+0x50>
 801f95c:	2c2b      	cmp	r4, #43	@ 0x2b
 801f95e:	bf04      	itt	eq
 801f960:	782c      	ldrbeq	r4, [r5, #0]
 801f962:	1c85      	addeq	r5, r0, #2
 801f964:	e7cd      	b.n	801f902 <_strtoul_l.constprop.0+0x22>
 801f966:	2b00      	cmp	r3, #0
 801f968:	d1d8      	bne.n	801f91c <_strtoul_l.constprop.0+0x3c>
 801f96a:	2c30      	cmp	r4, #48	@ 0x30
 801f96c:	bf0c      	ite	eq
 801f96e:	2308      	moveq	r3, #8
 801f970:	230a      	movne	r3, #10
 801f972:	e7d3      	b.n	801f91c <_strtoul_l.constprop.0+0x3c>
 801f974:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801f978:	f1bc 0f19 	cmp.w	ip, #25
 801f97c:	d801      	bhi.n	801f982 <_strtoul_l.constprop.0+0xa2>
 801f97e:	3c37      	subs	r4, #55	@ 0x37
 801f980:	e7dc      	b.n	801f93c <_strtoul_l.constprop.0+0x5c>
 801f982:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801f986:	f1bc 0f19 	cmp.w	ip, #25
 801f98a:	d804      	bhi.n	801f996 <_strtoul_l.constprop.0+0xb6>
 801f98c:	3c57      	subs	r4, #87	@ 0x57
 801f98e:	e7d5      	b.n	801f93c <_strtoul_l.constprop.0+0x5c>
 801f990:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801f994:	e7df      	b.n	801f956 <_strtoul_l.constprop.0+0x76>
 801f996:	1c73      	adds	r3, r6, #1
 801f998:	d106      	bne.n	801f9a8 <_strtoul_l.constprop.0+0xc8>
 801f99a:	2322      	movs	r3, #34	@ 0x22
 801f99c:	f8ce 3000 	str.w	r3, [lr]
 801f9a0:	4630      	mov	r0, r6
 801f9a2:	b932      	cbnz	r2, 801f9b2 <_strtoul_l.constprop.0+0xd2>
 801f9a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f9a8:	b107      	cbz	r7, 801f9ac <_strtoul_l.constprop.0+0xcc>
 801f9aa:	4240      	negs	r0, r0
 801f9ac:	2a00      	cmp	r2, #0
 801f9ae:	d0f9      	beq.n	801f9a4 <_strtoul_l.constprop.0+0xc4>
 801f9b0:	b106      	cbz	r6, 801f9b4 <_strtoul_l.constprop.0+0xd4>
 801f9b2:	1e69      	subs	r1, r5, #1
 801f9b4:	6011      	str	r1, [r2, #0]
 801f9b6:	e7f5      	b.n	801f9a4 <_strtoul_l.constprop.0+0xc4>
 801f9b8:	08020881 	.word	0x08020881

0801f9bc <_strtoul_r>:
 801f9bc:	f7ff bf90 	b.w	801f8e0 <_strtoul_l.constprop.0>

0801f9c0 <__ascii_wctomb>:
 801f9c0:	4603      	mov	r3, r0
 801f9c2:	4608      	mov	r0, r1
 801f9c4:	b141      	cbz	r1, 801f9d8 <__ascii_wctomb+0x18>
 801f9c6:	2aff      	cmp	r2, #255	@ 0xff
 801f9c8:	d904      	bls.n	801f9d4 <__ascii_wctomb+0x14>
 801f9ca:	228a      	movs	r2, #138	@ 0x8a
 801f9cc:	601a      	str	r2, [r3, #0]
 801f9ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f9d2:	4770      	bx	lr
 801f9d4:	700a      	strb	r2, [r1, #0]
 801f9d6:	2001      	movs	r0, #1
 801f9d8:	4770      	bx	lr

0801f9da <memmove>:
 801f9da:	4288      	cmp	r0, r1
 801f9dc:	b510      	push	{r4, lr}
 801f9de:	eb01 0402 	add.w	r4, r1, r2
 801f9e2:	d902      	bls.n	801f9ea <memmove+0x10>
 801f9e4:	4284      	cmp	r4, r0
 801f9e6:	4623      	mov	r3, r4
 801f9e8:	d807      	bhi.n	801f9fa <memmove+0x20>
 801f9ea:	1e43      	subs	r3, r0, #1
 801f9ec:	42a1      	cmp	r1, r4
 801f9ee:	d008      	beq.n	801fa02 <memmove+0x28>
 801f9f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f9f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f9f8:	e7f8      	b.n	801f9ec <memmove+0x12>
 801f9fa:	4402      	add	r2, r0
 801f9fc:	4601      	mov	r1, r0
 801f9fe:	428a      	cmp	r2, r1
 801fa00:	d100      	bne.n	801fa04 <memmove+0x2a>
 801fa02:	bd10      	pop	{r4, pc}
 801fa04:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801fa08:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801fa0c:	e7f7      	b.n	801f9fe <memmove+0x24>
	...

0801fa10 <_sbrk_r>:
 801fa10:	b538      	push	{r3, r4, r5, lr}
 801fa12:	4d06      	ldr	r5, [pc, #24]	@ (801fa2c <_sbrk_r+0x1c>)
 801fa14:	2300      	movs	r3, #0
 801fa16:	4604      	mov	r4, r0
 801fa18:	4608      	mov	r0, r1
 801fa1a:	602b      	str	r3, [r5, #0]
 801fa1c:	f7e4 fa90 	bl	8003f40 <_sbrk>
 801fa20:	1c43      	adds	r3, r0, #1
 801fa22:	d102      	bne.n	801fa2a <_sbrk_r+0x1a>
 801fa24:	682b      	ldr	r3, [r5, #0]
 801fa26:	b103      	cbz	r3, 801fa2a <_sbrk_r+0x1a>
 801fa28:	6023      	str	r3, [r4, #0]
 801fa2a:	bd38      	pop	{r3, r4, r5, pc}
 801fa2c:	24005e50 	.word	0x24005e50

0801fa30 <__assert_func>:
 801fa30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801fa32:	4614      	mov	r4, r2
 801fa34:	461a      	mov	r2, r3
 801fa36:	4b09      	ldr	r3, [pc, #36]	@ (801fa5c <__assert_func+0x2c>)
 801fa38:	681b      	ldr	r3, [r3, #0]
 801fa3a:	4605      	mov	r5, r0
 801fa3c:	68d8      	ldr	r0, [r3, #12]
 801fa3e:	b954      	cbnz	r4, 801fa56 <__assert_func+0x26>
 801fa40:	4b07      	ldr	r3, [pc, #28]	@ (801fa60 <__assert_func+0x30>)
 801fa42:	461c      	mov	r4, r3
 801fa44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801fa48:	9100      	str	r1, [sp, #0]
 801fa4a:	462b      	mov	r3, r5
 801fa4c:	4905      	ldr	r1, [pc, #20]	@ (801fa64 <__assert_func+0x34>)
 801fa4e:	f000 f829 	bl	801faa4 <fiprintf>
 801fa52:	f000 f839 	bl	801fac8 <abort>
 801fa56:	4b04      	ldr	r3, [pc, #16]	@ (801fa68 <__assert_func+0x38>)
 801fa58:	e7f4      	b.n	801fa44 <__assert_func+0x14>
 801fa5a:	bf00      	nop
 801fa5c:	24000378 	.word	0x24000378
 801fa60:	08020c2b 	.word	0x08020c2b
 801fa64:	08020bfd 	.word	0x08020bfd
 801fa68:	08020bf0 	.word	0x08020bf0

0801fa6c <_calloc_r>:
 801fa6c:	b570      	push	{r4, r5, r6, lr}
 801fa6e:	fba1 5402 	umull	r5, r4, r1, r2
 801fa72:	b93c      	cbnz	r4, 801fa84 <_calloc_r+0x18>
 801fa74:	4629      	mov	r1, r5
 801fa76:	f7fe ff49 	bl	801e90c <_malloc_r>
 801fa7a:	4606      	mov	r6, r0
 801fa7c:	b928      	cbnz	r0, 801fa8a <_calloc_r+0x1e>
 801fa7e:	2600      	movs	r6, #0
 801fa80:	4630      	mov	r0, r6
 801fa82:	bd70      	pop	{r4, r5, r6, pc}
 801fa84:	220c      	movs	r2, #12
 801fa86:	6002      	str	r2, [r0, #0]
 801fa88:	e7f9      	b.n	801fa7e <_calloc_r+0x12>
 801fa8a:	462a      	mov	r2, r5
 801fa8c:	4621      	mov	r1, r4
 801fa8e:	f7fd f9e7 	bl	801ce60 <memset>
 801fa92:	e7f5      	b.n	801fa80 <_calloc_r+0x14>

0801fa94 <_malloc_usable_size_r>:
 801fa94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fa98:	1f18      	subs	r0, r3, #4
 801fa9a:	2b00      	cmp	r3, #0
 801fa9c:	bfbc      	itt	lt
 801fa9e:	580b      	ldrlt	r3, [r1, r0]
 801faa0:	18c0      	addlt	r0, r0, r3
 801faa2:	4770      	bx	lr

0801faa4 <fiprintf>:
 801faa4:	b40e      	push	{r1, r2, r3}
 801faa6:	b503      	push	{r0, r1, lr}
 801faa8:	4601      	mov	r1, r0
 801faaa:	ab03      	add	r3, sp, #12
 801faac:	4805      	ldr	r0, [pc, #20]	@ (801fac4 <fiprintf+0x20>)
 801faae:	f853 2b04 	ldr.w	r2, [r3], #4
 801fab2:	6800      	ldr	r0, [r0, #0]
 801fab4:	9301      	str	r3, [sp, #4]
 801fab6:	f000 f837 	bl	801fb28 <_vfiprintf_r>
 801faba:	b002      	add	sp, #8
 801fabc:	f85d eb04 	ldr.w	lr, [sp], #4
 801fac0:	b003      	add	sp, #12
 801fac2:	4770      	bx	lr
 801fac4:	24000378 	.word	0x24000378

0801fac8 <abort>:
 801fac8:	b508      	push	{r3, lr}
 801faca:	2006      	movs	r0, #6
 801facc:	f000 fa84 	bl	801ffd8 <raise>
 801fad0:	2001      	movs	r0, #1
 801fad2:	f7e4 f9bd 	bl	8003e50 <_exit>

0801fad6 <__sfputc_r>:
 801fad6:	6893      	ldr	r3, [r2, #8]
 801fad8:	3b01      	subs	r3, #1
 801fada:	2b00      	cmp	r3, #0
 801fadc:	b410      	push	{r4}
 801fade:	6093      	str	r3, [r2, #8]
 801fae0:	da08      	bge.n	801faf4 <__sfputc_r+0x1e>
 801fae2:	6994      	ldr	r4, [r2, #24]
 801fae4:	42a3      	cmp	r3, r4
 801fae6:	db01      	blt.n	801faec <__sfputc_r+0x16>
 801fae8:	290a      	cmp	r1, #10
 801faea:	d103      	bne.n	801faf4 <__sfputc_r+0x1e>
 801faec:	f85d 4b04 	ldr.w	r4, [sp], #4
 801faf0:	f000 b932 	b.w	801fd58 <__swbuf_r>
 801faf4:	6813      	ldr	r3, [r2, #0]
 801faf6:	1c58      	adds	r0, r3, #1
 801faf8:	6010      	str	r0, [r2, #0]
 801fafa:	7019      	strb	r1, [r3, #0]
 801fafc:	4608      	mov	r0, r1
 801fafe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fb02:	4770      	bx	lr

0801fb04 <__sfputs_r>:
 801fb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fb06:	4606      	mov	r6, r0
 801fb08:	460f      	mov	r7, r1
 801fb0a:	4614      	mov	r4, r2
 801fb0c:	18d5      	adds	r5, r2, r3
 801fb0e:	42ac      	cmp	r4, r5
 801fb10:	d101      	bne.n	801fb16 <__sfputs_r+0x12>
 801fb12:	2000      	movs	r0, #0
 801fb14:	e007      	b.n	801fb26 <__sfputs_r+0x22>
 801fb16:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fb1a:	463a      	mov	r2, r7
 801fb1c:	4630      	mov	r0, r6
 801fb1e:	f7ff ffda 	bl	801fad6 <__sfputc_r>
 801fb22:	1c43      	adds	r3, r0, #1
 801fb24:	d1f3      	bne.n	801fb0e <__sfputs_r+0xa>
 801fb26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801fb28 <_vfiprintf_r>:
 801fb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb2c:	460d      	mov	r5, r1
 801fb2e:	b09d      	sub	sp, #116	@ 0x74
 801fb30:	4614      	mov	r4, r2
 801fb32:	4698      	mov	r8, r3
 801fb34:	4606      	mov	r6, r0
 801fb36:	b118      	cbz	r0, 801fb40 <_vfiprintf_r+0x18>
 801fb38:	6a03      	ldr	r3, [r0, #32]
 801fb3a:	b90b      	cbnz	r3, 801fb40 <_vfiprintf_r+0x18>
 801fb3c:	f7fc fb14 	bl	801c168 <__sinit>
 801fb40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801fb42:	07d9      	lsls	r1, r3, #31
 801fb44:	d405      	bmi.n	801fb52 <_vfiprintf_r+0x2a>
 801fb46:	89ab      	ldrh	r3, [r5, #12]
 801fb48:	059a      	lsls	r2, r3, #22
 801fb4a:	d402      	bmi.n	801fb52 <_vfiprintf_r+0x2a>
 801fb4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801fb4e:	f7fd fa04 	bl	801cf5a <__retarget_lock_acquire_recursive>
 801fb52:	89ab      	ldrh	r3, [r5, #12]
 801fb54:	071b      	lsls	r3, r3, #28
 801fb56:	d501      	bpl.n	801fb5c <_vfiprintf_r+0x34>
 801fb58:	692b      	ldr	r3, [r5, #16]
 801fb5a:	b99b      	cbnz	r3, 801fb84 <_vfiprintf_r+0x5c>
 801fb5c:	4629      	mov	r1, r5
 801fb5e:	4630      	mov	r0, r6
 801fb60:	f000 f938 	bl	801fdd4 <__swsetup_r>
 801fb64:	b170      	cbz	r0, 801fb84 <_vfiprintf_r+0x5c>
 801fb66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801fb68:	07dc      	lsls	r4, r3, #31
 801fb6a:	d504      	bpl.n	801fb76 <_vfiprintf_r+0x4e>
 801fb6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801fb70:	b01d      	add	sp, #116	@ 0x74
 801fb72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb76:	89ab      	ldrh	r3, [r5, #12]
 801fb78:	0598      	lsls	r0, r3, #22
 801fb7a:	d4f7      	bmi.n	801fb6c <_vfiprintf_r+0x44>
 801fb7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801fb7e:	f7fd f9ed 	bl	801cf5c <__retarget_lock_release_recursive>
 801fb82:	e7f3      	b.n	801fb6c <_vfiprintf_r+0x44>
 801fb84:	2300      	movs	r3, #0
 801fb86:	9309      	str	r3, [sp, #36]	@ 0x24
 801fb88:	2320      	movs	r3, #32
 801fb8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801fb8e:	f8cd 800c 	str.w	r8, [sp, #12]
 801fb92:	2330      	movs	r3, #48	@ 0x30
 801fb94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801fd44 <_vfiprintf_r+0x21c>
 801fb98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801fb9c:	f04f 0901 	mov.w	r9, #1
 801fba0:	4623      	mov	r3, r4
 801fba2:	469a      	mov	sl, r3
 801fba4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fba8:	b10a      	cbz	r2, 801fbae <_vfiprintf_r+0x86>
 801fbaa:	2a25      	cmp	r2, #37	@ 0x25
 801fbac:	d1f9      	bne.n	801fba2 <_vfiprintf_r+0x7a>
 801fbae:	ebba 0b04 	subs.w	fp, sl, r4
 801fbb2:	d00b      	beq.n	801fbcc <_vfiprintf_r+0xa4>
 801fbb4:	465b      	mov	r3, fp
 801fbb6:	4622      	mov	r2, r4
 801fbb8:	4629      	mov	r1, r5
 801fbba:	4630      	mov	r0, r6
 801fbbc:	f7ff ffa2 	bl	801fb04 <__sfputs_r>
 801fbc0:	3001      	adds	r0, #1
 801fbc2:	f000 80a7 	beq.w	801fd14 <_vfiprintf_r+0x1ec>
 801fbc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fbc8:	445a      	add	r2, fp
 801fbca:	9209      	str	r2, [sp, #36]	@ 0x24
 801fbcc:	f89a 3000 	ldrb.w	r3, [sl]
 801fbd0:	2b00      	cmp	r3, #0
 801fbd2:	f000 809f 	beq.w	801fd14 <_vfiprintf_r+0x1ec>
 801fbd6:	2300      	movs	r3, #0
 801fbd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801fbdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fbe0:	f10a 0a01 	add.w	sl, sl, #1
 801fbe4:	9304      	str	r3, [sp, #16]
 801fbe6:	9307      	str	r3, [sp, #28]
 801fbe8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801fbec:	931a      	str	r3, [sp, #104]	@ 0x68
 801fbee:	4654      	mov	r4, sl
 801fbf0:	2205      	movs	r2, #5
 801fbf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fbf6:	4853      	ldr	r0, [pc, #332]	@ (801fd44 <_vfiprintf_r+0x21c>)
 801fbf8:	f7e0 fb8a 	bl	8000310 <memchr>
 801fbfc:	9a04      	ldr	r2, [sp, #16]
 801fbfe:	b9d8      	cbnz	r0, 801fc38 <_vfiprintf_r+0x110>
 801fc00:	06d1      	lsls	r1, r2, #27
 801fc02:	bf44      	itt	mi
 801fc04:	2320      	movmi	r3, #32
 801fc06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801fc0a:	0713      	lsls	r3, r2, #28
 801fc0c:	bf44      	itt	mi
 801fc0e:	232b      	movmi	r3, #43	@ 0x2b
 801fc10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801fc14:	f89a 3000 	ldrb.w	r3, [sl]
 801fc18:	2b2a      	cmp	r3, #42	@ 0x2a
 801fc1a:	d015      	beq.n	801fc48 <_vfiprintf_r+0x120>
 801fc1c:	9a07      	ldr	r2, [sp, #28]
 801fc1e:	4654      	mov	r4, sl
 801fc20:	2000      	movs	r0, #0
 801fc22:	f04f 0c0a 	mov.w	ip, #10
 801fc26:	4621      	mov	r1, r4
 801fc28:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fc2c:	3b30      	subs	r3, #48	@ 0x30
 801fc2e:	2b09      	cmp	r3, #9
 801fc30:	d94b      	bls.n	801fcca <_vfiprintf_r+0x1a2>
 801fc32:	b1b0      	cbz	r0, 801fc62 <_vfiprintf_r+0x13a>
 801fc34:	9207      	str	r2, [sp, #28]
 801fc36:	e014      	b.n	801fc62 <_vfiprintf_r+0x13a>
 801fc38:	eba0 0308 	sub.w	r3, r0, r8
 801fc3c:	fa09 f303 	lsl.w	r3, r9, r3
 801fc40:	4313      	orrs	r3, r2
 801fc42:	9304      	str	r3, [sp, #16]
 801fc44:	46a2      	mov	sl, r4
 801fc46:	e7d2      	b.n	801fbee <_vfiprintf_r+0xc6>
 801fc48:	9b03      	ldr	r3, [sp, #12]
 801fc4a:	1d19      	adds	r1, r3, #4
 801fc4c:	681b      	ldr	r3, [r3, #0]
 801fc4e:	9103      	str	r1, [sp, #12]
 801fc50:	2b00      	cmp	r3, #0
 801fc52:	bfbb      	ittet	lt
 801fc54:	425b      	neglt	r3, r3
 801fc56:	f042 0202 	orrlt.w	r2, r2, #2
 801fc5a:	9307      	strge	r3, [sp, #28]
 801fc5c:	9307      	strlt	r3, [sp, #28]
 801fc5e:	bfb8      	it	lt
 801fc60:	9204      	strlt	r2, [sp, #16]
 801fc62:	7823      	ldrb	r3, [r4, #0]
 801fc64:	2b2e      	cmp	r3, #46	@ 0x2e
 801fc66:	d10a      	bne.n	801fc7e <_vfiprintf_r+0x156>
 801fc68:	7863      	ldrb	r3, [r4, #1]
 801fc6a:	2b2a      	cmp	r3, #42	@ 0x2a
 801fc6c:	d132      	bne.n	801fcd4 <_vfiprintf_r+0x1ac>
 801fc6e:	9b03      	ldr	r3, [sp, #12]
 801fc70:	1d1a      	adds	r2, r3, #4
 801fc72:	681b      	ldr	r3, [r3, #0]
 801fc74:	9203      	str	r2, [sp, #12]
 801fc76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801fc7a:	3402      	adds	r4, #2
 801fc7c:	9305      	str	r3, [sp, #20]
 801fc7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801fd54 <_vfiprintf_r+0x22c>
 801fc82:	7821      	ldrb	r1, [r4, #0]
 801fc84:	2203      	movs	r2, #3
 801fc86:	4650      	mov	r0, sl
 801fc88:	f7e0 fb42 	bl	8000310 <memchr>
 801fc8c:	b138      	cbz	r0, 801fc9e <_vfiprintf_r+0x176>
 801fc8e:	9b04      	ldr	r3, [sp, #16]
 801fc90:	eba0 000a 	sub.w	r0, r0, sl
 801fc94:	2240      	movs	r2, #64	@ 0x40
 801fc96:	4082      	lsls	r2, r0
 801fc98:	4313      	orrs	r3, r2
 801fc9a:	3401      	adds	r4, #1
 801fc9c:	9304      	str	r3, [sp, #16]
 801fc9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fca2:	4829      	ldr	r0, [pc, #164]	@ (801fd48 <_vfiprintf_r+0x220>)
 801fca4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801fca8:	2206      	movs	r2, #6
 801fcaa:	f7e0 fb31 	bl	8000310 <memchr>
 801fcae:	2800      	cmp	r0, #0
 801fcb0:	d03f      	beq.n	801fd32 <_vfiprintf_r+0x20a>
 801fcb2:	4b26      	ldr	r3, [pc, #152]	@ (801fd4c <_vfiprintf_r+0x224>)
 801fcb4:	bb1b      	cbnz	r3, 801fcfe <_vfiprintf_r+0x1d6>
 801fcb6:	9b03      	ldr	r3, [sp, #12]
 801fcb8:	3307      	adds	r3, #7
 801fcba:	f023 0307 	bic.w	r3, r3, #7
 801fcbe:	3308      	adds	r3, #8
 801fcc0:	9303      	str	r3, [sp, #12]
 801fcc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fcc4:	443b      	add	r3, r7
 801fcc6:	9309      	str	r3, [sp, #36]	@ 0x24
 801fcc8:	e76a      	b.n	801fba0 <_vfiprintf_r+0x78>
 801fcca:	fb0c 3202 	mla	r2, ip, r2, r3
 801fcce:	460c      	mov	r4, r1
 801fcd0:	2001      	movs	r0, #1
 801fcd2:	e7a8      	b.n	801fc26 <_vfiprintf_r+0xfe>
 801fcd4:	2300      	movs	r3, #0
 801fcd6:	3401      	adds	r4, #1
 801fcd8:	9305      	str	r3, [sp, #20]
 801fcda:	4619      	mov	r1, r3
 801fcdc:	f04f 0c0a 	mov.w	ip, #10
 801fce0:	4620      	mov	r0, r4
 801fce2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fce6:	3a30      	subs	r2, #48	@ 0x30
 801fce8:	2a09      	cmp	r2, #9
 801fcea:	d903      	bls.n	801fcf4 <_vfiprintf_r+0x1cc>
 801fcec:	2b00      	cmp	r3, #0
 801fcee:	d0c6      	beq.n	801fc7e <_vfiprintf_r+0x156>
 801fcf0:	9105      	str	r1, [sp, #20]
 801fcf2:	e7c4      	b.n	801fc7e <_vfiprintf_r+0x156>
 801fcf4:	fb0c 2101 	mla	r1, ip, r1, r2
 801fcf8:	4604      	mov	r4, r0
 801fcfa:	2301      	movs	r3, #1
 801fcfc:	e7f0      	b.n	801fce0 <_vfiprintf_r+0x1b8>
 801fcfe:	ab03      	add	r3, sp, #12
 801fd00:	9300      	str	r3, [sp, #0]
 801fd02:	462a      	mov	r2, r5
 801fd04:	4b12      	ldr	r3, [pc, #72]	@ (801fd50 <_vfiprintf_r+0x228>)
 801fd06:	a904      	add	r1, sp, #16
 801fd08:	4630      	mov	r0, r6
 801fd0a:	f7fb fb5d 	bl	801b3c8 <_printf_float>
 801fd0e:	4607      	mov	r7, r0
 801fd10:	1c78      	adds	r0, r7, #1
 801fd12:	d1d6      	bne.n	801fcc2 <_vfiprintf_r+0x19a>
 801fd14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801fd16:	07d9      	lsls	r1, r3, #31
 801fd18:	d405      	bmi.n	801fd26 <_vfiprintf_r+0x1fe>
 801fd1a:	89ab      	ldrh	r3, [r5, #12]
 801fd1c:	059a      	lsls	r2, r3, #22
 801fd1e:	d402      	bmi.n	801fd26 <_vfiprintf_r+0x1fe>
 801fd20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801fd22:	f7fd f91b 	bl	801cf5c <__retarget_lock_release_recursive>
 801fd26:	89ab      	ldrh	r3, [r5, #12]
 801fd28:	065b      	lsls	r3, r3, #25
 801fd2a:	f53f af1f 	bmi.w	801fb6c <_vfiprintf_r+0x44>
 801fd2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fd30:	e71e      	b.n	801fb70 <_vfiprintf_r+0x48>
 801fd32:	ab03      	add	r3, sp, #12
 801fd34:	9300      	str	r3, [sp, #0]
 801fd36:	462a      	mov	r2, r5
 801fd38:	4b05      	ldr	r3, [pc, #20]	@ (801fd50 <_vfiprintf_r+0x228>)
 801fd3a:	a904      	add	r1, sp, #16
 801fd3c:	4630      	mov	r0, r6
 801fd3e:	f7fb fdcb 	bl	801b8d8 <_printf_i>
 801fd42:	e7e4      	b.n	801fd0e <_vfiprintf_r+0x1e6>
 801fd44:	08020a6e 	.word	0x08020a6e
 801fd48:	08020a78 	.word	0x08020a78
 801fd4c:	0801b3c9 	.word	0x0801b3c9
 801fd50:	0801fb05 	.word	0x0801fb05
 801fd54:	08020a74 	.word	0x08020a74

0801fd58 <__swbuf_r>:
 801fd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd5a:	460e      	mov	r6, r1
 801fd5c:	4614      	mov	r4, r2
 801fd5e:	4605      	mov	r5, r0
 801fd60:	b118      	cbz	r0, 801fd6a <__swbuf_r+0x12>
 801fd62:	6a03      	ldr	r3, [r0, #32]
 801fd64:	b90b      	cbnz	r3, 801fd6a <__swbuf_r+0x12>
 801fd66:	f7fc f9ff 	bl	801c168 <__sinit>
 801fd6a:	69a3      	ldr	r3, [r4, #24]
 801fd6c:	60a3      	str	r3, [r4, #8]
 801fd6e:	89a3      	ldrh	r3, [r4, #12]
 801fd70:	071a      	lsls	r2, r3, #28
 801fd72:	d501      	bpl.n	801fd78 <__swbuf_r+0x20>
 801fd74:	6923      	ldr	r3, [r4, #16]
 801fd76:	b943      	cbnz	r3, 801fd8a <__swbuf_r+0x32>
 801fd78:	4621      	mov	r1, r4
 801fd7a:	4628      	mov	r0, r5
 801fd7c:	f000 f82a 	bl	801fdd4 <__swsetup_r>
 801fd80:	b118      	cbz	r0, 801fd8a <__swbuf_r+0x32>
 801fd82:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801fd86:	4638      	mov	r0, r7
 801fd88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fd8a:	6823      	ldr	r3, [r4, #0]
 801fd8c:	6922      	ldr	r2, [r4, #16]
 801fd8e:	1a98      	subs	r0, r3, r2
 801fd90:	6963      	ldr	r3, [r4, #20]
 801fd92:	b2f6      	uxtb	r6, r6
 801fd94:	4283      	cmp	r3, r0
 801fd96:	4637      	mov	r7, r6
 801fd98:	dc05      	bgt.n	801fda6 <__swbuf_r+0x4e>
 801fd9a:	4621      	mov	r1, r4
 801fd9c:	4628      	mov	r0, r5
 801fd9e:	f7ff f853 	bl	801ee48 <_fflush_r>
 801fda2:	2800      	cmp	r0, #0
 801fda4:	d1ed      	bne.n	801fd82 <__swbuf_r+0x2a>
 801fda6:	68a3      	ldr	r3, [r4, #8]
 801fda8:	3b01      	subs	r3, #1
 801fdaa:	60a3      	str	r3, [r4, #8]
 801fdac:	6823      	ldr	r3, [r4, #0]
 801fdae:	1c5a      	adds	r2, r3, #1
 801fdb0:	6022      	str	r2, [r4, #0]
 801fdb2:	701e      	strb	r6, [r3, #0]
 801fdb4:	6962      	ldr	r2, [r4, #20]
 801fdb6:	1c43      	adds	r3, r0, #1
 801fdb8:	429a      	cmp	r2, r3
 801fdba:	d004      	beq.n	801fdc6 <__swbuf_r+0x6e>
 801fdbc:	89a3      	ldrh	r3, [r4, #12]
 801fdbe:	07db      	lsls	r3, r3, #31
 801fdc0:	d5e1      	bpl.n	801fd86 <__swbuf_r+0x2e>
 801fdc2:	2e0a      	cmp	r6, #10
 801fdc4:	d1df      	bne.n	801fd86 <__swbuf_r+0x2e>
 801fdc6:	4621      	mov	r1, r4
 801fdc8:	4628      	mov	r0, r5
 801fdca:	f7ff f83d 	bl	801ee48 <_fflush_r>
 801fdce:	2800      	cmp	r0, #0
 801fdd0:	d0d9      	beq.n	801fd86 <__swbuf_r+0x2e>
 801fdd2:	e7d6      	b.n	801fd82 <__swbuf_r+0x2a>

0801fdd4 <__swsetup_r>:
 801fdd4:	b538      	push	{r3, r4, r5, lr}
 801fdd6:	4b29      	ldr	r3, [pc, #164]	@ (801fe7c <__swsetup_r+0xa8>)
 801fdd8:	4605      	mov	r5, r0
 801fdda:	6818      	ldr	r0, [r3, #0]
 801fddc:	460c      	mov	r4, r1
 801fdde:	b118      	cbz	r0, 801fde8 <__swsetup_r+0x14>
 801fde0:	6a03      	ldr	r3, [r0, #32]
 801fde2:	b90b      	cbnz	r3, 801fde8 <__swsetup_r+0x14>
 801fde4:	f7fc f9c0 	bl	801c168 <__sinit>
 801fde8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fdec:	0719      	lsls	r1, r3, #28
 801fdee:	d422      	bmi.n	801fe36 <__swsetup_r+0x62>
 801fdf0:	06da      	lsls	r2, r3, #27
 801fdf2:	d407      	bmi.n	801fe04 <__swsetup_r+0x30>
 801fdf4:	2209      	movs	r2, #9
 801fdf6:	602a      	str	r2, [r5, #0]
 801fdf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801fdfc:	81a3      	strh	r3, [r4, #12]
 801fdfe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801fe02:	e033      	b.n	801fe6c <__swsetup_r+0x98>
 801fe04:	0758      	lsls	r0, r3, #29
 801fe06:	d512      	bpl.n	801fe2e <__swsetup_r+0x5a>
 801fe08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801fe0a:	b141      	cbz	r1, 801fe1e <__swsetup_r+0x4a>
 801fe0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801fe10:	4299      	cmp	r1, r3
 801fe12:	d002      	beq.n	801fe1a <__swsetup_r+0x46>
 801fe14:	4628      	mov	r0, r5
 801fe16:	f7fd fea9 	bl	801db6c <_free_r>
 801fe1a:	2300      	movs	r3, #0
 801fe1c:	6363      	str	r3, [r4, #52]	@ 0x34
 801fe1e:	89a3      	ldrh	r3, [r4, #12]
 801fe20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801fe24:	81a3      	strh	r3, [r4, #12]
 801fe26:	2300      	movs	r3, #0
 801fe28:	6063      	str	r3, [r4, #4]
 801fe2a:	6923      	ldr	r3, [r4, #16]
 801fe2c:	6023      	str	r3, [r4, #0]
 801fe2e:	89a3      	ldrh	r3, [r4, #12]
 801fe30:	f043 0308 	orr.w	r3, r3, #8
 801fe34:	81a3      	strh	r3, [r4, #12]
 801fe36:	6923      	ldr	r3, [r4, #16]
 801fe38:	b94b      	cbnz	r3, 801fe4e <__swsetup_r+0x7a>
 801fe3a:	89a3      	ldrh	r3, [r4, #12]
 801fe3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801fe40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801fe44:	d003      	beq.n	801fe4e <__swsetup_r+0x7a>
 801fe46:	4621      	mov	r1, r4
 801fe48:	4628      	mov	r0, r5
 801fe4a:	f000 f83f 	bl	801fecc <__smakebuf_r>
 801fe4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fe52:	f013 0201 	ands.w	r2, r3, #1
 801fe56:	d00a      	beq.n	801fe6e <__swsetup_r+0x9a>
 801fe58:	2200      	movs	r2, #0
 801fe5a:	60a2      	str	r2, [r4, #8]
 801fe5c:	6962      	ldr	r2, [r4, #20]
 801fe5e:	4252      	negs	r2, r2
 801fe60:	61a2      	str	r2, [r4, #24]
 801fe62:	6922      	ldr	r2, [r4, #16]
 801fe64:	b942      	cbnz	r2, 801fe78 <__swsetup_r+0xa4>
 801fe66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801fe6a:	d1c5      	bne.n	801fdf8 <__swsetup_r+0x24>
 801fe6c:	bd38      	pop	{r3, r4, r5, pc}
 801fe6e:	0799      	lsls	r1, r3, #30
 801fe70:	bf58      	it	pl
 801fe72:	6962      	ldrpl	r2, [r4, #20]
 801fe74:	60a2      	str	r2, [r4, #8]
 801fe76:	e7f4      	b.n	801fe62 <__swsetup_r+0x8e>
 801fe78:	2000      	movs	r0, #0
 801fe7a:	e7f7      	b.n	801fe6c <__swsetup_r+0x98>
 801fe7c:	24000378 	.word	0x24000378

0801fe80 <__swhatbuf_r>:
 801fe80:	b570      	push	{r4, r5, r6, lr}
 801fe82:	460c      	mov	r4, r1
 801fe84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fe88:	2900      	cmp	r1, #0
 801fe8a:	b096      	sub	sp, #88	@ 0x58
 801fe8c:	4615      	mov	r5, r2
 801fe8e:	461e      	mov	r6, r3
 801fe90:	da0d      	bge.n	801feae <__swhatbuf_r+0x2e>
 801fe92:	89a3      	ldrh	r3, [r4, #12]
 801fe94:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801fe98:	f04f 0100 	mov.w	r1, #0
 801fe9c:	bf14      	ite	ne
 801fe9e:	2340      	movne	r3, #64	@ 0x40
 801fea0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801fea4:	2000      	movs	r0, #0
 801fea6:	6031      	str	r1, [r6, #0]
 801fea8:	602b      	str	r3, [r5, #0]
 801feaa:	b016      	add	sp, #88	@ 0x58
 801feac:	bd70      	pop	{r4, r5, r6, pc}
 801feae:	466a      	mov	r2, sp
 801feb0:	f000 f848 	bl	801ff44 <_fstat_r>
 801feb4:	2800      	cmp	r0, #0
 801feb6:	dbec      	blt.n	801fe92 <__swhatbuf_r+0x12>
 801feb8:	9901      	ldr	r1, [sp, #4]
 801feba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801febe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801fec2:	4259      	negs	r1, r3
 801fec4:	4159      	adcs	r1, r3
 801fec6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801feca:	e7eb      	b.n	801fea4 <__swhatbuf_r+0x24>

0801fecc <__smakebuf_r>:
 801fecc:	898b      	ldrh	r3, [r1, #12]
 801fece:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fed0:	079d      	lsls	r5, r3, #30
 801fed2:	4606      	mov	r6, r0
 801fed4:	460c      	mov	r4, r1
 801fed6:	d507      	bpl.n	801fee8 <__smakebuf_r+0x1c>
 801fed8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801fedc:	6023      	str	r3, [r4, #0]
 801fede:	6123      	str	r3, [r4, #16]
 801fee0:	2301      	movs	r3, #1
 801fee2:	6163      	str	r3, [r4, #20]
 801fee4:	b003      	add	sp, #12
 801fee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fee8:	ab01      	add	r3, sp, #4
 801feea:	466a      	mov	r2, sp
 801feec:	f7ff ffc8 	bl	801fe80 <__swhatbuf_r>
 801fef0:	9f00      	ldr	r7, [sp, #0]
 801fef2:	4605      	mov	r5, r0
 801fef4:	4639      	mov	r1, r7
 801fef6:	4630      	mov	r0, r6
 801fef8:	f7fe fd08 	bl	801e90c <_malloc_r>
 801fefc:	b948      	cbnz	r0, 801ff12 <__smakebuf_r+0x46>
 801fefe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ff02:	059a      	lsls	r2, r3, #22
 801ff04:	d4ee      	bmi.n	801fee4 <__smakebuf_r+0x18>
 801ff06:	f023 0303 	bic.w	r3, r3, #3
 801ff0a:	f043 0302 	orr.w	r3, r3, #2
 801ff0e:	81a3      	strh	r3, [r4, #12]
 801ff10:	e7e2      	b.n	801fed8 <__smakebuf_r+0xc>
 801ff12:	89a3      	ldrh	r3, [r4, #12]
 801ff14:	6020      	str	r0, [r4, #0]
 801ff16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ff1a:	81a3      	strh	r3, [r4, #12]
 801ff1c:	9b01      	ldr	r3, [sp, #4]
 801ff1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801ff22:	b15b      	cbz	r3, 801ff3c <__smakebuf_r+0x70>
 801ff24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ff28:	4630      	mov	r0, r6
 801ff2a:	f000 f81d 	bl	801ff68 <_isatty_r>
 801ff2e:	b128      	cbz	r0, 801ff3c <__smakebuf_r+0x70>
 801ff30:	89a3      	ldrh	r3, [r4, #12]
 801ff32:	f023 0303 	bic.w	r3, r3, #3
 801ff36:	f043 0301 	orr.w	r3, r3, #1
 801ff3a:	81a3      	strh	r3, [r4, #12]
 801ff3c:	89a3      	ldrh	r3, [r4, #12]
 801ff3e:	431d      	orrs	r5, r3
 801ff40:	81a5      	strh	r5, [r4, #12]
 801ff42:	e7cf      	b.n	801fee4 <__smakebuf_r+0x18>

0801ff44 <_fstat_r>:
 801ff44:	b538      	push	{r3, r4, r5, lr}
 801ff46:	4d07      	ldr	r5, [pc, #28]	@ (801ff64 <_fstat_r+0x20>)
 801ff48:	2300      	movs	r3, #0
 801ff4a:	4604      	mov	r4, r0
 801ff4c:	4608      	mov	r0, r1
 801ff4e:	4611      	mov	r1, r2
 801ff50:	602b      	str	r3, [r5, #0]
 801ff52:	f7e3 ffcd 	bl	8003ef0 <_fstat>
 801ff56:	1c43      	adds	r3, r0, #1
 801ff58:	d102      	bne.n	801ff60 <_fstat_r+0x1c>
 801ff5a:	682b      	ldr	r3, [r5, #0]
 801ff5c:	b103      	cbz	r3, 801ff60 <_fstat_r+0x1c>
 801ff5e:	6023      	str	r3, [r4, #0]
 801ff60:	bd38      	pop	{r3, r4, r5, pc}
 801ff62:	bf00      	nop
 801ff64:	24005e50 	.word	0x24005e50

0801ff68 <_isatty_r>:
 801ff68:	b538      	push	{r3, r4, r5, lr}
 801ff6a:	4d06      	ldr	r5, [pc, #24]	@ (801ff84 <_isatty_r+0x1c>)
 801ff6c:	2300      	movs	r3, #0
 801ff6e:	4604      	mov	r4, r0
 801ff70:	4608      	mov	r0, r1
 801ff72:	602b      	str	r3, [r5, #0]
 801ff74:	f7e3 ffcc 	bl	8003f10 <_isatty>
 801ff78:	1c43      	adds	r3, r0, #1
 801ff7a:	d102      	bne.n	801ff82 <_isatty_r+0x1a>
 801ff7c:	682b      	ldr	r3, [r5, #0]
 801ff7e:	b103      	cbz	r3, 801ff82 <_isatty_r+0x1a>
 801ff80:	6023      	str	r3, [r4, #0]
 801ff82:	bd38      	pop	{r3, r4, r5, pc}
 801ff84:	24005e50 	.word	0x24005e50

0801ff88 <_raise_r>:
 801ff88:	291f      	cmp	r1, #31
 801ff8a:	b538      	push	{r3, r4, r5, lr}
 801ff8c:	4605      	mov	r5, r0
 801ff8e:	460c      	mov	r4, r1
 801ff90:	d904      	bls.n	801ff9c <_raise_r+0x14>
 801ff92:	2316      	movs	r3, #22
 801ff94:	6003      	str	r3, [r0, #0]
 801ff96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ff9a:	bd38      	pop	{r3, r4, r5, pc}
 801ff9c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801ff9e:	b112      	cbz	r2, 801ffa6 <_raise_r+0x1e>
 801ffa0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ffa4:	b94b      	cbnz	r3, 801ffba <_raise_r+0x32>
 801ffa6:	4628      	mov	r0, r5
 801ffa8:	f000 f830 	bl	802000c <_getpid_r>
 801ffac:	4622      	mov	r2, r4
 801ffae:	4601      	mov	r1, r0
 801ffb0:	4628      	mov	r0, r5
 801ffb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ffb6:	f000 b817 	b.w	801ffe8 <_kill_r>
 801ffba:	2b01      	cmp	r3, #1
 801ffbc:	d00a      	beq.n	801ffd4 <_raise_r+0x4c>
 801ffbe:	1c59      	adds	r1, r3, #1
 801ffc0:	d103      	bne.n	801ffca <_raise_r+0x42>
 801ffc2:	2316      	movs	r3, #22
 801ffc4:	6003      	str	r3, [r0, #0]
 801ffc6:	2001      	movs	r0, #1
 801ffc8:	e7e7      	b.n	801ff9a <_raise_r+0x12>
 801ffca:	2100      	movs	r1, #0
 801ffcc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801ffd0:	4620      	mov	r0, r4
 801ffd2:	4798      	blx	r3
 801ffd4:	2000      	movs	r0, #0
 801ffd6:	e7e0      	b.n	801ff9a <_raise_r+0x12>

0801ffd8 <raise>:
 801ffd8:	4b02      	ldr	r3, [pc, #8]	@ (801ffe4 <raise+0xc>)
 801ffda:	4601      	mov	r1, r0
 801ffdc:	6818      	ldr	r0, [r3, #0]
 801ffde:	f7ff bfd3 	b.w	801ff88 <_raise_r>
 801ffe2:	bf00      	nop
 801ffe4:	24000378 	.word	0x24000378

0801ffe8 <_kill_r>:
 801ffe8:	b538      	push	{r3, r4, r5, lr}
 801ffea:	4d07      	ldr	r5, [pc, #28]	@ (8020008 <_kill_r+0x20>)
 801ffec:	2300      	movs	r3, #0
 801ffee:	4604      	mov	r4, r0
 801fff0:	4608      	mov	r0, r1
 801fff2:	4611      	mov	r1, r2
 801fff4:	602b      	str	r3, [r5, #0]
 801fff6:	f7e3 ff1b 	bl	8003e30 <_kill>
 801fffa:	1c43      	adds	r3, r0, #1
 801fffc:	d102      	bne.n	8020004 <_kill_r+0x1c>
 801fffe:	682b      	ldr	r3, [r5, #0]
 8020000:	b103      	cbz	r3, 8020004 <_kill_r+0x1c>
 8020002:	6023      	str	r3, [r4, #0]
 8020004:	bd38      	pop	{r3, r4, r5, pc}
 8020006:	bf00      	nop
 8020008:	24005e50 	.word	0x24005e50

0802000c <_getpid_r>:
 802000c:	f7e3 bf08 	b.w	8003e20 <_getpid>

08020010 <_init>:
 8020010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020012:	bf00      	nop
 8020014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020016:	bc08      	pop	{r3}
 8020018:	469e      	mov	lr, r3
 802001a:	4770      	bx	lr

0802001c <_fini>:
 802001c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802001e:	bf00      	nop
 8020020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020022:	bc08      	pop	{r3}
 8020024:	469e      	mov	lr, r3
 8020026:	4770      	bx	lr
