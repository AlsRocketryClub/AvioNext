
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018010  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  080182e0  080182e0  000282e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801868c  0801868c  0002868c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018694  08018694  00028694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018698  08018698  00028698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000150  24000000  0801869c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000031f4  24000150  080187ec  00030150  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  24003344  080187ec  00033344  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003017e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003575b  00000000  00000000  000301c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006245  00000000  00000000  0006591c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002ae8  00000000  00000000  0006bb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000214b  00000000  00000000  0006e650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003de3d  00000000  00000000  0007079b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003a90b  00000000  00000000  000ae5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017d42a  00000000  00000000  000e8ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000c2c0  00000000  00000000  00266310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  002725d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000150 	.word	0x24000150
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080182c8 	.word	0x080182c8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000154 	.word	0x24000154
 800030c:	080182c8 	.word	0x080182c8

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b970 	b.w	80006d8 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9e08      	ldr	r6, [sp, #32]
 8000416:	460d      	mov	r5, r1
 8000418:	4604      	mov	r4, r0
 800041a:	460f      	mov	r7, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4694      	mov	ip, r2
 8000424:	d965      	bls.n	80004f2 <__udivmoddi4+0xe2>
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	b143      	cbz	r3, 800043e <__udivmoddi4+0x2e>
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	f1c3 0220 	rsb	r2, r3, #32
 8000434:	409f      	lsls	r7, r3
 8000436:	fa20 f202 	lsr.w	r2, r0, r2
 800043a:	4317      	orrs	r7, r2
 800043c:	409c      	lsls	r4, r3
 800043e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000442:	fa1f f58c 	uxth.w	r5, ip
 8000446:	fbb7 f1fe 	udiv	r1, r7, lr
 800044a:	0c22      	lsrs	r2, r4, #16
 800044c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000450:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000454:	fb01 f005 	mul.w	r0, r1, r5
 8000458:	4290      	cmp	r0, r2
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x62>
 800045c:	eb1c 0202 	adds.w	r2, ip, r2
 8000460:	f101 37ff 	add.w	r7, r1, #4294967295
 8000464:	f080 811c 	bcs.w	80006a0 <__udivmoddi4+0x290>
 8000468:	4290      	cmp	r0, r2
 800046a:	f240 8119 	bls.w	80006a0 <__udivmoddi4+0x290>
 800046e:	3902      	subs	r1, #2
 8000470:	4462      	add	r2, ip
 8000472:	1a12      	subs	r2, r2, r0
 8000474:	b2a4      	uxth	r4, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000482:	fb00 f505 	mul.w	r5, r0, r5
 8000486:	42a5      	cmp	r5, r4
 8000488:	d90a      	bls.n	80004a0 <__udivmoddi4+0x90>
 800048a:	eb1c 0404 	adds.w	r4, ip, r4
 800048e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000492:	f080 8107 	bcs.w	80006a4 <__udivmoddi4+0x294>
 8000496:	42a5      	cmp	r5, r4
 8000498:	f240 8104 	bls.w	80006a4 <__udivmoddi4+0x294>
 800049c:	4464      	add	r4, ip
 800049e:	3802      	subs	r0, #2
 80004a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a4:	1b64      	subs	r4, r4, r5
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11e      	cbz	r6, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40dc      	lsrs	r4, r3
 80004ac:	2300      	movs	r3, #0
 80004ae:	e9c6 4300 	strd	r4, r3, [r6]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0xbc>
 80004ba:	2e00      	cmp	r6, #0
 80004bc:	f000 80ed 	beq.w	800069a <__udivmoddi4+0x28a>
 80004c0:	2100      	movs	r1, #0
 80004c2:	e9c6 0500 	strd	r0, r5, [r6]
 80004c6:	4608      	mov	r0, r1
 80004c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004cc:	fab3 f183 	clz	r1, r3
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d149      	bne.n	8000568 <__udivmoddi4+0x158>
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d302      	bcc.n	80004de <__udivmoddi4+0xce>
 80004d8:	4282      	cmp	r2, r0
 80004da:	f200 80f8 	bhi.w	80006ce <__udivmoddi4+0x2be>
 80004de:	1a84      	subs	r4, r0, r2
 80004e0:	eb65 0203 	sbc.w	r2, r5, r3
 80004e4:	2001      	movs	r0, #1
 80004e6:	4617      	mov	r7, r2
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d0e2      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	e9c6 4700 	strd	r4, r7, [r6]
 80004f0:	e7df      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004f2:	b902      	cbnz	r2, 80004f6 <__udivmoddi4+0xe6>
 80004f4:	deff      	udf	#255	; 0xff
 80004f6:	fab2 f382 	clz	r3, r2
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	f040 8090 	bne.w	8000620 <__udivmoddi4+0x210>
 8000500:	1a8a      	subs	r2, r1, r2
 8000502:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000506:	fa1f fe8c 	uxth.w	lr, ip
 800050a:	2101      	movs	r1, #1
 800050c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000510:	fb07 2015 	mls	r0, r7, r5, r2
 8000514:	0c22      	lsrs	r2, r4, #16
 8000516:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800051a:	fb0e f005 	mul.w	r0, lr, r5
 800051e:	4290      	cmp	r0, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x124>
 8000522:	eb1c 0202 	adds.w	r2, ip, r2
 8000526:	f105 38ff 	add.w	r8, r5, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x122>
 800052c:	4290      	cmp	r0, r2
 800052e:	f200 80cb 	bhi.w	80006c8 <__udivmoddi4+0x2b8>
 8000532:	4645      	mov	r5, r8
 8000534:	1a12      	subs	r2, r2, r0
 8000536:	b2a4      	uxth	r4, r4
 8000538:	fbb2 f0f7 	udiv	r0, r2, r7
 800053c:	fb07 2210 	mls	r2, r7, r0, r2
 8000540:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000544:	fb0e fe00 	mul.w	lr, lr, r0
 8000548:	45a6      	cmp	lr, r4
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x14e>
 800054c:	eb1c 0404 	adds.w	r4, ip, r4
 8000550:	f100 32ff 	add.w	r2, r0, #4294967295
 8000554:	d202      	bcs.n	800055c <__udivmoddi4+0x14c>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f200 80bb 	bhi.w	80006d2 <__udivmoddi4+0x2c2>
 800055c:	4610      	mov	r0, r2
 800055e:	eba4 040e 	sub.w	r4, r4, lr
 8000562:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000566:	e79f      	b.n	80004a8 <__udivmoddi4+0x98>
 8000568:	f1c1 0720 	rsb	r7, r1, #32
 800056c:	408b      	lsls	r3, r1
 800056e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000572:	ea4c 0c03 	orr.w	ip, ip, r3
 8000576:	fa05 f401 	lsl.w	r4, r5, r1
 800057a:	fa20 f307 	lsr.w	r3, r0, r7
 800057e:	40fd      	lsrs	r5, r7
 8000580:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000584:	4323      	orrs	r3, r4
 8000586:	fbb5 f8f9 	udiv	r8, r5, r9
 800058a:	fa1f fe8c 	uxth.w	lr, ip
 800058e:	fb09 5518 	mls	r5, r9, r8, r5
 8000592:	0c1c      	lsrs	r4, r3, #16
 8000594:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000598:	fb08 f50e 	mul.w	r5, r8, lr
 800059c:	42a5      	cmp	r5, r4
 800059e:	fa02 f201 	lsl.w	r2, r2, r1
 80005a2:	fa00 f001 	lsl.w	r0, r0, r1
 80005a6:	d90b      	bls.n	80005c0 <__udivmoddi4+0x1b0>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80005b0:	f080 8088 	bcs.w	80006c4 <__udivmoddi4+0x2b4>
 80005b4:	42a5      	cmp	r5, r4
 80005b6:	f240 8085 	bls.w	80006c4 <__udivmoddi4+0x2b4>
 80005ba:	f1a8 0802 	sub.w	r8, r8, #2
 80005be:	4464      	add	r4, ip
 80005c0:	1b64      	subs	r4, r4, r5
 80005c2:	b29d      	uxth	r5, r3
 80005c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005c8:	fb09 4413 	mls	r4, r9, r3, r4
 80005cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005d4:	45a6      	cmp	lr, r4
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x1da>
 80005d8:	eb1c 0404 	adds.w	r4, ip, r4
 80005dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005e0:	d26c      	bcs.n	80006bc <__udivmoddi4+0x2ac>
 80005e2:	45a6      	cmp	lr, r4
 80005e4:	d96a      	bls.n	80006bc <__udivmoddi4+0x2ac>
 80005e6:	3b02      	subs	r3, #2
 80005e8:	4464      	add	r4, ip
 80005ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ee:	fba3 9502 	umull	r9, r5, r3, r2
 80005f2:	eba4 040e 	sub.w	r4, r4, lr
 80005f6:	42ac      	cmp	r4, r5
 80005f8:	46c8      	mov	r8, r9
 80005fa:	46ae      	mov	lr, r5
 80005fc:	d356      	bcc.n	80006ac <__udivmoddi4+0x29c>
 80005fe:	d053      	beq.n	80006a8 <__udivmoddi4+0x298>
 8000600:	b156      	cbz	r6, 8000618 <__udivmoddi4+0x208>
 8000602:	ebb0 0208 	subs.w	r2, r0, r8
 8000606:	eb64 040e 	sbc.w	r4, r4, lr
 800060a:	fa04 f707 	lsl.w	r7, r4, r7
 800060e:	40ca      	lsrs	r2, r1
 8000610:	40cc      	lsrs	r4, r1
 8000612:	4317      	orrs	r7, r2
 8000614:	e9c6 7400 	strd	r7, r4, [r6]
 8000618:	4618      	mov	r0, r3
 800061a:	2100      	movs	r1, #0
 800061c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000620:	f1c3 0120 	rsb	r1, r3, #32
 8000624:	fa02 fc03 	lsl.w	ip, r2, r3
 8000628:	fa20 f201 	lsr.w	r2, r0, r1
 800062c:	fa25 f101 	lsr.w	r1, r5, r1
 8000630:	409d      	lsls	r5, r3
 8000632:	432a      	orrs	r2, r5
 8000634:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000638:	fa1f fe8c 	uxth.w	lr, ip
 800063c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000640:	fb07 1510 	mls	r5, r7, r0, r1
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800064a:	fb00 f50e 	mul.w	r5, r0, lr
 800064e:	428d      	cmp	r5, r1
 8000650:	fa04 f403 	lsl.w	r4, r4, r3
 8000654:	d908      	bls.n	8000668 <__udivmoddi4+0x258>
 8000656:	eb1c 0101 	adds.w	r1, ip, r1
 800065a:	f100 38ff 	add.w	r8, r0, #4294967295
 800065e:	d22f      	bcs.n	80006c0 <__udivmoddi4+0x2b0>
 8000660:	428d      	cmp	r5, r1
 8000662:	d92d      	bls.n	80006c0 <__udivmoddi4+0x2b0>
 8000664:	3802      	subs	r0, #2
 8000666:	4461      	add	r1, ip
 8000668:	1b49      	subs	r1, r1, r5
 800066a:	b292      	uxth	r2, r2
 800066c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000670:	fb07 1115 	mls	r1, r7, r5, r1
 8000674:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000678:	fb05 f10e 	mul.w	r1, r5, lr
 800067c:	4291      	cmp	r1, r2
 800067e:	d908      	bls.n	8000692 <__udivmoddi4+0x282>
 8000680:	eb1c 0202 	adds.w	r2, ip, r2
 8000684:	f105 38ff 	add.w	r8, r5, #4294967295
 8000688:	d216      	bcs.n	80006b8 <__udivmoddi4+0x2a8>
 800068a:	4291      	cmp	r1, r2
 800068c:	d914      	bls.n	80006b8 <__udivmoddi4+0x2a8>
 800068e:	3d02      	subs	r5, #2
 8000690:	4462      	add	r2, ip
 8000692:	1a52      	subs	r2, r2, r1
 8000694:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000698:	e738      	b.n	800050c <__udivmoddi4+0xfc>
 800069a:	4631      	mov	r1, r6
 800069c:	4630      	mov	r0, r6
 800069e:	e708      	b.n	80004b2 <__udivmoddi4+0xa2>
 80006a0:	4639      	mov	r1, r7
 80006a2:	e6e6      	b.n	8000472 <__udivmoddi4+0x62>
 80006a4:	4610      	mov	r0, r2
 80006a6:	e6fb      	b.n	80004a0 <__udivmoddi4+0x90>
 80006a8:	4548      	cmp	r0, r9
 80006aa:	d2a9      	bcs.n	8000600 <__udivmoddi4+0x1f0>
 80006ac:	ebb9 0802 	subs.w	r8, r9, r2
 80006b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80006b4:	3b01      	subs	r3, #1
 80006b6:	e7a3      	b.n	8000600 <__udivmoddi4+0x1f0>
 80006b8:	4645      	mov	r5, r8
 80006ba:	e7ea      	b.n	8000692 <__udivmoddi4+0x282>
 80006bc:	462b      	mov	r3, r5
 80006be:	e794      	b.n	80005ea <__udivmoddi4+0x1da>
 80006c0:	4640      	mov	r0, r8
 80006c2:	e7d1      	b.n	8000668 <__udivmoddi4+0x258>
 80006c4:	46d0      	mov	r8, sl
 80006c6:	e77b      	b.n	80005c0 <__udivmoddi4+0x1b0>
 80006c8:	3d02      	subs	r5, #2
 80006ca:	4462      	add	r2, ip
 80006cc:	e732      	b.n	8000534 <__udivmoddi4+0x124>
 80006ce:	4608      	mov	r0, r1
 80006d0:	e70a      	b.n	80004e8 <__udivmoddi4+0xd8>
 80006d2:	4464      	add	r4, ip
 80006d4:	3802      	subs	r0, #2
 80006d6:	e742      	b.n	800055e <__udivmoddi4+0x14e>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	460a      	mov	r2, r1
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f2:	480c      	ldr	r0, [pc, #48]	; (8000724 <HG2_Write_Register+0x48>)
 80006f4:	f007 fc3a 	bl	8007f6c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80006f8:	1df9      	adds	r1, r7, #7
 80006fa:	2364      	movs	r3, #100	; 0x64
 80006fc:	2201      	movs	r2, #1
 80006fe:	480a      	ldr	r0, [pc, #40]	; (8000728 <HG2_Write_Register+0x4c>)
 8000700:	f00e f9d0 	bl	800eaa4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000704:	1db9      	adds	r1, r7, #6
 8000706:	2364      	movs	r3, #100	; 0x64
 8000708:	2201      	movs	r2, #1
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <HG2_Write_Register+0x4c>)
 800070c:	f00e f9ca 	bl	800eaa4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4803      	ldr	r0, [pc, #12]	; (8000724 <HG2_Write_Register+0x48>)
 8000718:	f007 fc28 	bl	8007f6c <HAL_GPIO_WritePin>

}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	58020c00 	.word	0x58020c00
 8000728:	24000fc0 	.word	0x24000fc0

0800072c <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800073c:	b2db      	uxtb	r3, r3
 800073e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <LG2_Read_Register+0x50>)
 8000748:	f007 fc10 	bl	8007f6c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 800074c:	1df9      	adds	r1, r7, #7
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2201      	movs	r2, #1
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <LG2_Read_Register+0x54>)
 8000754:	f00e f9a6 	bl	800eaa4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000758:	f107 010f 	add.w	r1, r7, #15
 800075c:	2364      	movs	r3, #100	; 0x64
 800075e:	2201      	movs	r2, #1
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <LG2_Read_Register+0x54>)
 8000762:	f00e fb9b 	bl	800ee9c <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <LG2_Read_Register+0x50>)
 800076e:	f007 fbfd 	bl	8007f6c <HAL_GPIO_WritePin>

	return reg_value;
 8000772:	7bfb      	ldrb	r3, [r7, #15]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	58020c00 	.word	0x58020c00
 8000780:	24000fc0 	.word	0x24000fc0

08000784 <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	460a      	mov	r2, r1
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	4613      	mov	r3, r2
 8000792:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079a:	480c      	ldr	r0, [pc, #48]	; (80007cc <LG2_Write_Register+0x48>)
 800079c:	f007 fbe6 	bl	8007f6c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80007a0:	1df9      	adds	r1, r7, #7
 80007a2:	2364      	movs	r3, #100	; 0x64
 80007a4:	2201      	movs	r2, #1
 80007a6:	480a      	ldr	r0, [pc, #40]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007a8:	f00e f97c 	bl	800eaa4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80007ac:	1db9      	adds	r1, r7, #6
 80007ae:	2364      	movs	r3, #100	; 0x64
 80007b0:	2201      	movs	r2, #1
 80007b2:	4807      	ldr	r0, [pc, #28]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007b4:	f00e f976 	bl	800eaa4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <LG2_Write_Register+0x48>)
 80007c0:	f007 fbd4 	bl	8007f6c <HAL_GPIO_WritePin>

}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	58020c00 	.word	0x58020c00
 80007d0:	24000fc0 	.word	0x24000fc0

080007d4 <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 80007da:	2022      	movs	r0, #34	; 0x22
 80007dc:	f7ff ffa6 	bl	800072c <LG2_Read_Register>
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 80007e4:	2023      	movs	r0, #35	; 0x23
 80007e6:	f7ff ffa1 	bl	800072c <LG2_Read_Register>
 80007ea:	4603      	mov	r3, r0
 80007ec:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 80007fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000800:	ee07 3a90 	vmov	s15, r3
 8000804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000808:	eddf 6a08 	vldr	s13, [pc, #32]	; 800082c <LG2_Get_Gyro_X+0x58>
 800080c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000810:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000830 <LG2_Get_Gyro_X+0x5c>
 8000814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000818:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	ee07 3a90 	vmov	s15, r3
}
 8000822:	eeb0 0a67 	vmov.f32	s0, s15
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	46fffe00 	.word	0x46fffe00
 8000830:	437a0000 	.word	0x437a0000

08000834 <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 800083a:	2024      	movs	r0, #36	; 0x24
 800083c:	f7ff ff76 	bl	800072c <LG2_Read_Register>
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 8000844:	2025      	movs	r0, #37	; 0x25
 8000846:	f7ff ff71 	bl	800072c <LG2_Read_Register>
 800084a:	4603      	mov	r3, r0
 800084c:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 800085c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000868:	eddf 6a08 	vldr	s13, [pc, #32]	; 800088c <LG2_Get_Gyro_Y+0x58>
 800086c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000870:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000890 <LG2_Get_Gyro_Y+0x5c>
 8000874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000878:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	ee07 3a90 	vmov	s15, r3
}
 8000882:	eeb0 0a67 	vmov.f32	s0, s15
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	46fffe00 	.word	0x46fffe00
 8000890:	437a0000 	.word	0x437a0000
 8000894:	00000000 	.word	0x00000000

08000898 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 800089e:	2026      	movs	r0, #38	; 0x26
 80008a0:	f7ff ff44 	bl	800072c <LG2_Read_Register>
 80008a4:	4603      	mov	r3, r0
 80008a6:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 80008a8:	2027      	movs	r0, #39	; 0x27
 80008aa:	f7ff ff3f 	bl	800072c <LG2_Read_Register>
 80008ae:	4603      	mov	r3, r0
 80008b0:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	b21a      	sxth	r2, r3
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	b21b      	sxth	r3, r3
 80008bc:	4313      	orrs	r3, r2
 80008be:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 80008c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008c4:	ee07 3a90 	vmov	s15, r3
 80008c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008cc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008d0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80008f8 <LG2_Get_Gyro_Z+0x60>
 80008d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008d8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000900 <LG2_Get_Gyro_Z+0x68>
 80008dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008e4:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	ee07 3a90 	vmov	s15, r3
}
 80008ee:	eeb0 0a67 	vmov.f32	s0, s15
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	00000000 	.word	0x00000000
 80008fc:	40dfffc0 	.word	0x40dfffc0
 8000900:	00000000 	.word	0x00000000
 8000904:	406f4000 	.word	0x406f4000

08000908 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 8000914:	ed97 7a00 	vldr	s14, [r7]
 8000918:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000988 <setServo+0x80>
 800091c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000920:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800098c <setServo+0x84>
 8000924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000928:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000990 <setServo+0x88>
 800092c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000934:	ee17 3a90 	vmov	r3, s15
 8000938:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3b01      	subs	r3, #1
 800093e:	2b03      	cmp	r3, #3
 8000940:	d81a      	bhi.n	8000978 <setServo+0x70>
 8000942:	a201      	add	r2, pc, #4	; (adr r2, 8000948 <setServo+0x40>)
 8000944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000948:	08000959 	.word	0x08000959
 800094c:	08000961 	.word	0x08000961
 8000950:	08000969 	.word	0x08000969
 8000954:	08000971 	.word	0x08000971
		case 1:
			TIM4->CCR4 = timerVal;
 8000958:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <setServo+0x8c>)
 800095a:	89fb      	ldrh	r3, [r7, #14]
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 800095e:	e00c      	b.n	800097a <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000960:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <setServo+0x8c>)
 8000962:	89fb      	ldrh	r3, [r7, #14]
 8000964:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8000966:	e008      	b.n	800097a <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000968:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <setServo+0x8c>)
 800096a:	89fb      	ldrh	r3, [r7, #14]
 800096c:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 800096e:	e004      	b.n	800097a <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000970:	4a08      	ldr	r2, [pc, #32]	; (8000994 <setServo+0x8c>)
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000976:	e000      	b.n	800097a <setServo+0x72>

		default:
			break;
 8000978:	bf00      	nop
	}
}
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	43340000 	.word	0x43340000
 800098c:	457a0000 	.word	0x457a0000
 8000990:	453b8000 	.word	0x453b8000
 8000994:	40000800 	.word	0x40000800

08000998 <setLEDs>:

void setLEDs(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b08e      	sub	sp, #56	; 0x38
 800099c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 800099e:	2300      	movs	r3, #0
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
 80009a2:	e181      	b.n	8000ca8 <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 80009a4:	4aa1      	ldr	r2, [pc, #644]	; (8000c2c <setLEDs+0x294>)
 80009a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	f200 8177 	bhi.w	8000ca0 <setLEDs+0x308>
 80009b2:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <setLEDs+0x20>)
 80009b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b8:	080009c9 	.word	0x080009c9
 80009bc:	08000a79 	.word	0x08000a79
 80009c0:	08000b29 	.word	0x08000b29
 80009c4:	08000bd9 	.word	0x08000bd9
		case 0:
			for (int j = 0; j < 3; j++) {
 80009c8:	2300      	movs	r3, #0
 80009ca:	633b      	str	r3, [r7, #48]	; 0x30
 80009cc:	e042      	b.n	8000a54 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009d2:	e039      	b.n	8000a48 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80009d4:	4996      	ldr	r1, [pc, #600]	; (8000c30 <setLEDs+0x298>)
 80009d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009d8:	4613      	mov	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4413      	add	r3, r2
 80009de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009e0:	4413      	add	r3, r2
 80009e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009e6:	2180      	movs	r1, #128	; 0x80
 80009e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009ea:	fa41 f202 	asr.w	r2, r1, r2
 80009ee:	4013      	ands	r3, r2
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d013      	beq.n	8000a1c <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80009f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f6:	00da      	lsls	r2, r3, #3
 80009f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fa:	18d1      	adds	r1, r2, r3
 80009fc:	4a8b      	ldr	r2, [pc, #556]	; (8000c2c <setLEDs+0x294>)
 80009fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	4413      	add	r3, r2
 8000a04:	685a      	ldr	r2, [r3, #4]
 8000a06:	4613      	mov	r3, r2
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	4413      	add	r3, r2
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	440b      	add	r3, r1
 8000a10:	3308      	adds	r3, #8
 8000a12:	4a88      	ldr	r2, [pc, #544]	; (8000c34 <setLEDs+0x29c>)
 8000a14:	213c      	movs	r1, #60	; 0x3c
 8000a16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a1a:	e012      	b.n	8000a42 <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a1e:	00da      	lsls	r2, r3, #3
 8000a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a22:	18d1      	adds	r1, r2, r3
 8000a24:	4a81      	ldr	r2, [pc, #516]	; (8000c2c <setLEDs+0x294>)
 8000a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	4413      	add	r3, r2
 8000a2c:	685a      	ldr	r2, [r3, #4]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	440b      	add	r3, r1
 8000a38:	3308      	adds	r3, #8
 8000a3a:	4a7e      	ldr	r2, [pc, #504]	; (8000c34 <setLEDs+0x29c>)
 8000a3c:	211e      	movs	r1, #30
 8000a3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a44:	3301      	adds	r3, #1
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4a:	2b07      	cmp	r3, #7
 8000a4c:	ddc2      	ble.n	80009d4 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a50:	3301      	adds	r3, #1
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
 8000a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	ddb9      	ble.n	80009ce <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a5e:	e007      	b.n	8000a70 <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 8000a60:	4a74      	ldr	r2, [pc, #464]	; (8000c34 <setLEDs+0x29c>)
 8000a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a64:	2100      	movs	r1, #0
 8000a66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	2bb1      	cmp	r3, #177	; 0xb1
 8000a74:	ddf4      	ble.n	8000a60 <setLEDs+0xc8>
			}
			break;
 8000a76:	e114      	b.n	8000ca2 <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a7c:	e042      	b.n	8000b04 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
 8000a82:	e039      	b.n	8000af8 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000a84:	496a      	ldr	r1, [pc, #424]	; (8000c30 <setLEDs+0x298>)
 8000a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a88:	4613      	mov	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	4413      	add	r3, r2
 8000a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a90:	4413      	add	r3, r2
 8000a92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a96:	2180      	movs	r1, #128	; 0x80
 8000a98:	6a3a      	ldr	r2, [r7, #32]
 8000a9a:	fa41 f202 	asr.w	r2, r1, r2
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d013      	beq.n	8000acc <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa6:	00da      	lsls	r2, r3, #3
 8000aa8:	6a3b      	ldr	r3, [r7, #32]
 8000aaa:	18d1      	adds	r1, r2, r3
 8000aac:	4a5f      	ldr	r2, [pc, #380]	; (8000c2c <setLEDs+0x294>)
 8000aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	4413      	add	r3, r2
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	4413      	add	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	440b      	add	r3, r1
 8000ac0:	3308      	adds	r3, #8
 8000ac2:	4a5d      	ldr	r2, [pc, #372]	; (8000c38 <setLEDs+0x2a0>)
 8000ac4:	213c      	movs	r1, #60	; 0x3c
 8000ac6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000aca:	e012      	b.n	8000af2 <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	00da      	lsls	r2, r3, #3
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	18d1      	adds	r1, r2, r3
 8000ad4:	4a55      	ldr	r2, [pc, #340]	; (8000c2c <setLEDs+0x294>)
 8000ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	4413      	add	r3, r2
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	4413      	add	r3, r2
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	440b      	add	r3, r1
 8000ae8:	3308      	adds	r3, #8
 8000aea:	4a53      	ldr	r2, [pc, #332]	; (8000c38 <setLEDs+0x2a0>)
 8000aec:	211e      	movs	r1, #30
 8000aee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000af2:	6a3b      	ldr	r3, [r7, #32]
 8000af4:	3301      	adds	r3, #1
 8000af6:	623b      	str	r3, [r7, #32]
 8000af8:	6a3b      	ldr	r3, [r7, #32]
 8000afa:	2b07      	cmp	r3, #7
 8000afc:	ddc2      	ble.n	8000a84 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	3301      	adds	r3, #1
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
 8000b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	ddb9      	ble.n	8000a7e <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	61fb      	str	r3, [r7, #28]
 8000b0e:	e007      	b.n	8000b20 <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 8000b10:	4a49      	ldr	r2, [pc, #292]	; (8000c38 <setLEDs+0x2a0>)
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	2100      	movs	r1, #0
 8000b16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	2bb1      	cmp	r3, #177	; 0xb1
 8000b24:	ddf4      	ble.n	8000b10 <setLEDs+0x178>
			}
			break;
 8000b26:	e0bc      	b.n	8000ca2 <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	e042      	b.n	8000bb4 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	e039      	b.n	8000ba8 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b34:	493e      	ldr	r1, [pc, #248]	; (8000c30 <setLEDs+0x298>)
 8000b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b38:	4613      	mov	r3, r2
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	4413      	add	r3, r2
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	4413      	add	r3, r2
 8000b42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b46:	2180      	movs	r1, #128	; 0x80
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	fa41 f202 	asr.w	r2, r1, r2
 8000b4e:	4013      	ands	r3, r2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d013      	beq.n	8000b7c <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	00da      	lsls	r2, r3, #3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	18d1      	adds	r1, r2, r3
 8000b5c:	4a33      	ldr	r2, [pc, #204]	; (8000c2c <setLEDs+0x294>)
 8000b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	4413      	add	r3, r2
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	4613      	mov	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4413      	add	r3, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	440b      	add	r3, r1
 8000b70:	3308      	adds	r3, #8
 8000b72:	4a32      	ldr	r2, [pc, #200]	; (8000c3c <setLEDs+0x2a4>)
 8000b74:	213c      	movs	r1, #60	; 0x3c
 8000b76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000b7a:	e012      	b.n	8000ba2 <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	00da      	lsls	r2, r3, #3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	18d1      	adds	r1, r2, r3
 8000b84:	4a29      	ldr	r2, [pc, #164]	; (8000c2c <setLEDs+0x294>)
 8000b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	4413      	add	r3, r2
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	4413      	add	r3, r2
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	440b      	add	r3, r1
 8000b98:	3308      	adds	r3, #8
 8000b9a:	4a28      	ldr	r2, [pc, #160]	; (8000c3c <setLEDs+0x2a4>)
 8000b9c:	211e      	movs	r1, #30
 8000b9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	2b07      	cmp	r3, #7
 8000bac:	ddc2      	ble.n	8000b34 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	ddb9      	ble.n	8000b2e <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bba:	2338      	movs	r3, #56	; 0x38
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	e007      	b.n	8000bd0 <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 8000bc0:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <setLEDs+0x2a4>)
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	2b69      	cmp	r3, #105	; 0x69
 8000bd4:	ddf4      	ble.n	8000bc0 <setLEDs+0x228>
			}
			break;
 8000bd6:	e064      	b.n	8000ca2 <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	e04e      	b.n	8000c7c <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	e045      	b.n	8000c70 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000be4:	4912      	ldr	r1, [pc, #72]	; (8000c30 <setLEDs+0x298>)
 8000be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000be8:	4613      	mov	r3, r2
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	4413      	add	r3, r2
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bf6:	2180      	movs	r1, #128	; 0x80
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	fa41 f202 	asr.w	r2, r1, r2
 8000bfe:	4013      	ands	r3, r2
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d01f      	beq.n	8000c44 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	00da      	lsls	r2, r3, #3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	18d1      	adds	r1, r2, r3
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <setLEDs+0x294>)
 8000c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	4413      	add	r3, r2
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	4613      	mov	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	440b      	add	r3, r1
 8000c20:	3308      	adds	r3, #8
 8000c22:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <setLEDs+0x2a8>)
 8000c24:	213c      	movs	r1, #60	; 0x3c
 8000c26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c2a:	e01e      	b.n	8000c6a <setLEDs+0x2d2>
 8000c2c:	08018478 	.word	0x08018478
 8000c30:	24000b50 	.word	0x24000b50
 8000c34:	24000270 	.word	0x24000270
 8000c38:	24000538 	.word	0x24000538
 8000c3c:	24000800 	.word	0x24000800
 8000c40:	240009a8 	.word	0x240009a8
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	00da      	lsls	r2, r3, #3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	18d1      	adds	r1, r2, r3
 8000c4c:	4a26      	ldr	r2, [pc, #152]	; (8000ce8 <setLEDs+0x350>)
 8000c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	4413      	add	r3, r2
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	4613      	mov	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	440b      	add	r3, r1
 8000c60:	3308      	adds	r3, #8
 8000c62:	4a22      	ldr	r2, [pc, #136]	; (8000cec <setLEDs+0x354>)
 8000c64:	211e      	movs	r1, #30
 8000c66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	ddb6      	ble.n	8000be4 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	ddad      	ble.n	8000bde <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c82:	2338      	movs	r3, #56	; 0x38
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	e007      	b.n	8000c98 <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 8000c88:	4a18      	ldr	r2, [pc, #96]	; (8000cec <setLEDs+0x354>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3301      	adds	r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b69      	cmp	r3, #105	; 0x69
 8000c9c:	ddf4      	ble.n	8000c88 <setLEDs+0x2f0>
			}
			break;
 8000c9e:	e000      	b.n	8000ca2 <setLEDs+0x30a>
		default:
			break;
 8000ca0:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8000ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8000ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000caa:	2b0d      	cmp	r3, #13
 8000cac:	f77f ae7a 	ble.w	80009a4 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 8000cb0:	23b2      	movs	r3, #178	; 0xb2
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <setLEDs+0x358>)
 8000cb4:	210c      	movs	r1, #12
 8000cb6:	480f      	ldr	r0, [pc, #60]	; (8000cf4 <setLEDs+0x35c>)
 8000cb8:	f00e fd34 	bl	800f724 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 8000cbc:	23b2      	movs	r3, #178	; 0xb2
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <setLEDs+0x360>)
 8000cc0:	2108      	movs	r1, #8
 8000cc2:	480e      	ldr	r0, [pc, #56]	; (8000cfc <setLEDs+0x364>)
 8000cc4:	f00e fd2e 	bl	800f724 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 8000cc8:	236a      	movs	r3, #106	; 0x6a
 8000cca:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <setLEDs+0x368>)
 8000ccc:	2104      	movs	r1, #4
 8000cce:	480d      	ldr	r0, [pc, #52]	; (8000d04 <setLEDs+0x36c>)
 8000cd0:	f00e fd28 	bl	800f724 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 8000cd4:	236a      	movs	r3, #106	; 0x6a
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <setLEDs+0x354>)
 8000cd8:	2100      	movs	r1, #0
 8000cda:	480a      	ldr	r0, [pc, #40]	; (8000d04 <setLEDs+0x36c>)
 8000cdc:	f00e fd22 	bl	800f724 <HAL_TIM_PWM_Start_DMA>

}
 8000ce0:	bf00      	nop
 8000ce2:	3738      	adds	r7, #56	; 0x38
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	08018478 	.word	0x08018478
 8000cec:	240009a8 	.word	0x240009a8
 8000cf0:	24000270 	.word	0x24000270
 8000cf4:	240011b4 	.word	0x240011b4
 8000cf8:	24000538 	.word	0x24000538
 8000cfc:	240010d0 	.word	0x240010d0
 8000d00:	24000800 	.word	0x24000800
 8000d04:	2400111c 	.word	0x2400111c

08000d08 <LoRA_Read_Register>:
	}
}



uint8_t LoRA_Read_Register(uint8_t addr){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <LoRA_Read_Register+0x48>)
 8000d1a:	f007 f927 	bl	8007f6c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d1e:	1df9      	adds	r1, r7, #7
 8000d20:	2364      	movs	r3, #100	; 0x64
 8000d22:	2201      	movs	r2, #1
 8000d24:	480b      	ldr	r0, [pc, #44]	; (8000d54 <LoRA_Read_Register+0x4c>)
 8000d26:	f00d febd 	bl	800eaa4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000d2a:	f107 010f 	add.w	r1, r7, #15
 8000d2e:	2364      	movs	r3, #100	; 0x64
 8000d30:	2201      	movs	r2, #1
 8000d32:	4808      	ldr	r0, [pc, #32]	; (8000d54 <LoRA_Read_Register+0x4c>)
 8000d34:	f00e f8b2 	bl	800ee9c <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d3e:	4804      	ldr	r0, [pc, #16]	; (8000d50 <LoRA_Read_Register+0x48>)
 8000d40:	f007 f914 	bl	8007f6c <HAL_GPIO_WritePin>

	return reg_value;
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	58020000 	.word	0x58020000
 8000d54:	24001048 	.word	0x24001048

08000d58 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	460a      	mov	r2, r1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	4613      	mov	r3, r2
 8000d66:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <LoRA_Write_Register+0x54>)
 8000d7a:	f007 f8f7 	bl	8007f6c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d7e:	1df9      	adds	r1, r7, #7
 8000d80:	2364      	movs	r3, #100	; 0x64
 8000d82:	2201      	movs	r2, #1
 8000d84:	480a      	ldr	r0, [pc, #40]	; (8000db0 <LoRA_Write_Register+0x58>)
 8000d86:	f00d fe8d 	bl	800eaa4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000d8a:	1db9      	adds	r1, r7, #6
 8000d8c:	2364      	movs	r3, #100	; 0x64
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4807      	ldr	r0, [pc, #28]	; (8000db0 <LoRA_Write_Register+0x58>)
 8000d92:	f00d fe87 	bl	800eaa4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d96:	2201      	movs	r2, #1
 8000d98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d9c:	4803      	ldr	r0, [pc, #12]	; (8000dac <LoRA_Write_Register+0x54>)
 8000d9e:	f007 f8e5 	bl	8007f6c <HAL_GPIO_WritePin>

}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	58020000 	.word	0x58020000
 8000db0:	24001048 	.word	0x24001048

08000db4 <LoRA_sleep>:


void LoRA_sleep(void){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff ffcc 	bl	8000d58 <LoRA_Write_Register>
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000dc4:	b5b0      	push	{r4, r5, r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	17c8      	asrs	r0, r1, #31
 8000dd0:	460a      	mov	r2, r1
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	1355      	asrs	r5, r2, #13
 8000dd6:	04d4      	lsls	r4, r2, #19
 8000dd8:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <LoRA_set_frequency+0x78>)
 8000dda:	f04f 0300 	mov.w	r3, #0
 8000dde:	4620      	mov	r0, r4
 8000de0:	4629      	mov	r1, r5
 8000de2:	f7ff fafd 	bl	80003e0 <__aeabi_uldivmod>
 8000de6:	4602      	mov	r2, r0
 8000de8:	460b      	mov	r3, r1
 8000dea:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000dee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	f04f 0300 	mov.w	r3, #0
 8000dfa:	0c02      	lsrs	r2, r0, #16
 8000dfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e00:	0c0b      	lsrs	r3, r1, #16
 8000e02:	b2d3      	uxtb	r3, r2
 8000e04:	4619      	mov	r1, r3
 8000e06:	2006      	movs	r0, #6
 8000e08:	f7ff ffa6 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000e0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e10:	f04f 0200 	mov.w	r2, #0
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	0a02      	lsrs	r2, r0, #8
 8000e1a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000e1e:	0a0b      	lsrs	r3, r1, #8
 8000e20:	b2d3      	uxtb	r3, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	2007      	movs	r0, #7
 8000e26:	f7ff ff97 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000e2a:	7a3b      	ldrb	r3, [r7, #8]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	2008      	movs	r0, #8
 8000e30:	f7ff ff92 	bl	8000d58 <LoRA_Write_Register>
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e3c:	01e84800 	.word	0x01e84800

08000e40 <LoRA_idle>:

void LoRA_idle(){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000e44:	2181      	movs	r1, #129	; 0x81
 8000e46:	2001      	movs	r0, #1
 8000e48:	f7ff ff86 	bl	8000d58 <LoRA_Write_Register>
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8000e5a:	231b      	movs	r3, #27
 8000e5c:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b78      	cmp	r3, #120	; 0x78
 8000e62:	d809      	bhi.n	8000e78 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	3b2d      	subs	r3, #45	; 0x2d
 8000e68:	4a11      	ldr	r2, [pc, #68]	; (8000eb0 <LoRA_setOCP+0x60>)
 8000e6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e6e:	1052      	asrs	r2, r2, #1
 8000e70:	17db      	asrs	r3, r3, #31
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	73fb      	strb	r3, [r7, #15]
 8000e76:	e00b      	b.n	8000e90 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	2bf0      	cmp	r3, #240	; 0xf0
 8000e7c:	d808      	bhi.n	8000e90 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	331e      	adds	r3, #30
 8000e82:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <LoRA_setOCP+0x60>)
 8000e84:	fb82 1203 	smull	r1, r2, r2, r3
 8000e88:	1092      	asrs	r2, r2, #2
 8000e8a:	17db      	asrs	r3, r3, #31
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	f003 031f 	and.w	r3, r3, #31
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	f043 0320 	orr.w	r3, r3, #32
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	200b      	movs	r0, #11
 8000ea2:	f7ff ff59 	bl	8000d58 <LoRA_Write_Register>
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	66666667 	.word	0x66666667

08000eb4 <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b11      	cmp	r3, #17
 8000ec0:	dd0f      	ble.n	8000ee2 <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b14      	cmp	r3, #20
 8000ec6:	dd01      	ble.n	8000ecc <LoRA_setTxPower+0x18>
        level = 20;
 8000ec8:	2314      	movs	r3, #20
 8000eca:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b03      	subs	r3, #3
 8000ed0:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000ed2:	2187      	movs	r1, #135	; 0x87
 8000ed4:	204d      	movs	r0, #77	; 0x4d
 8000ed6:	f7ff ff3f 	bl	8000d58 <LoRA_Write_Register>
      LoRA_setOCP(140);
 8000eda:	208c      	movs	r0, #140	; 0x8c
 8000edc:	f7ff ffb8 	bl	8000e50 <LoRA_setOCP>
 8000ee0:	e00b      	b.n	8000efa <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	dc01      	bgt.n	8000eec <LoRA_setTxPower+0x38>
        level = 2;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000eec:	2184      	movs	r1, #132	; 0x84
 8000eee:	204d      	movs	r0, #77	; 0x4d
 8000ef0:	f7ff ff32 	bl	8000d58 <LoRA_Write_Register>
      LoRA_setOCP(100);
 8000ef4:	2064      	movs	r0, #100	; 0x64
 8000ef6:	f7ff ffab 	bl	8000e50 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	3b02      	subs	r3, #2
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f08:	b25b      	sxtb	r3, r3
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	2009      	movs	r0, #9
 8000f10:	f7ff ff22 	bl	8000d58 <LoRA_Write_Register>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8000f20:	201d      	movs	r0, #29
 8000f22:	f7ff fef1 	bl	8000d08 <LoRA_Read_Register>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f023 0301 	bic.w	r3, r3, #1
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	4619      	mov	r1, r3
 8000f30:	201d      	movs	r0, #29
 8000f32:	f7ff ff11 	bl	8000d58 <LoRA_Write_Register>
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <LoRA_begin>:

void LoRA_begin(long frequency){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b09c      	sub	sp, #112	; 0x70
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2101      	movs	r1, #1
 8000f48:	4822      	ldr	r0, [pc, #136]	; (8000fd4 <LoRA_begin+0x98>)
 8000f4a:	f007 f80f 	bl	8007f6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f54:	4820      	ldr	r0, [pc, #128]	; (8000fd8 <LoRA_begin+0x9c>)
 8000f56:	f007 f809 	bl	8007f6c <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8000f5a:	2042      	movs	r0, #66	; 0x42
 8000f5c:	f7ff fed4 	bl	8000d08 <LoRA_Read_Register>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 8000f66:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	491b      	ldr	r1, [pc, #108]	; (8000fdc <LoRA_begin+0xa0>)
 8000f70:	4618      	mov	r0, r3
 8000f72:	f016 f843 	bl	8016ffc <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff f9d2 	bl	8000324 <strlen>
 8000f80:	4602      	mov	r2, r0
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f015 fbe3 	bl	8016754 <CDC_Transmit_HS>

	LoRA_sleep();
 8000f8e:	f7ff ff11 	bl	8000db4 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8000f92:	4813      	ldr	r0, [pc, #76]	; (8000fe0 <LoRA_begin+0xa4>)
 8000f94:	f7ff ff16 	bl	8000dc4 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	200f      	movs	r0, #15
 8000f9c:	f7ff fedc 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	200e      	movs	r0, #14
 8000fa4:	f7ff fed8 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8000fa8:	200c      	movs	r0, #12
 8000faa:	f7ff fead 	bl	8000d08 <LoRA_Read_Register>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	f043 0303 	orr.w	r3, r3, #3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	200c      	movs	r0, #12
 8000fba:	f7ff fecd 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8000fbe:	2104      	movs	r1, #4
 8000fc0:	2026      	movs	r0, #38	; 0x26
 8000fc2:	f7ff fec9 	bl	8000d58 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8000fc6:	2011      	movs	r0, #17
 8000fc8:	f7ff ff74 	bl	8000eb4 <LoRA_setTxPower>

}
 8000fcc:	bf00      	nop
 8000fce:	3770      	adds	r7, #112	; 0x70
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	58020c00 	.word	0x58020c00
 8000fd8:	58020000 	.word	0x58020000
 8000fdc:	080182e0 	.word	0x080182e0
 8000fe0:	33bca100 	.word	0x33bca100

08000fe4 <LoRA_beginPacket>:


void LoRA_beginPacket(){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8000fe8:	f7ff ff98 	bl	8000f1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000fec:	2100      	movs	r1, #0
 8000fee:	200d      	movs	r0, #13
 8000ff0:	f7ff feb2 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2022      	movs	r0, #34	; 0x22
 8000ff8:	f7ff feae 	bl	8000d58 <LoRA_Write_Register>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <LoRA_endPacket>:

void LoRA_endPacket(){
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8001004:	2183      	movs	r1, #131	; 0x83
 8001006:	2001      	movs	r0, #1
 8001008:	f7ff fea6 	bl	8000d58 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 800100c:	bf00      	nop
 800100e:	2012      	movs	r0, #18
 8001010:	f7ff fe7a 	bl	8000d08 <LoRA_Read_Register>
 8001014:	4603      	mov	r3, r0
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0f7      	beq.n	800100e <LoRA_endPacket+0xe>

	}
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 800101e:	2185      	movs	r1, #133	; 0x85
 8001020:	2001      	movs	r0, #1
 8001022:	f7ff fe99 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8001026:	2108      	movs	r1, #8
 8001028:	2012      	movs	r0, #18
 800102a:	f7ff fe95 	bl	8000d58 <LoRA_Write_Register>

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}

08001032 <LoRA_parsePacket>:


int LoRA_parsePacket(){
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 800103c:	2012      	movs	r0, #18
 800103e:	f7ff fe63 	bl	8000d08 <LoRA_Read_Register>
 8001042:	4603      	mov	r3, r0
 8001044:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 8001046:	f7ff ff69 	bl	8000f1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	4619      	mov	r1, r3
 8001050:	2012      	movs	r0, #18
 8001052:	f7ff fe81 	bl	8000d58 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800105c:	2b00      	cmp	r3, #0
 800105e:	d016      	beq.n	800108e <LoRA_parsePacket+0x5c>
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	f003 0320 	and.w	r3, r3, #32
 8001066:	2b00      	cmp	r3, #0
 8001068:	d111      	bne.n	800108e <LoRA_parsePacket+0x5c>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 800106a:	2013      	movs	r0, #19
 800106c:	f7ff fe4c 	bl	8000d08 <LoRA_Read_Register>
 8001070:	4603      	mov	r3, r0
 8001072:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 8001074:	2010      	movs	r0, #16
 8001076:	f7ff fe47 	bl	8000d08 <LoRA_Read_Register>
 800107a:	4603      	mov	r3, r0
 800107c:	4619      	mov	r1, r3
 800107e:	200d      	movs	r0, #13
 8001080:	f7ff fe6a 	bl	8000d58 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001084:	2185      	movs	r1, #133	; 0x85
 8001086:	2001      	movs	r0, #1
 8001088:	f7ff fe66 	bl	8000d58 <LoRA_Write_Register>
 800108c:	e00d      	b.n	80010aa <LoRA_parsePacket+0x78>

		//LoRA_idle();
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS)){
 800108e:	2001      	movs	r0, #1
 8001090:	f7ff fe3a 	bl	8000d08 <LoRA_Read_Register>
 8001094:	4603      	mov	r3, r0
 8001096:	2b85      	cmp	r3, #133	; 0x85
 8001098:	d007      	beq.n	80010aa <LoRA_parsePacket+0x78>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 800109a:	2100      	movs	r1, #0
 800109c:	200d      	movs	r0, #13
 800109e:	f7ff fe5b 	bl	8000d58 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 80010a2:	2185      	movs	r1, #133	; 0x85
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff fe57 	bl	8000d58 <LoRA_Write_Register>
	}
	return packetLenght;
 80010aa:	687b      	ldr	r3, [r7, #4]

}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <LoRA_sendPacket>:

void LoRA_sendPacket(char * data){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	LoRA_idle();
 80010bc:	f7ff fec0 	bl	8000e40 <LoRA_idle>
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 80010c0:	2012      	movs	r0, #18
 80010c2:	f7ff fe21 	bl	8000d08 <LoRA_Read_Register>
 80010c6:	4603      	mov	r3, r0
 80010c8:	60bb      	str	r3, [r7, #8]
	/*char debug[250];
	sprintf(debug, "here: %d\n", (irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK));
	CDC_Transmit_HS(debug, strlen(debug));
	HAL_Delay(100);*/
	if(!((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0))
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d004      	beq.n	80010de <LoRA_sendPacket+0x2a>
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	f003 0320 	and.w	r3, r3, #32
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d022      	beq.n	8001124 <LoRA_sendPacket+0x70>
	{
		//CDC_Transmit_HS("here1\n", strlen("here1\n"));
		LoRA_beginPacket();
 80010de:	f7ff ff81 	bl	8000fe4 <LoRA_beginPacket>
    	for(int i = 0; i < strlen(data); i++){
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	e00a      	b.n	80010fe <LoRA_sendPacket+0x4a>
    		LoRA_Write_Register(REG_FIFO, data[i]);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	2000      	movs	r0, #0
 80010f4:	f7ff fe30 	bl	8000d58 <LoRA_Write_Register>
    	for(int i = 0; i < strlen(data); i++){
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	3301      	adds	r3, #1
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff f910 	bl	8000324 <strlen>
 8001104:	4602      	mov	r2, r0
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	429a      	cmp	r2, r3
 800110a:	d8ed      	bhi.n	80010e8 <LoRA_sendPacket+0x34>
    	}
    	LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff f909 	bl	8000324 <strlen>
 8001112:	4603      	mov	r3, r0
 8001114:	b2db      	uxtb	r3, r3
 8001116:	4619      	mov	r1, r3
 8001118:	2022      	movs	r0, #34	; 0x22
 800111a:	f7ff fe1d 	bl	8000d58 <LoRA_Write_Register>
    	LoRA_endPacket();
 800111e:	f7ff ff6f 	bl	8001000 <LoRA_endPacket>
 8001122:	e004      	b.n	800112e <LoRA_sendPacket+0x7a>
	}
	else {
		//CDC_Transmit_HS("here2\n", strlen("here2\n"));
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001124:	2185      	movs	r1, #133	; 0x85
 8001126:	2001      	movs	r0, #1
 8001128:	f7ff fe16 	bl	8000d58 <LoRA_Write_Register>
	}
	/*char sent[300];
	sprintf(sent, "\nsent: %s\n", data);
	HAL_Delay(100);
	CDC_Transmit_HS(sent, strlen(sent));*/
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <disarm>:
	int status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
	return status;
}

int disarm(char* state)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2102      	movs	r1, #2
 8001144:	4827      	ldr	r0, [pc, #156]	; (80011e4 <disarm+0xac>)
 8001146:	f006 ff11 	bl	8007f6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2104      	movs	r1, #4
 800114e:	4825      	ldr	r0, [pc, #148]	; (80011e4 <disarm+0xac>)
 8001150:	f006 ff0c 	bl	8007f6c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 8001154:	2200      	movs	r2, #0
 8001156:	2102      	movs	r1, #2
 8001158:	4823      	ldr	r0, [pc, #140]	; (80011e8 <disarm+0xb0>)
 800115a:	f006 ff07 	bl	8007f6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001164:	4821      	ldr	r0, [pc, #132]	; (80011ec <disarm+0xb4>)
 8001166:	f006 ff01 	bl	8007f6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001170:	481e      	ldr	r0, [pc, #120]	; (80011ec <disarm+0xb4>)
 8001172:	f006 fefb 	bl	8007f6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800117c:	481b      	ldr	r0, [pc, #108]	; (80011ec <disarm+0xb4>)
 800117e:	f006 fef5 	bl	8007f6c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2102      	movs	r1, #2
 8001186:	481a      	ldr	r0, [pc, #104]	; (80011f0 <disarm+0xb8>)
 8001188:	f006 fef0 	bl	8007f6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001192:	4818      	ldr	r0, [pc, #96]	; (80011f4 <disarm+0xbc>)
 8001194:	f006 feea 	bl	8007f6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800119e:	4815      	ldr	r0, [pc, #84]	; (80011f4 <disarm+0xbc>)
 80011a0:	f006 fee4 	bl	8007f6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011aa:	4812      	ldr	r0, [pc, #72]	; (80011f4 <disarm+0xbc>)
 80011ac:	f006 fede 	bl	8007f6c <HAL_GPIO_WritePin>

  LED_Color_Data[7][0] = 255;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <disarm+0xc0>)
 80011b2:	22ff      	movs	r2, #255	; 0xff
 80011b4:	655a      	str	r2, [r3, #84]	; 0x54
  LED_Color_Data[7][1] = 0;
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <disarm+0xc0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	659a      	str	r2, [r3, #88]	; 0x58
  LED_Color_Data[7][2] = 0;
 80011bc:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <disarm+0xc0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	65da      	str	r2, [r3, #92]	; 0x5c
  setLEDs();
 80011c2:	f7ff fbe9 	bl	8000998 <setLEDs>

  strcpy(state,"DISARMED");
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	490c      	ldr	r1, [pc, #48]	; (80011fc <disarm+0xc4>)
 80011ca:	461a      	mov	r2, r3
 80011cc:	460b      	mov	r3, r1
 80011ce:	cb03      	ldmia	r3!, {r0, r1}
 80011d0:	6010      	str	r0, [r2, #0]
 80011d2:	6051      	str	r1, [r2, #4]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	7213      	strb	r3, [r2, #8]
  return 0;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	58020000 	.word	0x58020000
 80011e8:	58020400 	.word	0x58020400
 80011ec:	58021400 	.word	0x58021400
 80011f0:	58021800 	.word	0x58021800
 80011f4:	58021000 	.word	0x58021000
 80011f8:	24000b50 	.word	0x24000b50
 80011fc:	080182e4 	.word	0x080182e4

08001200 <recv_packet>:
  setLEDs();
  return 0;
}

int recv_packet(char* LoRA_data, int max_length)
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  int packet_length = LoRA_parsePacket();
 800120a:	f7ff ff12 	bl	8001032 <LoRA_parsePacket>
 800120e:	60b8      	str	r0, [r7, #8]
  if(max_length-1 < packet_length) //-1 for the null terminator
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	429a      	cmp	r2, r3
 8001216:	dc01      	bgt.n	800121c <recv_packet+0x1c>
  {
    return 0;
 8001218:	2300      	movs	r3, #0
 800121a:	e01c      	b.n	8001256 <recv_packet+0x56>
  }
  if(packet_length){
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d018      	beq.n	8001254 <recv_packet+0x54>
    for(int i = 0; i < packet_length; i++){
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	e00a      	b.n	800123e <recv_packet+0x3e>
      LoRA_data[i] = LoRA_Read_Register(0x00);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	18d4      	adds	r4, r2, r3
 800122e:	2000      	movs	r0, #0
 8001230:	f7ff fd6a 	bl	8000d08 <LoRA_Read_Register>
 8001234:	4603      	mov	r3, r0
 8001236:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i < packet_length; i++){
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	3301      	adds	r3, #1
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	429a      	cmp	r2, r3
 8001244:	dbf0      	blt.n	8001228 <recv_packet+0x28>
    }
    LoRA_data[packet_length] = '\0';
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	4413      	add	r3, r2
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]

    /*char rec[300];
    sprintf(rec, "received: %s\n", LoRA_data);
    CDC_Transmit_HS(rec, strlen(rec));*/
    return packet_length;
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	e000      	b.n	8001256 <recv_packet+0x56>
  }
  else{
    return 0;
 8001254:	2300      	movs	r3, #0
  }
}
 8001256:	4618      	mov	r0, r3
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	bd90      	pop	{r4, r7, pc}

0800125e <reliable_send_packet>:

void reliable_send_packet(char *LoRA_data) {
 800125e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001262:	b087      	sub	sp, #28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	466b      	mov	r3, sp
 800126a:	461e      	mov	r6, r3
	uint16_t length = strlen(LoRA_data) + 1; //+1 for the \0
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff f859 	bl	8000324 <strlen>
 8001272:	4603      	mov	r3, r0
 8001274:	b29b      	uxth	r3, r3
 8001276:	3301      	adds	r3, #1
 8001278:	827b      	strh	r3, [r7, #18]
	char acknowledge[length];
 800127a:	8a79      	ldrh	r1, [r7, #18]
 800127c:	460b      	mov	r3, r1
 800127e:	3b01      	subs	r3, #1
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	b28b      	uxth	r3, r1
 8001284:	2200      	movs	r2, #0
 8001286:	4698      	mov	r8, r3
 8001288:	4691      	mov	r9, r2
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	f04f 0300 	mov.w	r3, #0
 8001292:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001296:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800129a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800129e:	b28b      	uxth	r3, r1
 80012a0:	2200      	movs	r2, #0
 80012a2:	461c      	mov	r4, r3
 80012a4:	4615      	mov	r5, r2
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	f04f 0300 	mov.w	r3, #0
 80012ae:	00eb      	lsls	r3, r5, #3
 80012b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012b4:	00e2      	lsls	r2, r4, #3
 80012b6:	460b      	mov	r3, r1
 80012b8:	3307      	adds	r3, #7
 80012ba:	08db      	lsrs	r3, r3, #3
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	ebad 0d03 	sub.w	sp, sp, r3
 80012c2:	466b      	mov	r3, sp
 80012c4:	3300      	adds	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
	uint32_t lastTime = HAL_GetTick();
 80012c8:	f002 fb92 	bl	80039f0 <HAL_GetTick>
 80012cc:	6178      	str	r0, [r7, #20]
	LoRA_sendPacket(LoRA_data);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff fef0 	bl	80010b4 <LoRA_sendPacket>
	while (1) {

		if (recv_packet(acknowledge, length)) {
 80012d4:	8a7b      	ldrh	r3, [r7, #18]
 80012d6:	4619      	mov	r1, r3
 80012d8:	68b8      	ldr	r0, [r7, #8]
 80012da:	f7ff ff91 	bl	8001200 <recv_packet>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d009      	beq.n	80012f8 <reliable_send_packet+0x9a>
			//cehck crc
			if (strcmp(acknowledge, LoRA_data) != 0) {
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	68b8      	ldr	r0, [r7, #8]
 80012e8:	f7ff f812 	bl	8000310 <strcmp>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d011      	beq.n	8001316 <reliable_send_packet+0xb8>
				LoRA_sendPacket(LoRA_data);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff fede 	bl	80010b4 <LoRA_sendPacket>
			} else {
				break;
			}
		}

		if (HAL_GetTick() - lastTime > 1000) {
 80012f8:	f002 fb7a 	bl	80039f0 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001306:	d9e5      	bls.n	80012d4 <reliable_send_packet+0x76>
			LoRA_sendPacket(LoRA_data);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff fed3 	bl	80010b4 <LoRA_sendPacket>
			lastTime = HAL_GetTick();
 800130e:	f002 fb6f 	bl	80039f0 <HAL_GetTick>
 8001312:	6178      	str	r0, [r7, #20]
		if (recv_packet(acknowledge, length)) {
 8001314:	e7de      	b.n	80012d4 <reliable_send_packet+0x76>
				break;
 8001316:	bf00      	nop
 8001318:	46b5      	mov	sp, r6
		}
	}
}
 800131a:	bf00      	nop
 800131c:	371c      	adds	r7, #28
 800131e:	46bd      	mov	sp, r7
 8001320:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001324 <usbReceiveHandle>:

		reliable_send_packet(message);
	}
}

int usbReceiveHandle(char* output){
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	uint32_t temp = usbBytesReady;
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <usbReceiveHandle+0x38>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	60fb      	str	r3, [r7, #12]

	if(temp > 0){
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00c      	beq.n	8001352 <usbReceiveHandle+0x2e>
		if(temp > 256){
			//crash(2);
		}
		memcpy(output, usbDataBuffer, temp);
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	4909      	ldr	r1, [pc, #36]	; (8001360 <usbReceiveHandle+0x3c>)
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f015 fee7 	bl	8017110 <memcpy>
		output[temp] = '\0';
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4413      	add	r3, r2
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
		usbBytesReady = 0;
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <usbReceiveHandle+0x38>)
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
	}
	return temp;
 8001352:	68fb      	ldr	r3, [r7, #12]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	2400026c 	.word	0x2400026c
 8001360:	2400016c 	.word	0x2400016c
 8001364:	00000000 	.word	0x00000000

08001368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136a:	f6ad 4d14 	subw	sp, sp, #3092	; 0xc14
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8001370:	4bd7      	ldr	r3, [pc, #860]	; (80016d0 <main+0x368>)
 8001372:	f507 6439 	add.w	r4, r7, #2960	; 0xb90
 8001376:	461d      	mov	r5, r3
 8001378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800137a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800137c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001380:	c403      	stmia	r4!, {r0, r1}
 8001382:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001384:	f002 faae 	bl	80038e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001388:	f000 fb34 	bl	80019f4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800138c:	f000 fbaa 	bl	8001ae4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001390:	f001 f932 	bl	80025f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001394:	f001 f8d0 	bl	8002538 <MX_DMA_Init>
  MX_SPI3_Init();
 8001398:	f000 fe2a 	bl	8001ff0 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 800139c:	f000 fcba 	bl	8001d14 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 80013a0:	f001 f87e 	bl	80024a0 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80013a4:	f000 fbd0 	bl	8001b48 <MX_ADC1_Init>
  MX_TIM4_Init();
 80013a8:	f000 ff34 	bl	8002214 <MX_TIM4_Init>
  MX_ADC3_Init();
 80013ac:	f000 fc44 	bl	8001c38 <MX_ADC3_Init>
  MX_SPI2_Init();
 80013b0:	f000 fdc8 	bl	8001f44 <MX_SPI2_Init>
  MX_I2C2_Init();
 80013b4:	f000 fd12 	bl	8001ddc <MX_I2C2_Init>
  MX_TIM2_Init();
 80013b8:	f000 fe70 	bl	800209c <MX_TIM2_Init>
  MX_TIM5_Init();
 80013bc:	f000 ffa6 	bl	800230c <MX_TIM5_Init>
  MX_TIM3_Init();
 80013c0:	f000 fec4 	bl	800214c <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80013c4:	f015 f8f0 	bl	80165a8 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80013c8:	f000 fd66 	bl	8001e98 <MX_SPI1_Init>
  MX_UART4_Init();
 80013cc:	f001 f81c 	bl	8002408 <MX_UART4_Init>
  MX_FATFS_Init();
 80013d0:	f012 fe7e 	bl	80140d0 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 80013d4:	f000 fd42 	bl	8001e5c <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 80013d8:	f000 fff2 	bl	80023c0 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 80013dc:	2332      	movs	r3, #50	; 0x32
 80013de:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
	const double SPEED = 2.0/2000;
 80013e2:	a3b9      	add	r3, pc, #740	; (adr r3, 80016c8 <main+0x360>)
 80013e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e8:	f607 31e8 	addw	r1, r7, #3048	; 0xbe8
 80013ec:	e9c1 2300 	strd	r2, r3, [r1]
	const double r_offset = 0;
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	f04f 0300 	mov.w	r3, #0
 80013f8:	f507 613e 	add.w	r1, r7, #3040	; 0xbe0
 80013fc:	e9c1 2300 	strd	r2, r3, [r1]
	const double g_offset = 1;
 8001400:	f04f 0200 	mov.w	r2, #0
 8001404:	4bb3      	ldr	r3, [pc, #716]	; (80016d4 <main+0x36c>)
 8001406:	f607 31d8 	addw	r1, r7, #3032	; 0xbd8
 800140a:	e9c1 2300 	strd	r2, r3, [r1]
	const double b_offset = 2;
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001416:	f507 613d 	add.w	r1, r7, #3024	; 0xbd0
 800141a:	e9c1 2300 	strd	r2, r3, [r1]

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 800141e:	213c      	movs	r1, #60	; 0x3c
 8001420:	2010      	movs	r0, #16
 8001422:	f7ff f9af 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110000); //Gyroscope setup - CTRL2_G
 8001426:	2130      	movs	r1, #48	; 0x30
 8001428:	2011      	movs	r0, #17
 800142a:	f7ff f9ab 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 800142e:	2104      	movs	r1, #4
 8001430:	2013      	movs	r0, #19
 8001432:	f7ff f9a7 	bl	8000784 <LG2_Write_Register>

	HAL_Delay(3000);
 8001436:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800143a:	f002 fae5 	bl	8003a08 <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 800143e:	21bf      	movs	r1, #191	; 0xbf
 8001440:	201c      	movs	r0, #28
 8001442:	f7ff f94b 	bl	80006dc <HG2_Write_Register>
	HAL_Delay(2);
 8001446:	2002      	movs	r0, #2
 8001448:	f002 fade 	bl	8003a08 <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 800144c:	2158      	movs	r1, #88	; 0x58
 800144e:	201b      	movs	r0, #27
 8001450:	f7ff f944 	bl	80006dc <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 8001454:	21d8      	movs	r1, #216	; 0xd8
 8001456:	201b      	movs	r0, #27
 8001458:	f7ff f940 	bl	80006dc <HG2_Write_Register>

	float rotZ = 0;
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	f607 32cc 	addw	r2, r7, #3020	; 0xbcc
 8001464:	6013      	str	r3, [r2, #0]
	uint32_t lastTime = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 3c0c 	str.w	r3, [r7, #3084]	; 0xc0c

	float calOmegaX = 0;
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	f607 4208 	addw	r2, r7, #3080	; 0xc08
 8001474:	6013      	str	r3, [r2, #0]
	float calOmegaY = 0;
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	f607 4204 	addw	r2, r7, #3076	; 0xc04
 800147e:	6013      	str	r3, [r2, #0]
	float calOmegaZ = 0;
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	f507 6240 	add.w	r2, r7, #3072	; 0xc00
 8001488:	6013      	str	r3, [r2, #0]
	//HAL_Delay(2000);
	for(int i = 0; i < 500; i++){
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 3bfc 	str.w	r3, [r7, #3068]	; 0xbfc
 8001490:	e02e      	b.n	80014f0 <main+0x188>
		calOmegaX += LG2_Get_Gyro_X();
 8001492:	f7ff f99f 	bl	80007d4 <LG2_Get_Gyro_X>
 8001496:	eeb0 7a40 	vmov.f32	s14, s0
 800149a:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014a6:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 80014aa:	edc3 7a00 	vstr	s15, [r3]
		calOmegaY += LG2_Get_Gyro_Y();
 80014ae:	f7ff f9c1 	bl	8000834 <LG2_Get_Gyro_Y>
 80014b2:	eeb0 7a40 	vmov.f32	s14, s0
 80014b6:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 80014ba:	edd3 7a00 	vldr	s15, [r3]
 80014be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014c2:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 80014c6:	edc3 7a00 	vstr	s15, [r3]
		calOmegaZ += LG2_Get_Gyro_Z();
 80014ca:	f7ff f9e5 	bl	8000898 <LG2_Get_Gyro_Z>
 80014ce:	eeb0 7a40 	vmov.f32	s14, s0
 80014d2:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80014d6:	edd3 7a00 	vldr	s15, [r3]
 80014da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014de:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80014e2:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 500; i++){
 80014e6:	f8d7 3bfc 	ldr.w	r3, [r7, #3068]	; 0xbfc
 80014ea:	3301      	adds	r3, #1
 80014ec:	f8c7 3bfc 	str.w	r3, [r7, #3068]	; 0xbfc
 80014f0:	f8d7 3bfc 	ldr.w	r3, [r7, #3068]	; 0xbfc
 80014f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014f8:	dbcb      	blt.n	8001492 <main+0x12a>

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 80014fa:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 80014fe:	ed93 7a00 	vldr	s14, [r3]
 8001502:	eddf 6a75 	vldr	s13, [pc, #468]	; 80016d8 <main+0x370>
 8001506:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800150a:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 800150e:	edc3 7a00 	vstr	s15, [r3]
	calOmegaY /= 500;
 8001512:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8001516:	ed93 7a00 	vldr	s14, [r3]
 800151a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80016d8 <main+0x370>
 800151e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001522:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8001526:	edc3 7a00 	vstr	s15, [r3]
	calOmegaZ /= 500;
 800152a:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 800152e:	ed93 7a00 	vldr	s14, [r3]
 8001532:	eddf 6a69 	vldr	s13, [pc, #420]	; 80016d8 <main+0x370>
 8001536:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800153a:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 800153e:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001542:	2201      	movs	r2, #1
 8001544:	2101      	movs	r1, #1
 8001546:	4865      	ldr	r0, [pc, #404]	; (80016dc <main+0x374>)
 8001548:	f006 fd10 	bl	8007f6c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800154c:	20c8      	movs	r0, #200	; 0xc8
 800154e:	f002 fa5b 	bl	8003a08 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2101      	movs	r1, #1
 8001556:	4861      	ldr	r0, [pc, #388]	; (80016dc <main+0x374>)
 8001558:	f006 fd08 	bl	8007f6c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800155c:	20c8      	movs	r0, #200	; 0xc8
 800155e:	f002 fa53 	bl	8003a08 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001562:	2201      	movs	r2, #1
 8001564:	2101      	movs	r1, #1
 8001566:	485d      	ldr	r0, [pc, #372]	; (80016dc <main+0x374>)
 8001568:	f006 fd00 	bl	8007f6c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800156c:	20c8      	movs	r0, #200	; 0xc8
 800156e:	f002 fa4b 	bl	8003a08 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 8001572:	2201      	movs	r2, #1
 8001574:	2104      	movs	r1, #4
 8001576:	485a      	ldr	r0, [pc, #360]	; (80016e0 <main+0x378>)
 8001578:	f006 fcf8 	bl	8007f6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 800157c:	2201      	movs	r2, #1
 800157e:	2108      	movs	r1, #8
 8001580:	4857      	ldr	r0, [pc, #348]	; (80016e0 <main+0x378>)
 8001582:	f006 fcf3 	bl	8007f6c <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001586:	2100      	movs	r1, #0
 8001588:	4856      	ldr	r0, [pc, #344]	; (80016e4 <main+0x37c>)
 800158a:	f00d ffaf 	bl	800f4ec <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800158e:	2104      	movs	r1, #4
 8001590:	4854      	ldr	r0, [pc, #336]	; (80016e4 <main+0x37c>)
 8001592:	f00d ffab 	bl	800f4ec <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001596:	2108      	movs	r1, #8
 8001598:	4852      	ldr	r0, [pc, #328]	; (80016e4 <main+0x37c>)
 800159a:	f00d ffa7 	bl	800f4ec <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800159e:	210c      	movs	r1, #12
 80015a0:	4850      	ldr	r0, [pc, #320]	; (80016e4 <main+0x37c>)
 80015a2:	f00d ffa3 	bl	800f4ec <HAL_TIM_PWM_Start>

    setServo(1, 90);
 80015a6:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80016e8 <main+0x380>
 80015aa:	2001      	movs	r0, #1
 80015ac:	f7ff f9ac 	bl	8000908 <setServo>
    setServo(2, 180);
 80015b0:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80016ec <main+0x384>
 80015b4:	2002      	movs	r0, #2
 80015b6:	f7ff f9a7 	bl	8000908 <setServo>
    setServo(3, 0);
 80015ba:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80016f0 <main+0x388>
 80015be:	2003      	movs	r0, #3
 80015c0:	f7ff f9a2 	bl	8000908 <setServo>
    setServo(4, 45);
 80015c4:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 80016f4 <main+0x38c>
 80015c8:	2004      	movs	r0, #4
 80015ca:	f7ff f99d 	bl	8000908 <setServo>
//    				}
//    			}
//    		}
//    	}
//    	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
	  LoRA_begin(868000000);
 80015ce:	484a      	ldr	r0, [pc, #296]	; (80016f8 <main+0x390>)
 80015d0:	f7ff fcb4 	bl	8000f3c <LoRA_begin>
		LoRA_sendPacket("whatever");
		HAL_Delay(1000);
	}
*/

	int connected = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f8c7 3bc8 	str.w	r3, [r7, #3016]	; 0xbc8
	long last_packet = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	f8c7 3bc4 	str.w	r3, [r7, #3012]	; 0xbc4
	int ARMED = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f8c7 3bc0 	str.w	r3, [r7, #3008]	; 0xbc0

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);

  int max_packet_count = 0;
 80015e6:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80015ea:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
  int stream_counter = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f8c7 3bbc 	str.w	r3, [r7, #3004]	; 0xbbc
  char state[MAX_PAYLOAD_LENGHT] = "";
 80015f8:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80015fc:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	3304      	adds	r3, #4
 8001606:	22f6      	movs	r2, #246	; 0xf6
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f015 fd44 	bl	8017098 <memset>
  char acknowledge[MAX_PAYLOAD_LENGHT];
  char previous_packet[MAX_PAYLOAD_LENGHT];
  char recieved_packet[MAX_PAYLOAD_LENGHT];
  char response_packet[MAX_PAYLOAD_LENGHT];
  char sendMessage[MAX_PAYLOAD_LENGHT];
  int last = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	f8c7 3bb8 	str.w	r3, [r7, #3000]	; 0xbb8
  int packets_streamed = 50;
 8001616:	2332      	movs	r3, #50	; 0x32
 8001618:	f8c7 3bb4 	str.w	r3, [r7, #2996]	; 0xbb4
  int packetId;
  int have_recieved_anything = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
  char communication_state[50] = "SENDING RELIABLE";
 8001622:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001626:	f5a3 6620 	sub.w	r6, r3, #2560	; 0xa00
 800162a:	4b34      	ldr	r3, [pc, #208]	; (80016fc <main+0x394>)
 800162c:	4634      	mov	r4, r6
 800162e:	461d      	mov	r5, r3
 8001630:	6828      	ldr	r0, [r5, #0]
 8001632:	6869      	ldr	r1, [r5, #4]
 8001634:	68aa      	ldr	r2, [r5, #8]
 8001636:	68eb      	ldr	r3, [r5, #12]
 8001638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800163a:	7c2b      	ldrb	r3, [r5, #16]
 800163c:	7023      	strb	r3, [r4, #0]
 800163e:	f106 0311 	add.w	r3, r6, #17
 8001642:	2221      	movs	r2, #33	; 0x21
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f015 fd26 	bl	8017098 <memset>
  uint32_t previousTime = HAL_GetTick();
 800164c:	f002 f9d0 	bl	80039f0 <HAL_GetTick>
 8001650:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
  disarm(state);
 8001654:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fd6d 	bl	8001138 <disarm>
  LoRA_begin(868000000);
 800165e:	4826      	ldr	r0, [pc, #152]	; (80016f8 <main+0x390>)
 8001660:	f7ff fc6c 	bl	8000f3c <LoRA_begin>
	sprintf(debug, "Debug: %s\n", input);
	CDC_Transmit_HS(debug, strlen(debug));
  }*/

while (1) {
    if(strcmp(communication_state,"RECEIVING RELIABLE") == 0)
 8001664:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001668:	4925      	ldr	r1, [pc, #148]	; (8001700 <main+0x398>)
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe fe50 	bl	8000310 <strcmp>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	f040 809c 	bne.w	80017b0 <main+0x448>
    {
      if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 8001678:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800167c:	21fa      	movs	r1, #250	; 0xfa
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fdbe 	bl	8001200 <recv_packet>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 8080 	beq.w	800178c <main+0x424>
      {
    	  have_recieved_anything = 1;
 800168c:	2301      	movs	r3, #1
 800168e:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        previousTime = HAL_GetTick();
 8001692:	f002 f9ad 	bl	80039f0 <HAL_GetTick>
 8001696:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //HAL_Delay(100);
        //CDC_Transmit_HS("is arm 0succ\n", strlen("is arm 0succ\n"));
        //HAL_Delay(100);
        if(sscanf(recieved_packet, "$ %s", state) == 1)
 800169a:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 800169e:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80016a2:	4918      	ldr	r1, [pc, #96]	; (8001704 <main+0x39c>)
 80016a4:	4618      	mov	r0, r3
 80016a6:	f015 fcc9 	bl	801703c <siscanf>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d12b      	bne.n	8001708 <main+0x3a0>
        {
          strcpy(communication_state,"SENDING RELIABLE");
 80016b0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80016b4:	4a11      	ldr	r2, [pc, #68]	; (80016fc <main+0x394>)
 80016b6:	461c      	mov	r4, r3
 80016b8:	4615      	mov	r5, r2
 80016ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016be:	682b      	ldr	r3, [r5, #0]
 80016c0:	7023      	strb	r3, [r4, #0]
 80016c2:	e16a      	b.n	800199a <main+0x632>
 80016c4:	f3af 8000 	nop.w
 80016c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80016cc:	3f50624d 	.word	0x3f50624d
 80016d0:	080183c4 	.word	0x080183c4
 80016d4:	3ff00000 	.word	0x3ff00000
 80016d8:	43fa0000 	.word	0x43fa0000
 80016dc:	58020c00 	.word	0x58020c00
 80016e0:	58021800 	.word	0x58021800
 80016e4:	24001168 	.word	0x24001168
 80016e8:	42b40000 	.word	0x42b40000
 80016ec:	43340000 	.word	0x43340000
 80016f0:	00000000 	.word	0x00000000
 80016f4:	42340000 	.word	0x42340000
 80016f8:	33bca100 	.word	0x33bca100
 80016fc:	0801834c 	.word	0x0801834c
 8001700:	08018330 	.word	0x08018330
 8001704:	08018344 	.word	0x08018344
        }
        else if(sscanf(recieved_packet, "! %d", &max_packet_count) == 1)
 8001708:	f607 1228 	addw	r2, r7, #2344	; 0x928
 800170c:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001710:	49ad      	ldr	r1, [pc, #692]	; (80019c8 <main+0x660>)
 8001712:	4618      	mov	r0, r3
 8001714:	f015 fc92 	bl	801703c <siscanf>
 8001718:	4603      	mov	r3, r0
 800171a:	2b01      	cmp	r3, #1
 800171c:	d10b      	bne.n	8001736 <main+0x3ce>
        {
          strcpy(communication_state,"SENDING STREAM");
 800171e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001722:	4aaa      	ldr	r2, [pc, #680]	; (80019cc <main+0x664>)
 8001724:	461c      	mov	r4, r3
 8001726:	4613      	mov	r3, r2
 8001728:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800172a:	c407      	stmia	r4!, {r0, r1, r2}
 800172c:	8023      	strh	r3, [r4, #0]
 800172e:	3402      	adds	r4, #2
 8001730:	0c1b      	lsrs	r3, r3, #16
 8001732:	7023      	strb	r3, [r4, #0]
 8001734:	e131      	b.n	800199a <main+0x632>
        }
        else if(strcmp(recieved_packet, previous_packet)==0)
 8001736:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 800173a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800173e:	4611      	mov	r1, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe fde5 	bl	8000310 <strcmp>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d105      	bne.n	8001758 <main+0x3f0>
        {
          //send acknowledge again
          LoRA_sendPacket(recieved_packet);
 800174c:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fcaf 	bl	80010b4 <LoRA_sendPacket>
 8001756:	e120      	b.n	800199a <main+0x632>
        }
        else
        {
          //CDC_Transmit_HS("is arm 1succ\n", strlen("is arm 1succ\n"));
          //HAL_Delay(100);
          strcpy(previous_packet, recieved_packet);
 8001758:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 800175c:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8001760:	4611      	mov	r1, r2
 8001762:	4618      	mov	r0, r3
 8001764:	f015 fccc 	bl	8017100 <strcpy>
          //HAL_Delay(100);
          LoRA_sendPacket(recieved_packet);
 8001768:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fca1 	bl	80010b4 <LoRA_sendPacket>
          //HAL_Delay(100);
          CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 8001772:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fdd4 	bl	8000324 <strlen>
 800177c:	4602      	mov	r2, r0
 800177e:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001782:	4611      	mov	r1, r2
 8001784:	4618      	mov	r0, r3
 8001786:	f014 ffe5 	bl	8016754 <CDC_Transmit_HS>
 800178a:	e106      	b.n	800199a <main+0x632>
        }
      } else if (HAL_GetTick()-previousTime > 1000)
 800178c:	f002 f930 	bl	80039f0 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	f8d7 3bf8 	ldr.w	r3, [r7, #3064]	; 0xbf8
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800179c:	f240 80fd 	bls.w	800199a <main+0x632>
      /*else if((!have_recieved_anything && HAL_GetTick()-previousTime > 1000) ||
    		  (have_recieved_anything && HAL_GetTick()-previousTime > 5000))*/
      {
        previousTime = HAL_GetTick();
 80017a0:	f002 f926 	bl	80039f0 <HAL_GetTick>
 80017a4:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //give up SENDING
        //HAL_Delay(100);
        LoRA_sendPacket("$");
 80017a8:	4889      	ldr	r0, [pc, #548]	; (80019d0 <main+0x668>)
 80017aa:	f7ff fc83 	bl	80010b4 <LoRA_sendPacket>
 80017ae:	e0f4      	b.n	800199a <main+0x632>
      }
    }
    else if(strcmp(communication_state,"RECEIVING STREAM") == 0)
 80017b0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80017b4:	4987      	ldr	r1, [pc, #540]	; (80019d4 <main+0x66c>)
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe fdaa 	bl	8000310 <strcmp>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d14a      	bne.n	8001858 <main+0x4f0>
    {
      if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 80017c2:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017c6:	21fa      	movs	r1, #250	; 0xfa
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fd19 	bl	8001200 <recv_packet>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d025      	beq.n	8001820 <main+0x4b8>
      {
        previousTime = HAL_GetTick();
 80017d4:	f002 f90c 	bl	80039f0 <HAL_GetTick>
 80017d8:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        if(sscanf(recieved_packet, "$ %s", state) == 1)
 80017dc:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 80017e0:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017e4:	497c      	ldr	r1, [pc, #496]	; (80019d8 <main+0x670>)
 80017e6:	4618      	mov	r0, r3
 80017e8:	f015 fc28 	bl	801703c <siscanf>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d109      	bne.n	8001806 <main+0x49e>
        {
          strcpy(communication_state,"SENDING RELIABLE");
 80017f2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80017f6:	4a79      	ldr	r2, [pc, #484]	; (80019dc <main+0x674>)
 80017f8:	461c      	mov	r4, r3
 80017fa:	4615      	mov	r5, r2
 80017fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001800:	682b      	ldr	r3, [r5, #0]
 8001802:	7023      	strb	r3, [r4, #0]
 8001804:	e0c9      	b.n	800199a <main+0x632>
        }
        else
        {
          CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 8001806:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe fd8a 	bl	8000324 <strlen>
 8001810:	4602      	mov	r2, r0
 8001812:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f014 ff9b 	bl	8016754 <CDC_Transmit_HS>
 800181e:	e0bc      	b.n	800199a <main+0x632>
        }
      }
      else if(HAL_GetTick()-previousTime > 1000)
 8001820:	f002 f8e6 	bl	80039f0 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	f8d7 3bf8 	ldr.w	r3, [r7, #3064]	; 0xbf8
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001830:	f240 80b3 	bls.w	800199a <main+0x632>
      {
        previousTime = HAL_GetTick();
 8001834:	f002 f8dc 	bl	80039f0 <HAL_GetTick>
 8001838:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //give up SENDING
        sprintf(sendMessage, "! %d", packets_streamed);
 800183c:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001840:	f8d7 2bb4 	ldr.w	r2, [r7, #2996]	; 0xbb4
 8001844:	4960      	ldr	r1, [pc, #384]	; (80019c8 <main+0x660>)
 8001846:	4618      	mov	r0, r3
 8001848:	f015 fbd8 	bl	8016ffc <siprintf>
        LoRA_sendPacket(sendMessage);
 800184c:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fc2f 	bl	80010b4 <LoRA_sendPacket>
 8001856:	e0a0      	b.n	800199a <main+0x632>
      }
    }
    else if(strcmp(communication_state,"SENDING STREAM") == 0)
 8001858:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800185c:	495b      	ldr	r1, [pc, #364]	; (80019cc <main+0x664>)
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fd56 	bl	8000310 <strcmp>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d126      	bne.n	80018b8 <main+0x550>
    {
      if(max_packet_count == 0)
 800186a:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800186e:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d113      	bne.n	80018a0 <main+0x538>
      {
        strcpy(communication_state,"RECEIVING RELIABLE");
 8001878:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800187c:	4a58      	ldr	r2, [pc, #352]	; (80019e0 <main+0x678>)
 800187e:	461c      	mov	r4, r3
 8001880:	4615      	mov	r5, r2
 8001882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001886:	682b      	ldr	r3, [r5, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	8022      	strh	r2, [r4, #0]
 800188c:	3402      	adds	r4, #2
 800188e:	0c1b      	lsrs	r3, r3, #16
 8001890:	7023      	strb	r3, [r4, #0]
        have_recieved_anything = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        LoRA_sendPacket("$");
 8001898:	484d      	ldr	r0, [pc, #308]	; (80019d0 <main+0x668>)
 800189a:	f7ff fc0b 	bl	80010b4 <LoRA_sendPacket>
 800189e:	e07c      	b.n	800199a <main+0x632>
      }
      else
      {
        //send whatever
        max_packet_count--;
 80018a0:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80018a4:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	1e5a      	subs	r2, r3, #1
 80018ac:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80018b0:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	e070      	b.n	800199a <main+0x632>
      }

    }
    else if(strcmp(communication_state,"SENDING RELIABLE") == 0)
 80018b8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80018bc:	4947      	ldr	r1, [pc, #284]	; (80019dc <main+0x674>)
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fd26 	bl	8000310 <strcmp>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d167      	bne.n	800199a <main+0x632>
    {
    	sprintf(response_packet, "\nState of other board: %s", state);
 80018ca:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 80018ce:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80018d2:	4944      	ldr	r1, [pc, #272]	; (80019e4 <main+0x67c>)
 80018d4:	4618      	mov	r0, r3
 80018d6:	f015 fb91 	bl	8016ffc <siprintf>
	  	CDC_Transmit_HS(response_packet, strlen(response_packet));
 80018da:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fd20 	bl	8000324 <strlen>
 80018e4:	4602      	mov	r2, r0
 80018e6:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80018ea:	4611      	mov	r1, r2
 80018ec:	4618      	mov	r0, r3
 80018ee:	f014 ff31 	bl	8016754 <CDC_Transmit_HS>

    	//get input
    	char input[usbBufferLen];
    	//usbReceiveHandle(input);

    	while(!usbReceiveHandle(input))
 80018f2:	bf00      	nop
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fd14 	bl	8001324 <usbReceiveHandle>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0f8      	beq.n	80018f4 <main+0x58c>
    	{}

      reliable_send_packet(input);
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fcaa 	bl	800125e <reliable_send_packet>

	  	char debug[usbBufferLen+10];
	  	sprintf(debug, "\nEntered: %s\n", input);
 800190a:	1d3a      	adds	r2, r7, #4
 800190c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001910:	4935      	ldr	r1, [pc, #212]	; (80019e8 <main+0x680>)
 8001912:	4618      	mov	r0, r3
 8001914:	f015 fb72 	bl	8016ffc <siprintf>
	  	CDC_Transmit_HS(debug, strlen(debug));
 8001918:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fd01 	bl	8000324 <strlen>
 8001922:	4602      	mov	r2, r0
 8001924:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001928:	4611      	mov	r1, r2
 800192a:	4618      	mov	r0, r3
 800192c:	f014 ff12 	bl	8016754 <CDC_Transmit_HS>

      if(strcmp(input,"FIRE")==0)
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	492e      	ldr	r1, [pc, #184]	; (80019ec <main+0x684>)
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fceb 	bl	8000310 <strcmp>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d116      	bne.n	800196e <main+0x606>
      {
        strcpy(communication_state,"RECEIVING STREAM");
 8001940:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001944:	4a23      	ldr	r2, [pc, #140]	; (80019d4 <main+0x66c>)
 8001946:	461c      	mov	r4, r3
 8001948:	4615      	mov	r5, r2
 800194a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800194c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800194e:	682b      	ldr	r3, [r5, #0]
 8001950:	7023      	strb	r3, [r4, #0]
        sprintf(sendMessage, "! %d", packets_streamed);
 8001952:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001956:	f8d7 2bb4 	ldr.w	r2, [r7, #2996]	; 0xbb4
 800195a:	491b      	ldr	r1, [pc, #108]	; (80019c8 <main+0x660>)
 800195c:	4618      	mov	r0, r3
 800195e:	f015 fb4d 	bl	8016ffc <siprintf>
        LoRA_sendPacket(sendMessage);
 8001962:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fba4 	bl	80010b4 <LoRA_sendPacket>
 800196c:	e015      	b.n	800199a <main+0x632>
      }
      else
      {
        strcpy(communication_state,"RECEIVING RELIABLE");
 800196e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001972:	4a1b      	ldr	r2, [pc, #108]	; (80019e0 <main+0x678>)
 8001974:	461c      	mov	r4, r3
 8001976:	4615      	mov	r5, r2
 8001978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800197a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800197c:	682b      	ldr	r3, [r5, #0]
 800197e:	461a      	mov	r2, r3
 8001980:	8022      	strh	r2, [r4, #0]
 8001982:	3402      	adds	r4, #2
 8001984:	0c1b      	lsrs	r3, r3, #16
 8001986:	7023      	strb	r3, [r4, #0]
        have_recieved_anything = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        HAL_Delay(100);
 800198e:	2064      	movs	r0, #100	; 0x64
 8001990:	f002 f83a 	bl	8003a08 <HAL_Delay>
        LoRA_sendPacket("$");
 8001994:	480e      	ldr	r0, [pc, #56]	; (80019d0 <main+0x668>)
 8001996:	f7ff fb8d 	bl	80010b4 <LoRA_sendPacket>
//			LED_Color_Data[i][0] = (uint32_t)MAX*triangle_space(color_offset+r_offset);
//			LED_Color_Data[i][1] = (uint32_t)MAX*triangle_space(color_offset+g_offset);
//			LED_Color_Data[i][2] = (uint32_t)MAX*triangle_space(color_offset+b_offset);
//		}

		float timeElapsed = ((float)(HAL_GetTick() - lastTime)) / 1000;
 800199a:	f002 f829 	bl	80039f0 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	f8d7 3c0c 	ldr.w	r3, [r7, #3084]	; 0xc0c
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	ee07 3a90 	vmov	s15, r3
 80019aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019ae:	eddf 6a10 	vldr	s13, [pc, #64]	; 80019f0 <main+0x688>
 80019b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019b6:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 80019ba:	edc3 7a00 	vstr	s15, [r3]

		//float GyroX = LG2_Get_Gyro_X() - calOmegaX;
		//float GyroY = LG2_Get_Gyro_Y() - calOmegaY;
		//float GyroZ = LG2_Get_Gyro_Z() - calOmegaZ;

		lastTime = HAL_GetTick();
 80019be:	f002 f817 	bl	80039f0 <HAL_GetTick>
 80019c2:	f8c7 0c0c 	str.w	r0, [r7, #3084]	; 0xc0c
while (1) {
 80019c6:	e64d      	b.n	8001664 <main+0x2fc>
 80019c8:	08018360 	.word	0x08018360
 80019cc:	08018368 	.word	0x08018368
 80019d0:	08018378 	.word	0x08018378
 80019d4:	0801837c 	.word	0x0801837c
 80019d8:	08018344 	.word	0x08018344
 80019dc:	0801834c 	.word	0x0801834c
 80019e0:	08018330 	.word	0x08018330
 80019e4:	08018390 	.word	0x08018390
 80019e8:	080183ac 	.word	0x080183ac
 80019ec:	080183bc 	.word	0x080183bc
 80019f0:	447a0000 	.word	0x447a0000

080019f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b09c      	sub	sp, #112	; 0x70
 80019f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fe:	224c      	movs	r2, #76	; 0x4c
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f015 fb48 	bl	8017098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f015 fb42 	bl	8017098 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001a14:	2002      	movs	r0, #2
 8001a16:	f007 febd 	bl	8009794 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	603b      	str	r3, [r7, #0]
 8001a1e:	4b30      	ldr	r3, [pc, #192]	; (8001ae0 <SystemClock_Config+0xec>)
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a26:	4a2e      	ldr	r2, [pc, #184]	; (8001ae0 <SystemClock_Config+0xec>)
 8001a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a2c:	6193      	str	r3, [r2, #24]
 8001a2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ae0 <SystemClock_Config+0xec>)
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001a3a:	bf00      	nop
 8001a3c:	4b28      	ldr	r3, [pc, #160]	; (8001ae0 <SystemClock_Config+0xec>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a48:	d1f8      	bne.n	8001a3c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001a4a:	2322      	movs	r3, #34	; 0x22
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001a52:	2340      	movs	r3, #64	; 0x40
 8001a54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001a56:	2301      	movs	r3, #1
 8001a58:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a62:	2304      	movs	r3, #4
 8001a64:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001a66:	230c      	movs	r3, #12
 8001a68:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8001a6e:	230c      	movs	r3, #12
 8001a70:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a72:	2302      	movs	r3, #2
 8001a74:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001a76:	230c      	movs	r3, #12
 8001a78:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a86:	4618      	mov	r0, r3
 8001a88:	f007 fece 	bl	8009828 <HAL_RCC_OscConfig>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001a92:	f000 ff1b 	bl	80028cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a96:	233f      	movs	r3, #63	; 0x3f
 8001a98:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001aa2:	2308      	movs	r3, #8
 8001aa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001aa6:	2340      	movs	r3, #64	; 0x40
 8001aa8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001aaa:	2340      	movs	r3, #64	; 0x40
 8001aac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ab2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001ab4:	2340      	movs	r3, #64	; 0x40
 8001ab6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	2101      	movs	r1, #1
 8001abc:	4618      	mov	r0, r3
 8001abe:	f008 fa8d 	bl	8009fdc <HAL_RCC_ClockConfig>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001ac8:	f000 ff00 	bl	80028cc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001acc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f008 fc38 	bl	800a348 <HAL_RCC_MCOConfig>
}
 8001ad8:	bf00      	nop
 8001ada:	3770      	adds	r7, #112	; 0x70
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	58024800 	.word	0x58024800

08001ae4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b0ae      	sub	sp, #184	; 0xb8
 8001ae8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aea:	463b      	mov	r3, r7
 8001aec:	22b8      	movs	r2, #184	; 0xb8
 8001aee:	2100      	movs	r1, #0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f015 fad1 	bl	8017098 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8001af6:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001b02:	2304      	movs	r3, #4
 8001b04:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001b06:	230c      	movs	r3, #12
 8001b08:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001b12:	2302      	movs	r3, #2
 8001b14:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001b16:	23c0      	movs	r3, #192	; 0xc0
 8001b18:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b26:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b2e:	463b      	mov	r3, r7
 8001b30:	4618      	mov	r0, r3
 8001b32:	f008 fe49 	bl	800a7c8 <HAL_RCCEx_PeriphCLKConfig>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001b3c:	f000 fec6 	bl	80028cc <Error_Handler>
  }
}
 8001b40:	bf00      	nop
 8001b42:	37b8      	adds	r7, #184	; 0xb8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08c      	sub	sp, #48	; 0x30
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b5a:	463b      	mov	r3, r7
 8001b5c:	2224      	movs	r2, #36	; 0x24
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4618      	mov	r0, r3
 8001b62:	f015 fa99 	bl	8017098 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b66:	4b31      	ldr	r3, [pc, #196]	; (8001c2c <MX_ADC1_Init+0xe4>)
 8001b68:	4a31      	ldr	r2, [pc, #196]	; (8001c30 <MX_ADC1_Init+0xe8>)
 8001b6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001b6c:	4b2f      	ldr	r3, [pc, #188]	; (8001c2c <MX_ADC1_Init+0xe4>)
 8001b6e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001b72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001b74:	4b2d      	ldr	r3, [pc, #180]	; (8001c2c <MX_ADC1_Init+0xe4>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b7a:	4b2c      	ldr	r3, [pc, #176]	; (8001c2c <MX_ADC1_Init+0xe4>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b80:	4b2a      	ldr	r3, [pc, #168]	; (8001c2c <MX_ADC1_Init+0xe4>)
 8001b82:	2204      	movs	r2, #4
 8001b84:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b86:	4b29      	ldr	r3, [pc, #164]	; (8001c2c <MX_ADC1_Init+0xe4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b8c:	4b27      	ldr	r3, [pc, #156]	; (8001c2c <MX_ADC1_Init+0xe4>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001b92:	4b26      	ldr	r3, [pc, #152]	; (8001c2c <MX_ADC1_Init+0xe4>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b98:	4b24      	ldr	r3, [pc, #144]	; (8001c2c <MX_ADC1_Init+0xe4>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ba0:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <MX_ADC1_Init+0xe4>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ba6:	4b21      	ldr	r3, [pc, #132]	; (8001c2c <MX_ADC1_Init+0xe4>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001bac:	4b1f      	ldr	r3, [pc, #124]	; (8001c2c <MX_ADC1_Init+0xe4>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	; (8001c2c <MX_ADC1_Init+0xe4>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001bb8:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <MX_ADC1_Init+0xe4>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001bbe:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <MX_ADC1_Init+0xe4>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bc6:	4819      	ldr	r0, [pc, #100]	; (8001c2c <MX_ADC1_Init+0xe4>)
 8001bc8:	f002 f99e 	bl	8003f08 <HAL_ADC_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001bd2:	f000 fe7b 	bl	80028cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bde:	4619      	mov	r1, r3
 8001be0:	4812      	ldr	r0, [pc, #72]	; (8001c2c <MX_ADC1_Init+0xe4>)
 8001be2:	f003 f9d9 	bl	8004f98 <HAL_ADCEx_MultiModeConfigChannel>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001bec:	f000 fe6e 	bl	80028cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001bf0:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <MX_ADC1_Init+0xec>)
 8001bf2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bf4:	2306      	movs	r3, #6
 8001bf6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001bfc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001c00:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c02:	2304      	movs	r3, #4
 8001c04:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c10:	463b      	mov	r3, r7
 8001c12:	4619      	mov	r1, r3
 8001c14:	4805      	ldr	r0, [pc, #20]	; (8001c2c <MX_ADC1_Init+0xe4>)
 8001c16:	f002 fb7f 	bl	8004318 <HAL_ADC_ConfigChannel>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001c20:	f000 fe54 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c24:	bf00      	nop
 8001c26:	3730      	adds	r7, #48	; 0x30
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	24000bf8 	.word	0x24000bf8
 8001c30:	40022000 	.word	0x40022000
 8001c34:	2a000400 	.word	0x2a000400

08001c38 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08a      	sub	sp, #40	; 0x28
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	2224      	movs	r2, #36	; 0x24
 8001c42:	2100      	movs	r1, #0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f015 fa27 	bl	8017098 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001c4a:	4b2f      	ldr	r3, [pc, #188]	; (8001d08 <MX_ADC3_Init+0xd0>)
 8001c4c:	4a2f      	ldr	r2, [pc, #188]	; (8001d0c <MX_ADC3_Init+0xd4>)
 8001c4e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001c50:	4b2d      	ldr	r3, [pc, #180]	; (8001d08 <MX_ADC3_Init+0xd0>)
 8001c52:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001c56:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001c58:	4b2b      	ldr	r3, [pc, #172]	; (8001d08 <MX_ADC3_Init+0xd0>)
 8001c5a:	2208      	movs	r2, #8
 8001c5c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001c5e:	4b2a      	ldr	r3, [pc, #168]	; (8001d08 <MX_ADC3_Init+0xd0>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c64:	4b28      	ldr	r3, [pc, #160]	; (8001d08 <MX_ADC3_Init+0xd0>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c6a:	4b27      	ldr	r3, [pc, #156]	; (8001d08 <MX_ADC3_Init+0xd0>)
 8001c6c:	2204      	movs	r2, #4
 8001c6e:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001c70:	4b25      	ldr	r3, [pc, #148]	; (8001d08 <MX_ADC3_Init+0xd0>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001c76:	4b24      	ldr	r3, [pc, #144]	; (8001d08 <MX_ADC3_Init+0xd0>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001c7c:	4b22      	ldr	r3, [pc, #136]	; (8001d08 <MX_ADC3_Init+0xd0>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001c82:	4b21      	ldr	r3, [pc, #132]	; (8001d08 <MX_ADC3_Init+0xd0>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c8a:	4b1f      	ldr	r3, [pc, #124]	; (8001d08 <MX_ADC3_Init+0xd0>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c90:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <MX_ADC3_Init+0xd0>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001c96:	4b1c      	ldr	r3, [pc, #112]	; (8001d08 <MX_ADC3_Init+0xd0>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001c9e:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <MX_ADC3_Init+0xd0>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001ca4:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <MX_ADC3_Init+0xd0>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001caa:	4b17      	ldr	r3, [pc, #92]	; (8001d08 <MX_ADC3_Init+0xd0>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001cb0:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <MX_ADC3_Init+0xd0>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001cb6:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <MX_ADC3_Init+0xd0>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001cbe:	4812      	ldr	r0, [pc, #72]	; (8001d08 <MX_ADC3_Init+0xd0>)
 8001cc0:	f002 f922 	bl	8003f08 <HAL_ADC_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001cca:	f000 fdff 	bl	80028cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <MX_ADC3_Init+0xd8>)
 8001cd0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cd2:	2306      	movs	r3, #6
 8001cd4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001cda:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001cde:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001cec:	1d3b      	adds	r3, r7, #4
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4805      	ldr	r0, [pc, #20]	; (8001d08 <MX_ADC3_Init+0xd0>)
 8001cf2:	f002 fb11 	bl	8004318 <HAL_ADC_ConfigChannel>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001cfc:	f000 fde6 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001d00:	bf00      	nop
 8001d02:	3728      	adds	r7, #40	; 0x28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	24000c68 	.word	0x24000c68
 8001d0c:	58026000 	.word	0x58026000
 8001d10:	04300002 	.word	0x04300002

08001d14 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001d18:	4b2e      	ldr	r3, [pc, #184]	; (8001dd4 <MX_FDCAN3_Init+0xc0>)
 8001d1a:	4a2f      	ldr	r2, [pc, #188]	; (8001dd8 <MX_FDCAN3_Init+0xc4>)
 8001d1c:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001d1e:	4b2d      	ldr	r3, [pc, #180]	; (8001dd4 <MX_FDCAN3_Init+0xc0>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001d24:	4b2b      	ldr	r3, [pc, #172]	; (8001dd4 <MX_FDCAN3_Init+0xc0>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001d2a:	4b2a      	ldr	r3, [pc, #168]	; (8001dd4 <MX_FDCAN3_Init+0xc0>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001d30:	4b28      	ldr	r3, [pc, #160]	; (8001dd4 <MX_FDCAN3_Init+0xc0>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001d36:	4b27      	ldr	r3, [pc, #156]	; (8001dd4 <MX_FDCAN3_Init+0xc0>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8001d3c:	4b25      	ldr	r3, [pc, #148]	; (8001dd4 <MX_FDCAN3_Init+0xc0>)
 8001d3e:	2210      	movs	r2, #16
 8001d40:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001d42:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <MX_FDCAN3_Init+0xc0>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001d48:	4b22      	ldr	r3, [pc, #136]	; (8001dd4 <MX_FDCAN3_Init+0xc0>)
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001d4e:	4b21      	ldr	r3, [pc, #132]	; (8001dd4 <MX_FDCAN3_Init+0xc0>)
 8001d50:	2202      	movs	r2, #2
 8001d52:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001d54:	4b1f      	ldr	r3, [pc, #124]	; (8001dd4 <MX_FDCAN3_Init+0xc0>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001d5a:	4b1e      	ldr	r3, [pc, #120]	; (8001dd4 <MX_FDCAN3_Init+0xc0>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001d60:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <MX_FDCAN3_Init+0xc0>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001d66:	4b1b      	ldr	r3, [pc, #108]	; (8001dd4 <MX_FDCAN3_Init+0xc0>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001d6c:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <MX_FDCAN3_Init+0xc0>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8001d72:	4b18      	ldr	r3, [pc, #96]	; (8001dd4 <MX_FDCAN3_Init+0xc0>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001d78:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <MX_FDCAN3_Init+0xc0>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <MX_FDCAN3_Init+0xc0>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001d84:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <MX_FDCAN3_Init+0xc0>)
 8001d86:	2204      	movs	r2, #4
 8001d88:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001d8a:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <MX_FDCAN3_Init+0xc0>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001d90:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <MX_FDCAN3_Init+0xc0>)
 8001d92:	2204      	movs	r2, #4
 8001d94:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001d96:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <MX_FDCAN3_Init+0xc0>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001d9c:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <MX_FDCAN3_Init+0xc0>)
 8001d9e:	2204      	movs	r2, #4
 8001da0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001da2:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <MX_FDCAN3_Init+0xc0>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001da8:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <MX_FDCAN3_Init+0xc0>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001dae:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <MX_FDCAN3_Init+0xc0>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001db4:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <MX_FDCAN3_Init+0xc0>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <MX_FDCAN3_Init+0xc0>)
 8001dbc:	2204      	movs	r2, #4
 8001dbe:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001dc0:	4804      	ldr	r0, [pc, #16]	; (8001dd4 <MX_FDCAN3_Init+0xc0>)
 8001dc2:	f005 fbaf 	bl	8007524 <HAL_FDCAN_Init>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001dcc:	f000 fd7e 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	24000dc8 	.word	0x24000dc8
 8001dd8:	4000d400 	.word	0x4000d400

08001ddc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001de0:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <MX_I2C2_Init+0x74>)
 8001de2:	4a1c      	ldr	r2, [pc, #112]	; (8001e54 <MX_I2C2_Init+0x78>)
 8001de4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001de6:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <MX_I2C2_Init+0x74>)
 8001de8:	4a1b      	ldr	r2, [pc, #108]	; (8001e58 <MX_I2C2_Init+0x7c>)
 8001dea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001dec:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <MX_I2C2_Init+0x74>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001df2:	4b17      	ldr	r3, [pc, #92]	; (8001e50 <MX_I2C2_Init+0x74>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001df8:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <MX_I2C2_Init+0x74>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001dfe:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <MX_I2C2_Init+0x74>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e04:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <MX_I2C2_Init+0x74>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e0a:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <MX_I2C2_Init+0x74>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e10:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <MX_I2C2_Init+0x74>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e16:	480e      	ldr	r0, [pc, #56]	; (8001e50 <MX_I2C2_Init+0x74>)
 8001e18:	f006 f8c2 	bl	8007fa0 <HAL_I2C_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001e22:	f000 fd53 	bl	80028cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e26:	2100      	movs	r1, #0
 8001e28:	4809      	ldr	r0, [pc, #36]	; (8001e50 <MX_I2C2_Init+0x74>)
 8001e2a:	f006 f963 	bl	80080f4 <HAL_I2CEx_ConfigAnalogFilter>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001e34:	f000 fd4a 	bl	80028cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4805      	ldr	r0, [pc, #20]	; (8001e50 <MX_I2C2_Init+0x74>)
 8001e3c:	f006 f9a5 	bl	800818a <HAL_I2CEx_ConfigDigitalFilter>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001e46:	f000 fd41 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	24000e68 	.word	0x24000e68
 8001e54:	40005800 	.word	0x40005800
 8001e58:	20303e5d 	.word	0x20303e5d

08001e5c <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <MX_SDMMC2_SD_Init+0x34>)
 8001e62:	4a0c      	ldr	r2, [pc, #48]	; (8001e94 <MX_SDMMC2_SD_Init+0x38>)
 8001e64:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001e66:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <MX_SDMMC2_SD_Init+0x34>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <MX_SDMMC2_SD_Init+0x34>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001e72:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <MX_SDMMC2_SD_Init+0x34>)
 8001e74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e78:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001e7a:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <MX_SDMMC2_SD_Init+0x34>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8001e80:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <MX_SDMMC2_SD_Init+0x34>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001e86:	bf00      	nop
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	24000ebc 	.word	0x24000ebc
 8001e94:	48022400 	.word	0x48022400

08001e98 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e9c:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <MX_SPI1_Init+0xa4>)
 8001e9e:	4a28      	ldr	r2, [pc, #160]	; (8001f40 <MX_SPI1_Init+0xa8>)
 8001ea0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ea2:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <MX_SPI1_Init+0xa4>)
 8001ea4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ea8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001eaa:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <MX_SPI1_Init+0xa4>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001eb0:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <MX_SPI1_Init+0xa4>)
 8001eb2:	2207      	movs	r2, #7
 8001eb4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eb6:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <MX_SPI1_Init+0xa4>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ebc:	4b1f      	ldr	r3, [pc, #124]	; (8001f3c <MX_SPI1_Init+0xa4>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ec2:	4b1e      	ldr	r3, [pc, #120]	; (8001f3c <MX_SPI1_Init+0xa4>)
 8001ec4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ec8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001eca:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <MX_SPI1_Init+0xa4>)
 8001ecc:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001ed0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ed2:	4b1a      	ldr	r3, [pc, #104]	; (8001f3c <MX_SPI1_Init+0xa4>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ed8:	4b18      	ldr	r3, [pc, #96]	; (8001f3c <MX_SPI1_Init+0xa4>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ede:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <MX_SPI1_Init+0xa4>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001ee4:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <MX_SPI1_Init+0xa4>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001eea:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <MX_SPI1_Init+0xa4>)
 8001eec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ef0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001ef2:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <MX_SPI1_Init+0xa4>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001ef8:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <MX_SPI1_Init+0xa4>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001efe:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <MX_SPI1_Init+0xa4>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f04:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <MX_SPI1_Init+0xa4>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001f0a:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <MX_SPI1_Init+0xa4>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001f10:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <MX_SPI1_Init+0xa4>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001f16:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <MX_SPI1_Init+0xa4>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001f1c:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <MX_SPI1_Init+0xa4>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <MX_SPI1_Init+0xa4>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f28:	4804      	ldr	r0, [pc, #16]	; (8001f3c <MX_SPI1_Init+0xa4>)
 8001f2a:	f00c fc97 	bl	800e85c <HAL_SPI_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001f34:	f000 fcca 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	24000f38 	.word	0x24000f38
 8001f40:	40013000 	.word	0x40013000

08001f44 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f48:	4b27      	ldr	r3, [pc, #156]	; (8001fe8 <MX_SPI2_Init+0xa4>)
 8001f4a:	4a28      	ldr	r2, [pc, #160]	; (8001fec <MX_SPI2_Init+0xa8>)
 8001f4c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f4e:	4b26      	ldr	r3, [pc, #152]	; (8001fe8 <MX_SPI2_Init+0xa4>)
 8001f50:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001f54:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f56:	4b24      	ldr	r3, [pc, #144]	; (8001fe8 <MX_SPI2_Init+0xa4>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f5c:	4b22      	ldr	r3, [pc, #136]	; (8001fe8 <MX_SPI2_Init+0xa4>)
 8001f5e:	2207      	movs	r2, #7
 8001f60:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f62:	4b21      	ldr	r3, [pc, #132]	; (8001fe8 <MX_SPI2_Init+0xa4>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f68:	4b1f      	ldr	r3, [pc, #124]	; (8001fe8 <MX_SPI2_Init+0xa4>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <MX_SPI2_Init+0xa4>)
 8001f70:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f74:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001f76:	4b1c      	ldr	r3, [pc, #112]	; (8001fe8 <MX_SPI2_Init+0xa4>)
 8001f78:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001f7c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f7e:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <MX_SPI2_Init+0xa4>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f84:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <MX_SPI2_Init+0xa4>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f8a:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <MX_SPI2_Init+0xa4>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001f90:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <MX_SPI2_Init+0xa4>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f96:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <MX_SPI2_Init+0xa4>)
 8001f98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f9c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001f9e:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <MX_SPI2_Init+0xa4>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001fa4:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <MX_SPI2_Init+0xa4>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001faa:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <MX_SPI2_Init+0xa4>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001fb0:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <MX_SPI2_Init+0xa4>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <MX_SPI2_Init+0xa4>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001fbc:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <MX_SPI2_Init+0xa4>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001fc2:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <MX_SPI2_Init+0xa4>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001fc8:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <MX_SPI2_Init+0xa4>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <MX_SPI2_Init+0xa4>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001fd4:	4804      	ldr	r0, [pc, #16]	; (8001fe8 <MX_SPI2_Init+0xa4>)
 8001fd6:	f00c fc41 	bl	800e85c <HAL_SPI_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001fe0:	f000 fc74 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	24000fc0 	.word	0x24000fc0
 8001fec:	40003800 	.word	0x40003800

08001ff0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001ff4:	4b27      	ldr	r3, [pc, #156]	; (8002094 <MX_SPI3_Init+0xa4>)
 8001ff6:	4a28      	ldr	r2, [pc, #160]	; (8002098 <MX_SPI3_Init+0xa8>)
 8001ff8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001ffa:	4b26      	ldr	r3, [pc, #152]	; (8002094 <MX_SPI3_Init+0xa4>)
 8001ffc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002000:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002002:	4b24      	ldr	r3, [pc, #144]	; (8002094 <MX_SPI3_Init+0xa4>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002008:	4b22      	ldr	r3, [pc, #136]	; (8002094 <MX_SPI3_Init+0xa4>)
 800200a:	2207      	movs	r2, #7
 800200c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800200e:	4b21      	ldr	r3, [pc, #132]	; (8002094 <MX_SPI3_Init+0xa4>)
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002014:	4b1f      	ldr	r3, [pc, #124]	; (8002094 <MX_SPI3_Init+0xa4>)
 8002016:	2200      	movs	r2, #0
 8002018:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800201a:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <MX_SPI3_Init+0xa4>)
 800201c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002020:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002022:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <MX_SPI3_Init+0xa4>)
 8002024:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002028:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800202a:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <MX_SPI3_Init+0xa4>)
 800202c:	2200      	movs	r2, #0
 800202e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002030:	4b18      	ldr	r3, [pc, #96]	; (8002094 <MX_SPI3_Init+0xa4>)
 8002032:	2200      	movs	r2, #0
 8002034:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002036:	4b17      	ldr	r3, [pc, #92]	; (8002094 <MX_SPI3_Init+0xa4>)
 8002038:	2200      	movs	r2, #0
 800203a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800203c:	4b15      	ldr	r3, [pc, #84]	; (8002094 <MX_SPI3_Init+0xa4>)
 800203e:	2200      	movs	r2, #0
 8002040:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002042:	4b14      	ldr	r3, [pc, #80]	; (8002094 <MX_SPI3_Init+0xa4>)
 8002044:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002048:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800204a:	4b12      	ldr	r3, [pc, #72]	; (8002094 <MX_SPI3_Init+0xa4>)
 800204c:	2200      	movs	r2, #0
 800204e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002050:	4b10      	ldr	r3, [pc, #64]	; (8002094 <MX_SPI3_Init+0xa4>)
 8002052:	2200      	movs	r2, #0
 8002054:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002056:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <MX_SPI3_Init+0xa4>)
 8002058:	2200      	movs	r2, #0
 800205a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800205c:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <MX_SPI3_Init+0xa4>)
 800205e:	2200      	movs	r2, #0
 8002060:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002062:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <MX_SPI3_Init+0xa4>)
 8002064:	2200      	movs	r2, #0
 8002066:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002068:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <MX_SPI3_Init+0xa4>)
 800206a:	2200      	movs	r2, #0
 800206c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800206e:	4b09      	ldr	r3, [pc, #36]	; (8002094 <MX_SPI3_Init+0xa4>)
 8002070:	2200      	movs	r2, #0
 8002072:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002074:	4b07      	ldr	r3, [pc, #28]	; (8002094 <MX_SPI3_Init+0xa4>)
 8002076:	2200      	movs	r2, #0
 8002078:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800207a:	4b06      	ldr	r3, [pc, #24]	; (8002094 <MX_SPI3_Init+0xa4>)
 800207c:	2200      	movs	r2, #0
 800207e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002080:	4804      	ldr	r0, [pc, #16]	; (8002094 <MX_SPI3_Init+0xa4>)
 8002082:	f00c fbeb 	bl	800e85c <HAL_SPI_Init>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 800208c:	f000 fc1e 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}
 8002094:	24001048 	.word	0x24001048
 8002098:	40003c00 	.word	0x40003c00

0800209c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	; 0x28
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a2:	f107 031c 	add.w	r3, r7, #28
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ae:	463b      	mov	r3, r7
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	611a      	str	r2, [r3, #16]
 80020bc:	615a      	str	r2, [r3, #20]
 80020be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020c0:	4b21      	ldr	r3, [pc, #132]	; (8002148 <MX_TIM2_Init+0xac>)
 80020c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80020c8:	4b1f      	ldr	r3, [pc, #124]	; (8002148 <MX_TIM2_Init+0xac>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ce:	4b1e      	ldr	r3, [pc, #120]	; (8002148 <MX_TIM2_Init+0xac>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 80020d4:	4b1c      	ldr	r3, [pc, #112]	; (8002148 <MX_TIM2_Init+0xac>)
 80020d6:	225a      	movs	r2, #90	; 0x5a
 80020d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020da:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <MX_TIM2_Init+0xac>)
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e0:	4b19      	ldr	r3, [pc, #100]	; (8002148 <MX_TIM2_Init+0xac>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020e6:	4818      	ldr	r0, [pc, #96]	; (8002148 <MX_TIM2_Init+0xac>)
 80020e8:	f00d f9a8 	bl	800f43c <HAL_TIM_PWM_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80020f2:	f000 fbeb 	bl	80028cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020fe:	f107 031c 	add.w	r3, r7, #28
 8002102:	4619      	mov	r1, r3
 8002104:	4810      	ldr	r0, [pc, #64]	; (8002148 <MX_TIM2_Init+0xac>)
 8002106:	f00e fc2f 	bl	8010968 <HAL_TIMEx_MasterConfigSynchronization>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002110:	f000 fbdc 	bl	80028cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002114:	2360      	movs	r3, #96	; 0x60
 8002116:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800211c:	2300      	movs	r3, #0
 800211e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002120:	2300      	movs	r3, #0
 8002122:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002124:	463b      	mov	r3, r7
 8002126:	2208      	movs	r2, #8
 8002128:	4619      	mov	r1, r3
 800212a:	4807      	ldr	r0, [pc, #28]	; (8002148 <MX_TIM2_Init+0xac>)
 800212c:	f00d fe4e 	bl	800fdcc <HAL_TIM_PWM_ConfigChannel>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002136:	f000 fbc9 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800213a:	4803      	ldr	r0, [pc, #12]	; (8002148 <MX_TIM2_Init+0xac>)
 800213c:	f001 f8e4 	bl	8003308 <HAL_TIM_MspPostInit>

}
 8002140:	bf00      	nop
 8002142:	3728      	adds	r7, #40	; 0x28
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	240010d0 	.word	0x240010d0

0800214c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	; 0x28
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002152:	f107 031c 	add.w	r3, r7, #28
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	605a      	str	r2, [r3, #4]
 800215c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800215e:	463b      	mov	r3, r7
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]
 800216c:	615a      	str	r2, [r3, #20]
 800216e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002170:	4b26      	ldr	r3, [pc, #152]	; (800220c <MX_TIM3_Init+0xc0>)
 8002172:	4a27      	ldr	r2, [pc, #156]	; (8002210 <MX_TIM3_Init+0xc4>)
 8002174:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002176:	4b25      	ldr	r3, [pc, #148]	; (800220c <MX_TIM3_Init+0xc0>)
 8002178:	2200      	movs	r2, #0
 800217a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800217c:	4b23      	ldr	r3, [pc, #140]	; (800220c <MX_TIM3_Init+0xc0>)
 800217e:	2200      	movs	r2, #0
 8002180:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 8002182:	4b22      	ldr	r3, [pc, #136]	; (800220c <MX_TIM3_Init+0xc0>)
 8002184:	225a      	movs	r2, #90	; 0x5a
 8002186:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002188:	4b20      	ldr	r3, [pc, #128]	; (800220c <MX_TIM3_Init+0xc0>)
 800218a:	2200      	movs	r2, #0
 800218c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800218e:	4b1f      	ldr	r3, [pc, #124]	; (800220c <MX_TIM3_Init+0xc0>)
 8002190:	2200      	movs	r2, #0
 8002192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002194:	481d      	ldr	r0, [pc, #116]	; (800220c <MX_TIM3_Init+0xc0>)
 8002196:	f00d f951 	bl	800f43c <HAL_TIM_PWM_Init>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80021a0:	f000 fb94 	bl	80028cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021a4:	2300      	movs	r3, #0
 80021a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a8:	2300      	movs	r3, #0
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021ac:	f107 031c 	add.w	r3, r7, #28
 80021b0:	4619      	mov	r1, r3
 80021b2:	4816      	ldr	r0, [pc, #88]	; (800220c <MX_TIM3_Init+0xc0>)
 80021b4:	f00e fbd8 	bl	8010968 <HAL_TIMEx_MasterConfigSynchronization>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80021be:	f000 fb85 	bl	80028cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021c2:	2360      	movs	r3, #96	; 0x60
 80021c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021d2:	463b      	mov	r3, r7
 80021d4:	2200      	movs	r2, #0
 80021d6:	4619      	mov	r1, r3
 80021d8:	480c      	ldr	r0, [pc, #48]	; (800220c <MX_TIM3_Init+0xc0>)
 80021da:	f00d fdf7 	bl	800fdcc <HAL_TIM_PWM_ConfigChannel>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80021e4:	f000 fb72 	bl	80028cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021e8:	463b      	mov	r3, r7
 80021ea:	2204      	movs	r2, #4
 80021ec:	4619      	mov	r1, r3
 80021ee:	4807      	ldr	r0, [pc, #28]	; (800220c <MX_TIM3_Init+0xc0>)
 80021f0:	f00d fdec 	bl	800fdcc <HAL_TIM_PWM_ConfigChannel>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80021fa:	f000 fb67 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80021fe:	4803      	ldr	r0, [pc, #12]	; (800220c <MX_TIM3_Init+0xc0>)
 8002200:	f001 f882 	bl	8003308 <HAL_TIM_MspPostInit>

}
 8002204:	bf00      	nop
 8002206:	3728      	adds	r7, #40	; 0x28
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	2400111c 	.word	0x2400111c
 8002210:	40000400 	.word	0x40000400

08002214 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08a      	sub	sp, #40	; 0x28
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800221a:	f107 031c 	add.w	r3, r7, #28
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	605a      	str	r2, [r3, #4]
 8002224:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002226:	463b      	mov	r3, r7
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
 8002234:	615a      	str	r2, [r3, #20]
 8002236:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002238:	4b32      	ldr	r3, [pc, #200]	; (8002304 <MX_TIM4_Init+0xf0>)
 800223a:	4a33      	ldr	r2, [pc, #204]	; (8002308 <MX_TIM4_Init+0xf4>)
 800223c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 800223e:	4b31      	ldr	r3, [pc, #196]	; (8002304 <MX_TIM4_Init+0xf0>)
 8002240:	221c      	movs	r2, #28
 8002242:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002244:	4b2f      	ldr	r3, [pc, #188]	; (8002304 <MX_TIM4_Init+0xf0>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800224a:	4b2e      	ldr	r3, [pc, #184]	; (8002304 <MX_TIM4_Init+0xf0>)
 800224c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002250:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002252:	4b2c      	ldr	r3, [pc, #176]	; (8002304 <MX_TIM4_Init+0xf0>)
 8002254:	2200      	movs	r2, #0
 8002256:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002258:	4b2a      	ldr	r3, [pc, #168]	; (8002304 <MX_TIM4_Init+0xf0>)
 800225a:	2200      	movs	r2, #0
 800225c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800225e:	4829      	ldr	r0, [pc, #164]	; (8002304 <MX_TIM4_Init+0xf0>)
 8002260:	f00d f8ec 	bl	800f43c <HAL_TIM_PWM_Init>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800226a:	f000 fb2f 	bl	80028cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002272:	2300      	movs	r3, #0
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002276:	f107 031c 	add.w	r3, r7, #28
 800227a:	4619      	mov	r1, r3
 800227c:	4821      	ldr	r0, [pc, #132]	; (8002304 <MX_TIM4_Init+0xf0>)
 800227e:	f00e fb73 	bl	8010968 <HAL_TIMEx_MasterConfigSynchronization>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002288:	f000 fb20 	bl	80028cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800228c:	2360      	movs	r3, #96	; 0x60
 800228e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002294:	2300      	movs	r3, #0
 8002296:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800229c:	463b      	mov	r3, r7
 800229e:	2200      	movs	r2, #0
 80022a0:	4619      	mov	r1, r3
 80022a2:	4818      	ldr	r0, [pc, #96]	; (8002304 <MX_TIM4_Init+0xf0>)
 80022a4:	f00d fd92 	bl	800fdcc <HAL_TIM_PWM_ConfigChannel>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80022ae:	f000 fb0d 	bl	80028cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022b2:	463b      	mov	r3, r7
 80022b4:	2204      	movs	r2, #4
 80022b6:	4619      	mov	r1, r3
 80022b8:	4812      	ldr	r0, [pc, #72]	; (8002304 <MX_TIM4_Init+0xf0>)
 80022ba:	f00d fd87 	bl	800fdcc <HAL_TIM_PWM_ConfigChannel>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80022c4:	f000 fb02 	bl	80028cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022c8:	463b      	mov	r3, r7
 80022ca:	2208      	movs	r2, #8
 80022cc:	4619      	mov	r1, r3
 80022ce:	480d      	ldr	r0, [pc, #52]	; (8002304 <MX_TIM4_Init+0xf0>)
 80022d0:	f00d fd7c 	bl	800fdcc <HAL_TIM_PWM_ConfigChannel>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80022da:	f000 faf7 	bl	80028cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022de:	463b      	mov	r3, r7
 80022e0:	220c      	movs	r2, #12
 80022e2:	4619      	mov	r1, r3
 80022e4:	4807      	ldr	r0, [pc, #28]	; (8002304 <MX_TIM4_Init+0xf0>)
 80022e6:	f00d fd71 	bl	800fdcc <HAL_TIM_PWM_ConfigChannel>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80022f0:	f000 faec 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80022f4:	4803      	ldr	r0, [pc, #12]	; (8002304 <MX_TIM4_Init+0xf0>)
 80022f6:	f001 f807 	bl	8003308 <HAL_TIM_MspPostInit>

}
 80022fa:	bf00      	nop
 80022fc:	3728      	adds	r7, #40	; 0x28
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	24001168 	.word	0x24001168
 8002308:	40000800 	.word	0x40000800

0800230c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08a      	sub	sp, #40	; 0x28
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002312:	f107 031c 	add.w	r3, r7, #28
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]
 800231c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800231e:	463b      	mov	r3, r7
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
 800232c:	615a      	str	r2, [r3, #20]
 800232e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002330:	4b21      	ldr	r3, [pc, #132]	; (80023b8 <MX_TIM5_Init+0xac>)
 8002332:	4a22      	ldr	r2, [pc, #136]	; (80023bc <MX_TIM5_Init+0xb0>)
 8002334:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002336:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <MX_TIM5_Init+0xac>)
 8002338:	2200      	movs	r2, #0
 800233a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800233c:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <MX_TIM5_Init+0xac>)
 800233e:	2200      	movs	r2, #0
 8002340:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 8002342:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <MX_TIM5_Init+0xac>)
 8002344:	225a      	movs	r2, #90	; 0x5a
 8002346:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002348:	4b1b      	ldr	r3, [pc, #108]	; (80023b8 <MX_TIM5_Init+0xac>)
 800234a:	2200      	movs	r2, #0
 800234c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800234e:	4b1a      	ldr	r3, [pc, #104]	; (80023b8 <MX_TIM5_Init+0xac>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002354:	4818      	ldr	r0, [pc, #96]	; (80023b8 <MX_TIM5_Init+0xac>)
 8002356:	f00d f871 	bl	800f43c <HAL_TIM_PWM_Init>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002360:	f000 fab4 	bl	80028cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002364:	2300      	movs	r3, #0
 8002366:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002368:	2300      	movs	r3, #0
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800236c:	f107 031c 	add.w	r3, r7, #28
 8002370:	4619      	mov	r1, r3
 8002372:	4811      	ldr	r0, [pc, #68]	; (80023b8 <MX_TIM5_Init+0xac>)
 8002374:	f00e faf8 	bl	8010968 <HAL_TIMEx_MasterConfigSynchronization>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800237e:	f000 faa5 	bl	80028cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002382:	2360      	movs	r3, #96	; 0x60
 8002384:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002386:	2300      	movs	r3, #0
 8002388:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800238a:	2300      	movs	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002392:	463b      	mov	r3, r7
 8002394:	220c      	movs	r2, #12
 8002396:	4619      	mov	r1, r3
 8002398:	4807      	ldr	r0, [pc, #28]	; (80023b8 <MX_TIM5_Init+0xac>)
 800239a:	f00d fd17 	bl	800fdcc <HAL_TIM_PWM_ConfigChannel>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80023a4:	f000 fa92 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80023a8:	4803      	ldr	r0, [pc, #12]	; (80023b8 <MX_TIM5_Init+0xac>)
 80023aa:	f000 ffad 	bl	8003308 <HAL_TIM_MspPostInit>

}
 80023ae:	bf00      	nop
 80023b0:	3728      	adds	r7, #40	; 0x28
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	240011b4 	.word	0x240011b4
 80023bc:	40000c00 	.word	0x40000c00

080023c0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80023c4:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <MX_TIM13_Init+0x40>)
 80023c6:	4a0f      	ldr	r2, [pc, #60]	; (8002404 <MX_TIM13_Init+0x44>)
 80023c8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 95;
 80023ca:	4b0d      	ldr	r3, [pc, #52]	; (8002400 <MX_TIM13_Init+0x40>)
 80023cc:	225f      	movs	r2, #95	; 0x5f
 80023ce:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d0:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <MX_TIM13_Init+0x40>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80023d6:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <MX_TIM13_Init+0x40>)
 80023d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023dc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023de:	4b08      	ldr	r3, [pc, #32]	; (8002400 <MX_TIM13_Init+0x40>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <MX_TIM13_Init+0x40>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80023ea:	4805      	ldr	r0, [pc, #20]	; (8002400 <MX_TIM13_Init+0x40>)
 80023ec:	f00c ffcf 	bl	800f38e <HAL_TIM_Base_Init>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80023f6:	f000 fa69 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	24001200 	.word	0x24001200
 8002404:	40001c00 	.word	0x40001c00

08002408 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800240c:	4b22      	ldr	r3, [pc, #136]	; (8002498 <MX_UART4_Init+0x90>)
 800240e:	4a23      	ldr	r2, [pc, #140]	; (800249c <MX_UART4_Init+0x94>)
 8002410:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002412:	4b21      	ldr	r3, [pc, #132]	; (8002498 <MX_UART4_Init+0x90>)
 8002414:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002418:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800241a:	4b1f      	ldr	r3, [pc, #124]	; (8002498 <MX_UART4_Init+0x90>)
 800241c:	2200      	movs	r2, #0
 800241e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002420:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <MX_UART4_Init+0x90>)
 8002422:	2200      	movs	r2, #0
 8002424:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002426:	4b1c      	ldr	r3, [pc, #112]	; (8002498 <MX_UART4_Init+0x90>)
 8002428:	2200      	movs	r2, #0
 800242a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800242c:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <MX_UART4_Init+0x90>)
 800242e:	220c      	movs	r2, #12
 8002430:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002432:	4b19      	ldr	r3, [pc, #100]	; (8002498 <MX_UART4_Init+0x90>)
 8002434:	2200      	movs	r2, #0
 8002436:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002438:	4b17      	ldr	r3, [pc, #92]	; (8002498 <MX_UART4_Init+0x90>)
 800243a:	2200      	movs	r2, #0
 800243c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800243e:	4b16      	ldr	r3, [pc, #88]	; (8002498 <MX_UART4_Init+0x90>)
 8002440:	2200      	movs	r2, #0
 8002442:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002444:	4b14      	ldr	r3, [pc, #80]	; (8002498 <MX_UART4_Init+0x90>)
 8002446:	2200      	movs	r2, #0
 8002448:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800244a:	4b13      	ldr	r3, [pc, #76]	; (8002498 <MX_UART4_Init+0x90>)
 800244c:	2200      	movs	r2, #0
 800244e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002450:	4811      	ldr	r0, [pc, #68]	; (8002498 <MX_UART4_Init+0x90>)
 8002452:	f00e fb43 	bl	8010adc <HAL_UART_Init>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800245c:	f000 fa36 	bl	80028cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002460:	2100      	movs	r1, #0
 8002462:	480d      	ldr	r0, [pc, #52]	; (8002498 <MX_UART4_Init+0x90>)
 8002464:	f00f fc49 	bl	8011cfa <HAL_UARTEx_SetTxFifoThreshold>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800246e:	f000 fa2d 	bl	80028cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002472:	2100      	movs	r1, #0
 8002474:	4808      	ldr	r0, [pc, #32]	; (8002498 <MX_UART4_Init+0x90>)
 8002476:	f00f fc7e 	bl	8011d76 <HAL_UARTEx_SetRxFifoThreshold>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002480:	f000 fa24 	bl	80028cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002484:	4804      	ldr	r0, [pc, #16]	; (8002498 <MX_UART4_Init+0x90>)
 8002486:	f00f fbff 	bl	8011c88 <HAL_UARTEx_DisableFifoMode>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002490:	f000 fa1c 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002494:	bf00      	nop
 8002496:	bd80      	pop	{r7, pc}
 8002498:	240014a4 	.word	0x240014a4
 800249c:	40004c00 	.word	0x40004c00

080024a0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80024a4:	4b22      	ldr	r3, [pc, #136]	; (8002530 <MX_USART6_UART_Init+0x90>)
 80024a6:	4a23      	ldr	r2, [pc, #140]	; (8002534 <MX_USART6_UART_Init+0x94>)
 80024a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80024aa:	4b21      	ldr	r3, [pc, #132]	; (8002530 <MX_USART6_UART_Init+0x90>)
 80024ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80024b2:	4b1f      	ldr	r3, [pc, #124]	; (8002530 <MX_USART6_UART_Init+0x90>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80024b8:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <MX_USART6_UART_Init+0x90>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80024be:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <MX_USART6_UART_Init+0x90>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80024c4:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <MX_USART6_UART_Init+0x90>)
 80024c6:	220c      	movs	r2, #12
 80024c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ca:	4b19      	ldr	r3, [pc, #100]	; (8002530 <MX_USART6_UART_Init+0x90>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80024d0:	4b17      	ldr	r3, [pc, #92]	; (8002530 <MX_USART6_UART_Init+0x90>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024d6:	4b16      	ldr	r3, [pc, #88]	; (8002530 <MX_USART6_UART_Init+0x90>)
 80024d8:	2200      	movs	r2, #0
 80024da:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024dc:	4b14      	ldr	r3, [pc, #80]	; (8002530 <MX_USART6_UART_Init+0x90>)
 80024de:	2200      	movs	r2, #0
 80024e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024e2:	4b13      	ldr	r3, [pc, #76]	; (8002530 <MX_USART6_UART_Init+0x90>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80024e8:	4811      	ldr	r0, [pc, #68]	; (8002530 <MX_USART6_UART_Init+0x90>)
 80024ea:	f00e faf7 	bl	8010adc <HAL_UART_Init>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80024f4:	f000 f9ea 	bl	80028cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024f8:	2100      	movs	r1, #0
 80024fa:	480d      	ldr	r0, [pc, #52]	; (8002530 <MX_USART6_UART_Init+0x90>)
 80024fc:	f00f fbfd 	bl	8011cfa <HAL_UARTEx_SetTxFifoThreshold>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002506:	f000 f9e1 	bl	80028cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800250a:	2100      	movs	r1, #0
 800250c:	4808      	ldr	r0, [pc, #32]	; (8002530 <MX_USART6_UART_Init+0x90>)
 800250e:	f00f fc32 	bl	8011d76 <HAL_UARTEx_SetRxFifoThreshold>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002518:	f000 f9d8 	bl	80028cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800251c:	4804      	ldr	r0, [pc, #16]	; (8002530 <MX_USART6_UART_Init+0x90>)
 800251e:	f00f fbb3 	bl	8011c88 <HAL_UARTEx_DisableFifoMode>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002528:	f000 f9d0 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800252c:	bf00      	nop
 800252e:	bd80      	pop	{r7, pc}
 8002530:	24001538 	.word	0x24001538
 8002534:	40011400 	.word	0x40011400

08002538 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800253e:	4b2d      	ldr	r3, [pc, #180]	; (80025f4 <MX_DMA_Init+0xbc>)
 8002540:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002544:	4a2b      	ldr	r2, [pc, #172]	; (80025f4 <MX_DMA_Init+0xbc>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800254e:	4b29      	ldr	r3, [pc, #164]	; (80025f4 <MX_DMA_Init+0xbc>)
 8002550:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	607b      	str	r3, [r7, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800255c:	4b25      	ldr	r3, [pc, #148]	; (80025f4 <MX_DMA_Init+0xbc>)
 800255e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002562:	4a24      	ldr	r2, [pc, #144]	; (80025f4 <MX_DMA_Init+0xbc>)
 8002564:	f043 0302 	orr.w	r3, r3, #2
 8002568:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800256c:	4b21      	ldr	r3, [pc, #132]	; (80025f4 <MX_DMA_Init+0xbc>)
 800256e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	603b      	str	r3, [r7, #0]
 8002578:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	200b      	movs	r0, #11
 8002580:	f002 fec7 	bl	8005312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002584:	200b      	movs	r0, #11
 8002586:	f002 fede 	bl	8005346 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	2100      	movs	r1, #0
 800258e:	200c      	movs	r0, #12
 8002590:	f002 febf 	bl	8005312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002594:	200c      	movs	r0, #12
 8002596:	f002 fed6 	bl	8005346 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	2100      	movs	r1, #0
 800259e:	200d      	movs	r0, #13
 80025a0:	f002 feb7 	bl	8005312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80025a4:	200d      	movs	r0, #13
 80025a6:	f002 fece 	bl	8005346 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2100      	movs	r1, #0
 80025ae:	200e      	movs	r0, #14
 80025b0:	f002 feaf 	bl	8005312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80025b4:	200e      	movs	r0, #14
 80025b6:	f002 fec6 	bl	8005346 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80025ba:	2200      	movs	r2, #0
 80025bc:	2100      	movs	r1, #0
 80025be:	200f      	movs	r0, #15
 80025c0:	f002 fea7 	bl	8005312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80025c4:	200f      	movs	r0, #15
 80025c6:	f002 febe 	bl	8005346 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80025ca:	2200      	movs	r2, #0
 80025cc:	2100      	movs	r1, #0
 80025ce:	2010      	movs	r0, #16
 80025d0:	f002 fe9f 	bl	8005312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80025d4:	2010      	movs	r0, #16
 80025d6:	f002 feb6 	bl	8005346 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	2100      	movs	r1, #0
 80025de:	2046      	movs	r0, #70	; 0x46
 80025e0:	f002 fe97 	bl	8005312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80025e4:	2046      	movs	r0, #70	; 0x46
 80025e6:	f002 feae 	bl	8005346 <HAL_NVIC_EnableIRQ>

}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	58024400 	.word	0x58024400

080025f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08c      	sub	sp, #48	; 0x30
 80025fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fe:	f107 031c 	add.w	r3, r7, #28
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	605a      	str	r2, [r3, #4]
 8002608:	609a      	str	r2, [r3, #8]
 800260a:	60da      	str	r2, [r3, #12]
 800260c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800260e:	4ba7      	ldr	r3, [pc, #668]	; (80028ac <MX_GPIO_Init+0x2b4>)
 8002610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002614:	4aa5      	ldr	r2, [pc, #660]	; (80028ac <MX_GPIO_Init+0x2b4>)
 8002616:	f043 0310 	orr.w	r3, r3, #16
 800261a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800261e:	4ba3      	ldr	r3, [pc, #652]	; (80028ac <MX_GPIO_Init+0x2b4>)
 8002620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002624:	f003 0310 	and.w	r3, r3, #16
 8002628:	61bb      	str	r3, [r7, #24]
 800262a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800262c:	4b9f      	ldr	r3, [pc, #636]	; (80028ac <MX_GPIO_Init+0x2b4>)
 800262e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002632:	4a9e      	ldr	r2, [pc, #632]	; (80028ac <MX_GPIO_Init+0x2b4>)
 8002634:	f043 0320 	orr.w	r3, r3, #32
 8002638:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800263c:	4b9b      	ldr	r3, [pc, #620]	; (80028ac <MX_GPIO_Init+0x2b4>)
 800263e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002642:	f003 0320 	and.w	r3, r3, #32
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800264a:	4b98      	ldr	r3, [pc, #608]	; (80028ac <MX_GPIO_Init+0x2b4>)
 800264c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002650:	4a96      	ldr	r2, [pc, #600]	; (80028ac <MX_GPIO_Init+0x2b4>)
 8002652:	f043 0304 	orr.w	r3, r3, #4
 8002656:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800265a:	4b94      	ldr	r3, [pc, #592]	; (80028ac <MX_GPIO_Init+0x2b4>)
 800265c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002668:	4b90      	ldr	r3, [pc, #576]	; (80028ac <MX_GPIO_Init+0x2b4>)
 800266a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800266e:	4a8f      	ldr	r2, [pc, #572]	; (80028ac <MX_GPIO_Init+0x2b4>)
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002678:	4b8c      	ldr	r3, [pc, #560]	; (80028ac <MX_GPIO_Init+0x2b4>)
 800267a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002686:	4b89      	ldr	r3, [pc, #548]	; (80028ac <MX_GPIO_Init+0x2b4>)
 8002688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800268c:	4a87      	ldr	r2, [pc, #540]	; (80028ac <MX_GPIO_Init+0x2b4>)
 800268e:	f043 0302 	orr.w	r3, r3, #2
 8002692:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002696:	4b85      	ldr	r3, [pc, #532]	; (80028ac <MX_GPIO_Init+0x2b4>)
 8002698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026a4:	4b81      	ldr	r3, [pc, #516]	; (80028ac <MX_GPIO_Init+0x2b4>)
 80026a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026aa:	4a80      	ldr	r2, [pc, #512]	; (80028ac <MX_GPIO_Init+0x2b4>)
 80026ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026b4:	4b7d      	ldr	r3, [pc, #500]	; (80028ac <MX_GPIO_Init+0x2b4>)
 80026b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026be:	607b      	str	r3, [r7, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026c2:	4b7a      	ldr	r3, [pc, #488]	; (80028ac <MX_GPIO_Init+0x2b4>)
 80026c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026c8:	4a78      	ldr	r2, [pc, #480]	; (80028ac <MX_GPIO_Init+0x2b4>)
 80026ca:	f043 0308 	orr.w	r3, r3, #8
 80026ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026d2:	4b76      	ldr	r3, [pc, #472]	; (80028ac <MX_GPIO_Init+0x2b4>)
 80026d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026d8:	f003 0308 	and.w	r3, r3, #8
 80026dc:	603b      	str	r3, [r7, #0]
 80026de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 80026e0:	2200      	movs	r2, #0
 80026e2:	f241 5104 	movw	r1, #5380	; 0x1504
 80026e6:	4872      	ldr	r0, [pc, #456]	; (80028b0 <MX_GPIO_Init+0x2b8>)
 80026e8:	f005 fc40 	bl	8007f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 80026ec:	2200      	movs	r2, #0
 80026ee:	f248 0106 	movw	r1, #32774	; 0x8006
 80026f2:	4870      	ldr	r0, [pc, #448]	; (80028b4 <MX_GPIO_Init+0x2bc>)
 80026f4:	f005 fc3a 	bl	8007f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80026f8:	2200      	movs	r2, #0
 80026fa:	2130      	movs	r1, #48	; 0x30
 80026fc:	486e      	ldr	r0, [pc, #440]	; (80028b8 <MX_GPIO_Init+0x2c0>)
 80026fe:	f005 fc35 	bl	8007f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|PYRO1_Pin, GPIO_PIN_RESET);
 8002702:	2200      	movs	r2, #0
 8002704:	2103      	movs	r1, #3
 8002706:	486d      	ldr	r0, [pc, #436]	; (80028bc <MX_GPIO_Init+0x2c4>)
 8002708:	f005 fc30 	bl	8007f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 800270c:	2200      	movs	r2, #0
 800270e:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8002712:	486b      	ldr	r0, [pc, #428]	; (80028c0 <MX_GPIO_Init+0x2c8>)
 8002714:	f005 fc2a 	bl	8007f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002718:	2200      	movs	r2, #0
 800271a:	210e      	movs	r1, #14
 800271c:	4869      	ldr	r0, [pc, #420]	; (80028c4 <MX_GPIO_Init+0x2cc>)
 800271e:	f005 fc25 	bl	8007f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_SET);
 8002722:	2201      	movs	r2, #1
 8002724:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002728:	4867      	ldr	r0, [pc, #412]	; (80028c8 <MX_GPIO_Init+0x2d0>)
 800272a:	f005 fc1f 	bl	8007f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 800272e:	2200      	movs	r2, #0
 8002730:	2101      	movs	r1, #1
 8002732:	4865      	ldr	r0, [pc, #404]	; (80028c8 <MX_GPIO_Init+0x2d0>)
 8002734:	f005 fc1a 	bl	8007f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 8002738:	f241 5304 	movw	r3, #5380	; 0x1504
 800273c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800273e:	2301      	movs	r3, #1
 8002740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002746:	2300      	movs	r3, #0
 8002748:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800274a:	f107 031c 	add.w	r3, r7, #28
 800274e:	4619      	mov	r1, r3
 8002750:	4857      	ldr	r0, [pc, #348]	; (80028b0 <MX_GPIO_Init+0x2b8>)
 8002752:	f005 fa4b 	bl	8007bec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 8002756:	f248 0306 	movw	r3, #32774	; 0x8006
 800275a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800275c:	2301      	movs	r3, #1
 800275e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002764:	2300      	movs	r3, #0
 8002766:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002768:	f107 031c 	add.w	r3, r7, #28
 800276c:	4619      	mov	r1, r3
 800276e:	4851      	ldr	r0, [pc, #324]	; (80028b4 <MX_GPIO_Init+0x2bc>)
 8002770:	f005 fa3c 	bl	8007bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002774:	2330      	movs	r3, #48	; 0x30
 8002776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002778:	2301      	movs	r3, #1
 800277a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002780:	2300      	movs	r3, #0
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002784:	f107 031c 	add.w	r3, r7, #28
 8002788:	4619      	mov	r1, r3
 800278a:	484b      	ldr	r0, [pc, #300]	; (80028b8 <MX_GPIO_Init+0x2c0>)
 800278c:	f005 fa2e 	bl	8007bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PYRO1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|PYRO1_Pin;
 8002790:	2303      	movs	r3, #3
 8002792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002794:	2301      	movs	r3, #1
 8002796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279c:	2300      	movs	r3, #0
 800279e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a0:	f107 031c 	add.w	r3, r7, #28
 80027a4:	4619      	mov	r1, r3
 80027a6:	4845      	ldr	r0, [pc, #276]	; (80028bc <MX_GPIO_Init+0x2c4>)
 80027a8:	f005 fa20 	bl	8007bec <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 80027ac:	2304      	movs	r3, #4
 80027ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027b0:	2300      	movs	r3, #0
 80027b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027b4:	2301      	movs	r3, #1
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 80027b8:	f107 031c 	add.w	r3, r7, #28
 80027bc:	4619      	mov	r1, r3
 80027be:	483f      	ldr	r0, [pc, #252]	; (80028bc <MX_GPIO_Init+0x2c4>)
 80027c0:	f005 fa14 	bl	8007bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 80027c4:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 80027c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ca:	2301      	movs	r3, #1
 80027cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d2:	2300      	movs	r3, #0
 80027d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027d6:	f107 031c 	add.w	r3, r7, #28
 80027da:	4619      	mov	r1, r3
 80027dc:	4838      	ldr	r0, [pc, #224]	; (80028c0 <MX_GPIO_Init+0x2c8>)
 80027de:	f005 fa05 	bl	8007bec <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 80027e2:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80027e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027e8:	2300      	movs	r3, #0
 80027ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027ec:	2301      	movs	r3, #1
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027f0:	f107 031c 	add.w	r3, r7, #28
 80027f4:	4619      	mov	r1, r3
 80027f6:	4832      	ldr	r0, [pc, #200]	; (80028c0 <MX_GPIO_Init+0x2c8>)
 80027f8:	f005 f9f8 	bl	8007bec <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 80027fc:	2301      	movs	r3, #1
 80027fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002800:	2300      	movs	r3, #0
 8002802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002804:	2301      	movs	r3, #1
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8002808:	f107 031c 	add.w	r3, r7, #28
 800280c:	4619      	mov	r1, r3
 800280e:	482d      	ldr	r0, [pc, #180]	; (80028c4 <MX_GPIO_Init+0x2cc>)
 8002810:	f005 f9ec 	bl	8007bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8002814:	230e      	movs	r3, #14
 8002816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002818:	2301      	movs	r3, #1
 800281a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281c:	2300      	movs	r3, #0
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002820:	2300      	movs	r3, #0
 8002822:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002824:	f107 031c 	add.w	r3, r7, #28
 8002828:	4619      	mov	r1, r3
 800282a:	4826      	ldr	r0, [pc, #152]	; (80028c4 <MX_GPIO_Init+0x2cc>)
 800282c:	f005 f9de 	bl	8007bec <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 8002830:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002836:	2300      	movs	r3, #0
 8002838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800283a:	2301      	movs	r3, #1
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800283e:	f107 031c 	add.w	r3, r7, #28
 8002842:	4619      	mov	r1, r3
 8002844:	481a      	ldr	r0, [pc, #104]	; (80028b0 <MX_GPIO_Init+0x2b8>)
 8002846:	f005 f9d1 	bl	8007bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0;
 800284a:	f240 7301 	movw	r3, #1793	; 0x701
 800284e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002850:	2301      	movs	r3, #1
 8002852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002858:	2300      	movs	r3, #0
 800285a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800285c:	f107 031c 	add.w	r3, r7, #28
 8002860:	4619      	mov	r1, r3
 8002862:	4819      	ldr	r0, [pc, #100]	; (80028c8 <MX_GPIO_Init+0x2d0>)
 8002864:	f005 f9c2 	bl	8007bec <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8002868:	2310      	movs	r3, #16
 800286a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800286c:	2300      	movs	r3, #0
 800286e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002874:	f107 031c 	add.w	r3, r7, #28
 8002878:	4619      	mov	r1, r3
 800287a:	4812      	ldr	r0, [pc, #72]	; (80028c4 <MX_GPIO_Init+0x2cc>)
 800287c:	f005 f9b6 	bl	8007bec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002880:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002886:	2302      	movs	r3, #2
 8002888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288e:	2300      	movs	r3, #0
 8002890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002892:	2300      	movs	r3, #0
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002896:	f107 031c 	add.w	r3, r7, #28
 800289a:	4619      	mov	r1, r3
 800289c:	4805      	ldr	r0, [pc, #20]	; (80028b4 <MX_GPIO_Init+0x2bc>)
 800289e:	f005 f9a5 	bl	8007bec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028a2:	bf00      	nop
 80028a4:	3730      	adds	r7, #48	; 0x30
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	58024400 	.word	0x58024400
 80028b0:	58021000 	.word	0x58021000
 80028b4:	58020000 	.word	0x58020000
 80028b8:	58020800 	.word	0x58020800
 80028bc:	58020400 	.word	0x58020400
 80028c0:	58021400 	.word	0x58021400
 80028c4:	58021800 	.word	0x58021800
 80028c8:	58020c00 	.word	0x58020c00

080028cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028d0:	b672      	cpsid	i
}
 80028d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80028d4:	e7fe      	b.n	80028d4 <Error_Handler+0x8>
	...

080028d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028de:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <HAL_MspInit+0x30>)
 80028e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028e4:	4a08      	ldr	r2, [pc, #32]	; (8002908 <HAL_MspInit+0x30>)
 80028e6:	f043 0302 	orr.w	r3, r3, #2
 80028ea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80028ee:	4b06      	ldr	r3, [pc, #24]	; (8002908 <HAL_MspInit+0x30>)
 80028f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	58024400 	.word	0x58024400

0800290c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08c      	sub	sp, #48	; 0x30
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002914:	f107 031c 	add.w	r3, r7, #28
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a5d      	ldr	r2, [pc, #372]	; (8002aa0 <HAL_ADC_MspInit+0x194>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d159      	bne.n	80029e2 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800292e:	4b5d      	ldr	r3, [pc, #372]	; (8002aa4 <HAL_ADC_MspInit+0x198>)
 8002930:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002934:	4a5b      	ldr	r2, [pc, #364]	; (8002aa4 <HAL_ADC_MspInit+0x198>)
 8002936:	f043 0320 	orr.w	r3, r3, #32
 800293a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800293e:	4b59      	ldr	r3, [pc, #356]	; (8002aa4 <HAL_ADC_MspInit+0x198>)
 8002940:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002944:	f003 0320 	and.w	r3, r3, #32
 8002948:	61bb      	str	r3, [r7, #24]
 800294a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800294c:	4b55      	ldr	r3, [pc, #340]	; (8002aa4 <HAL_ADC_MspInit+0x198>)
 800294e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002952:	4a54      	ldr	r2, [pc, #336]	; (8002aa4 <HAL_ADC_MspInit+0x198>)
 8002954:	f043 0304 	orr.w	r3, r3, #4
 8002958:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800295c:	4b51      	ldr	r3, [pc, #324]	; (8002aa4 <HAL_ADC_MspInit+0x198>)
 800295e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 800296a:	2301      	movs	r3, #1
 800296c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800296e:	2303      	movs	r3, #3
 8002970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002972:	2300      	movs	r3, #0
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002976:	f107 031c 	add.w	r3, r7, #28
 800297a:	4619      	mov	r1, r3
 800297c:	484a      	ldr	r0, [pc, #296]	; (8002aa8 <HAL_ADC_MspInit+0x19c>)
 800297e:	f005 f935 	bl	8007bec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8002982:	4b4a      	ldr	r3, [pc, #296]	; (8002aac <HAL_ADC_MspInit+0x1a0>)
 8002984:	4a4a      	ldr	r2, [pc, #296]	; (8002ab0 <HAL_ADC_MspInit+0x1a4>)
 8002986:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002988:	4b48      	ldr	r3, [pc, #288]	; (8002aac <HAL_ADC_MspInit+0x1a0>)
 800298a:	2209      	movs	r2, #9
 800298c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800298e:	4b47      	ldr	r3, [pc, #284]	; (8002aac <HAL_ADC_MspInit+0x1a0>)
 8002990:	2200      	movs	r2, #0
 8002992:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002994:	4b45      	ldr	r3, [pc, #276]	; (8002aac <HAL_ADC_MspInit+0x1a0>)
 8002996:	2200      	movs	r2, #0
 8002998:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800299a:	4b44      	ldr	r3, [pc, #272]	; (8002aac <HAL_ADC_MspInit+0x1a0>)
 800299c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029a2:	4b42      	ldr	r3, [pc, #264]	; (8002aac <HAL_ADC_MspInit+0x1a0>)
 80029a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029aa:	4b40      	ldr	r3, [pc, #256]	; (8002aac <HAL_ADC_MspInit+0x1a0>)
 80029ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80029b2:	4b3e      	ldr	r3, [pc, #248]	; (8002aac <HAL_ADC_MspInit+0x1a0>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80029b8:	4b3c      	ldr	r3, [pc, #240]	; (8002aac <HAL_ADC_MspInit+0x1a0>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029be:	4b3b      	ldr	r3, [pc, #236]	; (8002aac <HAL_ADC_MspInit+0x1a0>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80029c4:	4839      	ldr	r0, [pc, #228]	; (8002aac <HAL_ADC_MspInit+0x1a0>)
 80029c6:	f002 fcd9 	bl	800537c <HAL_DMA_Init>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80029d0:	f7ff ff7c 	bl	80028cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a35      	ldr	r2, [pc, #212]	; (8002aac <HAL_ADC_MspInit+0x1a0>)
 80029d8:	659a      	str	r2, [r3, #88]	; 0x58
 80029da:	4a34      	ldr	r2, [pc, #208]	; (8002aac <HAL_ADC_MspInit+0x1a0>)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80029e0:	e059      	b.n	8002a96 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a33      	ldr	r2, [pc, #204]	; (8002ab4 <HAL_ADC_MspInit+0x1a8>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d154      	bne.n	8002a96 <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80029ec:	4b2d      	ldr	r3, [pc, #180]	; (8002aa4 <HAL_ADC_MspInit+0x198>)
 80029ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f2:	4a2c      	ldr	r2, [pc, #176]	; (8002aa4 <HAL_ADC_MspInit+0x198>)
 80029f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029fc:	4b29      	ldr	r3, [pc, #164]	; (8002aa4 <HAL_ADC_MspInit+0x198>)
 80029fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a0a:	4b26      	ldr	r3, [pc, #152]	; (8002aa4 <HAL_ADC_MspInit+0x198>)
 8002a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a10:	4a24      	ldr	r2, [pc, #144]	; (8002aa4 <HAL_ADC_MspInit+0x198>)
 8002a12:	f043 0304 	orr.w	r3, r3, #4
 8002a16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a1a:	4b22      	ldr	r3, [pc, #136]	; (8002aa4 <HAL_ADC_MspInit+0x198>)
 8002a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002a28:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002a2c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002a30:	f001 f80e 	bl	8003a50 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002a34:	4b20      	ldr	r3, [pc, #128]	; (8002ab8 <HAL_ADC_MspInit+0x1ac>)
 8002a36:	4a21      	ldr	r2, [pc, #132]	; (8002abc <HAL_ADC_MspInit+0x1b0>)
 8002a38:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002a3a:	4b1f      	ldr	r3, [pc, #124]	; (8002ab8 <HAL_ADC_MspInit+0x1ac>)
 8002a3c:	2273      	movs	r2, #115	; 0x73
 8002a3e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a40:	4b1d      	ldr	r3, [pc, #116]	; (8002ab8 <HAL_ADC_MspInit+0x1ac>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a46:	4b1c      	ldr	r3, [pc, #112]	; (8002ab8 <HAL_ADC_MspInit+0x1ac>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002a4c:	4b1a      	ldr	r3, [pc, #104]	; (8002ab8 <HAL_ADC_MspInit+0x1ac>)
 8002a4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a52:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a54:	4b18      	ldr	r3, [pc, #96]	; (8002ab8 <HAL_ADC_MspInit+0x1ac>)
 8002a56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a5a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a5c:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <HAL_ADC_MspInit+0x1ac>)
 8002a5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a62:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002a64:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <HAL_ADC_MspInit+0x1ac>)
 8002a66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a6a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002a6c:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <HAL_ADC_MspInit+0x1ac>)
 8002a6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a72:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a74:	4b10      	ldr	r3, [pc, #64]	; (8002ab8 <HAL_ADC_MspInit+0x1ac>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002a7a:	480f      	ldr	r0, [pc, #60]	; (8002ab8 <HAL_ADC_MspInit+0x1ac>)
 8002a7c:	f002 fc7e 	bl	800537c <HAL_DMA_Init>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002a86:	f7ff ff21 	bl	80028cc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <HAL_ADC_MspInit+0x1ac>)
 8002a8e:	659a      	str	r2, [r3, #88]	; 0x58
 8002a90:	4a09      	ldr	r2, [pc, #36]	; (8002ab8 <HAL_ADC_MspInit+0x1ac>)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002a96:	bf00      	nop
 8002a98:	3730      	adds	r7, #48	; 0x30
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40022000 	.word	0x40022000
 8002aa4:	58024400 	.word	0x58024400
 8002aa8:	58020800 	.word	0x58020800
 8002aac:	24000cd8 	.word	0x24000cd8
 8002ab0:	40020088 	.word	0x40020088
 8002ab4:	58026000 	.word	0x58026000
 8002ab8:	24000d50 	.word	0x24000d50
 8002abc:	400204b8 	.word	0x400204b8

08002ac0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b0b8      	sub	sp, #224	; 0xe0
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	60da      	str	r2, [r3, #12]
 8002ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ad8:	f107 0310 	add.w	r3, r7, #16
 8002adc:	22b8      	movs	r2, #184	; 0xb8
 8002ade:	2100      	movs	r1, #0
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f014 fad9 	bl	8017098 <memset>
  if(hfdcan->Instance==FDCAN3)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a26      	ldr	r2, [pc, #152]	; (8002b84 <HAL_FDCAN_MspInit+0xc4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d145      	bne.n	8002b7c <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002af0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002af4:	f04f 0300 	mov.w	r3, #0
 8002af8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002afc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002b00:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b02:	f107 0310 	add.w	r3, r7, #16
 8002b06:	4618      	mov	r0, r3
 8002b08:	f007 fe5e 	bl	800a7c8 <HAL_RCCEx_PeriphCLKConfig>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002b12:	f7ff fedb 	bl	80028cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002b16:	4b1c      	ldr	r3, [pc, #112]	; (8002b88 <HAL_FDCAN_MspInit+0xc8>)
 8002b18:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002b1c:	4a1a      	ldr	r2, [pc, #104]	; (8002b88 <HAL_FDCAN_MspInit+0xc8>)
 8002b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b22:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002b26:	4b18      	ldr	r3, [pc, #96]	; (8002b88 <HAL_FDCAN_MspInit+0xc8>)
 8002b28:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b34:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <HAL_FDCAN_MspInit+0xc8>)
 8002b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b3a:	4a13      	ldr	r2, [pc, #76]	; (8002b88 <HAL_FDCAN_MspInit+0xc8>)
 8002b3c:	f043 0320 	orr.w	r3, r3, #32
 8002b40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b44:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <HAL_FDCAN_MspInit+0xc8>)
 8002b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b4a:	f003 0320 	and.w	r3, r3, #32
 8002b4e:	60bb      	str	r3, [r7, #8]
 8002b50:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b52:	23c0      	movs	r3, #192	; 0xc0
 8002b54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b74:	4619      	mov	r1, r3
 8002b76:	4805      	ldr	r0, [pc, #20]	; (8002b8c <HAL_FDCAN_MspInit+0xcc>)
 8002b78:	f005 f838 	bl	8007bec <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002b7c:	bf00      	nop
 8002b7e:	37e0      	adds	r7, #224	; 0xe0
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	4000d400 	.word	0x4000d400
 8002b88:	58024400 	.word	0x58024400
 8002b8c:	58021400 	.word	0x58021400

08002b90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b0b8      	sub	sp, #224	; 0xe0
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	60da      	str	r2, [r3, #12]
 8002ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ba8:	f107 0310 	add.w	r3, r7, #16
 8002bac:	22b8      	movs	r2, #184	; 0xb8
 8002bae:	2100      	movs	r1, #0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f014 fa71 	bl	8017098 <memset>
  if(hi2c->Instance==I2C2)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a2a      	ldr	r2, [pc, #168]	; (8002c64 <HAL_I2C_MspInit+0xd4>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d14d      	bne.n	8002c5c <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002bc0:	f04f 0208 	mov.w	r2, #8
 8002bc4:	f04f 0300 	mov.w	r3, #0
 8002bc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bd2:	f107 0310 	add.w	r3, r7, #16
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f007 fdf6 	bl	800a7c8 <HAL_RCCEx_PeriphCLKConfig>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002be2:	f7ff fe73 	bl	80028cc <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002be6:	4b20      	ldr	r3, [pc, #128]	; (8002c68 <HAL_I2C_MspInit+0xd8>)
 8002be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bec:	4a1e      	ldr	r2, [pc, #120]	; (8002c68 <HAL_I2C_MspInit+0xd8>)
 8002bee:	f043 0320 	orr.w	r3, r3, #32
 8002bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bf6:	4b1c      	ldr	r3, [pc, #112]	; (8002c68 <HAL_I2C_MspInit+0xd8>)
 8002bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bfc:	f003 0320 	and.w	r3, r3, #32
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c04:	2303      	movs	r3, #3
 8002c06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c0a:	2312      	movs	r3, #18
 8002c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c16:	2300      	movs	r3, #0
 8002c18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c1c:	2304      	movs	r3, #4
 8002c1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c22:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c26:	4619      	mov	r1, r3
 8002c28:	4810      	ldr	r0, [pc, #64]	; (8002c6c <HAL_I2C_MspInit+0xdc>)
 8002c2a:	f004 ffdf 	bl	8007bec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c2e:	4b0e      	ldr	r3, [pc, #56]	; (8002c68 <HAL_I2C_MspInit+0xd8>)
 8002c30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c34:	4a0c      	ldr	r2, [pc, #48]	; (8002c68 <HAL_I2C_MspInit+0xd8>)
 8002c36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <HAL_I2C_MspInit+0xd8>)
 8002c40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2101      	movs	r1, #1
 8002c50:	2021      	movs	r0, #33	; 0x21
 8002c52:	f002 fb5e 	bl	8005312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002c56:	2021      	movs	r0, #33	; 0x21
 8002c58:	f002 fb75 	bl	8005346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002c5c:	bf00      	nop
 8002c5e:	37e0      	adds	r7, #224	; 0xe0
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40005800 	.word	0x40005800
 8002c68:	58024400 	.word	0x58024400
 8002c6c:	58021400 	.word	0x58021400

08002c70 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b0ba      	sub	sp, #232	; 0xe8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	609a      	str	r2, [r3, #8]
 8002c84:	60da      	str	r2, [r3, #12]
 8002c86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c88:	f107 0318 	add.w	r3, r7, #24
 8002c8c:	22b8      	movs	r2, #184	; 0xb8
 8002c8e:	2100      	movs	r1, #0
 8002c90:	4618      	mov	r0, r3
 8002c92:	f014 fa01 	bl	8017098 <memset>
  if(hsd->Instance==SDMMC2)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a5d      	ldr	r2, [pc, #372]	; (8002e10 <HAL_SD_MspInit+0x1a0>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	f040 80b3 	bne.w	8002e08 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002ca2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cb2:	f107 0318 	add.w	r3, r7, #24
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f007 fd86 	bl	800a7c8 <HAL_RCCEx_PeriphCLKConfig>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8002cc2:	f7ff fe03 	bl	80028cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002cc6:	4b53      	ldr	r3, [pc, #332]	; (8002e14 <HAL_SD_MspInit+0x1a4>)
 8002cc8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002ccc:	4a51      	ldr	r2, [pc, #324]	; (8002e14 <HAL_SD_MspInit+0x1a4>)
 8002cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cd2:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002cd6:	4b4f      	ldr	r3, [pc, #316]	; (8002e14 <HAL_SD_MspInit+0x1a4>)
 8002cd8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002cdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ce0:	617b      	str	r3, [r7, #20]
 8002ce2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ce4:	4b4b      	ldr	r3, [pc, #300]	; (8002e14 <HAL_SD_MspInit+0x1a4>)
 8002ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cea:	4a4a      	ldr	r2, [pc, #296]	; (8002e14 <HAL_SD_MspInit+0x1a4>)
 8002cec:	f043 0308 	orr.w	r3, r3, #8
 8002cf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cf4:	4b47      	ldr	r3, [pc, #284]	; (8002e14 <HAL_SD_MspInit+0x1a4>)
 8002cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	613b      	str	r3, [r7, #16]
 8002d00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d02:	4b44      	ldr	r3, [pc, #272]	; (8002e14 <HAL_SD_MspInit+0x1a4>)
 8002d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d08:	4a42      	ldr	r2, [pc, #264]	; (8002e14 <HAL_SD_MspInit+0x1a4>)
 8002d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d12:	4b40      	ldr	r3, [pc, #256]	; (8002e14 <HAL_SD_MspInit+0x1a4>)
 8002d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d20:	2340      	movs	r3, #64	; 0x40
 8002d22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d26:	2302      	movs	r3, #2
 8002d28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d32:	2303      	movs	r3, #3
 8002d34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002d38:	230b      	movs	r3, #11
 8002d3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d3e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d42:	4619      	mov	r1, r3
 8002d44:	4834      	ldr	r0, [pc, #208]	; (8002e18 <HAL_SD_MspInit+0x1a8>)
 8002d46:	f004 ff51 	bl	8007bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002d4a:	2380      	movs	r3, #128	; 0x80
 8002d4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d50:	2302      	movs	r3, #2
 8002d52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d56:	2301      	movs	r3, #1
 8002d58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002d62:	230b      	movs	r3, #11
 8002d64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d68:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	482a      	ldr	r0, [pc, #168]	; (8002e18 <HAL_SD_MspInit+0x1a8>)
 8002d70:	f004 ff3c 	bl	8007bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d82:	2301      	movs	r3, #1
 8002d84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002d8e:	230b      	movs	r3, #11
 8002d90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d94:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4820      	ldr	r0, [pc, #128]	; (8002e1c <HAL_SD_MspInit+0x1ac>)
 8002d9c:	f004 ff26 	bl	8007bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002da4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da8:	2302      	movs	r3, #2
 8002daa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db4:	2303      	movs	r3, #3
 8002db6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002dba:	230b      	movs	r3, #11
 8002dbc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002dc0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4815      	ldr	r0, [pc, #84]	; (8002e1c <HAL_SD_MspInit+0x1ac>)
 8002dc8:	f004 ff10 	bl	8007bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002dcc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002dd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de0:	2303      	movs	r3, #3
 8002de2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8002de6:	230a      	movs	r3, #10
 8002de8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002dec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002df0:	4619      	mov	r1, r3
 8002df2:	480a      	ldr	r0, [pc, #40]	; (8002e1c <HAL_SD_MspInit+0x1ac>)
 8002df4:	f004 fefa 	bl	8007bec <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8002df8:	2200      	movs	r2, #0
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	207c      	movs	r0, #124	; 0x7c
 8002dfe:	f002 fa88 	bl	8005312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8002e02:	207c      	movs	r0, #124	; 0x7c
 8002e04:	f002 fa9f 	bl	8005346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8002e08:	bf00      	nop
 8002e0a:	37e8      	adds	r7, #232	; 0xe8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	48022400 	.word	0x48022400
 8002e14:	58024400 	.word	0x58024400
 8002e18:	58020c00 	.word	0x58020c00
 8002e1c:	58021800 	.word	0x58021800

08002e20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08e      	sub	sp, #56	; 0x38
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a4f      	ldr	r2, [pc, #316]	; (8002f7c <HAL_SPI_MspInit+0x15c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d12e      	bne.n	8002ea0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e42:	4b4f      	ldr	r3, [pc, #316]	; (8002f80 <HAL_SPI_MspInit+0x160>)
 8002e44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e48:	4a4d      	ldr	r2, [pc, #308]	; (8002f80 <HAL_SPI_MspInit+0x160>)
 8002e4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e4e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e52:	4b4b      	ldr	r3, [pc, #300]	; (8002f80 <HAL_SPI_MspInit+0x160>)
 8002e54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e5c:	623b      	str	r3, [r7, #32]
 8002e5e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e60:	4b47      	ldr	r3, [pc, #284]	; (8002f80 <HAL_SPI_MspInit+0x160>)
 8002e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e66:	4a46      	ldr	r2, [pc, #280]	; (8002f80 <HAL_SPI_MspInit+0x160>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e70:	4b43      	ldr	r3, [pc, #268]	; (8002f80 <HAL_SPI_MspInit+0x160>)
 8002e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	61fb      	str	r3, [r7, #28]
 8002e7c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002e7e:	23e0      	movs	r3, #224	; 0xe0
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e82:	2302      	movs	r3, #2
 8002e84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e8e:	2305      	movs	r3, #5
 8002e90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e96:	4619      	mov	r1, r3
 8002e98:	483a      	ldr	r0, [pc, #232]	; (8002f84 <HAL_SPI_MspInit+0x164>)
 8002e9a:	f004 fea7 	bl	8007bec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002e9e:	e068      	b.n	8002f72 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a38      	ldr	r2, [pc, #224]	; (8002f88 <HAL_SPI_MspInit+0x168>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d12f      	bne.n	8002f0a <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002eaa:	4b35      	ldr	r3, [pc, #212]	; (8002f80 <HAL_SPI_MspInit+0x160>)
 8002eac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002eb0:	4a33      	ldr	r2, [pc, #204]	; (8002f80 <HAL_SPI_MspInit+0x160>)
 8002eb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eb6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002eba:	4b31      	ldr	r3, [pc, #196]	; (8002f80 <HAL_SPI_MspInit+0x160>)
 8002ebc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ec4:	61bb      	str	r3, [r7, #24]
 8002ec6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec8:	4b2d      	ldr	r3, [pc, #180]	; (8002f80 <HAL_SPI_MspInit+0x160>)
 8002eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ece:	4a2c      	ldr	r2, [pc, #176]	; (8002f80 <HAL_SPI_MspInit+0x160>)
 8002ed0:	f043 0302 	orr.w	r3, r3, #2
 8002ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ed8:	4b29      	ldr	r3, [pc, #164]	; (8002f80 <HAL_SPI_MspInit+0x160>)
 8002eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	617b      	str	r3, [r7, #20]
 8002ee4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002ee6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eec:	2302      	movs	r3, #2
 8002eee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ef8:	2305      	movs	r3, #5
 8002efa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f00:	4619      	mov	r1, r3
 8002f02:	4822      	ldr	r0, [pc, #136]	; (8002f8c <HAL_SPI_MspInit+0x16c>)
 8002f04:	f004 fe72 	bl	8007bec <HAL_GPIO_Init>
}
 8002f08:	e033      	b.n	8002f72 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a20      	ldr	r2, [pc, #128]	; (8002f90 <HAL_SPI_MspInit+0x170>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d12e      	bne.n	8002f72 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002f14:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <HAL_SPI_MspInit+0x160>)
 8002f16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f1a:	4a19      	ldr	r2, [pc, #100]	; (8002f80 <HAL_SPI_MspInit+0x160>)
 8002f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f20:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f24:	4b16      	ldr	r3, [pc, #88]	; (8002f80 <HAL_SPI_MspInit+0x160>)
 8002f26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f2e:	613b      	str	r3, [r7, #16]
 8002f30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f32:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <HAL_SPI_MspInit+0x160>)
 8002f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f38:	4a11      	ldr	r2, [pc, #68]	; (8002f80 <HAL_SPI_MspInit+0x160>)
 8002f3a:	f043 0304 	orr.w	r3, r3, #4
 8002f3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f42:	4b0f      	ldr	r3, [pc, #60]	; (8002f80 <HAL_SPI_MspInit+0x160>)
 8002f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002f50:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f56:	2302      	movs	r3, #2
 8002f58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f62:	2306      	movs	r3, #6
 8002f64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4809      	ldr	r0, [pc, #36]	; (8002f94 <HAL_SPI_MspInit+0x174>)
 8002f6e:	f004 fe3d 	bl	8007bec <HAL_GPIO_Init>
}
 8002f72:	bf00      	nop
 8002f74:	3738      	adds	r7, #56	; 0x38
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40013000 	.word	0x40013000
 8002f80:	58024400 	.word	0x58024400
 8002f84:	58020000 	.word	0x58020000
 8002f88:	40003800 	.word	0x40003800
 8002f8c:	58020400 	.word	0x58020400
 8002f90:	40003c00 	.word	0x40003c00
 8002f94:	58020800 	.word	0x58020800

08002f98 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08c      	sub	sp, #48	; 0x30
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa0:	f107 031c 	add.w	r3, r7, #28
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	605a      	str	r2, [r3, #4]
 8002faa:	609a      	str	r2, [r3, #8]
 8002fac:	60da      	str	r2, [r3, #12]
 8002fae:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb8:	d15d      	bne.n	8003076 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fba:	4b8e      	ldr	r3, [pc, #568]	; (80031f4 <HAL_TIM_PWM_MspInit+0x25c>)
 8002fbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fc0:	4a8c      	ldr	r2, [pc, #560]	; (80031f4 <HAL_TIM_PWM_MspInit+0x25c>)
 8002fc2:	f043 0301 	orr.w	r3, r3, #1
 8002fc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fca:	4b8a      	ldr	r3, [pc, #552]	; (80031f4 <HAL_TIM_PWM_MspInit+0x25c>)
 8002fcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	61bb      	str	r3, [r7, #24]
 8002fd6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd8:	4b86      	ldr	r3, [pc, #536]	; (80031f4 <HAL_TIM_PWM_MspInit+0x25c>)
 8002fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fde:	4a85      	ldr	r2, [pc, #532]	; (80031f4 <HAL_TIM_PWM_MspInit+0x25c>)
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fe8:	4b82      	ldr	r3, [pc, #520]	; (80031f4 <HAL_TIM_PWM_MspInit+0x25c>)
 8002fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003002:	2300      	movs	r3, #0
 8003004:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003006:	2301      	movs	r3, #1
 8003008:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800300a:	f107 031c 	add.w	r3, r7, #28
 800300e:	4619      	mov	r1, r3
 8003010:	4879      	ldr	r0, [pc, #484]	; (80031f8 <HAL_TIM_PWM_MspInit+0x260>)
 8003012:	f004 fdeb 	bl	8007bec <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8003016:	4b79      	ldr	r3, [pc, #484]	; (80031fc <HAL_TIM_PWM_MspInit+0x264>)
 8003018:	4a79      	ldr	r2, [pc, #484]	; (8003200 <HAL_TIM_PWM_MspInit+0x268>)
 800301a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 800301c:	4b77      	ldr	r3, [pc, #476]	; (80031fc <HAL_TIM_PWM_MspInit+0x264>)
 800301e:	2214      	movs	r2, #20
 8003020:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003022:	4b76      	ldr	r3, [pc, #472]	; (80031fc <HAL_TIM_PWM_MspInit+0x264>)
 8003024:	2240      	movs	r2, #64	; 0x40
 8003026:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003028:	4b74      	ldr	r3, [pc, #464]	; (80031fc <HAL_TIM_PWM_MspInit+0x264>)
 800302a:	2200      	movs	r2, #0
 800302c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800302e:	4b73      	ldr	r3, [pc, #460]	; (80031fc <HAL_TIM_PWM_MspInit+0x264>)
 8003030:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003034:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003036:	4b71      	ldr	r3, [pc, #452]	; (80031fc <HAL_TIM_PWM_MspInit+0x264>)
 8003038:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800303c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800303e:	4b6f      	ldr	r3, [pc, #444]	; (80031fc <HAL_TIM_PWM_MspInit+0x264>)
 8003040:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003044:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8003046:	4b6d      	ldr	r3, [pc, #436]	; (80031fc <HAL_TIM_PWM_MspInit+0x264>)
 8003048:	2200      	movs	r2, #0
 800304a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800304c:	4b6b      	ldr	r3, [pc, #428]	; (80031fc <HAL_TIM_PWM_MspInit+0x264>)
 800304e:	2200      	movs	r2, #0
 8003050:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003052:	4b6a      	ldr	r3, [pc, #424]	; (80031fc <HAL_TIM_PWM_MspInit+0x264>)
 8003054:	2200      	movs	r2, #0
 8003056:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8003058:	4868      	ldr	r0, [pc, #416]	; (80031fc <HAL_TIM_PWM_MspInit+0x264>)
 800305a:	f002 f98f 	bl	800537c <HAL_DMA_Init>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8003064:	f7ff fc32 	bl	80028cc <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a64      	ldr	r2, [pc, #400]	; (80031fc <HAL_TIM_PWM_MspInit+0x264>)
 800306c:	62da      	str	r2, [r3, #44]	; 0x2c
 800306e:	4a63      	ldr	r2, [pc, #396]	; (80031fc <HAL_TIM_PWM_MspInit+0x264>)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003074:	e119      	b.n	80032aa <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a62      	ldr	r2, [pc, #392]	; (8003204 <HAL_TIM_PWM_MspInit+0x26c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d16d      	bne.n	800315c <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003080:	4b5c      	ldr	r3, [pc, #368]	; (80031f4 <HAL_TIM_PWM_MspInit+0x25c>)
 8003082:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003086:	4a5b      	ldr	r2, [pc, #364]	; (80031f4 <HAL_TIM_PWM_MspInit+0x25c>)
 8003088:	f043 0302 	orr.w	r3, r3, #2
 800308c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003090:	4b58      	ldr	r3, [pc, #352]	; (80031f4 <HAL_TIM_PWM_MspInit+0x25c>)
 8003092:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	613b      	str	r3, [r7, #16]
 800309c:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 800309e:	4b5a      	ldr	r3, [pc, #360]	; (8003208 <HAL_TIM_PWM_MspInit+0x270>)
 80030a0:	4a5a      	ldr	r2, [pc, #360]	; (800320c <HAL_TIM_PWM_MspInit+0x274>)
 80030a2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 80030a4:	4b58      	ldr	r3, [pc, #352]	; (8003208 <HAL_TIM_PWM_MspInit+0x270>)
 80030a6:	2218      	movs	r2, #24
 80030a8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030aa:	4b57      	ldr	r3, [pc, #348]	; (8003208 <HAL_TIM_PWM_MspInit+0x270>)
 80030ac:	2240      	movs	r2, #64	; 0x40
 80030ae:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80030b0:	4b55      	ldr	r3, [pc, #340]	; (8003208 <HAL_TIM_PWM_MspInit+0x270>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80030b6:	4b54      	ldr	r3, [pc, #336]	; (8003208 <HAL_TIM_PWM_MspInit+0x270>)
 80030b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030bc:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030be:	4b52      	ldr	r3, [pc, #328]	; (8003208 <HAL_TIM_PWM_MspInit+0x270>)
 80030c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030c4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80030c6:	4b50      	ldr	r3, [pc, #320]	; (8003208 <HAL_TIM_PWM_MspInit+0x270>)
 80030c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030cc:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 80030ce:	4b4e      	ldr	r3, [pc, #312]	; (8003208 <HAL_TIM_PWM_MspInit+0x270>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80030d4:	4b4c      	ldr	r3, [pc, #304]	; (8003208 <HAL_TIM_PWM_MspInit+0x270>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030da:	4b4b      	ldr	r3, [pc, #300]	; (8003208 <HAL_TIM_PWM_MspInit+0x270>)
 80030dc:	2200      	movs	r2, #0
 80030de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80030e0:	4849      	ldr	r0, [pc, #292]	; (8003208 <HAL_TIM_PWM_MspInit+0x270>)
 80030e2:	f002 f94b 	bl	800537c <HAL_DMA_Init>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 80030ec:	f7ff fbee 	bl	80028cc <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a45      	ldr	r2, [pc, #276]	; (8003208 <HAL_TIM_PWM_MspInit+0x270>)
 80030f4:	629a      	str	r2, [r3, #40]	; 0x28
 80030f6:	4a44      	ldr	r2, [pc, #272]	; (8003208 <HAL_TIM_PWM_MspInit+0x270>)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 80030fc:	4b44      	ldr	r3, [pc, #272]	; (8003210 <HAL_TIM_PWM_MspInit+0x278>)
 80030fe:	4a45      	ldr	r2, [pc, #276]	; (8003214 <HAL_TIM_PWM_MspInit+0x27c>)
 8003100:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8003102:	4b43      	ldr	r3, [pc, #268]	; (8003210 <HAL_TIM_PWM_MspInit+0x278>)
 8003104:	2217      	movs	r2, #23
 8003106:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003108:	4b41      	ldr	r3, [pc, #260]	; (8003210 <HAL_TIM_PWM_MspInit+0x278>)
 800310a:	2240      	movs	r2, #64	; 0x40
 800310c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800310e:	4b40      	ldr	r3, [pc, #256]	; (8003210 <HAL_TIM_PWM_MspInit+0x278>)
 8003110:	2200      	movs	r2, #0
 8003112:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003114:	4b3e      	ldr	r3, [pc, #248]	; (8003210 <HAL_TIM_PWM_MspInit+0x278>)
 8003116:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800311a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800311c:	4b3c      	ldr	r3, [pc, #240]	; (8003210 <HAL_TIM_PWM_MspInit+0x278>)
 800311e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003122:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003124:	4b3a      	ldr	r3, [pc, #232]	; (8003210 <HAL_TIM_PWM_MspInit+0x278>)
 8003126:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800312a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 800312c:	4b38      	ldr	r3, [pc, #224]	; (8003210 <HAL_TIM_PWM_MspInit+0x278>)
 800312e:	2200      	movs	r2, #0
 8003130:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003132:	4b37      	ldr	r3, [pc, #220]	; (8003210 <HAL_TIM_PWM_MspInit+0x278>)
 8003134:	2200      	movs	r2, #0
 8003136:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003138:	4b35      	ldr	r3, [pc, #212]	; (8003210 <HAL_TIM_PWM_MspInit+0x278>)
 800313a:	2200      	movs	r2, #0
 800313c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 800313e:	4834      	ldr	r0, [pc, #208]	; (8003210 <HAL_TIM_PWM_MspInit+0x278>)
 8003140:	f002 f91c 	bl	800537c <HAL_DMA_Init>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 800314a:	f7ff fbbf 	bl	80028cc <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a2f      	ldr	r2, [pc, #188]	; (8003210 <HAL_TIM_PWM_MspInit+0x278>)
 8003152:	625a      	str	r2, [r3, #36]	; 0x24
 8003154:	4a2e      	ldr	r2, [pc, #184]	; (8003210 <HAL_TIM_PWM_MspInit+0x278>)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6393      	str	r3, [r2, #56]	; 0x38
}
 800315a:	e0a6      	b.n	80032aa <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a2d      	ldr	r2, [pc, #180]	; (8003218 <HAL_TIM_PWM_MspInit+0x280>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d15e      	bne.n	8003224 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003166:	4b23      	ldr	r3, [pc, #140]	; (80031f4 <HAL_TIM_PWM_MspInit+0x25c>)
 8003168:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800316c:	4a21      	ldr	r2, [pc, #132]	; (80031f4 <HAL_TIM_PWM_MspInit+0x25c>)
 800316e:	f043 0304 	orr.w	r3, r3, #4
 8003172:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003176:	4b1f      	ldr	r3, [pc, #124]	; (80031f4 <HAL_TIM_PWM_MspInit+0x25c>)
 8003178:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8003184:	4b25      	ldr	r3, [pc, #148]	; (800321c <HAL_TIM_PWM_MspInit+0x284>)
 8003186:	4a26      	ldr	r2, [pc, #152]	; (8003220 <HAL_TIM_PWM_MspInit+0x288>)
 8003188:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 800318a:	4b24      	ldr	r3, [pc, #144]	; (800321c <HAL_TIM_PWM_MspInit+0x284>)
 800318c:	221f      	movs	r2, #31
 800318e:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003190:	4b22      	ldr	r3, [pc, #136]	; (800321c <HAL_TIM_PWM_MspInit+0x284>)
 8003192:	2240      	movs	r2, #64	; 0x40
 8003194:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003196:	4b21      	ldr	r3, [pc, #132]	; (800321c <HAL_TIM_PWM_MspInit+0x284>)
 8003198:	2200      	movs	r2, #0
 800319a:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800319c:	4b1f      	ldr	r3, [pc, #124]	; (800321c <HAL_TIM_PWM_MspInit+0x284>)
 800319e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031a2:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031a4:	4b1d      	ldr	r3, [pc, #116]	; (800321c <HAL_TIM_PWM_MspInit+0x284>)
 80031a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031aa:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80031ac:	4b1b      	ldr	r3, [pc, #108]	; (800321c <HAL_TIM_PWM_MspInit+0x284>)
 80031ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031b2:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 80031b4:	4b19      	ldr	r3, [pc, #100]	; (800321c <HAL_TIM_PWM_MspInit+0x284>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80031ba:	4b18      	ldr	r3, [pc, #96]	; (800321c <HAL_TIM_PWM_MspInit+0x284>)
 80031bc:	2200      	movs	r2, #0
 80031be:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031c0:	4b16      	ldr	r3, [pc, #88]	; (800321c <HAL_TIM_PWM_MspInit+0x284>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80031c6:	4815      	ldr	r0, [pc, #84]	; (800321c <HAL_TIM_PWM_MspInit+0x284>)
 80031c8:	f002 f8d8 	bl	800537c <HAL_DMA_Init>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 80031d2:	f7ff fb7b 	bl	80028cc <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a10      	ldr	r2, [pc, #64]	; (800321c <HAL_TIM_PWM_MspInit+0x284>)
 80031da:	62da      	str	r2, [r3, #44]	; 0x2c
 80031dc:	4a0f      	ldr	r2, [pc, #60]	; (800321c <HAL_TIM_PWM_MspInit+0x284>)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80031e2:	2200      	movs	r2, #0
 80031e4:	2100      	movs	r1, #0
 80031e6:	201e      	movs	r0, #30
 80031e8:	f002 f893 	bl	8005312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80031ec:	201e      	movs	r0, #30
 80031ee:	f002 f8aa 	bl	8005346 <HAL_NVIC_EnableIRQ>
}
 80031f2:	e05a      	b.n	80032aa <HAL_TIM_PWM_MspInit+0x312>
 80031f4:	58024400 	.word	0x58024400
 80031f8:	58020000 	.word	0x58020000
 80031fc:	2400124c 	.word	0x2400124c
 8003200:	40020028 	.word	0x40020028
 8003204:	40000400 	.word	0x40000400
 8003208:	240012c4 	.word	0x240012c4
 800320c:	40020058 	.word	0x40020058
 8003210:	2400133c 	.word	0x2400133c
 8003214:	40020070 	.word	0x40020070
 8003218:	40000800 	.word	0x40000800
 800321c:	240013b4 	.word	0x240013b4
 8003220:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a22      	ldr	r2, [pc, #136]	; (80032b4 <HAL_TIM_PWM_MspInit+0x31c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d13d      	bne.n	80032aa <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800322e:	4b22      	ldr	r3, [pc, #136]	; (80032b8 <HAL_TIM_PWM_MspInit+0x320>)
 8003230:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003234:	4a20      	ldr	r2, [pc, #128]	; (80032b8 <HAL_TIM_PWM_MspInit+0x320>)
 8003236:	f043 0308 	orr.w	r3, r3, #8
 800323a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800323e:	4b1e      	ldr	r3, [pc, #120]	; (80032b8 <HAL_TIM_PWM_MspInit+0x320>)
 8003240:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	60bb      	str	r3, [r7, #8]
 800324a:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 800324c:	4b1b      	ldr	r3, [pc, #108]	; (80032bc <HAL_TIM_PWM_MspInit+0x324>)
 800324e:	4a1c      	ldr	r2, [pc, #112]	; (80032c0 <HAL_TIM_PWM_MspInit+0x328>)
 8003250:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8003252:	4b1a      	ldr	r3, [pc, #104]	; (80032bc <HAL_TIM_PWM_MspInit+0x324>)
 8003254:	223a      	movs	r2, #58	; 0x3a
 8003256:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003258:	4b18      	ldr	r3, [pc, #96]	; (80032bc <HAL_TIM_PWM_MspInit+0x324>)
 800325a:	2240      	movs	r2, #64	; 0x40
 800325c:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800325e:	4b17      	ldr	r3, [pc, #92]	; (80032bc <HAL_TIM_PWM_MspInit+0x324>)
 8003260:	2200      	movs	r2, #0
 8003262:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003264:	4b15      	ldr	r3, [pc, #84]	; (80032bc <HAL_TIM_PWM_MspInit+0x324>)
 8003266:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800326a:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800326c:	4b13      	ldr	r3, [pc, #76]	; (80032bc <HAL_TIM_PWM_MspInit+0x324>)
 800326e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003272:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003274:	4b11      	ldr	r3, [pc, #68]	; (80032bc <HAL_TIM_PWM_MspInit+0x324>)
 8003276:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800327a:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 800327c:	4b0f      	ldr	r3, [pc, #60]	; (80032bc <HAL_TIM_PWM_MspInit+0x324>)
 800327e:	2200      	movs	r2, #0
 8003280:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8003282:	4b0e      	ldr	r3, [pc, #56]	; (80032bc <HAL_TIM_PWM_MspInit+0x324>)
 8003284:	2200      	movs	r2, #0
 8003286:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003288:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <HAL_TIM_PWM_MspInit+0x324>)
 800328a:	2200      	movs	r2, #0
 800328c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 800328e:	480b      	ldr	r0, [pc, #44]	; (80032bc <HAL_TIM_PWM_MspInit+0x324>)
 8003290:	f002 f874 	bl	800537c <HAL_DMA_Init>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 800329a:	f7ff fb17 	bl	80028cc <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a06      	ldr	r2, [pc, #24]	; (80032bc <HAL_TIM_PWM_MspInit+0x324>)
 80032a2:	631a      	str	r2, [r3, #48]	; 0x30
 80032a4:	4a05      	ldr	r2, [pc, #20]	; (80032bc <HAL_TIM_PWM_MspInit+0x324>)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80032aa:	bf00      	nop
 80032ac:	3730      	adds	r7, #48	; 0x30
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40000c00 	.word	0x40000c00
 80032b8:	58024400 	.word	0x58024400
 80032bc:	2400142c 	.word	0x2400142c
 80032c0:	40020040 	.word	0x40020040

080032c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a0b      	ldr	r2, [pc, #44]	; (8003300 <HAL_TIM_Base_MspInit+0x3c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d10e      	bne.n	80032f4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80032d6:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <HAL_TIM_Base_MspInit+0x40>)
 80032d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032dc:	4a09      	ldr	r2, [pc, #36]	; (8003304 <HAL_TIM_Base_MspInit+0x40>)
 80032de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032e6:	4b07      	ldr	r3, [pc, #28]	; (8003304 <HAL_TIM_Base_MspInit+0x40>)
 80032e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	40001c00 	.word	0x40001c00
 8003304:	58024400 	.word	0x58024400

08003308 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08c      	sub	sp, #48	; 0x30
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003310:	f107 031c 	add.w	r3, r7, #28
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	605a      	str	r2, [r3, #4]
 800331a:	609a      	str	r2, [r3, #8]
 800331c:	60da      	str	r2, [r3, #12]
 800331e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003328:	d120      	bne.n	800336c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800332a:	4b52      	ldr	r3, [pc, #328]	; (8003474 <HAL_TIM_MspPostInit+0x16c>)
 800332c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003330:	4a50      	ldr	r2, [pc, #320]	; (8003474 <HAL_TIM_MspPostInit+0x16c>)
 8003332:	f043 0302 	orr.w	r3, r3, #2
 8003336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800333a:	4b4e      	ldr	r3, [pc, #312]	; (8003474 <HAL_TIM_MspPostInit+0x16c>)
 800333c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	61bb      	str	r3, [r7, #24]
 8003346:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800334c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334e:	2302      	movs	r3, #2
 8003350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003352:	2302      	movs	r3, #2
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003356:	2300      	movs	r3, #0
 8003358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800335a:	2301      	movs	r3, #1
 800335c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800335e:	f107 031c 	add.w	r3, r7, #28
 8003362:	4619      	mov	r1, r3
 8003364:	4844      	ldr	r0, [pc, #272]	; (8003478 <HAL_TIM_MspPostInit+0x170>)
 8003366:	f004 fc41 	bl	8007bec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800336a:	e07f      	b.n	800346c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a42      	ldr	r2, [pc, #264]	; (800347c <HAL_TIM_MspPostInit+0x174>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d11f      	bne.n	80033b6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003376:	4b3f      	ldr	r3, [pc, #252]	; (8003474 <HAL_TIM_MspPostInit+0x16c>)
 8003378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800337c:	4a3d      	ldr	r2, [pc, #244]	; (8003474 <HAL_TIM_MspPostInit+0x16c>)
 800337e:	f043 0302 	orr.w	r3, r3, #2
 8003382:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003386:	4b3b      	ldr	r3, [pc, #236]	; (8003474 <HAL_TIM_MspPostInit+0x16c>)
 8003388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003394:	2330      	movs	r3, #48	; 0x30
 8003396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003398:	2302      	movs	r3, #2
 800339a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800339c:	2302      	movs	r3, #2
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a0:	2300      	movs	r3, #0
 80033a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80033a4:	2302      	movs	r3, #2
 80033a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033a8:	f107 031c 	add.w	r3, r7, #28
 80033ac:	4619      	mov	r1, r3
 80033ae:	4832      	ldr	r0, [pc, #200]	; (8003478 <HAL_TIM_MspPostInit+0x170>)
 80033b0:	f004 fc1c 	bl	8007bec <HAL_GPIO_Init>
}
 80033b4:	e05a      	b.n	800346c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a31      	ldr	r2, [pc, #196]	; (8003480 <HAL_TIM_MspPostInit+0x178>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d131      	bne.n	8003424 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033c0:	4b2c      	ldr	r3, [pc, #176]	; (8003474 <HAL_TIM_MspPostInit+0x16c>)
 80033c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033c6:	4a2b      	ldr	r2, [pc, #172]	; (8003474 <HAL_TIM_MspPostInit+0x16c>)
 80033c8:	f043 0308 	orr.w	r3, r3, #8
 80033cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033d0:	4b28      	ldr	r3, [pc, #160]	; (8003474 <HAL_TIM_MspPostInit+0x16c>)
 80033d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80033de:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80033e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e4:	2302      	movs	r3, #2
 80033e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ec:	2300      	movs	r3, #0
 80033ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80033f0:	2302      	movs	r3, #2
 80033f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033f4:	f107 031c 	add.w	r3, r7, #28
 80033f8:	4619      	mov	r1, r3
 80033fa:	4822      	ldr	r0, [pc, #136]	; (8003484 <HAL_TIM_MspPostInit+0x17c>)
 80033fc:	f004 fbf6 	bl	8007bec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003400:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003406:	2302      	movs	r3, #2
 8003408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800340a:	2302      	movs	r3, #2
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800340e:	2300      	movs	r3, #0
 8003410:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003412:	2302      	movs	r3, #2
 8003414:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003416:	f107 031c 	add.w	r3, r7, #28
 800341a:	4619      	mov	r1, r3
 800341c:	4819      	ldr	r0, [pc, #100]	; (8003484 <HAL_TIM_MspPostInit+0x17c>)
 800341e:	f004 fbe5 	bl	8007bec <HAL_GPIO_Init>
}
 8003422:	e023      	b.n	800346c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a17      	ldr	r2, [pc, #92]	; (8003488 <HAL_TIM_MspPostInit+0x180>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d11e      	bne.n	800346c <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800342e:	4b11      	ldr	r3, [pc, #68]	; (8003474 <HAL_TIM_MspPostInit+0x16c>)
 8003430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003434:	4a0f      	ldr	r2, [pc, #60]	; (8003474 <HAL_TIM_MspPostInit+0x16c>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800343e:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <HAL_TIM_MspPostInit+0x16c>)
 8003440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800344c:	2308      	movs	r3, #8
 800344e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003450:	2302      	movs	r3, #2
 8003452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003454:	2302      	movs	r3, #2
 8003456:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003458:	2300      	movs	r3, #0
 800345a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800345c:	2302      	movs	r3, #2
 800345e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003460:	f107 031c 	add.w	r3, r7, #28
 8003464:	4619      	mov	r1, r3
 8003466:	4809      	ldr	r0, [pc, #36]	; (800348c <HAL_TIM_MspPostInit+0x184>)
 8003468:	f004 fbc0 	bl	8007bec <HAL_GPIO_Init>
}
 800346c:	bf00      	nop
 800346e:	3730      	adds	r7, #48	; 0x30
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	58024400 	.word	0x58024400
 8003478:	58020400 	.word	0x58020400
 800347c:	40000400 	.word	0x40000400
 8003480:	40000800 	.word	0x40000800
 8003484:	58020c00 	.word	0x58020c00
 8003488:	40000c00 	.word	0x40000c00
 800348c:	58020000 	.word	0x58020000

08003490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b0ba      	sub	sp, #232	; 0xe8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003498:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	605a      	str	r2, [r3, #4]
 80034a2:	609a      	str	r2, [r3, #8]
 80034a4:	60da      	str	r2, [r3, #12]
 80034a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034a8:	f107 0318 	add.w	r3, r7, #24
 80034ac:	22b8      	movs	r2, #184	; 0xb8
 80034ae:	2100      	movs	r1, #0
 80034b0:	4618      	mov	r0, r3
 80034b2:	f013 fdf1 	bl	8017098 <memset>
  if(huart->Instance==UART4)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a4d      	ldr	r2, [pc, #308]	; (80035f0 <HAL_UART_MspInit+0x160>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d147      	bne.n	8003550 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80034c0:	f04f 0202 	mov.w	r2, #2
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80034cc:	2300      	movs	r3, #0
 80034ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034d2:	f107 0318 	add.w	r3, r7, #24
 80034d6:	4618      	mov	r0, r3
 80034d8:	f007 f976 	bl	800a7c8 <HAL_RCCEx_PeriphCLKConfig>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80034e2:	f7ff f9f3 	bl	80028cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80034e6:	4b43      	ldr	r3, [pc, #268]	; (80035f4 <HAL_UART_MspInit+0x164>)
 80034e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034ec:	4a41      	ldr	r2, [pc, #260]	; (80035f4 <HAL_UART_MspInit+0x164>)
 80034ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80034f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034f6:	4b3f      	ldr	r3, [pc, #252]	; (80035f4 <HAL_UART_MspInit+0x164>)
 80034f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003500:	617b      	str	r3, [r7, #20]
 8003502:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003504:	4b3b      	ldr	r3, [pc, #236]	; (80035f4 <HAL_UART_MspInit+0x164>)
 8003506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800350a:	4a3a      	ldr	r2, [pc, #232]	; (80035f4 <HAL_UART_MspInit+0x164>)
 800350c:	f043 0302 	orr.w	r3, r3, #2
 8003510:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003514:	4b37      	ldr	r3, [pc, #220]	; (80035f4 <HAL_UART_MspInit+0x164>)
 8003516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	613b      	str	r3, [r7, #16]
 8003520:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003522:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003526:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352a:	2302      	movs	r3, #2
 800352c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003530:	2300      	movs	r3, #0
 8003532:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003536:	2300      	movs	r3, #0
 8003538:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800353c:	2308      	movs	r3, #8
 800353e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003542:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003546:	4619      	mov	r1, r3
 8003548:	482b      	ldr	r0, [pc, #172]	; (80035f8 <HAL_UART_MspInit+0x168>)
 800354a:	f004 fb4f 	bl	8007bec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800354e:	e04a      	b.n	80035e6 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a29      	ldr	r2, [pc, #164]	; (80035fc <HAL_UART_MspInit+0x16c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d145      	bne.n	80035e6 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800355a:	f04f 0201 	mov.w	r2, #1
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003566:	2300      	movs	r3, #0
 8003568:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800356c:	f107 0318 	add.w	r3, r7, #24
 8003570:	4618      	mov	r0, r3
 8003572:	f007 f929 	bl	800a7c8 <HAL_RCCEx_PeriphCLKConfig>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 800357c:	f7ff f9a6 	bl	80028cc <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003580:	4b1c      	ldr	r3, [pc, #112]	; (80035f4 <HAL_UART_MspInit+0x164>)
 8003582:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003586:	4a1b      	ldr	r2, [pc, #108]	; (80035f4 <HAL_UART_MspInit+0x164>)
 8003588:	f043 0320 	orr.w	r3, r3, #32
 800358c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003590:	4b18      	ldr	r3, [pc, #96]	; (80035f4 <HAL_UART_MspInit+0x164>)
 8003592:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800359e:	4b15      	ldr	r3, [pc, #84]	; (80035f4 <HAL_UART_MspInit+0x164>)
 80035a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035a4:	4a13      	ldr	r2, [pc, #76]	; (80035f4 <HAL_UART_MspInit+0x164>)
 80035a6:	f043 0304 	orr.w	r3, r3, #4
 80035aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035ae:	4b11      	ldr	r3, [pc, #68]	; (80035f4 <HAL_UART_MspInit+0x164>)
 80035b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035bc:	23c0      	movs	r3, #192	; 0xc0
 80035be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c2:	2302      	movs	r3, #2
 80035c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c8:	2300      	movs	r3, #0
 80035ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ce:	2300      	movs	r3, #0
 80035d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80035d4:	2307      	movs	r3, #7
 80035d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035da:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80035de:	4619      	mov	r1, r3
 80035e0:	4807      	ldr	r0, [pc, #28]	; (8003600 <HAL_UART_MspInit+0x170>)
 80035e2:	f004 fb03 	bl	8007bec <HAL_GPIO_Init>
}
 80035e6:	bf00      	nop
 80035e8:	37e8      	adds	r7, #232	; 0xe8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40004c00 	.word	0x40004c00
 80035f4:	58024400 	.word	0x58024400
 80035f8:	58020400 	.word	0x58020400
 80035fc:	40011400 	.word	0x40011400
 8003600:	58020800 	.word	0x58020800

08003604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003608:	e7fe      	b.n	8003608 <NMI_Handler+0x4>

0800360a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800360a:	b480      	push	{r7}
 800360c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800360e:	e7fe      	b.n	800360e <HardFault_Handler+0x4>

08003610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003614:	e7fe      	b.n	8003614 <MemManage_Handler+0x4>

08003616 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003616:	b480      	push	{r7}
 8003618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800361a:	e7fe      	b.n	800361a <BusFault_Handler+0x4>

0800361c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003620:	e7fe      	b.n	8003620 <UsageFault_Handler+0x4>

08003622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003622:	b480      	push	{r7}
 8003624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003626:	bf00      	nop
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003634:	bf00      	nop
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800363e:	b480      	push	{r7}
 8003640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003642:	bf00      	nop
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003650:	f000 f9ba 	bl	80039c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003654:	bf00      	nop
 8003656:	bd80      	pop	{r7, pc}

08003658 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 800365c:	4802      	ldr	r0, [pc, #8]	; (8003668 <DMA1_Stream0_IRQHandler+0x10>)
 800365e:	f002 fc4f 	bl	8005f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003662:	bf00      	nop
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	240013b4 	.word	0x240013b4

0800366c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8003670:	4802      	ldr	r0, [pc, #8]	; (800367c <DMA1_Stream1_IRQHandler+0x10>)
 8003672:	f002 fc45 	bl	8005f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003676:	bf00      	nop
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	2400124c 	.word	0x2400124c

08003680 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003684:	4802      	ldr	r0, [pc, #8]	; (8003690 <DMA1_Stream2_IRQHandler+0x10>)
 8003686:	f002 fc3b 	bl	8005f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800368a:	bf00      	nop
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	2400142c 	.word	0x2400142c

08003694 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003698:	4802      	ldr	r0, [pc, #8]	; (80036a4 <DMA1_Stream3_IRQHandler+0x10>)
 800369a:	f002 fc31 	bl	8005f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800369e:	bf00      	nop
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	240012c4 	.word	0x240012c4

080036a8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 80036ac:	4802      	ldr	r0, [pc, #8]	; (80036b8 <DMA1_Stream4_IRQHandler+0x10>)
 80036ae:	f002 fc27 	bl	8005f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80036b2:	bf00      	nop
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	2400133c 	.word	0x2400133c

080036bc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80036c0:	4802      	ldr	r0, [pc, #8]	; (80036cc <DMA1_Stream5_IRQHandler+0x10>)
 80036c2:	f002 fc1d 	bl	8005f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80036c6:	bf00      	nop
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	24000cd8 	.word	0x24000cd8

080036d0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80036d4:	4802      	ldr	r0, [pc, #8]	; (80036e0 <TIM4_IRQHandler+0x10>)
 80036d6:	f00c fa59 	bl	800fb8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80036da:	bf00      	nop
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	24001168 	.word	0x24001168

080036e4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80036e8:	4802      	ldr	r0, [pc, #8]	; (80036f4 <I2C2_EV_IRQHandler+0x10>)
 80036ea:	f004 fce9 	bl	80080c0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80036ee:	bf00      	nop
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	24000e68 	.word	0x24000e68

080036f8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80036fc:	4802      	ldr	r0, [pc, #8]	; (8003708 <DMA2_Stream7_IRQHandler+0x10>)
 80036fe:	f002 fbff 	bl	8005f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003702:	bf00      	nop
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	24000d50 	.word	0x24000d50

0800370c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003710:	4802      	ldr	r0, [pc, #8]	; (800371c <OTG_HS_IRQHandler+0x10>)
 8003712:	f004 fedf 	bl	80084d4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003716:	bf00      	nop
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	24002ad0 	.word	0x24002ad0

08003720 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8003724:	4802      	ldr	r0, [pc, #8]	; (8003730 <SDMMC2_IRQHandler+0x10>)
 8003726:	f009 fea5 	bl	800d474 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 800372a:	bf00      	nop
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	24000ebc 	.word	0x24000ebc

08003734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800373c:	4a14      	ldr	r2, [pc, #80]	; (8003790 <_sbrk+0x5c>)
 800373e:	4b15      	ldr	r3, [pc, #84]	; (8003794 <_sbrk+0x60>)
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003748:	4b13      	ldr	r3, [pc, #76]	; (8003798 <_sbrk+0x64>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d102      	bne.n	8003756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003750:	4b11      	ldr	r3, [pc, #68]	; (8003798 <_sbrk+0x64>)
 8003752:	4a12      	ldr	r2, [pc, #72]	; (800379c <_sbrk+0x68>)
 8003754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003756:	4b10      	ldr	r3, [pc, #64]	; (8003798 <_sbrk+0x64>)
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4413      	add	r3, r2
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	429a      	cmp	r2, r3
 8003762:	d207      	bcs.n	8003774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003764:	f013 fca0 	bl	80170a8 <__errno>
 8003768:	4603      	mov	r3, r0
 800376a:	220c      	movs	r2, #12
 800376c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800376e:	f04f 33ff 	mov.w	r3, #4294967295
 8003772:	e009      	b.n	8003788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003774:	4b08      	ldr	r3, [pc, #32]	; (8003798 <_sbrk+0x64>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800377a:	4b07      	ldr	r3, [pc, #28]	; (8003798 <_sbrk+0x64>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4413      	add	r3, r2
 8003782:	4a05      	ldr	r2, [pc, #20]	; (8003798 <_sbrk+0x64>)
 8003784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003786:	68fb      	ldr	r3, [r7, #12]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	24050000 	.word	0x24050000
 8003794:	00000800 	.word	0x00000800
 8003798:	240015cc 	.word	0x240015cc
 800379c:	24003348 	.word	0x24003348

080037a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80037a4:	4b32      	ldr	r3, [pc, #200]	; (8003870 <SystemInit+0xd0>)
 80037a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037aa:	4a31      	ldr	r2, [pc, #196]	; (8003870 <SystemInit+0xd0>)
 80037ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80037b4:	4b2f      	ldr	r3, [pc, #188]	; (8003874 <SystemInit+0xd4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 030f 	and.w	r3, r3, #15
 80037bc:	2b06      	cmp	r3, #6
 80037be:	d807      	bhi.n	80037d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80037c0:	4b2c      	ldr	r3, [pc, #176]	; (8003874 <SystemInit+0xd4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f023 030f 	bic.w	r3, r3, #15
 80037c8:	4a2a      	ldr	r2, [pc, #168]	; (8003874 <SystemInit+0xd4>)
 80037ca:	f043 0307 	orr.w	r3, r3, #7
 80037ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80037d0:	4b29      	ldr	r3, [pc, #164]	; (8003878 <SystemInit+0xd8>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a28      	ldr	r2, [pc, #160]	; (8003878 <SystemInit+0xd8>)
 80037d6:	f043 0301 	orr.w	r3, r3, #1
 80037da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80037dc:	4b26      	ldr	r3, [pc, #152]	; (8003878 <SystemInit+0xd8>)
 80037de:	2200      	movs	r2, #0
 80037e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80037e2:	4b25      	ldr	r3, [pc, #148]	; (8003878 <SystemInit+0xd8>)
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	4924      	ldr	r1, [pc, #144]	; (8003878 <SystemInit+0xd8>)
 80037e8:	4b24      	ldr	r3, [pc, #144]	; (800387c <SystemInit+0xdc>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80037ee:	4b21      	ldr	r3, [pc, #132]	; (8003874 <SystemInit+0xd4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d007      	beq.n	800380a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80037fa:	4b1e      	ldr	r3, [pc, #120]	; (8003874 <SystemInit+0xd4>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f023 030f 	bic.w	r3, r3, #15
 8003802:	4a1c      	ldr	r2, [pc, #112]	; (8003874 <SystemInit+0xd4>)
 8003804:	f043 0307 	orr.w	r3, r3, #7
 8003808:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800380a:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <SystemInit+0xd8>)
 800380c:	2200      	movs	r2, #0
 800380e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003810:	4b19      	ldr	r3, [pc, #100]	; (8003878 <SystemInit+0xd8>)
 8003812:	2200      	movs	r2, #0
 8003814:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003816:	4b18      	ldr	r3, [pc, #96]	; (8003878 <SystemInit+0xd8>)
 8003818:	2200      	movs	r2, #0
 800381a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800381c:	4b16      	ldr	r3, [pc, #88]	; (8003878 <SystemInit+0xd8>)
 800381e:	4a18      	ldr	r2, [pc, #96]	; (8003880 <SystemInit+0xe0>)
 8003820:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003822:	4b15      	ldr	r3, [pc, #84]	; (8003878 <SystemInit+0xd8>)
 8003824:	4a17      	ldr	r2, [pc, #92]	; (8003884 <SystemInit+0xe4>)
 8003826:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003828:	4b13      	ldr	r3, [pc, #76]	; (8003878 <SystemInit+0xd8>)
 800382a:	4a17      	ldr	r2, [pc, #92]	; (8003888 <SystemInit+0xe8>)
 800382c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800382e:	4b12      	ldr	r3, [pc, #72]	; (8003878 <SystemInit+0xd8>)
 8003830:	2200      	movs	r2, #0
 8003832:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003834:	4b10      	ldr	r3, [pc, #64]	; (8003878 <SystemInit+0xd8>)
 8003836:	4a14      	ldr	r2, [pc, #80]	; (8003888 <SystemInit+0xe8>)
 8003838:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800383a:	4b0f      	ldr	r3, [pc, #60]	; (8003878 <SystemInit+0xd8>)
 800383c:	2200      	movs	r2, #0
 800383e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003840:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <SystemInit+0xd8>)
 8003842:	4a11      	ldr	r2, [pc, #68]	; (8003888 <SystemInit+0xe8>)
 8003844:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003846:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <SystemInit+0xd8>)
 8003848:	2200      	movs	r2, #0
 800384a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800384c:	4b0a      	ldr	r3, [pc, #40]	; (8003878 <SystemInit+0xd8>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a09      	ldr	r2, [pc, #36]	; (8003878 <SystemInit+0xd8>)
 8003852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003856:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003858:	4b07      	ldr	r3, [pc, #28]	; (8003878 <SystemInit+0xd8>)
 800385a:	2200      	movs	r2, #0
 800385c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800385e:	4b0b      	ldr	r3, [pc, #44]	; (800388c <SystemInit+0xec>)
 8003860:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003864:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003866:	bf00      	nop
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	e000ed00 	.word	0xe000ed00
 8003874:	52002000 	.word	0x52002000
 8003878:	58024400 	.word	0x58024400
 800387c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003880:	02020200 	.word	0x02020200
 8003884:	01ff0000 	.word	0x01ff0000
 8003888:	01010280 	.word	0x01010280
 800388c:	52004000 	.word	0x52004000

08003890 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003890:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003894:	f7ff ff84 	bl	80037a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003898:	480c      	ldr	r0, [pc, #48]	; (80038cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800389a:	490d      	ldr	r1, [pc, #52]	; (80038d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800389c:	4a0d      	ldr	r2, [pc, #52]	; (80038d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800389e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038a0:	e002      	b.n	80038a8 <LoopCopyDataInit>

080038a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038a6:	3304      	adds	r3, #4

080038a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038ac:	d3f9      	bcc.n	80038a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038ae:	4a0a      	ldr	r2, [pc, #40]	; (80038d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80038b0:	4c0a      	ldr	r4, [pc, #40]	; (80038dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80038b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038b4:	e001      	b.n	80038ba <LoopFillZerobss>

080038b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038b8:	3204      	adds	r2, #4

080038ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038bc:	d3fb      	bcc.n	80038b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80038be:	f013 fbf9 	bl	80170b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038c2:	f7fd fd51 	bl	8001368 <main>
  bx  lr
 80038c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80038c8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80038cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80038d0:	24000150 	.word	0x24000150
  ldr r2, =_sidata
 80038d4:	0801869c 	.word	0x0801869c
  ldr r2, =_sbss
 80038d8:	24000150 	.word	0x24000150
  ldr r4, =_ebss
 80038dc:	24003344 	.word	0x24003344

080038e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038e0:	e7fe      	b.n	80038e0 <ADC3_IRQHandler>
	...

080038e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038ea:	2003      	movs	r0, #3
 80038ec:	f001 fd06 	bl	80052fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80038f0:	f006 fd94 	bl	800a41c <HAL_RCC_GetSysClockFreq>
 80038f4:	4602      	mov	r2, r0
 80038f6:	4b15      	ldr	r3, [pc, #84]	; (800394c <HAL_Init+0x68>)
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	0a1b      	lsrs	r3, r3, #8
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	4913      	ldr	r1, [pc, #76]	; (8003950 <HAL_Init+0x6c>)
 8003902:	5ccb      	ldrb	r3, [r1, r3]
 8003904:	f003 031f 	and.w	r3, r3, #31
 8003908:	fa22 f303 	lsr.w	r3, r2, r3
 800390c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800390e:	4b0f      	ldr	r3, [pc, #60]	; (800394c <HAL_Init+0x68>)
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	4a0e      	ldr	r2, [pc, #56]	; (8003950 <HAL_Init+0x6c>)
 8003918:	5cd3      	ldrb	r3, [r2, r3]
 800391a:	f003 031f 	and.w	r3, r3, #31
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	fa22 f303 	lsr.w	r3, r2, r3
 8003924:	4a0b      	ldr	r2, [pc, #44]	; (8003954 <HAL_Init+0x70>)
 8003926:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003928:	4a0b      	ldr	r2, [pc, #44]	; (8003958 <HAL_Init+0x74>)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800392e:	200f      	movs	r0, #15
 8003930:	f000 f814 	bl	800395c <HAL_InitTick>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e002      	b.n	8003944 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800393e:	f7fe ffcb 	bl	80028d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	58024400 	.word	0x58024400
 8003950:	080184e8 	.word	0x080184e8
 8003954:	24000004 	.word	0x24000004
 8003958:	24000000 	.word	0x24000000

0800395c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003964:	4b15      	ldr	r3, [pc, #84]	; (80039bc <HAL_InitTick+0x60>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e021      	b.n	80039b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003970:	4b13      	ldr	r3, [pc, #76]	; (80039c0 <HAL_InitTick+0x64>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	4b11      	ldr	r3, [pc, #68]	; (80039bc <HAL_InitTick+0x60>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	4619      	mov	r1, r3
 800397a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800397e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003982:	fbb2 f3f3 	udiv	r3, r2, r3
 8003986:	4618      	mov	r0, r3
 8003988:	f001 fceb 	bl	8005362 <HAL_SYSTICK_Config>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e00e      	b.n	80039b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b0f      	cmp	r3, #15
 800399a:	d80a      	bhi.n	80039b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800399c:	2200      	movs	r2, #0
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	f04f 30ff 	mov.w	r0, #4294967295
 80039a4:	f001 fcb5 	bl	8005312 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039a8:	4a06      	ldr	r2, [pc, #24]	; (80039c4 <HAL_InitTick+0x68>)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	e000      	b.n	80039b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	2400000c 	.word	0x2400000c
 80039c0:	24000000 	.word	0x24000000
 80039c4:	24000008 	.word	0x24000008

080039c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80039cc:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <HAL_IncTick+0x20>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	461a      	mov	r2, r3
 80039d2:	4b06      	ldr	r3, [pc, #24]	; (80039ec <HAL_IncTick+0x24>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4413      	add	r3, r2
 80039d8:	4a04      	ldr	r2, [pc, #16]	; (80039ec <HAL_IncTick+0x24>)
 80039da:	6013      	str	r3, [r2, #0]
}
 80039dc:	bf00      	nop
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	2400000c 	.word	0x2400000c
 80039ec:	240015d0 	.word	0x240015d0

080039f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  return uwTick;
 80039f4:	4b03      	ldr	r3, [pc, #12]	; (8003a04 <HAL_GetTick+0x14>)
 80039f6:	681b      	ldr	r3, [r3, #0]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	240015d0 	.word	0x240015d0

08003a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a10:	f7ff ffee 	bl	80039f0 <HAL_GetTick>
 8003a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a20:	d005      	beq.n	8003a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a22:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <HAL_Delay+0x44>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a2e:	bf00      	nop
 8003a30:	f7ff ffde 	bl	80039f0 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d8f7      	bhi.n	8003a30 <HAL_Delay+0x28>
  {
  }
}
 8003a40:	bf00      	nop
 8003a42:	bf00      	nop
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	2400000c 	.word	0x2400000c

08003a50 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003a5a:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	43db      	mvns	r3, r3
 8003a62:	401a      	ands	r2, r3
 8003a64:	4904      	ldr	r1, [pc, #16]	; (8003a78 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	604b      	str	r3, [r1, #4]
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	58000400 	.word	0x58000400

08003a7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	609a      	str	r2, [r3, #8]
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	609a      	str	r2, [r3, #8]
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	3360      	adds	r3, #96	; 0x60
 8003af6:	461a      	mov	r2, r3
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4a10      	ldr	r2, [pc, #64]	; (8003b44 <LL_ADC_SetOffset+0x60>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d10b      	bne.n	8003b20 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003b1e:	e00b      	b.n	8003b38 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	430b      	orrs	r3, r1
 8003b32:	431a      	orrs	r2, r3
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	601a      	str	r2, [r3, #0]
}
 8003b38:	bf00      	nop
 8003b3a:	371c      	adds	r7, #28
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	58026000 	.word	0x58026000

08003b48 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	3360      	adds	r3, #96	; 0x60
 8003b56:	461a      	mov	r2, r3
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	fa01 f303 	lsl.w	r3, r1, r3
 8003b94:	431a      	orrs	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	611a      	str	r2, [r3, #16]
}
 8003b9a:	bf00      	nop
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
	...

08003ba8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4a0c      	ldr	r2, [pc, #48]	; (8003be8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d00e      	beq.n	8003bda <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	3360      	adds	r3, #96	; 0x60
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	601a      	str	r2, [r3, #0]
  }
}
 8003bda:	bf00      	nop
 8003bdc:	371c      	adds	r7, #28
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	58026000 	.word	0x58026000

08003bec <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4a0c      	ldr	r2, [pc, #48]	; (8003c2c <LL_ADC_SetOffsetSaturation+0x40>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d10e      	bne.n	8003c1e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	3360      	adds	r3, #96	; 0x60
 8003c04:	461a      	mov	r2, r3
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003c1e:	bf00      	nop
 8003c20:	371c      	adds	r7, #28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	58026000 	.word	0x58026000

08003c30 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4a0c      	ldr	r2, [pc, #48]	; (8003c70 <LL_ADC_SetOffsetSign+0x40>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d10e      	bne.n	8003c62 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	3360      	adds	r3, #96	; 0x60
 8003c48:	461a      	mov	r2, r3
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003c62:	bf00      	nop
 8003c64:	371c      	adds	r7, #28
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	58026000 	.word	0x58026000

08003c74 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	3360      	adds	r3, #96	; 0x60
 8003c84:	461a      	mov	r2, r3
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4413      	add	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4a0c      	ldr	r2, [pc, #48]	; (8003cc4 <LL_ADC_SetOffsetState+0x50>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d108      	bne.n	8003ca8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003ca6:	e007      	b.n	8003cb8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	601a      	str	r2, [r3, #0]
}
 8003cb8:	bf00      	nop
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	58026000 	.word	0x58026000

08003cc8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b087      	sub	sp, #28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	3330      	adds	r3, #48	; 0x30
 8003cd8:	461a      	mov	r2, r3
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	0a1b      	lsrs	r3, r3, #8
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	f003 030c 	and.w	r3, r3, #12
 8003ce4:	4413      	add	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f003 031f 	and.w	r3, r3, #31
 8003cf2:	211f      	movs	r1, #31
 8003cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	401a      	ands	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	0e9b      	lsrs	r3, r3, #26
 8003d00:	f003 011f 	and.w	r1, r3, #31
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	f003 031f 	and.w	r3, r3, #31
 8003d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003d14:	bf00      	nop
 8003d16:	371c      	adds	r7, #28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	3314      	adds	r3, #20
 8003d30:	461a      	mov	r2, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	0e5b      	lsrs	r3, r3, #25
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	4413      	add	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	0d1b      	lsrs	r3, r3, #20
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	2107      	movs	r1, #7
 8003d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d52:	43db      	mvns	r3, r3
 8003d54:	401a      	ands	r2, r3
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	0d1b      	lsrs	r3, r3, #20
 8003d5a:	f003 031f 	and.w	r3, r3, #31
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	fa01 f303 	lsl.w	r3, r1, r3
 8003d64:	431a      	orrs	r2, r3
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003d6a:	bf00      	nop
 8003d6c:	371c      	adds	r7, #28
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
	...

08003d78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4a1a      	ldr	r2, [pc, #104]	; (8003df0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d115      	bne.n	8003db8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	401a      	ands	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f003 0318 	and.w	r3, r3, #24
 8003da2:	4914      	ldr	r1, [pc, #80]	; (8003df4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003da4:	40d9      	lsrs	r1, r3
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	400b      	ands	r3, r1
 8003daa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dae:	431a      	orrs	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003db6:	e014      	b.n	8003de2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	401a      	ands	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f003 0318 	and.w	r3, r3, #24
 8003dce:	4909      	ldr	r1, [pc, #36]	; (8003df4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003dd0:	40d9      	lsrs	r1, r3
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	400b      	ands	r3, r1
 8003dd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003de2:	bf00      	nop
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	58026000 	.word	0x58026000
 8003df4:	000fffff 	.word	0x000fffff

08003df8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	4b04      	ldr	r3, [pc, #16]	; (8003e18 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003e06:	4013      	ands	r3, r2
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6093      	str	r3, [r2, #8]
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	5fffffc0 	.word	0x5fffffc0

08003e1c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e30:	d101      	bne.n	8003e36 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <LL_ADC_EnableInternalRegulator+0x24>)
 8003e52:	4013      	ands	r3, r2
 8003e54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	6fffffc0 	.word	0x6fffffc0

08003e6c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e80:	d101      	bne.n	8003e86 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <LL_ADC_IsEnabled+0x18>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <LL_ADC_IsEnabled+0x1a>
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d101      	bne.n	8003ed2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d101      	bne.n	8003ef8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e000      	b.n	8003efa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
	...

08003f08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	b089      	sub	sp, #36	; 0x24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003f14:	2300      	movs	r3, #0
 8003f16:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e1ee      	b.n	8004300 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d109      	bne.n	8003f44 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7fe fceb 	bl	800290c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff ff67 	bl	8003e1c <LL_ADC_IsDeepPowerDownEnabled>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d004      	beq.n	8003f5e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff ff4d 	bl	8003df8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff ff82 	bl	8003e6c <LL_ADC_IsInternalRegulatorEnabled>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d114      	bne.n	8003f98 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff ff66 	bl	8003e44 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f78:	4b8e      	ldr	r3, [pc, #568]	; (80041b4 <HAL_ADC_Init+0x2ac>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	099b      	lsrs	r3, r3, #6
 8003f7e:	4a8e      	ldr	r2, [pc, #568]	; (80041b8 <HAL_ADC_Init+0x2b0>)
 8003f80:	fba2 2303 	umull	r2, r3, r2, r3
 8003f84:	099b      	lsrs	r3, r3, #6
 8003f86:	3301      	adds	r3, #1
 8003f88:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f8a:	e002      	b.n	8003f92 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1f9      	bne.n	8003f8c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff ff65 	bl	8003e6c <LL_ADC_IsInternalRegulatorEnabled>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10d      	bne.n	8003fc4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fac:	f043 0210 	orr.w	r2, r3, #16
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fb8:	f043 0201 	orr.w	r2, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff ff76 	bl	8003eba <LL_ADC_REG_IsConversionOngoing>
 8003fce:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd4:	f003 0310 	and.w	r3, r3, #16
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f040 8188 	bne.w	80042ee <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f040 8184 	bne.w	80042ee <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fea:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003fee:	f043 0202 	orr.w	r2, r3, #2
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff ff4a 	bl	8003e94 <LL_ADC_IsEnabled>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d136      	bne.n	8004074 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a6c      	ldr	r2, [pc, #432]	; (80041bc <HAL_ADC_Init+0x2b4>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d004      	beq.n	800401a <HAL_ADC_Init+0x112>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a6a      	ldr	r2, [pc, #424]	; (80041c0 <HAL_ADC_Init+0x2b8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d10e      	bne.n	8004038 <HAL_ADC_Init+0x130>
 800401a:	4868      	ldr	r0, [pc, #416]	; (80041bc <HAL_ADC_Init+0x2b4>)
 800401c:	f7ff ff3a 	bl	8003e94 <LL_ADC_IsEnabled>
 8004020:	4604      	mov	r4, r0
 8004022:	4867      	ldr	r0, [pc, #412]	; (80041c0 <HAL_ADC_Init+0x2b8>)
 8004024:	f7ff ff36 	bl	8003e94 <LL_ADC_IsEnabled>
 8004028:	4603      	mov	r3, r0
 800402a:	4323      	orrs	r3, r4
 800402c:	2b00      	cmp	r3, #0
 800402e:	bf0c      	ite	eq
 8004030:	2301      	moveq	r3, #1
 8004032:	2300      	movne	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	e008      	b.n	800404a <HAL_ADC_Init+0x142>
 8004038:	4862      	ldr	r0, [pc, #392]	; (80041c4 <HAL_ADC_Init+0x2bc>)
 800403a:	f7ff ff2b 	bl	8003e94 <LL_ADC_IsEnabled>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	bf0c      	ite	eq
 8004044:	2301      	moveq	r3, #1
 8004046:	2300      	movne	r3, #0
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d012      	beq.n	8004074 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a5a      	ldr	r2, [pc, #360]	; (80041bc <HAL_ADC_Init+0x2b4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d004      	beq.n	8004062 <HAL_ADC_Init+0x15a>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a58      	ldr	r2, [pc, #352]	; (80041c0 <HAL_ADC_Init+0x2b8>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d101      	bne.n	8004066 <HAL_ADC_Init+0x15e>
 8004062:	4a59      	ldr	r2, [pc, #356]	; (80041c8 <HAL_ADC_Init+0x2c0>)
 8004064:	e000      	b.n	8004068 <HAL_ADC_Init+0x160>
 8004066:	4a59      	ldr	r2, [pc, #356]	; (80041cc <HAL_ADC_Init+0x2c4>)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	4619      	mov	r1, r3
 800406e:	4610      	mov	r0, r2
 8004070:	f7ff fd04 	bl	8003a7c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a52      	ldr	r2, [pc, #328]	; (80041c4 <HAL_ADC_Init+0x2bc>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d129      	bne.n	80040d2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	7e5b      	ldrb	r3, [r3, #25]
 8004082:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004088:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800408e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	2b08      	cmp	r3, #8
 8004096:	d013      	beq.n	80040c0 <HAL_ADC_Init+0x1b8>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	2b0c      	cmp	r3, #12
 800409e:	d00d      	beq.n	80040bc <HAL_ADC_Init+0x1b4>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	2b1c      	cmp	r3, #28
 80040a6:	d007      	beq.n	80040b8 <HAL_ADC_Init+0x1b0>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	2b18      	cmp	r3, #24
 80040ae:	d101      	bne.n	80040b4 <HAL_ADC_Init+0x1ac>
 80040b0:	2318      	movs	r3, #24
 80040b2:	e006      	b.n	80040c2 <HAL_ADC_Init+0x1ba>
 80040b4:	2300      	movs	r3, #0
 80040b6:	e004      	b.n	80040c2 <HAL_ADC_Init+0x1ba>
 80040b8:	2310      	movs	r3, #16
 80040ba:	e002      	b.n	80040c2 <HAL_ADC_Init+0x1ba>
 80040bc:	2308      	movs	r3, #8
 80040be:	e000      	b.n	80040c2 <HAL_ADC_Init+0x1ba>
 80040c0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80040c2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040ca:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80040cc:	4313      	orrs	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]
 80040d0:	e00e      	b.n	80040f0 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	7e5b      	ldrb	r3, [r3, #25]
 80040d6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80040dc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80040e2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040ea:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80040ec:	4313      	orrs	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d106      	bne.n	8004108 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	3b01      	subs	r3, #1
 8004100:	045b      	lsls	r3, r3, #17
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	4313      	orrs	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410c:	2b00      	cmp	r3, #0
 800410e:	d009      	beq.n	8004124 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004114:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	4313      	orrs	r3, r2
 8004122:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a26      	ldr	r2, [pc, #152]	; (80041c4 <HAL_ADC_Init+0x2bc>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d115      	bne.n	800415a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	4b26      	ldr	r3, [pc, #152]	; (80041d0 <HAL_ADC_Init+0x2c8>)
 8004136:	4013      	ands	r3, r2
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	6812      	ldr	r2, [r2, #0]
 800413c:	69b9      	ldr	r1, [r7, #24]
 800413e:	430b      	orrs	r3, r1
 8004140:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	611a      	str	r2, [r3, #16]
 8004158:	e009      	b.n	800416e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	4b1c      	ldr	r3, [pc, #112]	; (80041d4 <HAL_ADC_Init+0x2cc>)
 8004162:	4013      	ands	r3, r2
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	69b9      	ldr	r1, [r7, #24]
 800416a:	430b      	orrs	r3, r1
 800416c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff fea1 	bl	8003eba <LL_ADC_REG_IsConversionOngoing>
 8004178:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff feae 	bl	8003ee0 <LL_ADC_INJ_IsConversionOngoing>
 8004184:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	2b00      	cmp	r3, #0
 800418a:	f040 808e 	bne.w	80042aa <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2b00      	cmp	r3, #0
 8004192:	f040 808a 	bne.w	80042aa <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a0a      	ldr	r2, [pc, #40]	; (80041c4 <HAL_ADC_Init+0x2bc>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d11b      	bne.n	80041d8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	7e1b      	ldrb	r3, [r3, #24]
 80041a4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041ac:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80041ae:	4313      	orrs	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
 80041b2:	e018      	b.n	80041e6 <HAL_ADC_Init+0x2de>
 80041b4:	24000000 	.word	0x24000000
 80041b8:	053e2d63 	.word	0x053e2d63
 80041bc:	40022000 	.word	0x40022000
 80041c0:	40022100 	.word	0x40022100
 80041c4:	58026000 	.word	0x58026000
 80041c8:	40022300 	.word	0x40022300
 80041cc:	58026300 	.word	0x58026300
 80041d0:	fff04007 	.word	0xfff04007
 80041d4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	7e1b      	ldrb	r3, [r3, #24]
 80041dc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80041e2:	4313      	orrs	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	4b46      	ldr	r3, [pc, #280]	; (8004308 <HAL_ADC_Init+0x400>)
 80041ee:	4013      	ands	r3, r2
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6812      	ldr	r2, [r2, #0]
 80041f4:	69b9      	ldr	r1, [r7, #24]
 80041f6:	430b      	orrs	r3, r1
 80041f8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004200:	2b01      	cmp	r3, #1
 8004202:	d137      	bne.n	8004274 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004208:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a3f      	ldr	r2, [pc, #252]	; (800430c <HAL_ADC_Init+0x404>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d116      	bne.n	8004242 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691a      	ldr	r2, [r3, #16]
 800421a:	4b3d      	ldr	r3, [pc, #244]	; (8004310 <HAL_ADC_Init+0x408>)
 800421c:	4013      	ands	r3, r2
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004226:	4311      	orrs	r1, r2
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800422c:	4311      	orrs	r1, r2
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004232:	430a      	orrs	r2, r1
 8004234:	431a      	orrs	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 0201 	orr.w	r2, r2, #1
 800423e:	611a      	str	r2, [r3, #16]
 8004240:	e020      	b.n	8004284 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	4b32      	ldr	r3, [pc, #200]	; (8004314 <HAL_ADC_Init+0x40c>)
 800424a:	4013      	ands	r3, r2
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004250:	3a01      	subs	r2, #1
 8004252:	0411      	lsls	r1, r2, #16
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004258:	4311      	orrs	r1, r2
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800425e:	4311      	orrs	r1, r2
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004264:	430a      	orrs	r2, r1
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0201 	orr.w	r2, r2, #1
 8004270:	611a      	str	r2, [r3, #16]
 8004272:	e007      	b.n	8004284 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691a      	ldr	r2, [r3, #16]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0201 	bic.w	r2, r2, #1
 8004282:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a1b      	ldr	r2, [pc, #108]	; (800430c <HAL_ADC_Init+0x404>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d002      	beq.n	80042aa <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 fd63 	bl	8004d70 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d10c      	bne.n	80042cc <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b8:	f023 010f 	bic.w	r1, r3, #15
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	1e5a      	subs	r2, r3, #1
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	631a      	str	r2, [r3, #48]	; 0x30
 80042ca:	e007      	b.n	80042dc <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 020f 	bic.w	r2, r2, #15
 80042da:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e0:	f023 0303 	bic.w	r3, r3, #3
 80042e4:	f043 0201 	orr.w	r2, r3, #1
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	661a      	str	r2, [r3, #96]	; 0x60
 80042ec:	e007      	b.n	80042fe <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f2:	f043 0210 	orr.w	r2, r3, #16
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80042fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3724      	adds	r7, #36	; 0x24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd90      	pop	{r4, r7, pc}
 8004308:	ffffbffc 	.word	0xffffbffc
 800430c:	58026000 	.word	0x58026000
 8004310:	fc00f81f 	.word	0xfc00f81f
 8004314:	fc00f81e 	.word	0xfc00f81e

08004318 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004318:	b590      	push	{r4, r7, lr}
 800431a:	b0b9      	sub	sp, #228	; 0xe4
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004322:	2300      	movs	r3, #0
 8004324:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004328:	2300      	movs	r3, #0
 800432a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004332:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4aa9      	ldr	r2, [pc, #676]	; (80045e0 <HAL_ADC_ConfigChannel+0x2c8>)
 800433a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004342:	2b01      	cmp	r3, #1
 8004344:	d102      	bne.n	800434c <HAL_ADC_ConfigChannel+0x34>
 8004346:	2302      	movs	r3, #2
 8004348:	f000 bcfa 	b.w	8004d40 <HAL_ADC_ConfigChannel+0xa28>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff fdae 	bl	8003eba <LL_ADC_REG_IsConversionOngoing>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	f040 84de 	bne.w	8004d22 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a9e      	ldr	r2, [pc, #632]	; (80045e4 <HAL_ADC_ConfigChannel+0x2cc>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d033      	beq.n	80043d8 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004378:	2b00      	cmp	r3, #0
 800437a:	d108      	bne.n	800438e <HAL_ADC_ConfigChannel+0x76>
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	0e9b      	lsrs	r3, r3, #26
 8004382:	f003 031f 	and.w	r3, r3, #31
 8004386:	2201      	movs	r2, #1
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	e01d      	b.n	80043ca <HAL_ADC_ConfigChannel+0xb2>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004396:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800439a:	fa93 f3a3 	rbit	r3, r3
 800439e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80043a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80043aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80043b2:	2320      	movs	r3, #32
 80043b4:	e004      	b.n	80043c0 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80043b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80043ba:	fab3 f383 	clz	r3, r3
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	f003 031f 	and.w	r3, r3, #31
 80043c4:	2201      	movs	r2, #1
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6812      	ldr	r2, [r2, #0]
 80043ce:	69d1      	ldr	r1, [r2, #28]
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6812      	ldr	r2, [r2, #0]
 80043d4:	430b      	orrs	r3, r1
 80043d6:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6818      	ldr	r0, [r3, #0]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	6859      	ldr	r1, [r3, #4]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	461a      	mov	r2, r3
 80043e6:	f7ff fc6f 	bl	8003cc8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff fd63 	bl	8003eba <LL_ADC_REG_IsConversionOngoing>
 80043f4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff fd6f 	bl	8003ee0 <LL_ADC_INJ_IsConversionOngoing>
 8004402:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004406:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800440a:	2b00      	cmp	r3, #0
 800440c:	f040 8270 	bne.w	80048f0 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004410:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004414:	2b00      	cmp	r3, #0
 8004416:	f040 826b 	bne.w	80048f0 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6818      	ldr	r0, [r3, #0]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	6819      	ldr	r1, [r3, #0]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	461a      	mov	r2, r3
 8004428:	f7ff fc7a 	bl	8003d20 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a6c      	ldr	r2, [pc, #432]	; (80045e4 <HAL_ADC_ConfigChannel+0x2cc>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d10d      	bne.n	8004452 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	695a      	ldr	r2, [r3, #20]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	08db      	lsrs	r3, r3, #3
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004450:	e032      	b.n	80044b8 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004452:	4b65      	ldr	r3, [pc, #404]	; (80045e8 <HAL_ADC_ConfigChannel+0x2d0>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800445a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800445e:	d10b      	bne.n	8004478 <HAL_ADC_ConfigChannel+0x160>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	695a      	ldr	r2, [r3, #20]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	089b      	lsrs	r3, r3, #2
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	fa02 f303 	lsl.w	r3, r2, r3
 8004476:	e01d      	b.n	80044b4 <HAL_ADC_ConfigChannel+0x19c>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f003 0310 	and.w	r3, r3, #16
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10b      	bne.n	800449e <HAL_ADC_ConfigChannel+0x186>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	695a      	ldr	r2, [r3, #20]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	089b      	lsrs	r3, r3, #2
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	e00a      	b.n	80044b4 <HAL_ADC_ConfigChannel+0x19c>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	695a      	ldr	r2, [r3, #20]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	089b      	lsrs	r3, r3, #2
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d048      	beq.n	8004552 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6818      	ldr	r0, [r3, #0]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	6919      	ldr	r1, [r3, #16]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044d0:	f7ff fb08 	bl	8003ae4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a42      	ldr	r2, [pc, #264]	; (80045e4 <HAL_ADC_ConfigChannel+0x2cc>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d119      	bne.n	8004512 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6818      	ldr	r0, [r3, #0]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	6919      	ldr	r1, [r3, #16]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	461a      	mov	r2, r3
 80044ec:	f7ff fba0 	bl	8003c30 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6818      	ldr	r0, [r3, #0]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	6919      	ldr	r1, [r3, #16]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d102      	bne.n	8004508 <HAL_ADC_ConfigChannel+0x1f0>
 8004502:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004506:	e000      	b.n	800450a <HAL_ADC_ConfigChannel+0x1f2>
 8004508:	2300      	movs	r3, #0
 800450a:	461a      	mov	r2, r3
 800450c:	f7ff fb6e 	bl	8003bec <LL_ADC_SetOffsetSaturation>
 8004510:	e1ee      	b.n	80048f0 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6818      	ldr	r0, [r3, #0]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	6919      	ldr	r1, [r3, #16]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004520:	2b01      	cmp	r3, #1
 8004522:	d102      	bne.n	800452a <HAL_ADC_ConfigChannel+0x212>
 8004524:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004528:	e000      	b.n	800452c <HAL_ADC_ConfigChannel+0x214>
 800452a:	2300      	movs	r3, #0
 800452c:	461a      	mov	r2, r3
 800452e:	f7ff fb3b 	bl	8003ba8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	6919      	ldr	r1, [r3, #16]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	7e1b      	ldrb	r3, [r3, #24]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d102      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x230>
 8004542:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004546:	e000      	b.n	800454a <HAL_ADC_ConfigChannel+0x232>
 8004548:	2300      	movs	r3, #0
 800454a:	461a      	mov	r2, r3
 800454c:	f7ff fb12 	bl	8003b74 <LL_ADC_SetDataRightShift>
 8004550:	e1ce      	b.n	80048f0 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a23      	ldr	r2, [pc, #140]	; (80045e4 <HAL_ADC_ConfigChannel+0x2cc>)
 8004558:	4293      	cmp	r3, r2
 800455a:	f040 8181 	bne.w	8004860 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2100      	movs	r1, #0
 8004564:	4618      	mov	r0, r3
 8004566:	f7ff faef 	bl	8003b48 <LL_ADC_GetOffsetChannel>
 800456a:	4603      	mov	r3, r0
 800456c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10a      	bne.n	800458a <HAL_ADC_ConfigChannel+0x272>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2100      	movs	r1, #0
 800457a:	4618      	mov	r0, r3
 800457c:	f7ff fae4 	bl	8003b48 <LL_ADC_GetOffsetChannel>
 8004580:	4603      	mov	r3, r0
 8004582:	0e9b      	lsrs	r3, r3, #26
 8004584:	f003 021f 	and.w	r2, r3, #31
 8004588:	e01e      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x2b0>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2100      	movs	r1, #0
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff fad9 	bl	8003b48 <LL_ADC_GetOffsetChannel>
 8004596:	4603      	mov	r3, r0
 8004598:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80045a0:	fa93 f3a3 	rbit	r3, r3
 80045a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80045a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80045ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80045b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80045b8:	2320      	movs	r3, #32
 80045ba:	e004      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80045bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80045c0:	fab3 f383 	clz	r3, r3
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	461a      	mov	r2, r3
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10b      	bne.n	80045ec <HAL_ADC_ConfigChannel+0x2d4>
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	0e9b      	lsrs	r3, r3, #26
 80045da:	f003 031f 	and.w	r3, r3, #31
 80045de:	e01e      	b.n	800461e <HAL_ADC_ConfigChannel+0x306>
 80045e0:	47ff0000 	.word	0x47ff0000
 80045e4:	58026000 	.word	0x58026000
 80045e8:	5c001000 	.word	0x5c001000
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045f8:	fa93 f3a3 	rbit	r3, r3
 80045fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004600:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004604:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004608:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004610:	2320      	movs	r3, #32
 8004612:	e004      	b.n	800461e <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8004614:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004618:	fab3 f383 	clz	r3, r3
 800461c:	b2db      	uxtb	r3, r3
 800461e:	429a      	cmp	r2, r3
 8004620:	d106      	bne.n	8004630 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2200      	movs	r2, #0
 8004628:	2100      	movs	r1, #0
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff fb22 	bl	8003c74 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2101      	movs	r1, #1
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff fa86 	bl	8003b48 <LL_ADC_GetOffsetChannel>
 800463c:	4603      	mov	r3, r0
 800463e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10a      	bne.n	800465c <HAL_ADC_ConfigChannel+0x344>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2101      	movs	r1, #1
 800464c:	4618      	mov	r0, r3
 800464e:	f7ff fa7b 	bl	8003b48 <LL_ADC_GetOffsetChannel>
 8004652:	4603      	mov	r3, r0
 8004654:	0e9b      	lsrs	r3, r3, #26
 8004656:	f003 021f 	and.w	r2, r3, #31
 800465a:	e01e      	b.n	800469a <HAL_ADC_ConfigChannel+0x382>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2101      	movs	r1, #1
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff fa70 	bl	8003b48 <LL_ADC_GetOffsetChannel>
 8004668:	4603      	mov	r3, r0
 800466a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004672:	fa93 f3a3 	rbit	r3, r3
 8004676:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800467a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800467e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004682:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800468a:	2320      	movs	r3, #32
 800468c:	e004      	b.n	8004698 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800468e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004692:	fab3 f383 	clz	r3, r3
 8004696:	b2db      	uxtb	r3, r3
 8004698:	461a      	mov	r2, r3
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d105      	bne.n	80046b2 <HAL_ADC_ConfigChannel+0x39a>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	0e9b      	lsrs	r3, r3, #26
 80046ac:	f003 031f 	and.w	r3, r3, #31
 80046b0:	e018      	b.n	80046e4 <HAL_ADC_ConfigChannel+0x3cc>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80046be:	fa93 f3a3 	rbit	r3, r3
 80046c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80046c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80046ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80046d6:	2320      	movs	r3, #32
 80046d8:	e004      	b.n	80046e4 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80046da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046de:	fab3 f383 	clz	r3, r3
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d106      	bne.n	80046f6 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2200      	movs	r2, #0
 80046ee:	2101      	movs	r1, #1
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff fabf 	bl	8003c74 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2102      	movs	r1, #2
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff fa23 	bl	8003b48 <LL_ADC_GetOffsetChannel>
 8004702:	4603      	mov	r3, r0
 8004704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10a      	bne.n	8004722 <HAL_ADC_ConfigChannel+0x40a>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2102      	movs	r1, #2
 8004712:	4618      	mov	r0, r3
 8004714:	f7ff fa18 	bl	8003b48 <LL_ADC_GetOffsetChannel>
 8004718:	4603      	mov	r3, r0
 800471a:	0e9b      	lsrs	r3, r3, #26
 800471c:	f003 021f 	and.w	r2, r3, #31
 8004720:	e01e      	b.n	8004760 <HAL_ADC_ConfigChannel+0x448>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2102      	movs	r1, #2
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff fa0d 	bl	8003b48 <LL_ADC_GetOffsetChannel>
 800472e:	4603      	mov	r3, r0
 8004730:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004734:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004738:	fa93 f3a3 	rbit	r3, r3
 800473c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004740:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004744:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004748:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004750:	2320      	movs	r3, #32
 8004752:	e004      	b.n	800475e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004754:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004758:	fab3 f383 	clz	r3, r3
 800475c:	b2db      	uxtb	r3, r3
 800475e:	461a      	mov	r2, r3
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004768:	2b00      	cmp	r3, #0
 800476a:	d105      	bne.n	8004778 <HAL_ADC_ConfigChannel+0x460>
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	0e9b      	lsrs	r3, r3, #26
 8004772:	f003 031f 	and.w	r3, r3, #31
 8004776:	e014      	b.n	80047a2 <HAL_ADC_ConfigChannel+0x48a>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004780:	fa93 f3a3 	rbit	r3, r3
 8004784:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004786:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004788:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800478c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004794:	2320      	movs	r3, #32
 8004796:	e004      	b.n	80047a2 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004798:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800479c:	fab3 f383 	clz	r3, r3
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d106      	bne.n	80047b4 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2200      	movs	r2, #0
 80047ac:	2102      	movs	r1, #2
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff fa60 	bl	8003c74 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2103      	movs	r1, #3
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff f9c4 	bl	8003b48 <LL_ADC_GetOffsetChannel>
 80047c0:	4603      	mov	r3, r0
 80047c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10a      	bne.n	80047e0 <HAL_ADC_ConfigChannel+0x4c8>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2103      	movs	r1, #3
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7ff f9b9 	bl	8003b48 <LL_ADC_GetOffsetChannel>
 80047d6:	4603      	mov	r3, r0
 80047d8:	0e9b      	lsrs	r3, r3, #26
 80047da:	f003 021f 	and.w	r2, r3, #31
 80047de:	e017      	b.n	8004810 <HAL_ADC_ConfigChannel+0x4f8>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2103      	movs	r1, #3
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff f9ae 	bl	8003b48 <LL_ADC_GetOffsetChannel>
 80047ec:	4603      	mov	r3, r0
 80047ee:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047f2:	fa93 f3a3 	rbit	r3, r3
 80047f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80047f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047fa:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80047fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004802:	2320      	movs	r3, #32
 8004804:	e003      	b.n	800480e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004806:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004808:	fab3 f383 	clz	r3, r3
 800480c:	b2db      	uxtb	r3, r3
 800480e:	461a      	mov	r2, r3
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004818:	2b00      	cmp	r3, #0
 800481a:	d105      	bne.n	8004828 <HAL_ADC_ConfigChannel+0x510>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	0e9b      	lsrs	r3, r3, #26
 8004822:	f003 031f 	and.w	r3, r3, #31
 8004826:	e011      	b.n	800484c <HAL_ADC_ConfigChannel+0x534>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004830:	fa93 f3a3 	rbit	r3, r3
 8004834:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004838:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800483a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004840:	2320      	movs	r3, #32
 8004842:	e003      	b.n	800484c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004844:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004846:	fab3 f383 	clz	r3, r3
 800484a:	b2db      	uxtb	r3, r3
 800484c:	429a      	cmp	r2, r3
 800484e:	d14f      	bne.n	80048f0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2200      	movs	r2, #0
 8004856:	2103      	movs	r1, #3
 8004858:	4618      	mov	r0, r3
 800485a:	f7ff fa0b 	bl	8003c74 <LL_ADC_SetOffsetState>
 800485e:	e047      	b.n	80048f0 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004866:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	069b      	lsls	r3, r3, #26
 8004870:	429a      	cmp	r2, r3
 8004872:	d107      	bne.n	8004884 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004882:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800488a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	069b      	lsls	r3, r3, #26
 8004894:	429a      	cmp	r2, r3
 8004896:	d107      	bne.n	80048a8 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80048a6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	069b      	lsls	r3, r3, #26
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d107      	bne.n	80048cc <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80048ca:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	069b      	lsls	r3, r3, #26
 80048dc:	429a      	cmp	r2, r3
 80048de:	d107      	bne.n	80048f0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80048ee:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff facd 	bl	8003e94 <LL_ADC_IsEnabled>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f040 8219 	bne.w	8004d34 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6818      	ldr	r0, [r3, #0]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	6819      	ldr	r1, [r3, #0]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	461a      	mov	r2, r3
 8004910:	f7ff fa32 	bl	8003d78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	4aa1      	ldr	r2, [pc, #644]	; (8004ba0 <HAL_ADC_ConfigChannel+0x888>)
 800491a:	4293      	cmp	r3, r2
 800491c:	f040 812e 	bne.w	8004b7c <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10b      	bne.n	8004948 <HAL_ADC_ConfigChannel+0x630>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	0e9b      	lsrs	r3, r3, #26
 8004936:	3301      	adds	r3, #1
 8004938:	f003 031f 	and.w	r3, r3, #31
 800493c:	2b09      	cmp	r3, #9
 800493e:	bf94      	ite	ls
 8004940:	2301      	movls	r3, #1
 8004942:	2300      	movhi	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	e019      	b.n	800497c <HAL_ADC_ConfigChannel+0x664>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004950:	fa93 f3a3 	rbit	r3, r3
 8004954:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004958:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800495a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004960:	2320      	movs	r3, #32
 8004962:	e003      	b.n	800496c <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004964:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004966:	fab3 f383 	clz	r3, r3
 800496a:	b2db      	uxtb	r3, r3
 800496c:	3301      	adds	r3, #1
 800496e:	f003 031f 	and.w	r3, r3, #31
 8004972:	2b09      	cmp	r3, #9
 8004974:	bf94      	ite	ls
 8004976:	2301      	movls	r3, #1
 8004978:	2300      	movhi	r3, #0
 800497a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800497c:	2b00      	cmp	r3, #0
 800497e:	d079      	beq.n	8004a74 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004988:	2b00      	cmp	r3, #0
 800498a:	d107      	bne.n	800499c <HAL_ADC_ConfigChannel+0x684>
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	0e9b      	lsrs	r3, r3, #26
 8004992:	3301      	adds	r3, #1
 8004994:	069b      	lsls	r3, r3, #26
 8004996:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800499a:	e015      	b.n	80049c8 <HAL_ADC_ConfigChannel+0x6b0>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049a4:	fa93 f3a3 	rbit	r3, r3
 80049a8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80049aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ac:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80049ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80049b4:	2320      	movs	r3, #32
 80049b6:	e003      	b.n	80049c0 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80049b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ba:	fab3 f383 	clz	r3, r3
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	3301      	adds	r3, #1
 80049c2:	069b      	lsls	r3, r3, #26
 80049c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d109      	bne.n	80049e8 <HAL_ADC_ConfigChannel+0x6d0>
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	0e9b      	lsrs	r3, r3, #26
 80049da:	3301      	adds	r3, #1
 80049dc:	f003 031f 	and.w	r3, r3, #31
 80049e0:	2101      	movs	r1, #1
 80049e2:	fa01 f303 	lsl.w	r3, r1, r3
 80049e6:	e017      	b.n	8004a18 <HAL_ADC_ConfigChannel+0x700>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049f0:	fa93 f3a3 	rbit	r3, r3
 80049f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80049f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80049fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004a00:	2320      	movs	r3, #32
 8004a02:	e003      	b.n	8004a0c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a06:	fab3 f383 	clz	r3, r3
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	f003 031f 	and.w	r3, r3, #31
 8004a12:	2101      	movs	r1, #1
 8004a14:	fa01 f303 	lsl.w	r3, r1, r3
 8004a18:	ea42 0103 	orr.w	r1, r2, r3
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10a      	bne.n	8004a3e <HAL_ADC_ConfigChannel+0x726>
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	0e9b      	lsrs	r3, r3, #26
 8004a2e:	3301      	adds	r3, #1
 8004a30:	f003 021f 	and.w	r2, r3, #31
 8004a34:	4613      	mov	r3, r2
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	4413      	add	r3, r2
 8004a3a:	051b      	lsls	r3, r3, #20
 8004a3c:	e018      	b.n	8004a70 <HAL_ADC_ConfigChannel+0x758>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a46:	fa93 f3a3 	rbit	r3, r3
 8004a4a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004a56:	2320      	movs	r3, #32
 8004a58:	e003      	b.n	8004a62 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5c:	fab3 f383 	clz	r3, r3
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	3301      	adds	r3, #1
 8004a64:	f003 021f 	and.w	r2, r3, #31
 8004a68:	4613      	mov	r3, r2
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	4413      	add	r3, r2
 8004a6e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a70:	430b      	orrs	r3, r1
 8004a72:	e07e      	b.n	8004b72 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d107      	bne.n	8004a90 <HAL_ADC_ConfigChannel+0x778>
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	0e9b      	lsrs	r3, r3, #26
 8004a86:	3301      	adds	r3, #1
 8004a88:	069b      	lsls	r3, r3, #26
 8004a8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a8e:	e015      	b.n	8004abc <HAL_ADC_ConfigChannel+0x7a4>
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a98:	fa93 f3a3 	rbit	r3, r3
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004aa8:	2320      	movs	r3, #32
 8004aaa:	e003      	b.n	8004ab4 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aae:	fab3 f383 	clz	r3, r3
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	069b      	lsls	r3, r3, #26
 8004ab8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d109      	bne.n	8004adc <HAL_ADC_ConfigChannel+0x7c4>
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	0e9b      	lsrs	r3, r3, #26
 8004ace:	3301      	adds	r3, #1
 8004ad0:	f003 031f 	and.w	r3, r3, #31
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8004ada:	e017      	b.n	8004b0c <HAL_ADC_ConfigChannel+0x7f4>
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	fa93 f3a3 	rbit	r3, r3
 8004ae8:	61bb      	str	r3, [r7, #24]
  return result;
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004af4:	2320      	movs	r3, #32
 8004af6:	e003      	b.n	8004b00 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	fab3 f383 	clz	r3, r3
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	3301      	adds	r3, #1
 8004b02:	f003 031f 	and.w	r3, r3, #31
 8004b06:	2101      	movs	r1, #1
 8004b08:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0c:	ea42 0103 	orr.w	r1, r2, r3
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10d      	bne.n	8004b38 <HAL_ADC_ConfigChannel+0x820>
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	0e9b      	lsrs	r3, r3, #26
 8004b22:	3301      	adds	r3, #1
 8004b24:	f003 021f 	and.w	r2, r3, #31
 8004b28:	4613      	mov	r3, r2
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	4413      	add	r3, r2
 8004b2e:	3b1e      	subs	r3, #30
 8004b30:	051b      	lsls	r3, r3, #20
 8004b32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b36:	e01b      	b.n	8004b70 <HAL_ADC_ConfigChannel+0x858>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	fa93 f3a3 	rbit	r3, r3
 8004b44:	60fb      	str	r3, [r7, #12]
  return result;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004b50:	2320      	movs	r3, #32
 8004b52:	e003      	b.n	8004b5c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	fab3 f383 	clz	r3, r3
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	f003 021f 	and.w	r2, r3, #31
 8004b62:	4613      	mov	r3, r2
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	4413      	add	r3, r2
 8004b68:	3b1e      	subs	r3, #30
 8004b6a:	051b      	lsls	r3, r3, #20
 8004b6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b70:	430b      	orrs	r3, r1
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	6892      	ldr	r2, [r2, #8]
 8004b76:	4619      	mov	r1, r3
 8004b78:	f7ff f8d2 	bl	8003d20 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f280 80d7 	bge.w	8004d34 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a06      	ldr	r2, [pc, #24]	; (8004ba4 <HAL_ADC_ConfigChannel+0x88c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d004      	beq.n	8004b9a <HAL_ADC_ConfigChannel+0x882>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a04      	ldr	r2, [pc, #16]	; (8004ba8 <HAL_ADC_ConfigChannel+0x890>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d10a      	bne.n	8004bb0 <HAL_ADC_ConfigChannel+0x898>
 8004b9a:	4b04      	ldr	r3, [pc, #16]	; (8004bac <HAL_ADC_ConfigChannel+0x894>)
 8004b9c:	e009      	b.n	8004bb2 <HAL_ADC_ConfigChannel+0x89a>
 8004b9e:	bf00      	nop
 8004ba0:	47ff0000 	.word	0x47ff0000
 8004ba4:	40022000 	.word	0x40022000
 8004ba8:	40022100 	.word	0x40022100
 8004bac:	40022300 	.word	0x40022300
 8004bb0:	4b65      	ldr	r3, [pc, #404]	; (8004d48 <HAL_ADC_ConfigChannel+0xa30>)
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fe ff88 	bl	8003ac8 <LL_ADC_GetCommonPathInternalCh>
 8004bb8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a62      	ldr	r2, [pc, #392]	; (8004d4c <HAL_ADC_ConfigChannel+0xa34>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d004      	beq.n	8004bd0 <HAL_ADC_ConfigChannel+0x8b8>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a61      	ldr	r2, [pc, #388]	; (8004d50 <HAL_ADC_ConfigChannel+0xa38>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d10e      	bne.n	8004bee <HAL_ADC_ConfigChannel+0x8d6>
 8004bd0:	485e      	ldr	r0, [pc, #376]	; (8004d4c <HAL_ADC_ConfigChannel+0xa34>)
 8004bd2:	f7ff f95f 	bl	8003e94 <LL_ADC_IsEnabled>
 8004bd6:	4604      	mov	r4, r0
 8004bd8:	485d      	ldr	r0, [pc, #372]	; (8004d50 <HAL_ADC_ConfigChannel+0xa38>)
 8004bda:	f7ff f95b 	bl	8003e94 <LL_ADC_IsEnabled>
 8004bde:	4603      	mov	r3, r0
 8004be0:	4323      	orrs	r3, r4
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	bf0c      	ite	eq
 8004be6:	2301      	moveq	r3, #1
 8004be8:	2300      	movne	r3, #0
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	e008      	b.n	8004c00 <HAL_ADC_ConfigChannel+0x8e8>
 8004bee:	4859      	ldr	r0, [pc, #356]	; (8004d54 <HAL_ADC_ConfigChannel+0xa3c>)
 8004bf0:	f7ff f950 	bl	8003e94 <LL_ADC_IsEnabled>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	bf0c      	ite	eq
 8004bfa:	2301      	moveq	r3, #1
 8004bfc:	2300      	movne	r3, #0
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 8084 	beq.w	8004d0e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a53      	ldr	r2, [pc, #332]	; (8004d58 <HAL_ADC_ConfigChannel+0xa40>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d132      	bne.n	8004c76 <HAL_ADC_ConfigChannel+0x95e>
 8004c10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d12c      	bne.n	8004c76 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a4c      	ldr	r2, [pc, #304]	; (8004d54 <HAL_ADC_ConfigChannel+0xa3c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	f040 8086 	bne.w	8004d34 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a47      	ldr	r2, [pc, #284]	; (8004d4c <HAL_ADC_ConfigChannel+0xa34>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d004      	beq.n	8004c3c <HAL_ADC_ConfigChannel+0x924>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a46      	ldr	r2, [pc, #280]	; (8004d50 <HAL_ADC_ConfigChannel+0xa38>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d101      	bne.n	8004c40 <HAL_ADC_ConfigChannel+0x928>
 8004c3c:	4a47      	ldr	r2, [pc, #284]	; (8004d5c <HAL_ADC_ConfigChannel+0xa44>)
 8004c3e:	e000      	b.n	8004c42 <HAL_ADC_ConfigChannel+0x92a>
 8004c40:	4a41      	ldr	r2, [pc, #260]	; (8004d48 <HAL_ADC_ConfigChannel+0xa30>)
 8004c42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c46:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	f7fe ff28 	bl	8003aa2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c52:	4b43      	ldr	r3, [pc, #268]	; (8004d60 <HAL_ADC_ConfigChannel+0xa48>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	099b      	lsrs	r3, r3, #6
 8004c58:	4a42      	ldr	r2, [pc, #264]	; (8004d64 <HAL_ADC_ConfigChannel+0xa4c>)
 8004c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5e:	099b      	lsrs	r3, r3, #6
 8004c60:	3301      	adds	r3, #1
 8004c62:	005b      	lsls	r3, r3, #1
 8004c64:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004c66:	e002      	b.n	8004c6e <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1f9      	bne.n	8004c68 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c74:	e05e      	b.n	8004d34 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a3b      	ldr	r2, [pc, #236]	; (8004d68 <HAL_ADC_ConfigChannel+0xa50>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d120      	bne.n	8004cc2 <HAL_ADC_ConfigChannel+0x9aa>
 8004c80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d11a      	bne.n	8004cc2 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a30      	ldr	r2, [pc, #192]	; (8004d54 <HAL_ADC_ConfigChannel+0xa3c>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d14e      	bne.n	8004d34 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a2c      	ldr	r2, [pc, #176]	; (8004d4c <HAL_ADC_ConfigChannel+0xa34>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d004      	beq.n	8004caa <HAL_ADC_ConfigChannel+0x992>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a2a      	ldr	r2, [pc, #168]	; (8004d50 <HAL_ADC_ConfigChannel+0xa38>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d101      	bne.n	8004cae <HAL_ADC_ConfigChannel+0x996>
 8004caa:	4a2c      	ldr	r2, [pc, #176]	; (8004d5c <HAL_ADC_ConfigChannel+0xa44>)
 8004cac:	e000      	b.n	8004cb0 <HAL_ADC_ConfigChannel+0x998>
 8004cae:	4a26      	ldr	r2, [pc, #152]	; (8004d48 <HAL_ADC_ConfigChannel+0xa30>)
 8004cb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004cb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4610      	mov	r0, r2
 8004cbc:	f7fe fef1 	bl	8003aa2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004cc0:	e038      	b.n	8004d34 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a29      	ldr	r2, [pc, #164]	; (8004d6c <HAL_ADC_ConfigChannel+0xa54>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d133      	bne.n	8004d34 <HAL_ADC_ConfigChannel+0xa1c>
 8004ccc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004cd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d12d      	bne.n	8004d34 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a1d      	ldr	r2, [pc, #116]	; (8004d54 <HAL_ADC_ConfigChannel+0xa3c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d128      	bne.n	8004d34 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a19      	ldr	r2, [pc, #100]	; (8004d4c <HAL_ADC_ConfigChannel+0xa34>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d004      	beq.n	8004cf6 <HAL_ADC_ConfigChannel+0x9de>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a17      	ldr	r2, [pc, #92]	; (8004d50 <HAL_ADC_ConfigChannel+0xa38>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d101      	bne.n	8004cfa <HAL_ADC_ConfigChannel+0x9e2>
 8004cf6:	4a19      	ldr	r2, [pc, #100]	; (8004d5c <HAL_ADC_ConfigChannel+0xa44>)
 8004cf8:	e000      	b.n	8004cfc <HAL_ADC_ConfigChannel+0x9e4>
 8004cfa:	4a13      	ldr	r2, [pc, #76]	; (8004d48 <HAL_ADC_ConfigChannel+0xa30>)
 8004cfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d04:	4619      	mov	r1, r3
 8004d06:	4610      	mov	r0, r2
 8004d08:	f7fe fecb 	bl	8003aa2 <LL_ADC_SetCommonPathInternalCh>
 8004d0c:	e012      	b.n	8004d34 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d12:	f043 0220 	orr.w	r2, r3, #32
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004d20:	e008      	b.n	8004d34 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d26:	f043 0220 	orr.w	r2, r3, #32
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004d3c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	37e4      	adds	r7, #228	; 0xe4
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd90      	pop	{r4, r7, pc}
 8004d48:	58026300 	.word	0x58026300
 8004d4c:	40022000 	.word	0x40022000
 8004d50:	40022100 	.word	0x40022100
 8004d54:	58026000 	.word	0x58026000
 8004d58:	c7520000 	.word	0xc7520000
 8004d5c:	40022300 	.word	0x40022300
 8004d60:	24000000 	.word	0x24000000
 8004d64:	053e2d63 	.word	0x053e2d63
 8004d68:	c3210000 	.word	0xc3210000
 8004d6c:	cb840000 	.word	0xcb840000

08004d70 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a6c      	ldr	r2, [pc, #432]	; (8004f30 <ADC_ConfigureBoostMode+0x1c0>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d004      	beq.n	8004d8c <ADC_ConfigureBoostMode+0x1c>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a6b      	ldr	r2, [pc, #428]	; (8004f34 <ADC_ConfigureBoostMode+0x1c4>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d109      	bne.n	8004da0 <ADC_ConfigureBoostMode+0x30>
 8004d8c:	4b6a      	ldr	r3, [pc, #424]	; (8004f38 <ADC_ConfigureBoostMode+0x1c8>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	bf14      	ite	ne
 8004d98:	2301      	movne	r3, #1
 8004d9a:	2300      	moveq	r3, #0
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	e008      	b.n	8004db2 <ADC_ConfigureBoostMode+0x42>
 8004da0:	4b66      	ldr	r3, [pc, #408]	; (8004f3c <ADC_ConfigureBoostMode+0x1cc>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	bf14      	ite	ne
 8004dac:	2301      	movne	r3, #1
 8004dae:	2300      	moveq	r3, #0
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d01c      	beq.n	8004df0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004db6:	f005 fcab 	bl	800a710 <HAL_RCC_GetHCLKFreq>
 8004dba:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004dc4:	d010      	beq.n	8004de8 <ADC_ConfigureBoostMode+0x78>
 8004dc6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004dca:	d873      	bhi.n	8004eb4 <ADC_ConfigureBoostMode+0x144>
 8004dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd0:	d002      	beq.n	8004dd8 <ADC_ConfigureBoostMode+0x68>
 8004dd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dd6:	d16d      	bne.n	8004eb4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	0c1b      	lsrs	r3, r3, #16
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de4:	60fb      	str	r3, [r7, #12]
        break;
 8004de6:	e068      	b.n	8004eba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	089b      	lsrs	r3, r3, #2
 8004dec:	60fb      	str	r3, [r7, #12]
        break;
 8004dee:	e064      	b.n	8004eba <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004df0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004df4:	f04f 0100 	mov.w	r1, #0
 8004df8:	f006 fe86 	bl	800bb08 <HAL_RCCEx_GetPeriphCLKFreq>
 8004dfc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004e06:	d051      	beq.n	8004eac <ADC_ConfigureBoostMode+0x13c>
 8004e08:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004e0c:	d854      	bhi.n	8004eb8 <ADC_ConfigureBoostMode+0x148>
 8004e0e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004e12:	d047      	beq.n	8004ea4 <ADC_ConfigureBoostMode+0x134>
 8004e14:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004e18:	d84e      	bhi.n	8004eb8 <ADC_ConfigureBoostMode+0x148>
 8004e1a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004e1e:	d03d      	beq.n	8004e9c <ADC_ConfigureBoostMode+0x12c>
 8004e20:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004e24:	d848      	bhi.n	8004eb8 <ADC_ConfigureBoostMode+0x148>
 8004e26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e2a:	d033      	beq.n	8004e94 <ADC_ConfigureBoostMode+0x124>
 8004e2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e30:	d842      	bhi.n	8004eb8 <ADC_ConfigureBoostMode+0x148>
 8004e32:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004e36:	d029      	beq.n	8004e8c <ADC_ConfigureBoostMode+0x11c>
 8004e38:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004e3c:	d83c      	bhi.n	8004eb8 <ADC_ConfigureBoostMode+0x148>
 8004e3e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004e42:	d01a      	beq.n	8004e7a <ADC_ConfigureBoostMode+0x10a>
 8004e44:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004e48:	d836      	bhi.n	8004eb8 <ADC_ConfigureBoostMode+0x148>
 8004e4a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004e4e:	d014      	beq.n	8004e7a <ADC_ConfigureBoostMode+0x10a>
 8004e50:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004e54:	d830      	bhi.n	8004eb8 <ADC_ConfigureBoostMode+0x148>
 8004e56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e5a:	d00e      	beq.n	8004e7a <ADC_ConfigureBoostMode+0x10a>
 8004e5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e60:	d82a      	bhi.n	8004eb8 <ADC_ConfigureBoostMode+0x148>
 8004e62:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e66:	d008      	beq.n	8004e7a <ADC_ConfigureBoostMode+0x10a>
 8004e68:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e6c:	d824      	bhi.n	8004eb8 <ADC_ConfigureBoostMode+0x148>
 8004e6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e72:	d002      	beq.n	8004e7a <ADC_ConfigureBoostMode+0x10a>
 8004e74:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e78:	d11e      	bne.n	8004eb8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	0c9b      	lsrs	r3, r3, #18
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e88:	60fb      	str	r3, [r7, #12]
        break;
 8004e8a:	e016      	b.n	8004eba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	091b      	lsrs	r3, r3, #4
 8004e90:	60fb      	str	r3, [r7, #12]
        break;
 8004e92:	e012      	b.n	8004eba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	095b      	lsrs	r3, r3, #5
 8004e98:	60fb      	str	r3, [r7, #12]
        break;
 8004e9a:	e00e      	b.n	8004eba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	099b      	lsrs	r3, r3, #6
 8004ea0:	60fb      	str	r3, [r7, #12]
        break;
 8004ea2:	e00a      	b.n	8004eba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	09db      	lsrs	r3, r3, #7
 8004ea8:	60fb      	str	r3, [r7, #12]
        break;
 8004eaa:	e006      	b.n	8004eba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	0a1b      	lsrs	r3, r3, #8
 8004eb0:	60fb      	str	r3, [r7, #12]
        break;
 8004eb2:	e002      	b.n	8004eba <ADC_ConfigureBoostMode+0x14a>
        break;
 8004eb4:	bf00      	nop
 8004eb6:	e000      	b.n	8004eba <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004eb8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	085b      	lsrs	r3, r3, #1
 8004ebe:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4a1f      	ldr	r2, [pc, #124]	; (8004f40 <ADC_ConfigureBoostMode+0x1d0>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d808      	bhi.n	8004eda <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689a      	ldr	r2, [r3, #8]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ed6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004ed8:	e025      	b.n	8004f26 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	4a19      	ldr	r2, [pc, #100]	; (8004f44 <ADC_ConfigureBoostMode+0x1d4>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d80a      	bhi.n	8004ef8 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ef4:	609a      	str	r2, [r3, #8]
}
 8004ef6:	e016      	b.n	8004f26 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4a13      	ldr	r2, [pc, #76]	; (8004f48 <ADC_ConfigureBoostMode+0x1d8>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d80a      	bhi.n	8004f16 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f12:	609a      	str	r2, [r3, #8]
}
 8004f14:	e007      	b.n	8004f26 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004f24:	609a      	str	r2, [r3, #8]
}
 8004f26:	bf00      	nop
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	40022000 	.word	0x40022000
 8004f34:	40022100 	.word	0x40022100
 8004f38:	40022300 	.word	0x40022300
 8004f3c:	58026300 	.word	0x58026300
 8004f40:	005f5e10 	.word	0x005f5e10
 8004f44:	00bebc20 	.word	0x00bebc20
 8004f48:	017d7840 	.word	0x017d7840

08004f4c <LL_ADC_IsEnabled>:
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d101      	bne.n	8004f64 <LL_ADC_IsEnabled+0x18>
 8004f60:	2301      	movs	r3, #1
 8004f62:	e000      	b.n	8004f66 <LL_ADC_IsEnabled+0x1a>
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <LL_ADC_REG_IsConversionOngoing>:
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 0304 	and.w	r3, r3, #4
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	d101      	bne.n	8004f8a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004f86:	2301      	movs	r3, #1
 8004f88:	e000      	b.n	8004f8c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004f98:	b590      	push	{r4, r7, lr}
 8004f9a:	b0a3      	sub	sp, #140	; 0x8c
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d101      	bne.n	8004fb6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	e0c1      	b.n	800513a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a5e      	ldr	r2, [pc, #376]	; (8005144 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d102      	bne.n	8004fd6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004fd0:	4b5d      	ldr	r3, [pc, #372]	; (8005148 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	e001      	b.n	8004fda <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10b      	bne.n	8004ff8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe4:	f043 0220 	orr.w	r2, r3, #32
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e0a0      	b.n	800513a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7ff ffb9 	bl	8004f72 <LL_ADC_REG_IsConversionOngoing>
 8005000:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4618      	mov	r0, r3
 800500a:	f7ff ffb2 	bl	8004f72 <LL_ADC_REG_IsConversionOngoing>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	f040 8081 	bne.w	8005118 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005016:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800501a:	2b00      	cmp	r3, #0
 800501c:	d17c      	bne.n	8005118 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a48      	ldr	r2, [pc, #288]	; (8005144 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d004      	beq.n	8005032 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a46      	ldr	r2, [pc, #280]	; (8005148 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d101      	bne.n	8005036 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005032:	4b46      	ldr	r3, [pc, #280]	; (800514c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005034:	e000      	b.n	8005038 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005036:	4b46      	ldr	r3, [pc, #280]	; (8005150 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005038:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d039      	beq.n	80050b6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005042:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	431a      	orrs	r2, r3
 8005050:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005052:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a3a      	ldr	r2, [pc, #232]	; (8005144 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d004      	beq.n	8005068 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a39      	ldr	r2, [pc, #228]	; (8005148 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d10e      	bne.n	8005086 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005068:	4836      	ldr	r0, [pc, #216]	; (8005144 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800506a:	f7ff ff6f 	bl	8004f4c <LL_ADC_IsEnabled>
 800506e:	4604      	mov	r4, r0
 8005070:	4835      	ldr	r0, [pc, #212]	; (8005148 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005072:	f7ff ff6b 	bl	8004f4c <LL_ADC_IsEnabled>
 8005076:	4603      	mov	r3, r0
 8005078:	4323      	orrs	r3, r4
 800507a:	2b00      	cmp	r3, #0
 800507c:	bf0c      	ite	eq
 800507e:	2301      	moveq	r3, #1
 8005080:	2300      	movne	r3, #0
 8005082:	b2db      	uxtb	r3, r3
 8005084:	e008      	b.n	8005098 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005086:	4833      	ldr	r0, [pc, #204]	; (8005154 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005088:	f7ff ff60 	bl	8004f4c <LL_ADC_IsEnabled>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	bf0c      	ite	eq
 8005092:	2301      	moveq	r3, #1
 8005094:	2300      	movne	r3, #0
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d047      	beq.n	800512c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800509c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	4b2d      	ldr	r3, [pc, #180]	; (8005158 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80050a2:	4013      	ands	r3, r2
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	6811      	ldr	r1, [r2, #0]
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	6892      	ldr	r2, [r2, #8]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	431a      	orrs	r2, r3
 80050b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050b2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050b4:	e03a      	b.n	800512c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80050b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050c0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a1f      	ldr	r2, [pc, #124]	; (8005144 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d004      	beq.n	80050d6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a1d      	ldr	r2, [pc, #116]	; (8005148 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d10e      	bne.n	80050f4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80050d6:	481b      	ldr	r0, [pc, #108]	; (8005144 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050d8:	f7ff ff38 	bl	8004f4c <LL_ADC_IsEnabled>
 80050dc:	4604      	mov	r4, r0
 80050de:	481a      	ldr	r0, [pc, #104]	; (8005148 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050e0:	f7ff ff34 	bl	8004f4c <LL_ADC_IsEnabled>
 80050e4:	4603      	mov	r3, r0
 80050e6:	4323      	orrs	r3, r4
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	bf0c      	ite	eq
 80050ec:	2301      	moveq	r3, #1
 80050ee:	2300      	movne	r3, #0
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	e008      	b.n	8005106 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80050f4:	4817      	ldr	r0, [pc, #92]	; (8005154 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80050f6:	f7ff ff29 	bl	8004f4c <LL_ADC_IsEnabled>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	bf0c      	ite	eq
 8005100:	2301      	moveq	r3, #1
 8005102:	2300      	movne	r3, #0
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d010      	beq.n	800512c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800510a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	4b12      	ldr	r3, [pc, #72]	; (8005158 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005110:	4013      	ands	r3, r2
 8005112:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005114:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005116:	e009      	b.n	800512c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800511c:	f043 0220 	orr.w	r2, r3, #32
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800512a:	e000      	b.n	800512e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800512c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005136:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800513a:	4618      	mov	r0, r3
 800513c:	378c      	adds	r7, #140	; 0x8c
 800513e:	46bd      	mov	sp, r7
 8005140:	bd90      	pop	{r4, r7, pc}
 8005142:	bf00      	nop
 8005144:	40022000 	.word	0x40022000
 8005148:	40022100 	.word	0x40022100
 800514c:	40022300 	.word	0x40022300
 8005150:	58026300 	.word	0x58026300
 8005154:	58026000 	.word	0x58026000
 8005158:	fffff0e0 	.word	0xfffff0e0

0800515c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800516c:	4b0b      	ldr	r3, [pc, #44]	; (800519c <__NVIC_SetPriorityGrouping+0x40>)
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005178:	4013      	ands	r3, r2
 800517a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005184:	4b06      	ldr	r3, [pc, #24]	; (80051a0 <__NVIC_SetPriorityGrouping+0x44>)
 8005186:	4313      	orrs	r3, r2
 8005188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800518a:	4a04      	ldr	r2, [pc, #16]	; (800519c <__NVIC_SetPriorityGrouping+0x40>)
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	60d3      	str	r3, [r2, #12]
}
 8005190:	bf00      	nop
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	e000ed00 	.word	0xe000ed00
 80051a0:	05fa0000 	.word	0x05fa0000

080051a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051a8:	4b04      	ldr	r3, [pc, #16]	; (80051bc <__NVIC_GetPriorityGrouping+0x18>)
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	0a1b      	lsrs	r3, r3, #8
 80051ae:	f003 0307 	and.w	r3, r3, #7
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	e000ed00 	.word	0xe000ed00

080051c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	4603      	mov	r3, r0
 80051c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80051ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	db0b      	blt.n	80051ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051d2:	88fb      	ldrh	r3, [r7, #6]
 80051d4:	f003 021f 	and.w	r2, r3, #31
 80051d8:	4907      	ldr	r1, [pc, #28]	; (80051f8 <__NVIC_EnableIRQ+0x38>)
 80051da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051de:	095b      	lsrs	r3, r3, #5
 80051e0:	2001      	movs	r0, #1
 80051e2:	fa00 f202 	lsl.w	r2, r0, r2
 80051e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	e000e100 	.word	0xe000e100

080051fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	4603      	mov	r3, r0
 8005204:	6039      	str	r1, [r7, #0]
 8005206:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005208:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800520c:	2b00      	cmp	r3, #0
 800520e:	db0a      	blt.n	8005226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	b2da      	uxtb	r2, r3
 8005214:	490c      	ldr	r1, [pc, #48]	; (8005248 <__NVIC_SetPriority+0x4c>)
 8005216:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800521a:	0112      	lsls	r2, r2, #4
 800521c:	b2d2      	uxtb	r2, r2
 800521e:	440b      	add	r3, r1
 8005220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005224:	e00a      	b.n	800523c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	b2da      	uxtb	r2, r3
 800522a:	4908      	ldr	r1, [pc, #32]	; (800524c <__NVIC_SetPriority+0x50>)
 800522c:	88fb      	ldrh	r3, [r7, #6]
 800522e:	f003 030f 	and.w	r3, r3, #15
 8005232:	3b04      	subs	r3, #4
 8005234:	0112      	lsls	r2, r2, #4
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	440b      	add	r3, r1
 800523a:	761a      	strb	r2, [r3, #24]
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	e000e100 	.word	0xe000e100
 800524c:	e000ed00 	.word	0xe000ed00

08005250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005250:	b480      	push	{r7}
 8005252:	b089      	sub	sp, #36	; 0x24
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f003 0307 	and.w	r3, r3, #7
 8005262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	f1c3 0307 	rsb	r3, r3, #7
 800526a:	2b04      	cmp	r3, #4
 800526c:	bf28      	it	cs
 800526e:	2304      	movcs	r3, #4
 8005270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	3304      	adds	r3, #4
 8005276:	2b06      	cmp	r3, #6
 8005278:	d902      	bls.n	8005280 <NVIC_EncodePriority+0x30>
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	3b03      	subs	r3, #3
 800527e:	e000      	b.n	8005282 <NVIC_EncodePriority+0x32>
 8005280:	2300      	movs	r3, #0
 8005282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005284:	f04f 32ff 	mov.w	r2, #4294967295
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	fa02 f303 	lsl.w	r3, r2, r3
 800528e:	43da      	mvns	r2, r3
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	401a      	ands	r2, r3
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005298:	f04f 31ff 	mov.w	r1, #4294967295
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	fa01 f303 	lsl.w	r3, r1, r3
 80052a2:	43d9      	mvns	r1, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052a8:	4313      	orrs	r3, r2
         );
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3724      	adds	r7, #36	; 0x24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
	...

080052b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052c8:	d301      	bcc.n	80052ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80052ca:	2301      	movs	r3, #1
 80052cc:	e00f      	b.n	80052ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052ce:	4a0a      	ldr	r2, [pc, #40]	; (80052f8 <SysTick_Config+0x40>)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052d6:	210f      	movs	r1, #15
 80052d8:	f04f 30ff 	mov.w	r0, #4294967295
 80052dc:	f7ff ff8e 	bl	80051fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052e0:	4b05      	ldr	r3, [pc, #20]	; (80052f8 <SysTick_Config+0x40>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052e6:	4b04      	ldr	r3, [pc, #16]	; (80052f8 <SysTick_Config+0x40>)
 80052e8:	2207      	movs	r2, #7
 80052ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	e000e010 	.word	0xe000e010

080052fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7ff ff29 	bl	800515c <__NVIC_SetPriorityGrouping>
}
 800530a:	bf00      	nop
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b086      	sub	sp, #24
 8005316:	af00      	add	r7, sp, #0
 8005318:	4603      	mov	r3, r0
 800531a:	60b9      	str	r1, [r7, #8]
 800531c:	607a      	str	r2, [r7, #4]
 800531e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005320:	f7ff ff40 	bl	80051a4 <__NVIC_GetPriorityGrouping>
 8005324:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	68b9      	ldr	r1, [r7, #8]
 800532a:	6978      	ldr	r0, [r7, #20]
 800532c:	f7ff ff90 	bl	8005250 <NVIC_EncodePriority>
 8005330:	4602      	mov	r2, r0
 8005332:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005336:	4611      	mov	r1, r2
 8005338:	4618      	mov	r0, r3
 800533a:	f7ff ff5f 	bl	80051fc <__NVIC_SetPriority>
}
 800533e:	bf00      	nop
 8005340:	3718      	adds	r7, #24
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b082      	sub	sp, #8
 800534a:	af00      	add	r7, sp, #0
 800534c:	4603      	mov	r3, r0
 800534e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005350:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005354:	4618      	mov	r0, r3
 8005356:	f7ff ff33 	bl	80051c0 <__NVIC_EnableIRQ>
}
 800535a:	bf00      	nop
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b082      	sub	sp, #8
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7ff ffa4 	bl	80052b8 <SysTick_Config>
 8005370:	4603      	mov	r3, r0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
	...

0800537c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005384:	f7fe fb34 	bl	80039f0 <HAL_GetTick>
 8005388:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e312      	b.n	80059ba <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a66      	ldr	r2, [pc, #408]	; (8005534 <HAL_DMA_Init+0x1b8>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d04a      	beq.n	8005434 <HAL_DMA_Init+0xb8>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a65      	ldr	r2, [pc, #404]	; (8005538 <HAL_DMA_Init+0x1bc>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d045      	beq.n	8005434 <HAL_DMA_Init+0xb8>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a63      	ldr	r2, [pc, #396]	; (800553c <HAL_DMA_Init+0x1c0>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d040      	beq.n	8005434 <HAL_DMA_Init+0xb8>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a62      	ldr	r2, [pc, #392]	; (8005540 <HAL_DMA_Init+0x1c4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d03b      	beq.n	8005434 <HAL_DMA_Init+0xb8>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a60      	ldr	r2, [pc, #384]	; (8005544 <HAL_DMA_Init+0x1c8>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d036      	beq.n	8005434 <HAL_DMA_Init+0xb8>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a5f      	ldr	r2, [pc, #380]	; (8005548 <HAL_DMA_Init+0x1cc>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d031      	beq.n	8005434 <HAL_DMA_Init+0xb8>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a5d      	ldr	r2, [pc, #372]	; (800554c <HAL_DMA_Init+0x1d0>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d02c      	beq.n	8005434 <HAL_DMA_Init+0xb8>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a5c      	ldr	r2, [pc, #368]	; (8005550 <HAL_DMA_Init+0x1d4>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d027      	beq.n	8005434 <HAL_DMA_Init+0xb8>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a5a      	ldr	r2, [pc, #360]	; (8005554 <HAL_DMA_Init+0x1d8>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d022      	beq.n	8005434 <HAL_DMA_Init+0xb8>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a59      	ldr	r2, [pc, #356]	; (8005558 <HAL_DMA_Init+0x1dc>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d01d      	beq.n	8005434 <HAL_DMA_Init+0xb8>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a57      	ldr	r2, [pc, #348]	; (800555c <HAL_DMA_Init+0x1e0>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d018      	beq.n	8005434 <HAL_DMA_Init+0xb8>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a56      	ldr	r2, [pc, #344]	; (8005560 <HAL_DMA_Init+0x1e4>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d013      	beq.n	8005434 <HAL_DMA_Init+0xb8>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a54      	ldr	r2, [pc, #336]	; (8005564 <HAL_DMA_Init+0x1e8>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00e      	beq.n	8005434 <HAL_DMA_Init+0xb8>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a53      	ldr	r2, [pc, #332]	; (8005568 <HAL_DMA_Init+0x1ec>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d009      	beq.n	8005434 <HAL_DMA_Init+0xb8>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a51      	ldr	r2, [pc, #324]	; (800556c <HAL_DMA_Init+0x1f0>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d004      	beq.n	8005434 <HAL_DMA_Init+0xb8>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a50      	ldr	r2, [pc, #320]	; (8005570 <HAL_DMA_Init+0x1f4>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d101      	bne.n	8005438 <HAL_DMA_Init+0xbc>
 8005434:	2301      	movs	r3, #1
 8005436:	e000      	b.n	800543a <HAL_DMA_Init+0xbe>
 8005438:	2300      	movs	r3, #0
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 813c 	beq.w	80056b8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a37      	ldr	r2, [pc, #220]	; (8005534 <HAL_DMA_Init+0x1b8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d04a      	beq.n	80054f0 <HAL_DMA_Init+0x174>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a36      	ldr	r2, [pc, #216]	; (8005538 <HAL_DMA_Init+0x1bc>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d045      	beq.n	80054f0 <HAL_DMA_Init+0x174>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a34      	ldr	r2, [pc, #208]	; (800553c <HAL_DMA_Init+0x1c0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d040      	beq.n	80054f0 <HAL_DMA_Init+0x174>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a33      	ldr	r2, [pc, #204]	; (8005540 <HAL_DMA_Init+0x1c4>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d03b      	beq.n	80054f0 <HAL_DMA_Init+0x174>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a31      	ldr	r2, [pc, #196]	; (8005544 <HAL_DMA_Init+0x1c8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d036      	beq.n	80054f0 <HAL_DMA_Init+0x174>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a30      	ldr	r2, [pc, #192]	; (8005548 <HAL_DMA_Init+0x1cc>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d031      	beq.n	80054f0 <HAL_DMA_Init+0x174>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a2e      	ldr	r2, [pc, #184]	; (800554c <HAL_DMA_Init+0x1d0>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d02c      	beq.n	80054f0 <HAL_DMA_Init+0x174>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a2d      	ldr	r2, [pc, #180]	; (8005550 <HAL_DMA_Init+0x1d4>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d027      	beq.n	80054f0 <HAL_DMA_Init+0x174>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a2b      	ldr	r2, [pc, #172]	; (8005554 <HAL_DMA_Init+0x1d8>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d022      	beq.n	80054f0 <HAL_DMA_Init+0x174>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a2a      	ldr	r2, [pc, #168]	; (8005558 <HAL_DMA_Init+0x1dc>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d01d      	beq.n	80054f0 <HAL_DMA_Init+0x174>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a28      	ldr	r2, [pc, #160]	; (800555c <HAL_DMA_Init+0x1e0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d018      	beq.n	80054f0 <HAL_DMA_Init+0x174>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a27      	ldr	r2, [pc, #156]	; (8005560 <HAL_DMA_Init+0x1e4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d013      	beq.n	80054f0 <HAL_DMA_Init+0x174>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a25      	ldr	r2, [pc, #148]	; (8005564 <HAL_DMA_Init+0x1e8>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00e      	beq.n	80054f0 <HAL_DMA_Init+0x174>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a24      	ldr	r2, [pc, #144]	; (8005568 <HAL_DMA_Init+0x1ec>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d009      	beq.n	80054f0 <HAL_DMA_Init+0x174>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a22      	ldr	r2, [pc, #136]	; (800556c <HAL_DMA_Init+0x1f0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d004      	beq.n	80054f0 <HAL_DMA_Init+0x174>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a21      	ldr	r2, [pc, #132]	; (8005570 <HAL_DMA_Init+0x1f4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d108      	bne.n	8005502 <HAL_DMA_Init+0x186>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 0201 	bic.w	r2, r2, #1
 80054fe:	601a      	str	r2, [r3, #0]
 8005500:	e007      	b.n	8005512 <HAL_DMA_Init+0x196>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 0201 	bic.w	r2, r2, #1
 8005510:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005512:	e02f      	b.n	8005574 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005514:	f7fe fa6c 	bl	80039f0 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b05      	cmp	r3, #5
 8005520:	d928      	bls.n	8005574 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2220      	movs	r2, #32
 8005526:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2203      	movs	r2, #3
 800552c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e242      	b.n	80059ba <HAL_DMA_Init+0x63e>
 8005534:	40020010 	.word	0x40020010
 8005538:	40020028 	.word	0x40020028
 800553c:	40020040 	.word	0x40020040
 8005540:	40020058 	.word	0x40020058
 8005544:	40020070 	.word	0x40020070
 8005548:	40020088 	.word	0x40020088
 800554c:	400200a0 	.word	0x400200a0
 8005550:	400200b8 	.word	0x400200b8
 8005554:	40020410 	.word	0x40020410
 8005558:	40020428 	.word	0x40020428
 800555c:	40020440 	.word	0x40020440
 8005560:	40020458 	.word	0x40020458
 8005564:	40020470 	.word	0x40020470
 8005568:	40020488 	.word	0x40020488
 800556c:	400204a0 	.word	0x400204a0
 8005570:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1c8      	bne.n	8005514 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	4b83      	ldr	r3, [pc, #524]	; (800579c <HAL_DMA_Init+0x420>)
 800558e:	4013      	ands	r3, r2
 8005590:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800559a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055b2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	4313      	orrs	r3, r2
 80055be:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	2b04      	cmp	r3, #4
 80055c6:	d107      	bne.n	80055d8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d0:	4313      	orrs	r3, r2
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	2b28      	cmp	r3, #40	; 0x28
 80055de:	d903      	bls.n	80055e8 <HAL_DMA_Init+0x26c>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2b2e      	cmp	r3, #46	; 0x2e
 80055e6:	d91f      	bls.n	8005628 <HAL_DMA_Init+0x2ac>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	2b3e      	cmp	r3, #62	; 0x3e
 80055ee:	d903      	bls.n	80055f8 <HAL_DMA_Init+0x27c>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	2b42      	cmp	r3, #66	; 0x42
 80055f6:	d917      	bls.n	8005628 <HAL_DMA_Init+0x2ac>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	2b46      	cmp	r3, #70	; 0x46
 80055fe:	d903      	bls.n	8005608 <HAL_DMA_Init+0x28c>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	2b48      	cmp	r3, #72	; 0x48
 8005606:	d90f      	bls.n	8005628 <HAL_DMA_Init+0x2ac>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	2b4e      	cmp	r3, #78	; 0x4e
 800560e:	d903      	bls.n	8005618 <HAL_DMA_Init+0x29c>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	2b52      	cmp	r3, #82	; 0x52
 8005616:	d907      	bls.n	8005628 <HAL_DMA_Init+0x2ac>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	2b73      	cmp	r3, #115	; 0x73
 800561e:	d905      	bls.n	800562c <HAL_DMA_Init+0x2b0>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	2b77      	cmp	r3, #119	; 0x77
 8005626:	d801      	bhi.n	800562c <HAL_DMA_Init+0x2b0>
 8005628:	2301      	movs	r3, #1
 800562a:	e000      	b.n	800562e <HAL_DMA_Init+0x2b2>
 800562c:	2300      	movs	r3, #0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005638:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f023 0307 	bic.w	r3, r3, #7
 8005650:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	4313      	orrs	r3, r2
 800565a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005660:	2b04      	cmp	r3, #4
 8005662:	d117      	bne.n	8005694 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	4313      	orrs	r3, r2
 800566c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00e      	beq.n	8005694 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f001 fdca 	bl	8007210 <DMA_CheckFifoParam>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d008      	beq.n	8005694 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2240      	movs	r2, #64	; 0x40
 8005686:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e192      	b.n	80059ba <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f001 fd05 	bl	80070ac <DMA_CalcBaseAndBitshift>
 80056a2:	4603      	mov	r3, r0
 80056a4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056aa:	f003 031f 	and.w	r3, r3, #31
 80056ae:	223f      	movs	r2, #63	; 0x3f
 80056b0:	409a      	lsls	r2, r3
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	609a      	str	r2, [r3, #8]
 80056b6:	e0c8      	b.n	800584a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a38      	ldr	r2, [pc, #224]	; (80057a0 <HAL_DMA_Init+0x424>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d022      	beq.n	8005708 <HAL_DMA_Init+0x38c>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a37      	ldr	r2, [pc, #220]	; (80057a4 <HAL_DMA_Init+0x428>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d01d      	beq.n	8005708 <HAL_DMA_Init+0x38c>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a35      	ldr	r2, [pc, #212]	; (80057a8 <HAL_DMA_Init+0x42c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d018      	beq.n	8005708 <HAL_DMA_Init+0x38c>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a34      	ldr	r2, [pc, #208]	; (80057ac <HAL_DMA_Init+0x430>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d013      	beq.n	8005708 <HAL_DMA_Init+0x38c>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a32      	ldr	r2, [pc, #200]	; (80057b0 <HAL_DMA_Init+0x434>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d00e      	beq.n	8005708 <HAL_DMA_Init+0x38c>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a31      	ldr	r2, [pc, #196]	; (80057b4 <HAL_DMA_Init+0x438>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d009      	beq.n	8005708 <HAL_DMA_Init+0x38c>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a2f      	ldr	r2, [pc, #188]	; (80057b8 <HAL_DMA_Init+0x43c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d004      	beq.n	8005708 <HAL_DMA_Init+0x38c>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a2e      	ldr	r2, [pc, #184]	; (80057bc <HAL_DMA_Init+0x440>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d101      	bne.n	800570c <HAL_DMA_Init+0x390>
 8005708:	2301      	movs	r3, #1
 800570a:	e000      	b.n	800570e <HAL_DMA_Init+0x392>
 800570c:	2300      	movs	r3, #0
 800570e:	2b00      	cmp	r3, #0
 8005710:	f000 8092 	beq.w	8005838 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a21      	ldr	r2, [pc, #132]	; (80057a0 <HAL_DMA_Init+0x424>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d021      	beq.n	8005762 <HAL_DMA_Init+0x3e6>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a20      	ldr	r2, [pc, #128]	; (80057a4 <HAL_DMA_Init+0x428>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d01c      	beq.n	8005762 <HAL_DMA_Init+0x3e6>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a1e      	ldr	r2, [pc, #120]	; (80057a8 <HAL_DMA_Init+0x42c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d017      	beq.n	8005762 <HAL_DMA_Init+0x3e6>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a1d      	ldr	r2, [pc, #116]	; (80057ac <HAL_DMA_Init+0x430>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d012      	beq.n	8005762 <HAL_DMA_Init+0x3e6>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a1b      	ldr	r2, [pc, #108]	; (80057b0 <HAL_DMA_Init+0x434>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d00d      	beq.n	8005762 <HAL_DMA_Init+0x3e6>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a1a      	ldr	r2, [pc, #104]	; (80057b4 <HAL_DMA_Init+0x438>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d008      	beq.n	8005762 <HAL_DMA_Init+0x3e6>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a18      	ldr	r2, [pc, #96]	; (80057b8 <HAL_DMA_Init+0x43c>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d003      	beq.n	8005762 <HAL_DMA_Init+0x3e6>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a17      	ldr	r2, [pc, #92]	; (80057bc <HAL_DMA_Init+0x440>)
 8005760:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2202      	movs	r2, #2
 8005766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	4b10      	ldr	r3, [pc, #64]	; (80057c0 <HAL_DMA_Init+0x444>)
 800577e:	4013      	ands	r3, r2
 8005780:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	2b40      	cmp	r3, #64	; 0x40
 8005788:	d01c      	beq.n	80057c4 <HAL_DMA_Init+0x448>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	2b80      	cmp	r3, #128	; 0x80
 8005790:	d102      	bne.n	8005798 <HAL_DMA_Init+0x41c>
 8005792:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005796:	e016      	b.n	80057c6 <HAL_DMA_Init+0x44a>
 8005798:	2300      	movs	r3, #0
 800579a:	e014      	b.n	80057c6 <HAL_DMA_Init+0x44a>
 800579c:	fe10803f 	.word	0xfe10803f
 80057a0:	58025408 	.word	0x58025408
 80057a4:	5802541c 	.word	0x5802541c
 80057a8:	58025430 	.word	0x58025430
 80057ac:	58025444 	.word	0x58025444
 80057b0:	58025458 	.word	0x58025458
 80057b4:	5802546c 	.word	0x5802546c
 80057b8:	58025480 	.word	0x58025480
 80057bc:	58025494 	.word	0x58025494
 80057c0:	fffe000f 	.word	0xfffe000f
 80057c4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	68d2      	ldr	r2, [r2, #12]
 80057ca:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80057cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80057d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80057dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80057e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80057ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80057f4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	461a      	mov	r2, r3
 800580a:	4b6e      	ldr	r3, [pc, #440]	; (80059c4 <HAL_DMA_Init+0x648>)
 800580c:	4413      	add	r3, r2
 800580e:	4a6e      	ldr	r2, [pc, #440]	; (80059c8 <HAL_DMA_Init+0x64c>)
 8005810:	fba2 2303 	umull	r2, r3, r2, r3
 8005814:	091b      	lsrs	r3, r3, #4
 8005816:	009a      	lsls	r2, r3, #2
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f001 fc45 	bl	80070ac <DMA_CalcBaseAndBitshift>
 8005822:	4603      	mov	r3, r0
 8005824:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800582a:	f003 031f 	and.w	r3, r3, #31
 800582e:	2201      	movs	r2, #1
 8005830:	409a      	lsls	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	605a      	str	r2, [r3, #4]
 8005836:	e008      	b.n	800584a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2240      	movs	r2, #64	; 0x40
 800583c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2203      	movs	r2, #3
 8005842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e0b7      	b.n	80059ba <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a5f      	ldr	r2, [pc, #380]	; (80059cc <HAL_DMA_Init+0x650>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d072      	beq.n	800593a <HAL_DMA_Init+0x5be>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a5d      	ldr	r2, [pc, #372]	; (80059d0 <HAL_DMA_Init+0x654>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d06d      	beq.n	800593a <HAL_DMA_Init+0x5be>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a5c      	ldr	r2, [pc, #368]	; (80059d4 <HAL_DMA_Init+0x658>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d068      	beq.n	800593a <HAL_DMA_Init+0x5be>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a5a      	ldr	r2, [pc, #360]	; (80059d8 <HAL_DMA_Init+0x65c>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d063      	beq.n	800593a <HAL_DMA_Init+0x5be>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a59      	ldr	r2, [pc, #356]	; (80059dc <HAL_DMA_Init+0x660>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d05e      	beq.n	800593a <HAL_DMA_Init+0x5be>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a57      	ldr	r2, [pc, #348]	; (80059e0 <HAL_DMA_Init+0x664>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d059      	beq.n	800593a <HAL_DMA_Init+0x5be>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a56      	ldr	r2, [pc, #344]	; (80059e4 <HAL_DMA_Init+0x668>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d054      	beq.n	800593a <HAL_DMA_Init+0x5be>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a54      	ldr	r2, [pc, #336]	; (80059e8 <HAL_DMA_Init+0x66c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d04f      	beq.n	800593a <HAL_DMA_Init+0x5be>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a53      	ldr	r2, [pc, #332]	; (80059ec <HAL_DMA_Init+0x670>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d04a      	beq.n	800593a <HAL_DMA_Init+0x5be>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a51      	ldr	r2, [pc, #324]	; (80059f0 <HAL_DMA_Init+0x674>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d045      	beq.n	800593a <HAL_DMA_Init+0x5be>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a50      	ldr	r2, [pc, #320]	; (80059f4 <HAL_DMA_Init+0x678>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d040      	beq.n	800593a <HAL_DMA_Init+0x5be>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a4e      	ldr	r2, [pc, #312]	; (80059f8 <HAL_DMA_Init+0x67c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d03b      	beq.n	800593a <HAL_DMA_Init+0x5be>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a4d      	ldr	r2, [pc, #308]	; (80059fc <HAL_DMA_Init+0x680>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d036      	beq.n	800593a <HAL_DMA_Init+0x5be>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a4b      	ldr	r2, [pc, #300]	; (8005a00 <HAL_DMA_Init+0x684>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d031      	beq.n	800593a <HAL_DMA_Init+0x5be>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a4a      	ldr	r2, [pc, #296]	; (8005a04 <HAL_DMA_Init+0x688>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d02c      	beq.n	800593a <HAL_DMA_Init+0x5be>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a48      	ldr	r2, [pc, #288]	; (8005a08 <HAL_DMA_Init+0x68c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d027      	beq.n	800593a <HAL_DMA_Init+0x5be>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a47      	ldr	r2, [pc, #284]	; (8005a0c <HAL_DMA_Init+0x690>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d022      	beq.n	800593a <HAL_DMA_Init+0x5be>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a45      	ldr	r2, [pc, #276]	; (8005a10 <HAL_DMA_Init+0x694>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d01d      	beq.n	800593a <HAL_DMA_Init+0x5be>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a44      	ldr	r2, [pc, #272]	; (8005a14 <HAL_DMA_Init+0x698>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d018      	beq.n	800593a <HAL_DMA_Init+0x5be>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a42      	ldr	r2, [pc, #264]	; (8005a18 <HAL_DMA_Init+0x69c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d013      	beq.n	800593a <HAL_DMA_Init+0x5be>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a41      	ldr	r2, [pc, #260]	; (8005a1c <HAL_DMA_Init+0x6a0>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00e      	beq.n	800593a <HAL_DMA_Init+0x5be>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a3f      	ldr	r2, [pc, #252]	; (8005a20 <HAL_DMA_Init+0x6a4>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d009      	beq.n	800593a <HAL_DMA_Init+0x5be>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a3e      	ldr	r2, [pc, #248]	; (8005a24 <HAL_DMA_Init+0x6a8>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d004      	beq.n	800593a <HAL_DMA_Init+0x5be>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a3c      	ldr	r2, [pc, #240]	; (8005a28 <HAL_DMA_Init+0x6ac>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d101      	bne.n	800593e <HAL_DMA_Init+0x5c2>
 800593a:	2301      	movs	r3, #1
 800593c:	e000      	b.n	8005940 <HAL_DMA_Init+0x5c4>
 800593e:	2300      	movs	r3, #0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d032      	beq.n	80059aa <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f001 fcdf 	bl	8007308 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	2b80      	cmp	r3, #128	; 0x80
 8005950:	d102      	bne.n	8005958 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005960:	b2d2      	uxtb	r2, r2
 8005962:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800596c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d010      	beq.n	8005998 <HAL_DMA_Init+0x61c>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	2b08      	cmp	r3, #8
 800597c:	d80c      	bhi.n	8005998 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f001 fd5c 	bl	800743c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005988:	2200      	movs	r2, #0
 800598a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005994:	605a      	str	r2, [r3, #4]
 8005996:	e008      	b.n	80059aa <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3718      	adds	r7, #24
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	a7fdabf8 	.word	0xa7fdabf8
 80059c8:	cccccccd 	.word	0xcccccccd
 80059cc:	40020010 	.word	0x40020010
 80059d0:	40020028 	.word	0x40020028
 80059d4:	40020040 	.word	0x40020040
 80059d8:	40020058 	.word	0x40020058
 80059dc:	40020070 	.word	0x40020070
 80059e0:	40020088 	.word	0x40020088
 80059e4:	400200a0 	.word	0x400200a0
 80059e8:	400200b8 	.word	0x400200b8
 80059ec:	40020410 	.word	0x40020410
 80059f0:	40020428 	.word	0x40020428
 80059f4:	40020440 	.word	0x40020440
 80059f8:	40020458 	.word	0x40020458
 80059fc:	40020470 	.word	0x40020470
 8005a00:	40020488 	.word	0x40020488
 8005a04:	400204a0 	.word	0x400204a0
 8005a08:	400204b8 	.word	0x400204b8
 8005a0c:	58025408 	.word	0x58025408
 8005a10:	5802541c 	.word	0x5802541c
 8005a14:	58025430 	.word	0x58025430
 8005a18:	58025444 	.word	0x58025444
 8005a1c:	58025458 	.word	0x58025458
 8005a20:	5802546c 	.word	0x5802546c
 8005a24:	58025480 	.word	0x58025480
 8005a28:	58025494 	.word	0x58025494

08005a2c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
 8005a38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e226      	b.n	8005e96 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d101      	bne.n	8005a56 <HAL_DMA_Start_IT+0x2a>
 8005a52:	2302      	movs	r3, #2
 8005a54:	e21f      	b.n	8005e96 <HAL_DMA_Start_IT+0x46a>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	f040 820a 	bne.w	8005e80 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a68      	ldr	r2, [pc, #416]	; (8005c20 <HAL_DMA_Start_IT+0x1f4>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d04a      	beq.n	8005b1a <HAL_DMA_Start_IT+0xee>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a66      	ldr	r2, [pc, #408]	; (8005c24 <HAL_DMA_Start_IT+0x1f8>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d045      	beq.n	8005b1a <HAL_DMA_Start_IT+0xee>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a65      	ldr	r2, [pc, #404]	; (8005c28 <HAL_DMA_Start_IT+0x1fc>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d040      	beq.n	8005b1a <HAL_DMA_Start_IT+0xee>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a63      	ldr	r2, [pc, #396]	; (8005c2c <HAL_DMA_Start_IT+0x200>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d03b      	beq.n	8005b1a <HAL_DMA_Start_IT+0xee>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a62      	ldr	r2, [pc, #392]	; (8005c30 <HAL_DMA_Start_IT+0x204>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d036      	beq.n	8005b1a <HAL_DMA_Start_IT+0xee>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a60      	ldr	r2, [pc, #384]	; (8005c34 <HAL_DMA_Start_IT+0x208>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d031      	beq.n	8005b1a <HAL_DMA_Start_IT+0xee>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a5f      	ldr	r2, [pc, #380]	; (8005c38 <HAL_DMA_Start_IT+0x20c>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d02c      	beq.n	8005b1a <HAL_DMA_Start_IT+0xee>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a5d      	ldr	r2, [pc, #372]	; (8005c3c <HAL_DMA_Start_IT+0x210>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d027      	beq.n	8005b1a <HAL_DMA_Start_IT+0xee>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a5c      	ldr	r2, [pc, #368]	; (8005c40 <HAL_DMA_Start_IT+0x214>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d022      	beq.n	8005b1a <HAL_DMA_Start_IT+0xee>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a5a      	ldr	r2, [pc, #360]	; (8005c44 <HAL_DMA_Start_IT+0x218>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d01d      	beq.n	8005b1a <HAL_DMA_Start_IT+0xee>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a59      	ldr	r2, [pc, #356]	; (8005c48 <HAL_DMA_Start_IT+0x21c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d018      	beq.n	8005b1a <HAL_DMA_Start_IT+0xee>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a57      	ldr	r2, [pc, #348]	; (8005c4c <HAL_DMA_Start_IT+0x220>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d013      	beq.n	8005b1a <HAL_DMA_Start_IT+0xee>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a56      	ldr	r2, [pc, #344]	; (8005c50 <HAL_DMA_Start_IT+0x224>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d00e      	beq.n	8005b1a <HAL_DMA_Start_IT+0xee>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a54      	ldr	r2, [pc, #336]	; (8005c54 <HAL_DMA_Start_IT+0x228>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d009      	beq.n	8005b1a <HAL_DMA_Start_IT+0xee>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a53      	ldr	r2, [pc, #332]	; (8005c58 <HAL_DMA_Start_IT+0x22c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d004      	beq.n	8005b1a <HAL_DMA_Start_IT+0xee>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a51      	ldr	r2, [pc, #324]	; (8005c5c <HAL_DMA_Start_IT+0x230>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d108      	bne.n	8005b2c <HAL_DMA_Start_IT+0x100>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f022 0201 	bic.w	r2, r2, #1
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	e007      	b.n	8005b3c <HAL_DMA_Start_IT+0x110>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 0201 	bic.w	r2, r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	68b9      	ldr	r1, [r7, #8]
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f001 f906 	bl	8006d54 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a34      	ldr	r2, [pc, #208]	; (8005c20 <HAL_DMA_Start_IT+0x1f4>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d04a      	beq.n	8005be8 <HAL_DMA_Start_IT+0x1bc>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a33      	ldr	r2, [pc, #204]	; (8005c24 <HAL_DMA_Start_IT+0x1f8>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d045      	beq.n	8005be8 <HAL_DMA_Start_IT+0x1bc>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a31      	ldr	r2, [pc, #196]	; (8005c28 <HAL_DMA_Start_IT+0x1fc>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d040      	beq.n	8005be8 <HAL_DMA_Start_IT+0x1bc>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a30      	ldr	r2, [pc, #192]	; (8005c2c <HAL_DMA_Start_IT+0x200>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d03b      	beq.n	8005be8 <HAL_DMA_Start_IT+0x1bc>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a2e      	ldr	r2, [pc, #184]	; (8005c30 <HAL_DMA_Start_IT+0x204>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d036      	beq.n	8005be8 <HAL_DMA_Start_IT+0x1bc>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a2d      	ldr	r2, [pc, #180]	; (8005c34 <HAL_DMA_Start_IT+0x208>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d031      	beq.n	8005be8 <HAL_DMA_Start_IT+0x1bc>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a2b      	ldr	r2, [pc, #172]	; (8005c38 <HAL_DMA_Start_IT+0x20c>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d02c      	beq.n	8005be8 <HAL_DMA_Start_IT+0x1bc>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a2a      	ldr	r2, [pc, #168]	; (8005c3c <HAL_DMA_Start_IT+0x210>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d027      	beq.n	8005be8 <HAL_DMA_Start_IT+0x1bc>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a28      	ldr	r2, [pc, #160]	; (8005c40 <HAL_DMA_Start_IT+0x214>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d022      	beq.n	8005be8 <HAL_DMA_Start_IT+0x1bc>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a27      	ldr	r2, [pc, #156]	; (8005c44 <HAL_DMA_Start_IT+0x218>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d01d      	beq.n	8005be8 <HAL_DMA_Start_IT+0x1bc>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a25      	ldr	r2, [pc, #148]	; (8005c48 <HAL_DMA_Start_IT+0x21c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d018      	beq.n	8005be8 <HAL_DMA_Start_IT+0x1bc>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a24      	ldr	r2, [pc, #144]	; (8005c4c <HAL_DMA_Start_IT+0x220>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d013      	beq.n	8005be8 <HAL_DMA_Start_IT+0x1bc>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a22      	ldr	r2, [pc, #136]	; (8005c50 <HAL_DMA_Start_IT+0x224>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d00e      	beq.n	8005be8 <HAL_DMA_Start_IT+0x1bc>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a21      	ldr	r2, [pc, #132]	; (8005c54 <HAL_DMA_Start_IT+0x228>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d009      	beq.n	8005be8 <HAL_DMA_Start_IT+0x1bc>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a1f      	ldr	r2, [pc, #124]	; (8005c58 <HAL_DMA_Start_IT+0x22c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d004      	beq.n	8005be8 <HAL_DMA_Start_IT+0x1bc>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a1e      	ldr	r2, [pc, #120]	; (8005c5c <HAL_DMA_Start_IT+0x230>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d101      	bne.n	8005bec <HAL_DMA_Start_IT+0x1c0>
 8005be8:	2301      	movs	r3, #1
 8005bea:	e000      	b.n	8005bee <HAL_DMA_Start_IT+0x1c2>
 8005bec:	2300      	movs	r3, #0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d036      	beq.n	8005c60 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f023 021e 	bic.w	r2, r3, #30
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f042 0216 	orr.w	r2, r2, #22
 8005c04:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d03e      	beq.n	8005c8c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f042 0208 	orr.w	r2, r2, #8
 8005c1c:	601a      	str	r2, [r3, #0]
 8005c1e:	e035      	b.n	8005c8c <HAL_DMA_Start_IT+0x260>
 8005c20:	40020010 	.word	0x40020010
 8005c24:	40020028 	.word	0x40020028
 8005c28:	40020040 	.word	0x40020040
 8005c2c:	40020058 	.word	0x40020058
 8005c30:	40020070 	.word	0x40020070
 8005c34:	40020088 	.word	0x40020088
 8005c38:	400200a0 	.word	0x400200a0
 8005c3c:	400200b8 	.word	0x400200b8
 8005c40:	40020410 	.word	0x40020410
 8005c44:	40020428 	.word	0x40020428
 8005c48:	40020440 	.word	0x40020440
 8005c4c:	40020458 	.word	0x40020458
 8005c50:	40020470 	.word	0x40020470
 8005c54:	40020488 	.word	0x40020488
 8005c58:	400204a0 	.word	0x400204a0
 8005c5c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f023 020e 	bic.w	r2, r3, #14
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 020a 	orr.w	r2, r2, #10
 8005c72:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d007      	beq.n	8005c8c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0204 	orr.w	r2, r2, #4
 8005c8a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a83      	ldr	r2, [pc, #524]	; (8005ea0 <HAL_DMA_Start_IT+0x474>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d072      	beq.n	8005d7c <HAL_DMA_Start_IT+0x350>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a82      	ldr	r2, [pc, #520]	; (8005ea4 <HAL_DMA_Start_IT+0x478>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d06d      	beq.n	8005d7c <HAL_DMA_Start_IT+0x350>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a80      	ldr	r2, [pc, #512]	; (8005ea8 <HAL_DMA_Start_IT+0x47c>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d068      	beq.n	8005d7c <HAL_DMA_Start_IT+0x350>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a7f      	ldr	r2, [pc, #508]	; (8005eac <HAL_DMA_Start_IT+0x480>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d063      	beq.n	8005d7c <HAL_DMA_Start_IT+0x350>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a7d      	ldr	r2, [pc, #500]	; (8005eb0 <HAL_DMA_Start_IT+0x484>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d05e      	beq.n	8005d7c <HAL_DMA_Start_IT+0x350>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a7c      	ldr	r2, [pc, #496]	; (8005eb4 <HAL_DMA_Start_IT+0x488>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d059      	beq.n	8005d7c <HAL_DMA_Start_IT+0x350>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a7a      	ldr	r2, [pc, #488]	; (8005eb8 <HAL_DMA_Start_IT+0x48c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d054      	beq.n	8005d7c <HAL_DMA_Start_IT+0x350>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a79      	ldr	r2, [pc, #484]	; (8005ebc <HAL_DMA_Start_IT+0x490>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d04f      	beq.n	8005d7c <HAL_DMA_Start_IT+0x350>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a77      	ldr	r2, [pc, #476]	; (8005ec0 <HAL_DMA_Start_IT+0x494>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d04a      	beq.n	8005d7c <HAL_DMA_Start_IT+0x350>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a76      	ldr	r2, [pc, #472]	; (8005ec4 <HAL_DMA_Start_IT+0x498>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d045      	beq.n	8005d7c <HAL_DMA_Start_IT+0x350>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a74      	ldr	r2, [pc, #464]	; (8005ec8 <HAL_DMA_Start_IT+0x49c>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d040      	beq.n	8005d7c <HAL_DMA_Start_IT+0x350>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a73      	ldr	r2, [pc, #460]	; (8005ecc <HAL_DMA_Start_IT+0x4a0>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d03b      	beq.n	8005d7c <HAL_DMA_Start_IT+0x350>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a71      	ldr	r2, [pc, #452]	; (8005ed0 <HAL_DMA_Start_IT+0x4a4>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d036      	beq.n	8005d7c <HAL_DMA_Start_IT+0x350>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a70      	ldr	r2, [pc, #448]	; (8005ed4 <HAL_DMA_Start_IT+0x4a8>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d031      	beq.n	8005d7c <HAL_DMA_Start_IT+0x350>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a6e      	ldr	r2, [pc, #440]	; (8005ed8 <HAL_DMA_Start_IT+0x4ac>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d02c      	beq.n	8005d7c <HAL_DMA_Start_IT+0x350>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a6d      	ldr	r2, [pc, #436]	; (8005edc <HAL_DMA_Start_IT+0x4b0>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d027      	beq.n	8005d7c <HAL_DMA_Start_IT+0x350>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a6b      	ldr	r2, [pc, #428]	; (8005ee0 <HAL_DMA_Start_IT+0x4b4>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d022      	beq.n	8005d7c <HAL_DMA_Start_IT+0x350>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a6a      	ldr	r2, [pc, #424]	; (8005ee4 <HAL_DMA_Start_IT+0x4b8>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d01d      	beq.n	8005d7c <HAL_DMA_Start_IT+0x350>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a68      	ldr	r2, [pc, #416]	; (8005ee8 <HAL_DMA_Start_IT+0x4bc>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d018      	beq.n	8005d7c <HAL_DMA_Start_IT+0x350>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a67      	ldr	r2, [pc, #412]	; (8005eec <HAL_DMA_Start_IT+0x4c0>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d013      	beq.n	8005d7c <HAL_DMA_Start_IT+0x350>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a65      	ldr	r2, [pc, #404]	; (8005ef0 <HAL_DMA_Start_IT+0x4c4>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d00e      	beq.n	8005d7c <HAL_DMA_Start_IT+0x350>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a64      	ldr	r2, [pc, #400]	; (8005ef4 <HAL_DMA_Start_IT+0x4c8>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d009      	beq.n	8005d7c <HAL_DMA_Start_IT+0x350>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a62      	ldr	r2, [pc, #392]	; (8005ef8 <HAL_DMA_Start_IT+0x4cc>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d004      	beq.n	8005d7c <HAL_DMA_Start_IT+0x350>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a61      	ldr	r2, [pc, #388]	; (8005efc <HAL_DMA_Start_IT+0x4d0>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d101      	bne.n	8005d80 <HAL_DMA_Start_IT+0x354>
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e000      	b.n	8005d82 <HAL_DMA_Start_IT+0x356>
 8005d80:	2300      	movs	r3, #0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d01a      	beq.n	8005dbc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d007      	beq.n	8005da4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005da2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d007      	beq.n	8005dbc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005db6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dba:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a37      	ldr	r2, [pc, #220]	; (8005ea0 <HAL_DMA_Start_IT+0x474>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d04a      	beq.n	8005e5c <HAL_DMA_Start_IT+0x430>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a36      	ldr	r2, [pc, #216]	; (8005ea4 <HAL_DMA_Start_IT+0x478>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d045      	beq.n	8005e5c <HAL_DMA_Start_IT+0x430>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a34      	ldr	r2, [pc, #208]	; (8005ea8 <HAL_DMA_Start_IT+0x47c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d040      	beq.n	8005e5c <HAL_DMA_Start_IT+0x430>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a33      	ldr	r2, [pc, #204]	; (8005eac <HAL_DMA_Start_IT+0x480>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d03b      	beq.n	8005e5c <HAL_DMA_Start_IT+0x430>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a31      	ldr	r2, [pc, #196]	; (8005eb0 <HAL_DMA_Start_IT+0x484>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d036      	beq.n	8005e5c <HAL_DMA_Start_IT+0x430>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a30      	ldr	r2, [pc, #192]	; (8005eb4 <HAL_DMA_Start_IT+0x488>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d031      	beq.n	8005e5c <HAL_DMA_Start_IT+0x430>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a2e      	ldr	r2, [pc, #184]	; (8005eb8 <HAL_DMA_Start_IT+0x48c>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d02c      	beq.n	8005e5c <HAL_DMA_Start_IT+0x430>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a2d      	ldr	r2, [pc, #180]	; (8005ebc <HAL_DMA_Start_IT+0x490>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d027      	beq.n	8005e5c <HAL_DMA_Start_IT+0x430>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a2b      	ldr	r2, [pc, #172]	; (8005ec0 <HAL_DMA_Start_IT+0x494>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d022      	beq.n	8005e5c <HAL_DMA_Start_IT+0x430>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a2a      	ldr	r2, [pc, #168]	; (8005ec4 <HAL_DMA_Start_IT+0x498>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d01d      	beq.n	8005e5c <HAL_DMA_Start_IT+0x430>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a28      	ldr	r2, [pc, #160]	; (8005ec8 <HAL_DMA_Start_IT+0x49c>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d018      	beq.n	8005e5c <HAL_DMA_Start_IT+0x430>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a27      	ldr	r2, [pc, #156]	; (8005ecc <HAL_DMA_Start_IT+0x4a0>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d013      	beq.n	8005e5c <HAL_DMA_Start_IT+0x430>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a25      	ldr	r2, [pc, #148]	; (8005ed0 <HAL_DMA_Start_IT+0x4a4>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d00e      	beq.n	8005e5c <HAL_DMA_Start_IT+0x430>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a24      	ldr	r2, [pc, #144]	; (8005ed4 <HAL_DMA_Start_IT+0x4a8>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d009      	beq.n	8005e5c <HAL_DMA_Start_IT+0x430>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a22      	ldr	r2, [pc, #136]	; (8005ed8 <HAL_DMA_Start_IT+0x4ac>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d004      	beq.n	8005e5c <HAL_DMA_Start_IT+0x430>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a21      	ldr	r2, [pc, #132]	; (8005edc <HAL_DMA_Start_IT+0x4b0>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d108      	bne.n	8005e6e <HAL_DMA_Start_IT+0x442>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f042 0201 	orr.w	r2, r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	e012      	b.n	8005e94 <HAL_DMA_Start_IT+0x468>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f042 0201 	orr.w	r2, r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]
 8005e7e:	e009      	b.n	8005e94 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3718      	adds	r7, #24
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	40020010 	.word	0x40020010
 8005ea4:	40020028 	.word	0x40020028
 8005ea8:	40020040 	.word	0x40020040
 8005eac:	40020058 	.word	0x40020058
 8005eb0:	40020070 	.word	0x40020070
 8005eb4:	40020088 	.word	0x40020088
 8005eb8:	400200a0 	.word	0x400200a0
 8005ebc:	400200b8 	.word	0x400200b8
 8005ec0:	40020410 	.word	0x40020410
 8005ec4:	40020428 	.word	0x40020428
 8005ec8:	40020440 	.word	0x40020440
 8005ecc:	40020458 	.word	0x40020458
 8005ed0:	40020470 	.word	0x40020470
 8005ed4:	40020488 	.word	0x40020488
 8005ed8:	400204a0 	.word	0x400204a0
 8005edc:	400204b8 	.word	0x400204b8
 8005ee0:	58025408 	.word	0x58025408
 8005ee4:	5802541c 	.word	0x5802541c
 8005ee8:	58025430 	.word	0x58025430
 8005eec:	58025444 	.word	0x58025444
 8005ef0:	58025458 	.word	0x58025458
 8005ef4:	5802546c 	.word	0x5802546c
 8005ef8:	58025480 	.word	0x58025480
 8005efc:	58025494 	.word	0x58025494

08005f00 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b08a      	sub	sp, #40	; 0x28
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f0c:	4b67      	ldr	r3, [pc, #412]	; (80060ac <HAL_DMA_IRQHandler+0x1ac>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a67      	ldr	r2, [pc, #412]	; (80060b0 <HAL_DMA_IRQHandler+0x1b0>)
 8005f12:	fba2 2303 	umull	r2, r3, r2, r3
 8005f16:	0a9b      	lsrs	r3, r3, #10
 8005f18:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f1e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f24:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005f26:	6a3b      	ldr	r3, [r7, #32]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a5f      	ldr	r2, [pc, #380]	; (80060b4 <HAL_DMA_IRQHandler+0x1b4>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d04a      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xd2>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a5d      	ldr	r2, [pc, #372]	; (80060b8 <HAL_DMA_IRQHandler+0x1b8>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d045      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xd2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a5c      	ldr	r2, [pc, #368]	; (80060bc <HAL_DMA_IRQHandler+0x1bc>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d040      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xd2>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a5a      	ldr	r2, [pc, #360]	; (80060c0 <HAL_DMA_IRQHandler+0x1c0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d03b      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xd2>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a59      	ldr	r2, [pc, #356]	; (80060c4 <HAL_DMA_IRQHandler+0x1c4>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d036      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xd2>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a57      	ldr	r2, [pc, #348]	; (80060c8 <HAL_DMA_IRQHandler+0x1c8>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d031      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xd2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a56      	ldr	r2, [pc, #344]	; (80060cc <HAL_DMA_IRQHandler+0x1cc>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d02c      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xd2>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a54      	ldr	r2, [pc, #336]	; (80060d0 <HAL_DMA_IRQHandler+0x1d0>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d027      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xd2>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a53      	ldr	r2, [pc, #332]	; (80060d4 <HAL_DMA_IRQHandler+0x1d4>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d022      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xd2>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a51      	ldr	r2, [pc, #324]	; (80060d8 <HAL_DMA_IRQHandler+0x1d8>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d01d      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xd2>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a50      	ldr	r2, [pc, #320]	; (80060dc <HAL_DMA_IRQHandler+0x1dc>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d018      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xd2>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a4e      	ldr	r2, [pc, #312]	; (80060e0 <HAL_DMA_IRQHandler+0x1e0>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d013      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xd2>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a4d      	ldr	r2, [pc, #308]	; (80060e4 <HAL_DMA_IRQHandler+0x1e4>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d00e      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xd2>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a4b      	ldr	r2, [pc, #300]	; (80060e8 <HAL_DMA_IRQHandler+0x1e8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d009      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xd2>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a4a      	ldr	r2, [pc, #296]	; (80060ec <HAL_DMA_IRQHandler+0x1ec>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d004      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xd2>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a48      	ldr	r2, [pc, #288]	; (80060f0 <HAL_DMA_IRQHandler+0x1f0>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d101      	bne.n	8005fd6 <HAL_DMA_IRQHandler+0xd6>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e000      	b.n	8005fd8 <HAL_DMA_IRQHandler+0xd8>
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 842b 	beq.w	8006834 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe2:	f003 031f 	and.w	r3, r3, #31
 8005fe6:	2208      	movs	r2, #8
 8005fe8:	409a      	lsls	r2, r3
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	4013      	ands	r3, r2
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f000 80a2 	beq.w	8006138 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a2e      	ldr	r2, [pc, #184]	; (80060b4 <HAL_DMA_IRQHandler+0x1b4>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d04a      	beq.n	8006094 <HAL_DMA_IRQHandler+0x194>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a2d      	ldr	r2, [pc, #180]	; (80060b8 <HAL_DMA_IRQHandler+0x1b8>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d045      	beq.n	8006094 <HAL_DMA_IRQHandler+0x194>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a2b      	ldr	r2, [pc, #172]	; (80060bc <HAL_DMA_IRQHandler+0x1bc>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d040      	beq.n	8006094 <HAL_DMA_IRQHandler+0x194>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a2a      	ldr	r2, [pc, #168]	; (80060c0 <HAL_DMA_IRQHandler+0x1c0>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d03b      	beq.n	8006094 <HAL_DMA_IRQHandler+0x194>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a28      	ldr	r2, [pc, #160]	; (80060c4 <HAL_DMA_IRQHandler+0x1c4>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d036      	beq.n	8006094 <HAL_DMA_IRQHandler+0x194>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a27      	ldr	r2, [pc, #156]	; (80060c8 <HAL_DMA_IRQHandler+0x1c8>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d031      	beq.n	8006094 <HAL_DMA_IRQHandler+0x194>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a25      	ldr	r2, [pc, #148]	; (80060cc <HAL_DMA_IRQHandler+0x1cc>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d02c      	beq.n	8006094 <HAL_DMA_IRQHandler+0x194>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a24      	ldr	r2, [pc, #144]	; (80060d0 <HAL_DMA_IRQHandler+0x1d0>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d027      	beq.n	8006094 <HAL_DMA_IRQHandler+0x194>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a22      	ldr	r2, [pc, #136]	; (80060d4 <HAL_DMA_IRQHandler+0x1d4>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d022      	beq.n	8006094 <HAL_DMA_IRQHandler+0x194>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a21      	ldr	r2, [pc, #132]	; (80060d8 <HAL_DMA_IRQHandler+0x1d8>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d01d      	beq.n	8006094 <HAL_DMA_IRQHandler+0x194>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a1f      	ldr	r2, [pc, #124]	; (80060dc <HAL_DMA_IRQHandler+0x1dc>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d018      	beq.n	8006094 <HAL_DMA_IRQHandler+0x194>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a1e      	ldr	r2, [pc, #120]	; (80060e0 <HAL_DMA_IRQHandler+0x1e0>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d013      	beq.n	8006094 <HAL_DMA_IRQHandler+0x194>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a1c      	ldr	r2, [pc, #112]	; (80060e4 <HAL_DMA_IRQHandler+0x1e4>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d00e      	beq.n	8006094 <HAL_DMA_IRQHandler+0x194>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a1b      	ldr	r2, [pc, #108]	; (80060e8 <HAL_DMA_IRQHandler+0x1e8>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d009      	beq.n	8006094 <HAL_DMA_IRQHandler+0x194>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a19      	ldr	r2, [pc, #100]	; (80060ec <HAL_DMA_IRQHandler+0x1ec>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d004      	beq.n	8006094 <HAL_DMA_IRQHandler+0x194>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a18      	ldr	r2, [pc, #96]	; (80060f0 <HAL_DMA_IRQHandler+0x1f0>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d12f      	bne.n	80060f4 <HAL_DMA_IRQHandler+0x1f4>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0304 	and.w	r3, r3, #4
 800609e:	2b00      	cmp	r3, #0
 80060a0:	bf14      	ite	ne
 80060a2:	2301      	movne	r3, #1
 80060a4:	2300      	moveq	r3, #0
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	e02e      	b.n	8006108 <HAL_DMA_IRQHandler+0x208>
 80060aa:	bf00      	nop
 80060ac:	24000000 	.word	0x24000000
 80060b0:	1b4e81b5 	.word	0x1b4e81b5
 80060b4:	40020010 	.word	0x40020010
 80060b8:	40020028 	.word	0x40020028
 80060bc:	40020040 	.word	0x40020040
 80060c0:	40020058 	.word	0x40020058
 80060c4:	40020070 	.word	0x40020070
 80060c8:	40020088 	.word	0x40020088
 80060cc:	400200a0 	.word	0x400200a0
 80060d0:	400200b8 	.word	0x400200b8
 80060d4:	40020410 	.word	0x40020410
 80060d8:	40020428 	.word	0x40020428
 80060dc:	40020440 	.word	0x40020440
 80060e0:	40020458 	.word	0x40020458
 80060e4:	40020470 	.word	0x40020470
 80060e8:	40020488 	.word	0x40020488
 80060ec:	400204a0 	.word	0x400204a0
 80060f0:	400204b8 	.word	0x400204b8
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0308 	and.w	r3, r3, #8
 80060fe:	2b00      	cmp	r3, #0
 8006100:	bf14      	ite	ne
 8006102:	2301      	movne	r3, #1
 8006104:	2300      	moveq	r3, #0
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b00      	cmp	r3, #0
 800610a:	d015      	beq.n	8006138 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 0204 	bic.w	r2, r2, #4
 800611a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006120:	f003 031f 	and.w	r3, r3, #31
 8006124:	2208      	movs	r2, #8
 8006126:	409a      	lsls	r2, r3
 8006128:	6a3b      	ldr	r3, [r7, #32]
 800612a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006130:	f043 0201 	orr.w	r2, r3, #1
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800613c:	f003 031f 	and.w	r3, r3, #31
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	fa22 f303 	lsr.w	r3, r2, r3
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d06e      	beq.n	800622c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a69      	ldr	r2, [pc, #420]	; (80062f8 <HAL_DMA_IRQHandler+0x3f8>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d04a      	beq.n	80061ee <HAL_DMA_IRQHandler+0x2ee>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a67      	ldr	r2, [pc, #412]	; (80062fc <HAL_DMA_IRQHandler+0x3fc>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d045      	beq.n	80061ee <HAL_DMA_IRQHandler+0x2ee>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a66      	ldr	r2, [pc, #408]	; (8006300 <HAL_DMA_IRQHandler+0x400>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d040      	beq.n	80061ee <HAL_DMA_IRQHandler+0x2ee>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a64      	ldr	r2, [pc, #400]	; (8006304 <HAL_DMA_IRQHandler+0x404>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d03b      	beq.n	80061ee <HAL_DMA_IRQHandler+0x2ee>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a63      	ldr	r2, [pc, #396]	; (8006308 <HAL_DMA_IRQHandler+0x408>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d036      	beq.n	80061ee <HAL_DMA_IRQHandler+0x2ee>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a61      	ldr	r2, [pc, #388]	; (800630c <HAL_DMA_IRQHandler+0x40c>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d031      	beq.n	80061ee <HAL_DMA_IRQHandler+0x2ee>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a60      	ldr	r2, [pc, #384]	; (8006310 <HAL_DMA_IRQHandler+0x410>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d02c      	beq.n	80061ee <HAL_DMA_IRQHandler+0x2ee>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a5e      	ldr	r2, [pc, #376]	; (8006314 <HAL_DMA_IRQHandler+0x414>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d027      	beq.n	80061ee <HAL_DMA_IRQHandler+0x2ee>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a5d      	ldr	r2, [pc, #372]	; (8006318 <HAL_DMA_IRQHandler+0x418>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d022      	beq.n	80061ee <HAL_DMA_IRQHandler+0x2ee>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a5b      	ldr	r2, [pc, #364]	; (800631c <HAL_DMA_IRQHandler+0x41c>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d01d      	beq.n	80061ee <HAL_DMA_IRQHandler+0x2ee>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a5a      	ldr	r2, [pc, #360]	; (8006320 <HAL_DMA_IRQHandler+0x420>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d018      	beq.n	80061ee <HAL_DMA_IRQHandler+0x2ee>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a58      	ldr	r2, [pc, #352]	; (8006324 <HAL_DMA_IRQHandler+0x424>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d013      	beq.n	80061ee <HAL_DMA_IRQHandler+0x2ee>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a57      	ldr	r2, [pc, #348]	; (8006328 <HAL_DMA_IRQHandler+0x428>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d00e      	beq.n	80061ee <HAL_DMA_IRQHandler+0x2ee>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a55      	ldr	r2, [pc, #340]	; (800632c <HAL_DMA_IRQHandler+0x42c>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d009      	beq.n	80061ee <HAL_DMA_IRQHandler+0x2ee>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a54      	ldr	r2, [pc, #336]	; (8006330 <HAL_DMA_IRQHandler+0x430>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d004      	beq.n	80061ee <HAL_DMA_IRQHandler+0x2ee>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a52      	ldr	r2, [pc, #328]	; (8006334 <HAL_DMA_IRQHandler+0x434>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d10a      	bne.n	8006204 <HAL_DMA_IRQHandler+0x304>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	bf14      	ite	ne
 80061fc:	2301      	movne	r3, #1
 80061fe:	2300      	moveq	r3, #0
 8006200:	b2db      	uxtb	r3, r3
 8006202:	e003      	b.n	800620c <HAL_DMA_IRQHandler+0x30c>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2300      	movs	r3, #0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00d      	beq.n	800622c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006214:	f003 031f 	and.w	r3, r3, #31
 8006218:	2201      	movs	r2, #1
 800621a:	409a      	lsls	r2, r3
 800621c:	6a3b      	ldr	r3, [r7, #32]
 800621e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006224:	f043 0202 	orr.w	r2, r3, #2
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006230:	f003 031f 	and.w	r3, r3, #31
 8006234:	2204      	movs	r2, #4
 8006236:	409a      	lsls	r2, r3
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	4013      	ands	r3, r2
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 808f 	beq.w	8006360 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a2c      	ldr	r2, [pc, #176]	; (80062f8 <HAL_DMA_IRQHandler+0x3f8>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d04a      	beq.n	80062e2 <HAL_DMA_IRQHandler+0x3e2>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a2a      	ldr	r2, [pc, #168]	; (80062fc <HAL_DMA_IRQHandler+0x3fc>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d045      	beq.n	80062e2 <HAL_DMA_IRQHandler+0x3e2>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a29      	ldr	r2, [pc, #164]	; (8006300 <HAL_DMA_IRQHandler+0x400>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d040      	beq.n	80062e2 <HAL_DMA_IRQHandler+0x3e2>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a27      	ldr	r2, [pc, #156]	; (8006304 <HAL_DMA_IRQHandler+0x404>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d03b      	beq.n	80062e2 <HAL_DMA_IRQHandler+0x3e2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a26      	ldr	r2, [pc, #152]	; (8006308 <HAL_DMA_IRQHandler+0x408>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d036      	beq.n	80062e2 <HAL_DMA_IRQHandler+0x3e2>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a24      	ldr	r2, [pc, #144]	; (800630c <HAL_DMA_IRQHandler+0x40c>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d031      	beq.n	80062e2 <HAL_DMA_IRQHandler+0x3e2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a23      	ldr	r2, [pc, #140]	; (8006310 <HAL_DMA_IRQHandler+0x410>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d02c      	beq.n	80062e2 <HAL_DMA_IRQHandler+0x3e2>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a21      	ldr	r2, [pc, #132]	; (8006314 <HAL_DMA_IRQHandler+0x414>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d027      	beq.n	80062e2 <HAL_DMA_IRQHandler+0x3e2>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a20      	ldr	r2, [pc, #128]	; (8006318 <HAL_DMA_IRQHandler+0x418>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d022      	beq.n	80062e2 <HAL_DMA_IRQHandler+0x3e2>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a1e      	ldr	r2, [pc, #120]	; (800631c <HAL_DMA_IRQHandler+0x41c>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d01d      	beq.n	80062e2 <HAL_DMA_IRQHandler+0x3e2>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a1d      	ldr	r2, [pc, #116]	; (8006320 <HAL_DMA_IRQHandler+0x420>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d018      	beq.n	80062e2 <HAL_DMA_IRQHandler+0x3e2>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a1b      	ldr	r2, [pc, #108]	; (8006324 <HAL_DMA_IRQHandler+0x424>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d013      	beq.n	80062e2 <HAL_DMA_IRQHandler+0x3e2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a1a      	ldr	r2, [pc, #104]	; (8006328 <HAL_DMA_IRQHandler+0x428>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00e      	beq.n	80062e2 <HAL_DMA_IRQHandler+0x3e2>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a18      	ldr	r2, [pc, #96]	; (800632c <HAL_DMA_IRQHandler+0x42c>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d009      	beq.n	80062e2 <HAL_DMA_IRQHandler+0x3e2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a17      	ldr	r2, [pc, #92]	; (8006330 <HAL_DMA_IRQHandler+0x430>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d004      	beq.n	80062e2 <HAL_DMA_IRQHandler+0x3e2>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a15      	ldr	r2, [pc, #84]	; (8006334 <HAL_DMA_IRQHandler+0x434>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d12a      	bne.n	8006338 <HAL_DMA_IRQHandler+0x438>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0302 	and.w	r3, r3, #2
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	bf14      	ite	ne
 80062f0:	2301      	movne	r3, #1
 80062f2:	2300      	moveq	r3, #0
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	e023      	b.n	8006340 <HAL_DMA_IRQHandler+0x440>
 80062f8:	40020010 	.word	0x40020010
 80062fc:	40020028 	.word	0x40020028
 8006300:	40020040 	.word	0x40020040
 8006304:	40020058 	.word	0x40020058
 8006308:	40020070 	.word	0x40020070
 800630c:	40020088 	.word	0x40020088
 8006310:	400200a0 	.word	0x400200a0
 8006314:	400200b8 	.word	0x400200b8
 8006318:	40020410 	.word	0x40020410
 800631c:	40020428 	.word	0x40020428
 8006320:	40020440 	.word	0x40020440
 8006324:	40020458 	.word	0x40020458
 8006328:	40020470 	.word	0x40020470
 800632c:	40020488 	.word	0x40020488
 8006330:	400204a0 	.word	0x400204a0
 8006334:	400204b8 	.word	0x400204b8
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2300      	movs	r3, #0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00d      	beq.n	8006360 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006348:	f003 031f 	and.w	r3, r3, #31
 800634c:	2204      	movs	r2, #4
 800634e:	409a      	lsls	r2, r3
 8006350:	6a3b      	ldr	r3, [r7, #32]
 8006352:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006358:	f043 0204 	orr.w	r2, r3, #4
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006364:	f003 031f 	and.w	r3, r3, #31
 8006368:	2210      	movs	r2, #16
 800636a:	409a      	lsls	r2, r3
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	4013      	ands	r3, r2
 8006370:	2b00      	cmp	r3, #0
 8006372:	f000 80a6 	beq.w	80064c2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a85      	ldr	r2, [pc, #532]	; (8006590 <HAL_DMA_IRQHandler+0x690>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d04a      	beq.n	8006416 <HAL_DMA_IRQHandler+0x516>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a83      	ldr	r2, [pc, #524]	; (8006594 <HAL_DMA_IRQHandler+0x694>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d045      	beq.n	8006416 <HAL_DMA_IRQHandler+0x516>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a82      	ldr	r2, [pc, #520]	; (8006598 <HAL_DMA_IRQHandler+0x698>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d040      	beq.n	8006416 <HAL_DMA_IRQHandler+0x516>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a80      	ldr	r2, [pc, #512]	; (800659c <HAL_DMA_IRQHandler+0x69c>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d03b      	beq.n	8006416 <HAL_DMA_IRQHandler+0x516>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a7f      	ldr	r2, [pc, #508]	; (80065a0 <HAL_DMA_IRQHandler+0x6a0>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d036      	beq.n	8006416 <HAL_DMA_IRQHandler+0x516>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a7d      	ldr	r2, [pc, #500]	; (80065a4 <HAL_DMA_IRQHandler+0x6a4>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d031      	beq.n	8006416 <HAL_DMA_IRQHandler+0x516>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a7c      	ldr	r2, [pc, #496]	; (80065a8 <HAL_DMA_IRQHandler+0x6a8>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d02c      	beq.n	8006416 <HAL_DMA_IRQHandler+0x516>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a7a      	ldr	r2, [pc, #488]	; (80065ac <HAL_DMA_IRQHandler+0x6ac>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d027      	beq.n	8006416 <HAL_DMA_IRQHandler+0x516>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a79      	ldr	r2, [pc, #484]	; (80065b0 <HAL_DMA_IRQHandler+0x6b0>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d022      	beq.n	8006416 <HAL_DMA_IRQHandler+0x516>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a77      	ldr	r2, [pc, #476]	; (80065b4 <HAL_DMA_IRQHandler+0x6b4>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d01d      	beq.n	8006416 <HAL_DMA_IRQHandler+0x516>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a76      	ldr	r2, [pc, #472]	; (80065b8 <HAL_DMA_IRQHandler+0x6b8>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d018      	beq.n	8006416 <HAL_DMA_IRQHandler+0x516>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a74      	ldr	r2, [pc, #464]	; (80065bc <HAL_DMA_IRQHandler+0x6bc>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d013      	beq.n	8006416 <HAL_DMA_IRQHandler+0x516>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a73      	ldr	r2, [pc, #460]	; (80065c0 <HAL_DMA_IRQHandler+0x6c0>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d00e      	beq.n	8006416 <HAL_DMA_IRQHandler+0x516>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a71      	ldr	r2, [pc, #452]	; (80065c4 <HAL_DMA_IRQHandler+0x6c4>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d009      	beq.n	8006416 <HAL_DMA_IRQHandler+0x516>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a70      	ldr	r2, [pc, #448]	; (80065c8 <HAL_DMA_IRQHandler+0x6c8>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d004      	beq.n	8006416 <HAL_DMA_IRQHandler+0x516>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a6e      	ldr	r2, [pc, #440]	; (80065cc <HAL_DMA_IRQHandler+0x6cc>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d10a      	bne.n	800642c <HAL_DMA_IRQHandler+0x52c>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0308 	and.w	r3, r3, #8
 8006420:	2b00      	cmp	r3, #0
 8006422:	bf14      	ite	ne
 8006424:	2301      	movne	r3, #1
 8006426:	2300      	moveq	r3, #0
 8006428:	b2db      	uxtb	r3, r3
 800642a:	e009      	b.n	8006440 <HAL_DMA_IRQHandler+0x540>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0304 	and.w	r3, r3, #4
 8006436:	2b00      	cmp	r3, #0
 8006438:	bf14      	ite	ne
 800643a:	2301      	movne	r3, #1
 800643c:	2300      	moveq	r3, #0
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b00      	cmp	r3, #0
 8006442:	d03e      	beq.n	80064c2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006448:	f003 031f 	and.w	r3, r3, #31
 800644c:	2210      	movs	r2, #16
 800644e:	409a      	lsls	r2, r3
 8006450:	6a3b      	ldr	r3, [r7, #32]
 8006452:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d018      	beq.n	8006494 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d108      	bne.n	8006482 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006474:	2b00      	cmp	r3, #0
 8006476:	d024      	beq.n	80064c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	4798      	blx	r3
 8006480:	e01f      	b.n	80064c2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006486:	2b00      	cmp	r3, #0
 8006488:	d01b      	beq.n	80064c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	4798      	blx	r3
 8006492:	e016      	b.n	80064c2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d107      	bne.n	80064b2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 0208 	bic.w	r2, r2, #8
 80064b0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d003      	beq.n	80064c2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c6:	f003 031f 	and.w	r3, r3, #31
 80064ca:	2220      	movs	r2, #32
 80064cc:	409a      	lsls	r2, r3
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	4013      	ands	r3, r2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 8110 	beq.w	80066f8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a2c      	ldr	r2, [pc, #176]	; (8006590 <HAL_DMA_IRQHandler+0x690>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d04a      	beq.n	8006578 <HAL_DMA_IRQHandler+0x678>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a2b      	ldr	r2, [pc, #172]	; (8006594 <HAL_DMA_IRQHandler+0x694>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d045      	beq.n	8006578 <HAL_DMA_IRQHandler+0x678>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a29      	ldr	r2, [pc, #164]	; (8006598 <HAL_DMA_IRQHandler+0x698>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d040      	beq.n	8006578 <HAL_DMA_IRQHandler+0x678>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a28      	ldr	r2, [pc, #160]	; (800659c <HAL_DMA_IRQHandler+0x69c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d03b      	beq.n	8006578 <HAL_DMA_IRQHandler+0x678>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a26      	ldr	r2, [pc, #152]	; (80065a0 <HAL_DMA_IRQHandler+0x6a0>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d036      	beq.n	8006578 <HAL_DMA_IRQHandler+0x678>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a25      	ldr	r2, [pc, #148]	; (80065a4 <HAL_DMA_IRQHandler+0x6a4>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d031      	beq.n	8006578 <HAL_DMA_IRQHandler+0x678>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a23      	ldr	r2, [pc, #140]	; (80065a8 <HAL_DMA_IRQHandler+0x6a8>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d02c      	beq.n	8006578 <HAL_DMA_IRQHandler+0x678>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a22      	ldr	r2, [pc, #136]	; (80065ac <HAL_DMA_IRQHandler+0x6ac>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d027      	beq.n	8006578 <HAL_DMA_IRQHandler+0x678>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a20      	ldr	r2, [pc, #128]	; (80065b0 <HAL_DMA_IRQHandler+0x6b0>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d022      	beq.n	8006578 <HAL_DMA_IRQHandler+0x678>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a1f      	ldr	r2, [pc, #124]	; (80065b4 <HAL_DMA_IRQHandler+0x6b4>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d01d      	beq.n	8006578 <HAL_DMA_IRQHandler+0x678>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a1d      	ldr	r2, [pc, #116]	; (80065b8 <HAL_DMA_IRQHandler+0x6b8>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d018      	beq.n	8006578 <HAL_DMA_IRQHandler+0x678>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a1c      	ldr	r2, [pc, #112]	; (80065bc <HAL_DMA_IRQHandler+0x6bc>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d013      	beq.n	8006578 <HAL_DMA_IRQHandler+0x678>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a1a      	ldr	r2, [pc, #104]	; (80065c0 <HAL_DMA_IRQHandler+0x6c0>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d00e      	beq.n	8006578 <HAL_DMA_IRQHandler+0x678>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a19      	ldr	r2, [pc, #100]	; (80065c4 <HAL_DMA_IRQHandler+0x6c4>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d009      	beq.n	8006578 <HAL_DMA_IRQHandler+0x678>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a17      	ldr	r2, [pc, #92]	; (80065c8 <HAL_DMA_IRQHandler+0x6c8>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d004      	beq.n	8006578 <HAL_DMA_IRQHandler+0x678>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a16      	ldr	r2, [pc, #88]	; (80065cc <HAL_DMA_IRQHandler+0x6cc>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d12b      	bne.n	80065d0 <HAL_DMA_IRQHandler+0x6d0>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0310 	and.w	r3, r3, #16
 8006582:	2b00      	cmp	r3, #0
 8006584:	bf14      	ite	ne
 8006586:	2301      	movne	r3, #1
 8006588:	2300      	moveq	r3, #0
 800658a:	b2db      	uxtb	r3, r3
 800658c:	e02a      	b.n	80065e4 <HAL_DMA_IRQHandler+0x6e4>
 800658e:	bf00      	nop
 8006590:	40020010 	.word	0x40020010
 8006594:	40020028 	.word	0x40020028
 8006598:	40020040 	.word	0x40020040
 800659c:	40020058 	.word	0x40020058
 80065a0:	40020070 	.word	0x40020070
 80065a4:	40020088 	.word	0x40020088
 80065a8:	400200a0 	.word	0x400200a0
 80065ac:	400200b8 	.word	0x400200b8
 80065b0:	40020410 	.word	0x40020410
 80065b4:	40020428 	.word	0x40020428
 80065b8:	40020440 	.word	0x40020440
 80065bc:	40020458 	.word	0x40020458
 80065c0:	40020470 	.word	0x40020470
 80065c4:	40020488 	.word	0x40020488
 80065c8:	400204a0 	.word	0x400204a0
 80065cc:	400204b8 	.word	0x400204b8
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0302 	and.w	r3, r3, #2
 80065da:	2b00      	cmp	r3, #0
 80065dc:	bf14      	ite	ne
 80065de:	2301      	movne	r3, #1
 80065e0:	2300      	moveq	r3, #0
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 8087 	beq.w	80066f8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ee:	f003 031f 	and.w	r3, r3, #31
 80065f2:	2220      	movs	r2, #32
 80065f4:	409a      	lsls	r2, r3
 80065f6:	6a3b      	ldr	r3, [r7, #32]
 80065f8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b04      	cmp	r3, #4
 8006604:	d139      	bne.n	800667a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f022 0216 	bic.w	r2, r2, #22
 8006614:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	695a      	ldr	r2, [r3, #20]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006624:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662a:	2b00      	cmp	r3, #0
 800662c:	d103      	bne.n	8006636 <HAL_DMA_IRQHandler+0x736>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006632:	2b00      	cmp	r3, #0
 8006634:	d007      	beq.n	8006646 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f022 0208 	bic.w	r2, r2, #8
 8006644:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800664a:	f003 031f 	and.w	r3, r3, #31
 800664e:	223f      	movs	r2, #63	; 0x3f
 8006650:	409a      	lsls	r2, r3
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 834a 	beq.w	8006d04 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	4798      	blx	r3
          }
          return;
 8006678:	e344      	b.n	8006d04 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d018      	beq.n	80066ba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d108      	bne.n	80066a8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669a:	2b00      	cmp	r3, #0
 800669c:	d02c      	beq.n	80066f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	4798      	blx	r3
 80066a6:	e027      	b.n	80066f8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d023      	beq.n	80066f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	4798      	blx	r3
 80066b8:	e01e      	b.n	80066f8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10f      	bne.n	80066e8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f022 0210 	bic.w	r2, r2, #16
 80066d6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d003      	beq.n	80066f8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 8306 	beq.w	8006d0e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	f000 8088 	beq.w	8006820 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2204      	movs	r2, #4
 8006714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a7a      	ldr	r2, [pc, #488]	; (8006908 <HAL_DMA_IRQHandler+0xa08>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d04a      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x8b8>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a79      	ldr	r2, [pc, #484]	; (800690c <HAL_DMA_IRQHandler+0xa0c>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d045      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x8b8>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a77      	ldr	r2, [pc, #476]	; (8006910 <HAL_DMA_IRQHandler+0xa10>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d040      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x8b8>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a76      	ldr	r2, [pc, #472]	; (8006914 <HAL_DMA_IRQHandler+0xa14>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d03b      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x8b8>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a74      	ldr	r2, [pc, #464]	; (8006918 <HAL_DMA_IRQHandler+0xa18>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d036      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x8b8>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a73      	ldr	r2, [pc, #460]	; (800691c <HAL_DMA_IRQHandler+0xa1c>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d031      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x8b8>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a71      	ldr	r2, [pc, #452]	; (8006920 <HAL_DMA_IRQHandler+0xa20>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d02c      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x8b8>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a70      	ldr	r2, [pc, #448]	; (8006924 <HAL_DMA_IRQHandler+0xa24>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d027      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x8b8>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a6e      	ldr	r2, [pc, #440]	; (8006928 <HAL_DMA_IRQHandler+0xa28>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d022      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x8b8>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a6d      	ldr	r2, [pc, #436]	; (800692c <HAL_DMA_IRQHandler+0xa2c>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d01d      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x8b8>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a6b      	ldr	r2, [pc, #428]	; (8006930 <HAL_DMA_IRQHandler+0xa30>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d018      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x8b8>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a6a      	ldr	r2, [pc, #424]	; (8006934 <HAL_DMA_IRQHandler+0xa34>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d013      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x8b8>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a68      	ldr	r2, [pc, #416]	; (8006938 <HAL_DMA_IRQHandler+0xa38>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d00e      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x8b8>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a67      	ldr	r2, [pc, #412]	; (800693c <HAL_DMA_IRQHandler+0xa3c>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d009      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x8b8>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a65      	ldr	r2, [pc, #404]	; (8006940 <HAL_DMA_IRQHandler+0xa40>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d004      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x8b8>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a64      	ldr	r2, [pc, #400]	; (8006944 <HAL_DMA_IRQHandler+0xa44>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d108      	bne.n	80067ca <HAL_DMA_IRQHandler+0x8ca>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f022 0201 	bic.w	r2, r2, #1
 80067c6:	601a      	str	r2, [r3, #0]
 80067c8:	e007      	b.n	80067da <HAL_DMA_IRQHandler+0x8da>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 0201 	bic.w	r2, r2, #1
 80067d8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	3301      	adds	r3, #1
 80067de:	60fb      	str	r3, [r7, #12]
 80067e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d307      	bcc.n	80067f6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1f2      	bne.n	80067da <HAL_DMA_IRQHandler+0x8da>
 80067f4:	e000      	b.n	80067f8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80067f6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d004      	beq.n	8006810 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2203      	movs	r2, #3
 800680a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800680e:	e003      	b.n	8006818 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 8272 	beq.w	8006d0e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	4798      	blx	r3
 8006832:	e26c      	b.n	8006d0e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a43      	ldr	r2, [pc, #268]	; (8006948 <HAL_DMA_IRQHandler+0xa48>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d022      	beq.n	8006884 <HAL_DMA_IRQHandler+0x984>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a42      	ldr	r2, [pc, #264]	; (800694c <HAL_DMA_IRQHandler+0xa4c>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d01d      	beq.n	8006884 <HAL_DMA_IRQHandler+0x984>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a40      	ldr	r2, [pc, #256]	; (8006950 <HAL_DMA_IRQHandler+0xa50>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d018      	beq.n	8006884 <HAL_DMA_IRQHandler+0x984>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a3f      	ldr	r2, [pc, #252]	; (8006954 <HAL_DMA_IRQHandler+0xa54>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d013      	beq.n	8006884 <HAL_DMA_IRQHandler+0x984>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a3d      	ldr	r2, [pc, #244]	; (8006958 <HAL_DMA_IRQHandler+0xa58>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d00e      	beq.n	8006884 <HAL_DMA_IRQHandler+0x984>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a3c      	ldr	r2, [pc, #240]	; (800695c <HAL_DMA_IRQHandler+0xa5c>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d009      	beq.n	8006884 <HAL_DMA_IRQHandler+0x984>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a3a      	ldr	r2, [pc, #232]	; (8006960 <HAL_DMA_IRQHandler+0xa60>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d004      	beq.n	8006884 <HAL_DMA_IRQHandler+0x984>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a39      	ldr	r2, [pc, #228]	; (8006964 <HAL_DMA_IRQHandler+0xa64>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d101      	bne.n	8006888 <HAL_DMA_IRQHandler+0x988>
 8006884:	2301      	movs	r3, #1
 8006886:	e000      	b.n	800688a <HAL_DMA_IRQHandler+0x98a>
 8006888:	2300      	movs	r3, #0
 800688a:	2b00      	cmp	r3, #0
 800688c:	f000 823f 	beq.w	8006d0e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800689c:	f003 031f 	and.w	r3, r3, #31
 80068a0:	2204      	movs	r2, #4
 80068a2:	409a      	lsls	r2, r3
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	4013      	ands	r3, r2
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f000 80cd 	beq.w	8006a48 <HAL_DMA_IRQHandler+0xb48>
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	f003 0304 	and.w	r3, r3, #4
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f000 80c7 	beq.w	8006a48 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068be:	f003 031f 	and.w	r3, r3, #31
 80068c2:	2204      	movs	r2, #4
 80068c4:	409a      	lsls	r2, r3
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d049      	beq.n	8006968 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d109      	bne.n	80068f2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f000 8210 	beq.w	8006d08 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068f0:	e20a      	b.n	8006d08 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f000 8206 	beq.w	8006d08 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006904:	e200      	b.n	8006d08 <HAL_DMA_IRQHandler+0xe08>
 8006906:	bf00      	nop
 8006908:	40020010 	.word	0x40020010
 800690c:	40020028 	.word	0x40020028
 8006910:	40020040 	.word	0x40020040
 8006914:	40020058 	.word	0x40020058
 8006918:	40020070 	.word	0x40020070
 800691c:	40020088 	.word	0x40020088
 8006920:	400200a0 	.word	0x400200a0
 8006924:	400200b8 	.word	0x400200b8
 8006928:	40020410 	.word	0x40020410
 800692c:	40020428 	.word	0x40020428
 8006930:	40020440 	.word	0x40020440
 8006934:	40020458 	.word	0x40020458
 8006938:	40020470 	.word	0x40020470
 800693c:	40020488 	.word	0x40020488
 8006940:	400204a0 	.word	0x400204a0
 8006944:	400204b8 	.word	0x400204b8
 8006948:	58025408 	.word	0x58025408
 800694c:	5802541c 	.word	0x5802541c
 8006950:	58025430 	.word	0x58025430
 8006954:	58025444 	.word	0x58025444
 8006958:	58025458 	.word	0x58025458
 800695c:	5802546c 	.word	0x5802546c
 8006960:	58025480 	.word	0x58025480
 8006964:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	f003 0320 	and.w	r3, r3, #32
 800696e:	2b00      	cmp	r3, #0
 8006970:	d160      	bne.n	8006a34 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a7f      	ldr	r2, [pc, #508]	; (8006b74 <HAL_DMA_IRQHandler+0xc74>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d04a      	beq.n	8006a12 <HAL_DMA_IRQHandler+0xb12>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a7d      	ldr	r2, [pc, #500]	; (8006b78 <HAL_DMA_IRQHandler+0xc78>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d045      	beq.n	8006a12 <HAL_DMA_IRQHandler+0xb12>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a7c      	ldr	r2, [pc, #496]	; (8006b7c <HAL_DMA_IRQHandler+0xc7c>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d040      	beq.n	8006a12 <HAL_DMA_IRQHandler+0xb12>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a7a      	ldr	r2, [pc, #488]	; (8006b80 <HAL_DMA_IRQHandler+0xc80>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d03b      	beq.n	8006a12 <HAL_DMA_IRQHandler+0xb12>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a79      	ldr	r2, [pc, #484]	; (8006b84 <HAL_DMA_IRQHandler+0xc84>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d036      	beq.n	8006a12 <HAL_DMA_IRQHandler+0xb12>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a77      	ldr	r2, [pc, #476]	; (8006b88 <HAL_DMA_IRQHandler+0xc88>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d031      	beq.n	8006a12 <HAL_DMA_IRQHandler+0xb12>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a76      	ldr	r2, [pc, #472]	; (8006b8c <HAL_DMA_IRQHandler+0xc8c>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d02c      	beq.n	8006a12 <HAL_DMA_IRQHandler+0xb12>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a74      	ldr	r2, [pc, #464]	; (8006b90 <HAL_DMA_IRQHandler+0xc90>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d027      	beq.n	8006a12 <HAL_DMA_IRQHandler+0xb12>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a73      	ldr	r2, [pc, #460]	; (8006b94 <HAL_DMA_IRQHandler+0xc94>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d022      	beq.n	8006a12 <HAL_DMA_IRQHandler+0xb12>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a71      	ldr	r2, [pc, #452]	; (8006b98 <HAL_DMA_IRQHandler+0xc98>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d01d      	beq.n	8006a12 <HAL_DMA_IRQHandler+0xb12>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a70      	ldr	r2, [pc, #448]	; (8006b9c <HAL_DMA_IRQHandler+0xc9c>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d018      	beq.n	8006a12 <HAL_DMA_IRQHandler+0xb12>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a6e      	ldr	r2, [pc, #440]	; (8006ba0 <HAL_DMA_IRQHandler+0xca0>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d013      	beq.n	8006a12 <HAL_DMA_IRQHandler+0xb12>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a6d      	ldr	r2, [pc, #436]	; (8006ba4 <HAL_DMA_IRQHandler+0xca4>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d00e      	beq.n	8006a12 <HAL_DMA_IRQHandler+0xb12>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a6b      	ldr	r2, [pc, #428]	; (8006ba8 <HAL_DMA_IRQHandler+0xca8>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d009      	beq.n	8006a12 <HAL_DMA_IRQHandler+0xb12>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a6a      	ldr	r2, [pc, #424]	; (8006bac <HAL_DMA_IRQHandler+0xcac>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d004      	beq.n	8006a12 <HAL_DMA_IRQHandler+0xb12>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a68      	ldr	r2, [pc, #416]	; (8006bb0 <HAL_DMA_IRQHandler+0xcb0>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d108      	bne.n	8006a24 <HAL_DMA_IRQHandler+0xb24>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f022 0208 	bic.w	r2, r2, #8
 8006a20:	601a      	str	r2, [r3, #0]
 8006a22:	e007      	b.n	8006a34 <HAL_DMA_IRQHandler+0xb34>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f022 0204 	bic.w	r2, r2, #4
 8006a32:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f000 8165 	beq.w	8006d08 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a46:	e15f      	b.n	8006d08 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a4c:	f003 031f 	and.w	r3, r3, #31
 8006a50:	2202      	movs	r2, #2
 8006a52:	409a      	lsls	r2, r3
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	4013      	ands	r3, r2
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 80c5 	beq.w	8006be8 <HAL_DMA_IRQHandler+0xce8>
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f003 0302 	and.w	r3, r3, #2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 80bf 	beq.w	8006be8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a6e:	f003 031f 	and.w	r3, r3, #31
 8006a72:	2202      	movs	r2, #2
 8006a74:	409a      	lsls	r2, r3
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d018      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d109      	bne.n	8006aa2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f000 813a 	beq.w	8006d0c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006aa0:	e134      	b.n	8006d0c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f000 8130 	beq.w	8006d0c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ab4:	e12a      	b.n	8006d0c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	f003 0320 	and.w	r3, r3, #32
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f040 8089 	bne.w	8006bd4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a2b      	ldr	r2, [pc, #172]	; (8006b74 <HAL_DMA_IRQHandler+0xc74>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d04a      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xc62>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a29      	ldr	r2, [pc, #164]	; (8006b78 <HAL_DMA_IRQHandler+0xc78>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d045      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xc62>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a28      	ldr	r2, [pc, #160]	; (8006b7c <HAL_DMA_IRQHandler+0xc7c>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d040      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xc62>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a26      	ldr	r2, [pc, #152]	; (8006b80 <HAL_DMA_IRQHandler+0xc80>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d03b      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xc62>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a25      	ldr	r2, [pc, #148]	; (8006b84 <HAL_DMA_IRQHandler+0xc84>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d036      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xc62>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a23      	ldr	r2, [pc, #140]	; (8006b88 <HAL_DMA_IRQHandler+0xc88>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d031      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xc62>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a22      	ldr	r2, [pc, #136]	; (8006b8c <HAL_DMA_IRQHandler+0xc8c>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d02c      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xc62>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a20      	ldr	r2, [pc, #128]	; (8006b90 <HAL_DMA_IRQHandler+0xc90>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d027      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xc62>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a1f      	ldr	r2, [pc, #124]	; (8006b94 <HAL_DMA_IRQHandler+0xc94>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d022      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xc62>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a1d      	ldr	r2, [pc, #116]	; (8006b98 <HAL_DMA_IRQHandler+0xc98>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d01d      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xc62>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a1c      	ldr	r2, [pc, #112]	; (8006b9c <HAL_DMA_IRQHandler+0xc9c>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d018      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xc62>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a1a      	ldr	r2, [pc, #104]	; (8006ba0 <HAL_DMA_IRQHandler+0xca0>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d013      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xc62>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a19      	ldr	r2, [pc, #100]	; (8006ba4 <HAL_DMA_IRQHandler+0xca4>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d00e      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xc62>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a17      	ldr	r2, [pc, #92]	; (8006ba8 <HAL_DMA_IRQHandler+0xca8>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d009      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xc62>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a16      	ldr	r2, [pc, #88]	; (8006bac <HAL_DMA_IRQHandler+0xcac>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d004      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xc62>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a14      	ldr	r2, [pc, #80]	; (8006bb0 <HAL_DMA_IRQHandler+0xcb0>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d128      	bne.n	8006bb4 <HAL_DMA_IRQHandler+0xcb4>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f022 0214 	bic.w	r2, r2, #20
 8006b70:	601a      	str	r2, [r3, #0]
 8006b72:	e027      	b.n	8006bc4 <HAL_DMA_IRQHandler+0xcc4>
 8006b74:	40020010 	.word	0x40020010
 8006b78:	40020028 	.word	0x40020028
 8006b7c:	40020040 	.word	0x40020040
 8006b80:	40020058 	.word	0x40020058
 8006b84:	40020070 	.word	0x40020070
 8006b88:	40020088 	.word	0x40020088
 8006b8c:	400200a0 	.word	0x400200a0
 8006b90:	400200b8 	.word	0x400200b8
 8006b94:	40020410 	.word	0x40020410
 8006b98:	40020428 	.word	0x40020428
 8006b9c:	40020440 	.word	0x40020440
 8006ba0:	40020458 	.word	0x40020458
 8006ba4:	40020470 	.word	0x40020470
 8006ba8:	40020488 	.word	0x40020488
 8006bac:	400204a0 	.word	0x400204a0
 8006bb0:	400204b8 	.word	0x400204b8
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f022 020a 	bic.w	r2, r2, #10
 8006bc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f000 8097 	beq.w	8006d0c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006be6:	e091      	b.n	8006d0c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bec:	f003 031f 	and.w	r3, r3, #31
 8006bf0:	2208      	movs	r2, #8
 8006bf2:	409a      	lsls	r2, r3
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f000 8088 	beq.w	8006d0e <HAL_DMA_IRQHandler+0xe0e>
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	f003 0308 	and.w	r3, r3, #8
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f000 8082 	beq.w	8006d0e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a41      	ldr	r2, [pc, #260]	; (8006d14 <HAL_DMA_IRQHandler+0xe14>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d04a      	beq.n	8006caa <HAL_DMA_IRQHandler+0xdaa>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a3f      	ldr	r2, [pc, #252]	; (8006d18 <HAL_DMA_IRQHandler+0xe18>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d045      	beq.n	8006caa <HAL_DMA_IRQHandler+0xdaa>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a3e      	ldr	r2, [pc, #248]	; (8006d1c <HAL_DMA_IRQHandler+0xe1c>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d040      	beq.n	8006caa <HAL_DMA_IRQHandler+0xdaa>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a3c      	ldr	r2, [pc, #240]	; (8006d20 <HAL_DMA_IRQHandler+0xe20>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d03b      	beq.n	8006caa <HAL_DMA_IRQHandler+0xdaa>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a3b      	ldr	r2, [pc, #236]	; (8006d24 <HAL_DMA_IRQHandler+0xe24>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d036      	beq.n	8006caa <HAL_DMA_IRQHandler+0xdaa>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a39      	ldr	r2, [pc, #228]	; (8006d28 <HAL_DMA_IRQHandler+0xe28>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d031      	beq.n	8006caa <HAL_DMA_IRQHandler+0xdaa>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a38      	ldr	r2, [pc, #224]	; (8006d2c <HAL_DMA_IRQHandler+0xe2c>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d02c      	beq.n	8006caa <HAL_DMA_IRQHandler+0xdaa>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a36      	ldr	r2, [pc, #216]	; (8006d30 <HAL_DMA_IRQHandler+0xe30>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d027      	beq.n	8006caa <HAL_DMA_IRQHandler+0xdaa>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a35      	ldr	r2, [pc, #212]	; (8006d34 <HAL_DMA_IRQHandler+0xe34>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d022      	beq.n	8006caa <HAL_DMA_IRQHandler+0xdaa>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a33      	ldr	r2, [pc, #204]	; (8006d38 <HAL_DMA_IRQHandler+0xe38>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d01d      	beq.n	8006caa <HAL_DMA_IRQHandler+0xdaa>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a32      	ldr	r2, [pc, #200]	; (8006d3c <HAL_DMA_IRQHandler+0xe3c>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d018      	beq.n	8006caa <HAL_DMA_IRQHandler+0xdaa>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a30      	ldr	r2, [pc, #192]	; (8006d40 <HAL_DMA_IRQHandler+0xe40>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d013      	beq.n	8006caa <HAL_DMA_IRQHandler+0xdaa>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a2f      	ldr	r2, [pc, #188]	; (8006d44 <HAL_DMA_IRQHandler+0xe44>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d00e      	beq.n	8006caa <HAL_DMA_IRQHandler+0xdaa>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a2d      	ldr	r2, [pc, #180]	; (8006d48 <HAL_DMA_IRQHandler+0xe48>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d009      	beq.n	8006caa <HAL_DMA_IRQHandler+0xdaa>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a2c      	ldr	r2, [pc, #176]	; (8006d4c <HAL_DMA_IRQHandler+0xe4c>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d004      	beq.n	8006caa <HAL_DMA_IRQHandler+0xdaa>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a2a      	ldr	r2, [pc, #168]	; (8006d50 <HAL_DMA_IRQHandler+0xe50>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d108      	bne.n	8006cbc <HAL_DMA_IRQHandler+0xdbc>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f022 021c 	bic.w	r2, r2, #28
 8006cb8:	601a      	str	r2, [r3, #0]
 8006cba:	e007      	b.n	8006ccc <HAL_DMA_IRQHandler+0xdcc>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f022 020e 	bic.w	r2, r2, #14
 8006cca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd0:	f003 031f 	and.w	r3, r3, #31
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	409a      	lsls	r2, r3
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d009      	beq.n	8006d0e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	4798      	blx	r3
 8006d02:	e004      	b.n	8006d0e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006d04:	bf00      	nop
 8006d06:	e002      	b.n	8006d0e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d08:	bf00      	nop
 8006d0a:	e000      	b.n	8006d0e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d0c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006d0e:	3728      	adds	r7, #40	; 0x28
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	40020010 	.word	0x40020010
 8006d18:	40020028 	.word	0x40020028
 8006d1c:	40020040 	.word	0x40020040
 8006d20:	40020058 	.word	0x40020058
 8006d24:	40020070 	.word	0x40020070
 8006d28:	40020088 	.word	0x40020088
 8006d2c:	400200a0 	.word	0x400200a0
 8006d30:	400200b8 	.word	0x400200b8
 8006d34:	40020410 	.word	0x40020410
 8006d38:	40020428 	.word	0x40020428
 8006d3c:	40020440 	.word	0x40020440
 8006d40:	40020458 	.word	0x40020458
 8006d44:	40020470 	.word	0x40020470
 8006d48:	40020488 	.word	0x40020488
 8006d4c:	400204a0 	.word	0x400204a0
 8006d50:	400204b8 	.word	0x400204b8

08006d54 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b087      	sub	sp, #28
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
 8006d60:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d66:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d6c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a7f      	ldr	r2, [pc, #508]	; (8006f70 <DMA_SetConfig+0x21c>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d072      	beq.n	8006e5e <DMA_SetConfig+0x10a>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a7d      	ldr	r2, [pc, #500]	; (8006f74 <DMA_SetConfig+0x220>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d06d      	beq.n	8006e5e <DMA_SetConfig+0x10a>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a7c      	ldr	r2, [pc, #496]	; (8006f78 <DMA_SetConfig+0x224>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d068      	beq.n	8006e5e <DMA_SetConfig+0x10a>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a7a      	ldr	r2, [pc, #488]	; (8006f7c <DMA_SetConfig+0x228>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d063      	beq.n	8006e5e <DMA_SetConfig+0x10a>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a79      	ldr	r2, [pc, #484]	; (8006f80 <DMA_SetConfig+0x22c>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d05e      	beq.n	8006e5e <DMA_SetConfig+0x10a>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a77      	ldr	r2, [pc, #476]	; (8006f84 <DMA_SetConfig+0x230>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d059      	beq.n	8006e5e <DMA_SetConfig+0x10a>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a76      	ldr	r2, [pc, #472]	; (8006f88 <DMA_SetConfig+0x234>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d054      	beq.n	8006e5e <DMA_SetConfig+0x10a>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a74      	ldr	r2, [pc, #464]	; (8006f8c <DMA_SetConfig+0x238>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d04f      	beq.n	8006e5e <DMA_SetConfig+0x10a>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a73      	ldr	r2, [pc, #460]	; (8006f90 <DMA_SetConfig+0x23c>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d04a      	beq.n	8006e5e <DMA_SetConfig+0x10a>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a71      	ldr	r2, [pc, #452]	; (8006f94 <DMA_SetConfig+0x240>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d045      	beq.n	8006e5e <DMA_SetConfig+0x10a>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a70      	ldr	r2, [pc, #448]	; (8006f98 <DMA_SetConfig+0x244>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d040      	beq.n	8006e5e <DMA_SetConfig+0x10a>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a6e      	ldr	r2, [pc, #440]	; (8006f9c <DMA_SetConfig+0x248>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d03b      	beq.n	8006e5e <DMA_SetConfig+0x10a>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a6d      	ldr	r2, [pc, #436]	; (8006fa0 <DMA_SetConfig+0x24c>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d036      	beq.n	8006e5e <DMA_SetConfig+0x10a>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a6b      	ldr	r2, [pc, #428]	; (8006fa4 <DMA_SetConfig+0x250>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d031      	beq.n	8006e5e <DMA_SetConfig+0x10a>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a6a      	ldr	r2, [pc, #424]	; (8006fa8 <DMA_SetConfig+0x254>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d02c      	beq.n	8006e5e <DMA_SetConfig+0x10a>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a68      	ldr	r2, [pc, #416]	; (8006fac <DMA_SetConfig+0x258>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d027      	beq.n	8006e5e <DMA_SetConfig+0x10a>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a67      	ldr	r2, [pc, #412]	; (8006fb0 <DMA_SetConfig+0x25c>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d022      	beq.n	8006e5e <DMA_SetConfig+0x10a>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a65      	ldr	r2, [pc, #404]	; (8006fb4 <DMA_SetConfig+0x260>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d01d      	beq.n	8006e5e <DMA_SetConfig+0x10a>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a64      	ldr	r2, [pc, #400]	; (8006fb8 <DMA_SetConfig+0x264>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d018      	beq.n	8006e5e <DMA_SetConfig+0x10a>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a62      	ldr	r2, [pc, #392]	; (8006fbc <DMA_SetConfig+0x268>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d013      	beq.n	8006e5e <DMA_SetConfig+0x10a>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a61      	ldr	r2, [pc, #388]	; (8006fc0 <DMA_SetConfig+0x26c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d00e      	beq.n	8006e5e <DMA_SetConfig+0x10a>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a5f      	ldr	r2, [pc, #380]	; (8006fc4 <DMA_SetConfig+0x270>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d009      	beq.n	8006e5e <DMA_SetConfig+0x10a>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a5e      	ldr	r2, [pc, #376]	; (8006fc8 <DMA_SetConfig+0x274>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d004      	beq.n	8006e5e <DMA_SetConfig+0x10a>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a5c      	ldr	r2, [pc, #368]	; (8006fcc <DMA_SetConfig+0x278>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d101      	bne.n	8006e62 <DMA_SetConfig+0x10e>
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e000      	b.n	8006e64 <DMA_SetConfig+0x110>
 8006e62:	2300      	movs	r3, #0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00d      	beq.n	8006e84 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e70:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d004      	beq.n	8006e84 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e82:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a39      	ldr	r2, [pc, #228]	; (8006f70 <DMA_SetConfig+0x21c>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d04a      	beq.n	8006f24 <DMA_SetConfig+0x1d0>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a38      	ldr	r2, [pc, #224]	; (8006f74 <DMA_SetConfig+0x220>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d045      	beq.n	8006f24 <DMA_SetConfig+0x1d0>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a36      	ldr	r2, [pc, #216]	; (8006f78 <DMA_SetConfig+0x224>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d040      	beq.n	8006f24 <DMA_SetConfig+0x1d0>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a35      	ldr	r2, [pc, #212]	; (8006f7c <DMA_SetConfig+0x228>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d03b      	beq.n	8006f24 <DMA_SetConfig+0x1d0>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a33      	ldr	r2, [pc, #204]	; (8006f80 <DMA_SetConfig+0x22c>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d036      	beq.n	8006f24 <DMA_SetConfig+0x1d0>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a32      	ldr	r2, [pc, #200]	; (8006f84 <DMA_SetConfig+0x230>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d031      	beq.n	8006f24 <DMA_SetConfig+0x1d0>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a30      	ldr	r2, [pc, #192]	; (8006f88 <DMA_SetConfig+0x234>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d02c      	beq.n	8006f24 <DMA_SetConfig+0x1d0>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a2f      	ldr	r2, [pc, #188]	; (8006f8c <DMA_SetConfig+0x238>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d027      	beq.n	8006f24 <DMA_SetConfig+0x1d0>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a2d      	ldr	r2, [pc, #180]	; (8006f90 <DMA_SetConfig+0x23c>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d022      	beq.n	8006f24 <DMA_SetConfig+0x1d0>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a2c      	ldr	r2, [pc, #176]	; (8006f94 <DMA_SetConfig+0x240>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d01d      	beq.n	8006f24 <DMA_SetConfig+0x1d0>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a2a      	ldr	r2, [pc, #168]	; (8006f98 <DMA_SetConfig+0x244>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d018      	beq.n	8006f24 <DMA_SetConfig+0x1d0>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a29      	ldr	r2, [pc, #164]	; (8006f9c <DMA_SetConfig+0x248>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d013      	beq.n	8006f24 <DMA_SetConfig+0x1d0>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a27      	ldr	r2, [pc, #156]	; (8006fa0 <DMA_SetConfig+0x24c>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d00e      	beq.n	8006f24 <DMA_SetConfig+0x1d0>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a26      	ldr	r2, [pc, #152]	; (8006fa4 <DMA_SetConfig+0x250>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d009      	beq.n	8006f24 <DMA_SetConfig+0x1d0>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a24      	ldr	r2, [pc, #144]	; (8006fa8 <DMA_SetConfig+0x254>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d004      	beq.n	8006f24 <DMA_SetConfig+0x1d0>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a23      	ldr	r2, [pc, #140]	; (8006fac <DMA_SetConfig+0x258>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d101      	bne.n	8006f28 <DMA_SetConfig+0x1d4>
 8006f24:	2301      	movs	r3, #1
 8006f26:	e000      	b.n	8006f2a <DMA_SetConfig+0x1d6>
 8006f28:	2300      	movs	r3, #0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d059      	beq.n	8006fe2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f32:	f003 031f 	and.w	r3, r3, #31
 8006f36:	223f      	movs	r2, #63	; 0x3f
 8006f38:	409a      	lsls	r2, r3
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f4c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	2b40      	cmp	r3, #64	; 0x40
 8006f5c:	d138      	bne.n	8006fd0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006f6e:	e086      	b.n	800707e <DMA_SetConfig+0x32a>
 8006f70:	40020010 	.word	0x40020010
 8006f74:	40020028 	.word	0x40020028
 8006f78:	40020040 	.word	0x40020040
 8006f7c:	40020058 	.word	0x40020058
 8006f80:	40020070 	.word	0x40020070
 8006f84:	40020088 	.word	0x40020088
 8006f88:	400200a0 	.word	0x400200a0
 8006f8c:	400200b8 	.word	0x400200b8
 8006f90:	40020410 	.word	0x40020410
 8006f94:	40020428 	.word	0x40020428
 8006f98:	40020440 	.word	0x40020440
 8006f9c:	40020458 	.word	0x40020458
 8006fa0:	40020470 	.word	0x40020470
 8006fa4:	40020488 	.word	0x40020488
 8006fa8:	400204a0 	.word	0x400204a0
 8006fac:	400204b8 	.word	0x400204b8
 8006fb0:	58025408 	.word	0x58025408
 8006fb4:	5802541c 	.word	0x5802541c
 8006fb8:	58025430 	.word	0x58025430
 8006fbc:	58025444 	.word	0x58025444
 8006fc0:	58025458 	.word	0x58025458
 8006fc4:	5802546c 	.word	0x5802546c
 8006fc8:	58025480 	.word	0x58025480
 8006fcc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	60da      	str	r2, [r3, #12]
}
 8006fe0:	e04d      	b.n	800707e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a29      	ldr	r2, [pc, #164]	; (800708c <DMA_SetConfig+0x338>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d022      	beq.n	8007032 <DMA_SetConfig+0x2de>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a27      	ldr	r2, [pc, #156]	; (8007090 <DMA_SetConfig+0x33c>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d01d      	beq.n	8007032 <DMA_SetConfig+0x2de>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a26      	ldr	r2, [pc, #152]	; (8007094 <DMA_SetConfig+0x340>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d018      	beq.n	8007032 <DMA_SetConfig+0x2de>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a24      	ldr	r2, [pc, #144]	; (8007098 <DMA_SetConfig+0x344>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d013      	beq.n	8007032 <DMA_SetConfig+0x2de>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a23      	ldr	r2, [pc, #140]	; (800709c <DMA_SetConfig+0x348>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d00e      	beq.n	8007032 <DMA_SetConfig+0x2de>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a21      	ldr	r2, [pc, #132]	; (80070a0 <DMA_SetConfig+0x34c>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d009      	beq.n	8007032 <DMA_SetConfig+0x2de>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a20      	ldr	r2, [pc, #128]	; (80070a4 <DMA_SetConfig+0x350>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d004      	beq.n	8007032 <DMA_SetConfig+0x2de>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a1e      	ldr	r2, [pc, #120]	; (80070a8 <DMA_SetConfig+0x354>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d101      	bne.n	8007036 <DMA_SetConfig+0x2e2>
 8007032:	2301      	movs	r3, #1
 8007034:	e000      	b.n	8007038 <DMA_SetConfig+0x2e4>
 8007036:	2300      	movs	r3, #0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d020      	beq.n	800707e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007040:	f003 031f 	and.w	r3, r3, #31
 8007044:	2201      	movs	r2, #1
 8007046:	409a      	lsls	r2, r3
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	683a      	ldr	r2, [r7, #0]
 8007052:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	2b40      	cmp	r3, #64	; 0x40
 800705a:	d108      	bne.n	800706e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	60da      	str	r2, [r3, #12]
}
 800706c:	e007      	b.n	800707e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	60da      	str	r2, [r3, #12]
}
 800707e:	bf00      	nop
 8007080:	371c      	adds	r7, #28
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	58025408 	.word	0x58025408
 8007090:	5802541c 	.word	0x5802541c
 8007094:	58025430 	.word	0x58025430
 8007098:	58025444 	.word	0x58025444
 800709c:	58025458 	.word	0x58025458
 80070a0:	5802546c 	.word	0x5802546c
 80070a4:	58025480 	.word	0x58025480
 80070a8:	58025494 	.word	0x58025494

080070ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a42      	ldr	r2, [pc, #264]	; (80071c4 <DMA_CalcBaseAndBitshift+0x118>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d04a      	beq.n	8007154 <DMA_CalcBaseAndBitshift+0xa8>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a41      	ldr	r2, [pc, #260]	; (80071c8 <DMA_CalcBaseAndBitshift+0x11c>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d045      	beq.n	8007154 <DMA_CalcBaseAndBitshift+0xa8>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a3f      	ldr	r2, [pc, #252]	; (80071cc <DMA_CalcBaseAndBitshift+0x120>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d040      	beq.n	8007154 <DMA_CalcBaseAndBitshift+0xa8>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a3e      	ldr	r2, [pc, #248]	; (80071d0 <DMA_CalcBaseAndBitshift+0x124>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d03b      	beq.n	8007154 <DMA_CalcBaseAndBitshift+0xa8>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a3c      	ldr	r2, [pc, #240]	; (80071d4 <DMA_CalcBaseAndBitshift+0x128>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d036      	beq.n	8007154 <DMA_CalcBaseAndBitshift+0xa8>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a3b      	ldr	r2, [pc, #236]	; (80071d8 <DMA_CalcBaseAndBitshift+0x12c>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d031      	beq.n	8007154 <DMA_CalcBaseAndBitshift+0xa8>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a39      	ldr	r2, [pc, #228]	; (80071dc <DMA_CalcBaseAndBitshift+0x130>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d02c      	beq.n	8007154 <DMA_CalcBaseAndBitshift+0xa8>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a38      	ldr	r2, [pc, #224]	; (80071e0 <DMA_CalcBaseAndBitshift+0x134>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d027      	beq.n	8007154 <DMA_CalcBaseAndBitshift+0xa8>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a36      	ldr	r2, [pc, #216]	; (80071e4 <DMA_CalcBaseAndBitshift+0x138>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d022      	beq.n	8007154 <DMA_CalcBaseAndBitshift+0xa8>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a35      	ldr	r2, [pc, #212]	; (80071e8 <DMA_CalcBaseAndBitshift+0x13c>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d01d      	beq.n	8007154 <DMA_CalcBaseAndBitshift+0xa8>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a33      	ldr	r2, [pc, #204]	; (80071ec <DMA_CalcBaseAndBitshift+0x140>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d018      	beq.n	8007154 <DMA_CalcBaseAndBitshift+0xa8>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a32      	ldr	r2, [pc, #200]	; (80071f0 <DMA_CalcBaseAndBitshift+0x144>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d013      	beq.n	8007154 <DMA_CalcBaseAndBitshift+0xa8>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a30      	ldr	r2, [pc, #192]	; (80071f4 <DMA_CalcBaseAndBitshift+0x148>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d00e      	beq.n	8007154 <DMA_CalcBaseAndBitshift+0xa8>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a2f      	ldr	r2, [pc, #188]	; (80071f8 <DMA_CalcBaseAndBitshift+0x14c>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d009      	beq.n	8007154 <DMA_CalcBaseAndBitshift+0xa8>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a2d      	ldr	r2, [pc, #180]	; (80071fc <DMA_CalcBaseAndBitshift+0x150>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d004      	beq.n	8007154 <DMA_CalcBaseAndBitshift+0xa8>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a2c      	ldr	r2, [pc, #176]	; (8007200 <DMA_CalcBaseAndBitshift+0x154>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d101      	bne.n	8007158 <DMA_CalcBaseAndBitshift+0xac>
 8007154:	2301      	movs	r3, #1
 8007156:	e000      	b.n	800715a <DMA_CalcBaseAndBitshift+0xae>
 8007158:	2300      	movs	r3, #0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d024      	beq.n	80071a8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	b2db      	uxtb	r3, r3
 8007164:	3b10      	subs	r3, #16
 8007166:	4a27      	ldr	r2, [pc, #156]	; (8007204 <DMA_CalcBaseAndBitshift+0x158>)
 8007168:	fba2 2303 	umull	r2, r3, r2, r3
 800716c:	091b      	lsrs	r3, r3, #4
 800716e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f003 0307 	and.w	r3, r3, #7
 8007176:	4a24      	ldr	r2, [pc, #144]	; (8007208 <DMA_CalcBaseAndBitshift+0x15c>)
 8007178:	5cd3      	ldrb	r3, [r2, r3]
 800717a:	461a      	mov	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2b03      	cmp	r3, #3
 8007184:	d908      	bls.n	8007198 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	461a      	mov	r2, r3
 800718c:	4b1f      	ldr	r3, [pc, #124]	; (800720c <DMA_CalcBaseAndBitshift+0x160>)
 800718e:	4013      	ands	r3, r2
 8007190:	1d1a      	adds	r2, r3, #4
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	659a      	str	r2, [r3, #88]	; 0x58
 8007196:	e00d      	b.n	80071b4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	461a      	mov	r2, r3
 800719e:	4b1b      	ldr	r3, [pc, #108]	; (800720c <DMA_CalcBaseAndBitshift+0x160>)
 80071a0:	4013      	ands	r3, r2
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	6593      	str	r3, [r2, #88]	; 0x58
 80071a6:	e005      	b.n	80071b4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3714      	adds	r7, #20
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr
 80071c4:	40020010 	.word	0x40020010
 80071c8:	40020028 	.word	0x40020028
 80071cc:	40020040 	.word	0x40020040
 80071d0:	40020058 	.word	0x40020058
 80071d4:	40020070 	.word	0x40020070
 80071d8:	40020088 	.word	0x40020088
 80071dc:	400200a0 	.word	0x400200a0
 80071e0:	400200b8 	.word	0x400200b8
 80071e4:	40020410 	.word	0x40020410
 80071e8:	40020428 	.word	0x40020428
 80071ec:	40020440 	.word	0x40020440
 80071f0:	40020458 	.word	0x40020458
 80071f4:	40020470 	.word	0x40020470
 80071f8:	40020488 	.word	0x40020488
 80071fc:	400204a0 	.word	0x400204a0
 8007200:	400204b8 	.word	0x400204b8
 8007204:	aaaaaaab 	.word	0xaaaaaaab
 8007208:	080184f8 	.word	0x080184f8
 800720c:	fffffc00 	.word	0xfffffc00

08007210 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007218:	2300      	movs	r3, #0
 800721a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d120      	bne.n	8007266 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007228:	2b03      	cmp	r3, #3
 800722a:	d858      	bhi.n	80072de <DMA_CheckFifoParam+0xce>
 800722c:	a201      	add	r2, pc, #4	; (adr r2, 8007234 <DMA_CheckFifoParam+0x24>)
 800722e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007232:	bf00      	nop
 8007234:	08007245 	.word	0x08007245
 8007238:	08007257 	.word	0x08007257
 800723c:	08007245 	.word	0x08007245
 8007240:	080072df 	.word	0x080072df
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007248:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d048      	beq.n	80072e2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007254:	e045      	b.n	80072e2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800725e:	d142      	bne.n	80072e6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007264:	e03f      	b.n	80072e6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800726e:	d123      	bne.n	80072b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007274:	2b03      	cmp	r3, #3
 8007276:	d838      	bhi.n	80072ea <DMA_CheckFifoParam+0xda>
 8007278:	a201      	add	r2, pc, #4	; (adr r2, 8007280 <DMA_CheckFifoParam+0x70>)
 800727a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727e:	bf00      	nop
 8007280:	08007291 	.word	0x08007291
 8007284:	08007297 	.word	0x08007297
 8007288:	08007291 	.word	0x08007291
 800728c:	080072a9 	.word	0x080072a9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	73fb      	strb	r3, [r7, #15]
        break;
 8007294:	e030      	b.n	80072f8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d025      	beq.n	80072ee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072a6:	e022      	b.n	80072ee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80072b0:	d11f      	bne.n	80072f2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072b6:	e01c      	b.n	80072f2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d902      	bls.n	80072c6 <DMA_CheckFifoParam+0xb6>
 80072c0:	2b03      	cmp	r3, #3
 80072c2:	d003      	beq.n	80072cc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80072c4:	e018      	b.n	80072f8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	73fb      	strb	r3, [r7, #15]
        break;
 80072ca:	e015      	b.n	80072f8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00e      	beq.n	80072f6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	73fb      	strb	r3, [r7, #15]
    break;
 80072dc:	e00b      	b.n	80072f6 <DMA_CheckFifoParam+0xe6>
        break;
 80072de:	bf00      	nop
 80072e0:	e00a      	b.n	80072f8 <DMA_CheckFifoParam+0xe8>
        break;
 80072e2:	bf00      	nop
 80072e4:	e008      	b.n	80072f8 <DMA_CheckFifoParam+0xe8>
        break;
 80072e6:	bf00      	nop
 80072e8:	e006      	b.n	80072f8 <DMA_CheckFifoParam+0xe8>
        break;
 80072ea:	bf00      	nop
 80072ec:	e004      	b.n	80072f8 <DMA_CheckFifoParam+0xe8>
        break;
 80072ee:	bf00      	nop
 80072f0:	e002      	b.n	80072f8 <DMA_CheckFifoParam+0xe8>
        break;
 80072f2:	bf00      	nop
 80072f4:	e000      	b.n	80072f8 <DMA_CheckFifoParam+0xe8>
    break;
 80072f6:	bf00      	nop
    }
  }

  return status;
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3714      	adds	r7, #20
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop

08007308 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a38      	ldr	r2, [pc, #224]	; (80073fc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d022      	beq.n	8007366 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a36      	ldr	r2, [pc, #216]	; (8007400 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d01d      	beq.n	8007366 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a35      	ldr	r2, [pc, #212]	; (8007404 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d018      	beq.n	8007366 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a33      	ldr	r2, [pc, #204]	; (8007408 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d013      	beq.n	8007366 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a32      	ldr	r2, [pc, #200]	; (800740c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d00e      	beq.n	8007366 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a30      	ldr	r2, [pc, #192]	; (8007410 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d009      	beq.n	8007366 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a2f      	ldr	r2, [pc, #188]	; (8007414 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d004      	beq.n	8007366 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a2d      	ldr	r2, [pc, #180]	; (8007418 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d101      	bne.n	800736a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007366:	2301      	movs	r3, #1
 8007368:	e000      	b.n	800736c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800736a:	2300      	movs	r3, #0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d01a      	beq.n	80073a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	b2db      	uxtb	r3, r3
 8007376:	3b08      	subs	r3, #8
 8007378:	4a28      	ldr	r2, [pc, #160]	; (800741c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800737a:	fba2 2303 	umull	r2, r3, r2, r3
 800737e:	091b      	lsrs	r3, r3, #4
 8007380:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	4b26      	ldr	r3, [pc, #152]	; (8007420 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007386:	4413      	add	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	461a      	mov	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a24      	ldr	r2, [pc, #144]	; (8007424 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007394:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f003 031f 	and.w	r3, r3, #31
 800739c:	2201      	movs	r2, #1
 800739e:	409a      	lsls	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80073a4:	e024      	b.n	80073f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	3b10      	subs	r3, #16
 80073ae:	4a1e      	ldr	r2, [pc, #120]	; (8007428 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80073b0:	fba2 2303 	umull	r2, r3, r2, r3
 80073b4:	091b      	lsrs	r3, r3, #4
 80073b6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	4a1c      	ldr	r2, [pc, #112]	; (800742c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d806      	bhi.n	80073ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	4a1b      	ldr	r2, [pc, #108]	; (8007430 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d902      	bls.n	80073ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	3308      	adds	r3, #8
 80073cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	4b18      	ldr	r3, [pc, #96]	; (8007434 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80073d2:	4413      	add	r3, r2
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	461a      	mov	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a16      	ldr	r2, [pc, #88]	; (8007438 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80073e0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f003 031f 	and.w	r3, r3, #31
 80073e8:	2201      	movs	r2, #1
 80073ea:	409a      	lsls	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	669a      	str	r2, [r3, #104]	; 0x68
}
 80073f0:	bf00      	nop
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	58025408 	.word	0x58025408
 8007400:	5802541c 	.word	0x5802541c
 8007404:	58025430 	.word	0x58025430
 8007408:	58025444 	.word	0x58025444
 800740c:	58025458 	.word	0x58025458
 8007410:	5802546c 	.word	0x5802546c
 8007414:	58025480 	.word	0x58025480
 8007418:	58025494 	.word	0x58025494
 800741c:	cccccccd 	.word	0xcccccccd
 8007420:	16009600 	.word	0x16009600
 8007424:	58025880 	.word	0x58025880
 8007428:	aaaaaaab 	.word	0xaaaaaaab
 800742c:	400204b8 	.word	0x400204b8
 8007430:	4002040f 	.word	0x4002040f
 8007434:	10008200 	.word	0x10008200
 8007438:	40020880 	.word	0x40020880

0800743c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	b2db      	uxtb	r3, r3
 800744a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d04a      	beq.n	80074e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2b08      	cmp	r3, #8
 8007456:	d847      	bhi.n	80074e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a25      	ldr	r2, [pc, #148]	; (80074f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d022      	beq.n	80074a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a24      	ldr	r2, [pc, #144]	; (80074f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d01d      	beq.n	80074a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a22      	ldr	r2, [pc, #136]	; (80074fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d018      	beq.n	80074a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a21      	ldr	r2, [pc, #132]	; (8007500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d013      	beq.n	80074a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a1f      	ldr	r2, [pc, #124]	; (8007504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d00e      	beq.n	80074a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a1e      	ldr	r2, [pc, #120]	; (8007508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d009      	beq.n	80074a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a1c      	ldr	r2, [pc, #112]	; (800750c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d004      	beq.n	80074a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a1b      	ldr	r2, [pc, #108]	; (8007510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d101      	bne.n	80074ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80074a8:	2301      	movs	r3, #1
 80074aa:	e000      	b.n	80074ae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80074ac:	2300      	movs	r3, #0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00a      	beq.n	80074c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	4b17      	ldr	r3, [pc, #92]	; (8007514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80074b6:	4413      	add	r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	461a      	mov	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a15      	ldr	r2, [pc, #84]	; (8007518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80074c4:	671a      	str	r2, [r3, #112]	; 0x70
 80074c6:	e009      	b.n	80074dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	4b14      	ldr	r3, [pc, #80]	; (800751c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80074cc:	4413      	add	r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	461a      	mov	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a11      	ldr	r2, [pc, #68]	; (8007520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80074da:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	3b01      	subs	r3, #1
 80074e0:	2201      	movs	r2, #1
 80074e2:	409a      	lsls	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80074e8:	bf00      	nop
 80074ea:	3714      	adds	r7, #20
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	58025408 	.word	0x58025408
 80074f8:	5802541c 	.word	0x5802541c
 80074fc:	58025430 	.word	0x58025430
 8007500:	58025444 	.word	0x58025444
 8007504:	58025458 	.word	0x58025458
 8007508:	5802546c 	.word	0x5802546c
 800750c:	58025480 	.word	0x58025480
 8007510:	58025494 	.word	0x58025494
 8007514:	1600963f 	.word	0x1600963f
 8007518:	58025940 	.word	0x58025940
 800751c:	1000823f 	.word	0x1000823f
 8007520:	40020940 	.word	0x40020940

08007524 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b098      	sub	sp, #96	; 0x60
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800752c:	4a84      	ldr	r2, [pc, #528]	; (8007740 <HAL_FDCAN_Init+0x21c>)
 800752e:	f107 030c 	add.w	r3, r7, #12
 8007532:	4611      	mov	r1, r2
 8007534:	224c      	movs	r2, #76	; 0x4c
 8007536:	4618      	mov	r0, r3
 8007538:	f00f fdea 	bl	8017110 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d101      	bne.n	8007546 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e1c6      	b.n	80078d4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a7e      	ldr	r2, [pc, #504]	; (8007744 <HAL_FDCAN_Init+0x220>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d106      	bne.n	800755e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007558:	461a      	mov	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	d106      	bne.n	8007578 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7fb faa4 	bl	8002ac0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	699a      	ldr	r2, [r3, #24]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f022 0210 	bic.w	r2, r2, #16
 8007586:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007588:	f7fc fa32 	bl	80039f0 <HAL_GetTick>
 800758c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800758e:	e014      	b.n	80075ba <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007590:	f7fc fa2e 	bl	80039f0 <HAL_GetTick>
 8007594:	4602      	mov	r2, r0
 8007596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	2b0a      	cmp	r3, #10
 800759c:	d90d      	bls.n	80075ba <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075a4:	f043 0201 	orr.w	r2, r3, #1
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2203      	movs	r2, #3
 80075b2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e18c      	b.n	80078d4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	f003 0308 	and.w	r3, r3, #8
 80075c4:	2b08      	cmp	r3, #8
 80075c6:	d0e3      	beq.n	8007590 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	699a      	ldr	r2, [r3, #24]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f042 0201 	orr.w	r2, r2, #1
 80075d6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80075d8:	f7fc fa0a 	bl	80039f0 <HAL_GetTick>
 80075dc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80075de:	e014      	b.n	800760a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80075e0:	f7fc fa06 	bl	80039f0 <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	2b0a      	cmp	r3, #10
 80075ec:	d90d      	bls.n	800760a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075f4:	f043 0201 	orr.w	r2, r3, #1
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2203      	movs	r2, #3
 8007602:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e164      	b.n	80078d4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	f003 0301 	and.w	r3, r3, #1
 8007614:	2b00      	cmp	r3, #0
 8007616:	d0e3      	beq.n	80075e0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	699a      	ldr	r2, [r3, #24]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0202 	orr.w	r2, r2, #2
 8007626:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	7c1b      	ldrb	r3, [r3, #16]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d108      	bne.n	8007642 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	699a      	ldr	r2, [r3, #24]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800763e:	619a      	str	r2, [r3, #24]
 8007640:	e007      	b.n	8007652 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	699a      	ldr	r2, [r3, #24]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007650:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	7c5b      	ldrb	r3, [r3, #17]
 8007656:	2b01      	cmp	r3, #1
 8007658:	d108      	bne.n	800766c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	699a      	ldr	r2, [r3, #24]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007668:	619a      	str	r2, [r3, #24]
 800766a:	e007      	b.n	800767c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	699a      	ldr	r2, [r3, #24]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800767a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	7c9b      	ldrb	r3, [r3, #18]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d108      	bne.n	8007696 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	699a      	ldr	r2, [r3, #24]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007692:	619a      	str	r2, [r3, #24]
 8007694:	e007      	b.n	80076a6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	699a      	ldr	r2, [r3, #24]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076a4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	430a      	orrs	r2, r1
 80076ba:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	699a      	ldr	r2, [r3, #24]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80076ca:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	691a      	ldr	r2, [r3, #16]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f022 0210 	bic.w	r2, r2, #16
 80076da:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d108      	bne.n	80076f6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	699a      	ldr	r2, [r3, #24]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f042 0204 	orr.w	r2, r2, #4
 80076f2:	619a      	str	r2, [r3, #24]
 80076f4:	e030      	b.n	8007758 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d02c      	beq.n	8007758 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	2b02      	cmp	r3, #2
 8007704:	d020      	beq.n	8007748 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	699a      	ldr	r2, [r3, #24]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007714:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	691a      	ldr	r2, [r3, #16]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f042 0210 	orr.w	r2, r2, #16
 8007724:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	2b03      	cmp	r3, #3
 800772c:	d114      	bne.n	8007758 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	699a      	ldr	r2, [r3, #24]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f042 0220 	orr.w	r2, r2, #32
 800773c:	619a      	str	r2, [r3, #24]
 800773e:	e00b      	b.n	8007758 <HAL_FDCAN_Init+0x234>
 8007740:	080183e4 	.word	0x080183e4
 8007744:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	699a      	ldr	r2, [r3, #24]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f042 0220 	orr.w	r2, r2, #32
 8007756:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	3b01      	subs	r3, #1
 800775e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	69db      	ldr	r3, [r3, #28]
 8007764:	3b01      	subs	r3, #1
 8007766:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007768:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007770:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	3b01      	subs	r3, #1
 800777a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007780:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007782:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800778c:	d115      	bne.n	80077ba <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007792:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007798:	3b01      	subs	r3, #1
 800779a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800779c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a2:	3b01      	subs	r3, #1
 80077a4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80077a6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ae:	3b01      	subs	r3, #1
 80077b0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80077b6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80077b8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00a      	beq.n	80077d8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	430a      	orrs	r2, r1
 80077d4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077e0:	4413      	add	r3, r2
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d011      	beq.n	800780a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80077ee:	f023 0107 	bic.w	r1, r3, #7
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	3360      	adds	r3, #96	; 0x60
 80077fa:	443b      	add	r3, r7
 80077fc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	430a      	orrs	r2, r1
 8007806:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780e:	2b00      	cmp	r3, #0
 8007810:	d011      	beq.n	8007836 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800781a:	f023 0107 	bic.w	r1, r3, #7
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	3360      	adds	r3, #96	; 0x60
 8007826:	443b      	add	r3, r7
 8007828:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	430a      	orrs	r2, r1
 8007832:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800783a:	2b00      	cmp	r3, #0
 800783c:	d012      	beq.n	8007864 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007846:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	3360      	adds	r3, #96	; 0x60
 8007852:	443b      	add	r3, r7
 8007854:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007858:	011a      	lsls	r2, r3, #4
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	430a      	orrs	r2, r1
 8007860:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007868:	2b00      	cmp	r3, #0
 800786a:	d012      	beq.n	8007892 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007874:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	3360      	adds	r3, #96	; 0x60
 8007880:	443b      	add	r3, r7
 8007882:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007886:	021a      	lsls	r2, r3, #8
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	430a      	orrs	r2, r1
 800788e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a11      	ldr	r2, [pc, #68]	; (80078dc <HAL_FDCAN_Init+0x3b8>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d107      	bne.n	80078ac <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	689a      	ldr	r2, [r3, #8]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	f022 0203 	bic.w	r2, r2, #3
 80078aa:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 f80b 	bl	80078e0 <FDCAN_CalcultateRamBlockAddresses>
 80078ca:	4603      	mov	r3, r0
 80078cc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80078d0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3760      	adds	r7, #96	; 0x60
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	4000a000 	.word	0x4000a000

080078e0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ec:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80078f6:	4ba7      	ldr	r3, [pc, #668]	; (8007b94 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80078f8:	4013      	ands	r3, r2
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	0091      	lsls	r1, r2, #2
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	6812      	ldr	r2, [r2, #0]
 8007902:	430b      	orrs	r3, r1
 8007904:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007910:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007918:	041a      	lsls	r2, r3, #16
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	430a      	orrs	r2, r1
 8007920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	4413      	add	r3, r2
 800792c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007936:	4b97      	ldr	r3, [pc, #604]	; (8007b94 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007938:	4013      	ands	r3, r2
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	0091      	lsls	r1, r2, #2
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	6812      	ldr	r2, [r2, #0]
 8007942:	430b      	orrs	r3, r1
 8007944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007950:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007958:	041a      	lsls	r2, r3, #16
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	430a      	orrs	r2, r1
 8007960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007968:	005b      	lsls	r3, r3, #1
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	4413      	add	r3, r2
 800796e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007978:	4b86      	ldr	r3, [pc, #536]	; (8007b94 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800797a:	4013      	ands	r3, r2
 800797c:	68ba      	ldr	r2, [r7, #8]
 800797e:	0091      	lsls	r1, r2, #2
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	6812      	ldr	r2, [r2, #0]
 8007984:	430b      	orrs	r3, r1
 8007986:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007992:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799a:	041a      	lsls	r2, r3, #16
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	430a      	orrs	r2, r1
 80079a2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80079ae:	fb02 f303 	mul.w	r3, r2, r3
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	4413      	add	r3, r2
 80079b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80079c0:	4b74      	ldr	r3, [pc, #464]	; (8007b94 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079c2:	4013      	ands	r3, r2
 80079c4:	68ba      	ldr	r2, [r7, #8]
 80079c6:	0091      	lsls	r1, r2, #2
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	6812      	ldr	r2, [r2, #0]
 80079cc:	430b      	orrs	r3, r1
 80079ce:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079da:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079e2:	041a      	lsls	r2, r3, #16
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	430a      	orrs	r2, r1
 80079ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80079f6:	fb02 f303 	mul.w	r3, r2, r3
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	4413      	add	r3, r2
 80079fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007a08:	4b62      	ldr	r3, [pc, #392]	; (8007b94 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	68ba      	ldr	r2, [r7, #8]
 8007a0e:	0091      	lsls	r1, r2, #2
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	6812      	ldr	r2, [r2, #0]
 8007a14:	430b      	orrs	r3, r1
 8007a16:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007a22:	fb02 f303 	mul.w	r3, r2, r3
 8007a26:	68ba      	ldr	r2, [r7, #8]
 8007a28:	4413      	add	r3, r2
 8007a2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007a34:	4b57      	ldr	r3, [pc, #348]	; (8007b94 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a36:	4013      	ands	r3, r2
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	0091      	lsls	r1, r2, #2
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	6812      	ldr	r2, [r2, #0]
 8007a40:	430b      	orrs	r3, r1
 8007a42:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a4e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a56:	041a      	lsls	r2, r3, #16
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	430a      	orrs	r2, r1
 8007a5e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a66:	005b      	lsls	r3, r3, #1
 8007a68:	68ba      	ldr	r2, [r7, #8]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007a76:	4b47      	ldr	r3, [pc, #284]	; (8007b94 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a78:	4013      	ands	r3, r2
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	0091      	lsls	r1, r2, #2
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	6812      	ldr	r2, [r2, #0]
 8007a82:	430b      	orrs	r3, r1
 8007a84:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007a90:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a98:	041a      	lsls	r2, r3, #16
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007aac:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ab4:	061a      	lsls	r2, r3, #24
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	430a      	orrs	r2, r1
 8007abc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ac4:	4b34      	ldr	r3, [pc, #208]	; (8007b98 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007ac6:	4413      	add	r3, r2
 8007ac8:	009a      	lsls	r2, r3, #2
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	441a      	add	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae6:	00db      	lsls	r3, r3, #3
 8007ae8:	441a      	add	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af6:	6879      	ldr	r1, [r7, #4]
 8007af8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007afa:	fb01 f303 	mul.w	r3, r1, r3
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	441a      	add	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b0e:	6879      	ldr	r1, [r7, #4]
 8007b10:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007b12:	fb01 f303 	mul.w	r3, r1, r3
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	441a      	add	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b26:	6879      	ldr	r1, [r7, #4]
 8007b28:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007b2a:	fb01 f303 	mul.w	r3, r1, r3
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	441a      	add	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b42:	00db      	lsls	r3, r3, #3
 8007b44:	441a      	add	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b56:	6879      	ldr	r1, [r7, #4]
 8007b58:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007b5a:	fb01 f303 	mul.w	r3, r1, r3
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	441a      	add	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b72:	6879      	ldr	r1, [r7, #4]
 8007b74:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007b76:	fb01 f303 	mul.w	r3, r1, r3
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	441a      	add	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b8a:	4a04      	ldr	r2, [pc, #16]	; (8007b9c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d915      	bls.n	8007bbc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007b90:	e006      	b.n	8007ba0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007b92:	bf00      	nop
 8007b94:	ffff0003 	.word	0xffff0003
 8007b98:	10002b00 	.word	0x10002b00
 8007b9c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ba6:	f043 0220 	orr.w	r2, r3, #32
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2203      	movs	r2, #3
 8007bb4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e010      	b.n	8007bde <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bc0:	60fb      	str	r3, [r7, #12]
 8007bc2:	e005      	b.n	8007bd0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	3304      	adds	r3, #4
 8007bce:	60fb      	str	r3, [r7, #12]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d3f3      	bcc.n	8007bc4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop

08007bec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b089      	sub	sp, #36	; 0x24
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007bfa:	4b86      	ldr	r3, [pc, #536]	; (8007e14 <HAL_GPIO_Init+0x228>)
 8007bfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007bfe:	e18c      	b.n	8007f1a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	2101      	movs	r1, #1
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	fa01 f303 	lsl.w	r3, r1, r3
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f000 817e 	beq.w	8007f14 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	f003 0303 	and.w	r3, r3, #3
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d005      	beq.n	8007c30 <HAL_GPIO_Init+0x44>
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	f003 0303 	and.w	r3, r3, #3
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d130      	bne.n	8007c92 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	005b      	lsls	r3, r3, #1
 8007c3a:	2203      	movs	r2, #3
 8007c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c40:	43db      	mvns	r3, r3
 8007c42:	69ba      	ldr	r2, [r7, #24]
 8007c44:	4013      	ands	r3, r2
 8007c46:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	68da      	ldr	r2, [r3, #12]
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	005b      	lsls	r3, r3, #1
 8007c50:	fa02 f303 	lsl.w	r3, r2, r3
 8007c54:	69ba      	ldr	r2, [r7, #24]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	69ba      	ldr	r2, [r7, #24]
 8007c5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007c66:	2201      	movs	r2, #1
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6e:	43db      	mvns	r3, r3
 8007c70:	69ba      	ldr	r2, [r7, #24]
 8007c72:	4013      	ands	r3, r2
 8007c74:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	091b      	lsrs	r3, r3, #4
 8007c7c:	f003 0201 	and.w	r2, r3, #1
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	fa02 f303 	lsl.w	r3, r2, r3
 8007c86:	69ba      	ldr	r2, [r7, #24]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	f003 0303 	and.w	r3, r3, #3
 8007c9a:	2b03      	cmp	r3, #3
 8007c9c:	d017      	beq.n	8007cce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	005b      	lsls	r3, r3, #1
 8007ca8:	2203      	movs	r2, #3
 8007caa:	fa02 f303 	lsl.w	r3, r2, r3
 8007cae:	43db      	mvns	r3, r3
 8007cb0:	69ba      	ldr	r2, [r7, #24]
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	689a      	ldr	r2, [r3, #8]
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	005b      	lsls	r3, r3, #1
 8007cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc2:	69ba      	ldr	r2, [r7, #24]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	69ba      	ldr	r2, [r7, #24]
 8007ccc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	f003 0303 	and.w	r3, r3, #3
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d123      	bne.n	8007d22 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	08da      	lsrs	r2, r3, #3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	3208      	adds	r2, #8
 8007ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	f003 0307 	and.w	r3, r3, #7
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	220f      	movs	r2, #15
 8007cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf6:	43db      	mvns	r3, r3
 8007cf8:	69ba      	ldr	r2, [r7, #24]
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	691a      	ldr	r2, [r3, #16]
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	f003 0307 	and.w	r3, r3, #7
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0e:	69ba      	ldr	r2, [r7, #24]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	08da      	lsrs	r2, r3, #3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	3208      	adds	r2, #8
 8007d1c:	69b9      	ldr	r1, [r7, #24]
 8007d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	005b      	lsls	r3, r3, #1
 8007d2c:	2203      	movs	r2, #3
 8007d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d32:	43db      	mvns	r3, r3
 8007d34:	69ba      	ldr	r2, [r7, #24]
 8007d36:	4013      	ands	r3, r2
 8007d38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	f003 0203 	and.w	r2, r3, #3
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	005b      	lsls	r3, r3, #1
 8007d46:	fa02 f303 	lsl.w	r3, r2, r3
 8007d4a:	69ba      	ldr	r2, [r7, #24]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	69ba      	ldr	r2, [r7, #24]
 8007d54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f000 80d8 	beq.w	8007f14 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d64:	4b2c      	ldr	r3, [pc, #176]	; (8007e18 <HAL_GPIO_Init+0x22c>)
 8007d66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d6a:	4a2b      	ldr	r2, [pc, #172]	; (8007e18 <HAL_GPIO_Init+0x22c>)
 8007d6c:	f043 0302 	orr.w	r3, r3, #2
 8007d70:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007d74:	4b28      	ldr	r3, [pc, #160]	; (8007e18 <HAL_GPIO_Init+0x22c>)
 8007d76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d7a:	f003 0302 	and.w	r3, r3, #2
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007d82:	4a26      	ldr	r2, [pc, #152]	; (8007e1c <HAL_GPIO_Init+0x230>)
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	089b      	lsrs	r3, r3, #2
 8007d88:	3302      	adds	r3, #2
 8007d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	f003 0303 	and.w	r3, r3, #3
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	220f      	movs	r2, #15
 8007d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d9e:	43db      	mvns	r3, r3
 8007da0:	69ba      	ldr	r2, [r7, #24]
 8007da2:	4013      	ands	r3, r2
 8007da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a1d      	ldr	r2, [pc, #116]	; (8007e20 <HAL_GPIO_Init+0x234>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d04a      	beq.n	8007e44 <HAL_GPIO_Init+0x258>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a1c      	ldr	r2, [pc, #112]	; (8007e24 <HAL_GPIO_Init+0x238>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d02b      	beq.n	8007e0e <HAL_GPIO_Init+0x222>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a1b      	ldr	r2, [pc, #108]	; (8007e28 <HAL_GPIO_Init+0x23c>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d025      	beq.n	8007e0a <HAL_GPIO_Init+0x21e>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a1a      	ldr	r2, [pc, #104]	; (8007e2c <HAL_GPIO_Init+0x240>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d01f      	beq.n	8007e06 <HAL_GPIO_Init+0x21a>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a19      	ldr	r2, [pc, #100]	; (8007e30 <HAL_GPIO_Init+0x244>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d019      	beq.n	8007e02 <HAL_GPIO_Init+0x216>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a18      	ldr	r2, [pc, #96]	; (8007e34 <HAL_GPIO_Init+0x248>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d013      	beq.n	8007dfe <HAL_GPIO_Init+0x212>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a17      	ldr	r2, [pc, #92]	; (8007e38 <HAL_GPIO_Init+0x24c>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d00d      	beq.n	8007dfa <HAL_GPIO_Init+0x20e>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a16      	ldr	r2, [pc, #88]	; (8007e3c <HAL_GPIO_Init+0x250>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d007      	beq.n	8007df6 <HAL_GPIO_Init+0x20a>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a15      	ldr	r2, [pc, #84]	; (8007e40 <HAL_GPIO_Init+0x254>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d101      	bne.n	8007df2 <HAL_GPIO_Init+0x206>
 8007dee:	2309      	movs	r3, #9
 8007df0:	e029      	b.n	8007e46 <HAL_GPIO_Init+0x25a>
 8007df2:	230a      	movs	r3, #10
 8007df4:	e027      	b.n	8007e46 <HAL_GPIO_Init+0x25a>
 8007df6:	2307      	movs	r3, #7
 8007df8:	e025      	b.n	8007e46 <HAL_GPIO_Init+0x25a>
 8007dfa:	2306      	movs	r3, #6
 8007dfc:	e023      	b.n	8007e46 <HAL_GPIO_Init+0x25a>
 8007dfe:	2305      	movs	r3, #5
 8007e00:	e021      	b.n	8007e46 <HAL_GPIO_Init+0x25a>
 8007e02:	2304      	movs	r3, #4
 8007e04:	e01f      	b.n	8007e46 <HAL_GPIO_Init+0x25a>
 8007e06:	2303      	movs	r3, #3
 8007e08:	e01d      	b.n	8007e46 <HAL_GPIO_Init+0x25a>
 8007e0a:	2302      	movs	r3, #2
 8007e0c:	e01b      	b.n	8007e46 <HAL_GPIO_Init+0x25a>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e019      	b.n	8007e46 <HAL_GPIO_Init+0x25a>
 8007e12:	bf00      	nop
 8007e14:	58000080 	.word	0x58000080
 8007e18:	58024400 	.word	0x58024400
 8007e1c:	58000400 	.word	0x58000400
 8007e20:	58020000 	.word	0x58020000
 8007e24:	58020400 	.word	0x58020400
 8007e28:	58020800 	.word	0x58020800
 8007e2c:	58020c00 	.word	0x58020c00
 8007e30:	58021000 	.word	0x58021000
 8007e34:	58021400 	.word	0x58021400
 8007e38:	58021800 	.word	0x58021800
 8007e3c:	58021c00 	.word	0x58021c00
 8007e40:	58022400 	.word	0x58022400
 8007e44:	2300      	movs	r3, #0
 8007e46:	69fa      	ldr	r2, [r7, #28]
 8007e48:	f002 0203 	and.w	r2, r2, #3
 8007e4c:	0092      	lsls	r2, r2, #2
 8007e4e:	4093      	lsls	r3, r2
 8007e50:	69ba      	ldr	r2, [r7, #24]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007e56:	4938      	ldr	r1, [pc, #224]	; (8007f38 <HAL_GPIO_Init+0x34c>)
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	089b      	lsrs	r3, r3, #2
 8007e5c:	3302      	adds	r3, #2
 8007e5e:	69ba      	ldr	r2, [r7, #24]
 8007e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	43db      	mvns	r3, r3
 8007e70:	69ba      	ldr	r2, [r7, #24]
 8007e72:	4013      	ands	r3, r2
 8007e74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d003      	beq.n	8007e8a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007e82:	69ba      	ldr	r2, [r7, #24]
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007e8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	43db      	mvns	r3, r3
 8007e9e:	69ba      	ldr	r2, [r7, #24]
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d003      	beq.n	8007eb8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007eb0:	69ba      	ldr	r2, [r7, #24]
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007eb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	43db      	mvns	r3, r3
 8007eca:	69ba      	ldr	r2, [r7, #24]
 8007ecc:	4013      	ands	r3, r2
 8007ece:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d003      	beq.n	8007ee4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007edc:	69ba      	ldr	r2, [r7, #24]
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	69ba      	ldr	r2, [r7, #24]
 8007ee8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	43db      	mvns	r3, r3
 8007ef4:	69ba      	ldr	r2, [r7, #24]
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d003      	beq.n	8007f0e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007f06:	69ba      	ldr	r2, [r7, #24]
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	69ba      	ldr	r2, [r7, #24]
 8007f12:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	3301      	adds	r3, #1
 8007f18:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	fa22 f303 	lsr.w	r3, r2, r3
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f47f ae6b 	bne.w	8007c00 <HAL_GPIO_Init+0x14>
  }
}
 8007f2a:	bf00      	nop
 8007f2c:	bf00      	nop
 8007f2e:	3724      	adds	r7, #36	; 0x24
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr
 8007f38:	58000400 	.word	0x58000400

08007f3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	460b      	mov	r3, r1
 8007f46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	691a      	ldr	r2, [r3, #16]
 8007f4c:	887b      	ldrh	r3, [r7, #2]
 8007f4e:	4013      	ands	r3, r2
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d002      	beq.n	8007f5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007f54:	2301      	movs	r3, #1
 8007f56:	73fb      	strb	r3, [r7, #15]
 8007f58:	e001      	b.n	8007f5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	460b      	mov	r3, r1
 8007f76:	807b      	strh	r3, [r7, #2]
 8007f78:	4613      	mov	r3, r2
 8007f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007f7c:	787b      	ldrb	r3, [r7, #1]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d003      	beq.n	8007f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007f82:	887a      	ldrh	r2, [r7, #2]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007f88:	e003      	b.n	8007f92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007f8a:	887b      	ldrh	r3, [r7, #2]
 8007f8c:	041a      	lsls	r2, r3, #16
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	619a      	str	r2, [r3, #24]
}
 8007f92:	bf00      	nop
 8007f94:	370c      	adds	r7, #12
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
	...

08007fa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d101      	bne.n	8007fb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e07f      	b.n	80080b2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d106      	bne.n	8007fcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f7fa fde2 	bl	8002b90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2224      	movs	r2, #36	; 0x24
 8007fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f022 0201 	bic.w	r2, r2, #1
 8007fe2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	685a      	ldr	r2, [r3, #4]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007ff0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	689a      	ldr	r2, [r3, #8]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008000:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d107      	bne.n	800801a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	689a      	ldr	r2, [r3, #8]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008016:	609a      	str	r2, [r3, #8]
 8008018:	e006      	b.n	8008028 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	689a      	ldr	r2, [r3, #8]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008026:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	2b02      	cmp	r3, #2
 800802e:	d104      	bne.n	800803a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008038:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	6859      	ldr	r1, [r3, #4]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	4b1d      	ldr	r3, [pc, #116]	; (80080bc <HAL_I2C_Init+0x11c>)
 8008046:	430b      	orrs	r3, r1
 8008048:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68da      	ldr	r2, [r3, #12]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008058:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	691a      	ldr	r2, [r3, #16]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	695b      	ldr	r3, [r3, #20]
 8008062:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	430a      	orrs	r2, r1
 8008072:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	69d9      	ldr	r1, [r3, #28]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a1a      	ldr	r2, [r3, #32]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	430a      	orrs	r2, r1
 8008082:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f042 0201 	orr.w	r2, r2, #1
 8008092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2220      	movs	r2, #32
 800809e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3708      	adds	r7, #8
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	02008000 	.word	0x02008000

080080c0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d005      	beq.n	80080ec <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	68f9      	ldr	r1, [r7, #12]
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	4798      	blx	r3
  }
}
 80080ec:	bf00      	nop
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b20      	cmp	r3, #32
 8008108:	d138      	bne.n	800817c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008110:	2b01      	cmp	r3, #1
 8008112:	d101      	bne.n	8008118 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008114:	2302      	movs	r3, #2
 8008116:	e032      	b.n	800817e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2224      	movs	r2, #36	; 0x24
 8008124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f022 0201 	bic.w	r2, r2, #1
 8008136:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008146:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	6819      	ldr	r1, [r3, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	430a      	orrs	r2, r1
 8008156:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f042 0201 	orr.w	r2, r2, #1
 8008166:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2220      	movs	r2, #32
 800816c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008178:	2300      	movs	r3, #0
 800817a:	e000      	b.n	800817e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800817c:	2302      	movs	r3, #2
  }
}
 800817e:	4618      	mov	r0, r3
 8008180:	370c      	adds	r7, #12
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800818a:	b480      	push	{r7}
 800818c:	b085      	sub	sp, #20
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800819a:	b2db      	uxtb	r3, r3
 800819c:	2b20      	cmp	r3, #32
 800819e:	d139      	bne.n	8008214 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d101      	bne.n	80081ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80081aa:	2302      	movs	r3, #2
 80081ac:	e033      	b.n	8008216 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2201      	movs	r2, #1
 80081b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2224      	movs	r2, #36	; 0x24
 80081ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f022 0201 	bic.w	r2, r2, #1
 80081cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80081dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	021b      	lsls	r3, r3, #8
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f042 0201 	orr.w	r2, r2, #1
 80081fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2220      	movs	r2, #32
 8008204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008210:	2300      	movs	r3, #0
 8008212:	e000      	b.n	8008216 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008214:	2302      	movs	r3, #2
  }
}
 8008216:	4618      	mov	r0, r3
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008222:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008224:	b08f      	sub	sp, #60	; 0x3c
 8008226:	af0a      	add	r7, sp, #40	; 0x28
 8008228:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d101      	bne.n	8008234 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	e116      	b.n	8008462 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008240:	b2db      	uxtb	r3, r3
 8008242:	2b00      	cmp	r3, #0
 8008244:	d106      	bne.n	8008254 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f00e fbc8 	bl	80169e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2203      	movs	r2, #3
 8008258:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008264:	2b00      	cmp	r3, #0
 8008266:	d102      	bne.n	800826e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4618      	mov	r0, r3
 8008274:	f00a fcf7 	bl	8012c66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	603b      	str	r3, [r7, #0]
 800827e:	687e      	ldr	r6, [r7, #4]
 8008280:	466d      	mov	r5, sp
 8008282:	f106 0410 	add.w	r4, r6, #16
 8008286:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008288:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800828a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800828c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800828e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008292:	e885 0003 	stmia.w	r5, {r0, r1}
 8008296:	1d33      	adds	r3, r6, #4
 8008298:	cb0e      	ldmia	r3, {r1, r2, r3}
 800829a:	6838      	ldr	r0, [r7, #0]
 800829c:	f00a fbc2 	bl	8012a24 <USB_CoreInit>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d005      	beq.n	80082b2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2202      	movs	r2, #2
 80082aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e0d7      	b.n	8008462 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2100      	movs	r1, #0
 80082b8:	4618      	mov	r0, r3
 80082ba:	f00a fce5 	bl	8012c88 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082be:	2300      	movs	r3, #0
 80082c0:	73fb      	strb	r3, [r7, #15]
 80082c2:	e04a      	b.n	800835a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80082c4:	7bfa      	ldrb	r2, [r7, #15]
 80082c6:	6879      	ldr	r1, [r7, #4]
 80082c8:	4613      	mov	r3, r2
 80082ca:	00db      	lsls	r3, r3, #3
 80082cc:	4413      	add	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	440b      	add	r3, r1
 80082d2:	333d      	adds	r3, #61	; 0x3d
 80082d4:	2201      	movs	r2, #1
 80082d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80082d8:	7bfa      	ldrb	r2, [r7, #15]
 80082da:	6879      	ldr	r1, [r7, #4]
 80082dc:	4613      	mov	r3, r2
 80082de:	00db      	lsls	r3, r3, #3
 80082e0:	4413      	add	r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	440b      	add	r3, r1
 80082e6:	333c      	adds	r3, #60	; 0x3c
 80082e8:	7bfa      	ldrb	r2, [r7, #15]
 80082ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80082ec:	7bfa      	ldrb	r2, [r7, #15]
 80082ee:	7bfb      	ldrb	r3, [r7, #15]
 80082f0:	b298      	uxth	r0, r3
 80082f2:	6879      	ldr	r1, [r7, #4]
 80082f4:	4613      	mov	r3, r2
 80082f6:	00db      	lsls	r3, r3, #3
 80082f8:	4413      	add	r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	440b      	add	r3, r1
 80082fe:	3356      	adds	r3, #86	; 0x56
 8008300:	4602      	mov	r2, r0
 8008302:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008304:	7bfa      	ldrb	r2, [r7, #15]
 8008306:	6879      	ldr	r1, [r7, #4]
 8008308:	4613      	mov	r3, r2
 800830a:	00db      	lsls	r3, r3, #3
 800830c:	4413      	add	r3, r2
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	440b      	add	r3, r1
 8008312:	3340      	adds	r3, #64	; 0x40
 8008314:	2200      	movs	r2, #0
 8008316:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008318:	7bfa      	ldrb	r2, [r7, #15]
 800831a:	6879      	ldr	r1, [r7, #4]
 800831c:	4613      	mov	r3, r2
 800831e:	00db      	lsls	r3, r3, #3
 8008320:	4413      	add	r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	440b      	add	r3, r1
 8008326:	3344      	adds	r3, #68	; 0x44
 8008328:	2200      	movs	r2, #0
 800832a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800832c:	7bfa      	ldrb	r2, [r7, #15]
 800832e:	6879      	ldr	r1, [r7, #4]
 8008330:	4613      	mov	r3, r2
 8008332:	00db      	lsls	r3, r3, #3
 8008334:	4413      	add	r3, r2
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	440b      	add	r3, r1
 800833a:	3348      	adds	r3, #72	; 0x48
 800833c:	2200      	movs	r2, #0
 800833e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008340:	7bfa      	ldrb	r2, [r7, #15]
 8008342:	6879      	ldr	r1, [r7, #4]
 8008344:	4613      	mov	r3, r2
 8008346:	00db      	lsls	r3, r3, #3
 8008348:	4413      	add	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	440b      	add	r3, r1
 800834e:	334c      	adds	r3, #76	; 0x4c
 8008350:	2200      	movs	r2, #0
 8008352:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008354:	7bfb      	ldrb	r3, [r7, #15]
 8008356:	3301      	adds	r3, #1
 8008358:	73fb      	strb	r3, [r7, #15]
 800835a:	7bfa      	ldrb	r2, [r7, #15]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	429a      	cmp	r2, r3
 8008362:	d3af      	bcc.n	80082c4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008364:	2300      	movs	r3, #0
 8008366:	73fb      	strb	r3, [r7, #15]
 8008368:	e044      	b.n	80083f4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800836a:	7bfa      	ldrb	r2, [r7, #15]
 800836c:	6879      	ldr	r1, [r7, #4]
 800836e:	4613      	mov	r3, r2
 8008370:	00db      	lsls	r3, r3, #3
 8008372:	4413      	add	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	440b      	add	r3, r1
 8008378:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800837c:	2200      	movs	r2, #0
 800837e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008380:	7bfa      	ldrb	r2, [r7, #15]
 8008382:	6879      	ldr	r1, [r7, #4]
 8008384:	4613      	mov	r3, r2
 8008386:	00db      	lsls	r3, r3, #3
 8008388:	4413      	add	r3, r2
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	440b      	add	r3, r1
 800838e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008392:	7bfa      	ldrb	r2, [r7, #15]
 8008394:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008396:	7bfa      	ldrb	r2, [r7, #15]
 8008398:	6879      	ldr	r1, [r7, #4]
 800839a:	4613      	mov	r3, r2
 800839c:	00db      	lsls	r3, r3, #3
 800839e:	4413      	add	r3, r2
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	440b      	add	r3, r1
 80083a4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80083a8:	2200      	movs	r2, #0
 80083aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80083ac:	7bfa      	ldrb	r2, [r7, #15]
 80083ae:	6879      	ldr	r1, [r7, #4]
 80083b0:	4613      	mov	r3, r2
 80083b2:	00db      	lsls	r3, r3, #3
 80083b4:	4413      	add	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	440b      	add	r3, r1
 80083ba:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80083be:	2200      	movs	r2, #0
 80083c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80083c2:	7bfa      	ldrb	r2, [r7, #15]
 80083c4:	6879      	ldr	r1, [r7, #4]
 80083c6:	4613      	mov	r3, r2
 80083c8:	00db      	lsls	r3, r3, #3
 80083ca:	4413      	add	r3, r2
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	440b      	add	r3, r1
 80083d0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80083d4:	2200      	movs	r2, #0
 80083d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80083d8:	7bfa      	ldrb	r2, [r7, #15]
 80083da:	6879      	ldr	r1, [r7, #4]
 80083dc:	4613      	mov	r3, r2
 80083de:	00db      	lsls	r3, r3, #3
 80083e0:	4413      	add	r3, r2
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	440b      	add	r3, r1
 80083e6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80083ea:	2200      	movs	r2, #0
 80083ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80083ee:	7bfb      	ldrb	r3, [r7, #15]
 80083f0:	3301      	adds	r3, #1
 80083f2:	73fb      	strb	r3, [r7, #15]
 80083f4:	7bfa      	ldrb	r2, [r7, #15]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d3b5      	bcc.n	800836a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	603b      	str	r3, [r7, #0]
 8008404:	687e      	ldr	r6, [r7, #4]
 8008406:	466d      	mov	r5, sp
 8008408:	f106 0410 	add.w	r4, r6, #16
 800840c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800840e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008414:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008418:	e885 0003 	stmia.w	r5, {r0, r1}
 800841c:	1d33      	adds	r3, r6, #4
 800841e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008420:	6838      	ldr	r0, [r7, #0]
 8008422:	f00a fc7d 	bl	8012d20 <USB_DevInit>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d005      	beq.n	8008438 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2202      	movs	r2, #2
 8008430:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e014      	b.n	8008462 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844c:	2b01      	cmp	r3, #1
 800844e:	d102      	bne.n	8008456 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f001 f96f 	bl	8009734 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4618      	mov	r0, r3
 800845c:	f00b fcbf 	bl	8013dde <USB_DevDisconnect>

  return HAL_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3714      	adds	r7, #20
 8008466:	46bd      	mov	sp, r7
 8008468:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800846a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b084      	sub	sp, #16
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800847e:	2b01      	cmp	r3, #1
 8008480:	d101      	bne.n	8008486 <HAL_PCD_Start+0x1c>
 8008482:	2302      	movs	r3, #2
 8008484:	e022      	b.n	80084cc <HAL_PCD_Start+0x62>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008496:	2b00      	cmp	r3, #0
 8008498:	d109      	bne.n	80084ae <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d105      	bne.n	80084ae <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4618      	mov	r0, r3
 80084b4:	f00a fbc6 	bl	8012c44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4618      	mov	r0, r3
 80084be:	f00b fc6d 	bl	8013d9c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80084d4:	b590      	push	{r4, r7, lr}
 80084d6:	b08d      	sub	sp, #52	; 0x34
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e2:	6a3b      	ldr	r3, [r7, #32]
 80084e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f00b fd2b 	bl	8013f46 <USB_GetMode>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f040 84b7 	bne.w	8008e66 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4618      	mov	r0, r3
 80084fe:	f00b fc8f 	bl	8013e20 <USB_ReadInterrupts>
 8008502:	4603      	mov	r3, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	f000 84ad 	beq.w	8008e64 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	0a1b      	lsrs	r3, r3, #8
 8008514:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4618      	mov	r0, r3
 8008524:	f00b fc7c 	bl	8013e20 <USB_ReadInterrupts>
 8008528:	4603      	mov	r3, r0
 800852a:	f003 0302 	and.w	r3, r3, #2
 800852e:	2b02      	cmp	r3, #2
 8008530:	d107      	bne.n	8008542 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	695a      	ldr	r2, [r3, #20]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f002 0202 	and.w	r2, r2, #2
 8008540:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4618      	mov	r0, r3
 8008548:	f00b fc6a 	bl	8013e20 <USB_ReadInterrupts>
 800854c:	4603      	mov	r3, r0
 800854e:	f003 0310 	and.w	r3, r3, #16
 8008552:	2b10      	cmp	r3, #16
 8008554:	d161      	bne.n	800861a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	699a      	ldr	r2, [r3, #24]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f022 0210 	bic.w	r2, r2, #16
 8008564:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008566:	6a3b      	ldr	r3, [r7, #32]
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	f003 020f 	and.w	r2, r3, #15
 8008572:	4613      	mov	r3, r2
 8008574:	00db      	lsls	r3, r3, #3
 8008576:	4413      	add	r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	4413      	add	r3, r2
 8008582:	3304      	adds	r3, #4
 8008584:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	0c5b      	lsrs	r3, r3, #17
 800858a:	f003 030f 	and.w	r3, r3, #15
 800858e:	2b02      	cmp	r3, #2
 8008590:	d124      	bne.n	80085dc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008592:	69ba      	ldr	r2, [r7, #24]
 8008594:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008598:	4013      	ands	r3, r2
 800859a:	2b00      	cmp	r3, #0
 800859c:	d035      	beq.n	800860a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	091b      	lsrs	r3, r3, #4
 80085a6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80085a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	461a      	mov	r2, r3
 80085b0:	6a38      	ldr	r0, [r7, #32]
 80085b2:	f00b faa1 	bl	8013af8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	68da      	ldr	r2, [r3, #12]
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	091b      	lsrs	r3, r3, #4
 80085be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80085c2:	441a      	add	r2, r3
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	695a      	ldr	r2, [r3, #20]
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	091b      	lsrs	r3, r3, #4
 80085d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80085d4:	441a      	add	r2, r3
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	615a      	str	r2, [r3, #20]
 80085da:	e016      	b.n	800860a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	0c5b      	lsrs	r3, r3, #17
 80085e0:	f003 030f 	and.w	r3, r3, #15
 80085e4:	2b06      	cmp	r3, #6
 80085e6:	d110      	bne.n	800860a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80085ee:	2208      	movs	r2, #8
 80085f0:	4619      	mov	r1, r3
 80085f2:	6a38      	ldr	r0, [r7, #32]
 80085f4:	f00b fa80 	bl	8013af8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	695a      	ldr	r2, [r3, #20]
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	091b      	lsrs	r3, r3, #4
 8008600:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008604:	441a      	add	r2, r3
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	699a      	ldr	r2, [r3, #24]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f042 0210 	orr.w	r2, r2, #16
 8008618:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4618      	mov	r0, r3
 8008620:	f00b fbfe 	bl	8013e20 <USB_ReadInterrupts>
 8008624:	4603      	mov	r3, r0
 8008626:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800862a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800862e:	f040 80a7 	bne.w	8008780 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008632:	2300      	movs	r3, #0
 8008634:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4618      	mov	r0, r3
 800863c:	f00b fc03 	bl	8013e46 <USB_ReadDevAllOutEpInterrupt>
 8008640:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008642:	e099      	b.n	8008778 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008646:	f003 0301 	and.w	r3, r3, #1
 800864a:	2b00      	cmp	r3, #0
 800864c:	f000 808e 	beq.w	800876c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008656:	b2d2      	uxtb	r2, r2
 8008658:	4611      	mov	r1, r2
 800865a:	4618      	mov	r0, r3
 800865c:	f00b fc27 	bl	8013eae <USB_ReadDevOutEPInterrupt>
 8008660:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	f003 0301 	and.w	r3, r3, #1
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00c      	beq.n	8008686 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866e:	015a      	lsls	r2, r3, #5
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	4413      	add	r3, r2
 8008674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008678:	461a      	mov	r2, r3
 800867a:	2301      	movs	r3, #1
 800867c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800867e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 fed1 	bl	8009428 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	f003 0308 	and.w	r3, r3, #8
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00c      	beq.n	80086aa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008692:	015a      	lsls	r2, r3, #5
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	4413      	add	r3, r2
 8008698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800869c:	461a      	mov	r2, r3
 800869e:	2308      	movs	r3, #8
 80086a0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80086a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 ffa7 	bl	80095f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	f003 0310 	and.w	r3, r3, #16
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d008      	beq.n	80086c6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80086b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b6:	015a      	lsls	r2, r3, #5
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	4413      	add	r3, r2
 80086bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086c0:	461a      	mov	r2, r3
 80086c2:	2310      	movs	r3, #16
 80086c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	f003 0302 	and.w	r3, r3, #2
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d030      	beq.n	8008732 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80086d0:	6a3b      	ldr	r3, [r7, #32]
 80086d2:	695b      	ldr	r3, [r3, #20]
 80086d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086d8:	2b80      	cmp	r3, #128	; 0x80
 80086da:	d109      	bne.n	80086f0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	69fa      	ldr	r2, [r7, #28]
 80086e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80086ee:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80086f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086f2:	4613      	mov	r3, r2
 80086f4:	00db      	lsls	r3, r3, #3
 80086f6:	4413      	add	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	4413      	add	r3, r2
 8008702:	3304      	adds	r3, #4
 8008704:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	78db      	ldrb	r3, [r3, #3]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d108      	bne.n	8008720 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	2200      	movs	r2, #0
 8008712:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008716:	b2db      	uxtb	r3, r3
 8008718:	4619      	mov	r1, r3
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f00e fa5a 	bl	8016bd4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008722:	015a      	lsls	r2, r3, #5
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	4413      	add	r3, r2
 8008728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800872c:	461a      	mov	r2, r3
 800872e:	2302      	movs	r3, #2
 8008730:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	f003 0320 	and.w	r3, r3, #32
 8008738:	2b00      	cmp	r3, #0
 800873a:	d008      	beq.n	800874e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800873c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873e:	015a      	lsls	r2, r3, #5
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	4413      	add	r3, r2
 8008744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008748:	461a      	mov	r2, r3
 800874a:	2320      	movs	r3, #32
 800874c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008754:	2b00      	cmp	r3, #0
 8008756:	d009      	beq.n	800876c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875a:	015a      	lsls	r2, r3, #5
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	4413      	add	r3, r2
 8008760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008764:	461a      	mov	r2, r3
 8008766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800876a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800876c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876e:	3301      	adds	r3, #1
 8008770:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008774:	085b      	lsrs	r3, r3, #1
 8008776:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877a:	2b00      	cmp	r3, #0
 800877c:	f47f af62 	bne.w	8008644 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4618      	mov	r0, r3
 8008786:	f00b fb4b 	bl	8013e20 <USB_ReadInterrupts>
 800878a:	4603      	mov	r3, r0
 800878c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008790:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008794:	f040 80db 	bne.w	800894e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4618      	mov	r0, r3
 800879e:	f00b fb6c 	bl	8013e7a <USB_ReadDevAllInEpInterrupt>
 80087a2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80087a4:	2300      	movs	r3, #0
 80087a6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80087a8:	e0cd      	b.n	8008946 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80087aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ac:	f003 0301 	and.w	r3, r3, #1
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f000 80c2 	beq.w	800893a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087bc:	b2d2      	uxtb	r2, r2
 80087be:	4611      	mov	r1, r2
 80087c0:	4618      	mov	r0, r3
 80087c2:	f00b fb92 	bl	8013eea <USB_ReadDevInEPInterrupt>
 80087c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	f003 0301 	and.w	r3, r3, #1
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d057      	beq.n	8008882 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80087d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d4:	f003 030f 	and.w	r3, r3, #15
 80087d8:	2201      	movs	r2, #1
 80087da:	fa02 f303 	lsl.w	r3, r2, r3
 80087de:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	43db      	mvns	r3, r3
 80087ec:	69f9      	ldr	r1, [r7, #28]
 80087ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087f2:	4013      	ands	r3, r2
 80087f4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80087f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f8:	015a      	lsls	r2, r3, #5
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	4413      	add	r3, r2
 80087fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008802:	461a      	mov	r2, r3
 8008804:	2301      	movs	r3, #1
 8008806:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	2b01      	cmp	r3, #1
 800880e:	d132      	bne.n	8008876 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008810:	6879      	ldr	r1, [r7, #4]
 8008812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008814:	4613      	mov	r3, r2
 8008816:	00db      	lsls	r3, r3, #3
 8008818:	4413      	add	r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	440b      	add	r3, r1
 800881e:	3348      	adds	r3, #72	; 0x48
 8008820:	6819      	ldr	r1, [r3, #0]
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008826:	4613      	mov	r3, r2
 8008828:	00db      	lsls	r3, r3, #3
 800882a:	4413      	add	r3, r2
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	4403      	add	r3, r0
 8008830:	3344      	adds	r3, #68	; 0x44
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4419      	add	r1, r3
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800883a:	4613      	mov	r3, r2
 800883c:	00db      	lsls	r3, r3, #3
 800883e:	4413      	add	r3, r2
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	4403      	add	r3, r0
 8008844:	3348      	adds	r3, #72	; 0x48
 8008846:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884a:	2b00      	cmp	r3, #0
 800884c:	d113      	bne.n	8008876 <HAL_PCD_IRQHandler+0x3a2>
 800884e:	6879      	ldr	r1, [r7, #4]
 8008850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008852:	4613      	mov	r3, r2
 8008854:	00db      	lsls	r3, r3, #3
 8008856:	4413      	add	r3, r2
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	440b      	add	r3, r1
 800885c:	334c      	adds	r3, #76	; 0x4c
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d108      	bne.n	8008876 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6818      	ldr	r0, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800886e:	461a      	mov	r2, r3
 8008870:	2101      	movs	r1, #1
 8008872:	f00b fb9b 	bl	8013fac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008878:	b2db      	uxtb	r3, r3
 800887a:	4619      	mov	r1, r3
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f00e f924 	bl	8016aca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	f003 0308 	and.w	r3, r3, #8
 8008888:	2b00      	cmp	r3, #0
 800888a:	d008      	beq.n	800889e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800888c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888e:	015a      	lsls	r2, r3, #5
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	4413      	add	r3, r2
 8008894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008898:	461a      	mov	r2, r3
 800889a:	2308      	movs	r3, #8
 800889c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	f003 0310 	and.w	r3, r3, #16
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d008      	beq.n	80088ba <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80088a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088aa:	015a      	lsls	r2, r3, #5
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	4413      	add	r3, r2
 80088b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088b4:	461a      	mov	r2, r3
 80088b6:	2310      	movs	r3, #16
 80088b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d008      	beq.n	80088d6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80088c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c6:	015a      	lsls	r2, r3, #5
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	4413      	add	r3, r2
 80088cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088d0:	461a      	mov	r2, r3
 80088d2:	2340      	movs	r3, #64	; 0x40
 80088d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	f003 0302 	and.w	r3, r3, #2
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d023      	beq.n	8008928 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80088e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088e2:	6a38      	ldr	r0, [r7, #32]
 80088e4:	f00a fb7a 	bl	8012fdc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80088e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ea:	4613      	mov	r3, r2
 80088ec:	00db      	lsls	r3, r3, #3
 80088ee:	4413      	add	r3, r2
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	3338      	adds	r3, #56	; 0x38
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	4413      	add	r3, r2
 80088f8:	3304      	adds	r3, #4
 80088fa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	78db      	ldrb	r3, [r3, #3]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d108      	bne.n	8008916 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	2200      	movs	r2, #0
 8008908:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800890a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890c:	b2db      	uxtb	r3, r3
 800890e:	4619      	mov	r1, r3
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f00e f971 	bl	8016bf8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008918:	015a      	lsls	r2, r3, #5
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	4413      	add	r3, r2
 800891e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008922:	461a      	mov	r2, r3
 8008924:	2302      	movs	r3, #2
 8008926:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800892e:	2b00      	cmp	r3, #0
 8008930:	d003      	beq.n	800893a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008932:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 fcea 	bl	800930e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800893a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893c:	3301      	adds	r3, #1
 800893e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008942:	085b      	lsrs	r3, r3, #1
 8008944:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008948:	2b00      	cmp	r3, #0
 800894a:	f47f af2e 	bne.w	80087aa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4618      	mov	r0, r3
 8008954:	f00b fa64 	bl	8013e20 <USB_ReadInterrupts>
 8008958:	4603      	mov	r3, r0
 800895a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800895e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008962:	d122      	bne.n	80089aa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	69fa      	ldr	r2, [r7, #28]
 800896e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008972:	f023 0301 	bic.w	r3, r3, #1
 8008976:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800897e:	2b01      	cmp	r3, #1
 8008980:	d108      	bne.n	8008994 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800898a:	2100      	movs	r1, #0
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fef5 	bl	800977c <HAL_PCDEx_LPM_Callback>
 8008992:	e002      	b.n	800899a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f00e f90f 	bl	8016bb8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	695a      	ldr	r2, [r3, #20]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80089a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4618      	mov	r0, r3
 80089b0:	f00b fa36 	bl	8013e20 <USB_ReadInterrupts>
 80089b4:	4603      	mov	r3, r0
 80089b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089be:	d112      	bne.n	80089e6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	f003 0301 	and.w	r3, r3, #1
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d102      	bne.n	80089d6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f00e f8cb 	bl	8016b6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	695a      	ldr	r2, [r3, #20]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80089e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f00b fa18 	bl	8013e20 <USB_ReadInterrupts>
 80089f0:	4603      	mov	r3, r0
 80089f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089fa:	d121      	bne.n	8008a40 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	695a      	ldr	r2, [r3, #20]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008a0a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d111      	bne.n	8008a3a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a24:	089b      	lsrs	r3, r3, #2
 8008a26:	f003 020f 	and.w	r2, r3, #15
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008a30:	2101      	movs	r1, #1
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 fea2 	bl	800977c <HAL_PCDEx_LPM_Callback>
 8008a38:	e002      	b.n	8008a40 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f00e f896 	bl	8016b6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4618      	mov	r0, r3
 8008a46:	f00b f9eb 	bl	8013e20 <USB_ReadInterrupts>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a54:	f040 80b7 	bne.w	8008bc6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	69fa      	ldr	r2, [r7, #28]
 8008a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a66:	f023 0301 	bic.w	r3, r3, #1
 8008a6a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2110      	movs	r1, #16
 8008a72:	4618      	mov	r0, r3
 8008a74:	f00a fab2 	bl	8012fdc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a78:	2300      	movs	r3, #0
 8008a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a7c:	e046      	b.n	8008b0c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a80:	015a      	lsls	r2, r3, #5
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	4413      	add	r3, r2
 8008a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a90:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a94:	015a      	lsls	r2, r3, #5
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	4413      	add	r3, r2
 8008a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aa2:	0151      	lsls	r1, r2, #5
 8008aa4:	69fa      	ldr	r2, [r7, #28]
 8008aa6:	440a      	add	r2, r1
 8008aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008ab0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab4:	015a      	lsls	r2, r3, #5
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	4413      	add	r3, r2
 8008aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008abe:	461a      	mov	r2, r3
 8008ac0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ac4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac8:	015a      	lsls	r2, r3, #5
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	4413      	add	r3, r2
 8008ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ad6:	0151      	lsls	r1, r2, #5
 8008ad8:	69fa      	ldr	r2, [r7, #28]
 8008ada:	440a      	add	r2, r1
 8008adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ae0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008ae4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae8:	015a      	lsls	r2, r3, #5
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	4413      	add	r3, r2
 8008aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008af6:	0151      	lsls	r1, r2, #5
 8008af8:	69fa      	ldr	r2, [r7, #28]
 8008afa:	440a      	add	r2, r1
 8008afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b04:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b08:	3301      	adds	r3, #1
 8008b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d3b3      	bcc.n	8008a7e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b1c:	69db      	ldr	r3, [r3, #28]
 8008b1e:	69fa      	ldr	r2, [r7, #28]
 8008b20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b24:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008b28:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d016      	beq.n	8008b60 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b3c:	69fa      	ldr	r2, [r7, #28]
 8008b3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b42:	f043 030b 	orr.w	r3, r3, #11
 8008b46:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b52:	69fa      	ldr	r2, [r7, #28]
 8008b54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b58:	f043 030b 	orr.w	r3, r3, #11
 8008b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8008b5e:	e015      	b.n	8008b8c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b66:	695a      	ldr	r2, [r3, #20]
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b6e:	4619      	mov	r1, r3
 8008b70:	f242 032b 	movw	r3, #8235	; 0x202b
 8008b74:	4313      	orrs	r3, r2
 8008b76:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b7e:	691b      	ldr	r3, [r3, #16]
 8008b80:	69fa      	ldr	r2, [r7, #28]
 8008b82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b86:	f043 030b 	orr.w	r3, r3, #11
 8008b8a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	69fa      	ldr	r2, [r7, #28]
 8008b96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b9a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008b9e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6818      	ldr	r0, [r3, #0]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	f00b f9fb 	bl	8013fac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	695a      	ldr	r2, [r3, #20]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008bc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f00b f928 	bl	8013e20 <USB_ReadInterrupts>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bda:	d124      	bne.n	8008c26 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4618      	mov	r0, r3
 8008be2:	f00b f9bf 	bl	8013f64 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f00a fa73 	bl	80130d6 <USB_GetDevSpeed>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681c      	ldr	r4, [r3, #0]
 8008bfc:	f001 fd88 	bl	800a710 <HAL_RCC_GetHCLKFreq>
 8008c00:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	461a      	mov	r2, r3
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f009 ff78 	bl	8012b00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f00d ff82 	bl	8016b1a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	695a      	ldr	r2, [r3, #20]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008c24:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f00b f8f8 	bl	8013e20 <USB_ReadInterrupts>
 8008c30:	4603      	mov	r3, r0
 8008c32:	f003 0308 	and.w	r3, r3, #8
 8008c36:	2b08      	cmp	r3, #8
 8008c38:	d10a      	bne.n	8008c50 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f00d ff5f 	bl	8016afe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	695a      	ldr	r2, [r3, #20]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f002 0208 	and.w	r2, r2, #8
 8008c4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4618      	mov	r0, r3
 8008c56:	f00b f8e3 	bl	8013e20 <USB_ReadInterrupts>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c60:	2b80      	cmp	r3, #128	; 0x80
 8008c62:	d122      	bne.n	8008caa <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008c64:	6a3b      	ldr	r3, [r7, #32]
 8008c66:	699b      	ldr	r3, [r3, #24]
 8008c68:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c6c:	6a3b      	ldr	r3, [r7, #32]
 8008c6e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008c70:	2301      	movs	r3, #1
 8008c72:	627b      	str	r3, [r7, #36]	; 0x24
 8008c74:	e014      	b.n	8008ca0 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008c76:	6879      	ldr	r1, [r7, #4]
 8008c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	00db      	lsls	r3, r3, #3
 8008c7e:	4413      	add	r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	440b      	add	r3, r1
 8008c84:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d105      	bne.n	8008c9a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	4619      	mov	r1, r3
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 fb09 	bl	80092ac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d3e5      	bcc.n	8008c76 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f00b f8b6 	bl	8013e20 <USB_ReadInterrupts>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008cba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cbe:	d13b      	bne.n	8008d38 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8008cc4:	e02b      	b.n	8008d1e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc8:	015a      	lsls	r2, r3, #5
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	4413      	add	r3, r2
 8008cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008cd6:	6879      	ldr	r1, [r7, #4]
 8008cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cda:	4613      	mov	r3, r2
 8008cdc:	00db      	lsls	r3, r3, #3
 8008cde:	4413      	add	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	440b      	add	r3, r1
 8008ce4:	3340      	adds	r3, #64	; 0x40
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d115      	bne.n	8008d18 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008cec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	da12      	bge.n	8008d18 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008cf2:	6879      	ldr	r1, [r7, #4]
 8008cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	00db      	lsls	r3, r3, #3
 8008cfa:	4413      	add	r3, r2
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	440b      	add	r3, r1
 8008d00:	333f      	adds	r3, #63	; 0x3f
 8008d02:	2201      	movs	r2, #1
 8008d04:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	4619      	mov	r1, r3
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 faca 	bl	80092ac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d3ce      	bcc.n	8008cc6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	695a      	ldr	r2, [r3, #20]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008d36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f00b f86f 	bl	8013e20 <USB_ReadInterrupts>
 8008d42:	4603      	mov	r3, r0
 8008d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d4c:	d155      	bne.n	8008dfa <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d4e:	2301      	movs	r3, #1
 8008d50:	627b      	str	r3, [r7, #36]	; 0x24
 8008d52:	e045      	b.n	8008de0 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d56:	015a      	lsls	r2, r3, #5
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008d64:	6879      	ldr	r1, [r7, #4]
 8008d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d68:	4613      	mov	r3, r2
 8008d6a:	00db      	lsls	r3, r3, #3
 8008d6c:	4413      	add	r3, r2
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	440b      	add	r3, r1
 8008d72:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d12e      	bne.n	8008dda <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008d7c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	da2b      	bge.n	8008dda <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008d8e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d121      	bne.n	8008dda <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008d96:	6879      	ldr	r1, [r7, #4]
 8008d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	00db      	lsls	r3, r3, #3
 8008d9e:	4413      	add	r3, r2
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	440b      	add	r3, r1
 8008da4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008da8:	2201      	movs	r2, #1
 8008daa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008dac:	6a3b      	ldr	r3, [r7, #32]
 8008dae:	699b      	ldr	r3, [r3, #24]
 8008db0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008db4:	6a3b      	ldr	r3, [r7, #32]
 8008db6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008db8:	6a3b      	ldr	r3, [r7, #32]
 8008dba:	695b      	ldr	r3, [r3, #20]
 8008dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d10a      	bne.n	8008dda <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	69fa      	ldr	r2, [r7, #28]
 8008dce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008dd6:	6053      	str	r3, [r2, #4]
            break;
 8008dd8:	e007      	b.n	8008dea <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ddc:	3301      	adds	r3, #1
 8008dde:	627b      	str	r3, [r7, #36]	; 0x24
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d3b4      	bcc.n	8008d54 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	695a      	ldr	r2, [r3, #20]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008df8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f00b f80e 	bl	8013e20 <USB_ReadInterrupts>
 8008e04:	4603      	mov	r3, r0
 8008e06:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e0e:	d10a      	bne.n	8008e26 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f00d ff03 	bl	8016c1c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	695a      	ldr	r2, [r3, #20]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008e24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f00a fff8 	bl	8013e20 <USB_ReadInterrupts>
 8008e30:	4603      	mov	r3, r0
 8008e32:	f003 0304 	and.w	r3, r3, #4
 8008e36:	2b04      	cmp	r3, #4
 8008e38:	d115      	bne.n	8008e66 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	f003 0304 	and.w	r3, r3, #4
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d002      	beq.n	8008e52 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f00d fef3 	bl	8016c38 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	6859      	ldr	r1, [r3, #4]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	69ba      	ldr	r2, [r7, #24]
 8008e5e:	430a      	orrs	r2, r1
 8008e60:	605a      	str	r2, [r3, #4]
 8008e62:	e000      	b.n	8008e66 <HAL_PCD_IRQHandler+0x992>
      return;
 8008e64:	bf00      	nop
    }
  }
}
 8008e66:	3734      	adds	r7, #52	; 0x34
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd90      	pop	{r4, r7, pc}

08008e6c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	460b      	mov	r3, r1
 8008e76:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d101      	bne.n	8008e86 <HAL_PCD_SetAddress+0x1a>
 8008e82:	2302      	movs	r3, #2
 8008e84:	e013      	b.n	8008eae <HAL_PCD_SetAddress+0x42>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	78fa      	ldrb	r2, [r7, #3]
 8008e92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	78fa      	ldrb	r2, [r7, #3]
 8008e9c:	4611      	mov	r1, r2
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f00a ff56 	bl	8013d50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b084      	sub	sp, #16
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
 8008ebe:	4608      	mov	r0, r1
 8008ec0:	4611      	mov	r1, r2
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	70fb      	strb	r3, [r7, #3]
 8008ec8:	460b      	mov	r3, r1
 8008eca:	803b      	strh	r3, [r7, #0]
 8008ecc:	4613      	mov	r3, r2
 8008ece:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008ed4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	da0f      	bge.n	8008efc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008edc:	78fb      	ldrb	r3, [r7, #3]
 8008ede:	f003 020f 	and.w	r2, r3, #15
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	00db      	lsls	r3, r3, #3
 8008ee6:	4413      	add	r3, r2
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	3338      	adds	r3, #56	; 0x38
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	4413      	add	r3, r2
 8008ef0:	3304      	adds	r3, #4
 8008ef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	705a      	strb	r2, [r3, #1]
 8008efa:	e00f      	b.n	8008f1c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008efc:	78fb      	ldrb	r3, [r7, #3]
 8008efe:	f003 020f 	and.w	r2, r3, #15
 8008f02:	4613      	mov	r3, r2
 8008f04:	00db      	lsls	r3, r3, #3
 8008f06:	4413      	add	r3, r2
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	4413      	add	r3, r2
 8008f12:	3304      	adds	r3, #4
 8008f14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008f1c:	78fb      	ldrb	r3, [r7, #3]
 8008f1e:	f003 030f 	and.w	r3, r3, #15
 8008f22:	b2da      	uxtb	r2, r3
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008f28:	883a      	ldrh	r2, [r7, #0]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	78ba      	ldrb	r2, [r7, #2]
 8008f32:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	785b      	ldrb	r3, [r3, #1]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d004      	beq.n	8008f46 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	b29a      	uxth	r2, r3
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008f46:	78bb      	ldrb	r3, [r7, #2]
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	d102      	bne.n	8008f52 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d101      	bne.n	8008f60 <HAL_PCD_EP_Open+0xaa>
 8008f5c:	2302      	movs	r3, #2
 8008f5e:	e00e      	b.n	8008f7e <HAL_PCD_EP_Open+0xc8>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2201      	movs	r2, #1
 8008f64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68f9      	ldr	r1, [r7, #12]
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f00a f8d6 	bl	8013120 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008f7c:	7afb      	ldrb	r3, [r7, #11]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b084      	sub	sp, #16
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
 8008f8e:	460b      	mov	r3, r1
 8008f90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008f92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	da0f      	bge.n	8008fba <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f9a:	78fb      	ldrb	r3, [r7, #3]
 8008f9c:	f003 020f 	and.w	r2, r3, #15
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	00db      	lsls	r3, r3, #3
 8008fa4:	4413      	add	r3, r2
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	3338      	adds	r3, #56	; 0x38
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	4413      	add	r3, r2
 8008fae:	3304      	adds	r3, #4
 8008fb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	705a      	strb	r2, [r3, #1]
 8008fb8:	e00f      	b.n	8008fda <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008fba:	78fb      	ldrb	r3, [r7, #3]
 8008fbc:	f003 020f 	and.w	r2, r3, #15
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	00db      	lsls	r3, r3, #3
 8008fc4:	4413      	add	r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	4413      	add	r3, r2
 8008fd0:	3304      	adds	r3, #4
 8008fd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008fda:	78fb      	ldrb	r3, [r7, #3]
 8008fdc:	f003 030f 	and.w	r3, r3, #15
 8008fe0:	b2da      	uxtb	r2, r3
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d101      	bne.n	8008ff4 <HAL_PCD_EP_Close+0x6e>
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	e00e      	b.n	8009012 <HAL_PCD_EP_Close+0x8c>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68f9      	ldr	r1, [r7, #12]
 8009002:	4618      	mov	r0, r3
 8009004:	f00a f914 	bl	8013230 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b086      	sub	sp, #24
 800901e:	af00      	add	r7, sp, #0
 8009020:	60f8      	str	r0, [r7, #12]
 8009022:	607a      	str	r2, [r7, #4]
 8009024:	603b      	str	r3, [r7, #0]
 8009026:	460b      	mov	r3, r1
 8009028:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800902a:	7afb      	ldrb	r3, [r7, #11]
 800902c:	f003 020f 	and.w	r2, r3, #15
 8009030:	4613      	mov	r3, r2
 8009032:	00db      	lsls	r3, r3, #3
 8009034:	4413      	add	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	4413      	add	r3, r2
 8009040:	3304      	adds	r3, #4
 8009042:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	683a      	ldr	r2, [r7, #0]
 800904e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	2200      	movs	r2, #0
 8009054:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	2200      	movs	r2, #0
 800905a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800905c:	7afb      	ldrb	r3, [r7, #11]
 800905e:	f003 030f 	and.w	r3, r3, #15
 8009062:	b2da      	uxtb	r2, r3
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d102      	bne.n	8009076 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	6818      	ldr	r0, [r3, #0]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	b2db      	uxtb	r3, r3
 8009080:	461a      	mov	r2, r3
 8009082:	6979      	ldr	r1, [r7, #20]
 8009084:	f00a f9b0 	bl	80133e8 <USB_EPStartXfer>

  return HAL_OK;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3718      	adds	r7, #24
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009092:	b480      	push	{r7}
 8009094:	b083      	sub	sp, #12
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
 800909a:	460b      	mov	r3, r1
 800909c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800909e:	78fb      	ldrb	r3, [r7, #3]
 80090a0:	f003 020f 	and.w	r2, r3, #15
 80090a4:	6879      	ldr	r1, [r7, #4]
 80090a6:	4613      	mov	r3, r2
 80090a8:	00db      	lsls	r3, r3, #3
 80090aa:	4413      	add	r3, r2
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	440b      	add	r3, r1
 80090b0:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80090b4:	681b      	ldr	r3, [r3, #0]
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	370c      	adds	r7, #12
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr

080090c2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80090c2:	b580      	push	{r7, lr}
 80090c4:	b086      	sub	sp, #24
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	60f8      	str	r0, [r7, #12]
 80090ca:	607a      	str	r2, [r7, #4]
 80090cc:	603b      	str	r3, [r7, #0]
 80090ce:	460b      	mov	r3, r1
 80090d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80090d2:	7afb      	ldrb	r3, [r7, #11]
 80090d4:	f003 020f 	and.w	r2, r3, #15
 80090d8:	4613      	mov	r3, r2
 80090da:	00db      	lsls	r3, r3, #3
 80090dc:	4413      	add	r3, r2
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	3338      	adds	r3, #56	; 0x38
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	4413      	add	r3, r2
 80090e6:	3304      	adds	r3, #4
 80090e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	683a      	ldr	r2, [r7, #0]
 80090f4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	2200      	movs	r2, #0
 80090fa:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	2201      	movs	r2, #1
 8009100:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009102:	7afb      	ldrb	r3, [r7, #11]
 8009104:	f003 030f 	and.w	r3, r3, #15
 8009108:	b2da      	uxtb	r2, r3
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	2b01      	cmp	r3, #1
 8009114:	d102      	bne.n	800911c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6818      	ldr	r0, [r3, #0]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	b2db      	uxtb	r3, r3
 8009126:	461a      	mov	r2, r3
 8009128:	6979      	ldr	r1, [r7, #20]
 800912a:	f00a f95d 	bl	80133e8 <USB_EPStartXfer>

  return HAL_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3718      	adds	r7, #24
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	460b      	mov	r3, r1
 8009142:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009144:	78fb      	ldrb	r3, [r7, #3]
 8009146:	f003 020f 	and.w	r2, r3, #15
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	429a      	cmp	r2, r3
 8009150:	d901      	bls.n	8009156 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	e050      	b.n	80091f8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009156:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800915a:	2b00      	cmp	r3, #0
 800915c:	da0f      	bge.n	800917e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800915e:	78fb      	ldrb	r3, [r7, #3]
 8009160:	f003 020f 	and.w	r2, r3, #15
 8009164:	4613      	mov	r3, r2
 8009166:	00db      	lsls	r3, r3, #3
 8009168:	4413      	add	r3, r2
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	3338      	adds	r3, #56	; 0x38
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	4413      	add	r3, r2
 8009172:	3304      	adds	r3, #4
 8009174:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2201      	movs	r2, #1
 800917a:	705a      	strb	r2, [r3, #1]
 800917c:	e00d      	b.n	800919a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800917e:	78fa      	ldrb	r2, [r7, #3]
 8009180:	4613      	mov	r3, r2
 8009182:	00db      	lsls	r3, r3, #3
 8009184:	4413      	add	r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	4413      	add	r3, r2
 8009190:	3304      	adds	r3, #4
 8009192:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2200      	movs	r2, #0
 8009198:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2201      	movs	r2, #1
 800919e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80091a0:	78fb      	ldrb	r3, [r7, #3]
 80091a2:	f003 030f 	and.w	r3, r3, #15
 80091a6:	b2da      	uxtb	r2, r3
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d101      	bne.n	80091ba <HAL_PCD_EP_SetStall+0x82>
 80091b6:	2302      	movs	r3, #2
 80091b8:	e01e      	b.n	80091f8 <HAL_PCD_EP_SetStall+0xc0>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2201      	movs	r2, #1
 80091be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	68f9      	ldr	r1, [r7, #12]
 80091c8:	4618      	mov	r0, r3
 80091ca:	f00a fced 	bl	8013ba8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80091ce:	78fb      	ldrb	r3, [r7, #3]
 80091d0:	f003 030f 	and.w	r3, r3, #15
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10a      	bne.n	80091ee <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6818      	ldr	r0, [r3, #0]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	b2d9      	uxtb	r1, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80091e8:	461a      	mov	r2, r3
 80091ea:	f00a fedf 	bl	8013fac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	460b      	mov	r3, r1
 800920a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800920c:	78fb      	ldrb	r3, [r7, #3]
 800920e:	f003 020f 	and.w	r2, r3, #15
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	429a      	cmp	r2, r3
 8009218:	d901      	bls.n	800921e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	e042      	b.n	80092a4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800921e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009222:	2b00      	cmp	r3, #0
 8009224:	da0f      	bge.n	8009246 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009226:	78fb      	ldrb	r3, [r7, #3]
 8009228:	f003 020f 	and.w	r2, r3, #15
 800922c:	4613      	mov	r3, r2
 800922e:	00db      	lsls	r3, r3, #3
 8009230:	4413      	add	r3, r2
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	3338      	adds	r3, #56	; 0x38
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	4413      	add	r3, r2
 800923a:	3304      	adds	r3, #4
 800923c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2201      	movs	r2, #1
 8009242:	705a      	strb	r2, [r3, #1]
 8009244:	e00f      	b.n	8009266 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009246:	78fb      	ldrb	r3, [r7, #3]
 8009248:	f003 020f 	and.w	r2, r3, #15
 800924c:	4613      	mov	r3, r2
 800924e:	00db      	lsls	r3, r3, #3
 8009250:	4413      	add	r3, r2
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	4413      	add	r3, r2
 800925c:	3304      	adds	r3, #4
 800925e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2200      	movs	r2, #0
 8009264:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2200      	movs	r2, #0
 800926a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800926c:	78fb      	ldrb	r3, [r7, #3]
 800926e:	f003 030f 	and.w	r3, r3, #15
 8009272:	b2da      	uxtb	r2, r3
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800927e:	2b01      	cmp	r3, #1
 8009280:	d101      	bne.n	8009286 <HAL_PCD_EP_ClrStall+0x86>
 8009282:	2302      	movs	r3, #2
 8009284:	e00e      	b.n	80092a4 <HAL_PCD_EP_ClrStall+0xa4>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2201      	movs	r2, #1
 800928a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	68f9      	ldr	r1, [r7, #12]
 8009294:	4618      	mov	r0, r3
 8009296:	f00a fcf5 	bl	8013c84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	460b      	mov	r3, r1
 80092b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80092b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	da0c      	bge.n	80092da <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092c0:	78fb      	ldrb	r3, [r7, #3]
 80092c2:	f003 020f 	and.w	r2, r3, #15
 80092c6:	4613      	mov	r3, r2
 80092c8:	00db      	lsls	r3, r3, #3
 80092ca:	4413      	add	r3, r2
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	3338      	adds	r3, #56	; 0x38
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	4413      	add	r3, r2
 80092d4:	3304      	adds	r3, #4
 80092d6:	60fb      	str	r3, [r7, #12]
 80092d8:	e00c      	b.n	80092f4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80092da:	78fb      	ldrb	r3, [r7, #3]
 80092dc:	f003 020f 	and.w	r2, r3, #15
 80092e0:	4613      	mov	r3, r2
 80092e2:	00db      	lsls	r3, r3, #3
 80092e4:	4413      	add	r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	4413      	add	r3, r2
 80092f0:	3304      	adds	r3, #4
 80092f2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	68f9      	ldr	r1, [r7, #12]
 80092fa:	4618      	mov	r0, r3
 80092fc:	f00a fb14 	bl	8013928 <USB_EPStopXfer>
 8009300:	4603      	mov	r3, r0
 8009302:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009304:	7afb      	ldrb	r3, [r7, #11]
}
 8009306:	4618      	mov	r0, r3
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b08a      	sub	sp, #40	; 0x28
 8009312:	af02      	add	r7, sp, #8
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009322:	683a      	ldr	r2, [r7, #0]
 8009324:	4613      	mov	r3, r2
 8009326:	00db      	lsls	r3, r3, #3
 8009328:	4413      	add	r3, r2
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	3338      	adds	r3, #56	; 0x38
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	4413      	add	r3, r2
 8009332:	3304      	adds	r3, #4
 8009334:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	695a      	ldr	r2, [r3, #20]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	429a      	cmp	r2, r3
 8009340:	d901      	bls.n	8009346 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009342:	2301      	movs	r3, #1
 8009344:	e06c      	b.n	8009420 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	691a      	ldr	r2, [r3, #16]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	695b      	ldr	r3, [r3, #20]
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	69fa      	ldr	r2, [r7, #28]
 8009358:	429a      	cmp	r2, r3
 800935a:	d902      	bls.n	8009362 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	3303      	adds	r3, #3
 8009366:	089b      	lsrs	r3, r3, #2
 8009368:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800936a:	e02b      	b.n	80093c4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	691a      	ldr	r2, [r3, #16]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	695b      	ldr	r3, [r3, #20]
 8009374:	1ad3      	subs	r3, r2, r3
 8009376:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	69fa      	ldr	r2, [r7, #28]
 800937e:	429a      	cmp	r2, r3
 8009380:	d902      	bls.n	8009388 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	3303      	adds	r3, #3
 800938c:	089b      	lsrs	r3, r3, #2
 800938e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	68d9      	ldr	r1, [r3, #12]
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	b2da      	uxtb	r2, r3
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	9300      	str	r3, [sp, #0]
 80093a4:	4603      	mov	r3, r0
 80093a6:	6978      	ldr	r0, [r7, #20]
 80093a8:	f00a fb68 	bl	8013a7c <USB_WritePacket>

    ep->xfer_buff  += len;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	68da      	ldr	r2, [r3, #12]
 80093b0:	69fb      	ldr	r3, [r7, #28]
 80093b2:	441a      	add	r2, r3
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	695a      	ldr	r2, [r3, #20]
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	441a      	add	r2, r3
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	015a      	lsls	r2, r3, #5
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	4413      	add	r3, r2
 80093cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093d0:	699b      	ldr	r3, [r3, #24]
 80093d2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80093d4:	69ba      	ldr	r2, [r7, #24]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d809      	bhi.n	80093ee <PCD_WriteEmptyTxFifo+0xe0>
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	695a      	ldr	r2, [r3, #20]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d203      	bcs.n	80093ee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d1be      	bne.n	800936c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	691a      	ldr	r2, [r3, #16]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	695b      	ldr	r3, [r3, #20]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d811      	bhi.n	800941e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	f003 030f 	and.w	r3, r3, #15
 8009400:	2201      	movs	r2, #1
 8009402:	fa02 f303 	lsl.w	r3, r2, r3
 8009406:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800940e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	43db      	mvns	r3, r3
 8009414:	6939      	ldr	r1, [r7, #16]
 8009416:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800941a:	4013      	ands	r3, r2
 800941c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800941e:	2300      	movs	r3, #0
}
 8009420:	4618      	mov	r0, r3
 8009422:	3720      	adds	r7, #32
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b088      	sub	sp, #32
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	333c      	adds	r3, #60	; 0x3c
 8009440:	3304      	adds	r3, #4
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	015a      	lsls	r2, r3, #5
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	4413      	add	r3, r2
 800944e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	2b01      	cmp	r3, #1
 800945c:	d17b      	bne.n	8009556 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	f003 0308 	and.w	r3, r3, #8
 8009464:	2b00      	cmp	r3, #0
 8009466:	d015      	beq.n	8009494 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	4a61      	ldr	r2, [pc, #388]	; (80095f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800946c:	4293      	cmp	r3, r2
 800946e:	f240 80b9 	bls.w	80095e4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009478:	2b00      	cmp	r3, #0
 800947a:	f000 80b3 	beq.w	80095e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	015a      	lsls	r2, r3, #5
 8009482:	69bb      	ldr	r3, [r7, #24]
 8009484:	4413      	add	r3, r2
 8009486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800948a:	461a      	mov	r2, r3
 800948c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009490:	6093      	str	r3, [r2, #8]
 8009492:	e0a7      	b.n	80095e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	f003 0320 	and.w	r3, r3, #32
 800949a:	2b00      	cmp	r3, #0
 800949c:	d009      	beq.n	80094b2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	015a      	lsls	r2, r3, #5
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	4413      	add	r3, r2
 80094a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094aa:	461a      	mov	r2, r3
 80094ac:	2320      	movs	r3, #32
 80094ae:	6093      	str	r3, [r2, #8]
 80094b0:	e098      	b.n	80095e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f040 8093 	bne.w	80095e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	4a4b      	ldr	r2, [pc, #300]	; (80095f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d90f      	bls.n	80094e6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d00a      	beq.n	80094e6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	015a      	lsls	r2, r3, #5
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	4413      	add	r3, r2
 80094d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094dc:	461a      	mov	r2, r3
 80094de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094e2:	6093      	str	r3, [r2, #8]
 80094e4:	e07e      	b.n	80095e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80094e6:	683a      	ldr	r2, [r7, #0]
 80094e8:	4613      	mov	r3, r2
 80094ea:	00db      	lsls	r3, r3, #3
 80094ec:	4413      	add	r3, r2
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	4413      	add	r3, r2
 80094f8:	3304      	adds	r3, #4
 80094fa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6a1a      	ldr	r2, [r3, #32]
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	0159      	lsls	r1, r3, #5
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	440b      	add	r3, r1
 8009508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800950c:	691b      	ldr	r3, [r3, #16]
 800950e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009512:	1ad2      	subs	r2, r2, r3
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d114      	bne.n	8009548 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d109      	bne.n	800953a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6818      	ldr	r0, [r3, #0]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009530:	461a      	mov	r2, r3
 8009532:	2101      	movs	r1, #1
 8009534:	f00a fd3a 	bl	8013fac <USB_EP0_OutStart>
 8009538:	e006      	b.n	8009548 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	68da      	ldr	r2, [r3, #12]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	695b      	ldr	r3, [r3, #20]
 8009542:	441a      	add	r2, r3
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	b2db      	uxtb	r3, r3
 800954c:	4619      	mov	r1, r3
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f00d faa0 	bl	8016a94 <HAL_PCD_DataOutStageCallback>
 8009554:	e046      	b.n	80095e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	4a26      	ldr	r2, [pc, #152]	; (80095f4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d124      	bne.n	80095a8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00a      	beq.n	800957e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	015a      	lsls	r2, r3, #5
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	4413      	add	r3, r2
 8009570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009574:	461a      	mov	r2, r3
 8009576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800957a:	6093      	str	r3, [r2, #8]
 800957c:	e032      	b.n	80095e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	f003 0320 	and.w	r3, r3, #32
 8009584:	2b00      	cmp	r3, #0
 8009586:	d008      	beq.n	800959a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	015a      	lsls	r2, r3, #5
 800958c:	69bb      	ldr	r3, [r7, #24]
 800958e:	4413      	add	r3, r2
 8009590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009594:	461a      	mov	r2, r3
 8009596:	2320      	movs	r3, #32
 8009598:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	b2db      	uxtb	r3, r3
 800959e:	4619      	mov	r1, r3
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f00d fa77 	bl	8016a94 <HAL_PCD_DataOutStageCallback>
 80095a6:	e01d      	b.n	80095e4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d114      	bne.n	80095d8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80095ae:	6879      	ldr	r1, [r7, #4]
 80095b0:	683a      	ldr	r2, [r7, #0]
 80095b2:	4613      	mov	r3, r2
 80095b4:	00db      	lsls	r3, r3, #3
 80095b6:	4413      	add	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	440b      	add	r3, r1
 80095bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d108      	bne.n	80095d8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6818      	ldr	r0, [r3, #0]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80095d0:	461a      	mov	r2, r3
 80095d2:	2100      	movs	r1, #0
 80095d4:	f00a fcea 	bl	8013fac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	4619      	mov	r1, r3
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f00d fa58 	bl	8016a94 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3720      	adds	r7, #32
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	4f54300a 	.word	0x4f54300a
 80095f4:	4f54310a 	.word	0x4f54310a

080095f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b086      	sub	sp, #24
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	333c      	adds	r3, #60	; 0x3c
 8009610:	3304      	adds	r3, #4
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	015a      	lsls	r2, r3, #5
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	4413      	add	r3, r2
 800961e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	4a15      	ldr	r2, [pc, #84]	; (8009680 <PCD_EP_OutSetupPacket_int+0x88>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d90e      	bls.n	800964c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009634:	2b00      	cmp	r3, #0
 8009636:	d009      	beq.n	800964c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	015a      	lsls	r2, r3, #5
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	4413      	add	r3, r2
 8009640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009644:	461a      	mov	r2, r3
 8009646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800964a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f00d fa0f 	bl	8016a70 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	4a0a      	ldr	r2, [pc, #40]	; (8009680 <PCD_EP_OutSetupPacket_int+0x88>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d90c      	bls.n	8009674 <PCD_EP_OutSetupPacket_int+0x7c>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	2b01      	cmp	r3, #1
 8009660:	d108      	bne.n	8009674 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6818      	ldr	r0, [r3, #0]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800966c:	461a      	mov	r2, r3
 800966e:	2101      	movs	r1, #1
 8009670:	f00a fc9c 	bl	8013fac <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009674:	2300      	movs	r3, #0
}
 8009676:	4618      	mov	r0, r3
 8009678:	3718      	adds	r7, #24
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	4f54300a 	.word	0x4f54300a

08009684 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	460b      	mov	r3, r1
 800968e:	70fb      	strb	r3, [r7, #3]
 8009690:	4613      	mov	r3, r2
 8009692:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800969c:	78fb      	ldrb	r3, [r7, #3]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d107      	bne.n	80096b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80096a2:	883b      	ldrh	r3, [r7, #0]
 80096a4:	0419      	lsls	r1, r3, #16
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	68ba      	ldr	r2, [r7, #8]
 80096ac:	430a      	orrs	r2, r1
 80096ae:	629a      	str	r2, [r3, #40]	; 0x28
 80096b0:	e028      	b.n	8009704 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b8:	0c1b      	lsrs	r3, r3, #16
 80096ba:	68ba      	ldr	r2, [r7, #8]
 80096bc:	4413      	add	r3, r2
 80096be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80096c0:	2300      	movs	r3, #0
 80096c2:	73fb      	strb	r3, [r7, #15]
 80096c4:	e00d      	b.n	80096e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	7bfb      	ldrb	r3, [r7, #15]
 80096cc:	3340      	adds	r3, #64	; 0x40
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	4413      	add	r3, r2
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	0c1b      	lsrs	r3, r3, #16
 80096d6:	68ba      	ldr	r2, [r7, #8]
 80096d8:	4413      	add	r3, r2
 80096da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
 80096de:	3301      	adds	r3, #1
 80096e0:	73fb      	strb	r3, [r7, #15]
 80096e2:	7bfa      	ldrb	r2, [r7, #15]
 80096e4:	78fb      	ldrb	r3, [r7, #3]
 80096e6:	3b01      	subs	r3, #1
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d3ec      	bcc.n	80096c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80096ec:	883b      	ldrh	r3, [r7, #0]
 80096ee:	0418      	lsls	r0, r3, #16
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6819      	ldr	r1, [r3, #0]
 80096f4:	78fb      	ldrb	r3, [r7, #3]
 80096f6:	3b01      	subs	r3, #1
 80096f8:	68ba      	ldr	r2, [r7, #8]
 80096fa:	4302      	orrs	r2, r0
 80096fc:	3340      	adds	r3, #64	; 0x40
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	440b      	add	r3, r1
 8009702:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3714      	adds	r7, #20
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr

08009712 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009712:	b480      	push	{r7}
 8009714:	b083      	sub	sp, #12
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
 800971a:	460b      	mov	r3, r1
 800971c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	887a      	ldrh	r2, [r7, #2]
 8009724:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009726:	2300      	movs	r3, #0
}
 8009728:	4618      	mov	r0, r3
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2201      	movs	r2, #1
 8009746:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	699b      	ldr	r3, [r3, #24]
 8009756:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009762:	4b05      	ldr	r3, [pc, #20]	; (8009778 <HAL_PCDEx_ActivateLPM+0x44>)
 8009764:	4313      	orrs	r3, r2
 8009766:	68fa      	ldr	r2, [r7, #12]
 8009768:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800976a:	2300      	movs	r3, #0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3714      	adds	r7, #20
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr
 8009778:	10000003 	.word	0x10000003

0800977c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	460b      	mov	r3, r1
 8009786:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009788:	bf00      	nop
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800979c:	4b19      	ldr	r3, [pc, #100]	; (8009804 <HAL_PWREx_ConfigSupply+0x70>)
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	f003 0304 	and.w	r3, r3, #4
 80097a4:	2b04      	cmp	r3, #4
 80097a6:	d00a      	beq.n	80097be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80097a8:	4b16      	ldr	r3, [pc, #88]	; (8009804 <HAL_PWREx_ConfigSupply+0x70>)
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	f003 0307 	and.w	r3, r3, #7
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d001      	beq.n	80097ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80097b6:	2301      	movs	r3, #1
 80097b8:	e01f      	b.n	80097fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80097ba:	2300      	movs	r3, #0
 80097bc:	e01d      	b.n	80097fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80097be:	4b11      	ldr	r3, [pc, #68]	; (8009804 <HAL_PWREx_ConfigSupply+0x70>)
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	f023 0207 	bic.w	r2, r3, #7
 80097c6:	490f      	ldr	r1, [pc, #60]	; (8009804 <HAL_PWREx_ConfigSupply+0x70>)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4313      	orrs	r3, r2
 80097cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80097ce:	f7fa f90f 	bl	80039f0 <HAL_GetTick>
 80097d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80097d4:	e009      	b.n	80097ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80097d6:	f7fa f90b 	bl	80039f0 <HAL_GetTick>
 80097da:	4602      	mov	r2, r0
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	1ad3      	subs	r3, r2, r3
 80097e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097e4:	d901      	bls.n	80097ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	e007      	b.n	80097fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80097ea:	4b06      	ldr	r3, [pc, #24]	; (8009804 <HAL_PWREx_ConfigSupply+0x70>)
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80097f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097f6:	d1ee      	bne.n	80097d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3710      	adds	r7, #16
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	58024800 	.word	0x58024800

08009808 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009808:	b480      	push	{r7}
 800980a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800980c:	4b05      	ldr	r3, [pc, #20]	; (8009824 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	4a04      	ldr	r2, [pc, #16]	; (8009824 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009816:	60d3      	str	r3, [r2, #12]
}
 8009818:	bf00      	nop
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	58024800 	.word	0x58024800

08009828 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b08c      	sub	sp, #48	; 0x30
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d101      	bne.n	800983a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	e3c8      	b.n	8009fcc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 0301 	and.w	r3, r3, #1
 8009842:	2b00      	cmp	r3, #0
 8009844:	f000 8087 	beq.w	8009956 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009848:	4b88      	ldr	r3, [pc, #544]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009850:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009852:	4b86      	ldr	r3, [pc, #536]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 8009854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009856:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800985a:	2b10      	cmp	r3, #16
 800985c:	d007      	beq.n	800986e <HAL_RCC_OscConfig+0x46>
 800985e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009860:	2b18      	cmp	r3, #24
 8009862:	d110      	bne.n	8009886 <HAL_RCC_OscConfig+0x5e>
 8009864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009866:	f003 0303 	and.w	r3, r3, #3
 800986a:	2b02      	cmp	r3, #2
 800986c:	d10b      	bne.n	8009886 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800986e:	4b7f      	ldr	r3, [pc, #508]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009876:	2b00      	cmp	r3, #0
 8009878:	d06c      	beq.n	8009954 <HAL_RCC_OscConfig+0x12c>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d168      	bne.n	8009954 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	e3a2      	b.n	8009fcc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800988e:	d106      	bne.n	800989e <HAL_RCC_OscConfig+0x76>
 8009890:	4b76      	ldr	r3, [pc, #472]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a75      	ldr	r2, [pc, #468]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 8009896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800989a:	6013      	str	r3, [r2, #0]
 800989c:	e02e      	b.n	80098fc <HAL_RCC_OscConfig+0xd4>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d10c      	bne.n	80098c0 <HAL_RCC_OscConfig+0x98>
 80098a6:	4b71      	ldr	r3, [pc, #452]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a70      	ldr	r2, [pc, #448]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 80098ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098b0:	6013      	str	r3, [r2, #0]
 80098b2:	4b6e      	ldr	r3, [pc, #440]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a6d      	ldr	r2, [pc, #436]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 80098b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098bc:	6013      	str	r3, [r2, #0]
 80098be:	e01d      	b.n	80098fc <HAL_RCC_OscConfig+0xd4>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80098c8:	d10c      	bne.n	80098e4 <HAL_RCC_OscConfig+0xbc>
 80098ca:	4b68      	ldr	r3, [pc, #416]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a67      	ldr	r2, [pc, #412]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 80098d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80098d4:	6013      	str	r3, [r2, #0]
 80098d6:	4b65      	ldr	r3, [pc, #404]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a64      	ldr	r2, [pc, #400]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 80098dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098e0:	6013      	str	r3, [r2, #0]
 80098e2:	e00b      	b.n	80098fc <HAL_RCC_OscConfig+0xd4>
 80098e4:	4b61      	ldr	r3, [pc, #388]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a60      	ldr	r2, [pc, #384]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 80098ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098ee:	6013      	str	r3, [r2, #0]
 80098f0:	4b5e      	ldr	r3, [pc, #376]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a5d      	ldr	r2, [pc, #372]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 80098f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d013      	beq.n	800992c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009904:	f7fa f874 	bl	80039f0 <HAL_GetTick>
 8009908:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800990a:	e008      	b.n	800991e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800990c:	f7fa f870 	bl	80039f0 <HAL_GetTick>
 8009910:	4602      	mov	r2, r0
 8009912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009914:	1ad3      	subs	r3, r2, r3
 8009916:	2b64      	cmp	r3, #100	; 0x64
 8009918:	d901      	bls.n	800991e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800991a:	2303      	movs	r3, #3
 800991c:	e356      	b.n	8009fcc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800991e:	4b53      	ldr	r3, [pc, #332]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009926:	2b00      	cmp	r3, #0
 8009928:	d0f0      	beq.n	800990c <HAL_RCC_OscConfig+0xe4>
 800992a:	e014      	b.n	8009956 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800992c:	f7fa f860 	bl	80039f0 <HAL_GetTick>
 8009930:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009932:	e008      	b.n	8009946 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009934:	f7fa f85c 	bl	80039f0 <HAL_GetTick>
 8009938:	4602      	mov	r2, r0
 800993a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993c:	1ad3      	subs	r3, r2, r3
 800993e:	2b64      	cmp	r3, #100	; 0x64
 8009940:	d901      	bls.n	8009946 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009942:	2303      	movs	r3, #3
 8009944:	e342      	b.n	8009fcc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009946:	4b49      	ldr	r3, [pc, #292]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1f0      	bne.n	8009934 <HAL_RCC_OscConfig+0x10c>
 8009952:	e000      	b.n	8009956 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f003 0302 	and.w	r3, r3, #2
 800995e:	2b00      	cmp	r3, #0
 8009960:	f000 808c 	beq.w	8009a7c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009964:	4b41      	ldr	r3, [pc, #260]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 8009966:	691b      	ldr	r3, [r3, #16]
 8009968:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800996c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800996e:	4b3f      	ldr	r3, [pc, #252]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 8009970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009972:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009974:	6a3b      	ldr	r3, [r7, #32]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d007      	beq.n	800998a <HAL_RCC_OscConfig+0x162>
 800997a:	6a3b      	ldr	r3, [r7, #32]
 800997c:	2b18      	cmp	r3, #24
 800997e:	d137      	bne.n	80099f0 <HAL_RCC_OscConfig+0x1c8>
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	f003 0303 	and.w	r3, r3, #3
 8009986:	2b00      	cmp	r3, #0
 8009988:	d132      	bne.n	80099f0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800998a:	4b38      	ldr	r3, [pc, #224]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f003 0304 	and.w	r3, r3, #4
 8009992:	2b00      	cmp	r3, #0
 8009994:	d005      	beq.n	80099a2 <HAL_RCC_OscConfig+0x17a>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d101      	bne.n	80099a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	e314      	b.n	8009fcc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80099a2:	4b32      	ldr	r3, [pc, #200]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f023 0219 	bic.w	r2, r3, #25
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	492f      	ldr	r1, [pc, #188]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 80099b0:	4313      	orrs	r3, r2
 80099b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099b4:	f7fa f81c 	bl	80039f0 <HAL_GetTick>
 80099b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80099ba:	e008      	b.n	80099ce <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099bc:	f7fa f818 	bl	80039f0 <HAL_GetTick>
 80099c0:	4602      	mov	r2, r0
 80099c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c4:	1ad3      	subs	r3, r2, r3
 80099c6:	2b02      	cmp	r3, #2
 80099c8:	d901      	bls.n	80099ce <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80099ca:	2303      	movs	r3, #3
 80099cc:	e2fe      	b.n	8009fcc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80099ce:	4b27      	ldr	r3, [pc, #156]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f003 0304 	and.w	r3, r3, #4
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d0f0      	beq.n	80099bc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099da:	4b24      	ldr	r3, [pc, #144]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	061b      	lsls	r3, r3, #24
 80099e8:	4920      	ldr	r1, [pc, #128]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 80099ea:	4313      	orrs	r3, r2
 80099ec:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80099ee:	e045      	b.n	8009a7c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d026      	beq.n	8009a46 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80099f8:	4b1c      	ldr	r3, [pc, #112]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f023 0219 	bic.w	r2, r3, #25
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	4919      	ldr	r1, [pc, #100]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 8009a06:	4313      	orrs	r3, r2
 8009a08:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a0a:	f7f9 fff1 	bl	80039f0 <HAL_GetTick>
 8009a0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a10:	e008      	b.n	8009a24 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a12:	f7f9 ffed 	bl	80039f0 <HAL_GetTick>
 8009a16:	4602      	mov	r2, r0
 8009a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1a:	1ad3      	subs	r3, r2, r3
 8009a1c:	2b02      	cmp	r3, #2
 8009a1e:	d901      	bls.n	8009a24 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009a20:	2303      	movs	r3, #3
 8009a22:	e2d3      	b.n	8009fcc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a24:	4b11      	ldr	r3, [pc, #68]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f003 0304 	and.w	r3, r3, #4
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d0f0      	beq.n	8009a12 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a30:	4b0e      	ldr	r3, [pc, #56]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	061b      	lsls	r3, r3, #24
 8009a3e:	490b      	ldr	r1, [pc, #44]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 8009a40:	4313      	orrs	r3, r2
 8009a42:	604b      	str	r3, [r1, #4]
 8009a44:	e01a      	b.n	8009a7c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009a46:	4b09      	ldr	r3, [pc, #36]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a08      	ldr	r2, [pc, #32]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 8009a4c:	f023 0301 	bic.w	r3, r3, #1
 8009a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a52:	f7f9 ffcd 	bl	80039f0 <HAL_GetTick>
 8009a56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009a58:	e00a      	b.n	8009a70 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a5a:	f7f9 ffc9 	bl	80039f0 <HAL_GetTick>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a62:	1ad3      	subs	r3, r2, r3
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	d903      	bls.n	8009a70 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009a68:	2303      	movs	r3, #3
 8009a6a:	e2af      	b.n	8009fcc <HAL_RCC_OscConfig+0x7a4>
 8009a6c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009a70:	4b96      	ldr	r3, [pc, #600]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f003 0304 	and.w	r3, r3, #4
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d1ee      	bne.n	8009a5a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f003 0310 	and.w	r3, r3, #16
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d06a      	beq.n	8009b5e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a88:	4b90      	ldr	r3, [pc, #576]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009a8a:	691b      	ldr	r3, [r3, #16]
 8009a8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a90:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a92:	4b8e      	ldr	r3, [pc, #568]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a96:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009a98:	69bb      	ldr	r3, [r7, #24]
 8009a9a:	2b08      	cmp	r3, #8
 8009a9c:	d007      	beq.n	8009aae <HAL_RCC_OscConfig+0x286>
 8009a9e:	69bb      	ldr	r3, [r7, #24]
 8009aa0:	2b18      	cmp	r3, #24
 8009aa2:	d11b      	bne.n	8009adc <HAL_RCC_OscConfig+0x2b4>
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	f003 0303 	and.w	r3, r3, #3
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d116      	bne.n	8009adc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009aae:	4b87      	ldr	r3, [pc, #540]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d005      	beq.n	8009ac6 <HAL_RCC_OscConfig+0x29e>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	69db      	ldr	r3, [r3, #28]
 8009abe:	2b80      	cmp	r3, #128	; 0x80
 8009ac0:	d001      	beq.n	8009ac6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e282      	b.n	8009fcc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009ac6:	4b81      	ldr	r3, [pc, #516]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6a1b      	ldr	r3, [r3, #32]
 8009ad2:	061b      	lsls	r3, r3, #24
 8009ad4:	497d      	ldr	r1, [pc, #500]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009ada:	e040      	b.n	8009b5e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	69db      	ldr	r3, [r3, #28]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d023      	beq.n	8009b2c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009ae4:	4b79      	ldr	r3, [pc, #484]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a78      	ldr	r2, [pc, #480]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009af0:	f7f9 ff7e 	bl	80039f0 <HAL_GetTick>
 8009af4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009af6:	e008      	b.n	8009b0a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009af8:	f7f9 ff7a 	bl	80039f0 <HAL_GetTick>
 8009afc:	4602      	mov	r2, r0
 8009afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b00:	1ad3      	subs	r3, r2, r3
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	d901      	bls.n	8009b0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009b06:	2303      	movs	r3, #3
 8009b08:	e260      	b.n	8009fcc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009b0a:	4b70      	ldr	r3, [pc, #448]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d0f0      	beq.n	8009af8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b16:	4b6d      	ldr	r3, [pc, #436]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6a1b      	ldr	r3, [r3, #32]
 8009b22:	061b      	lsls	r3, r3, #24
 8009b24:	4969      	ldr	r1, [pc, #420]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009b26:	4313      	orrs	r3, r2
 8009b28:	60cb      	str	r3, [r1, #12]
 8009b2a:	e018      	b.n	8009b5e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009b2c:	4b67      	ldr	r3, [pc, #412]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a66      	ldr	r2, [pc, #408]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009b32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b38:	f7f9 ff5a 	bl	80039f0 <HAL_GetTick>
 8009b3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009b3e:	e008      	b.n	8009b52 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009b40:	f7f9 ff56 	bl	80039f0 <HAL_GetTick>
 8009b44:	4602      	mov	r2, r0
 8009b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b48:	1ad3      	subs	r3, r2, r3
 8009b4a:	2b02      	cmp	r3, #2
 8009b4c:	d901      	bls.n	8009b52 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009b4e:	2303      	movs	r3, #3
 8009b50:	e23c      	b.n	8009fcc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009b52:	4b5e      	ldr	r3, [pc, #376]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d1f0      	bne.n	8009b40 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f003 0308 	and.w	r3, r3, #8
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d036      	beq.n	8009bd8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	695b      	ldr	r3, [r3, #20]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d019      	beq.n	8009ba6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b72:	4b56      	ldr	r3, [pc, #344]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b76:	4a55      	ldr	r2, [pc, #340]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009b78:	f043 0301 	orr.w	r3, r3, #1
 8009b7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b7e:	f7f9 ff37 	bl	80039f0 <HAL_GetTick>
 8009b82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009b84:	e008      	b.n	8009b98 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009b86:	f7f9 ff33 	bl	80039f0 <HAL_GetTick>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	d901      	bls.n	8009b98 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009b94:	2303      	movs	r3, #3
 8009b96:	e219      	b.n	8009fcc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009b98:	4b4c      	ldr	r3, [pc, #304]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b9c:	f003 0302 	and.w	r3, r3, #2
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d0f0      	beq.n	8009b86 <HAL_RCC_OscConfig+0x35e>
 8009ba4:	e018      	b.n	8009bd8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009ba6:	4b49      	ldr	r3, [pc, #292]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009baa:	4a48      	ldr	r2, [pc, #288]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009bac:	f023 0301 	bic.w	r3, r3, #1
 8009bb0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bb2:	f7f9 ff1d 	bl	80039f0 <HAL_GetTick>
 8009bb6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009bb8:	e008      	b.n	8009bcc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009bba:	f7f9 ff19 	bl	80039f0 <HAL_GetTick>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc2:	1ad3      	subs	r3, r2, r3
 8009bc4:	2b02      	cmp	r3, #2
 8009bc6:	d901      	bls.n	8009bcc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009bc8:	2303      	movs	r3, #3
 8009bca:	e1ff      	b.n	8009fcc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009bcc:	4b3f      	ldr	r3, [pc, #252]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bd0:	f003 0302 	and.w	r3, r3, #2
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d1f0      	bne.n	8009bba <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f003 0320 	and.w	r3, r3, #32
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d036      	beq.n	8009c52 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	699b      	ldr	r3, [r3, #24]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d019      	beq.n	8009c20 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009bec:	4b37      	ldr	r3, [pc, #220]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a36      	ldr	r2, [pc, #216]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009bf2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009bf6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009bf8:	f7f9 fefa 	bl	80039f0 <HAL_GetTick>
 8009bfc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009bfe:	e008      	b.n	8009c12 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c00:	f7f9 fef6 	bl	80039f0 <HAL_GetTick>
 8009c04:	4602      	mov	r2, r0
 8009c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c08:	1ad3      	subs	r3, r2, r3
 8009c0a:	2b02      	cmp	r3, #2
 8009c0c:	d901      	bls.n	8009c12 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009c0e:	2303      	movs	r3, #3
 8009c10:	e1dc      	b.n	8009fcc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009c12:	4b2e      	ldr	r3, [pc, #184]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d0f0      	beq.n	8009c00 <HAL_RCC_OscConfig+0x3d8>
 8009c1e:	e018      	b.n	8009c52 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009c20:	4b2a      	ldr	r3, [pc, #168]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a29      	ldr	r2, [pc, #164]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009c26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c2a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009c2c:	f7f9 fee0 	bl	80039f0 <HAL_GetTick>
 8009c30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009c32:	e008      	b.n	8009c46 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c34:	f7f9 fedc 	bl	80039f0 <HAL_GetTick>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3c:	1ad3      	subs	r3, r2, r3
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	d901      	bls.n	8009c46 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009c42:	2303      	movs	r3, #3
 8009c44:	e1c2      	b.n	8009fcc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009c46:	4b21      	ldr	r3, [pc, #132]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1f0      	bne.n	8009c34 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f003 0304 	and.w	r3, r3, #4
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	f000 8086 	beq.w	8009d6c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009c60:	4b1b      	ldr	r3, [pc, #108]	; (8009cd0 <HAL_RCC_OscConfig+0x4a8>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a1a      	ldr	r2, [pc, #104]	; (8009cd0 <HAL_RCC_OscConfig+0x4a8>)
 8009c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009c6c:	f7f9 fec0 	bl	80039f0 <HAL_GetTick>
 8009c70:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c72:	e008      	b.n	8009c86 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c74:	f7f9 febc 	bl	80039f0 <HAL_GetTick>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7c:	1ad3      	subs	r3, r2, r3
 8009c7e:	2b64      	cmp	r3, #100	; 0x64
 8009c80:	d901      	bls.n	8009c86 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009c82:	2303      	movs	r3, #3
 8009c84:	e1a2      	b.n	8009fcc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c86:	4b12      	ldr	r3, [pc, #72]	; (8009cd0 <HAL_RCC_OscConfig+0x4a8>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d0f0      	beq.n	8009c74 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d106      	bne.n	8009ca8 <HAL_RCC_OscConfig+0x480>
 8009c9a:	4b0c      	ldr	r3, [pc, #48]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c9e:	4a0b      	ldr	r2, [pc, #44]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009ca0:	f043 0301 	orr.w	r3, r3, #1
 8009ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8009ca6:	e032      	b.n	8009d0e <HAL_RCC_OscConfig+0x4e6>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d111      	bne.n	8009cd4 <HAL_RCC_OscConfig+0x4ac>
 8009cb0:	4b06      	ldr	r3, [pc, #24]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cb4:	4a05      	ldr	r2, [pc, #20]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009cb6:	f023 0301 	bic.w	r3, r3, #1
 8009cba:	6713      	str	r3, [r2, #112]	; 0x70
 8009cbc:	4b03      	ldr	r3, [pc, #12]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cc0:	4a02      	ldr	r2, [pc, #8]	; (8009ccc <HAL_RCC_OscConfig+0x4a4>)
 8009cc2:	f023 0304 	bic.w	r3, r3, #4
 8009cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8009cc8:	e021      	b.n	8009d0e <HAL_RCC_OscConfig+0x4e6>
 8009cca:	bf00      	nop
 8009ccc:	58024400 	.word	0x58024400
 8009cd0:	58024800 	.word	0x58024800
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	2b05      	cmp	r3, #5
 8009cda:	d10c      	bne.n	8009cf6 <HAL_RCC_OscConfig+0x4ce>
 8009cdc:	4b83      	ldr	r3, [pc, #524]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ce0:	4a82      	ldr	r2, [pc, #520]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009ce2:	f043 0304 	orr.w	r3, r3, #4
 8009ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8009ce8:	4b80      	ldr	r3, [pc, #512]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cec:	4a7f      	ldr	r2, [pc, #508]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009cee:	f043 0301 	orr.w	r3, r3, #1
 8009cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8009cf4:	e00b      	b.n	8009d0e <HAL_RCC_OscConfig+0x4e6>
 8009cf6:	4b7d      	ldr	r3, [pc, #500]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cfa:	4a7c      	ldr	r2, [pc, #496]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009cfc:	f023 0301 	bic.w	r3, r3, #1
 8009d00:	6713      	str	r3, [r2, #112]	; 0x70
 8009d02:	4b7a      	ldr	r3, [pc, #488]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d06:	4a79      	ldr	r2, [pc, #484]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009d08:	f023 0304 	bic.w	r3, r3, #4
 8009d0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d015      	beq.n	8009d42 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d16:	f7f9 fe6b 	bl	80039f0 <HAL_GetTick>
 8009d1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d1c:	e00a      	b.n	8009d34 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d1e:	f7f9 fe67 	bl	80039f0 <HAL_GetTick>
 8009d22:	4602      	mov	r2, r0
 8009d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d26:	1ad3      	subs	r3, r2, r3
 8009d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d901      	bls.n	8009d34 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009d30:	2303      	movs	r3, #3
 8009d32:	e14b      	b.n	8009fcc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d34:	4b6d      	ldr	r3, [pc, #436]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d38:	f003 0302 	and.w	r3, r3, #2
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d0ee      	beq.n	8009d1e <HAL_RCC_OscConfig+0x4f6>
 8009d40:	e014      	b.n	8009d6c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d42:	f7f9 fe55 	bl	80039f0 <HAL_GetTick>
 8009d46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009d48:	e00a      	b.n	8009d60 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d4a:	f7f9 fe51 	bl	80039f0 <HAL_GetTick>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d52:	1ad3      	subs	r3, r2, r3
 8009d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d901      	bls.n	8009d60 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009d5c:	2303      	movs	r3, #3
 8009d5e:	e135      	b.n	8009fcc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009d60:	4b62      	ldr	r3, [pc, #392]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d64:	f003 0302 	and.w	r3, r3, #2
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1ee      	bne.n	8009d4a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	f000 812a 	beq.w	8009fca <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009d76:	4b5d      	ldr	r3, [pc, #372]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009d78:	691b      	ldr	r3, [r3, #16]
 8009d7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d7e:	2b18      	cmp	r3, #24
 8009d80:	f000 80ba 	beq.w	8009ef8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d88:	2b02      	cmp	r3, #2
 8009d8a:	f040 8095 	bne.w	8009eb8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d8e:	4b57      	ldr	r3, [pc, #348]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a56      	ldr	r2, [pc, #344]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009d94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d9a:	f7f9 fe29 	bl	80039f0 <HAL_GetTick>
 8009d9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009da0:	e008      	b.n	8009db4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009da2:	f7f9 fe25 	bl	80039f0 <HAL_GetTick>
 8009da6:	4602      	mov	r2, r0
 8009da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009daa:	1ad3      	subs	r3, r2, r3
 8009dac:	2b02      	cmp	r3, #2
 8009dae:	d901      	bls.n	8009db4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009db0:	2303      	movs	r3, #3
 8009db2:	e10b      	b.n	8009fcc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009db4:	4b4d      	ldr	r3, [pc, #308]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d1f0      	bne.n	8009da2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009dc0:	4b4a      	ldr	r3, [pc, #296]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009dc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009dc4:	4b4a      	ldr	r3, [pc, #296]	; (8009ef0 <HAL_RCC_OscConfig+0x6c8>)
 8009dc6:	4013      	ands	r3, r2
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009dd0:	0112      	lsls	r2, r2, #4
 8009dd2:	430a      	orrs	r2, r1
 8009dd4:	4945      	ldr	r1, [pc, #276]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	628b      	str	r3, [r1, #40]	; 0x28
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dde:	3b01      	subs	r3, #1
 8009de0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009de8:	3b01      	subs	r3, #1
 8009dea:	025b      	lsls	r3, r3, #9
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	431a      	orrs	r2, r3
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df4:	3b01      	subs	r3, #1
 8009df6:	041b      	lsls	r3, r3, #16
 8009df8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009dfc:	431a      	orrs	r2, r3
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e02:	3b01      	subs	r3, #1
 8009e04:	061b      	lsls	r3, r3, #24
 8009e06:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009e0a:	4938      	ldr	r1, [pc, #224]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009e10:	4b36      	ldr	r3, [pc, #216]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e14:	4a35      	ldr	r2, [pc, #212]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009e16:	f023 0301 	bic.w	r3, r3, #1
 8009e1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009e1c:	4b33      	ldr	r3, [pc, #204]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009e1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e20:	4b34      	ldr	r3, [pc, #208]	; (8009ef4 <HAL_RCC_OscConfig+0x6cc>)
 8009e22:	4013      	ands	r3, r2
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009e28:	00d2      	lsls	r2, r2, #3
 8009e2a:	4930      	ldr	r1, [pc, #192]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009e30:	4b2e      	ldr	r3, [pc, #184]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e34:	f023 020c 	bic.w	r2, r3, #12
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e3c:	492b      	ldr	r1, [pc, #172]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009e42:	4b2a      	ldr	r3, [pc, #168]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e46:	f023 0202 	bic.w	r2, r3, #2
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e4e:	4927      	ldr	r1, [pc, #156]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009e50:	4313      	orrs	r3, r2
 8009e52:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009e54:	4b25      	ldr	r3, [pc, #148]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e58:	4a24      	ldr	r2, [pc, #144]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e60:	4b22      	ldr	r3, [pc, #136]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e64:	4a21      	ldr	r2, [pc, #132]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009e6c:	4b1f      	ldr	r3, [pc, #124]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e70:	4a1e      	ldr	r2, [pc, #120]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009e72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009e78:	4b1c      	ldr	r3, [pc, #112]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7c:	4a1b      	ldr	r2, [pc, #108]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009e7e:	f043 0301 	orr.w	r3, r3, #1
 8009e82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e84:	4b19      	ldr	r3, [pc, #100]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a18      	ldr	r2, [pc, #96]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e90:	f7f9 fdae 	bl	80039f0 <HAL_GetTick>
 8009e94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009e96:	e008      	b.n	8009eaa <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e98:	f7f9 fdaa 	bl	80039f0 <HAL_GetTick>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea0:	1ad3      	subs	r3, r2, r3
 8009ea2:	2b02      	cmp	r3, #2
 8009ea4:	d901      	bls.n	8009eaa <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009ea6:	2303      	movs	r3, #3
 8009ea8:	e090      	b.n	8009fcc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009eaa:	4b10      	ldr	r3, [pc, #64]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d0f0      	beq.n	8009e98 <HAL_RCC_OscConfig+0x670>
 8009eb6:	e088      	b.n	8009fca <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009eb8:	4b0c      	ldr	r3, [pc, #48]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a0b      	ldr	r2, [pc, #44]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009ebe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ec4:	f7f9 fd94 	bl	80039f0 <HAL_GetTick>
 8009ec8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009eca:	e008      	b.n	8009ede <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ecc:	f7f9 fd90 	bl	80039f0 <HAL_GetTick>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed4:	1ad3      	subs	r3, r2, r3
 8009ed6:	2b02      	cmp	r3, #2
 8009ed8:	d901      	bls.n	8009ede <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009eda:	2303      	movs	r3, #3
 8009edc:	e076      	b.n	8009fcc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009ede:	4b03      	ldr	r3, [pc, #12]	; (8009eec <HAL_RCC_OscConfig+0x6c4>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d1f0      	bne.n	8009ecc <HAL_RCC_OscConfig+0x6a4>
 8009eea:	e06e      	b.n	8009fca <HAL_RCC_OscConfig+0x7a2>
 8009eec:	58024400 	.word	0x58024400
 8009ef0:	fffffc0c 	.word	0xfffffc0c
 8009ef4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009ef8:	4b36      	ldr	r3, [pc, #216]	; (8009fd4 <HAL_RCC_OscConfig+0x7ac>)
 8009efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009efc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009efe:	4b35      	ldr	r3, [pc, #212]	; (8009fd4 <HAL_RCC_OscConfig+0x7ac>)
 8009f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f02:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d031      	beq.n	8009f70 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	f003 0203 	and.w	r2, r3, #3
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d12a      	bne.n	8009f70 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	091b      	lsrs	r3, r3, #4
 8009f1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d122      	bne.n	8009f70 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f34:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d11a      	bne.n	8009f70 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	0a5b      	lsrs	r3, r3, #9
 8009f3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f46:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d111      	bne.n	8009f70 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	0c1b      	lsrs	r3, r3, #16
 8009f50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f58:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d108      	bne.n	8009f70 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	0e1b      	lsrs	r3, r3, #24
 8009f62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f6a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d001      	beq.n	8009f74 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009f70:	2301      	movs	r3, #1
 8009f72:	e02b      	b.n	8009fcc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009f74:	4b17      	ldr	r3, [pc, #92]	; (8009fd4 <HAL_RCC_OscConfig+0x7ac>)
 8009f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f78:	08db      	lsrs	r3, r3, #3
 8009f7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f7e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f84:	693a      	ldr	r2, [r7, #16]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d01f      	beq.n	8009fca <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009f8a:	4b12      	ldr	r3, [pc, #72]	; (8009fd4 <HAL_RCC_OscConfig+0x7ac>)
 8009f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8e:	4a11      	ldr	r2, [pc, #68]	; (8009fd4 <HAL_RCC_OscConfig+0x7ac>)
 8009f90:	f023 0301 	bic.w	r3, r3, #1
 8009f94:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009f96:	f7f9 fd2b 	bl	80039f0 <HAL_GetTick>
 8009f9a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009f9c:	bf00      	nop
 8009f9e:	f7f9 fd27 	bl	80039f0 <HAL_GetTick>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d0f9      	beq.n	8009f9e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009faa:	4b0a      	ldr	r3, [pc, #40]	; (8009fd4 <HAL_RCC_OscConfig+0x7ac>)
 8009fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fae:	4b0a      	ldr	r3, [pc, #40]	; (8009fd8 <HAL_RCC_OscConfig+0x7b0>)
 8009fb0:	4013      	ands	r3, r2
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009fb6:	00d2      	lsls	r2, r2, #3
 8009fb8:	4906      	ldr	r1, [pc, #24]	; (8009fd4 <HAL_RCC_OscConfig+0x7ac>)
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009fbe:	4b05      	ldr	r3, [pc, #20]	; (8009fd4 <HAL_RCC_OscConfig+0x7ac>)
 8009fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc2:	4a04      	ldr	r2, [pc, #16]	; (8009fd4 <HAL_RCC_OscConfig+0x7ac>)
 8009fc4:	f043 0301 	orr.w	r3, r3, #1
 8009fc8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3730      	adds	r7, #48	; 0x30
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	58024400 	.word	0x58024400
 8009fd8:	ffff0007 	.word	0xffff0007

08009fdc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b086      	sub	sp, #24
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d101      	bne.n	8009ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	e19c      	b.n	800a32a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009ff0:	4b8a      	ldr	r3, [pc, #552]	; (800a21c <HAL_RCC_ClockConfig+0x240>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f003 030f 	and.w	r3, r3, #15
 8009ff8:	683a      	ldr	r2, [r7, #0]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d910      	bls.n	800a020 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ffe:	4b87      	ldr	r3, [pc, #540]	; (800a21c <HAL_RCC_ClockConfig+0x240>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f023 020f 	bic.w	r2, r3, #15
 800a006:	4985      	ldr	r1, [pc, #532]	; (800a21c <HAL_RCC_ClockConfig+0x240>)
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a00e:	4b83      	ldr	r3, [pc, #524]	; (800a21c <HAL_RCC_ClockConfig+0x240>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f003 030f 	and.w	r3, r3, #15
 800a016:	683a      	ldr	r2, [r7, #0]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d001      	beq.n	800a020 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a01c:	2301      	movs	r3, #1
 800a01e:	e184      	b.n	800a32a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f003 0304 	and.w	r3, r3, #4
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d010      	beq.n	800a04e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	691a      	ldr	r2, [r3, #16]
 800a030:	4b7b      	ldr	r3, [pc, #492]	; (800a220 <HAL_RCC_ClockConfig+0x244>)
 800a032:	699b      	ldr	r3, [r3, #24]
 800a034:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a038:	429a      	cmp	r2, r3
 800a03a:	d908      	bls.n	800a04e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a03c:	4b78      	ldr	r3, [pc, #480]	; (800a220 <HAL_RCC_ClockConfig+0x244>)
 800a03e:	699b      	ldr	r3, [r3, #24]
 800a040:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	4975      	ldr	r1, [pc, #468]	; (800a220 <HAL_RCC_ClockConfig+0x244>)
 800a04a:	4313      	orrs	r3, r2
 800a04c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f003 0308 	and.w	r3, r3, #8
 800a056:	2b00      	cmp	r3, #0
 800a058:	d010      	beq.n	800a07c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	695a      	ldr	r2, [r3, #20]
 800a05e:	4b70      	ldr	r3, [pc, #448]	; (800a220 <HAL_RCC_ClockConfig+0x244>)
 800a060:	69db      	ldr	r3, [r3, #28]
 800a062:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a066:	429a      	cmp	r2, r3
 800a068:	d908      	bls.n	800a07c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a06a:	4b6d      	ldr	r3, [pc, #436]	; (800a220 <HAL_RCC_ClockConfig+0x244>)
 800a06c:	69db      	ldr	r3, [r3, #28]
 800a06e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	695b      	ldr	r3, [r3, #20]
 800a076:	496a      	ldr	r1, [pc, #424]	; (800a220 <HAL_RCC_ClockConfig+0x244>)
 800a078:	4313      	orrs	r3, r2
 800a07a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f003 0310 	and.w	r3, r3, #16
 800a084:	2b00      	cmp	r3, #0
 800a086:	d010      	beq.n	800a0aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	699a      	ldr	r2, [r3, #24]
 800a08c:	4b64      	ldr	r3, [pc, #400]	; (800a220 <HAL_RCC_ClockConfig+0x244>)
 800a08e:	69db      	ldr	r3, [r3, #28]
 800a090:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a094:	429a      	cmp	r2, r3
 800a096:	d908      	bls.n	800a0aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a098:	4b61      	ldr	r3, [pc, #388]	; (800a220 <HAL_RCC_ClockConfig+0x244>)
 800a09a:	69db      	ldr	r3, [r3, #28]
 800a09c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	699b      	ldr	r3, [r3, #24]
 800a0a4:	495e      	ldr	r1, [pc, #376]	; (800a220 <HAL_RCC_ClockConfig+0x244>)
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f003 0320 	and.w	r3, r3, #32
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d010      	beq.n	800a0d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	69da      	ldr	r2, [r3, #28]
 800a0ba:	4b59      	ldr	r3, [pc, #356]	; (800a220 <HAL_RCC_ClockConfig+0x244>)
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d908      	bls.n	800a0d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a0c6:	4b56      	ldr	r3, [pc, #344]	; (800a220 <HAL_RCC_ClockConfig+0x244>)
 800a0c8:	6a1b      	ldr	r3, [r3, #32]
 800a0ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	69db      	ldr	r3, [r3, #28]
 800a0d2:	4953      	ldr	r1, [pc, #332]	; (800a220 <HAL_RCC_ClockConfig+0x244>)
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f003 0302 	and.w	r3, r3, #2
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d010      	beq.n	800a106 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	68da      	ldr	r2, [r3, #12]
 800a0e8:	4b4d      	ldr	r3, [pc, #308]	; (800a220 <HAL_RCC_ClockConfig+0x244>)
 800a0ea:	699b      	ldr	r3, [r3, #24]
 800a0ec:	f003 030f 	and.w	r3, r3, #15
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d908      	bls.n	800a106 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a0f4:	4b4a      	ldr	r3, [pc, #296]	; (800a220 <HAL_RCC_ClockConfig+0x244>)
 800a0f6:	699b      	ldr	r3, [r3, #24]
 800a0f8:	f023 020f 	bic.w	r2, r3, #15
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	68db      	ldr	r3, [r3, #12]
 800a100:	4947      	ldr	r1, [pc, #284]	; (800a220 <HAL_RCC_ClockConfig+0x244>)
 800a102:	4313      	orrs	r3, r2
 800a104:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f003 0301 	and.w	r3, r3, #1
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d055      	beq.n	800a1be <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a112:	4b43      	ldr	r3, [pc, #268]	; (800a220 <HAL_RCC_ClockConfig+0x244>)
 800a114:	699b      	ldr	r3, [r3, #24]
 800a116:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	4940      	ldr	r1, [pc, #256]	; (800a220 <HAL_RCC_ClockConfig+0x244>)
 800a120:	4313      	orrs	r3, r2
 800a122:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	2b02      	cmp	r3, #2
 800a12a:	d107      	bne.n	800a13c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a12c:	4b3c      	ldr	r3, [pc, #240]	; (800a220 <HAL_RCC_ClockConfig+0x244>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a134:	2b00      	cmp	r3, #0
 800a136:	d121      	bne.n	800a17c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a138:	2301      	movs	r3, #1
 800a13a:	e0f6      	b.n	800a32a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	2b03      	cmp	r3, #3
 800a142:	d107      	bne.n	800a154 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a144:	4b36      	ldr	r3, [pc, #216]	; (800a220 <HAL_RCC_ClockConfig+0x244>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d115      	bne.n	800a17c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a150:	2301      	movs	r3, #1
 800a152:	e0ea      	b.n	800a32a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d107      	bne.n	800a16c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a15c:	4b30      	ldr	r3, [pc, #192]	; (800a220 <HAL_RCC_ClockConfig+0x244>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a164:	2b00      	cmp	r3, #0
 800a166:	d109      	bne.n	800a17c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a168:	2301      	movs	r3, #1
 800a16a:	e0de      	b.n	800a32a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a16c:	4b2c      	ldr	r3, [pc, #176]	; (800a220 <HAL_RCC_ClockConfig+0x244>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f003 0304 	and.w	r3, r3, #4
 800a174:	2b00      	cmp	r3, #0
 800a176:	d101      	bne.n	800a17c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	e0d6      	b.n	800a32a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a17c:	4b28      	ldr	r3, [pc, #160]	; (800a220 <HAL_RCC_ClockConfig+0x244>)
 800a17e:	691b      	ldr	r3, [r3, #16]
 800a180:	f023 0207 	bic.w	r2, r3, #7
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	4925      	ldr	r1, [pc, #148]	; (800a220 <HAL_RCC_ClockConfig+0x244>)
 800a18a:	4313      	orrs	r3, r2
 800a18c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a18e:	f7f9 fc2f 	bl	80039f0 <HAL_GetTick>
 800a192:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a194:	e00a      	b.n	800a1ac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a196:	f7f9 fc2b 	bl	80039f0 <HAL_GetTick>
 800a19a:	4602      	mov	r2, r0
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	1ad3      	subs	r3, r2, r3
 800a1a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d901      	bls.n	800a1ac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a1a8:	2303      	movs	r3, #3
 800a1aa:	e0be      	b.n	800a32a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1ac:	4b1c      	ldr	r3, [pc, #112]	; (800a220 <HAL_RCC_ClockConfig+0x244>)
 800a1ae:	691b      	ldr	r3, [r3, #16]
 800a1b0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	00db      	lsls	r3, r3, #3
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d1eb      	bne.n	800a196 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f003 0302 	and.w	r3, r3, #2
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d010      	beq.n	800a1ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	68da      	ldr	r2, [r3, #12]
 800a1ce:	4b14      	ldr	r3, [pc, #80]	; (800a220 <HAL_RCC_ClockConfig+0x244>)
 800a1d0:	699b      	ldr	r3, [r3, #24]
 800a1d2:	f003 030f 	and.w	r3, r3, #15
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d208      	bcs.n	800a1ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a1da:	4b11      	ldr	r3, [pc, #68]	; (800a220 <HAL_RCC_ClockConfig+0x244>)
 800a1dc:	699b      	ldr	r3, [r3, #24]
 800a1de:	f023 020f 	bic.w	r2, r3, #15
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	490e      	ldr	r1, [pc, #56]	; (800a220 <HAL_RCC_ClockConfig+0x244>)
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a1ec:	4b0b      	ldr	r3, [pc, #44]	; (800a21c <HAL_RCC_ClockConfig+0x240>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f003 030f 	and.w	r3, r3, #15
 800a1f4:	683a      	ldr	r2, [r7, #0]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d214      	bcs.n	800a224 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1fa:	4b08      	ldr	r3, [pc, #32]	; (800a21c <HAL_RCC_ClockConfig+0x240>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f023 020f 	bic.w	r2, r3, #15
 800a202:	4906      	ldr	r1, [pc, #24]	; (800a21c <HAL_RCC_ClockConfig+0x240>)
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	4313      	orrs	r3, r2
 800a208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a20a:	4b04      	ldr	r3, [pc, #16]	; (800a21c <HAL_RCC_ClockConfig+0x240>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f003 030f 	and.w	r3, r3, #15
 800a212:	683a      	ldr	r2, [r7, #0]
 800a214:	429a      	cmp	r2, r3
 800a216:	d005      	beq.n	800a224 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a218:	2301      	movs	r3, #1
 800a21a:	e086      	b.n	800a32a <HAL_RCC_ClockConfig+0x34e>
 800a21c:	52002000 	.word	0x52002000
 800a220:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f003 0304 	and.w	r3, r3, #4
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d010      	beq.n	800a252 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	691a      	ldr	r2, [r3, #16]
 800a234:	4b3f      	ldr	r3, [pc, #252]	; (800a334 <HAL_RCC_ClockConfig+0x358>)
 800a236:	699b      	ldr	r3, [r3, #24]
 800a238:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d208      	bcs.n	800a252 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a240:	4b3c      	ldr	r3, [pc, #240]	; (800a334 <HAL_RCC_ClockConfig+0x358>)
 800a242:	699b      	ldr	r3, [r3, #24]
 800a244:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	4939      	ldr	r1, [pc, #228]	; (800a334 <HAL_RCC_ClockConfig+0x358>)
 800a24e:	4313      	orrs	r3, r2
 800a250:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f003 0308 	and.w	r3, r3, #8
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d010      	beq.n	800a280 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	695a      	ldr	r2, [r3, #20]
 800a262:	4b34      	ldr	r3, [pc, #208]	; (800a334 <HAL_RCC_ClockConfig+0x358>)
 800a264:	69db      	ldr	r3, [r3, #28]
 800a266:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d208      	bcs.n	800a280 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a26e:	4b31      	ldr	r3, [pc, #196]	; (800a334 <HAL_RCC_ClockConfig+0x358>)
 800a270:	69db      	ldr	r3, [r3, #28]
 800a272:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	695b      	ldr	r3, [r3, #20]
 800a27a:	492e      	ldr	r1, [pc, #184]	; (800a334 <HAL_RCC_ClockConfig+0x358>)
 800a27c:	4313      	orrs	r3, r2
 800a27e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f003 0310 	and.w	r3, r3, #16
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d010      	beq.n	800a2ae <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	699a      	ldr	r2, [r3, #24]
 800a290:	4b28      	ldr	r3, [pc, #160]	; (800a334 <HAL_RCC_ClockConfig+0x358>)
 800a292:	69db      	ldr	r3, [r3, #28]
 800a294:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a298:	429a      	cmp	r2, r3
 800a29a:	d208      	bcs.n	800a2ae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a29c:	4b25      	ldr	r3, [pc, #148]	; (800a334 <HAL_RCC_ClockConfig+0x358>)
 800a29e:	69db      	ldr	r3, [r3, #28]
 800a2a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	699b      	ldr	r3, [r3, #24]
 800a2a8:	4922      	ldr	r1, [pc, #136]	; (800a334 <HAL_RCC_ClockConfig+0x358>)
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f003 0320 	and.w	r3, r3, #32
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d010      	beq.n	800a2dc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	69da      	ldr	r2, [r3, #28]
 800a2be:	4b1d      	ldr	r3, [pc, #116]	; (800a334 <HAL_RCC_ClockConfig+0x358>)
 800a2c0:	6a1b      	ldr	r3, [r3, #32]
 800a2c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d208      	bcs.n	800a2dc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a2ca:	4b1a      	ldr	r3, [pc, #104]	; (800a334 <HAL_RCC_ClockConfig+0x358>)
 800a2cc:	6a1b      	ldr	r3, [r3, #32]
 800a2ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	69db      	ldr	r3, [r3, #28]
 800a2d6:	4917      	ldr	r1, [pc, #92]	; (800a334 <HAL_RCC_ClockConfig+0x358>)
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a2dc:	f000 f89e 	bl	800a41c <HAL_RCC_GetSysClockFreq>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	4b14      	ldr	r3, [pc, #80]	; (800a334 <HAL_RCC_ClockConfig+0x358>)
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	0a1b      	lsrs	r3, r3, #8
 800a2e8:	f003 030f 	and.w	r3, r3, #15
 800a2ec:	4912      	ldr	r1, [pc, #72]	; (800a338 <HAL_RCC_ClockConfig+0x35c>)
 800a2ee:	5ccb      	ldrb	r3, [r1, r3]
 800a2f0:	f003 031f 	and.w	r3, r3, #31
 800a2f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a2f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a2fa:	4b0e      	ldr	r3, [pc, #56]	; (800a334 <HAL_RCC_ClockConfig+0x358>)
 800a2fc:	699b      	ldr	r3, [r3, #24]
 800a2fe:	f003 030f 	and.w	r3, r3, #15
 800a302:	4a0d      	ldr	r2, [pc, #52]	; (800a338 <HAL_RCC_ClockConfig+0x35c>)
 800a304:	5cd3      	ldrb	r3, [r2, r3]
 800a306:	f003 031f 	and.w	r3, r3, #31
 800a30a:	693a      	ldr	r2, [r7, #16]
 800a30c:	fa22 f303 	lsr.w	r3, r2, r3
 800a310:	4a0a      	ldr	r2, [pc, #40]	; (800a33c <HAL_RCC_ClockConfig+0x360>)
 800a312:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a314:	4a0a      	ldr	r2, [pc, #40]	; (800a340 <HAL_RCC_ClockConfig+0x364>)
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a31a:	4b0a      	ldr	r3, [pc, #40]	; (800a344 <HAL_RCC_ClockConfig+0x368>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4618      	mov	r0, r3
 800a320:	f7f9 fb1c 	bl	800395c <HAL_InitTick>
 800a324:	4603      	mov	r3, r0
 800a326:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a328:	7bfb      	ldrb	r3, [r7, #15]
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3718      	adds	r7, #24
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	58024400 	.word	0x58024400
 800a338:	080184e8 	.word	0x080184e8
 800a33c:	24000004 	.word	0x24000004
 800a340:	24000000 	.word	0x24000000
 800a344:	24000008 	.word	0x24000008

0800a348 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b08c      	sub	sp, #48	; 0x30
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d12a      	bne.n	800a3b0 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a35a:	4b2d      	ldr	r3, [pc, #180]	; (800a410 <HAL_RCC_MCOConfig+0xc8>)
 800a35c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a360:	4a2b      	ldr	r2, [pc, #172]	; (800a410 <HAL_RCC_MCOConfig+0xc8>)
 800a362:	f043 0301 	orr.w	r3, r3, #1
 800a366:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a36a:	4b29      	ldr	r3, [pc, #164]	; (800a410 <HAL_RCC_MCOConfig+0xc8>)
 800a36c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a370:	f003 0301 	and.w	r3, r3, #1
 800a374:	61bb      	str	r3, [r7, #24]
 800a376:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a378:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a37c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a37e:	2302      	movs	r3, #2
 800a380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a382:	2303      	movs	r3, #3
 800a384:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a386:	2300      	movs	r3, #0
 800a388:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a38a:	2300      	movs	r3, #0
 800a38c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a38e:	f107 031c 	add.w	r3, r7, #28
 800a392:	4619      	mov	r1, r3
 800a394:	481f      	ldr	r0, [pc, #124]	; (800a414 <HAL_RCC_MCOConfig+0xcc>)
 800a396:	f7fd fc29 	bl	8007bec <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a39a:	4b1d      	ldr	r3, [pc, #116]	; (800a410 <HAL_RCC_MCOConfig+0xc8>)
 800a39c:	691b      	ldr	r3, [r3, #16]
 800a39e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a3a2:	68b9      	ldr	r1, [r7, #8]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	430b      	orrs	r3, r1
 800a3a8:	4919      	ldr	r1, [pc, #100]	; (800a410 <HAL_RCC_MCOConfig+0xc8>)
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a3ae:	e02a      	b.n	800a406 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a3b0:	4b17      	ldr	r3, [pc, #92]	; (800a410 <HAL_RCC_MCOConfig+0xc8>)
 800a3b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3b6:	4a16      	ldr	r2, [pc, #88]	; (800a410 <HAL_RCC_MCOConfig+0xc8>)
 800a3b8:	f043 0304 	orr.w	r3, r3, #4
 800a3bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a3c0:	4b13      	ldr	r3, [pc, #76]	; (800a410 <HAL_RCC_MCOConfig+0xc8>)
 800a3c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3c6:	f003 0304 	and.w	r3, r3, #4
 800a3ca:	617b      	str	r3, [r7, #20]
 800a3cc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a3ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3d4:	2302      	movs	r3, #2
 800a3d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3d8:	2303      	movs	r3, #3
 800a3da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a3e4:	f107 031c 	add.w	r3, r7, #28
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	480b      	ldr	r0, [pc, #44]	; (800a418 <HAL_RCC_MCOConfig+0xd0>)
 800a3ec:	f7fd fbfe 	bl	8007bec <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a3f0:	4b07      	ldr	r3, [pc, #28]	; (800a410 <HAL_RCC_MCOConfig+0xc8>)
 800a3f2:	691b      	ldr	r3, [r3, #16]
 800a3f4:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	01d9      	lsls	r1, r3, #7
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	430b      	orrs	r3, r1
 800a400:	4903      	ldr	r1, [pc, #12]	; (800a410 <HAL_RCC_MCOConfig+0xc8>)
 800a402:	4313      	orrs	r3, r2
 800a404:	610b      	str	r3, [r1, #16]
}
 800a406:	bf00      	nop
 800a408:	3730      	adds	r7, #48	; 0x30
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	58024400 	.word	0x58024400
 800a414:	58020000 	.word	0x58020000
 800a418:	58020800 	.word	0x58020800

0800a41c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b089      	sub	sp, #36	; 0x24
 800a420:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a422:	4bb3      	ldr	r3, [pc, #716]	; (800a6f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a424:	691b      	ldr	r3, [r3, #16]
 800a426:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a42a:	2b18      	cmp	r3, #24
 800a42c:	f200 8155 	bhi.w	800a6da <HAL_RCC_GetSysClockFreq+0x2be>
 800a430:	a201      	add	r2, pc, #4	; (adr r2, 800a438 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a436:	bf00      	nop
 800a438:	0800a49d 	.word	0x0800a49d
 800a43c:	0800a6db 	.word	0x0800a6db
 800a440:	0800a6db 	.word	0x0800a6db
 800a444:	0800a6db 	.word	0x0800a6db
 800a448:	0800a6db 	.word	0x0800a6db
 800a44c:	0800a6db 	.word	0x0800a6db
 800a450:	0800a6db 	.word	0x0800a6db
 800a454:	0800a6db 	.word	0x0800a6db
 800a458:	0800a4c3 	.word	0x0800a4c3
 800a45c:	0800a6db 	.word	0x0800a6db
 800a460:	0800a6db 	.word	0x0800a6db
 800a464:	0800a6db 	.word	0x0800a6db
 800a468:	0800a6db 	.word	0x0800a6db
 800a46c:	0800a6db 	.word	0x0800a6db
 800a470:	0800a6db 	.word	0x0800a6db
 800a474:	0800a6db 	.word	0x0800a6db
 800a478:	0800a4c9 	.word	0x0800a4c9
 800a47c:	0800a6db 	.word	0x0800a6db
 800a480:	0800a6db 	.word	0x0800a6db
 800a484:	0800a6db 	.word	0x0800a6db
 800a488:	0800a6db 	.word	0x0800a6db
 800a48c:	0800a6db 	.word	0x0800a6db
 800a490:	0800a6db 	.word	0x0800a6db
 800a494:	0800a6db 	.word	0x0800a6db
 800a498:	0800a4cf 	.word	0x0800a4cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a49c:	4b94      	ldr	r3, [pc, #592]	; (800a6f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f003 0320 	and.w	r3, r3, #32
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d009      	beq.n	800a4bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4a8:	4b91      	ldr	r3, [pc, #580]	; (800a6f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	08db      	lsrs	r3, r3, #3
 800a4ae:	f003 0303 	and.w	r3, r3, #3
 800a4b2:	4a90      	ldr	r2, [pc, #576]	; (800a6f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a4b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a4b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a4ba:	e111      	b.n	800a6e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a4bc:	4b8d      	ldr	r3, [pc, #564]	; (800a6f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a4be:	61bb      	str	r3, [r7, #24]
      break;
 800a4c0:	e10e      	b.n	800a6e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a4c2:	4b8d      	ldr	r3, [pc, #564]	; (800a6f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a4c4:	61bb      	str	r3, [r7, #24]
      break;
 800a4c6:	e10b      	b.n	800a6e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a4c8:	4b8c      	ldr	r3, [pc, #560]	; (800a6fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a4ca:	61bb      	str	r3, [r7, #24]
      break;
 800a4cc:	e108      	b.n	800a6e0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a4ce:	4b88      	ldr	r3, [pc, #544]	; (800a6f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d2:	f003 0303 	and.w	r3, r3, #3
 800a4d6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a4d8:	4b85      	ldr	r3, [pc, #532]	; (800a6f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4dc:	091b      	lsrs	r3, r3, #4
 800a4de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4e2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a4e4:	4b82      	ldr	r3, [pc, #520]	; (800a6f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e8:	f003 0301 	and.w	r3, r3, #1
 800a4ec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a4ee:	4b80      	ldr	r3, [pc, #512]	; (800a6f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4f2:	08db      	lsrs	r3, r3, #3
 800a4f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a4f8:	68fa      	ldr	r2, [r7, #12]
 800a4fa:	fb02 f303 	mul.w	r3, r2, r3
 800a4fe:	ee07 3a90 	vmov	s15, r3
 800a502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a506:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	f000 80e1 	beq.w	800a6d4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	2b02      	cmp	r3, #2
 800a516:	f000 8083 	beq.w	800a620 <HAL_RCC_GetSysClockFreq+0x204>
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	2b02      	cmp	r3, #2
 800a51e:	f200 80a1 	bhi.w	800a664 <HAL_RCC_GetSysClockFreq+0x248>
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d003      	beq.n	800a530 <HAL_RCC_GetSysClockFreq+0x114>
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d056      	beq.n	800a5dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800a52e:	e099      	b.n	800a664 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a530:	4b6f      	ldr	r3, [pc, #444]	; (800a6f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f003 0320 	and.w	r3, r3, #32
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d02d      	beq.n	800a598 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a53c:	4b6c      	ldr	r3, [pc, #432]	; (800a6f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	08db      	lsrs	r3, r3, #3
 800a542:	f003 0303 	and.w	r3, r3, #3
 800a546:	4a6b      	ldr	r2, [pc, #428]	; (800a6f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a548:	fa22 f303 	lsr.w	r3, r2, r3
 800a54c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	ee07 3a90 	vmov	s15, r3
 800a554:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	ee07 3a90 	vmov	s15, r3
 800a55e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a566:	4b62      	ldr	r3, [pc, #392]	; (800a6f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a56a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a56e:	ee07 3a90 	vmov	s15, r3
 800a572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a576:	ed97 6a02 	vldr	s12, [r7, #8]
 800a57a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a700 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a57e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a58a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a58e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a592:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a596:	e087      	b.n	800a6a8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	ee07 3a90 	vmov	s15, r3
 800a59e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5a2:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a704 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a5a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5aa:	4b51      	ldr	r3, [pc, #324]	; (800a6f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5b2:	ee07 3a90 	vmov	s15, r3
 800a5b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5ba:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5be:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a700 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a5c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a5da:	e065      	b.n	800a6a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	ee07 3a90 	vmov	s15, r3
 800a5e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5e6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a708 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a5ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5ee:	4b40      	ldr	r3, [pc, #256]	; (800a6f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5f6:	ee07 3a90 	vmov	s15, r3
 800a5fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800a602:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a700 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a60a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a60e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a61a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a61e:	e043      	b.n	800a6a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	ee07 3a90 	vmov	s15, r3
 800a626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a62a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a70c <HAL_RCC_GetSysClockFreq+0x2f0>
 800a62e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a632:	4b2f      	ldr	r3, [pc, #188]	; (800a6f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a63a:	ee07 3a90 	vmov	s15, r3
 800a63e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a642:	ed97 6a02 	vldr	s12, [r7, #8]
 800a646:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a700 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a64a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a64e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a65a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a65e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a662:	e021      	b.n	800a6a8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	ee07 3a90 	vmov	s15, r3
 800a66a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a66e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a708 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a676:	4b1e      	ldr	r3, [pc, #120]	; (800a6f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a67a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a67e:	ee07 3a90 	vmov	s15, r3
 800a682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a686:	ed97 6a02 	vldr	s12, [r7, #8]
 800a68a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a700 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a68e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a69a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a69e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a6a6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a6a8:	4b11      	ldr	r3, [pc, #68]	; (800a6f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ac:	0a5b      	lsrs	r3, r3, #9
 800a6ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	ee07 3a90 	vmov	s15, r3
 800a6bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a6c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6cc:	ee17 3a90 	vmov	r3, s15
 800a6d0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a6d2:	e005      	b.n	800a6e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	61bb      	str	r3, [r7, #24]
      break;
 800a6d8:	e002      	b.n	800a6e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a6da:	4b07      	ldr	r3, [pc, #28]	; (800a6f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a6dc:	61bb      	str	r3, [r7, #24]
      break;
 800a6de:	bf00      	nop
  }

  return sysclockfreq;
 800a6e0:	69bb      	ldr	r3, [r7, #24]
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3724      	adds	r7, #36	; 0x24
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr
 800a6ee:	bf00      	nop
 800a6f0:	58024400 	.word	0x58024400
 800a6f4:	03d09000 	.word	0x03d09000
 800a6f8:	003d0900 	.word	0x003d0900
 800a6fc:	02faf080 	.word	0x02faf080
 800a700:	46000000 	.word	0x46000000
 800a704:	4c742400 	.word	0x4c742400
 800a708:	4a742400 	.word	0x4a742400
 800a70c:	4c3ebc20 	.word	0x4c3ebc20

0800a710 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a716:	f7ff fe81 	bl	800a41c <HAL_RCC_GetSysClockFreq>
 800a71a:	4602      	mov	r2, r0
 800a71c:	4b10      	ldr	r3, [pc, #64]	; (800a760 <HAL_RCC_GetHCLKFreq+0x50>)
 800a71e:	699b      	ldr	r3, [r3, #24]
 800a720:	0a1b      	lsrs	r3, r3, #8
 800a722:	f003 030f 	and.w	r3, r3, #15
 800a726:	490f      	ldr	r1, [pc, #60]	; (800a764 <HAL_RCC_GetHCLKFreq+0x54>)
 800a728:	5ccb      	ldrb	r3, [r1, r3]
 800a72a:	f003 031f 	and.w	r3, r3, #31
 800a72e:	fa22 f303 	lsr.w	r3, r2, r3
 800a732:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a734:	4b0a      	ldr	r3, [pc, #40]	; (800a760 <HAL_RCC_GetHCLKFreq+0x50>)
 800a736:	699b      	ldr	r3, [r3, #24]
 800a738:	f003 030f 	and.w	r3, r3, #15
 800a73c:	4a09      	ldr	r2, [pc, #36]	; (800a764 <HAL_RCC_GetHCLKFreq+0x54>)
 800a73e:	5cd3      	ldrb	r3, [r2, r3]
 800a740:	f003 031f 	and.w	r3, r3, #31
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	fa22 f303 	lsr.w	r3, r2, r3
 800a74a:	4a07      	ldr	r2, [pc, #28]	; (800a768 <HAL_RCC_GetHCLKFreq+0x58>)
 800a74c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a74e:	4a07      	ldr	r2, [pc, #28]	; (800a76c <HAL_RCC_GetHCLKFreq+0x5c>)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a754:	4b04      	ldr	r3, [pc, #16]	; (800a768 <HAL_RCC_GetHCLKFreq+0x58>)
 800a756:	681b      	ldr	r3, [r3, #0]
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3708      	adds	r7, #8
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}
 800a760:	58024400 	.word	0x58024400
 800a764:	080184e8 	.word	0x080184e8
 800a768:	24000004 	.word	0x24000004
 800a76c:	24000000 	.word	0x24000000

0800a770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a774:	f7ff ffcc 	bl	800a710 <HAL_RCC_GetHCLKFreq>
 800a778:	4602      	mov	r2, r0
 800a77a:	4b06      	ldr	r3, [pc, #24]	; (800a794 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a77c:	69db      	ldr	r3, [r3, #28]
 800a77e:	091b      	lsrs	r3, r3, #4
 800a780:	f003 0307 	and.w	r3, r3, #7
 800a784:	4904      	ldr	r1, [pc, #16]	; (800a798 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a786:	5ccb      	ldrb	r3, [r1, r3]
 800a788:	f003 031f 	and.w	r3, r3, #31
 800a78c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a790:	4618      	mov	r0, r3
 800a792:	bd80      	pop	{r7, pc}
 800a794:	58024400 	.word	0x58024400
 800a798:	080184e8 	.word	0x080184e8

0800a79c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a7a0:	f7ff ffb6 	bl	800a710 <HAL_RCC_GetHCLKFreq>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	4b06      	ldr	r3, [pc, #24]	; (800a7c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a7a8:	69db      	ldr	r3, [r3, #28]
 800a7aa:	0a1b      	lsrs	r3, r3, #8
 800a7ac:	f003 0307 	and.w	r3, r3, #7
 800a7b0:	4904      	ldr	r1, [pc, #16]	; (800a7c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a7b2:	5ccb      	ldrb	r3, [r1, r3]
 800a7b4:	f003 031f 	and.w	r3, r3, #31
 800a7b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	bd80      	pop	{r7, pc}
 800a7c0:	58024400 	.word	0x58024400
 800a7c4:	080184e8 	.word	0x080184e8

0800a7c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a7c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a7cc:	b0c6      	sub	sp, #280	; 0x118
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a7da:	2300      	movs	r3, #0
 800a7dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a7e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a7ec:	2500      	movs	r5, #0
 800a7ee:	ea54 0305 	orrs.w	r3, r4, r5
 800a7f2:	d049      	beq.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a7f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a7fe:	d02f      	beq.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a800:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a804:	d828      	bhi.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a806:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a80a:	d01a      	beq.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a80c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a810:	d822      	bhi.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a812:	2b00      	cmp	r3, #0
 800a814:	d003      	beq.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a816:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a81a:	d007      	beq.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a81c:	e01c      	b.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a81e:	4bab      	ldr	r3, [pc, #684]	; (800aacc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a822:	4aaa      	ldr	r2, [pc, #680]	; (800aacc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a828:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a82a:	e01a      	b.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a82c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a830:	3308      	adds	r3, #8
 800a832:	2102      	movs	r1, #2
 800a834:	4618      	mov	r0, r3
 800a836:	f002 fa49 	bl	800cccc <RCCEx_PLL2_Config>
 800a83a:	4603      	mov	r3, r0
 800a83c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a840:	e00f      	b.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a846:	3328      	adds	r3, #40	; 0x28
 800a848:	2102      	movs	r1, #2
 800a84a:	4618      	mov	r0, r3
 800a84c:	f002 faf0 	bl	800ce30 <RCCEx_PLL3_Config>
 800a850:	4603      	mov	r3, r0
 800a852:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a856:	e004      	b.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a858:	2301      	movs	r3, #1
 800a85a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a85e:	e000      	b.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a860:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a862:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a866:	2b00      	cmp	r3, #0
 800a868:	d10a      	bne.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a86a:	4b98      	ldr	r3, [pc, #608]	; (800aacc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a86c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a86e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a878:	4a94      	ldr	r2, [pc, #592]	; (800aacc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a87a:	430b      	orrs	r3, r1
 800a87c:	6513      	str	r3, [r2, #80]	; 0x50
 800a87e:	e003      	b.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a880:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a884:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a890:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a894:	f04f 0900 	mov.w	r9, #0
 800a898:	ea58 0309 	orrs.w	r3, r8, r9
 800a89c:	d047      	beq.n	800a92e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a89e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8a4:	2b04      	cmp	r3, #4
 800a8a6:	d82a      	bhi.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a8a8:	a201      	add	r2, pc, #4	; (adr r2, 800a8b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a8aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ae:	bf00      	nop
 800a8b0:	0800a8c5 	.word	0x0800a8c5
 800a8b4:	0800a8d3 	.word	0x0800a8d3
 800a8b8:	0800a8e9 	.word	0x0800a8e9
 800a8bc:	0800a907 	.word	0x0800a907
 800a8c0:	0800a907 	.word	0x0800a907
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8c4:	4b81      	ldr	r3, [pc, #516]	; (800aacc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c8:	4a80      	ldr	r2, [pc, #512]	; (800aacc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a8d0:	e01a      	b.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a8d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8d6:	3308      	adds	r3, #8
 800a8d8:	2100      	movs	r1, #0
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f002 f9f6 	bl	800cccc <RCCEx_PLL2_Config>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a8e6:	e00f      	b.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a8e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ec:	3328      	adds	r3, #40	; 0x28
 800a8ee:	2100      	movs	r1, #0
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f002 fa9d 	bl	800ce30 <RCCEx_PLL3_Config>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a8fc:	e004      	b.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8fe:	2301      	movs	r3, #1
 800a900:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a904:	e000      	b.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a906:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a908:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d10a      	bne.n	800a926 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a910:	4b6e      	ldr	r3, [pc, #440]	; (800aacc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a914:	f023 0107 	bic.w	r1, r3, #7
 800a918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a91c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a91e:	4a6b      	ldr	r2, [pc, #428]	; (800aacc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a920:	430b      	orrs	r3, r1
 800a922:	6513      	str	r3, [r2, #80]	; 0x50
 800a924:	e003      	b.n	800a92e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a926:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a92a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a92e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a936:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800a93a:	f04f 0b00 	mov.w	fp, #0
 800a93e:	ea5a 030b 	orrs.w	r3, sl, fp
 800a942:	d05b      	beq.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a948:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a94c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a950:	d03b      	beq.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a952:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a956:	d834      	bhi.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a958:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a95c:	d037      	beq.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a95e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a962:	d82e      	bhi.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a964:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a968:	d033      	beq.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a96a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a96e:	d828      	bhi.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a970:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a974:	d01a      	beq.n	800a9ac <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a97a:	d822      	bhi.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d003      	beq.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a980:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a984:	d007      	beq.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a986:	e01c      	b.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a988:	4b50      	ldr	r3, [pc, #320]	; (800aacc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a98c:	4a4f      	ldr	r2, [pc, #316]	; (800aacc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a98e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a992:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a994:	e01e      	b.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a996:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a99a:	3308      	adds	r3, #8
 800a99c:	2100      	movs	r1, #0
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f002 f994 	bl	800cccc <RCCEx_PLL2_Config>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a9aa:	e013      	b.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a9ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9b0:	3328      	adds	r3, #40	; 0x28
 800a9b2:	2100      	movs	r1, #0
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f002 fa3b 	bl	800ce30 <RCCEx_PLL3_Config>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a9c0:	e008      	b.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a9c8:	e004      	b.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a9ca:	bf00      	nop
 800a9cc:	e002      	b.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a9ce:	bf00      	nop
 800a9d0:	e000      	b.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a9d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d10b      	bne.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a9dc:	4b3b      	ldr	r3, [pc, #236]	; (800aacc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9e0:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a9e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a9ec:	4a37      	ldr	r2, [pc, #220]	; (800aacc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9ee:	430b      	orrs	r3, r1
 800a9f0:	6593      	str	r3, [r2, #88]	; 0x58
 800a9f2:	e003      	b.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a9fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa04:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800aa08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aa12:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800aa16:	460b      	mov	r3, r1
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	d05d      	beq.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800aa1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aa24:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800aa28:	d03b      	beq.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800aa2a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800aa2e:	d834      	bhi.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aa30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa34:	d037      	beq.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800aa36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa3a:	d82e      	bhi.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aa3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aa40:	d033      	beq.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800aa42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aa46:	d828      	bhi.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aa48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa4c:	d01a      	beq.n	800aa84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800aa4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa52:	d822      	bhi.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d003      	beq.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800aa58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aa5c:	d007      	beq.n	800aa6e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800aa5e:	e01c      	b.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa60:	4b1a      	ldr	r3, [pc, #104]	; (800aacc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa64:	4a19      	ldr	r2, [pc, #100]	; (800aacc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa6c:	e01e      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa72:	3308      	adds	r3, #8
 800aa74:	2100      	movs	r1, #0
 800aa76:	4618      	mov	r0, r3
 800aa78:	f002 f928 	bl	800cccc <RCCEx_PLL2_Config>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800aa82:	e013      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa88:	3328      	adds	r3, #40	; 0x28
 800aa8a:	2100      	movs	r1, #0
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f002 f9cf 	bl	800ce30 <RCCEx_PLL3_Config>
 800aa92:	4603      	mov	r3, r0
 800aa94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa98:	e008      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aaa0:	e004      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800aaa2:	bf00      	nop
 800aaa4:	e002      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800aaa6:	bf00      	nop
 800aaa8:	e000      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800aaaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aaac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d10d      	bne.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800aab4:	4b05      	ldr	r3, [pc, #20]	; (800aacc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aab8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800aabc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aac0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aac4:	4a01      	ldr	r2, [pc, #4]	; (800aacc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aac6:	430b      	orrs	r3, r1
 800aac8:	6593      	str	r3, [r2, #88]	; 0x58
 800aaca:	e005      	b.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800aacc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aad0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aad4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800aad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800aae4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aae8:	2300      	movs	r3, #0
 800aaea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800aaee:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800aaf2:	460b      	mov	r3, r1
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	d03a      	beq.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800aaf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aafc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aafe:	2b30      	cmp	r3, #48	; 0x30
 800ab00:	d01f      	beq.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800ab02:	2b30      	cmp	r3, #48	; 0x30
 800ab04:	d819      	bhi.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ab06:	2b20      	cmp	r3, #32
 800ab08:	d00c      	beq.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800ab0a:	2b20      	cmp	r3, #32
 800ab0c:	d815      	bhi.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d019      	beq.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ab12:	2b10      	cmp	r3, #16
 800ab14:	d111      	bne.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab16:	4baa      	ldr	r3, [pc, #680]	; (800adc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab1a:	4aa9      	ldr	r2, [pc, #676]	; (800adc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ab22:	e011      	b.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab28:	3308      	adds	r3, #8
 800ab2a:	2102      	movs	r1, #2
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f002 f8cd 	bl	800cccc <RCCEx_PLL2_Config>
 800ab32:	4603      	mov	r3, r0
 800ab34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ab38:	e006      	b.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab40:	e002      	b.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800ab42:	bf00      	nop
 800ab44:	e000      	b.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800ab46:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d10a      	bne.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800ab50:	4b9b      	ldr	r3, [pc, #620]	; (800adc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab54:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ab58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab5e:	4a98      	ldr	r2, [pc, #608]	; (800adc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab60:	430b      	orrs	r3, r1
 800ab62:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab64:	e003      	b.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab6a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ab6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab76:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ab7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ab7e:	2300      	movs	r3, #0
 800ab80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ab84:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ab88:	460b      	mov	r3, r1
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	d051      	beq.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ab8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab98:	d035      	beq.n	800ac06 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800ab9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab9e:	d82e      	bhi.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x436>
 800aba0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aba4:	d031      	beq.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x442>
 800aba6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800abaa:	d828      	bhi.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x436>
 800abac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abb0:	d01a      	beq.n	800abe8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800abb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abb6:	d822      	bhi.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x436>
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d003      	beq.n	800abc4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800abbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abc0:	d007      	beq.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800abc2:	e01c      	b.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abc4:	4b7e      	ldr	r3, [pc, #504]	; (800adc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc8:	4a7d      	ldr	r2, [pc, #500]	; (800adc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800abd0:	e01c      	b.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800abd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abd6:	3308      	adds	r3, #8
 800abd8:	2100      	movs	r1, #0
 800abda:	4618      	mov	r0, r3
 800abdc:	f002 f876 	bl	800cccc <RCCEx_PLL2_Config>
 800abe0:	4603      	mov	r3, r0
 800abe2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800abe6:	e011      	b.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800abe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abec:	3328      	adds	r3, #40	; 0x28
 800abee:	2100      	movs	r1, #0
 800abf0:	4618      	mov	r0, r3
 800abf2:	f002 f91d 	bl	800ce30 <RCCEx_PLL3_Config>
 800abf6:	4603      	mov	r3, r0
 800abf8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800abfc:	e006      	b.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abfe:	2301      	movs	r3, #1
 800ac00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac04:	e002      	b.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ac06:	bf00      	nop
 800ac08:	e000      	b.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ac0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d10a      	bne.n	800ac2a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ac14:	4b6a      	ldr	r3, [pc, #424]	; (800adc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac18:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ac1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac22:	4a67      	ldr	r2, [pc, #412]	; (800adc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac24:	430b      	orrs	r3, r1
 800ac26:	6513      	str	r3, [r2, #80]	; 0x50
 800ac28:	e003      	b.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac2a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac2e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ac32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800ac3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ac42:	2300      	movs	r3, #0
 800ac44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ac48:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	d053      	beq.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ac52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac5c:	d033      	beq.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800ac5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac62:	d82c      	bhi.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ac64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac68:	d02f      	beq.n	800acca <HAL_RCCEx_PeriphCLKConfig+0x502>
 800ac6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac6e:	d826      	bhi.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ac70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ac74:	d02b      	beq.n	800acce <HAL_RCCEx_PeriphCLKConfig+0x506>
 800ac76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ac7a:	d820      	bhi.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ac7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac80:	d012      	beq.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800ac82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac86:	d81a      	bhi.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d022      	beq.n	800acd2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800ac8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac90:	d115      	bne.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ac92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac96:	3308      	adds	r3, #8
 800ac98:	2101      	movs	r1, #1
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f002 f816 	bl	800cccc <RCCEx_PLL2_Config>
 800aca0:	4603      	mov	r3, r0
 800aca2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800aca6:	e015      	b.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acac:	3328      	adds	r3, #40	; 0x28
 800acae:	2101      	movs	r1, #1
 800acb0:	4618      	mov	r0, r3
 800acb2:	f002 f8bd 	bl	800ce30 <RCCEx_PLL3_Config>
 800acb6:	4603      	mov	r3, r0
 800acb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800acbc:	e00a      	b.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800acbe:	2301      	movs	r3, #1
 800acc0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800acc4:	e006      	b.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800acc6:	bf00      	nop
 800acc8:	e004      	b.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800acca:	bf00      	nop
 800accc:	e002      	b.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800acce:	bf00      	nop
 800acd0:	e000      	b.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800acd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acd4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d10a      	bne.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800acdc:	4b38      	ldr	r3, [pc, #224]	; (800adc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800acde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ace0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ace4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ace8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acea:	4a35      	ldr	r2, [pc, #212]	; (800adc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800acec:	430b      	orrs	r3, r1
 800acee:	6513      	str	r3, [r2, #80]	; 0x50
 800acf0:	e003      	b.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acf2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acf6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800acfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad02:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ad06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ad10:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ad14:	460b      	mov	r3, r1
 800ad16:	4313      	orrs	r3, r2
 800ad18:	d058      	beq.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ad1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ad22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad26:	d033      	beq.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800ad28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad2c:	d82c      	bhi.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ad2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad32:	d02f      	beq.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800ad34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad38:	d826      	bhi.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ad3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad3e:	d02b      	beq.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800ad40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad44:	d820      	bhi.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ad46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad4a:	d012      	beq.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800ad4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad50:	d81a      	bhi.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d022      	beq.n	800ad9c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ad56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad5a:	d115      	bne.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad60:	3308      	adds	r3, #8
 800ad62:	2101      	movs	r1, #1
 800ad64:	4618      	mov	r0, r3
 800ad66:	f001 ffb1 	bl	800cccc <RCCEx_PLL2_Config>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ad70:	e015      	b.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad76:	3328      	adds	r3, #40	; 0x28
 800ad78:	2101      	movs	r1, #1
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f002 f858 	bl	800ce30 <RCCEx_PLL3_Config>
 800ad80:	4603      	mov	r3, r0
 800ad82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ad86:	e00a      	b.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad8e:	e006      	b.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ad90:	bf00      	nop
 800ad92:	e004      	b.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ad94:	bf00      	nop
 800ad96:	e002      	b.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ad98:	bf00      	nop
 800ad9a:	e000      	b.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ad9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad9e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d10e      	bne.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ada6:	4b06      	ldr	r3, [pc, #24]	; (800adc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ada8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adaa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800adae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adb2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800adb6:	4a02      	ldr	r2, [pc, #8]	; (800adc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800adb8:	430b      	orrs	r3, r1
 800adba:	6593      	str	r3, [r2, #88]	; 0x58
 800adbc:	e006      	b.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x604>
 800adbe:	bf00      	nop
 800adc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adc4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800adc8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800adcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800add0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800add8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800addc:	2300      	movs	r3, #0
 800adde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ade2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800ade6:	460b      	mov	r3, r1
 800ade8:	4313      	orrs	r3, r2
 800adea:	d037      	beq.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800adec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adf6:	d00e      	beq.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800adf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adfc:	d816      	bhi.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d018      	beq.n	800ae34 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800ae02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae06:	d111      	bne.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae08:	4bc4      	ldr	r3, [pc, #784]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0c:	4ac3      	ldr	r2, [pc, #780]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ae14:	e00f      	b.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae1a:	3308      	adds	r3, #8
 800ae1c:	2101      	movs	r1, #1
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f001 ff54 	bl	800cccc <RCCEx_PLL2_Config>
 800ae24:	4603      	mov	r3, r0
 800ae26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ae2a:	e004      	b.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae32:	e000      	b.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800ae34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae36:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d10a      	bne.n	800ae54 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ae3e:	4bb7      	ldr	r3, [pc, #732]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae42:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ae46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae4c:	4ab3      	ldr	r2, [pc, #716]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae4e:	430b      	orrs	r3, r1
 800ae50:	6513      	str	r3, [r2, #80]	; 0x50
 800ae52:	e003      	b.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae58:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ae5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae64:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800ae68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ae72:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800ae76:	460b      	mov	r3, r1
 800ae78:	4313      	orrs	r3, r2
 800ae7a:	d039      	beq.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ae7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae82:	2b03      	cmp	r3, #3
 800ae84:	d81c      	bhi.n	800aec0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800ae86:	a201      	add	r2, pc, #4	; (adr r2, 800ae8c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800ae88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae8c:	0800aec9 	.word	0x0800aec9
 800ae90:	0800ae9d 	.word	0x0800ae9d
 800ae94:	0800aeab 	.word	0x0800aeab
 800ae98:	0800aec9 	.word	0x0800aec9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae9c:	4b9f      	ldr	r3, [pc, #636]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea0:	4a9e      	ldr	r2, [pc, #632]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aea6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800aea8:	e00f      	b.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aeaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeae:	3308      	adds	r3, #8
 800aeb0:	2102      	movs	r1, #2
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f001 ff0a 	bl	800cccc <RCCEx_PLL2_Config>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800aebe:	e004      	b.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800aec0:	2301      	movs	r3, #1
 800aec2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aec6:	e000      	b.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800aec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aeca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d10a      	bne.n	800aee8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800aed2:	4b92      	ldr	r3, [pc, #584]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aed6:	f023 0103 	bic.w	r1, r3, #3
 800aeda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aee0:	4a8e      	ldr	r2, [pc, #568]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aee2:	430b      	orrs	r3, r1
 800aee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aee6:	e003      	b.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aee8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aeec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800aef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800aefc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800af00:	2300      	movs	r3, #0
 800af02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800af06:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800af0a:	460b      	mov	r3, r1
 800af0c:	4313      	orrs	r3, r2
 800af0e:	f000 8099 	beq.w	800b044 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800af12:	4b83      	ldr	r3, [pc, #524]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a82      	ldr	r2, [pc, #520]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800af18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800af1e:	f7f8 fd67 	bl	80039f0 <HAL_GetTick>
 800af22:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af26:	e00b      	b.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af28:	f7f8 fd62 	bl	80039f0 <HAL_GetTick>
 800af2c:	4602      	mov	r2, r0
 800af2e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800af32:	1ad3      	subs	r3, r2, r3
 800af34:	2b64      	cmp	r3, #100	; 0x64
 800af36:	d903      	bls.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800af38:	2303      	movs	r3, #3
 800af3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af3e:	e005      	b.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af40:	4b77      	ldr	r3, [pc, #476]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d0ed      	beq.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800af4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af50:	2b00      	cmp	r3, #0
 800af52:	d173      	bne.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800af54:	4b71      	ldr	r3, [pc, #452]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800af58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af60:	4053      	eors	r3, r2
 800af62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af66:	2b00      	cmp	r3, #0
 800af68:	d015      	beq.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800af6a:	4b6c      	ldr	r3, [pc, #432]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af72:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800af76:	4b69      	ldr	r3, [pc, #420]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af7a:	4a68      	ldr	r2, [pc, #416]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af80:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800af82:	4b66      	ldr	r3, [pc, #408]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af86:	4a65      	ldr	r2, [pc, #404]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af8c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800af8e:	4a63      	ldr	r2, [pc, #396]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800af94:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800af96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afa2:	d118      	bne.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afa4:	f7f8 fd24 	bl	80039f0 <HAL_GetTick>
 800afa8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800afac:	e00d      	b.n	800afca <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800afae:	f7f8 fd1f 	bl	80039f0 <HAL_GetTick>
 800afb2:	4602      	mov	r2, r0
 800afb4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800afb8:	1ad2      	subs	r2, r2, r3
 800afba:	f241 3388 	movw	r3, #5000	; 0x1388
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d903      	bls.n	800afca <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800afc2:	2303      	movs	r3, #3
 800afc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800afc8:	e005      	b.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800afca:	4b54      	ldr	r3, [pc, #336]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afce:	f003 0302 	and.w	r3, r3, #2
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d0eb      	beq.n	800afae <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800afd6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d129      	bne.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800afde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afe2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800afe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800afee:	d10e      	bne.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x846>
 800aff0:	4b4a      	ldr	r3, [pc, #296]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aff2:	691b      	ldr	r3, [r3, #16]
 800aff4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800aff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800affc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b000:	091a      	lsrs	r2, r3, #4
 800b002:	4b48      	ldr	r3, [pc, #288]	; (800b124 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b004:	4013      	ands	r3, r2
 800b006:	4a45      	ldr	r2, [pc, #276]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b008:	430b      	orrs	r3, r1
 800b00a:	6113      	str	r3, [r2, #16]
 800b00c:	e005      	b.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b00e:	4b43      	ldr	r3, [pc, #268]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b010:	691b      	ldr	r3, [r3, #16]
 800b012:	4a42      	ldr	r2, [pc, #264]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b014:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b018:	6113      	str	r3, [r2, #16]
 800b01a:	4b40      	ldr	r3, [pc, #256]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b01c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b01e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b022:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b02a:	4a3c      	ldr	r2, [pc, #240]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b02c:	430b      	orrs	r3, r1
 800b02e:	6713      	str	r3, [r2, #112]	; 0x70
 800b030:	e008      	b.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b032:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b036:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800b03a:	e003      	b.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b03c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b040:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04c:	f002 0301 	and.w	r3, r2, #1
 800b050:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b054:	2300      	movs	r3, #0
 800b056:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b05a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b05e:	460b      	mov	r3, r1
 800b060:	4313      	orrs	r3, r2
 800b062:	f000 808f 	beq.w	800b184 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b06a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b06c:	2b28      	cmp	r3, #40	; 0x28
 800b06e:	d871      	bhi.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b070:	a201      	add	r2, pc, #4	; (adr r2, 800b078 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b076:	bf00      	nop
 800b078:	0800b15d 	.word	0x0800b15d
 800b07c:	0800b155 	.word	0x0800b155
 800b080:	0800b155 	.word	0x0800b155
 800b084:	0800b155 	.word	0x0800b155
 800b088:	0800b155 	.word	0x0800b155
 800b08c:	0800b155 	.word	0x0800b155
 800b090:	0800b155 	.word	0x0800b155
 800b094:	0800b155 	.word	0x0800b155
 800b098:	0800b129 	.word	0x0800b129
 800b09c:	0800b155 	.word	0x0800b155
 800b0a0:	0800b155 	.word	0x0800b155
 800b0a4:	0800b155 	.word	0x0800b155
 800b0a8:	0800b155 	.word	0x0800b155
 800b0ac:	0800b155 	.word	0x0800b155
 800b0b0:	0800b155 	.word	0x0800b155
 800b0b4:	0800b155 	.word	0x0800b155
 800b0b8:	0800b13f 	.word	0x0800b13f
 800b0bc:	0800b155 	.word	0x0800b155
 800b0c0:	0800b155 	.word	0x0800b155
 800b0c4:	0800b155 	.word	0x0800b155
 800b0c8:	0800b155 	.word	0x0800b155
 800b0cc:	0800b155 	.word	0x0800b155
 800b0d0:	0800b155 	.word	0x0800b155
 800b0d4:	0800b155 	.word	0x0800b155
 800b0d8:	0800b15d 	.word	0x0800b15d
 800b0dc:	0800b155 	.word	0x0800b155
 800b0e0:	0800b155 	.word	0x0800b155
 800b0e4:	0800b155 	.word	0x0800b155
 800b0e8:	0800b155 	.word	0x0800b155
 800b0ec:	0800b155 	.word	0x0800b155
 800b0f0:	0800b155 	.word	0x0800b155
 800b0f4:	0800b155 	.word	0x0800b155
 800b0f8:	0800b15d 	.word	0x0800b15d
 800b0fc:	0800b155 	.word	0x0800b155
 800b100:	0800b155 	.word	0x0800b155
 800b104:	0800b155 	.word	0x0800b155
 800b108:	0800b155 	.word	0x0800b155
 800b10c:	0800b155 	.word	0x0800b155
 800b110:	0800b155 	.word	0x0800b155
 800b114:	0800b155 	.word	0x0800b155
 800b118:	0800b15d 	.word	0x0800b15d
 800b11c:	58024400 	.word	0x58024400
 800b120:	58024800 	.word	0x58024800
 800b124:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b12c:	3308      	adds	r3, #8
 800b12e:	2101      	movs	r1, #1
 800b130:	4618      	mov	r0, r3
 800b132:	f001 fdcb 	bl	800cccc <RCCEx_PLL2_Config>
 800b136:	4603      	mov	r3, r0
 800b138:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b13c:	e00f      	b.n	800b15e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b13e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b142:	3328      	adds	r3, #40	; 0x28
 800b144:	2101      	movs	r1, #1
 800b146:	4618      	mov	r0, r3
 800b148:	f001 fe72 	bl	800ce30 <RCCEx_PLL3_Config>
 800b14c:	4603      	mov	r3, r0
 800b14e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b152:	e004      	b.n	800b15e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b154:	2301      	movs	r3, #1
 800b156:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b15a:	e000      	b.n	800b15e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b15c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b15e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b162:	2b00      	cmp	r3, #0
 800b164:	d10a      	bne.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b166:	4bbf      	ldr	r3, [pc, #764]	; (800b464 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b16a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b16e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b172:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b174:	4abb      	ldr	r2, [pc, #748]	; (800b464 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b176:	430b      	orrs	r3, r1
 800b178:	6553      	str	r3, [r2, #84]	; 0x54
 800b17a:	e003      	b.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b17c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b180:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b18c:	f002 0302 	and.w	r3, r2, #2
 800b190:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b194:	2300      	movs	r3, #0
 800b196:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b19a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b19e:	460b      	mov	r3, r1
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	d041      	beq.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b1a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1aa:	2b05      	cmp	r3, #5
 800b1ac:	d824      	bhi.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b1ae:	a201      	add	r2, pc, #4	; (adr r2, 800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b4:	0800b201 	.word	0x0800b201
 800b1b8:	0800b1cd 	.word	0x0800b1cd
 800b1bc:	0800b1e3 	.word	0x0800b1e3
 800b1c0:	0800b201 	.word	0x0800b201
 800b1c4:	0800b201 	.word	0x0800b201
 800b1c8:	0800b201 	.word	0x0800b201
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b1cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1d0:	3308      	adds	r3, #8
 800b1d2:	2101      	movs	r1, #1
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f001 fd79 	bl	800cccc <RCCEx_PLL2_Config>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b1e0:	e00f      	b.n	800b202 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1e6:	3328      	adds	r3, #40	; 0x28
 800b1e8:	2101      	movs	r1, #1
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f001 fe20 	bl	800ce30 <RCCEx_PLL3_Config>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b1f6:	e004      	b.n	800b202 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b1fe:	e000      	b.n	800b202 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b200:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b202:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b206:	2b00      	cmp	r3, #0
 800b208:	d10a      	bne.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b20a:	4b96      	ldr	r3, [pc, #600]	; (800b464 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b20c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b20e:	f023 0107 	bic.w	r1, r3, #7
 800b212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b218:	4a92      	ldr	r2, [pc, #584]	; (800b464 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b21a:	430b      	orrs	r3, r1
 800b21c:	6553      	str	r3, [r2, #84]	; 0x54
 800b21e:	e003      	b.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b220:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b224:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b230:	f002 0304 	and.w	r3, r2, #4
 800b234:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b238:	2300      	movs	r3, #0
 800b23a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b23e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b242:	460b      	mov	r3, r1
 800b244:	4313      	orrs	r3, r2
 800b246:	d044      	beq.n	800b2d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b24c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b250:	2b05      	cmp	r3, #5
 800b252:	d825      	bhi.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b254:	a201      	add	r2, pc, #4	; (adr r2, 800b25c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b25a:	bf00      	nop
 800b25c:	0800b2a9 	.word	0x0800b2a9
 800b260:	0800b275 	.word	0x0800b275
 800b264:	0800b28b 	.word	0x0800b28b
 800b268:	0800b2a9 	.word	0x0800b2a9
 800b26c:	0800b2a9 	.word	0x0800b2a9
 800b270:	0800b2a9 	.word	0x0800b2a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b278:	3308      	adds	r3, #8
 800b27a:	2101      	movs	r1, #1
 800b27c:	4618      	mov	r0, r3
 800b27e:	f001 fd25 	bl	800cccc <RCCEx_PLL2_Config>
 800b282:	4603      	mov	r3, r0
 800b284:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b288:	e00f      	b.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b28a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b28e:	3328      	adds	r3, #40	; 0x28
 800b290:	2101      	movs	r1, #1
 800b292:	4618      	mov	r0, r3
 800b294:	f001 fdcc 	bl	800ce30 <RCCEx_PLL3_Config>
 800b298:	4603      	mov	r3, r0
 800b29a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b29e:	e004      	b.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b2a6:	e000      	b.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b2a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d10b      	bne.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b2b2:	4b6c      	ldr	r3, [pc, #432]	; (800b464 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b2b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2b6:	f023 0107 	bic.w	r1, r3, #7
 800b2ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2c2:	4a68      	ldr	r2, [pc, #416]	; (800b464 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b2c4:	430b      	orrs	r3, r1
 800b2c6:	6593      	str	r3, [r2, #88]	; 0x58
 800b2c8:	e003      	b.n	800b2d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2ce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b2d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2da:	f002 0320 	and.w	r3, r2, #32
 800b2de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b2e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	d055      	beq.n	800b39e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b2f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2fe:	d033      	beq.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b300:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b304:	d82c      	bhi.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b30a:	d02f      	beq.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b30c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b310:	d826      	bhi.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b312:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b316:	d02b      	beq.n	800b370 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b318:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b31c:	d820      	bhi.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b31e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b322:	d012      	beq.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b328:	d81a      	bhi.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d022      	beq.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b32e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b332:	d115      	bne.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b338:	3308      	adds	r3, #8
 800b33a:	2100      	movs	r1, #0
 800b33c:	4618      	mov	r0, r3
 800b33e:	f001 fcc5 	bl	800cccc <RCCEx_PLL2_Config>
 800b342:	4603      	mov	r3, r0
 800b344:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b348:	e015      	b.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b34a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b34e:	3328      	adds	r3, #40	; 0x28
 800b350:	2102      	movs	r1, #2
 800b352:	4618      	mov	r0, r3
 800b354:	f001 fd6c 	bl	800ce30 <RCCEx_PLL3_Config>
 800b358:	4603      	mov	r3, r0
 800b35a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b35e:	e00a      	b.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b360:	2301      	movs	r3, #1
 800b362:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b366:	e006      	b.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b368:	bf00      	nop
 800b36a:	e004      	b.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b36c:	bf00      	nop
 800b36e:	e002      	b.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b370:	bf00      	nop
 800b372:	e000      	b.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b374:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b376:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d10b      	bne.n	800b396 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b37e:	4b39      	ldr	r3, [pc, #228]	; (800b464 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b382:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b38a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b38e:	4a35      	ldr	r2, [pc, #212]	; (800b464 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b390:	430b      	orrs	r3, r1
 800b392:	6553      	str	r3, [r2, #84]	; 0x54
 800b394:	e003      	b.n	800b39e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b396:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b39a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b39e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b3aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b3b4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b3b8:	460b      	mov	r3, r1
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	d058      	beq.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b3be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b3c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b3ca:	d033      	beq.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b3cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b3d0:	d82c      	bhi.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b3d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3d6:	d02f      	beq.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b3d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3dc:	d826      	bhi.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b3de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b3e2:	d02b      	beq.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b3e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b3e8:	d820      	bhi.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b3ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3ee:	d012      	beq.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b3f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3f4:	d81a      	bhi.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d022      	beq.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b3fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3fe:	d115      	bne.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b404:	3308      	adds	r3, #8
 800b406:	2100      	movs	r1, #0
 800b408:	4618      	mov	r0, r3
 800b40a:	f001 fc5f 	bl	800cccc <RCCEx_PLL2_Config>
 800b40e:	4603      	mov	r3, r0
 800b410:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b414:	e015      	b.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b41a:	3328      	adds	r3, #40	; 0x28
 800b41c:	2102      	movs	r1, #2
 800b41e:	4618      	mov	r0, r3
 800b420:	f001 fd06 	bl	800ce30 <RCCEx_PLL3_Config>
 800b424:	4603      	mov	r3, r0
 800b426:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b42a:	e00a      	b.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b42c:	2301      	movs	r3, #1
 800b42e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b432:	e006      	b.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b434:	bf00      	nop
 800b436:	e004      	b.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b438:	bf00      	nop
 800b43a:	e002      	b.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b43c:	bf00      	nop
 800b43e:	e000      	b.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b440:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b442:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b446:	2b00      	cmp	r3, #0
 800b448:	d10e      	bne.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b44a:	4b06      	ldr	r3, [pc, #24]	; (800b464 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b44c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b44e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b452:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b456:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b45a:	4a02      	ldr	r2, [pc, #8]	; (800b464 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b45c:	430b      	orrs	r3, r1
 800b45e:	6593      	str	r3, [r2, #88]	; 0x58
 800b460:	e006      	b.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b462:	bf00      	nop
 800b464:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b468:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b46c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b470:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b478:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b47c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b480:	2300      	movs	r3, #0
 800b482:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b486:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b48a:	460b      	mov	r3, r1
 800b48c:	4313      	orrs	r3, r2
 800b48e:	d055      	beq.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b494:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b498:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b49c:	d033      	beq.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b49e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b4a2:	d82c      	bhi.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b4a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4a8:	d02f      	beq.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b4aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4ae:	d826      	bhi.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b4b0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b4b4:	d02b      	beq.n	800b50e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b4b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b4ba:	d820      	bhi.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b4bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b4c0:	d012      	beq.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b4c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b4c6:	d81a      	bhi.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d022      	beq.n	800b512 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b4cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4d0:	d115      	bne.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b4d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4d6:	3308      	adds	r3, #8
 800b4d8:	2100      	movs	r1, #0
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f001 fbf6 	bl	800cccc <RCCEx_PLL2_Config>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b4e6:	e015      	b.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b4e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ec:	3328      	adds	r3, #40	; 0x28
 800b4ee:	2102      	movs	r1, #2
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f001 fc9d 	bl	800ce30 <RCCEx_PLL3_Config>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b4fc:	e00a      	b.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4fe:	2301      	movs	r3, #1
 800b500:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b504:	e006      	b.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b506:	bf00      	nop
 800b508:	e004      	b.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b50a:	bf00      	nop
 800b50c:	e002      	b.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b50e:	bf00      	nop
 800b510:	e000      	b.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b512:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b514:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d10b      	bne.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b51c:	4ba0      	ldr	r3, [pc, #640]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b51e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b520:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b528:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b52c:	4a9c      	ldr	r2, [pc, #624]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b52e:	430b      	orrs	r3, r1
 800b530:	6593      	str	r3, [r2, #88]	; 0x58
 800b532:	e003      	b.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b534:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b538:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b53c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b544:	f002 0308 	and.w	r3, r2, #8
 800b548:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b54c:	2300      	movs	r3, #0
 800b54e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b552:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b556:	460b      	mov	r3, r1
 800b558:	4313      	orrs	r3, r2
 800b55a:	d01e      	beq.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b55c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b568:	d10c      	bne.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b56a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b56e:	3328      	adds	r3, #40	; 0x28
 800b570:	2102      	movs	r1, #2
 800b572:	4618      	mov	r0, r3
 800b574:	f001 fc5c 	bl	800ce30 <RCCEx_PLL3_Config>
 800b578:	4603      	mov	r3, r0
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d002      	beq.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b57e:	2301      	movs	r3, #1
 800b580:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b584:	4b86      	ldr	r3, [pc, #536]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b588:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b58c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b590:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b594:	4a82      	ldr	r2, [pc, #520]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b596:	430b      	orrs	r3, r1
 800b598:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b59a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a2:	f002 0310 	and.w	r3, r2, #16
 800b5a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b5b0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	d01e      	beq.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b5ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b5c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5c6:	d10c      	bne.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b5c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5cc:	3328      	adds	r3, #40	; 0x28
 800b5ce:	2102      	movs	r1, #2
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f001 fc2d 	bl	800ce30 <RCCEx_PLL3_Config>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d002      	beq.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b5e2:	4b6f      	ldr	r3, [pc, #444]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b5e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b5ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b5f2:	4a6b      	ldr	r2, [pc, #428]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b5f4:	430b      	orrs	r3, r1
 800b5f6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b5f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b600:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b604:	67bb      	str	r3, [r7, #120]	; 0x78
 800b606:	2300      	movs	r3, #0
 800b608:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b60a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b60e:	460b      	mov	r3, r1
 800b610:	4313      	orrs	r3, r2
 800b612:	d03e      	beq.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b618:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b61c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b620:	d022      	beq.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b622:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b626:	d81b      	bhi.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d003      	beq.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b62c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b630:	d00b      	beq.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b632:	e015      	b.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b638:	3308      	adds	r3, #8
 800b63a:	2100      	movs	r1, #0
 800b63c:	4618      	mov	r0, r3
 800b63e:	f001 fb45 	bl	800cccc <RCCEx_PLL2_Config>
 800b642:	4603      	mov	r3, r0
 800b644:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b648:	e00f      	b.n	800b66a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b64a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b64e:	3328      	adds	r3, #40	; 0x28
 800b650:	2102      	movs	r1, #2
 800b652:	4618      	mov	r0, r3
 800b654:	f001 fbec 	bl	800ce30 <RCCEx_PLL3_Config>
 800b658:	4603      	mov	r3, r0
 800b65a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b65e:	e004      	b.n	800b66a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b660:	2301      	movs	r3, #1
 800b662:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b666:	e000      	b.n	800b66a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b66a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d10b      	bne.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b672:	4b4b      	ldr	r3, [pc, #300]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b676:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b67a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b67e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b682:	4a47      	ldr	r2, [pc, #284]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b684:	430b      	orrs	r3, r1
 800b686:	6593      	str	r3, [r2, #88]	; 0x58
 800b688:	e003      	b.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b68a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b68e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b69e:	673b      	str	r3, [r7, #112]	; 0x70
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	677b      	str	r3, [r7, #116]	; 0x74
 800b6a4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	d03b      	beq.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b6ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b6ba:	d01f      	beq.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b6bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b6c0:	d818      	bhi.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b6c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6c6:	d003      	beq.n	800b6d0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b6c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b6cc:	d007      	beq.n	800b6de <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b6ce:	e011      	b.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6d0:	4b33      	ldr	r3, [pc, #204]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d4:	4a32      	ldr	r2, [pc, #200]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b6dc:	e00f      	b.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b6de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6e2:	3328      	adds	r3, #40	; 0x28
 800b6e4:	2101      	movs	r1, #1
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f001 fba2 	bl	800ce30 <RCCEx_PLL3_Config>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b6f2:	e004      	b.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b6fa:	e000      	b.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b6fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b702:	2b00      	cmp	r3, #0
 800b704:	d10b      	bne.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b706:	4b26      	ldr	r3, [pc, #152]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b70a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b70e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b712:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b716:	4a22      	ldr	r2, [pc, #136]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b718:	430b      	orrs	r3, r1
 800b71a:	6553      	str	r3, [r2, #84]	; 0x54
 800b71c:	e003      	b.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b71e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b722:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b732:	66bb      	str	r3, [r7, #104]	; 0x68
 800b734:	2300      	movs	r3, #0
 800b736:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b738:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b73c:	460b      	mov	r3, r1
 800b73e:	4313      	orrs	r3, r2
 800b740:	d034      	beq.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d003      	beq.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b74c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b750:	d007      	beq.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b752:	e011      	b.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b754:	4b12      	ldr	r3, [pc, #72]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b758:	4a11      	ldr	r2, [pc, #68]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b75a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b75e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b760:	e00e      	b.n	800b780 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b766:	3308      	adds	r3, #8
 800b768:	2102      	movs	r1, #2
 800b76a:	4618      	mov	r0, r3
 800b76c:	f001 faae 	bl	800cccc <RCCEx_PLL2_Config>
 800b770:	4603      	mov	r3, r0
 800b772:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b776:	e003      	b.n	800b780 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b778:	2301      	movs	r3, #1
 800b77a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b77e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b780:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b784:	2b00      	cmp	r3, #0
 800b786:	d10d      	bne.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b788:	4b05      	ldr	r3, [pc, #20]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b78a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b78c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b796:	4a02      	ldr	r2, [pc, #8]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b798:	430b      	orrs	r3, r1
 800b79a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b79c:	e006      	b.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b79e:	bf00      	nop
 800b7a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b7ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b7b8:	663b      	str	r3, [r7, #96]	; 0x60
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	667b      	str	r3, [r7, #100]	; 0x64
 800b7be:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	d00c      	beq.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b7c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7cc:	3328      	adds	r3, #40	; 0x28
 800b7ce:	2102      	movs	r1, #2
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f001 fb2d 	bl	800ce30 <RCCEx_PLL3_Config>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d002      	beq.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b7e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ea:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b7ee:	65bb      	str	r3, [r7, #88]	; 0x58
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b7f4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	d036      	beq.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b7fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b802:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b804:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b808:	d018      	beq.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b80a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b80e:	d811      	bhi.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b814:	d014      	beq.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b816:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b81a:	d80b      	bhi.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d011      	beq.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b824:	d106      	bne.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b826:	4bb7      	ldr	r3, [pc, #732]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b82a:	4ab6      	ldr	r2, [pc, #728]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b82c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b830:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b832:	e008      	b.n	800b846 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b834:	2301      	movs	r3, #1
 800b836:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b83a:	e004      	b.n	800b846 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b83c:	bf00      	nop
 800b83e:	e002      	b.n	800b846 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b840:	bf00      	nop
 800b842:	e000      	b.n	800b846 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b844:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b846:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d10a      	bne.n	800b864 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b84e:	4bad      	ldr	r3, [pc, #692]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b852:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b85a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b85c:	4aa9      	ldr	r2, [pc, #676]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b85e:	430b      	orrs	r3, r1
 800b860:	6553      	str	r3, [r2, #84]	; 0x54
 800b862:	e003      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b864:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b868:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b86c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b874:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b878:	653b      	str	r3, [r7, #80]	; 0x50
 800b87a:	2300      	movs	r3, #0
 800b87c:	657b      	str	r3, [r7, #84]	; 0x54
 800b87e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b882:	460b      	mov	r3, r1
 800b884:	4313      	orrs	r3, r2
 800b886:	d009      	beq.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b888:	4b9e      	ldr	r3, [pc, #632]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b88a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b88c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b896:	4a9b      	ldr	r2, [pc, #620]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b898:	430b      	orrs	r3, r1
 800b89a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b89c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b8a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b8ae:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b8b2:	460b      	mov	r3, r1
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	d009      	beq.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b8b8:	4b92      	ldr	r3, [pc, #584]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8bc:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b8c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b8c6:	4a8f      	ldr	r2, [pc, #572]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8c8:	430b      	orrs	r3, r1
 800b8ca:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b8cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b8d8:	643b      	str	r3, [r7, #64]	; 0x40
 800b8da:	2300      	movs	r3, #0
 800b8dc:	647b      	str	r3, [r7, #68]	; 0x44
 800b8de:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	d00e      	beq.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b8e8:	4b86      	ldr	r3, [pc, #536]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8ea:	691b      	ldr	r3, [r3, #16]
 800b8ec:	4a85      	ldr	r2, [pc, #532]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b8f2:	6113      	str	r3, [r2, #16]
 800b8f4:	4b83      	ldr	r3, [pc, #524]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8f6:	6919      	ldr	r1, [r3, #16]
 800b8f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b900:	4a80      	ldr	r2, [pc, #512]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b902:	430b      	orrs	r3, r1
 800b904:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b906:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b912:	63bb      	str	r3, [r7, #56]	; 0x38
 800b914:	2300      	movs	r3, #0
 800b916:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b918:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b91c:	460b      	mov	r3, r1
 800b91e:	4313      	orrs	r3, r2
 800b920:	d009      	beq.n	800b936 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b922:	4b78      	ldr	r3, [pc, #480]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b926:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b92a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b92e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b930:	4a74      	ldr	r2, [pc, #464]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b932:	430b      	orrs	r3, r1
 800b934:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b942:	633b      	str	r3, [r7, #48]	; 0x30
 800b944:	2300      	movs	r3, #0
 800b946:	637b      	str	r3, [r7, #52]	; 0x34
 800b948:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b94c:	460b      	mov	r3, r1
 800b94e:	4313      	orrs	r3, r2
 800b950:	d00a      	beq.n	800b968 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b952:	4b6c      	ldr	r3, [pc, #432]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b956:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b95a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b95e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b962:	4a68      	ldr	r2, [pc, #416]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b964:	430b      	orrs	r3, r1
 800b966:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b970:	2100      	movs	r1, #0
 800b972:	62b9      	str	r1, [r7, #40]	; 0x28
 800b974:	f003 0301 	and.w	r3, r3, #1
 800b978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b97a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b97e:	460b      	mov	r3, r1
 800b980:	4313      	orrs	r3, r2
 800b982:	d011      	beq.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b988:	3308      	adds	r3, #8
 800b98a:	2100      	movs	r1, #0
 800b98c:	4618      	mov	r0, r3
 800b98e:	f001 f99d 	bl	800cccc <RCCEx_PLL2_Config>
 800b992:	4603      	mov	r3, r0
 800b994:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b998:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d003      	beq.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b9a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b0:	2100      	movs	r1, #0
 800b9b2:	6239      	str	r1, [r7, #32]
 800b9b4:	f003 0302 	and.w	r3, r3, #2
 800b9b8:	627b      	str	r3, [r7, #36]	; 0x24
 800b9ba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b9be:	460b      	mov	r3, r1
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	d011      	beq.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b9c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9c8:	3308      	adds	r3, #8
 800b9ca:	2101      	movs	r1, #1
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f001 f97d 	bl	800cccc <RCCEx_PLL2_Config>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b9d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d003      	beq.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b9e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f0:	2100      	movs	r1, #0
 800b9f2:	61b9      	str	r1, [r7, #24]
 800b9f4:	f003 0304 	and.w	r3, r3, #4
 800b9f8:	61fb      	str	r3, [r7, #28]
 800b9fa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b9fe:	460b      	mov	r3, r1
 800ba00:	4313      	orrs	r3, r2
 800ba02:	d011      	beq.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba08:	3308      	adds	r3, #8
 800ba0a:	2102      	movs	r1, #2
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f001 f95d 	bl	800cccc <RCCEx_PLL2_Config>
 800ba12:	4603      	mov	r3, r0
 800ba14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ba18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d003      	beq.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba24:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ba28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba30:	2100      	movs	r1, #0
 800ba32:	6139      	str	r1, [r7, #16]
 800ba34:	f003 0308 	and.w	r3, r3, #8
 800ba38:	617b      	str	r3, [r7, #20]
 800ba3a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ba3e:	460b      	mov	r3, r1
 800ba40:	4313      	orrs	r3, r2
 800ba42:	d011      	beq.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba48:	3328      	adds	r3, #40	; 0x28
 800ba4a:	2100      	movs	r1, #0
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f001 f9ef 	bl	800ce30 <RCCEx_PLL3_Config>
 800ba52:	4603      	mov	r3, r0
 800ba54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800ba58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d003      	beq.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ba68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba70:	2100      	movs	r1, #0
 800ba72:	60b9      	str	r1, [r7, #8]
 800ba74:	f003 0310 	and.w	r3, r3, #16
 800ba78:	60fb      	str	r3, [r7, #12]
 800ba7a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ba7e:	460b      	mov	r3, r1
 800ba80:	4313      	orrs	r3, r2
 800ba82:	d011      	beq.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba88:	3328      	adds	r3, #40	; 0x28
 800ba8a:	2101      	movs	r1, #1
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f001 f9cf 	bl	800ce30 <RCCEx_PLL3_Config>
 800ba92:	4603      	mov	r3, r0
 800ba94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ba98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d003      	beq.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baa0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800baa4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800baa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab0:	2100      	movs	r1, #0
 800bab2:	6039      	str	r1, [r7, #0]
 800bab4:	f003 0320 	and.w	r3, r3, #32
 800bab8:	607b      	str	r3, [r7, #4]
 800baba:	e9d7 1200 	ldrd	r1, r2, [r7]
 800babe:	460b      	mov	r3, r1
 800bac0:	4313      	orrs	r3, r2
 800bac2:	d011      	beq.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bac8:	3328      	adds	r3, #40	; 0x28
 800baca:	2102      	movs	r1, #2
 800bacc:	4618      	mov	r0, r3
 800bace:	f001 f9af 	bl	800ce30 <RCCEx_PLL3_Config>
 800bad2:	4603      	mov	r3, r0
 800bad4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bad8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800badc:	2b00      	cmp	r3, #0
 800bade:	d003      	beq.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bae0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bae4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800bae8:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800baec:	2b00      	cmp	r3, #0
 800baee:	d101      	bne.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800baf0:	2300      	movs	r3, #0
 800baf2:	e000      	b.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800baf4:	2301      	movs	r3, #1
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800bafc:	46bd      	mov	sp, r7
 800bafe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb02:	bf00      	nop
 800bb04:	58024400 	.word	0x58024400

0800bb08 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b090      	sub	sp, #64	; 0x40
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bb12:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb16:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bb1a:	430b      	orrs	r3, r1
 800bb1c:	f040 8094 	bne.w	800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bb20:	4b9b      	ldr	r3, [pc, #620]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb24:	f003 0307 	and.w	r3, r3, #7
 800bb28:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb2c:	2b04      	cmp	r3, #4
 800bb2e:	f200 8087 	bhi.w	800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bb32:	a201      	add	r2, pc, #4	; (adr r2, 800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bb34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb38:	0800bb4d 	.word	0x0800bb4d
 800bb3c:	0800bb75 	.word	0x0800bb75
 800bb40:	0800bb9d 	.word	0x0800bb9d
 800bb44:	0800bc39 	.word	0x0800bc39
 800bb48:	0800bbc5 	.word	0x0800bbc5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb4c:	4b90      	ldr	r3, [pc, #576]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb58:	d108      	bne.n	800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f000 ff62 	bl	800ca28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb68:	f000 bc93 	b.w	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb70:	f000 bc8f 	b.w	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb74:	4b86      	ldr	r3, [pc, #536]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb80:	d108      	bne.n	800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb82:	f107 0318 	add.w	r3, r7, #24
 800bb86:	4618      	mov	r0, r3
 800bb88:	f000 fca6 	bl	800c4d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bb8c:	69bb      	ldr	r3, [r7, #24]
 800bb8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb90:	f000 bc7f 	b.w	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb94:	2300      	movs	r3, #0
 800bb96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb98:	f000 bc7b 	b.w	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bb9c:	4b7c      	ldr	r3, [pc, #496]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bba4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bba8:	d108      	bne.n	800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbaa:	f107 030c 	add.w	r3, r7, #12
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f000 fde6 	bl	800c780 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbb8:	f000 bc6b 	b.w	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbc0:	f000 bc67 	b.w	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bbc4:	4b72      	ldr	r3, [pc, #456]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bbcc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bbce:	4b70      	ldr	r3, [pc, #448]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f003 0304 	and.w	r3, r3, #4
 800bbd6:	2b04      	cmp	r3, #4
 800bbd8:	d10c      	bne.n	800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bbda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d109      	bne.n	800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bbe0:	4b6b      	ldr	r3, [pc, #428]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	08db      	lsrs	r3, r3, #3
 800bbe6:	f003 0303 	and.w	r3, r3, #3
 800bbea:	4a6a      	ldr	r2, [pc, #424]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bbec:	fa22 f303 	lsr.w	r3, r2, r3
 800bbf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbf2:	e01f      	b.n	800bc34 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bbf4:	4b66      	ldr	r3, [pc, #408]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc00:	d106      	bne.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bc02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc08:	d102      	bne.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bc0a:	4b63      	ldr	r3, [pc, #396]	; (800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bc0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc0e:	e011      	b.n	800bc34 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc10:	4b5f      	ldr	r3, [pc, #380]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc1c:	d106      	bne.n	800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bc1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc24:	d102      	bne.n	800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bc26:	4b5d      	ldr	r3, [pc, #372]	; (800bd9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc28:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc2a:	e003      	b.n	800bc34 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bc30:	f000 bc2f 	b.w	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bc34:	f000 bc2d 	b.w	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bc38:	4b59      	ldr	r3, [pc, #356]	; (800bda0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bc3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc3c:	f000 bc29 	b.w	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bc40:	2300      	movs	r3, #0
 800bc42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc44:	f000 bc25 	b.w	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bc48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc4c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bc50:	430b      	orrs	r3, r1
 800bc52:	f040 80a7 	bne.w	800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bc56:	4b4e      	ldr	r3, [pc, #312]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc5a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bc5e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bc60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bc66:	d054      	beq.n	800bd12 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800bc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bc6e:	f200 808b 	bhi.w	800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc74:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bc78:	f000 8083 	beq.w	800bd82 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800bc7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bc82:	f200 8081 	bhi.w	800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc8c:	d02f      	beq.n	800bcee <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc94:	d878      	bhi.n	800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d004      	beq.n	800bca6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800bc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bca2:	d012      	beq.n	800bcca <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800bca4:	e070      	b.n	800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bca6:	4b3a      	ldr	r3, [pc, #232]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bcb2:	d107      	bne.n	800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bcb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f000 feb5 	bl	800ca28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcc2:	e3e6      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcc8:	e3e3      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bcca:	4b31      	ldr	r3, [pc, #196]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bcd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bcd6:	d107      	bne.n	800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bcd8:	f107 0318 	add.w	r3, r7, #24
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f000 fbfb 	bl	800c4d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bce2:	69bb      	ldr	r3, [r7, #24]
 800bce4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bce6:	e3d4      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bce8:	2300      	movs	r3, #0
 800bcea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcec:	e3d1      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bcee:	4b28      	ldr	r3, [pc, #160]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bcf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcfa:	d107      	bne.n	800bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bcfc:	f107 030c 	add.w	r3, r7, #12
 800bd00:	4618      	mov	r0, r3
 800bd02:	f000 fd3d 	bl	800c780 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd0a:	e3c2      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd10:	e3bf      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bd12:	4b1f      	ldr	r3, [pc, #124]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bd1a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd1c:	4b1c      	ldr	r3, [pc, #112]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	f003 0304 	and.w	r3, r3, #4
 800bd24:	2b04      	cmp	r3, #4
 800bd26:	d10c      	bne.n	800bd42 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800bd28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d109      	bne.n	800bd42 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd2e:	4b18      	ldr	r3, [pc, #96]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	08db      	lsrs	r3, r3, #3
 800bd34:	f003 0303 	and.w	r3, r3, #3
 800bd38:	4a16      	ldr	r2, [pc, #88]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bd3a:	fa22 f303 	lsr.w	r3, r2, r3
 800bd3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd40:	e01e      	b.n	800bd80 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bd42:	4b13      	ldr	r3, [pc, #76]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd4e:	d106      	bne.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800bd50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd56:	d102      	bne.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bd58:	4b0f      	ldr	r3, [pc, #60]	; (800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bd5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd5c:	e010      	b.n	800bd80 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bd5e:	4b0c      	ldr	r3, [pc, #48]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd6a:	d106      	bne.n	800bd7a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800bd6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd72:	d102      	bne.n	800bd7a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bd74:	4b09      	ldr	r3, [pc, #36]	; (800bd9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd78:	e002      	b.n	800bd80 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bd7e:	e388      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bd80:	e387      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bd82:	4b07      	ldr	r3, [pc, #28]	; (800bda0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bd84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd86:	e384      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd8c:	e381      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bd8e:	bf00      	nop
 800bd90:	58024400 	.word	0x58024400
 800bd94:	03d09000 	.word	0x03d09000
 800bd98:	003d0900 	.word	0x003d0900
 800bd9c:	02faf080 	.word	0x02faf080
 800bda0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800bda4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bda8:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800bdac:	430b      	orrs	r3, r1
 800bdae:	f040 809c 	bne.w	800beea <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800bdb2:	4b9e      	ldr	r3, [pc, #632]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bdb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdb6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800bdba:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bdbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bdc2:	d054      	beq.n	800be6e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800bdc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bdca:	f200 808b 	bhi.w	800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bdd4:	f000 8083 	beq.w	800bede <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800bdd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bdde:	f200 8081 	bhi.w	800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bde8:	d02f      	beq.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800bdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bdf0:	d878      	bhi.n	800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bdf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d004      	beq.n	800be02 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800bdf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdfa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bdfe:	d012      	beq.n	800be26 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800be00:	e070      	b.n	800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be02:	4b8a      	ldr	r3, [pc, #552]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be0e:	d107      	bne.n	800be20 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be14:	4618      	mov	r0, r3
 800be16:	f000 fe07 	bl	800ca28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be1e:	e338      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be20:	2300      	movs	r3, #0
 800be22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be24:	e335      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be26:	4b81      	ldr	r3, [pc, #516]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be32:	d107      	bne.n	800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be34:	f107 0318 	add.w	r3, r7, #24
 800be38:	4618      	mov	r0, r3
 800be3a:	f000 fb4d 	bl	800c4d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be42:	e326      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be44:	2300      	movs	r3, #0
 800be46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be48:	e323      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be4a:	4b78      	ldr	r3, [pc, #480]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be56:	d107      	bne.n	800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be58:	f107 030c 	add.w	r3, r7, #12
 800be5c:	4618      	mov	r0, r3
 800be5e:	f000 fc8f 	bl	800c780 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be66:	e314      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be68:	2300      	movs	r3, #0
 800be6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be6c:	e311      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800be6e:	4b6f      	ldr	r3, [pc, #444]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800be76:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800be78:	4b6c      	ldr	r3, [pc, #432]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f003 0304 	and.w	r3, r3, #4
 800be80:	2b04      	cmp	r3, #4
 800be82:	d10c      	bne.n	800be9e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800be84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be86:	2b00      	cmp	r3, #0
 800be88:	d109      	bne.n	800be9e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be8a:	4b68      	ldr	r3, [pc, #416]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	08db      	lsrs	r3, r3, #3
 800be90:	f003 0303 	and.w	r3, r3, #3
 800be94:	4a66      	ldr	r2, [pc, #408]	; (800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800be96:	fa22 f303 	lsr.w	r3, r2, r3
 800be9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be9c:	e01e      	b.n	800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be9e:	4b63      	ldr	r3, [pc, #396]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800beaa:	d106      	bne.n	800beba <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800beac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800beb2:	d102      	bne.n	800beba <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800beb4:	4b5f      	ldr	r3, [pc, #380]	; (800c034 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800beb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800beb8:	e010      	b.n	800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800beba:	4b5c      	ldr	r3, [pc, #368]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bec2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bec6:	d106      	bne.n	800bed6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800bec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bece:	d102      	bne.n	800bed6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bed0:	4b59      	ldr	r3, [pc, #356]	; (800c038 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bed2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bed4:	e002      	b.n	800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bed6:	2300      	movs	r3, #0
 800bed8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800beda:	e2da      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bedc:	e2d9      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bede:	4b57      	ldr	r3, [pc, #348]	; (800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bee0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bee2:	e2d6      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bee4:	2300      	movs	r3, #0
 800bee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bee8:	e2d3      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800beea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800beee:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800bef2:	430b      	orrs	r3, r1
 800bef4:	f040 80a7 	bne.w	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800bef8:	4b4c      	ldr	r3, [pc, #304]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800befa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800befc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bf00:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bf02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf08:	d055      	beq.n	800bfb6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800bf0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf10:	f200 8096 	bhi.w	800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bf14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bf1a:	f000 8084 	beq.w	800c026 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800bf1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bf24:	f200 808c 	bhi.w	800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bf28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf2e:	d030      	beq.n	800bf92 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800bf30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf36:	f200 8083 	bhi.w	800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bf3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d004      	beq.n	800bf4a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800bf40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf46:	d012      	beq.n	800bf6e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800bf48:	e07a      	b.n	800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bf4a:	4b38      	ldr	r3, [pc, #224]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf56:	d107      	bne.n	800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f000 fd63 	bl	800ca28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf66:	e294      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf6c:	e291      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf6e:	4b2f      	ldr	r3, [pc, #188]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf7a:	d107      	bne.n	800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf7c:	f107 0318 	add.w	r3, r7, #24
 800bf80:	4618      	mov	r0, r3
 800bf82:	f000 faa9 	bl	800c4d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf86:	69bb      	ldr	r3, [r7, #24]
 800bf88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf8a:	e282      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf90:	e27f      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf92:	4b26      	ldr	r3, [pc, #152]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf9e:	d107      	bne.n	800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfa0:	f107 030c 	add.w	r3, r7, #12
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f000 fbeb 	bl	800c780 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfae:	e270      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfb4:	e26d      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bfb6:	4b1d      	ldr	r3, [pc, #116]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bfb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bfbe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bfc0:	4b1a      	ldr	r3, [pc, #104]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f003 0304 	and.w	r3, r3, #4
 800bfc8:	2b04      	cmp	r3, #4
 800bfca:	d10c      	bne.n	800bfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800bfcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d109      	bne.n	800bfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bfd2:	4b16      	ldr	r3, [pc, #88]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	08db      	lsrs	r3, r3, #3
 800bfd8:	f003 0303 	and.w	r3, r3, #3
 800bfdc:	4a14      	ldr	r2, [pc, #80]	; (800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bfde:	fa22 f303 	lsr.w	r3, r2, r3
 800bfe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfe4:	e01e      	b.n	800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bfe6:	4b11      	ldr	r3, [pc, #68]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bff2:	d106      	bne.n	800c002 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800bff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bff6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bffa:	d102      	bne.n	800c002 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bffc:	4b0d      	ldr	r3, [pc, #52]	; (800c034 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800bffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c000:	e010      	b.n	800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c002:	4b0a      	ldr	r3, [pc, #40]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c00a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c00e:	d106      	bne.n	800c01e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800c010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c016:	d102      	bne.n	800c01e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c018:	4b07      	ldr	r3, [pc, #28]	; (800c038 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c01a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c01c:	e002      	b.n	800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c01e:	2300      	movs	r3, #0
 800c020:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c022:	e236      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c024:	e235      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c026:	4b05      	ldr	r3, [pc, #20]	; (800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c028:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c02a:	e232      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c02c:	58024400 	.word	0x58024400
 800c030:	03d09000 	.word	0x03d09000
 800c034:	003d0900 	.word	0x003d0900
 800c038:	02faf080 	.word	0x02faf080
 800c03c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800c040:	2300      	movs	r3, #0
 800c042:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c044:	e225      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c046:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c04a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c04e:	430b      	orrs	r3, r1
 800c050:	f040 8085 	bne.w	800c15e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c054:	4b9c      	ldr	r3, [pc, #624]	; (800c2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c058:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c05c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c064:	d06b      	beq.n	800c13e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c06c:	d874      	bhi.n	800c158 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c070:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c074:	d056      	beq.n	800c124 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c078:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c07c:	d86c      	bhi.n	800c158 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c080:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c084:	d03b      	beq.n	800c0fe <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c088:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c08c:	d864      	bhi.n	800c158 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c090:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c094:	d021      	beq.n	800c0da <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c098:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c09c:	d85c      	bhi.n	800c158 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d004      	beq.n	800c0ae <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0aa:	d004      	beq.n	800c0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c0ac:	e054      	b.n	800c158 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c0ae:	f7fe fb5f 	bl	800a770 <HAL_RCC_GetPCLK1Freq>
 800c0b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c0b4:	e1ed      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c0b6:	4b84      	ldr	r3, [pc, #528]	; (800c2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0c2:	d107      	bne.n	800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0c4:	f107 0318 	add.w	r3, r7, #24
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f000 fa05 	bl	800c4d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0d2:	e1de      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0d8:	e1db      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c0da:	4b7b      	ldr	r3, [pc, #492]	; (800c2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0e6:	d107      	bne.n	800c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0e8:	f107 030c 	add.w	r3, r7, #12
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f000 fb47 	bl	800c780 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0f6:	e1cc      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0fc:	e1c9      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c0fe:	4b72      	ldr	r3, [pc, #456]	; (800c2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f003 0304 	and.w	r3, r3, #4
 800c106:	2b04      	cmp	r3, #4
 800c108:	d109      	bne.n	800c11e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c10a:	4b6f      	ldr	r3, [pc, #444]	; (800c2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	08db      	lsrs	r3, r3, #3
 800c110:	f003 0303 	and.w	r3, r3, #3
 800c114:	4a6d      	ldr	r2, [pc, #436]	; (800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c116:	fa22 f303 	lsr.w	r3, r2, r3
 800c11a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c11c:	e1b9      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c11e:	2300      	movs	r3, #0
 800c120:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c122:	e1b6      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c124:	4b68      	ldr	r3, [pc, #416]	; (800c2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c12c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c130:	d102      	bne.n	800c138 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c132:	4b67      	ldr	r3, [pc, #412]	; (800c2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c134:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c136:	e1ac      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c138:	2300      	movs	r3, #0
 800c13a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c13c:	e1a9      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c13e:	4b62      	ldr	r3, [pc, #392]	; (800c2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c146:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c14a:	d102      	bne.n	800c152 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c14c:	4b61      	ldr	r3, [pc, #388]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c14e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c150:	e19f      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c152:	2300      	movs	r3, #0
 800c154:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c156:	e19c      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c158:	2300      	movs	r3, #0
 800c15a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c15c:	e199      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c15e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c162:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c166:	430b      	orrs	r3, r1
 800c168:	d173      	bne.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c16a:	4b57      	ldr	r3, [pc, #348]	; (800c2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c16c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c16e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c172:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c176:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c17a:	d02f      	beq.n	800c1dc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c17e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c182:	d863      	bhi.n	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c186:	2b00      	cmp	r3, #0
 800c188:	d004      	beq.n	800c194 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c18c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c190:	d012      	beq.n	800c1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c192:	e05b      	b.n	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c194:	4b4c      	ldr	r3, [pc, #304]	; (800c2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c19c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c1a0:	d107      	bne.n	800c1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1a2:	f107 0318 	add.w	r3, r7, #24
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f000 f996 	bl	800c4d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c1ac:	69bb      	ldr	r3, [r7, #24]
 800c1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1b0:	e16f      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1b6:	e16c      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c1b8:	4b43      	ldr	r3, [pc, #268]	; (800c2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1c4:	d107      	bne.n	800c1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1c6:	f107 030c 	add.w	r3, r7, #12
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f000 fad8 	bl	800c780 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1d4:	e15d      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1da:	e15a      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c1dc:	4b3a      	ldr	r3, [pc, #232]	; (800c2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c1e4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c1e6:	4b38      	ldr	r3, [pc, #224]	; (800c2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f003 0304 	and.w	r3, r3, #4
 800c1ee:	2b04      	cmp	r3, #4
 800c1f0:	d10c      	bne.n	800c20c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c1f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d109      	bne.n	800c20c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1f8:	4b33      	ldr	r3, [pc, #204]	; (800c2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	08db      	lsrs	r3, r3, #3
 800c1fe:	f003 0303 	and.w	r3, r3, #3
 800c202:	4a32      	ldr	r2, [pc, #200]	; (800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c204:	fa22 f303 	lsr.w	r3, r2, r3
 800c208:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c20a:	e01e      	b.n	800c24a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c20c:	4b2e      	ldr	r3, [pc, #184]	; (800c2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c218:	d106      	bne.n	800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c21a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c21c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c220:	d102      	bne.n	800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c222:	4b2b      	ldr	r3, [pc, #172]	; (800c2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c224:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c226:	e010      	b.n	800c24a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c228:	4b27      	ldr	r3, [pc, #156]	; (800c2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c230:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c234:	d106      	bne.n	800c244 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c23c:	d102      	bne.n	800c244 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c23e:	4b25      	ldr	r3, [pc, #148]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c240:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c242:	e002      	b.n	800c24a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c244:	2300      	movs	r3, #0
 800c246:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c248:	e123      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c24a:	e122      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c24c:	2300      	movs	r3, #0
 800c24e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c250:	e11f      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c252:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c256:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c25a:	430b      	orrs	r3, r1
 800c25c:	d13c      	bne.n	800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c25e:	4b1a      	ldr	r3, [pc, #104]	; (800c2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c266:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d004      	beq.n	800c278 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c274:	d012      	beq.n	800c29c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c276:	e023      	b.n	800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c278:	4b13      	ldr	r3, [pc, #76]	; (800c2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c280:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c284:	d107      	bne.n	800c296 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c28a:	4618      	mov	r0, r3
 800c28c:	f000 fbcc 	bl	800ca28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c292:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c294:	e0fd      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c296:	2300      	movs	r3, #0
 800c298:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c29a:	e0fa      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c29c:	4b0a      	ldr	r3, [pc, #40]	; (800c2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2a8:	d107      	bne.n	800c2ba <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2aa:	f107 0318 	add.w	r3, r7, #24
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f000 f912 	bl	800c4d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c2b4:	6a3b      	ldr	r3, [r7, #32]
 800c2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2b8:	e0eb      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2be:	e0e8      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2c4:	e0e5      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c2c6:	bf00      	nop
 800c2c8:	58024400 	.word	0x58024400
 800c2cc:	03d09000 	.word	0x03d09000
 800c2d0:	003d0900 	.word	0x003d0900
 800c2d4:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c2d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2dc:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c2e0:	430b      	orrs	r3, r1
 800c2e2:	f040 8085 	bne.w	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c2e6:	4b6d      	ldr	r3, [pc, #436]	; (800c49c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c2e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2ea:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c2ee:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c2f6:	d06b      	beq.n	800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c2fe:	d874      	bhi.n	800c3ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c306:	d056      	beq.n	800c3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c30a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c30e:	d86c      	bhi.n	800c3ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c312:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c316:	d03b      	beq.n	800c390 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c31a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c31e:	d864      	bhi.n	800c3ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c322:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c326:	d021      	beq.n	800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c32a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c32e:	d85c      	bhi.n	800c3ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c332:	2b00      	cmp	r3, #0
 800c334:	d004      	beq.n	800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c338:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c33c:	d004      	beq.n	800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c33e:	e054      	b.n	800c3ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c340:	f000 f8b4 	bl	800c4ac <HAL_RCCEx_GetD3PCLK1Freq>
 800c344:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c346:	e0a4      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c348:	4b54      	ldr	r3, [pc, #336]	; (800c49c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c350:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c354:	d107      	bne.n	800c366 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c356:	f107 0318 	add.w	r3, r7, #24
 800c35a:	4618      	mov	r0, r3
 800c35c:	f000 f8bc 	bl	800c4d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c360:	69fb      	ldr	r3, [r7, #28]
 800c362:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c364:	e095      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c366:	2300      	movs	r3, #0
 800c368:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c36a:	e092      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c36c:	4b4b      	ldr	r3, [pc, #300]	; (800c49c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c378:	d107      	bne.n	800c38a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c37a:	f107 030c 	add.w	r3, r7, #12
 800c37e:	4618      	mov	r0, r3
 800c380:	f000 f9fe 	bl	800c780 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c388:	e083      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c38a:	2300      	movs	r3, #0
 800c38c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c38e:	e080      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c390:	4b42      	ldr	r3, [pc, #264]	; (800c49c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f003 0304 	and.w	r3, r3, #4
 800c398:	2b04      	cmp	r3, #4
 800c39a:	d109      	bne.n	800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c39c:	4b3f      	ldr	r3, [pc, #252]	; (800c49c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	08db      	lsrs	r3, r3, #3
 800c3a2:	f003 0303 	and.w	r3, r3, #3
 800c3a6:	4a3e      	ldr	r2, [pc, #248]	; (800c4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c3a8:	fa22 f303 	lsr.w	r3, r2, r3
 800c3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3ae:	e070      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3b4:	e06d      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c3b6:	4b39      	ldr	r3, [pc, #228]	; (800c49c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3c2:	d102      	bne.n	800c3ca <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c3c4:	4b37      	ldr	r3, [pc, #220]	; (800c4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3c8:	e063      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3ce:	e060      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c3d0:	4b32      	ldr	r3, [pc, #200]	; (800c49c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3dc:	d102      	bne.n	800c3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c3de:	4b32      	ldr	r3, [pc, #200]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3e2:	e056      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3e8:	e053      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3ee:	e050      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c3f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3f4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c3f8:	430b      	orrs	r3, r1
 800c3fa:	d148      	bne.n	800c48e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c3fc:	4b27      	ldr	r3, [pc, #156]	; (800c49c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c400:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c404:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c40c:	d02a      	beq.n	800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c410:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c414:	d838      	bhi.n	800c488 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d004      	beq.n	800c426 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c41e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c422:	d00d      	beq.n	800c440 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c424:	e030      	b.n	800c488 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c426:	4b1d      	ldr	r3, [pc, #116]	; (800c49c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c42e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c432:	d102      	bne.n	800c43a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c434:	4b1c      	ldr	r3, [pc, #112]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c436:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c438:	e02b      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c43a:	2300      	movs	r3, #0
 800c43c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c43e:	e028      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c440:	4b16      	ldr	r3, [pc, #88]	; (800c49c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c448:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c44c:	d107      	bne.n	800c45e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c44e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c452:	4618      	mov	r0, r3
 800c454:	f000 fae8 	bl	800ca28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c45a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c45c:	e019      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c45e:	2300      	movs	r3, #0
 800c460:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c462:	e016      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c464:	4b0d      	ldr	r3, [pc, #52]	; (800c49c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c46c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c470:	d107      	bne.n	800c482 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c472:	f107 0318 	add.w	r3, r7, #24
 800c476:	4618      	mov	r0, r3
 800c478:	f000 f82e 	bl	800c4d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c47c:	69fb      	ldr	r3, [r7, #28]
 800c47e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c480:	e007      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c482:	2300      	movs	r3, #0
 800c484:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c486:	e004      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c488:	2300      	movs	r3, #0
 800c48a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c48c:	e001      	b.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c48e:	2300      	movs	r3, #0
 800c490:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c494:	4618      	mov	r0, r3
 800c496:	3740      	adds	r7, #64	; 0x40
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}
 800c49c:	58024400 	.word	0x58024400
 800c4a0:	03d09000 	.word	0x03d09000
 800c4a4:	003d0900 	.word	0x003d0900
 800c4a8:	02faf080 	.word	0x02faf080

0800c4ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c4b0:	f7fe f92e 	bl	800a710 <HAL_RCC_GetHCLKFreq>
 800c4b4:	4602      	mov	r2, r0
 800c4b6:	4b06      	ldr	r3, [pc, #24]	; (800c4d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c4b8:	6a1b      	ldr	r3, [r3, #32]
 800c4ba:	091b      	lsrs	r3, r3, #4
 800c4bc:	f003 0307 	and.w	r3, r3, #7
 800c4c0:	4904      	ldr	r1, [pc, #16]	; (800c4d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c4c2:	5ccb      	ldrb	r3, [r1, r3]
 800c4c4:	f003 031f 	and.w	r3, r3, #31
 800c4c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	bd80      	pop	{r7, pc}
 800c4d0:	58024400 	.word	0x58024400
 800c4d4:	080184e8 	.word	0x080184e8

0800c4d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b089      	sub	sp, #36	; 0x24
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c4e0:	4ba1      	ldr	r3, [pc, #644]	; (800c768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4e4:	f003 0303 	and.w	r3, r3, #3
 800c4e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c4ea:	4b9f      	ldr	r3, [pc, #636]	; (800c768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4ee:	0b1b      	lsrs	r3, r3, #12
 800c4f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4f4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c4f6:	4b9c      	ldr	r3, [pc, #624]	; (800c768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4fa:	091b      	lsrs	r3, r3, #4
 800c4fc:	f003 0301 	and.w	r3, r3, #1
 800c500:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c502:	4b99      	ldr	r3, [pc, #612]	; (800c768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c506:	08db      	lsrs	r3, r3, #3
 800c508:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c50c:	693a      	ldr	r2, [r7, #16]
 800c50e:	fb02 f303 	mul.w	r3, r2, r3
 800c512:	ee07 3a90 	vmov	s15, r3
 800c516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c51a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	2b00      	cmp	r3, #0
 800c522:	f000 8111 	beq.w	800c748 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c526:	69bb      	ldr	r3, [r7, #24]
 800c528:	2b02      	cmp	r3, #2
 800c52a:	f000 8083 	beq.w	800c634 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c52e:	69bb      	ldr	r3, [r7, #24]
 800c530:	2b02      	cmp	r3, #2
 800c532:	f200 80a1 	bhi.w	800c678 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c536:	69bb      	ldr	r3, [r7, #24]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d003      	beq.n	800c544 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c53c:	69bb      	ldr	r3, [r7, #24]
 800c53e:	2b01      	cmp	r3, #1
 800c540:	d056      	beq.n	800c5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c542:	e099      	b.n	800c678 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c544:	4b88      	ldr	r3, [pc, #544]	; (800c768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f003 0320 	and.w	r3, r3, #32
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d02d      	beq.n	800c5ac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c550:	4b85      	ldr	r3, [pc, #532]	; (800c768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	08db      	lsrs	r3, r3, #3
 800c556:	f003 0303 	and.w	r3, r3, #3
 800c55a:	4a84      	ldr	r2, [pc, #528]	; (800c76c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c55c:	fa22 f303 	lsr.w	r3, r2, r3
 800c560:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	ee07 3a90 	vmov	s15, r3
 800c568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	ee07 3a90 	vmov	s15, r3
 800c572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c57a:	4b7b      	ldr	r3, [pc, #492]	; (800c768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c57c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c57e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c582:	ee07 3a90 	vmov	s15, r3
 800c586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c58a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c58e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c770 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c59a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c59e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c5aa:	e087      	b.n	800c6bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	ee07 3a90 	vmov	s15, r3
 800c5b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c774 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c5ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5be:	4b6a      	ldr	r3, [pc, #424]	; (800c768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5c6:	ee07 3a90 	vmov	s15, r3
 800c5ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c770 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c5d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c5ee:	e065      	b.n	800c6bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	ee07 3a90 	vmov	s15, r3
 800c5f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c778 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c5fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c602:	4b59      	ldr	r3, [pc, #356]	; (800c768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c60a:	ee07 3a90 	vmov	s15, r3
 800c60e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c612:	ed97 6a03 	vldr	s12, [r7, #12]
 800c616:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c770 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c61a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c61e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c62a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c62e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c632:	e043      	b.n	800c6bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	ee07 3a90 	vmov	s15, r3
 800c63a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c63e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c77c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c646:	4b48      	ldr	r3, [pc, #288]	; (800c768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c64a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c64e:	ee07 3a90 	vmov	s15, r3
 800c652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c656:	ed97 6a03 	vldr	s12, [r7, #12]
 800c65a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c770 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c65e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c66a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c66e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c672:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c676:	e021      	b.n	800c6bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	ee07 3a90 	vmov	s15, r3
 800c67e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c682:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c778 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c68a:	4b37      	ldr	r3, [pc, #220]	; (800c768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c68c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c68e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c692:	ee07 3a90 	vmov	s15, r3
 800c696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c69a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c69e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c770 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c6a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6ba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c6bc:	4b2a      	ldr	r3, [pc, #168]	; (800c768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6c0:	0a5b      	lsrs	r3, r3, #9
 800c6c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6c6:	ee07 3a90 	vmov	s15, r3
 800c6ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c6d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6e2:	ee17 2a90 	vmov	r2, s15
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c6ea:	4b1f      	ldr	r3, [pc, #124]	; (800c768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ee:	0c1b      	lsrs	r3, r3, #16
 800c6f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6f4:	ee07 3a90 	vmov	s15, r3
 800c6f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c700:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c704:	edd7 6a07 	vldr	s13, [r7, #28]
 800c708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c70c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c710:	ee17 2a90 	vmov	r2, s15
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c718:	4b13      	ldr	r3, [pc, #76]	; (800c768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c71c:	0e1b      	lsrs	r3, r3, #24
 800c71e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c722:	ee07 3a90 	vmov	s15, r3
 800c726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c72a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c72e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c732:	edd7 6a07 	vldr	s13, [r7, #28]
 800c736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c73a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c73e:	ee17 2a90 	vmov	r2, s15
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c746:	e008      	b.n	800c75a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2200      	movs	r2, #0
 800c74c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2200      	movs	r2, #0
 800c752:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2200      	movs	r2, #0
 800c758:	609a      	str	r2, [r3, #8]
}
 800c75a:	bf00      	nop
 800c75c:	3724      	adds	r7, #36	; 0x24
 800c75e:	46bd      	mov	sp, r7
 800c760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c764:	4770      	bx	lr
 800c766:	bf00      	nop
 800c768:	58024400 	.word	0x58024400
 800c76c:	03d09000 	.word	0x03d09000
 800c770:	46000000 	.word	0x46000000
 800c774:	4c742400 	.word	0x4c742400
 800c778:	4a742400 	.word	0x4a742400
 800c77c:	4c3ebc20 	.word	0x4c3ebc20

0800c780 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c780:	b480      	push	{r7}
 800c782:	b089      	sub	sp, #36	; 0x24
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c788:	4ba1      	ldr	r3, [pc, #644]	; (800ca10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c78a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c78c:	f003 0303 	and.w	r3, r3, #3
 800c790:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c792:	4b9f      	ldr	r3, [pc, #636]	; (800ca10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c796:	0d1b      	lsrs	r3, r3, #20
 800c798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c79c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c79e:	4b9c      	ldr	r3, [pc, #624]	; (800ca10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7a2:	0a1b      	lsrs	r3, r3, #8
 800c7a4:	f003 0301 	and.w	r3, r3, #1
 800c7a8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c7aa:	4b99      	ldr	r3, [pc, #612]	; (800ca10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7ae:	08db      	lsrs	r3, r3, #3
 800c7b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c7b4:	693a      	ldr	r2, [r7, #16]
 800c7b6:	fb02 f303 	mul.w	r3, r2, r3
 800c7ba:	ee07 3a90 	vmov	s15, r3
 800c7be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	f000 8111 	beq.w	800c9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c7ce:	69bb      	ldr	r3, [r7, #24]
 800c7d0:	2b02      	cmp	r3, #2
 800c7d2:	f000 8083 	beq.w	800c8dc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c7d6:	69bb      	ldr	r3, [r7, #24]
 800c7d8:	2b02      	cmp	r3, #2
 800c7da:	f200 80a1 	bhi.w	800c920 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c7de:	69bb      	ldr	r3, [r7, #24]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d003      	beq.n	800c7ec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c7e4:	69bb      	ldr	r3, [r7, #24]
 800c7e6:	2b01      	cmp	r3, #1
 800c7e8:	d056      	beq.n	800c898 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c7ea:	e099      	b.n	800c920 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c7ec:	4b88      	ldr	r3, [pc, #544]	; (800ca10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	f003 0320 	and.w	r3, r3, #32
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d02d      	beq.n	800c854 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c7f8:	4b85      	ldr	r3, [pc, #532]	; (800ca10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	08db      	lsrs	r3, r3, #3
 800c7fe:	f003 0303 	and.w	r3, r3, #3
 800c802:	4a84      	ldr	r2, [pc, #528]	; (800ca14 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c804:	fa22 f303 	lsr.w	r3, r2, r3
 800c808:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	ee07 3a90 	vmov	s15, r3
 800c810:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	ee07 3a90 	vmov	s15, r3
 800c81a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c81e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c822:	4b7b      	ldr	r3, [pc, #492]	; (800ca10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c82a:	ee07 3a90 	vmov	s15, r3
 800c82e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c832:	ed97 6a03 	vldr	s12, [r7, #12]
 800c836:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ca18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c83a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c83e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c84a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c84e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c852:	e087      	b.n	800c964 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	ee07 3a90 	vmov	s15, r3
 800c85a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c85e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ca1c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c866:	4b6a      	ldr	r3, [pc, #424]	; (800ca10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c86a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c86e:	ee07 3a90 	vmov	s15, r3
 800c872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c876:	ed97 6a03 	vldr	s12, [r7, #12]
 800c87a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ca18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c87e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c88a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c88e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c892:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c896:	e065      	b.n	800c964 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	ee07 3a90 	vmov	s15, r3
 800c89e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ca20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c8a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8aa:	4b59      	ldr	r3, [pc, #356]	; (800ca10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8b2:	ee07 3a90 	vmov	s15, r3
 800c8b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8be:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ca18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c8c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8da:	e043      	b.n	800c964 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	ee07 3a90 	vmov	s15, r3
 800c8e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ca24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c8ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8ee:	4b48      	ldr	r3, [pc, #288]	; (800ca10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8f6:	ee07 3a90 	vmov	s15, r3
 800c8fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800c902:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ca18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c90a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c90e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c91a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c91e:	e021      	b.n	800c964 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	ee07 3a90 	vmov	s15, r3
 800c926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c92a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ca20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c92e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c932:	4b37      	ldr	r3, [pc, #220]	; (800ca10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c93a:	ee07 3a90 	vmov	s15, r3
 800c93e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c942:	ed97 6a03 	vldr	s12, [r7, #12]
 800c946:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ca18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c94a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c94e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c95a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c95e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c962:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c964:	4b2a      	ldr	r3, [pc, #168]	; (800ca10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c968:	0a5b      	lsrs	r3, r3, #9
 800c96a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c96e:	ee07 3a90 	vmov	s15, r3
 800c972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c976:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c97a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c97e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c982:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c986:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c98a:	ee17 2a90 	vmov	r2, s15
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c992:	4b1f      	ldr	r3, [pc, #124]	; (800ca10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c996:	0c1b      	lsrs	r3, r3, #16
 800c998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c99c:	ee07 3a90 	vmov	s15, r3
 800c9a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9b8:	ee17 2a90 	vmov	r2, s15
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c9c0:	4b13      	ldr	r3, [pc, #76]	; (800ca10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9c4:	0e1b      	lsrs	r3, r3, #24
 800c9c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9ca:	ee07 3a90 	vmov	s15, r3
 800c9ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9da:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9e6:	ee17 2a90 	vmov	r2, s15
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c9ee:	e008      	b.n	800ca02 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	609a      	str	r2, [r3, #8]
}
 800ca02:	bf00      	nop
 800ca04:	3724      	adds	r7, #36	; 0x24
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr
 800ca0e:	bf00      	nop
 800ca10:	58024400 	.word	0x58024400
 800ca14:	03d09000 	.word	0x03d09000
 800ca18:	46000000 	.word	0x46000000
 800ca1c:	4c742400 	.word	0x4c742400
 800ca20:	4a742400 	.word	0x4a742400
 800ca24:	4c3ebc20 	.word	0x4c3ebc20

0800ca28 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b089      	sub	sp, #36	; 0x24
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ca30:	4ba0      	ldr	r3, [pc, #640]	; (800ccb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca34:	f003 0303 	and.w	r3, r3, #3
 800ca38:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ca3a:	4b9e      	ldr	r3, [pc, #632]	; (800ccb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca3e:	091b      	lsrs	r3, r3, #4
 800ca40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca44:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ca46:	4b9b      	ldr	r3, [pc, #620]	; (800ccb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca4a:	f003 0301 	and.w	r3, r3, #1
 800ca4e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ca50:	4b98      	ldr	r3, [pc, #608]	; (800ccb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca54:	08db      	lsrs	r3, r3, #3
 800ca56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ca5a:	693a      	ldr	r2, [r7, #16]
 800ca5c:	fb02 f303 	mul.w	r3, r2, r3
 800ca60:	ee07 3a90 	vmov	s15, r3
 800ca64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca68:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	f000 8111 	beq.w	800cc96 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ca74:	69bb      	ldr	r3, [r7, #24]
 800ca76:	2b02      	cmp	r3, #2
 800ca78:	f000 8083 	beq.w	800cb82 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ca7c:	69bb      	ldr	r3, [r7, #24]
 800ca7e:	2b02      	cmp	r3, #2
 800ca80:	f200 80a1 	bhi.w	800cbc6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ca84:	69bb      	ldr	r3, [r7, #24]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d003      	beq.n	800ca92 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ca8a:	69bb      	ldr	r3, [r7, #24]
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	d056      	beq.n	800cb3e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ca90:	e099      	b.n	800cbc6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca92:	4b88      	ldr	r3, [pc, #544]	; (800ccb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f003 0320 	and.w	r3, r3, #32
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d02d      	beq.n	800cafa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca9e:	4b85      	ldr	r3, [pc, #532]	; (800ccb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	08db      	lsrs	r3, r3, #3
 800caa4:	f003 0303 	and.w	r3, r3, #3
 800caa8:	4a83      	ldr	r2, [pc, #524]	; (800ccb8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800caaa:	fa22 f303 	lsr.w	r3, r2, r3
 800caae:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	ee07 3a90 	vmov	s15, r3
 800cab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	ee07 3a90 	vmov	s15, r3
 800cac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cac4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cac8:	4b7a      	ldr	r3, [pc, #488]	; (800ccb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800caca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cacc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cad0:	ee07 3a90 	vmov	s15, r3
 800cad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cad8:	ed97 6a03 	vldr	s12, [r7, #12]
 800cadc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ccbc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cae0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cae4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cae8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800caec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caf4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800caf8:	e087      	b.n	800cc0a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	ee07 3a90 	vmov	s15, r3
 800cb00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb04:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ccc0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cb08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb0c:	4b69      	ldr	r3, [pc, #420]	; (800ccb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb14:	ee07 3a90 	vmov	s15, r3
 800cb18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb1c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb20:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ccbc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb3c:	e065      	b.n	800cc0a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	ee07 3a90 	vmov	s15, r3
 800cb44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb48:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ccc4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cb4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb50:	4b58      	ldr	r3, [pc, #352]	; (800ccb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb58:	ee07 3a90 	vmov	s15, r3
 800cb5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb60:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb64:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ccbc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb80:	e043      	b.n	800cc0a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	ee07 3a90 	vmov	s15, r3
 800cb88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb8c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ccc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cb90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb94:	4b47      	ldr	r3, [pc, #284]	; (800ccb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb9c:	ee07 3a90 	vmov	s15, r3
 800cba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cba4:	ed97 6a03 	vldr	s12, [r7, #12]
 800cba8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ccbc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cbac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbc4:	e021      	b.n	800cc0a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	ee07 3a90 	vmov	s15, r3
 800cbcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbd0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ccc0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cbd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbd8:	4b36      	ldr	r3, [pc, #216]	; (800ccb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbe0:	ee07 3a90 	vmov	s15, r3
 800cbe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbe8:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbec:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ccbc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cbf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc08:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cc0a:	4b2a      	ldr	r3, [pc, #168]	; (800ccb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc0e:	0a5b      	lsrs	r3, r3, #9
 800cc10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc14:	ee07 3a90 	vmov	s15, r3
 800cc18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc20:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc24:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc30:	ee17 2a90 	vmov	r2, s15
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cc38:	4b1e      	ldr	r3, [pc, #120]	; (800ccb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc3c:	0c1b      	lsrs	r3, r3, #16
 800cc3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc42:	ee07 3a90 	vmov	s15, r3
 800cc46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc52:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc5e:	ee17 2a90 	vmov	r2, s15
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800cc66:	4b13      	ldr	r3, [pc, #76]	; (800ccb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc6a:	0e1b      	lsrs	r3, r3, #24
 800cc6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc70:	ee07 3a90 	vmov	s15, r3
 800cc74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc80:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc8c:	ee17 2a90 	vmov	r2, s15
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cc94:	e008      	b.n	800cca8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2200      	movs	r2, #0
 800cca6:	609a      	str	r2, [r3, #8]
}
 800cca8:	bf00      	nop
 800ccaa:	3724      	adds	r7, #36	; 0x24
 800ccac:	46bd      	mov	sp, r7
 800ccae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb2:	4770      	bx	lr
 800ccb4:	58024400 	.word	0x58024400
 800ccb8:	03d09000 	.word	0x03d09000
 800ccbc:	46000000 	.word	0x46000000
 800ccc0:	4c742400 	.word	0x4c742400
 800ccc4:	4a742400 	.word	0x4a742400
 800ccc8:	4c3ebc20 	.word	0x4c3ebc20

0800cccc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b084      	sub	sp, #16
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
 800ccd4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ccda:	4b53      	ldr	r3, [pc, #332]	; (800ce28 <RCCEx_PLL2_Config+0x15c>)
 800ccdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccde:	f003 0303 	and.w	r3, r3, #3
 800cce2:	2b03      	cmp	r3, #3
 800cce4:	d101      	bne.n	800ccea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cce6:	2301      	movs	r3, #1
 800cce8:	e099      	b.n	800ce1e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ccea:	4b4f      	ldr	r3, [pc, #316]	; (800ce28 <RCCEx_PLL2_Config+0x15c>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	4a4e      	ldr	r2, [pc, #312]	; (800ce28 <RCCEx_PLL2_Config+0x15c>)
 800ccf0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ccf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ccf6:	f7f6 fe7b 	bl	80039f0 <HAL_GetTick>
 800ccfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ccfc:	e008      	b.n	800cd10 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ccfe:	f7f6 fe77 	bl	80039f0 <HAL_GetTick>
 800cd02:	4602      	mov	r2, r0
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	1ad3      	subs	r3, r2, r3
 800cd08:	2b02      	cmp	r3, #2
 800cd0a:	d901      	bls.n	800cd10 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cd0c:	2303      	movs	r3, #3
 800cd0e:	e086      	b.n	800ce1e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cd10:	4b45      	ldr	r3, [pc, #276]	; (800ce28 <RCCEx_PLL2_Config+0x15c>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d1f0      	bne.n	800ccfe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cd1c:	4b42      	ldr	r3, [pc, #264]	; (800ce28 <RCCEx_PLL2_Config+0x15c>)
 800cd1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd20:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	031b      	lsls	r3, r3, #12
 800cd2a:	493f      	ldr	r1, [pc, #252]	; (800ce28 <RCCEx_PLL2_Config+0x15c>)
 800cd2c:	4313      	orrs	r3, r2
 800cd2e:	628b      	str	r3, [r1, #40]	; 0x28
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	685b      	ldr	r3, [r3, #4]
 800cd34:	3b01      	subs	r3, #1
 800cd36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	689b      	ldr	r3, [r3, #8]
 800cd3e:	3b01      	subs	r3, #1
 800cd40:	025b      	lsls	r3, r3, #9
 800cd42:	b29b      	uxth	r3, r3
 800cd44:	431a      	orrs	r2, r3
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	68db      	ldr	r3, [r3, #12]
 800cd4a:	3b01      	subs	r3, #1
 800cd4c:	041b      	lsls	r3, r3, #16
 800cd4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cd52:	431a      	orrs	r2, r3
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	691b      	ldr	r3, [r3, #16]
 800cd58:	3b01      	subs	r3, #1
 800cd5a:	061b      	lsls	r3, r3, #24
 800cd5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cd60:	4931      	ldr	r1, [pc, #196]	; (800ce28 <RCCEx_PLL2_Config+0x15c>)
 800cd62:	4313      	orrs	r3, r2
 800cd64:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cd66:	4b30      	ldr	r3, [pc, #192]	; (800ce28 <RCCEx_PLL2_Config+0x15c>)
 800cd68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	695b      	ldr	r3, [r3, #20]
 800cd72:	492d      	ldr	r1, [pc, #180]	; (800ce28 <RCCEx_PLL2_Config+0x15c>)
 800cd74:	4313      	orrs	r3, r2
 800cd76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cd78:	4b2b      	ldr	r3, [pc, #172]	; (800ce28 <RCCEx_PLL2_Config+0x15c>)
 800cd7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd7c:	f023 0220 	bic.w	r2, r3, #32
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	699b      	ldr	r3, [r3, #24]
 800cd84:	4928      	ldr	r1, [pc, #160]	; (800ce28 <RCCEx_PLL2_Config+0x15c>)
 800cd86:	4313      	orrs	r3, r2
 800cd88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cd8a:	4b27      	ldr	r3, [pc, #156]	; (800ce28 <RCCEx_PLL2_Config+0x15c>)
 800cd8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd8e:	4a26      	ldr	r2, [pc, #152]	; (800ce28 <RCCEx_PLL2_Config+0x15c>)
 800cd90:	f023 0310 	bic.w	r3, r3, #16
 800cd94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cd96:	4b24      	ldr	r3, [pc, #144]	; (800ce28 <RCCEx_PLL2_Config+0x15c>)
 800cd98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd9a:	4b24      	ldr	r3, [pc, #144]	; (800ce2c <RCCEx_PLL2_Config+0x160>)
 800cd9c:	4013      	ands	r3, r2
 800cd9e:	687a      	ldr	r2, [r7, #4]
 800cda0:	69d2      	ldr	r2, [r2, #28]
 800cda2:	00d2      	lsls	r2, r2, #3
 800cda4:	4920      	ldr	r1, [pc, #128]	; (800ce28 <RCCEx_PLL2_Config+0x15c>)
 800cda6:	4313      	orrs	r3, r2
 800cda8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cdaa:	4b1f      	ldr	r3, [pc, #124]	; (800ce28 <RCCEx_PLL2_Config+0x15c>)
 800cdac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdae:	4a1e      	ldr	r2, [pc, #120]	; (800ce28 <RCCEx_PLL2_Config+0x15c>)
 800cdb0:	f043 0310 	orr.w	r3, r3, #16
 800cdb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d106      	bne.n	800cdca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cdbc:	4b1a      	ldr	r3, [pc, #104]	; (800ce28 <RCCEx_PLL2_Config+0x15c>)
 800cdbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdc0:	4a19      	ldr	r2, [pc, #100]	; (800ce28 <RCCEx_PLL2_Config+0x15c>)
 800cdc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cdc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cdc8:	e00f      	b.n	800cdea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	2b01      	cmp	r3, #1
 800cdce:	d106      	bne.n	800cdde <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cdd0:	4b15      	ldr	r3, [pc, #84]	; (800ce28 <RCCEx_PLL2_Config+0x15c>)
 800cdd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdd4:	4a14      	ldr	r2, [pc, #80]	; (800ce28 <RCCEx_PLL2_Config+0x15c>)
 800cdd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cdda:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cddc:	e005      	b.n	800cdea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cdde:	4b12      	ldr	r3, [pc, #72]	; (800ce28 <RCCEx_PLL2_Config+0x15c>)
 800cde0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cde2:	4a11      	ldr	r2, [pc, #68]	; (800ce28 <RCCEx_PLL2_Config+0x15c>)
 800cde4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cde8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cdea:	4b0f      	ldr	r3, [pc, #60]	; (800ce28 <RCCEx_PLL2_Config+0x15c>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	4a0e      	ldr	r2, [pc, #56]	; (800ce28 <RCCEx_PLL2_Config+0x15c>)
 800cdf0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cdf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cdf6:	f7f6 fdfb 	bl	80039f0 <HAL_GetTick>
 800cdfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cdfc:	e008      	b.n	800ce10 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cdfe:	f7f6 fdf7 	bl	80039f0 <HAL_GetTick>
 800ce02:	4602      	mov	r2, r0
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	1ad3      	subs	r3, r2, r3
 800ce08:	2b02      	cmp	r3, #2
 800ce0a:	d901      	bls.n	800ce10 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ce0c:	2303      	movs	r3, #3
 800ce0e:	e006      	b.n	800ce1e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ce10:	4b05      	ldr	r3, [pc, #20]	; (800ce28 <RCCEx_PLL2_Config+0x15c>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d0f0      	beq.n	800cdfe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ce1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3710      	adds	r7, #16
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	58024400 	.word	0x58024400
 800ce2c:	ffff0007 	.word	0xffff0007

0800ce30 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b084      	sub	sp, #16
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ce3e:	4b53      	ldr	r3, [pc, #332]	; (800cf8c <RCCEx_PLL3_Config+0x15c>)
 800ce40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce42:	f003 0303 	and.w	r3, r3, #3
 800ce46:	2b03      	cmp	r3, #3
 800ce48:	d101      	bne.n	800ce4e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	e099      	b.n	800cf82 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ce4e:	4b4f      	ldr	r3, [pc, #316]	; (800cf8c <RCCEx_PLL3_Config+0x15c>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	4a4e      	ldr	r2, [pc, #312]	; (800cf8c <RCCEx_PLL3_Config+0x15c>)
 800ce54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ce58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce5a:	f7f6 fdc9 	bl	80039f0 <HAL_GetTick>
 800ce5e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ce60:	e008      	b.n	800ce74 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ce62:	f7f6 fdc5 	bl	80039f0 <HAL_GetTick>
 800ce66:	4602      	mov	r2, r0
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	1ad3      	subs	r3, r2, r3
 800ce6c:	2b02      	cmp	r3, #2
 800ce6e:	d901      	bls.n	800ce74 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ce70:	2303      	movs	r3, #3
 800ce72:	e086      	b.n	800cf82 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ce74:	4b45      	ldr	r3, [pc, #276]	; (800cf8c <RCCEx_PLL3_Config+0x15c>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d1f0      	bne.n	800ce62 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ce80:	4b42      	ldr	r3, [pc, #264]	; (800cf8c <RCCEx_PLL3_Config+0x15c>)
 800ce82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce84:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	051b      	lsls	r3, r3, #20
 800ce8e:	493f      	ldr	r1, [pc, #252]	; (800cf8c <RCCEx_PLL3_Config+0x15c>)
 800ce90:	4313      	orrs	r3, r2
 800ce92:	628b      	str	r3, [r1, #40]	; 0x28
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	685b      	ldr	r3, [r3, #4]
 800ce98:	3b01      	subs	r3, #1
 800ce9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	689b      	ldr	r3, [r3, #8]
 800cea2:	3b01      	subs	r3, #1
 800cea4:	025b      	lsls	r3, r3, #9
 800cea6:	b29b      	uxth	r3, r3
 800cea8:	431a      	orrs	r2, r3
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	68db      	ldr	r3, [r3, #12]
 800ceae:	3b01      	subs	r3, #1
 800ceb0:	041b      	lsls	r3, r3, #16
 800ceb2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ceb6:	431a      	orrs	r2, r3
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	691b      	ldr	r3, [r3, #16]
 800cebc:	3b01      	subs	r3, #1
 800cebe:	061b      	lsls	r3, r3, #24
 800cec0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cec4:	4931      	ldr	r1, [pc, #196]	; (800cf8c <RCCEx_PLL3_Config+0x15c>)
 800cec6:	4313      	orrs	r3, r2
 800cec8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ceca:	4b30      	ldr	r3, [pc, #192]	; (800cf8c <RCCEx_PLL3_Config+0x15c>)
 800cecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cece:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	695b      	ldr	r3, [r3, #20]
 800ced6:	492d      	ldr	r1, [pc, #180]	; (800cf8c <RCCEx_PLL3_Config+0x15c>)
 800ced8:	4313      	orrs	r3, r2
 800ceda:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cedc:	4b2b      	ldr	r3, [pc, #172]	; (800cf8c <RCCEx_PLL3_Config+0x15c>)
 800cede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	699b      	ldr	r3, [r3, #24]
 800cee8:	4928      	ldr	r1, [pc, #160]	; (800cf8c <RCCEx_PLL3_Config+0x15c>)
 800ceea:	4313      	orrs	r3, r2
 800ceec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ceee:	4b27      	ldr	r3, [pc, #156]	; (800cf8c <RCCEx_PLL3_Config+0x15c>)
 800cef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cef2:	4a26      	ldr	r2, [pc, #152]	; (800cf8c <RCCEx_PLL3_Config+0x15c>)
 800cef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cef8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cefa:	4b24      	ldr	r3, [pc, #144]	; (800cf8c <RCCEx_PLL3_Config+0x15c>)
 800cefc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cefe:	4b24      	ldr	r3, [pc, #144]	; (800cf90 <RCCEx_PLL3_Config+0x160>)
 800cf00:	4013      	ands	r3, r2
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	69d2      	ldr	r2, [r2, #28]
 800cf06:	00d2      	lsls	r2, r2, #3
 800cf08:	4920      	ldr	r1, [pc, #128]	; (800cf8c <RCCEx_PLL3_Config+0x15c>)
 800cf0a:	4313      	orrs	r3, r2
 800cf0c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cf0e:	4b1f      	ldr	r3, [pc, #124]	; (800cf8c <RCCEx_PLL3_Config+0x15c>)
 800cf10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf12:	4a1e      	ldr	r2, [pc, #120]	; (800cf8c <RCCEx_PLL3_Config+0x15c>)
 800cf14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d106      	bne.n	800cf2e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cf20:	4b1a      	ldr	r3, [pc, #104]	; (800cf8c <RCCEx_PLL3_Config+0x15c>)
 800cf22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf24:	4a19      	ldr	r2, [pc, #100]	; (800cf8c <RCCEx_PLL3_Config+0x15c>)
 800cf26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cf2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf2c:	e00f      	b.n	800cf4e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	2b01      	cmp	r3, #1
 800cf32:	d106      	bne.n	800cf42 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cf34:	4b15      	ldr	r3, [pc, #84]	; (800cf8c <RCCEx_PLL3_Config+0x15c>)
 800cf36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf38:	4a14      	ldr	r2, [pc, #80]	; (800cf8c <RCCEx_PLL3_Config+0x15c>)
 800cf3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cf3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf40:	e005      	b.n	800cf4e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cf42:	4b12      	ldr	r3, [pc, #72]	; (800cf8c <RCCEx_PLL3_Config+0x15c>)
 800cf44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf46:	4a11      	ldr	r2, [pc, #68]	; (800cf8c <RCCEx_PLL3_Config+0x15c>)
 800cf48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cf4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cf4e:	4b0f      	ldr	r3, [pc, #60]	; (800cf8c <RCCEx_PLL3_Config+0x15c>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	4a0e      	ldr	r2, [pc, #56]	; (800cf8c <RCCEx_PLL3_Config+0x15c>)
 800cf54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf5a:	f7f6 fd49 	bl	80039f0 <HAL_GetTick>
 800cf5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cf60:	e008      	b.n	800cf74 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cf62:	f7f6 fd45 	bl	80039f0 <HAL_GetTick>
 800cf66:	4602      	mov	r2, r0
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	1ad3      	subs	r3, r2, r3
 800cf6c:	2b02      	cmp	r3, #2
 800cf6e:	d901      	bls.n	800cf74 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cf70:	2303      	movs	r3, #3
 800cf72:	e006      	b.n	800cf82 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cf74:	4b05      	ldr	r3, [pc, #20]	; (800cf8c <RCCEx_PLL3_Config+0x15c>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d0f0      	beq.n	800cf62 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cf80:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3710      	adds	r7, #16
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	58024400 	.word	0x58024400
 800cf90:	ffff0007 	.word	0xffff0007

0800cf94 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b08a      	sub	sp, #40	; 0x28
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d101      	bne.n	800cfa6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	e075      	b.n	800d092 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cfac:	b2db      	uxtb	r3, r3
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d105      	bne.n	800cfbe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f7f5 fe59 	bl	8002c70 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2204      	movs	r2, #4
 800cfc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f000 f868 	bl	800d09c <HAL_SD_InitCard>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d001      	beq.n	800cfd6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	e05d      	b.n	800d092 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800cfd6:	f107 0308 	add.w	r3, r7, #8
 800cfda:	4619      	mov	r1, r3
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f000 fdaf 	bl	800db40 <HAL_SD_GetCardStatus>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d001      	beq.n	800cfec <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800cfe8:	2301      	movs	r3, #1
 800cfea:	e052      	b.n	800d092 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800cfec:	7e3b      	ldrb	r3, [r7, #24]
 800cfee:	b2db      	uxtb	r3, r3
 800cff0:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800cff2:	7e7b      	ldrb	r3, [r7, #25]
 800cff4:	b2db      	uxtb	r3, r3
 800cff6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d10a      	bne.n	800d016 <HAL_SD_Init+0x82>
 800d000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d002:	2b00      	cmp	r3, #0
 800d004:	d102      	bne.n	800d00c <HAL_SD_Init+0x78>
 800d006:	6a3b      	ldr	r3, [r7, #32]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d004      	beq.n	800d016 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d012:	659a      	str	r2, [r3, #88]	; 0x58
 800d014:	e00b      	b.n	800d02e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d01a:	2b01      	cmp	r3, #1
 800d01c:	d104      	bne.n	800d028 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d024:	659a      	str	r2, [r3, #88]	; 0x58
 800d026:	e002      	b.n	800d02e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2200      	movs	r2, #0
 800d02c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	68db      	ldr	r3, [r3, #12]
 800d032:	4619      	mov	r1, r3
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f000 fe6d 	bl	800dd14 <HAL_SD_ConfigWideBusOperation>
 800d03a:	4603      	mov	r3, r0
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d001      	beq.n	800d044 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d040:	2301      	movs	r3, #1
 800d042:	e026      	b.n	800d092 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d044:	f7f6 fcd4 	bl	80039f0 <HAL_GetTick>
 800d048:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d04a:	e011      	b.n	800d070 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d04c:	f7f6 fcd0 	bl	80039f0 <HAL_GetTick>
 800d050:	4602      	mov	r2, r0
 800d052:	69fb      	ldr	r3, [r7, #28]
 800d054:	1ad3      	subs	r3, r2, r3
 800d056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d05a:	d109      	bne.n	800d070 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d062:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2201      	movs	r2, #1
 800d068:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d06c:	2303      	movs	r3, #3
 800d06e:	e010      	b.n	800d092 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f000 ff61 	bl	800df38 <HAL_SD_GetCardState>
 800d076:	4603      	mov	r3, r0
 800d078:	2b04      	cmp	r3, #4
 800d07a:	d1e7      	bne.n	800d04c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2200      	movs	r2, #0
 800d080:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2200      	movs	r2, #0
 800d086:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2201      	movs	r2, #1
 800d08c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800d090:	2300      	movs	r3, #0
}
 800d092:	4618      	mov	r0, r3
 800d094:	3728      	adds	r7, #40	; 0x28
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}
	...

0800d09c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d09c:	b590      	push	{r4, r7, lr}
 800d09e:	b08d      	sub	sp, #52	; 0x34
 800d0a0:	af02      	add	r7, sp, #8
 800d0a2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d0b4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d0b8:	f04f 0100 	mov.w	r1, #0
 800d0bc:	f7fe fd24 	bl	800bb08 <HAL_RCCEx_GetPeriphCLKFreq>
 800d0c0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d109      	bne.n	800d0dc <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d0d6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d0d8:	2301      	movs	r3, #1
 800d0da:	e070      	b.n	800d1be <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0de:	0a1b      	lsrs	r3, r3, #8
 800d0e0:	4a39      	ldr	r2, [pc, #228]	; (800d1c8 <HAL_SD_InitCard+0x12c>)
 800d0e2:	fba2 2303 	umull	r2, r3, r2, r3
 800d0e6:	091b      	lsrs	r3, r3, #4
 800d0e8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681c      	ldr	r4, [r3, #0]
 800d0ee:	466a      	mov	r2, sp
 800d0f0:	f107 0318 	add.w	r3, r7, #24
 800d0f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d0f8:	e882 0003 	stmia.w	r2, {r0, r1}
 800d0fc:	f107 030c 	add.w	r3, r7, #12
 800d100:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d102:	4620      	mov	r0, r4
 800d104:	f004 fec4 	bl	8011e90 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	4618      	mov	r0, r3
 800d10e:	f004 ff07 	bl	8011f20 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d112:	69fb      	ldr	r3, [r7, #28]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d005      	beq.n	800d124 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d118:	69fb      	ldr	r3, [r7, #28]
 800d11a:	005b      	lsls	r3, r3, #1
 800d11c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d11e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d122:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800d124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d126:	2b00      	cmp	r3, #0
 800d128:	d007      	beq.n	800d13a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d12a:	4a28      	ldr	r2, [pc, #160]	; (800d1cc <HAL_SD_InitCard+0x130>)
 800d12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d12e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d132:	3301      	adds	r3, #1
 800d134:	4618      	mov	r0, r3
 800d136:	f7f6 fc67 	bl	8003a08 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f000 ffea 	bl	800e114 <SD_PowerON>
 800d140:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d142:	6a3b      	ldr	r3, [r7, #32]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d00b      	beq.n	800d160 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2201      	movs	r2, #1
 800d14c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d154:	6a3b      	ldr	r3, [r7, #32]
 800d156:	431a      	orrs	r2, r3
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d15c:	2301      	movs	r3, #1
 800d15e:	e02e      	b.n	800d1be <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f000 ff09 	bl	800df78 <SD_InitCard>
 800d166:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d168:	6a3b      	ldr	r3, [r7, #32]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d00b      	beq.n	800d186 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2201      	movs	r2, #1
 800d172:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d17a:	6a3b      	ldr	r3, [r7, #32]
 800d17c:	431a      	orrs	r2, r3
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d182:	2301      	movs	r3, #1
 800d184:	e01b      	b.n	800d1be <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d18e:	4618      	mov	r0, r3
 800d190:	f004 ff5c 	bl	801204c <SDMMC_CmdBlockLength>
 800d194:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d196:	6a3b      	ldr	r3, [r7, #32]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d00f      	beq.n	800d1bc <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4a0b      	ldr	r2, [pc, #44]	; (800d1d0 <HAL_SD_InitCard+0x134>)
 800d1a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1a8:	6a3b      	ldr	r3, [r7, #32]
 800d1aa:	431a      	orrs	r2, r3
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	e000      	b.n	800d1be <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d1bc:	2300      	movs	r3, #0
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	372c      	adds	r7, #44	; 0x2c
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd90      	pop	{r4, r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	014f8b59 	.word	0x014f8b59
 800d1cc:	00012110 	.word	0x00012110
 800d1d0:	1fe00fff 	.word	0x1fe00fff

0800d1d4 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b08c      	sub	sp, #48	; 0x30
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	60f8      	str	r0, [r7, #12]
 800d1dc:	60b9      	str	r1, [r7, #8]
 800d1de:	607a      	str	r2, [r7, #4]
 800d1e0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d107      	bne.n	800d1fc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	e08d      	b.n	800d318 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d202:	b2db      	uxtb	r3, r3
 800d204:	2b01      	cmp	r3, #1
 800d206:	f040 8086 	bne.w	800d316 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	2200      	movs	r2, #0
 800d20e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	441a      	add	r2, r3
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d907      	bls.n	800d22e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d222:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d22a:	2301      	movs	r3, #1
 800d22c:	e074      	b.n	800d318 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	2203      	movs	r2, #3
 800d232:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	2200      	movs	r2, #0
 800d23c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	68ba      	ldr	r2, [r7, #8]
 800d242:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	025a      	lsls	r2, r3, #9
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d250:	2b01      	cmp	r3, #1
 800d252:	d002      	beq.n	800d25a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d256:	025b      	lsls	r3, r3, #9
 800d258:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d25a:	f04f 33ff 	mov.w	r3, #4294967295
 800d25e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	025b      	lsls	r3, r3, #9
 800d264:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d266:	2390      	movs	r3, #144	; 0x90
 800d268:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d26a:	2302      	movs	r3, #2
 800d26c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d26e:	2300      	movs	r3, #0
 800d270:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d272:	2300      	movs	r3, #0
 800d274:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f107 0210 	add.w	r2, r7, #16
 800d27e:	4611      	mov	r1, r2
 800d280:	4618      	mov	r0, r3
 800d282:	f004 feb7 	bl	8011ff4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	68da      	ldr	r2, [r3, #12]
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d294:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	68ba      	ldr	r2, [r7, #8]
 800d29c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d90a      	bls.n	800d2c2 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	2282      	movs	r2, #130	; 0x82
 800d2b0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f004 ff0d 	bl	80120d8 <SDMMC_CmdReadMultiBlock>
 800d2be:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d2c0:	e009      	b.n	800d2d6 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	2281      	movs	r2, #129	; 0x81
 800d2c6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f004 fedf 	bl	8012092 <SDMMC_CmdReadSingleBlock>
 800d2d4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d012      	beq.n	800d302 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	4a0f      	ldr	r2, [pc, #60]	; (800d320 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d2e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ea:	431a      	orrs	r2, r3
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d2fe:	2301      	movs	r3, #1
 800d300:	e00a      	b.n	800d318 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d310:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d312:	2300      	movs	r3, #0
 800d314:	e000      	b.n	800d318 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d316:	2302      	movs	r3, #2
  }
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3730      	adds	r7, #48	; 0x30
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}
 800d320:	1fe00fff 	.word	0x1fe00fff

0800d324 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b08c      	sub	sp, #48	; 0x30
 800d328:	af00      	add	r7, sp, #0
 800d32a:	60f8      	str	r0, [r7, #12]
 800d32c:	60b9      	str	r1, [r7, #8]
 800d32e:	607a      	str	r2, [r7, #4]
 800d330:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d107      	bne.n	800d34c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d340:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d348:	2301      	movs	r3, #1
 800d34a:	e08d      	b.n	800d468 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d352:	b2db      	uxtb	r3, r3
 800d354:	2b01      	cmp	r3, #1
 800d356:	f040 8086 	bne.w	800d466 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	2200      	movs	r2, #0
 800d35e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d360:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	441a      	add	r2, r3
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d907      	bls.n	800d37e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d372:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d37a:	2301      	movs	r3, #1
 800d37c:	e074      	b.n	800d468 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	2203      	movs	r2, #3
 800d382:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	2200      	movs	r2, #0
 800d38c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	68ba      	ldr	r2, [r7, #8]
 800d392:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	025a      	lsls	r2, r3, #9
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3a0:	2b01      	cmp	r3, #1
 800d3a2:	d002      	beq.n	800d3aa <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a6:	025b      	lsls	r3, r3, #9
 800d3a8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d3aa:	f04f 33ff 	mov.w	r3, #4294967295
 800d3ae:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	025b      	lsls	r3, r3, #9
 800d3b4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d3b6:	2390      	movs	r3, #144	; 0x90
 800d3b8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f107 0210 	add.w	r2, r7, #16
 800d3ce:	4611      	mov	r1, r2
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f004 fe0f 	bl	8011ff4 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	68da      	ldr	r2, [r3, #12]
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d3e4:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	68ba      	ldr	r2, [r7, #8]
 800d3ec:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	2201      	movs	r2, #1
 800d3f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	2b01      	cmp	r3, #1
 800d3fa:	d90a      	bls.n	800d412 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	22a0      	movs	r2, #160	; 0xa0
 800d400:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d408:	4618      	mov	r0, r3
 800d40a:	f004 feab 	bl	8012164 <SDMMC_CmdWriteMultiBlock>
 800d40e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d410:	e009      	b.n	800d426 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	2290      	movs	r2, #144	; 0x90
 800d416:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d41e:	4618      	mov	r0, r3
 800d420:	f004 fe7d 	bl	801211e <SDMMC_CmdWriteSingleBlock>
 800d424:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d012      	beq.n	800d452 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4a0f      	ldr	r2, [pc, #60]	; (800d470 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d432:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43a:	431a      	orrs	r2, r3
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	2201      	movs	r2, #1
 800d444:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	2200      	movs	r2, #0
 800d44c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d44e:	2301      	movs	r3, #1
 800d450:	e00a      	b.n	800d468 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d460:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d462:	2300      	movs	r3, #0
 800d464:	e000      	b.n	800d468 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d466:	2302      	movs	r3, #2
  }
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3730      	adds	r7, #48	; 0x30
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}
 800d470:	1fe00fff 	.word	0x1fe00fff

0800d474 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b084      	sub	sp, #16
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d480:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d008      	beq.n	800d4a2 <HAL_SD_IRQHandler+0x2e>
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	f003 0308 	and.w	r3, r3, #8
 800d496:	2b00      	cmp	r3, #0
 800d498:	d003      	beq.n	800d4a2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f001 f926 	bl	800e6ec <SD_Read_IT>
 800d4a0:	e19a      	b.n	800d7d8 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	f000 80ac 	beq.w	800d60a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d4ba:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681a      	ldr	r2, [r3, #0]
 800d4c6:	4b59      	ldr	r3, [pc, #356]	; (800d62c <HAL_SD_IRQHandler+0x1b8>)
 800d4c8:	400b      	ands	r3, r1
 800d4ca:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d4da:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	68da      	ldr	r2, [r3, #12]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d4ea:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	f003 0308 	and.w	r3, r3, #8
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d038      	beq.n	800d568 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	f003 0302 	and.w	r3, r3, #2
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d104      	bne.n	800d50a <HAL_SD_IRQHandler+0x96>
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	f003 0320 	and.w	r3, r3, #32
 800d506:	2b00      	cmp	r3, #0
 800d508:	d011      	beq.n	800d52e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	4618      	mov	r0, r3
 800d510:	f004 fe4c 	bl	80121ac <SDMMC_CmdStopTransfer>
 800d514:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d008      	beq.n	800d52e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	431a      	orrs	r2, r3
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	f000 f95b 	bl	800d7e4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	4a3f      	ldr	r2, [pc, #252]	; (800d630 <HAL_SD_IRQHandler+0x1bc>)
 800d534:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2201      	movs	r2, #1
 800d53a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2200      	movs	r2, #0
 800d542:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	f003 0301 	and.w	r3, r3, #1
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d104      	bne.n	800d558 <HAL_SD_IRQHandler+0xe4>
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	f003 0302 	and.w	r3, r3, #2
 800d554:	2b00      	cmp	r3, #0
 800d556:	d003      	beq.n	800d560 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f006 fe4d 	bl	80141f8 <HAL_SD_RxCpltCallback>
 800d55e:	e13b      	b.n	800d7d8 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f006 fe3f 	bl	80141e4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d566:	e137      	b.n	800d7d8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d56e:	2b00      	cmp	r3, #0
 800d570:	f000 8132 	beq.w	800d7d8 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	2200      	movs	r2, #0
 800d57a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	2200      	movs	r2, #0
 800d582:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	2200      	movs	r2, #0
 800d58a:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	f003 0302 	and.w	r3, r3, #2
 800d592:	2b00      	cmp	r3, #0
 800d594:	d104      	bne.n	800d5a0 <HAL_SD_IRQHandler+0x12c>
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	f003 0320 	and.w	r3, r3, #32
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d011      	beq.n	800d5c4 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f004 fe01 	bl	80121ac <SDMMC_CmdStopTransfer>
 800d5aa:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d008      	beq.n	800d5c4 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	431a      	orrs	r2, r3
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f000 f910 	bl	800d7e4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2201      	movs	r2, #1
 800d5c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	f003 0310 	and.w	r3, r3, #16
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d104      	bne.n	800d5e6 <HAL_SD_IRQHandler+0x172>
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	f003 0320 	and.w	r3, r3, #32
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d002      	beq.n	800d5ec <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f006 fdfc 	bl	80141e4 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	f003 0301 	and.w	r3, r3, #1
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d105      	bne.n	800d602 <HAL_SD_IRQHandler+0x18e>
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	f003 0302 	and.w	r3, r3, #2
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	f000 80eb 	beq.w	800d7d8 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f006 fdf8 	bl	80141f8 <HAL_SD_RxCpltCallback>
}
 800d608:	e0e6      	b.n	800d7d8 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d614:	2b00      	cmp	r3, #0
 800d616:	d00d      	beq.n	800d634 <HAL_SD_IRQHandler+0x1c0>
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	f003 0308 	and.w	r3, r3, #8
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d008      	beq.n	800d634 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f001 f8a8 	bl	800e778 <SD_Write_IT>
 800d628:	e0d6      	b.n	800d7d8 <HAL_SD_IRQHandler+0x364>
 800d62a:	bf00      	nop
 800d62c:	ffff3ec5 	.word	0xffff3ec5
 800d630:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d63a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d63e:	2b00      	cmp	r3, #0
 800d640:	f000 809d 	beq.w	800d77e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d64a:	f003 0302 	and.w	r3, r3, #2
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d005      	beq.n	800d65e <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d656:	f043 0202 	orr.w	r2, r3, #2
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d664:	f003 0308 	and.w	r3, r3, #8
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d005      	beq.n	800d678 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d670:	f043 0208 	orr.w	r2, r3, #8
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d67e:	f003 0320 	and.w	r3, r3, #32
 800d682:	2b00      	cmp	r3, #0
 800d684:	d005      	beq.n	800d692 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d68a:	f043 0220 	orr.w	r2, r3, #32
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d698:	f003 0310 	and.w	r3, r3, #16
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d005      	beq.n	800d6ac <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6a4:	f043 0210 	orr.w	r2, r3, #16
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	4a4b      	ldr	r2, [pc, #300]	; (800d7e0 <HAL_SD_IRQHandler+0x36c>)
 800d6b2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d6c2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	68da      	ldr	r2, [r3, #12]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d6d2:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d6e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	68da      	ldr	r2, [r3, #12]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d6f2:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f004 fd57 	bl	80121ac <SDMMC_CmdStopTransfer>
 800d6fe:	4602      	mov	r2, r0
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d704:	431a      	orrs	r2, r3
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	68da      	ldr	r2, [r3, #12]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d718:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d722:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f003 0308 	and.w	r3, r3, #8
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d00a      	beq.n	800d744 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2201      	movs	r2, #1
 800d732:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2200      	movs	r2, #0
 800d73a:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f000 f851 	bl	800d7e4 <HAL_SD_ErrorCallback>
}
 800d742:	e049      	b.n	800d7d8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d044      	beq.n	800d7d8 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d752:	2b00      	cmp	r3, #0
 800d754:	d040      	beq.n	800d7d8 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d764:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	2200      	movs	r2, #0
 800d76c:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2201      	movs	r2, #1
 800d772:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f000 f834 	bl	800d7e4 <HAL_SD_ErrorCallback>
}
 800d77c:	e02c      	b.n	800d7d8 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d025      	beq.n	800d7d8 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d794:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d79c:	f003 0304 	and.w	r3, r3, #4
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d10c      	bne.n	800d7be <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f003 0320 	and.w	r3, r3, #32
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d003      	beq.n	800d7b6 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f001 f84a 	bl	800e848 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d7b4:	e010      	b.n	800d7d8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f001 f832 	bl	800e820 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d7bc:	e00c      	b.n	800d7d8 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	f003 0320 	and.w	r3, r3, #32
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d003      	beq.n	800d7d0 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f001 f833 	bl	800e834 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d7ce:	e003      	b.n	800d7d8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f001 f81b 	bl	800e80c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d7d6:	e7ff      	b.n	800d7d8 <HAL_SD_IRQHandler+0x364>
 800d7d8:	bf00      	nop
 800d7da:	3710      	adds	r7, #16
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}
 800d7e0:	18000f3a 	.word	0x18000f3a

0800d7e4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b083      	sub	sp, #12
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d7ec:	bf00      	nop
 800d7ee:	370c      	adds	r7, #12
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f6:	4770      	bx	lr

0800d7f8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b083      	sub	sp, #12
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d806:	0f9b      	lsrs	r3, r3, #30
 800d808:	b2da      	uxtb	r2, r3
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d812:	0e9b      	lsrs	r3, r3, #26
 800d814:	b2db      	uxtb	r3, r3
 800d816:	f003 030f 	and.w	r3, r3, #15
 800d81a:	b2da      	uxtb	r2, r3
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d824:	0e1b      	lsrs	r3, r3, #24
 800d826:	b2db      	uxtb	r3, r3
 800d828:	f003 0303 	and.w	r3, r3, #3
 800d82c:	b2da      	uxtb	r2, r3
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d836:	0c1b      	lsrs	r3, r3, #16
 800d838:	b2da      	uxtb	r2, r3
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d842:	0a1b      	lsrs	r3, r3, #8
 800d844:	b2da      	uxtb	r2, r3
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d84e:	b2da      	uxtb	r2, r3
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d858:	0d1b      	lsrs	r3, r3, #20
 800d85a:	b29a      	uxth	r2, r3
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d864:	0c1b      	lsrs	r3, r3, #16
 800d866:	b2db      	uxtb	r3, r3
 800d868:	f003 030f 	and.w	r3, r3, #15
 800d86c:	b2da      	uxtb	r2, r3
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d876:	0bdb      	lsrs	r3, r3, #15
 800d878:	b2db      	uxtb	r3, r3
 800d87a:	f003 0301 	and.w	r3, r3, #1
 800d87e:	b2da      	uxtb	r2, r3
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d888:	0b9b      	lsrs	r3, r3, #14
 800d88a:	b2db      	uxtb	r3, r3
 800d88c:	f003 0301 	and.w	r3, r3, #1
 800d890:	b2da      	uxtb	r2, r3
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d89a:	0b5b      	lsrs	r3, r3, #13
 800d89c:	b2db      	uxtb	r3, r3
 800d89e:	f003 0301 	and.w	r3, r3, #1
 800d8a2:	b2da      	uxtb	r2, r3
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8ac:	0b1b      	lsrs	r3, r3, #12
 800d8ae:	b2db      	uxtb	r3, r3
 800d8b0:	f003 0301 	and.w	r3, r3, #1
 800d8b4:	b2da      	uxtb	r2, r3
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d163      	bne.n	800d990 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8cc:	009a      	lsls	r2, r3, #2
 800d8ce:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d8d2:	4013      	ands	r3, r2
 800d8d4:	687a      	ldr	r2, [r7, #4]
 800d8d6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800d8d8:	0f92      	lsrs	r2, r2, #30
 800d8da:	431a      	orrs	r2, r3
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8e4:	0edb      	lsrs	r3, r3, #27
 800d8e6:	b2db      	uxtb	r3, r3
 800d8e8:	f003 0307 	and.w	r3, r3, #7
 800d8ec:	b2da      	uxtb	r2, r3
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8f6:	0e1b      	lsrs	r3, r3, #24
 800d8f8:	b2db      	uxtb	r3, r3
 800d8fa:	f003 0307 	and.w	r3, r3, #7
 800d8fe:	b2da      	uxtb	r2, r3
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d908:	0d5b      	lsrs	r3, r3, #21
 800d90a:	b2db      	uxtb	r3, r3
 800d90c:	f003 0307 	and.w	r3, r3, #7
 800d910:	b2da      	uxtb	r2, r3
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d91a:	0c9b      	lsrs	r3, r3, #18
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	f003 0307 	and.w	r3, r3, #7
 800d922:	b2da      	uxtb	r2, r3
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d92c:	0bdb      	lsrs	r3, r3, #15
 800d92e:	b2db      	uxtb	r3, r3
 800d930:	f003 0307 	and.w	r3, r3, #7
 800d934:	b2da      	uxtb	r2, r3
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	691b      	ldr	r3, [r3, #16]
 800d93e:	1c5a      	adds	r2, r3, #1
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	7e1b      	ldrb	r3, [r3, #24]
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	f003 0307 	and.w	r3, r3, #7
 800d94e:	3302      	adds	r3, #2
 800d950:	2201      	movs	r2, #1
 800d952:	fa02 f303 	lsl.w	r3, r2, r3
 800d956:	687a      	ldr	r2, [r7, #4]
 800d958:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d95a:	fb03 f202 	mul.w	r2, r3, r2
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	7a1b      	ldrb	r3, [r3, #8]
 800d966:	b2db      	uxtb	r3, r3
 800d968:	f003 030f 	and.w	r3, r3, #15
 800d96c:	2201      	movs	r2, #1
 800d96e:	409a      	lsls	r2, r3
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d978:	687a      	ldr	r2, [r7, #4]
 800d97a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d97c:	0a52      	lsrs	r2, r2, #9
 800d97e:	fb03 f202 	mul.w	r2, r3, r2
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d98c:	655a      	str	r2, [r3, #84]	; 0x54
 800d98e:	e031      	b.n	800d9f4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d994:	2b01      	cmp	r3, #1
 800d996:	d11d      	bne.n	800d9d4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d99c:	041b      	lsls	r3, r3, #16
 800d99e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9a6:	0c1b      	lsrs	r3, r3, #16
 800d9a8:	431a      	orrs	r2, r3
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	691b      	ldr	r3, [r3, #16]
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	029a      	lsls	r2, r3, #10
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d9c8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	655a      	str	r2, [r3, #84]	; 0x54
 800d9d2:	e00f      	b.n	800d9f4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	4a58      	ldr	r2, [pc, #352]	; (800db3c <HAL_SD_GetCardCSD+0x344>)
 800d9da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	e09d      	b.n	800db30 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9f8:	0b9b      	lsrs	r3, r3, #14
 800d9fa:	b2db      	uxtb	r3, r3
 800d9fc:	f003 0301 	and.w	r3, r3, #1
 800da00:	b2da      	uxtb	r2, r3
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da0a:	09db      	lsrs	r3, r3, #7
 800da0c:	b2db      	uxtb	r3, r3
 800da0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da12:	b2da      	uxtb	r2, r3
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da1c:	b2db      	uxtb	r3, r3
 800da1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da22:	b2da      	uxtb	r2, r3
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da2c:	0fdb      	lsrs	r3, r3, #31
 800da2e:	b2da      	uxtb	r2, r3
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da38:	0f5b      	lsrs	r3, r3, #29
 800da3a:	b2db      	uxtb	r3, r3
 800da3c:	f003 0303 	and.w	r3, r3, #3
 800da40:	b2da      	uxtb	r2, r3
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da4a:	0e9b      	lsrs	r3, r3, #26
 800da4c:	b2db      	uxtb	r3, r3
 800da4e:	f003 0307 	and.w	r3, r3, #7
 800da52:	b2da      	uxtb	r2, r3
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da5c:	0d9b      	lsrs	r3, r3, #22
 800da5e:	b2db      	uxtb	r3, r3
 800da60:	f003 030f 	and.w	r3, r3, #15
 800da64:	b2da      	uxtb	r2, r3
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da6e:	0d5b      	lsrs	r3, r3, #21
 800da70:	b2db      	uxtb	r3, r3
 800da72:	f003 0301 	and.w	r3, r3, #1
 800da76:	b2da      	uxtb	r2, r3
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	2200      	movs	r2, #0
 800da82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da8a:	0c1b      	lsrs	r3, r3, #16
 800da8c:	b2db      	uxtb	r3, r3
 800da8e:	f003 0301 	and.w	r3, r3, #1
 800da92:	b2da      	uxtb	r2, r3
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da9e:	0bdb      	lsrs	r3, r3, #15
 800daa0:	b2db      	uxtb	r3, r3
 800daa2:	f003 0301 	and.w	r3, r3, #1
 800daa6:	b2da      	uxtb	r2, r3
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dab2:	0b9b      	lsrs	r3, r3, #14
 800dab4:	b2db      	uxtb	r3, r3
 800dab6:	f003 0301 	and.w	r3, r3, #1
 800daba:	b2da      	uxtb	r2, r3
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dac6:	0b5b      	lsrs	r3, r3, #13
 800dac8:	b2db      	uxtb	r3, r3
 800daca:	f003 0301 	and.w	r3, r3, #1
 800dace:	b2da      	uxtb	r2, r3
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dada:	0b1b      	lsrs	r3, r3, #12
 800dadc:	b2db      	uxtb	r3, r3
 800dade:	f003 0301 	and.w	r3, r3, #1
 800dae2:	b2da      	uxtb	r2, r3
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800daee:	0a9b      	lsrs	r3, r3, #10
 800daf0:	b2db      	uxtb	r3, r3
 800daf2:	f003 0303 	and.w	r3, r3, #3
 800daf6:	b2da      	uxtb	r2, r3
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db02:	0a1b      	lsrs	r3, r3, #8
 800db04:	b2db      	uxtb	r3, r3
 800db06:	f003 0303 	and.w	r3, r3, #3
 800db0a:	b2da      	uxtb	r2, r3
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db16:	085b      	lsrs	r3, r3, #1
 800db18:	b2db      	uxtb	r3, r3
 800db1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db1e:	b2da      	uxtb	r2, r3
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	2201      	movs	r2, #1
 800db2a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800db2e:	2300      	movs	r3, #0
}
 800db30:	4618      	mov	r0, r3
 800db32:	370c      	adds	r7, #12
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr
 800db3c:	1fe00fff 	.word	0x1fe00fff

0800db40 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b094      	sub	sp, #80	; 0x50
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800db4a:	2300      	movs	r3, #0
 800db4c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db56:	b2db      	uxtb	r3, r3
 800db58:	2b03      	cmp	r3, #3
 800db5a:	d101      	bne.n	800db60 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800db5c:	2301      	movs	r3, #1
 800db5e:	e0a7      	b.n	800dcb0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800db60:	f107 0308 	add.w	r3, r7, #8
 800db64:	4619      	mov	r1, r3
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f000 fb62 	bl	800e230 <SD_SendSDStatus>
 800db6c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800db6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db70:	2b00      	cmp	r3, #0
 800db72:	d011      	beq.n	800db98 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	4a4f      	ldr	r2, [pc, #316]	; (800dcb8 <HAL_SD_GetCardStatus+0x178>)
 800db7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db82:	431a      	orrs	r2, r3
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2201      	movs	r2, #1
 800db8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800db90:	2301      	movs	r3, #1
 800db92:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800db96:	e070      	b.n	800dc7a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	099b      	lsrs	r3, r3, #6
 800db9c:	b2db      	uxtb	r3, r3
 800db9e:	f003 0303 	and.w	r3, r3, #3
 800dba2:	b2da      	uxtb	r2, r3
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	095b      	lsrs	r3, r3, #5
 800dbac:	b2db      	uxtb	r3, r3
 800dbae:	f003 0301 	and.w	r3, r3, #1
 800dbb2:	b2da      	uxtb	r2, r3
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	0a1b      	lsrs	r3, r3, #8
 800dbbc:	b29b      	uxth	r3, r3
 800dbbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dbc2:	b29a      	uxth	r2, r3
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	0e1b      	lsrs	r3, r3, #24
 800dbc8:	b29b      	uxth	r3, r3
 800dbca:	4313      	orrs	r3, r2
 800dbcc:	b29a      	uxth	r2, r3
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	061a      	lsls	r2, r3, #24
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	021b      	lsls	r3, r3, #8
 800dbda:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dbde:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	0a1b      	lsrs	r3, r3, #8
 800dbe4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dbe8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	0e1b      	lsrs	r3, r3, #24
 800dbee:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	b2da      	uxtb	r2, r3
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	0a1b      	lsrs	r3, r3, #8
 800dc00:	b2da      	uxtb	r2, r3
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800dc06:	693b      	ldr	r3, [r7, #16]
 800dc08:	0d1b      	lsrs	r3, r3, #20
 800dc0a:	b2db      	uxtb	r3, r3
 800dc0c:	f003 030f 	and.w	r3, r3, #15
 800dc10:	b2da      	uxtb	r2, r3
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800dc16:	693b      	ldr	r3, [r7, #16]
 800dc18:	0c1b      	lsrs	r3, r3, #16
 800dc1a:	b29b      	uxth	r3, r3
 800dc1c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dc20:	b29a      	uxth	r2, r3
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	b29b      	uxth	r3, r3
 800dc26:	b2db      	uxtb	r3, r3
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	4313      	orrs	r3, r2
 800dc2c:	b29a      	uxth	r2, r3
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	0a9b      	lsrs	r3, r3, #10
 800dc36:	b2db      	uxtb	r3, r3
 800dc38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc3c:	b2da      	uxtb	r2, r3
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	0a1b      	lsrs	r3, r3, #8
 800dc46:	b2db      	uxtb	r3, r3
 800dc48:	f003 0303 	and.w	r3, r3, #3
 800dc4c:	b2da      	uxtb	r2, r3
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	091b      	lsrs	r3, r3, #4
 800dc56:	b2db      	uxtb	r3, r3
 800dc58:	f003 030f 	and.w	r3, r3, #15
 800dc5c:	b2da      	uxtb	r2, r3
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	b2db      	uxtb	r3, r3
 800dc66:	f003 030f 	and.w	r3, r3, #15
 800dc6a:	b2da      	uxtb	r2, r3
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800dc70:	69bb      	ldr	r3, [r7, #24]
 800dc72:	0e1b      	lsrs	r3, r3, #24
 800dc74:	b2da      	uxtb	r2, r3
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dc82:	4618      	mov	r0, r3
 800dc84:	f004 f9e2 	bl	801204c <SDMMC_CmdBlockLength>
 800dc88:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d00d      	beq.n	800dcac <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	4a08      	ldr	r2, [pc, #32]	; (800dcb8 <HAL_SD_GetCardStatus+0x178>)
 800dc96:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc9c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2201      	movs	r2, #1
 800dca2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800dca6:	2301      	movs	r3, #1
 800dca8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800dcac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3750      	adds	r7, #80	; 0x50
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}
 800dcb8:	1fe00fff 	.word	0x1fe00fff

0800dcbc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	b083      	sub	sp, #12
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
 800dcc4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dd06:	2300      	movs	r3, #0
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	370c      	adds	r7, #12
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd12:	4770      	bx	lr

0800dd14 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dd14:	b590      	push	{r4, r7, lr}
 800dd16:	b08d      	sub	sp, #52	; 0x34
 800dd18:	af02      	add	r7, sp, #8
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2203      	movs	r2, #3
 800dd28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd30:	2b03      	cmp	r3, #3
 800dd32:	d02e      	beq.n	800dd92 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd3a:	d106      	bne.n	800dd4a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd40:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	635a      	str	r2, [r3, #52]	; 0x34
 800dd48:	e029      	b.n	800dd9e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dd50:	d10a      	bne.n	800dd68 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	f000 fb64 	bl	800e420 <SD_WideBus_Enable>
 800dd58:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd5e:	6a3b      	ldr	r3, [r7, #32]
 800dd60:	431a      	orrs	r2, r3
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	635a      	str	r2, [r3, #52]	; 0x34
 800dd66:	e01a      	b.n	800dd9e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d10a      	bne.n	800dd84 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f000 fba1 	bl	800e4b6 <SD_WideBus_Disable>
 800dd74:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd7a:	6a3b      	ldr	r3, [r7, #32]
 800dd7c:	431a      	orrs	r2, r3
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	635a      	str	r2, [r3, #52]	; 0x34
 800dd82:	e00c      	b.n	800dd9e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd88:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	635a      	str	r2, [r3, #52]	; 0x34
 800dd90:	e005      	b.n	800dd9e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd96:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d007      	beq.n	800ddb6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	4a5f      	ldr	r2, [pc, #380]	; (800df28 <HAL_SD_ConfigWideBusOperation+0x214>)
 800ddac:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ddae:	2301      	movs	r3, #1
 800ddb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ddb4:	e096      	b.n	800dee4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ddb6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ddba:	f04f 0100 	mov.w	r1, #0
 800ddbe:	f7fd fea3 	bl	800bb08 <HAL_RCCEx_GetPeriphCLKFreq>
 800ddc2:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800ddc4:	69fb      	ldr	r3, [r7, #28]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	f000 8083 	beq.w	800ded2 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	685b      	ldr	r3, [r3, #4]
 800ddd0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	689b      	ldr	r3, [r3, #8]
 800ddd6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	691b      	ldr	r3, [r3, #16]
 800dde0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	695a      	ldr	r2, [r3, #20]
 800dde6:	69fb      	ldr	r3, [r7, #28]
 800dde8:	4950      	ldr	r1, [pc, #320]	; (800df2c <HAL_SD_ConfigWideBusOperation+0x218>)
 800ddea:	fba1 1303 	umull	r1, r3, r1, r3
 800ddee:	0e1b      	lsrs	r3, r3, #24
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d303      	bcc.n	800ddfc <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	695b      	ldr	r3, [r3, #20]
 800ddf8:	61bb      	str	r3, [r7, #24]
 800ddfa:	e05a      	b.n	800deb2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de04:	d103      	bne.n	800de0e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	695b      	ldr	r3, [r3, #20]
 800de0a:	61bb      	str	r3, [r7, #24]
 800de0c:	e051      	b.n	800deb2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de16:	d126      	bne.n	800de66 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	695b      	ldr	r3, [r3, #20]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d10e      	bne.n	800de3e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800de20:	69fb      	ldr	r3, [r7, #28]
 800de22:	4a43      	ldr	r2, [pc, #268]	; (800df30 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800de24:	4293      	cmp	r3, r2
 800de26:	d906      	bls.n	800de36 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800de28:	69fb      	ldr	r3, [r7, #28]
 800de2a:	4a40      	ldr	r2, [pc, #256]	; (800df2c <HAL_SD_ConfigWideBusOperation+0x218>)
 800de2c:	fba2 2303 	umull	r2, r3, r2, r3
 800de30:	0e5b      	lsrs	r3, r3, #25
 800de32:	61bb      	str	r3, [r7, #24]
 800de34:	e03d      	b.n	800deb2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	695b      	ldr	r3, [r3, #20]
 800de3a:	61bb      	str	r3, [r7, #24]
 800de3c:	e039      	b.n	800deb2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	695b      	ldr	r3, [r3, #20]
 800de42:	005b      	lsls	r3, r3, #1
 800de44:	69fa      	ldr	r2, [r7, #28]
 800de46:	fbb2 f3f3 	udiv	r3, r2, r3
 800de4a:	4a39      	ldr	r2, [pc, #228]	; (800df30 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d906      	bls.n	800de5e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800de50:	69fb      	ldr	r3, [r7, #28]
 800de52:	4a36      	ldr	r2, [pc, #216]	; (800df2c <HAL_SD_ConfigWideBusOperation+0x218>)
 800de54:	fba2 2303 	umull	r2, r3, r2, r3
 800de58:	0e5b      	lsrs	r3, r3, #25
 800de5a:	61bb      	str	r3, [r7, #24]
 800de5c:	e029      	b.n	800deb2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	695b      	ldr	r3, [r3, #20]
 800de62:	61bb      	str	r3, [r7, #24]
 800de64:	e025      	b.n	800deb2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	695b      	ldr	r3, [r3, #20]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d10e      	bne.n	800de8c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800de6e:	69fb      	ldr	r3, [r7, #28]
 800de70:	4a30      	ldr	r2, [pc, #192]	; (800df34 <HAL_SD_ConfigWideBusOperation+0x220>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d906      	bls.n	800de84 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800de76:	69fb      	ldr	r3, [r7, #28]
 800de78:	4a2c      	ldr	r2, [pc, #176]	; (800df2c <HAL_SD_ConfigWideBusOperation+0x218>)
 800de7a:	fba2 2303 	umull	r2, r3, r2, r3
 800de7e:	0e1b      	lsrs	r3, r3, #24
 800de80:	61bb      	str	r3, [r7, #24]
 800de82:	e016      	b.n	800deb2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	695b      	ldr	r3, [r3, #20]
 800de88:	61bb      	str	r3, [r7, #24]
 800de8a:	e012      	b.n	800deb2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	695b      	ldr	r3, [r3, #20]
 800de90:	005b      	lsls	r3, r3, #1
 800de92:	69fa      	ldr	r2, [r7, #28]
 800de94:	fbb2 f3f3 	udiv	r3, r2, r3
 800de98:	4a26      	ldr	r2, [pc, #152]	; (800df34 <HAL_SD_ConfigWideBusOperation+0x220>)
 800de9a:	4293      	cmp	r3, r2
 800de9c:	d906      	bls.n	800deac <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800de9e:	69fb      	ldr	r3, [r7, #28]
 800dea0:	4a22      	ldr	r2, [pc, #136]	; (800df2c <HAL_SD_ConfigWideBusOperation+0x218>)
 800dea2:	fba2 2303 	umull	r2, r3, r2, r3
 800dea6:	0e1b      	lsrs	r3, r3, #24
 800dea8:	61bb      	str	r3, [r7, #24]
 800deaa:	e002      	b.n	800deb2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	695b      	ldr	r3, [r3, #20]
 800deb0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681c      	ldr	r4, [r3, #0]
 800deb6:	466a      	mov	r2, sp
 800deb8:	f107 0314 	add.w	r3, r7, #20
 800debc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dec0:	e882 0003 	stmia.w	r2, {r0, r1}
 800dec4:	f107 0308 	add.w	r3, r7, #8
 800dec8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800deca:	4620      	mov	r0, r4
 800decc:	f003 ffe0 	bl	8011e90 <SDMMC_Init>
 800ded0:	e008      	b.n	800dee4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ded6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800dede:	2301      	movs	r3, #1
 800dee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800deec:	4618      	mov	r0, r3
 800deee:	f004 f8ad 	bl	801204c <SDMMC_CmdBlockLength>
 800def2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800def4:	6a3b      	ldr	r3, [r7, #32]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d00c      	beq.n	800df14 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	4a0a      	ldr	r2, [pc, #40]	; (800df28 <HAL_SD_ConfigWideBusOperation+0x214>)
 800df00:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df06:	6a3b      	ldr	r3, [r7, #32]
 800df08:	431a      	orrs	r2, r3
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800df0e:	2301      	movs	r3, #1
 800df10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2201      	movs	r2, #1
 800df18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800df1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800df20:	4618      	mov	r0, r3
 800df22:	372c      	adds	r7, #44	; 0x2c
 800df24:	46bd      	mov	sp, r7
 800df26:	bd90      	pop	{r4, r7, pc}
 800df28:	1fe00fff 	.word	0x1fe00fff
 800df2c:	55e63b89 	.word	0x55e63b89
 800df30:	02faf080 	.word	0x02faf080
 800df34:	017d7840 	.word	0x017d7840

0800df38 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b086      	sub	sp, #24
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800df40:	2300      	movs	r3, #0
 800df42:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800df44:	f107 030c 	add.w	r3, r7, #12
 800df48:	4619      	mov	r1, r3
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f000 fa40 	bl	800e3d0 <SD_SendStatus>
 800df50:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d005      	beq.n	800df64 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	431a      	orrs	r2, r3
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	0a5b      	lsrs	r3, r3, #9
 800df68:	f003 030f 	and.w	r3, r3, #15
 800df6c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800df6e:	693b      	ldr	r3, [r7, #16]
}
 800df70:	4618      	mov	r0, r3
 800df72:	3718      	adds	r7, #24
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}

0800df78 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b090      	sub	sp, #64	; 0x40
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800df80:	2300      	movs	r3, #0
 800df82:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800df84:	f7f5 fd34 	bl	80039f0 <HAL_GetTick>
 800df88:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	4618      	mov	r0, r3
 800df90:	f003 ffd7 	bl	8011f42 <SDMMC_GetPowerState>
 800df94:	4603      	mov	r3, r0
 800df96:	2b00      	cmp	r3, #0
 800df98:	d102      	bne.n	800dfa0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800df9a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800df9e:	e0b5      	b.n	800e10c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfa4:	2b03      	cmp	r3, #3
 800dfa6:	d02e      	beq.n	800e006 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	4618      	mov	r0, r3
 800dfae:	f004 fa22 	bl	80123f6 <SDMMC_CmdSendCID>
 800dfb2:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800dfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d001      	beq.n	800dfbe <SD_InitCard+0x46>
    {
      return errorstate;
 800dfba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfbc:	e0a6      	b.n	800e10c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	2100      	movs	r1, #0
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f004 f802 	bl	8011fce <SDMMC_GetResponse>
 800dfca:	4602      	mov	r2, r0
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	2104      	movs	r1, #4
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f003 fff9 	bl	8011fce <SDMMC_GetResponse>
 800dfdc:	4602      	mov	r2, r0
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	2108      	movs	r1, #8
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f003 fff0 	bl	8011fce <SDMMC_GetResponse>
 800dfee:	4602      	mov	r2, r0
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	210c      	movs	r1, #12
 800dffa:	4618      	mov	r0, r3
 800dffc:	f003 ffe7 	bl	8011fce <SDMMC_GetResponse>
 800e000:	4602      	mov	r2, r0
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e00a:	2b03      	cmp	r3, #3
 800e00c:	d01d      	beq.n	800e04a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800e00e:	e019      	b.n	800e044 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	f107 020a 	add.w	r2, r7, #10
 800e018:	4611      	mov	r1, r2
 800e01a:	4618      	mov	r0, r3
 800e01c:	f004 fa2a 	bl	8012474 <SDMMC_CmdSetRelAdd>
 800e020:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e024:	2b00      	cmp	r3, #0
 800e026:	d001      	beq.n	800e02c <SD_InitCard+0xb4>
      {
        return errorstate;
 800e028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e02a:	e06f      	b.n	800e10c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e02c:	f7f5 fce0 	bl	80039f0 <HAL_GetTick>
 800e030:	4602      	mov	r2, r0
 800e032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e034:	1ad3      	subs	r3, r2, r3
 800e036:	f241 3287 	movw	r2, #4999	; 0x1387
 800e03a:	4293      	cmp	r3, r2
 800e03c:	d902      	bls.n	800e044 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e03e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e042:	e063      	b.n	800e10c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e044:	897b      	ldrh	r3, [r7, #10]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d0e2      	beq.n	800e010 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e04e:	2b03      	cmp	r3, #3
 800e050:	d036      	beq.n	800e0c0 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e052:	897b      	ldrh	r3, [r7, #10]
 800e054:	461a      	mov	r2, r3
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681a      	ldr	r2, [r3, #0]
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e062:	041b      	lsls	r3, r3, #16
 800e064:	4619      	mov	r1, r3
 800e066:	4610      	mov	r0, r2
 800e068:	f004 f9e4 	bl	8012434 <SDMMC_CmdSendCSD>
 800e06c:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e070:	2b00      	cmp	r3, #0
 800e072:	d001      	beq.n	800e078 <SD_InitCard+0x100>
    {
      return errorstate;
 800e074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e076:	e049      	b.n	800e10c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	2100      	movs	r1, #0
 800e07e:	4618      	mov	r0, r3
 800e080:	f003 ffa5 	bl	8011fce <SDMMC_GetResponse>
 800e084:	4602      	mov	r2, r0
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	2104      	movs	r1, #4
 800e090:	4618      	mov	r0, r3
 800e092:	f003 ff9c 	bl	8011fce <SDMMC_GetResponse>
 800e096:	4602      	mov	r2, r0
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	2108      	movs	r1, #8
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f003 ff93 	bl	8011fce <SDMMC_GetResponse>
 800e0a8:	4602      	mov	r2, r0
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	210c      	movs	r1, #12
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f003 ff8a 	bl	8011fce <SDMMC_GetResponse>
 800e0ba:	4602      	mov	r2, r0
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	2104      	movs	r1, #4
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f003 ff81 	bl	8011fce <SDMMC_GetResponse>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	0d1a      	lsrs	r2, r3, #20
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e0d4:	f107 030c 	add.w	r3, r7, #12
 800e0d8:	4619      	mov	r1, r3
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f7ff fb8c 	bl	800d7f8 <HAL_SD_GetCardCSD>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d002      	beq.n	800e0ec <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e0e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e0ea:	e00f      	b.n	800e10c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681a      	ldr	r2, [r3, #0]
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0f4:	041b      	lsls	r3, r3, #16
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	4610      	mov	r0, r2
 800e0fa:	f004 f893 	bl	8012224 <SDMMC_CmdSelDesel>
 800e0fe:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e102:	2b00      	cmp	r3, #0
 800e104:	d001      	beq.n	800e10a <SD_InitCard+0x192>
  {
    return errorstate;
 800e106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e108:	e000      	b.n	800e10c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e10a:	2300      	movs	r3, #0
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3740      	adds	r7, #64	; 0x40
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}

0800e114 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b086      	sub	sp, #24
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e11c:	2300      	movs	r3, #0
 800e11e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e120:	2300      	movs	r3, #0
 800e122:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e124:	2300      	movs	r3, #0
 800e126:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	4618      	mov	r0, r3
 800e12e:	f004 f89c 	bl	801226a <SDMMC_CmdGoIdleState>
 800e132:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d001      	beq.n	800e13e <SD_PowerON+0x2a>
  {
    return errorstate;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	e072      	b.n	800e224 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	4618      	mov	r0, r3
 800e144:	f004 f8af 	bl	80122a6 <SDMMC_CmdOperCond>
 800e148:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e150:	d10d      	bne.n	800e16e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	2200      	movs	r2, #0
 800e156:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	4618      	mov	r0, r3
 800e15e:	f004 f884 	bl	801226a <SDMMC_CmdGoIdleState>
 800e162:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d004      	beq.n	800e174 <SD_PowerON+0x60>
    {
      return errorstate;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	e05a      	b.n	800e224 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	2201      	movs	r2, #1
 800e172:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e178:	2b01      	cmp	r3, #1
 800e17a:	d137      	bne.n	800e1ec <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	2100      	movs	r1, #0
 800e182:	4618      	mov	r0, r3
 800e184:	f004 f8af 	bl	80122e6 <SDMMC_CmdAppCommand>
 800e188:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d02d      	beq.n	800e1ec <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e190:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e194:	e046      	b.n	800e224 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	2100      	movs	r1, #0
 800e19c:	4618      	mov	r0, r3
 800e19e:	f004 f8a2 	bl	80122e6 <SDMMC_CmdAppCommand>
 800e1a2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d001      	beq.n	800e1ae <SD_PowerON+0x9a>
    {
      return errorstate;
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	e03a      	b.n	800e224 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	491e      	ldr	r1, [pc, #120]	; (800e22c <SD_PowerON+0x118>)
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f004 f8b9 	bl	801232c <SDMMC_CmdAppOperCommand>
 800e1ba:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d002      	beq.n	800e1c8 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e1c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e1c6:	e02d      	b.n	800e224 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	2100      	movs	r1, #0
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f003 fefd 	bl	8011fce <SDMMC_GetResponse>
 800e1d4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e1d6:	697b      	ldr	r3, [r7, #20]
 800e1d8:	0fdb      	lsrs	r3, r3, #31
 800e1da:	2b01      	cmp	r3, #1
 800e1dc:	d101      	bne.n	800e1e2 <SD_PowerON+0xce>
 800e1de:	2301      	movs	r3, #1
 800e1e0:	e000      	b.n	800e1e4 <SD_PowerON+0xd0>
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	613b      	str	r3, [r7, #16]

    count++;
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e1f2:	4293      	cmp	r3, r2
 800e1f4:	d802      	bhi.n	800e1fc <SD_PowerON+0xe8>
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d0cc      	beq.n	800e196 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e202:	4293      	cmp	r3, r2
 800e204:	d902      	bls.n	800e20c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e206:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e20a:	e00b      	b.n	800e224 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2200      	movs	r2, #0
 800e210:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d002      	beq.n	800e222 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2201      	movs	r2, #1
 800e220:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e222:	2300      	movs	r3, #0
}
 800e224:	4618      	mov	r0, r3
 800e226:	3718      	adds	r7, #24
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}
 800e22c:	c1100000 	.word	0xc1100000

0800e230 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b08c      	sub	sp, #48	; 0x30
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
 800e238:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e23a:	f7f5 fbd9 	bl	80039f0 <HAL_GetTick>
 800e23e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	2100      	movs	r1, #0
 800e24a:	4618      	mov	r0, r3
 800e24c:	f003 febf 	bl	8011fce <SDMMC_GetResponse>
 800e250:	4603      	mov	r3, r0
 800e252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e256:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e25a:	d102      	bne.n	800e262 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e25c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e260:	e0b0      	b.n	800e3c4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	2140      	movs	r1, #64	; 0x40
 800e268:	4618      	mov	r0, r3
 800e26a:	f003 feef 	bl	801204c <SDMMC_CmdBlockLength>
 800e26e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e270:	6a3b      	ldr	r3, [r7, #32]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d005      	beq.n	800e282 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e27e:	6a3b      	ldr	r3, [r7, #32]
 800e280:	e0a0      	b.n	800e3c4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681a      	ldr	r2, [r3, #0]
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e28a:	041b      	lsls	r3, r3, #16
 800e28c:	4619      	mov	r1, r3
 800e28e:	4610      	mov	r0, r2
 800e290:	f004 f829 	bl	80122e6 <SDMMC_CmdAppCommand>
 800e294:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e296:	6a3b      	ldr	r3, [r7, #32]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d005      	beq.n	800e2a8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e2a4:	6a3b      	ldr	r3, [r7, #32]
 800e2a6:	e08d      	b.n	800e3c4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e2a8:	f04f 33ff 	mov.w	r3, #4294967295
 800e2ac:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e2ae:	2340      	movs	r3, #64	; 0x40
 800e2b0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e2b2:	2360      	movs	r3, #96	; 0x60
 800e2b4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e2b6:	2302      	movs	r3, #2
 800e2b8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e2be:	2301      	movs	r3, #1
 800e2c0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	f107 0208 	add.w	r2, r7, #8
 800e2ca:	4611      	mov	r1, r2
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f003 fe91 	bl	8011ff4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f004 f911 	bl	80124fe <SDMMC_CmdStatusRegister>
 800e2dc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e2de:	6a3b      	ldr	r3, [r7, #32]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d02b      	beq.n	800e33c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e2ec:	6a3b      	ldr	r3, [r7, #32]
 800e2ee:	e069      	b.n	800e3c4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d013      	beq.n	800e326 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e2fe:	2300      	movs	r3, #0
 800e300:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e302:	e00d      	b.n	800e320 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	4618      	mov	r0, r3
 800e30a:	f003 fdeb 	bl	8011ee4 <SDMMC_ReadFIFO>
 800e30e:	4602      	mov	r2, r0
 800e310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e312:	601a      	str	r2, [r3, #0]
        pData++;
 800e314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e316:	3304      	adds	r3, #4
 800e318:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e31c:	3301      	adds	r3, #1
 800e31e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e322:	2b07      	cmp	r3, #7
 800e324:	d9ee      	bls.n	800e304 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e326:	f7f5 fb63 	bl	80039f0 <HAL_GetTick>
 800e32a:	4602      	mov	r2, r0
 800e32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e32e:	1ad3      	subs	r3, r2, r3
 800e330:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e334:	d102      	bne.n	800e33c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e336:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e33a:	e043      	b.n	800e3c4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e342:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e346:	2b00      	cmp	r3, #0
 800e348:	d0d2      	beq.n	800e2f0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e350:	f003 0308 	and.w	r3, r3, #8
 800e354:	2b00      	cmp	r3, #0
 800e356:	d001      	beq.n	800e35c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e358:	2308      	movs	r3, #8
 800e35a:	e033      	b.n	800e3c4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e362:	f003 0302 	and.w	r3, r3, #2
 800e366:	2b00      	cmp	r3, #0
 800e368:	d001      	beq.n	800e36e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e36a:	2302      	movs	r3, #2
 800e36c:	e02a      	b.n	800e3c4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e374:	f003 0320 	and.w	r3, r3, #32
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d017      	beq.n	800e3ac <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e37c:	2320      	movs	r3, #32
 800e37e:	e021      	b.n	800e3c4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	4618      	mov	r0, r3
 800e386:	f003 fdad 	bl	8011ee4 <SDMMC_ReadFIFO>
 800e38a:	4602      	mov	r2, r0
 800e38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e38e:	601a      	str	r2, [r3, #0]
    pData++;
 800e390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e392:	3304      	adds	r3, #4
 800e394:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e396:	f7f5 fb2b 	bl	80039f0 <HAL_GetTick>
 800e39a:	4602      	mov	r2, r0
 800e39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e39e:	1ad3      	subs	r3, r2, r3
 800e3a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3a4:	d102      	bne.n	800e3ac <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e3a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e3aa:	e00b      	b.n	800e3c4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d1e2      	bne.n	800e380 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	4a03      	ldr	r2, [pc, #12]	; (800e3cc <SD_SendSDStatus+0x19c>)
 800e3c0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e3c2:	2300      	movs	r3, #0
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3730      	adds	r7, #48	; 0x30
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}
 800e3cc:	18000f3a 	.word	0x18000f3a

0800e3d0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b084      	sub	sp, #16
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
 800e3d8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d102      	bne.n	800e3e6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e3e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e3e4:	e018      	b.n	800e418 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681a      	ldr	r2, [r3, #0]
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3ee:	041b      	lsls	r3, r3, #16
 800e3f0:	4619      	mov	r1, r3
 800e3f2:	4610      	mov	r0, r2
 800e3f4:	f004 f860 	bl	80124b8 <SDMMC_CmdSendStatus>
 800e3f8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d001      	beq.n	800e404 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	e009      	b.n	800e418 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	2100      	movs	r1, #0
 800e40a:	4618      	mov	r0, r3
 800e40c:	f003 fddf 	bl	8011fce <SDMMC_GetResponse>
 800e410:	4602      	mov	r2, r0
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e416:	2300      	movs	r3, #0
}
 800e418:	4618      	mov	r0, r3
 800e41a:	3710      	adds	r7, #16
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}

0800e420 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b086      	sub	sp, #24
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e428:	2300      	movs	r3, #0
 800e42a:	60fb      	str	r3, [r7, #12]
 800e42c:	2300      	movs	r3, #0
 800e42e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	2100      	movs	r1, #0
 800e436:	4618      	mov	r0, r3
 800e438:	f003 fdc9 	bl	8011fce <SDMMC_GetResponse>
 800e43c:	4603      	mov	r3, r0
 800e43e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e442:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e446:	d102      	bne.n	800e44e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e448:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e44c:	e02f      	b.n	800e4ae <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e44e:	f107 030c 	add.w	r3, r7, #12
 800e452:	4619      	mov	r1, r3
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f000 f879 	bl	800e54c <SD_FindSCR>
 800e45a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d001      	beq.n	800e466 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	e023      	b.n	800e4ae <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e466:	693b      	ldr	r3, [r7, #16]
 800e468:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d01c      	beq.n	800e4aa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681a      	ldr	r2, [r3, #0]
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e478:	041b      	lsls	r3, r3, #16
 800e47a:	4619      	mov	r1, r3
 800e47c:	4610      	mov	r0, r2
 800e47e:	f003 ff32 	bl	80122e6 <SDMMC_CmdAppCommand>
 800e482:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d001      	beq.n	800e48e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e48a:	697b      	ldr	r3, [r7, #20]
 800e48c:	e00f      	b.n	800e4ae <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	2102      	movs	r1, #2
 800e494:	4618      	mov	r0, r3
 800e496:	f003 ff69 	bl	801236c <SDMMC_CmdBusWidth>
 800e49a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d001      	beq.n	800e4a6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	e003      	b.n	800e4ae <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	e001      	b.n	800e4ae <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e4aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3718      	adds	r7, #24
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}

0800e4b6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e4b6:	b580      	push	{r7, lr}
 800e4b8:	b086      	sub	sp, #24
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e4be:	2300      	movs	r3, #0
 800e4c0:	60fb      	str	r3, [r7, #12]
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	2100      	movs	r1, #0
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f003 fd7e 	bl	8011fce <SDMMC_GetResponse>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e4d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e4dc:	d102      	bne.n	800e4e4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e4de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e4e2:	e02f      	b.n	800e544 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e4e4:	f107 030c 	add.w	r3, r7, #12
 800e4e8:	4619      	mov	r1, r3
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f000 f82e 	bl	800e54c <SD_FindSCR>
 800e4f0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d001      	beq.n	800e4fc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	e023      	b.n	800e544 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e4fc:	693b      	ldr	r3, [r7, #16]
 800e4fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e502:	2b00      	cmp	r3, #0
 800e504:	d01c      	beq.n	800e540 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681a      	ldr	r2, [r3, #0]
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e50e:	041b      	lsls	r3, r3, #16
 800e510:	4619      	mov	r1, r3
 800e512:	4610      	mov	r0, r2
 800e514:	f003 fee7 	bl	80122e6 <SDMMC_CmdAppCommand>
 800e518:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e51a:	697b      	ldr	r3, [r7, #20]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d001      	beq.n	800e524 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e520:	697b      	ldr	r3, [r7, #20]
 800e522:	e00f      	b.n	800e544 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	2100      	movs	r1, #0
 800e52a:	4618      	mov	r0, r3
 800e52c:	f003 ff1e 	bl	801236c <SDMMC_CmdBusWidth>
 800e530:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d001      	beq.n	800e53c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	e003      	b.n	800e544 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e53c:	2300      	movs	r3, #0
 800e53e:	e001      	b.n	800e544 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e540:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e544:	4618      	mov	r0, r3
 800e546:	3718      	adds	r7, #24
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}

0800e54c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b08e      	sub	sp, #56	; 0x38
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
 800e554:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e556:	f7f5 fa4b 	bl	80039f0 <HAL_GetTick>
 800e55a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e55c:	2300      	movs	r3, #0
 800e55e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e560:	2300      	movs	r3, #0
 800e562:	60bb      	str	r3, [r7, #8]
 800e564:	2300      	movs	r3, #0
 800e566:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	2108      	movs	r1, #8
 800e572:	4618      	mov	r0, r3
 800e574:	f003 fd6a 	bl	801204c <SDMMC_CmdBlockLength>
 800e578:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d001      	beq.n	800e584 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e582:	e0ad      	b.n	800e6e0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681a      	ldr	r2, [r3, #0]
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e58c:	041b      	lsls	r3, r3, #16
 800e58e:	4619      	mov	r1, r3
 800e590:	4610      	mov	r0, r2
 800e592:	f003 fea8 	bl	80122e6 <SDMMC_CmdAppCommand>
 800e596:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d001      	beq.n	800e5a2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a0:	e09e      	b.n	800e6e0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e5a2:	f04f 33ff 	mov.w	r3, #4294967295
 800e5a6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e5a8:	2308      	movs	r3, #8
 800e5aa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e5ac:	2330      	movs	r3, #48	; 0x30
 800e5ae:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e5b0:	2302      	movs	r3, #2
 800e5b2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f107 0210 	add.w	r2, r7, #16
 800e5c4:	4611      	mov	r1, r2
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	f003 fd14 	bl	8011ff4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f003 feee 	bl	80123b2 <SDMMC_CmdSendSCR>
 800e5d6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d027      	beq.n	800e62e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e0:	e07e      	b.n	800e6e0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d113      	bne.n	800e618 <SD_FindSCR+0xcc>
 800e5f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d110      	bne.n	800e618 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f003 fc72 	bl	8011ee4 <SDMMC_ReadFIFO>
 800e600:	4603      	mov	r3, r0
 800e602:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	4618      	mov	r0, r3
 800e60a:	f003 fc6b 	bl	8011ee4 <SDMMC_ReadFIFO>
 800e60e:	4603      	mov	r3, r0
 800e610:	60fb      	str	r3, [r7, #12]
      index++;
 800e612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e614:	3301      	adds	r3, #1
 800e616:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e618:	f7f5 f9ea 	bl	80039f0 <HAL_GetTick>
 800e61c:	4602      	mov	r2, r0
 800e61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e620:	1ad3      	subs	r3, r2, r3
 800e622:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e626:	d102      	bne.n	800e62e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e628:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e62c:	e058      	b.n	800e6e0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e634:	f240 532a 	movw	r3, #1322	; 0x52a
 800e638:	4013      	ands	r3, r2
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d0d1      	beq.n	800e5e2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e644:	f003 0308 	and.w	r3, r3, #8
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d005      	beq.n	800e658 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	2208      	movs	r2, #8
 800e652:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e654:	2308      	movs	r3, #8
 800e656:	e043      	b.n	800e6e0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e65e:	f003 0302 	and.w	r3, r3, #2
 800e662:	2b00      	cmp	r3, #0
 800e664:	d005      	beq.n	800e672 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	2202      	movs	r2, #2
 800e66c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e66e:	2302      	movs	r3, #2
 800e670:	e036      	b.n	800e6e0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e678:	f003 0320 	and.w	r3, r3, #32
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d005      	beq.n	800e68c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	2220      	movs	r2, #32
 800e686:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e688:	2320      	movs	r3, #32
 800e68a:	e029      	b.n	800e6e0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	4a15      	ldr	r2, [pc, #84]	; (800e6e8 <SD_FindSCR+0x19c>)
 800e692:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	061a      	lsls	r2, r3, #24
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	021b      	lsls	r3, r3, #8
 800e69c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e6a0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	0a1b      	lsrs	r3, r3, #8
 800e6a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e6aa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	0e1b      	lsrs	r3, r3, #24
 800e6b0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b4:	601a      	str	r2, [r3, #0]
    scr++;
 800e6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b8:	3304      	adds	r3, #4
 800e6ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e6bc:	68bb      	ldr	r3, [r7, #8]
 800e6be:	061a      	lsls	r2, r3, #24
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	021b      	lsls	r3, r3, #8
 800e6c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e6c8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	0a1b      	lsrs	r3, r3, #8
 800e6ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e6d2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	0e1b      	lsrs	r3, r3, #24
 800e6d8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6dc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e6de:	2300      	movs	r3, #0
}
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	3738      	adds	r7, #56	; 0x38
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}
 800e6e8:	18000f3a 	.word	0x18000f3a

0800e6ec <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b086      	sub	sp, #24
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6f8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6fe:	2b1f      	cmp	r3, #31
 800e700:	d936      	bls.n	800e770 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800e702:	2300      	movs	r3, #0
 800e704:	617b      	str	r3, [r7, #20]
 800e706:	e027      	b.n	800e758 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	4618      	mov	r0, r3
 800e70e:	f003 fbe9 	bl	8011ee4 <SDMMC_ReadFIFO>
 800e712:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	b2da      	uxtb	r2, r3
 800e718:	693b      	ldr	r3, [r7, #16]
 800e71a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	3301      	adds	r3, #1
 800e720:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	0a1b      	lsrs	r3, r3, #8
 800e726:	b2da      	uxtb	r2, r3
 800e728:	693b      	ldr	r3, [r7, #16]
 800e72a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	3301      	adds	r3, #1
 800e730:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	0c1b      	lsrs	r3, r3, #16
 800e736:	b2da      	uxtb	r2, r3
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e73c:	693b      	ldr	r3, [r7, #16]
 800e73e:	3301      	adds	r3, #1
 800e740:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	0e1b      	lsrs	r3, r3, #24
 800e746:	b2da      	uxtb	r2, r3
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e74c:	693b      	ldr	r3, [r7, #16]
 800e74e:	3301      	adds	r3, #1
 800e750:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	3301      	adds	r3, #1
 800e756:	617b      	str	r3, [r7, #20]
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	2b07      	cmp	r3, #7
 800e75c:	d9d4      	bls.n	800e708 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	693a      	ldr	r2, [r7, #16]
 800e762:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e768:	f1a3 0220 	sub.w	r2, r3, #32
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800e770:	bf00      	nop
 800e772:	3718      	adds	r7, #24
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}

0800e778 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b086      	sub	sp, #24
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	69db      	ldr	r3, [r3, #28]
 800e784:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	6a1b      	ldr	r3, [r3, #32]
 800e78a:	2b1f      	cmp	r3, #31
 800e78c:	d93a      	bls.n	800e804 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800e78e:	2300      	movs	r3, #0
 800e790:	617b      	str	r3, [r7, #20]
 800e792:	e02b      	b.n	800e7ec <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e79a:	693b      	ldr	r3, [r7, #16]
 800e79c:	3301      	adds	r3, #1
 800e79e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e7a0:	693b      	ldr	r3, [r7, #16]
 800e7a2:	781b      	ldrb	r3, [r3, #0]
 800e7a4:	021a      	lsls	r2, r3, #8
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	4313      	orrs	r3, r2
 800e7aa:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e7ac:	693b      	ldr	r3, [r7, #16]
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e7b2:	693b      	ldr	r3, [r7, #16]
 800e7b4:	781b      	ldrb	r3, [r3, #0]
 800e7b6:	041a      	lsls	r2, r3, #16
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	4313      	orrs	r3, r2
 800e7bc:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e7be:	693b      	ldr	r3, [r7, #16]
 800e7c0:	3301      	adds	r3, #1
 800e7c2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e7c4:	693b      	ldr	r3, [r7, #16]
 800e7c6:	781b      	ldrb	r3, [r3, #0]
 800e7c8:	061a      	lsls	r2, r3, #24
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	4313      	orrs	r3, r2
 800e7ce:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	3301      	adds	r3, #1
 800e7d4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	f107 020c 	add.w	r2, r7, #12
 800e7de:	4611      	mov	r1, r2
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f003 fb8c 	bl	8011efe <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	3301      	adds	r3, #1
 800e7ea:	617b      	str	r3, [r7, #20]
 800e7ec:	697b      	ldr	r3, [r7, #20]
 800e7ee:	2b07      	cmp	r3, #7
 800e7f0:	d9d0      	bls.n	800e794 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	693a      	ldr	r2, [r7, #16]
 800e7f6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	6a1b      	ldr	r3, [r3, #32]
 800e7fc:	f1a3 0220 	sub.w	r2, r3, #32
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	621a      	str	r2, [r3, #32]
  }
}
 800e804:	bf00      	nop
 800e806:	3718      	adds	r7, #24
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}

0800e80c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e80c:	b480      	push	{r7}
 800e80e:	b083      	sub	sp, #12
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e814:	bf00      	nop
 800e816:	370c      	adds	r7, #12
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr

0800e820 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e820:	b480      	push	{r7}
 800e822:	b083      	sub	sp, #12
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e828:	bf00      	nop
 800e82a:	370c      	adds	r7, #12
 800e82c:	46bd      	mov	sp, r7
 800e82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e832:	4770      	bx	lr

0800e834 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e834:	b480      	push	{r7}
 800e836:	b083      	sub	sp, #12
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e83c:	bf00      	nop
 800e83e:	370c      	adds	r7, #12
 800e840:	46bd      	mov	sp, r7
 800e842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e846:	4770      	bx	lr

0800e848 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e848:	b480      	push	{r7}
 800e84a:	b083      	sub	sp, #12
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e850:	bf00      	nop
 800e852:	370c      	adds	r7, #12
 800e854:	46bd      	mov	sp, r7
 800e856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85a:	4770      	bx	lr

0800e85c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b084      	sub	sp, #16
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d101      	bne.n	800e86e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e86a:	2301      	movs	r3, #1
 800e86c:	e10f      	b.n	800ea8e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2200      	movs	r2, #0
 800e872:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	4a87      	ldr	r2, [pc, #540]	; (800ea98 <HAL_SPI_Init+0x23c>)
 800e87a:	4293      	cmp	r3, r2
 800e87c:	d00f      	beq.n	800e89e <HAL_SPI_Init+0x42>
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	4a86      	ldr	r2, [pc, #536]	; (800ea9c <HAL_SPI_Init+0x240>)
 800e884:	4293      	cmp	r3, r2
 800e886:	d00a      	beq.n	800e89e <HAL_SPI_Init+0x42>
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	4a84      	ldr	r2, [pc, #528]	; (800eaa0 <HAL_SPI_Init+0x244>)
 800e88e:	4293      	cmp	r3, r2
 800e890:	d005      	beq.n	800e89e <HAL_SPI_Init+0x42>
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	68db      	ldr	r3, [r3, #12]
 800e896:	2b0f      	cmp	r3, #15
 800e898:	d901      	bls.n	800e89e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e89a:	2301      	movs	r3, #1
 800e89c:	e0f7      	b.n	800ea8e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f000 fd5a 	bl	800f358 <SPI_GetPacketSize>
 800e8a4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	4a7b      	ldr	r2, [pc, #492]	; (800ea98 <HAL_SPI_Init+0x23c>)
 800e8ac:	4293      	cmp	r3, r2
 800e8ae:	d00c      	beq.n	800e8ca <HAL_SPI_Init+0x6e>
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	4a79      	ldr	r2, [pc, #484]	; (800ea9c <HAL_SPI_Init+0x240>)
 800e8b6:	4293      	cmp	r3, r2
 800e8b8:	d007      	beq.n	800e8ca <HAL_SPI_Init+0x6e>
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	4a78      	ldr	r2, [pc, #480]	; (800eaa0 <HAL_SPI_Init+0x244>)
 800e8c0:	4293      	cmp	r3, r2
 800e8c2:	d002      	beq.n	800e8ca <HAL_SPI_Init+0x6e>
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	2b08      	cmp	r3, #8
 800e8c8:	d811      	bhi.n	800e8ee <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e8ce:	4a72      	ldr	r2, [pc, #456]	; (800ea98 <HAL_SPI_Init+0x23c>)
 800e8d0:	4293      	cmp	r3, r2
 800e8d2:	d009      	beq.n	800e8e8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	4a70      	ldr	r2, [pc, #448]	; (800ea9c <HAL_SPI_Init+0x240>)
 800e8da:	4293      	cmp	r3, r2
 800e8dc:	d004      	beq.n	800e8e8 <HAL_SPI_Init+0x8c>
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	4a6f      	ldr	r2, [pc, #444]	; (800eaa0 <HAL_SPI_Init+0x244>)
 800e8e4:	4293      	cmp	r3, r2
 800e8e6:	d104      	bne.n	800e8f2 <HAL_SPI_Init+0x96>
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	2b10      	cmp	r3, #16
 800e8ec:	d901      	bls.n	800e8f2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e8ee:	2301      	movs	r3, #1
 800e8f0:	e0cd      	b.n	800ea8e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e8f8:	b2db      	uxtb	r3, r3
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d106      	bne.n	800e90c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2200      	movs	r2, #0
 800e902:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	f7f4 fa8a 	bl	8002e20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2202      	movs	r2, #2
 800e910:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	681a      	ldr	r2, [r3, #0]
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	f022 0201 	bic.w	r2, r2, #1
 800e922:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	689b      	ldr	r3, [r3, #8]
 800e92a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e92e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	699b      	ldr	r3, [r3, #24]
 800e934:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e938:	d119      	bne.n	800e96e <HAL_SPI_Init+0x112>
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	685b      	ldr	r3, [r3, #4]
 800e93e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e942:	d103      	bne.n	800e94c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d008      	beq.n	800e95e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e950:	2b00      	cmp	r3, #0
 800e952:	d10c      	bne.n	800e96e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e958:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e95c:	d107      	bne.n	800e96e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	681a      	ldr	r2, [r3, #0]
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e96c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	685b      	ldr	r3, [r3, #4]
 800e972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e976:	2b00      	cmp	r3, #0
 800e978:	d00f      	beq.n	800e99a <HAL_SPI_Init+0x13e>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	68db      	ldr	r3, [r3, #12]
 800e97e:	2b06      	cmp	r3, #6
 800e980:	d90b      	bls.n	800e99a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	430a      	orrs	r2, r1
 800e996:	601a      	str	r2, [r3, #0]
 800e998:	e007      	b.n	800e9aa <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	681a      	ldr	r2, [r3, #0]
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e9a8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	69da      	ldr	r2, [r3, #28]
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9b2:	431a      	orrs	r2, r3
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	431a      	orrs	r2, r3
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9bc:	ea42 0103 	orr.w	r1, r2, r3
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	68da      	ldr	r2, [r3, #12]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	430a      	orrs	r2, r1
 800e9ca:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9d4:	431a      	orrs	r2, r3
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9da:	431a      	orrs	r2, r3
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	699b      	ldr	r3, [r3, #24]
 800e9e0:	431a      	orrs	r2, r3
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	691b      	ldr	r3, [r3, #16]
 800e9e6:	431a      	orrs	r2, r3
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	695b      	ldr	r3, [r3, #20]
 800e9ec:	431a      	orrs	r2, r3
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6a1b      	ldr	r3, [r3, #32]
 800e9f2:	431a      	orrs	r2, r3
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	685b      	ldr	r3, [r3, #4]
 800e9f8:	431a      	orrs	r2, r3
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e9fe:	431a      	orrs	r2, r3
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	689b      	ldr	r3, [r3, #8]
 800ea04:	431a      	orrs	r2, r3
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea0a:	ea42 0103 	orr.w	r1, r2, r3
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	430a      	orrs	r2, r1
 800ea18:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	685b      	ldr	r3, [r3, #4]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d113      	bne.n	800ea4a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	689b      	ldr	r3, [r3, #8]
 800ea28:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ea34:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	689b      	ldr	r3, [r3, #8]
 800ea3c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ea48:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	f022 0201 	bic.w	r2, r2, #1
 800ea58:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	685b      	ldr	r3, [r3, #4]
 800ea5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d00a      	beq.n	800ea7c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	68db      	ldr	r3, [r3, #12]
 800ea6c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	430a      	orrs	r2, r1
 800ea7a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2200      	movs	r2, #0
 800ea80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2201      	movs	r2, #1
 800ea88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ea8c:	2300      	movs	r3, #0
}
 800ea8e:	4618      	mov	r0, r3
 800ea90:	3710      	adds	r7, #16
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}
 800ea96:	bf00      	nop
 800ea98:	40013000 	.word	0x40013000
 800ea9c:	40003800 	.word	0x40003800
 800eaa0:	40003c00 	.word	0x40003c00

0800eaa4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b08a      	sub	sp, #40	; 0x28
 800eaa8:	af02      	add	r7, sp, #8
 800eaaa:	60f8      	str	r0, [r7, #12]
 800eaac:	60b9      	str	r1, [r7, #8]
 800eaae:	603b      	str	r3, [r7, #0]
 800eab0:	4613      	mov	r3, r2
 800eab2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	3320      	adds	r3, #32
 800eaba:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eabc:	2300      	movs	r3, #0
 800eabe:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eac6:	2b01      	cmp	r3, #1
 800eac8:	d101      	bne.n	800eace <HAL_SPI_Transmit+0x2a>
 800eaca:	2302      	movs	r3, #2
 800eacc:	e1e1      	b.n	800ee92 <HAL_SPI_Transmit+0x3ee>
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	2201      	movs	r2, #1
 800ead2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ead6:	f7f4 ff8b 	bl	80039f0 <HAL_GetTick>
 800eada:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eae2:	b2db      	uxtb	r3, r3
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	d007      	beq.n	800eaf8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800eae8:	2302      	movs	r3, #2
 800eaea:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	2200      	movs	r2, #0
 800eaf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eaf4:	7efb      	ldrb	r3, [r7, #27]
 800eaf6:	e1cc      	b.n	800ee92 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d002      	beq.n	800eb04 <HAL_SPI_Transmit+0x60>
 800eafe:	88fb      	ldrh	r3, [r7, #6]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d107      	bne.n	800eb14 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800eb04:	2301      	movs	r3, #1
 800eb06:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eb10:	7efb      	ldrb	r3, [r7, #27]
 800eb12:	e1be      	b.n	800ee92 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	2203      	movs	r2, #3
 800eb18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	68ba      	ldr	r2, [r7, #8]
 800eb28:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	88fa      	ldrh	r2, [r7, #6]
 800eb2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	88fa      	ldrh	r2, [r7, #6]
 800eb36:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	2200      	movs	r2, #0
 800eb44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	2200      	movs	r2, #0
 800eb54:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	689b      	ldr	r3, [r3, #8]
 800eb60:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800eb64:	d108      	bne.n	800eb78 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	681a      	ldr	r2, [r3, #0]
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eb74:	601a      	str	r2, [r3, #0]
 800eb76:	e009      	b.n	800eb8c <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	68db      	ldr	r3, [r3, #12]
 800eb7e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800eb8a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	685a      	ldr	r2, [r3, #4]
 800eb92:	4b96      	ldr	r3, [pc, #600]	; (800edec <HAL_SPI_Transmit+0x348>)
 800eb94:	4013      	ands	r3, r2
 800eb96:	88f9      	ldrh	r1, [r7, #6]
 800eb98:	68fa      	ldr	r2, [r7, #12]
 800eb9a:	6812      	ldr	r2, [r2, #0]
 800eb9c:	430b      	orrs	r3, r1
 800eb9e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	681a      	ldr	r2, [r3, #0]
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	f042 0201 	orr.w	r2, r2, #1
 800ebae:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	685b      	ldr	r3, [r3, #4]
 800ebb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ebb8:	d107      	bne.n	800ebca <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	681a      	ldr	r2, [r3, #0]
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ebc8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	68db      	ldr	r3, [r3, #12]
 800ebce:	2b0f      	cmp	r3, #15
 800ebd0:	d947      	bls.n	800ec62 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ebd2:	e03f      	b.n	800ec54 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	695b      	ldr	r3, [r3, #20]
 800ebda:	f003 0302 	and.w	r3, r3, #2
 800ebde:	2b02      	cmp	r3, #2
 800ebe0:	d114      	bne.n	800ec0c <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	6812      	ldr	r2, [r2, #0]
 800ebec:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ebf2:	1d1a      	adds	r2, r3, #4
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ebfe:	b29b      	uxth	r3, r3
 800ec00:	3b01      	subs	r3, #1
 800ec02:	b29a      	uxth	r2, r3
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ec0a:	e023      	b.n	800ec54 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec0c:	f7f4 fef0 	bl	80039f0 <HAL_GetTick>
 800ec10:	4602      	mov	r2, r0
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	1ad3      	subs	r3, r2, r3
 800ec16:	683a      	ldr	r2, [r7, #0]
 800ec18:	429a      	cmp	r2, r3
 800ec1a:	d803      	bhi.n	800ec24 <HAL_SPI_Transmit+0x180>
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec22:	d102      	bne.n	800ec2a <HAL_SPI_Transmit+0x186>
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d114      	bne.n	800ec54 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ec2a:	68f8      	ldr	r0, [r7, #12]
 800ec2c:	f000 fac6 	bl	800f1bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	2200      	movs	r2, #0
 800ec34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	2201      	movs	r2, #1
 800ec4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ec50:	2303      	movs	r3, #3
 800ec52:	e11e      	b.n	800ee92 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec5a:	b29b      	uxth	r3, r3
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d1b9      	bne.n	800ebd4 <HAL_SPI_Transmit+0x130>
 800ec60:	e0f1      	b.n	800ee46 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	68db      	ldr	r3, [r3, #12]
 800ec66:	2b07      	cmp	r3, #7
 800ec68:	f240 80e6 	bls.w	800ee38 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ec6c:	e05d      	b.n	800ed2a <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	695b      	ldr	r3, [r3, #20]
 800ec74:	f003 0302 	and.w	r3, r3, #2
 800ec78:	2b02      	cmp	r3, #2
 800ec7a:	d132      	bne.n	800ece2 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec82:	b29b      	uxth	r3, r3
 800ec84:	2b01      	cmp	r3, #1
 800ec86:	d918      	bls.n	800ecba <HAL_SPI_Transmit+0x216>
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d014      	beq.n	800ecba <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	6812      	ldr	r2, [r2, #0]
 800ec9a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eca0:	1d1a      	adds	r2, r3, #4
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ecac:	b29b      	uxth	r3, r3
 800ecae:	3b02      	subs	r3, #2
 800ecb0:	b29a      	uxth	r2, r3
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ecb8:	e037      	b.n	800ed2a <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecbe:	881a      	ldrh	r2, [r3, #0]
 800ecc0:	69fb      	ldr	r3, [r7, #28]
 800ecc2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecc8:	1c9a      	adds	r2, r3, #2
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ecd4:	b29b      	uxth	r3, r3
 800ecd6:	3b01      	subs	r3, #1
 800ecd8:	b29a      	uxth	r2, r3
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ece0:	e023      	b.n	800ed2a <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ece2:	f7f4 fe85 	bl	80039f0 <HAL_GetTick>
 800ece6:	4602      	mov	r2, r0
 800ece8:	697b      	ldr	r3, [r7, #20]
 800ecea:	1ad3      	subs	r3, r2, r3
 800ecec:	683a      	ldr	r2, [r7, #0]
 800ecee:	429a      	cmp	r2, r3
 800ecf0:	d803      	bhi.n	800ecfa <HAL_SPI_Transmit+0x256>
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecf8:	d102      	bne.n	800ed00 <HAL_SPI_Transmit+0x25c>
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d114      	bne.n	800ed2a <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ed00:	68f8      	ldr	r0, [r7, #12]
 800ed02:	f000 fa5b 	bl	800f1bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	2200      	movs	r2, #0
 800ed0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	2201      	movs	r2, #1
 800ed22:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ed26:	2303      	movs	r3, #3
 800ed28:	e0b3      	b.n	800ee92 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed30:	b29b      	uxth	r3, r3
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d19b      	bne.n	800ec6e <HAL_SPI_Transmit+0x1ca>
 800ed36:	e086      	b.n	800ee46 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	695b      	ldr	r3, [r3, #20]
 800ed3e:	f003 0302 	and.w	r3, r3, #2
 800ed42:	2b02      	cmp	r3, #2
 800ed44:	d154      	bne.n	800edf0 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed4c:	b29b      	uxth	r3, r3
 800ed4e:	2b03      	cmp	r3, #3
 800ed50:	d918      	bls.n	800ed84 <HAL_SPI_Transmit+0x2e0>
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed56:	2b40      	cmp	r3, #64	; 0x40
 800ed58:	d914      	bls.n	800ed84 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	6812      	ldr	r2, [r2, #0]
 800ed64:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed6a:	1d1a      	adds	r2, r3, #4
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed76:	b29b      	uxth	r3, r3
 800ed78:	3b04      	subs	r3, #4
 800ed7a:	b29a      	uxth	r2, r3
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed82:	e059      	b.n	800ee38 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed8a:	b29b      	uxth	r3, r3
 800ed8c:	2b01      	cmp	r3, #1
 800ed8e:	d917      	bls.n	800edc0 <HAL_SPI_Transmit+0x31c>
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d013      	beq.n	800edc0 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed9c:	881a      	ldrh	r2, [r3, #0]
 800ed9e:	69fb      	ldr	r3, [r7, #28]
 800eda0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eda6:	1c9a      	adds	r2, r3, #2
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edb2:	b29b      	uxth	r3, r3
 800edb4:	3b02      	subs	r3, #2
 800edb6:	b29a      	uxth	r2, r3
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800edbe:	e03b      	b.n	800ee38 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	3320      	adds	r3, #32
 800edca:	7812      	ldrb	r2, [r2, #0]
 800edcc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800edd2:	1c5a      	adds	r2, r3, #1
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edde:	b29b      	uxth	r3, r3
 800ede0:	3b01      	subs	r3, #1
 800ede2:	b29a      	uxth	r2, r3
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800edea:	e025      	b.n	800ee38 <HAL_SPI_Transmit+0x394>
 800edec:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800edf0:	f7f4 fdfe 	bl	80039f0 <HAL_GetTick>
 800edf4:	4602      	mov	r2, r0
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	1ad3      	subs	r3, r2, r3
 800edfa:	683a      	ldr	r2, [r7, #0]
 800edfc:	429a      	cmp	r2, r3
 800edfe:	d803      	bhi.n	800ee08 <HAL_SPI_Transmit+0x364>
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee06:	d102      	bne.n	800ee0e <HAL_SPI_Transmit+0x36a>
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d114      	bne.n	800ee38 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ee0e:	68f8      	ldr	r0, [r7, #12]
 800ee10:	f000 f9d4 	bl	800f1bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	2200      	movs	r2, #0
 800ee18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	2201      	movs	r2, #1
 800ee30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ee34:	2303      	movs	r3, #3
 800ee36:	e02c      	b.n	800ee92 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee3e:	b29b      	uxth	r3, r3
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	f47f af79 	bne.w	800ed38 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	9300      	str	r3, [sp, #0]
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	2108      	movs	r1, #8
 800ee50:	68f8      	ldr	r0, [r7, #12]
 800ee52:	f000 fa53 	bl	800f2fc <SPI_WaitOnFlagUntilTimeout>
 800ee56:	4603      	mov	r3, r0
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d007      	beq.n	800ee6c <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee62:	f043 0220 	orr.w	r2, r3, #32
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ee6c:	68f8      	ldr	r0, [r7, #12]
 800ee6e:	f000 f9a5 	bl	800f1bc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	2200      	movs	r2, #0
 800ee76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	2201      	movs	r2, #1
 800ee7e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d001      	beq.n	800ee90 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	e000      	b.n	800ee92 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800ee90:	7efb      	ldrb	r3, [r7, #27]
}
 800ee92:	4618      	mov	r0, r3
 800ee94:	3720      	adds	r7, #32
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}
 800ee9a:	bf00      	nop

0800ee9c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b088      	sub	sp, #32
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	60f8      	str	r0, [r7, #12]
 800eea4:	60b9      	str	r1, [r7, #8]
 800eea6:	603b      	str	r3, [r7, #0]
 800eea8:	4613      	mov	r3, r2
 800eeaa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eeac:	2300      	movs	r3, #0
 800eeae:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	3330      	adds	r3, #48	; 0x30
 800eeb6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eebe:	2b01      	cmp	r3, #1
 800eec0:	d101      	bne.n	800eec6 <HAL_SPI_Receive+0x2a>
 800eec2:	2302      	movs	r3, #2
 800eec4:	e173      	b.n	800f1ae <HAL_SPI_Receive+0x312>
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	2201      	movs	r2, #1
 800eeca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eece:	f7f4 fd8f 	bl	80039f0 <HAL_GetTick>
 800eed2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eeda:	b2db      	uxtb	r3, r3
 800eedc:	2b01      	cmp	r3, #1
 800eede:	d007      	beq.n	800eef0 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800eee0:	2302      	movs	r3, #2
 800eee2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	2200      	movs	r2, #0
 800eee8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eeec:	7ffb      	ldrb	r3, [r7, #31]
 800eeee:	e15e      	b.n	800f1ae <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d002      	beq.n	800eefc <HAL_SPI_Receive+0x60>
 800eef6:	88fb      	ldrh	r3, [r7, #6]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d107      	bne.n	800ef0c <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800eefc:	2301      	movs	r3, #1
 800eefe:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	2200      	movs	r2, #0
 800ef04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ef08:	7ffb      	ldrb	r3, [r7, #31]
 800ef0a:	e150      	b.n	800f1ae <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	2204      	movs	r2, #4
 800ef10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	2200      	movs	r2, #0
 800ef18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	68ba      	ldr	r2, [r7, #8]
 800ef20:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	88fa      	ldrh	r2, [r7, #6]
 800ef26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	88fa      	ldrh	r2, [r7, #6]
 800ef2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	2200      	movs	r2, #0
 800ef36:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	2200      	movs	r2, #0
 800ef44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	2200      	movs	r2, #0
 800ef52:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	689b      	ldr	r3, [r3, #8]
 800ef58:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ef5c:	d108      	bne.n	800ef70 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	681a      	ldr	r2, [r3, #0]
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ef6c:	601a      	str	r2, [r3, #0]
 800ef6e:	e009      	b.n	800ef84 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	68db      	ldr	r3, [r3, #12]
 800ef76:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ef82:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	685a      	ldr	r2, [r3, #4]
 800ef8a:	4b8b      	ldr	r3, [pc, #556]	; (800f1b8 <HAL_SPI_Receive+0x31c>)
 800ef8c:	4013      	ands	r3, r2
 800ef8e:	88f9      	ldrh	r1, [r7, #6]
 800ef90:	68fa      	ldr	r2, [r7, #12]
 800ef92:	6812      	ldr	r2, [r2, #0]
 800ef94:	430b      	orrs	r3, r1
 800ef96:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	681a      	ldr	r2, [r3, #0]
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	f042 0201 	orr.w	r2, r2, #1
 800efa6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	685b      	ldr	r3, [r3, #4]
 800efac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800efb0:	d107      	bne.n	800efc2 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	681a      	ldr	r2, [r3, #0]
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800efc0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	68db      	ldr	r3, [r3, #12]
 800efc6:	2b0f      	cmp	r3, #15
 800efc8:	d948      	bls.n	800f05c <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800efca:	e040      	b.n	800f04e <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	695a      	ldr	r2, [r3, #20]
 800efd2:	f248 0308 	movw	r3, #32776	; 0x8008
 800efd6:	4013      	ands	r3, r2
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d014      	beq.n	800f006 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	681a      	ldr	r2, [r3, #0]
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800efe4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800efe6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800efec:	1d1a      	adds	r2, r3, #4
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eff8:	b29b      	uxth	r3, r3
 800effa:	3b01      	subs	r3, #1
 800effc:	b29a      	uxth	r2, r3
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f004:	e023      	b.n	800f04e <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f006:	f7f4 fcf3 	bl	80039f0 <HAL_GetTick>
 800f00a:	4602      	mov	r2, r0
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	1ad3      	subs	r3, r2, r3
 800f010:	683a      	ldr	r2, [r7, #0]
 800f012:	429a      	cmp	r2, r3
 800f014:	d803      	bhi.n	800f01e <HAL_SPI_Receive+0x182>
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f01c:	d102      	bne.n	800f024 <HAL_SPI_Receive+0x188>
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d114      	bne.n	800f04e <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f024:	68f8      	ldr	r0, [r7, #12]
 800f026:	f000 f8c9 	bl	800f1bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	2200      	movs	r2, #0
 800f02e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f038:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	2201      	movs	r2, #1
 800f046:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f04a:	2303      	movs	r3, #3
 800f04c:	e0af      	b.n	800f1ae <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f054:	b29b      	uxth	r3, r3
 800f056:	2b00      	cmp	r3, #0
 800f058:	d1b8      	bne.n	800efcc <HAL_SPI_Receive+0x130>
 800f05a:	e095      	b.n	800f188 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	68db      	ldr	r3, [r3, #12]
 800f060:	2b07      	cmp	r3, #7
 800f062:	f240 808b 	bls.w	800f17c <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f066:	e03f      	b.n	800f0e8 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	695b      	ldr	r3, [r3, #20]
 800f06e:	f003 0301 	and.w	r3, r3, #1
 800f072:	2b01      	cmp	r3, #1
 800f074:	d114      	bne.n	800f0a0 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f07a:	69ba      	ldr	r2, [r7, #24]
 800f07c:	8812      	ldrh	r2, [r2, #0]
 800f07e:	b292      	uxth	r2, r2
 800f080:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f086:	1c9a      	adds	r2, r3, #2
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f092:	b29b      	uxth	r3, r3
 800f094:	3b01      	subs	r3, #1
 800f096:	b29a      	uxth	r2, r3
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f09e:	e023      	b.n	800f0e8 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f0a0:	f7f4 fca6 	bl	80039f0 <HAL_GetTick>
 800f0a4:	4602      	mov	r2, r0
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	1ad3      	subs	r3, r2, r3
 800f0aa:	683a      	ldr	r2, [r7, #0]
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	d803      	bhi.n	800f0b8 <HAL_SPI_Receive+0x21c>
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0b6:	d102      	bne.n	800f0be <HAL_SPI_Receive+0x222>
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d114      	bne.n	800f0e8 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f0be:	68f8      	ldr	r0, [r7, #12]
 800f0c0:	f000 f87c 	bl	800f1bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f0d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	2201      	movs	r2, #1
 800f0e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f0e4:	2303      	movs	r3, #3
 800f0e6:	e062      	b.n	800f1ae <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f0ee:	b29b      	uxth	r3, r3
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d1b9      	bne.n	800f068 <HAL_SPI_Receive+0x1cc>
 800f0f4:	e048      	b.n	800f188 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	695b      	ldr	r3, [r3, #20]
 800f0fc:	f003 0301 	and.w	r3, r3, #1
 800f100:	2b01      	cmp	r3, #1
 800f102:	d117      	bne.n	800f134 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f110:	7812      	ldrb	r2, [r2, #0]
 800f112:	b2d2      	uxtb	r2, r2
 800f114:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f11a:	1c5a      	adds	r2, r3, #1
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f126:	b29b      	uxth	r3, r3
 800f128:	3b01      	subs	r3, #1
 800f12a:	b29a      	uxth	r2, r3
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f132:	e023      	b.n	800f17c <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f134:	f7f4 fc5c 	bl	80039f0 <HAL_GetTick>
 800f138:	4602      	mov	r2, r0
 800f13a:	697b      	ldr	r3, [r7, #20]
 800f13c:	1ad3      	subs	r3, r2, r3
 800f13e:	683a      	ldr	r2, [r7, #0]
 800f140:	429a      	cmp	r2, r3
 800f142:	d803      	bhi.n	800f14c <HAL_SPI_Receive+0x2b0>
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f14a:	d102      	bne.n	800f152 <HAL_SPI_Receive+0x2b6>
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d114      	bne.n	800f17c <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f152:	68f8      	ldr	r0, [r7, #12]
 800f154:	f000 f832 	bl	800f1bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	2200      	movs	r2, #0
 800f15c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f166:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	2201      	movs	r2, #1
 800f174:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f178:	2303      	movs	r3, #3
 800f17a:	e018      	b.n	800f1ae <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f182:	b29b      	uxth	r3, r3
 800f184:	2b00      	cmp	r3, #0
 800f186:	d1b6      	bne.n	800f0f6 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f188:	68f8      	ldr	r0, [r7, #12]
 800f18a:	f000 f817 	bl	800f1bc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	2200      	movs	r2, #0
 800f192:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	2201      	movs	r2, #1
 800f19a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d001      	beq.n	800f1ac <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	e000      	b.n	800f1ae <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800f1ac:	7ffb      	ldrb	r3, [r7, #31]
}
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	3720      	adds	r7, #32
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd80      	pop	{r7, pc}
 800f1b6:	bf00      	nop
 800f1b8:	ffff0000 	.word	0xffff0000

0800f1bc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f1bc:	b480      	push	{r7}
 800f1be:	b085      	sub	sp, #20
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	695b      	ldr	r3, [r3, #20]
 800f1ca:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	699a      	ldr	r2, [r3, #24]
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	f042 0208 	orr.w	r2, r2, #8
 800f1da:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	699a      	ldr	r2, [r3, #24]
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	f042 0210 	orr.w	r2, r2, #16
 800f1ea:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	681a      	ldr	r2, [r3, #0]
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	f022 0201 	bic.w	r2, r2, #1
 800f1fa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	6919      	ldr	r1, [r3, #16]
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681a      	ldr	r2, [r3, #0]
 800f206:	4b3c      	ldr	r3, [pc, #240]	; (800f2f8 <SPI_CloseTransfer+0x13c>)
 800f208:	400b      	ands	r3, r1
 800f20a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	689a      	ldr	r2, [r3, #8]
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f21a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f222:	b2db      	uxtb	r3, r3
 800f224:	2b04      	cmp	r3, #4
 800f226:	d014      	beq.n	800f252 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	f003 0320 	and.w	r3, r3, #32
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d00f      	beq.n	800f252 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f238:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	699a      	ldr	r2, [r3, #24]
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	f042 0220 	orr.w	r2, r2, #32
 800f250:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f258:	b2db      	uxtb	r3, r3
 800f25a:	2b03      	cmp	r3, #3
 800f25c:	d014      	beq.n	800f288 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f264:	2b00      	cmp	r3, #0
 800f266:	d00f      	beq.n	800f288 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f26e:	f043 0204 	orr.w	r2, r3, #4
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	699a      	ldr	r2, [r3, #24]
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f286:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d00f      	beq.n	800f2b2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f298:	f043 0201 	orr.w	r2, r3, #1
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	699a      	ldr	r2, [r3, #24]
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f2b0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d00f      	beq.n	800f2dc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2c2:	f043 0208 	orr.w	r2, r3, #8
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	699a      	ldr	r2, [r3, #24]
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f2da:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2200      	movs	r2, #0
 800f2e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f2ec:	bf00      	nop
 800f2ee:	3714      	adds	r7, #20
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f6:	4770      	bx	lr
 800f2f8:	fffffc90 	.word	0xfffffc90

0800f2fc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b084      	sub	sp, #16
 800f300:	af00      	add	r7, sp, #0
 800f302:	60f8      	str	r0, [r7, #12]
 800f304:	60b9      	str	r1, [r7, #8]
 800f306:	603b      	str	r3, [r7, #0]
 800f308:	4613      	mov	r3, r2
 800f30a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f30c:	e010      	b.n	800f330 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f30e:	f7f4 fb6f 	bl	80039f0 <HAL_GetTick>
 800f312:	4602      	mov	r2, r0
 800f314:	69bb      	ldr	r3, [r7, #24]
 800f316:	1ad3      	subs	r3, r2, r3
 800f318:	683a      	ldr	r2, [r7, #0]
 800f31a:	429a      	cmp	r2, r3
 800f31c:	d803      	bhi.n	800f326 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f324:	d102      	bne.n	800f32c <SPI_WaitOnFlagUntilTimeout+0x30>
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d101      	bne.n	800f330 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f32c:	2303      	movs	r3, #3
 800f32e:	e00f      	b.n	800f350 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	695a      	ldr	r2, [r3, #20]
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	4013      	ands	r3, r2
 800f33a:	68ba      	ldr	r2, [r7, #8]
 800f33c:	429a      	cmp	r2, r3
 800f33e:	bf0c      	ite	eq
 800f340:	2301      	moveq	r3, #1
 800f342:	2300      	movne	r3, #0
 800f344:	b2db      	uxtb	r3, r3
 800f346:	461a      	mov	r2, r3
 800f348:	79fb      	ldrb	r3, [r7, #7]
 800f34a:	429a      	cmp	r2, r3
 800f34c:	d0df      	beq.n	800f30e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f34e:	2300      	movs	r3, #0
}
 800f350:	4618      	mov	r0, r3
 800f352:	3710      	adds	r7, #16
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}

0800f358 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f358:	b480      	push	{r7}
 800f35a:	b085      	sub	sp, #20
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f364:	095b      	lsrs	r3, r3, #5
 800f366:	3301      	adds	r3, #1
 800f368:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	68db      	ldr	r3, [r3, #12]
 800f36e:	3301      	adds	r3, #1
 800f370:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	3307      	adds	r3, #7
 800f376:	08db      	lsrs	r3, r3, #3
 800f378:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	68fa      	ldr	r2, [r7, #12]
 800f37e:	fb02 f303 	mul.w	r3, r2, r3
}
 800f382:	4618      	mov	r0, r3
 800f384:	3714      	adds	r7, #20
 800f386:	46bd      	mov	sp, r7
 800f388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38c:	4770      	bx	lr

0800f38e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f38e:	b580      	push	{r7, lr}
 800f390:	b082      	sub	sp, #8
 800f392:	af00      	add	r7, sp, #0
 800f394:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d101      	bne.n	800f3a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f39c:	2301      	movs	r3, #1
 800f39e:	e049      	b.n	800f434 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f3a6:	b2db      	uxtb	r3, r3
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d106      	bne.n	800f3ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f3b4:	6878      	ldr	r0, [r7, #4]
 800f3b6:	f7f3 ff85 	bl	80032c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2202      	movs	r2, #2
 800f3be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681a      	ldr	r2, [r3, #0]
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	3304      	adds	r3, #4
 800f3ca:	4619      	mov	r1, r3
 800f3cc:	4610      	mov	r0, r2
 800f3ce:	f000 ff29 	bl	8010224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2201      	movs	r2, #1
 800f3d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2201      	movs	r2, #1
 800f3de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2201      	movs	r2, #1
 800f3e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	2201      	movs	r2, #1
 800f3ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	2201      	movs	r2, #1
 800f3f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2201      	movs	r2, #1
 800f3fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2201      	movs	r2, #1
 800f406:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	2201      	movs	r2, #1
 800f40e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2201      	movs	r2, #1
 800f416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2201      	movs	r2, #1
 800f41e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	2201      	movs	r2, #1
 800f426:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	2201      	movs	r2, #1
 800f42e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f432:	2300      	movs	r3, #0
}
 800f434:	4618      	mov	r0, r3
 800f436:	3708      	adds	r7, #8
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}

0800f43c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b082      	sub	sp, #8
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d101      	bne.n	800f44e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f44a:	2301      	movs	r3, #1
 800f44c:	e049      	b.n	800f4e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f454:	b2db      	uxtb	r3, r3
 800f456:	2b00      	cmp	r3, #0
 800f458:	d106      	bne.n	800f468 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2200      	movs	r2, #0
 800f45e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f7f3 fd98 	bl	8002f98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2202      	movs	r2, #2
 800f46c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681a      	ldr	r2, [r3, #0]
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	3304      	adds	r3, #4
 800f478:	4619      	mov	r1, r3
 800f47a:	4610      	mov	r0, r2
 800f47c:	f000 fed2 	bl	8010224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2201      	movs	r2, #1
 800f484:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2201      	movs	r2, #1
 800f48c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2201      	movs	r2, #1
 800f494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2201      	movs	r2, #1
 800f49c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2201      	movs	r2, #1
 800f4a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2201      	movs	r2, #1
 800f4ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2201      	movs	r2, #1
 800f4b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	2201      	movs	r2, #1
 800f4bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	2201      	movs	r2, #1
 800f4c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2201      	movs	r2, #1
 800f4cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2201      	movs	r2, #1
 800f4d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2201      	movs	r2, #1
 800f4dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f4e0:	2300      	movs	r3, #0
}
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	3708      	adds	r7, #8
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}
	...

0800f4ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b084      	sub	sp, #16
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
 800f4f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d109      	bne.n	800f510 <HAL_TIM_PWM_Start+0x24>
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f502:	b2db      	uxtb	r3, r3
 800f504:	2b01      	cmp	r3, #1
 800f506:	bf14      	ite	ne
 800f508:	2301      	movne	r3, #1
 800f50a:	2300      	moveq	r3, #0
 800f50c:	b2db      	uxtb	r3, r3
 800f50e:	e03c      	b.n	800f58a <HAL_TIM_PWM_Start+0x9e>
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	2b04      	cmp	r3, #4
 800f514:	d109      	bne.n	800f52a <HAL_TIM_PWM_Start+0x3e>
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f51c:	b2db      	uxtb	r3, r3
 800f51e:	2b01      	cmp	r3, #1
 800f520:	bf14      	ite	ne
 800f522:	2301      	movne	r3, #1
 800f524:	2300      	moveq	r3, #0
 800f526:	b2db      	uxtb	r3, r3
 800f528:	e02f      	b.n	800f58a <HAL_TIM_PWM_Start+0x9e>
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	2b08      	cmp	r3, #8
 800f52e:	d109      	bne.n	800f544 <HAL_TIM_PWM_Start+0x58>
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f536:	b2db      	uxtb	r3, r3
 800f538:	2b01      	cmp	r3, #1
 800f53a:	bf14      	ite	ne
 800f53c:	2301      	movne	r3, #1
 800f53e:	2300      	moveq	r3, #0
 800f540:	b2db      	uxtb	r3, r3
 800f542:	e022      	b.n	800f58a <HAL_TIM_PWM_Start+0x9e>
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	2b0c      	cmp	r3, #12
 800f548:	d109      	bne.n	800f55e <HAL_TIM_PWM_Start+0x72>
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f550:	b2db      	uxtb	r3, r3
 800f552:	2b01      	cmp	r3, #1
 800f554:	bf14      	ite	ne
 800f556:	2301      	movne	r3, #1
 800f558:	2300      	moveq	r3, #0
 800f55a:	b2db      	uxtb	r3, r3
 800f55c:	e015      	b.n	800f58a <HAL_TIM_PWM_Start+0x9e>
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	2b10      	cmp	r3, #16
 800f562:	d109      	bne.n	800f578 <HAL_TIM_PWM_Start+0x8c>
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f56a:	b2db      	uxtb	r3, r3
 800f56c:	2b01      	cmp	r3, #1
 800f56e:	bf14      	ite	ne
 800f570:	2301      	movne	r3, #1
 800f572:	2300      	moveq	r3, #0
 800f574:	b2db      	uxtb	r3, r3
 800f576:	e008      	b.n	800f58a <HAL_TIM_PWM_Start+0x9e>
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f57e:	b2db      	uxtb	r3, r3
 800f580:	2b01      	cmp	r3, #1
 800f582:	bf14      	ite	ne
 800f584:	2301      	movne	r3, #1
 800f586:	2300      	moveq	r3, #0
 800f588:	b2db      	uxtb	r3, r3
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d001      	beq.n	800f592 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f58e:	2301      	movs	r3, #1
 800f590:	e0ab      	b.n	800f6ea <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d104      	bne.n	800f5a2 <HAL_TIM_PWM_Start+0xb6>
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2202      	movs	r2, #2
 800f59c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f5a0:	e023      	b.n	800f5ea <HAL_TIM_PWM_Start+0xfe>
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	2b04      	cmp	r3, #4
 800f5a6:	d104      	bne.n	800f5b2 <HAL_TIM_PWM_Start+0xc6>
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2202      	movs	r2, #2
 800f5ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f5b0:	e01b      	b.n	800f5ea <HAL_TIM_PWM_Start+0xfe>
 800f5b2:	683b      	ldr	r3, [r7, #0]
 800f5b4:	2b08      	cmp	r3, #8
 800f5b6:	d104      	bne.n	800f5c2 <HAL_TIM_PWM_Start+0xd6>
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2202      	movs	r2, #2
 800f5bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f5c0:	e013      	b.n	800f5ea <HAL_TIM_PWM_Start+0xfe>
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	2b0c      	cmp	r3, #12
 800f5c6:	d104      	bne.n	800f5d2 <HAL_TIM_PWM_Start+0xe6>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2202      	movs	r2, #2
 800f5cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f5d0:	e00b      	b.n	800f5ea <HAL_TIM_PWM_Start+0xfe>
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	2b10      	cmp	r3, #16
 800f5d6:	d104      	bne.n	800f5e2 <HAL_TIM_PWM_Start+0xf6>
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2202      	movs	r2, #2
 800f5dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f5e0:	e003      	b.n	800f5ea <HAL_TIM_PWM_Start+0xfe>
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	2202      	movs	r2, #2
 800f5e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	2201      	movs	r2, #1
 800f5f0:	6839      	ldr	r1, [r7, #0]
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	f001 f992 	bl	801091c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	4a3d      	ldr	r2, [pc, #244]	; (800f6f4 <HAL_TIM_PWM_Start+0x208>)
 800f5fe:	4293      	cmp	r3, r2
 800f600:	d013      	beq.n	800f62a <HAL_TIM_PWM_Start+0x13e>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	4a3c      	ldr	r2, [pc, #240]	; (800f6f8 <HAL_TIM_PWM_Start+0x20c>)
 800f608:	4293      	cmp	r3, r2
 800f60a:	d00e      	beq.n	800f62a <HAL_TIM_PWM_Start+0x13e>
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	4a3a      	ldr	r2, [pc, #232]	; (800f6fc <HAL_TIM_PWM_Start+0x210>)
 800f612:	4293      	cmp	r3, r2
 800f614:	d009      	beq.n	800f62a <HAL_TIM_PWM_Start+0x13e>
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	4a39      	ldr	r2, [pc, #228]	; (800f700 <HAL_TIM_PWM_Start+0x214>)
 800f61c:	4293      	cmp	r3, r2
 800f61e:	d004      	beq.n	800f62a <HAL_TIM_PWM_Start+0x13e>
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	4a37      	ldr	r2, [pc, #220]	; (800f704 <HAL_TIM_PWM_Start+0x218>)
 800f626:	4293      	cmp	r3, r2
 800f628:	d101      	bne.n	800f62e <HAL_TIM_PWM_Start+0x142>
 800f62a:	2301      	movs	r3, #1
 800f62c:	e000      	b.n	800f630 <HAL_TIM_PWM_Start+0x144>
 800f62e:	2300      	movs	r3, #0
 800f630:	2b00      	cmp	r3, #0
 800f632:	d007      	beq.n	800f644 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f642:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	4a2a      	ldr	r2, [pc, #168]	; (800f6f4 <HAL_TIM_PWM_Start+0x208>)
 800f64a:	4293      	cmp	r3, r2
 800f64c:	d02c      	beq.n	800f6a8 <HAL_TIM_PWM_Start+0x1bc>
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f656:	d027      	beq.n	800f6a8 <HAL_TIM_PWM_Start+0x1bc>
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	4a2a      	ldr	r2, [pc, #168]	; (800f708 <HAL_TIM_PWM_Start+0x21c>)
 800f65e:	4293      	cmp	r3, r2
 800f660:	d022      	beq.n	800f6a8 <HAL_TIM_PWM_Start+0x1bc>
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	4a29      	ldr	r2, [pc, #164]	; (800f70c <HAL_TIM_PWM_Start+0x220>)
 800f668:	4293      	cmp	r3, r2
 800f66a:	d01d      	beq.n	800f6a8 <HAL_TIM_PWM_Start+0x1bc>
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	4a27      	ldr	r2, [pc, #156]	; (800f710 <HAL_TIM_PWM_Start+0x224>)
 800f672:	4293      	cmp	r3, r2
 800f674:	d018      	beq.n	800f6a8 <HAL_TIM_PWM_Start+0x1bc>
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	4a1f      	ldr	r2, [pc, #124]	; (800f6f8 <HAL_TIM_PWM_Start+0x20c>)
 800f67c:	4293      	cmp	r3, r2
 800f67e:	d013      	beq.n	800f6a8 <HAL_TIM_PWM_Start+0x1bc>
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	4a23      	ldr	r2, [pc, #140]	; (800f714 <HAL_TIM_PWM_Start+0x228>)
 800f686:	4293      	cmp	r3, r2
 800f688:	d00e      	beq.n	800f6a8 <HAL_TIM_PWM_Start+0x1bc>
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	4a1b      	ldr	r2, [pc, #108]	; (800f6fc <HAL_TIM_PWM_Start+0x210>)
 800f690:	4293      	cmp	r3, r2
 800f692:	d009      	beq.n	800f6a8 <HAL_TIM_PWM_Start+0x1bc>
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	4a1f      	ldr	r2, [pc, #124]	; (800f718 <HAL_TIM_PWM_Start+0x22c>)
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d004      	beq.n	800f6a8 <HAL_TIM_PWM_Start+0x1bc>
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	4a1e      	ldr	r2, [pc, #120]	; (800f71c <HAL_TIM_PWM_Start+0x230>)
 800f6a4:	4293      	cmp	r3, r2
 800f6a6:	d115      	bne.n	800f6d4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	689a      	ldr	r2, [r3, #8]
 800f6ae:	4b1c      	ldr	r3, [pc, #112]	; (800f720 <HAL_TIM_PWM_Start+0x234>)
 800f6b0:	4013      	ands	r3, r2
 800f6b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	2b06      	cmp	r3, #6
 800f6b8:	d015      	beq.n	800f6e6 <HAL_TIM_PWM_Start+0x1fa>
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6c0:	d011      	beq.n	800f6e6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	681a      	ldr	r2, [r3, #0]
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	f042 0201 	orr.w	r2, r2, #1
 800f6d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f6d2:	e008      	b.n	800f6e6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	681a      	ldr	r2, [r3, #0]
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	f042 0201 	orr.w	r2, r2, #1
 800f6e2:	601a      	str	r2, [r3, #0]
 800f6e4:	e000      	b.n	800f6e8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f6e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f6e8:	2300      	movs	r3, #0
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	3710      	adds	r7, #16
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}
 800f6f2:	bf00      	nop
 800f6f4:	40010000 	.word	0x40010000
 800f6f8:	40010400 	.word	0x40010400
 800f6fc:	40014000 	.word	0x40014000
 800f700:	40014400 	.word	0x40014400
 800f704:	40014800 	.word	0x40014800
 800f708:	40000400 	.word	0x40000400
 800f70c:	40000800 	.word	0x40000800
 800f710:	40000c00 	.word	0x40000c00
 800f714:	40001800 	.word	0x40001800
 800f718:	4000e000 	.word	0x4000e000
 800f71c:	4000e400 	.word	0x4000e400
 800f720:	00010007 	.word	0x00010007

0800f724 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b086      	sub	sp, #24
 800f728:	af00      	add	r7, sp, #0
 800f72a:	60f8      	str	r0, [r7, #12]
 800f72c:	60b9      	str	r1, [r7, #8]
 800f72e:	607a      	str	r2, [r7, #4]
 800f730:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800f732:	2300      	movs	r3, #0
 800f734:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800f736:	68bb      	ldr	r3, [r7, #8]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d109      	bne.n	800f750 <HAL_TIM_PWM_Start_DMA+0x2c>
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f742:	b2db      	uxtb	r3, r3
 800f744:	2b02      	cmp	r3, #2
 800f746:	bf0c      	ite	eq
 800f748:	2301      	moveq	r3, #1
 800f74a:	2300      	movne	r3, #0
 800f74c:	b2db      	uxtb	r3, r3
 800f74e:	e03c      	b.n	800f7ca <HAL_TIM_PWM_Start_DMA+0xa6>
 800f750:	68bb      	ldr	r3, [r7, #8]
 800f752:	2b04      	cmp	r3, #4
 800f754:	d109      	bne.n	800f76a <HAL_TIM_PWM_Start_DMA+0x46>
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f75c:	b2db      	uxtb	r3, r3
 800f75e:	2b02      	cmp	r3, #2
 800f760:	bf0c      	ite	eq
 800f762:	2301      	moveq	r3, #1
 800f764:	2300      	movne	r3, #0
 800f766:	b2db      	uxtb	r3, r3
 800f768:	e02f      	b.n	800f7ca <HAL_TIM_PWM_Start_DMA+0xa6>
 800f76a:	68bb      	ldr	r3, [r7, #8]
 800f76c:	2b08      	cmp	r3, #8
 800f76e:	d109      	bne.n	800f784 <HAL_TIM_PWM_Start_DMA+0x60>
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f776:	b2db      	uxtb	r3, r3
 800f778:	2b02      	cmp	r3, #2
 800f77a:	bf0c      	ite	eq
 800f77c:	2301      	moveq	r3, #1
 800f77e:	2300      	movne	r3, #0
 800f780:	b2db      	uxtb	r3, r3
 800f782:	e022      	b.n	800f7ca <HAL_TIM_PWM_Start_DMA+0xa6>
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	2b0c      	cmp	r3, #12
 800f788:	d109      	bne.n	800f79e <HAL_TIM_PWM_Start_DMA+0x7a>
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f790:	b2db      	uxtb	r3, r3
 800f792:	2b02      	cmp	r3, #2
 800f794:	bf0c      	ite	eq
 800f796:	2301      	moveq	r3, #1
 800f798:	2300      	movne	r3, #0
 800f79a:	b2db      	uxtb	r3, r3
 800f79c:	e015      	b.n	800f7ca <HAL_TIM_PWM_Start_DMA+0xa6>
 800f79e:	68bb      	ldr	r3, [r7, #8]
 800f7a0:	2b10      	cmp	r3, #16
 800f7a2:	d109      	bne.n	800f7b8 <HAL_TIM_PWM_Start_DMA+0x94>
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f7aa:	b2db      	uxtb	r3, r3
 800f7ac:	2b02      	cmp	r3, #2
 800f7ae:	bf0c      	ite	eq
 800f7b0:	2301      	moveq	r3, #1
 800f7b2:	2300      	movne	r3, #0
 800f7b4:	b2db      	uxtb	r3, r3
 800f7b6:	e008      	b.n	800f7ca <HAL_TIM_PWM_Start_DMA+0xa6>
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f7be:	b2db      	uxtb	r3, r3
 800f7c0:	2b02      	cmp	r3, #2
 800f7c2:	bf0c      	ite	eq
 800f7c4:	2301      	moveq	r3, #1
 800f7c6:	2300      	movne	r3, #0
 800f7c8:	b2db      	uxtb	r3, r3
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d001      	beq.n	800f7d2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800f7ce:	2302      	movs	r3, #2
 800f7d0:	e1ba      	b.n	800fb48 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d109      	bne.n	800f7ec <HAL_TIM_PWM_Start_DMA+0xc8>
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f7de:	b2db      	uxtb	r3, r3
 800f7e0:	2b01      	cmp	r3, #1
 800f7e2:	bf0c      	ite	eq
 800f7e4:	2301      	moveq	r3, #1
 800f7e6:	2300      	movne	r3, #0
 800f7e8:	b2db      	uxtb	r3, r3
 800f7ea:	e03c      	b.n	800f866 <HAL_TIM_PWM_Start_DMA+0x142>
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	2b04      	cmp	r3, #4
 800f7f0:	d109      	bne.n	800f806 <HAL_TIM_PWM_Start_DMA+0xe2>
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f7f8:	b2db      	uxtb	r3, r3
 800f7fa:	2b01      	cmp	r3, #1
 800f7fc:	bf0c      	ite	eq
 800f7fe:	2301      	moveq	r3, #1
 800f800:	2300      	movne	r3, #0
 800f802:	b2db      	uxtb	r3, r3
 800f804:	e02f      	b.n	800f866 <HAL_TIM_PWM_Start_DMA+0x142>
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	2b08      	cmp	r3, #8
 800f80a:	d109      	bne.n	800f820 <HAL_TIM_PWM_Start_DMA+0xfc>
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f812:	b2db      	uxtb	r3, r3
 800f814:	2b01      	cmp	r3, #1
 800f816:	bf0c      	ite	eq
 800f818:	2301      	moveq	r3, #1
 800f81a:	2300      	movne	r3, #0
 800f81c:	b2db      	uxtb	r3, r3
 800f81e:	e022      	b.n	800f866 <HAL_TIM_PWM_Start_DMA+0x142>
 800f820:	68bb      	ldr	r3, [r7, #8]
 800f822:	2b0c      	cmp	r3, #12
 800f824:	d109      	bne.n	800f83a <HAL_TIM_PWM_Start_DMA+0x116>
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f82c:	b2db      	uxtb	r3, r3
 800f82e:	2b01      	cmp	r3, #1
 800f830:	bf0c      	ite	eq
 800f832:	2301      	moveq	r3, #1
 800f834:	2300      	movne	r3, #0
 800f836:	b2db      	uxtb	r3, r3
 800f838:	e015      	b.n	800f866 <HAL_TIM_PWM_Start_DMA+0x142>
 800f83a:	68bb      	ldr	r3, [r7, #8]
 800f83c:	2b10      	cmp	r3, #16
 800f83e:	d109      	bne.n	800f854 <HAL_TIM_PWM_Start_DMA+0x130>
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f846:	b2db      	uxtb	r3, r3
 800f848:	2b01      	cmp	r3, #1
 800f84a:	bf0c      	ite	eq
 800f84c:	2301      	moveq	r3, #1
 800f84e:	2300      	movne	r3, #0
 800f850:	b2db      	uxtb	r3, r3
 800f852:	e008      	b.n	800f866 <HAL_TIM_PWM_Start_DMA+0x142>
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f85a:	b2db      	uxtb	r3, r3
 800f85c:	2b01      	cmp	r3, #1
 800f85e:	bf0c      	ite	eq
 800f860:	2301      	moveq	r3, #1
 800f862:	2300      	movne	r3, #0
 800f864:	b2db      	uxtb	r3, r3
 800f866:	2b00      	cmp	r3, #0
 800f868:	d034      	beq.n	800f8d4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d002      	beq.n	800f876 <HAL_TIM_PWM_Start_DMA+0x152>
 800f870:	887b      	ldrh	r3, [r7, #2]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d101      	bne.n	800f87a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800f876:	2301      	movs	r3, #1
 800f878:	e166      	b.n	800fb48 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d104      	bne.n	800f88a <HAL_TIM_PWM_Start_DMA+0x166>
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	2202      	movs	r2, #2
 800f884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f888:	e026      	b.n	800f8d8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	2b04      	cmp	r3, #4
 800f88e:	d104      	bne.n	800f89a <HAL_TIM_PWM_Start_DMA+0x176>
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	2202      	movs	r2, #2
 800f894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f898:	e01e      	b.n	800f8d8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	2b08      	cmp	r3, #8
 800f89e:	d104      	bne.n	800f8aa <HAL_TIM_PWM_Start_DMA+0x186>
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	2202      	movs	r2, #2
 800f8a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f8a8:	e016      	b.n	800f8d8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	2b0c      	cmp	r3, #12
 800f8ae:	d104      	bne.n	800f8ba <HAL_TIM_PWM_Start_DMA+0x196>
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	2202      	movs	r2, #2
 800f8b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f8b8:	e00e      	b.n	800f8d8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f8ba:	68bb      	ldr	r3, [r7, #8]
 800f8bc:	2b10      	cmp	r3, #16
 800f8be:	d104      	bne.n	800f8ca <HAL_TIM_PWM_Start_DMA+0x1a6>
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	2202      	movs	r2, #2
 800f8c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f8c8:	e006      	b.n	800f8d8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	2202      	movs	r2, #2
 800f8ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f8d2:	e001      	b.n	800f8d8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800f8d4:	2301      	movs	r3, #1
 800f8d6:	e137      	b.n	800fb48 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800f8d8:	68bb      	ldr	r3, [r7, #8]
 800f8da:	2b0c      	cmp	r3, #12
 800f8dc:	f200 80ae 	bhi.w	800fa3c <HAL_TIM_PWM_Start_DMA+0x318>
 800f8e0:	a201      	add	r2, pc, #4	; (adr r2, 800f8e8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800f8e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8e6:	bf00      	nop
 800f8e8:	0800f91d 	.word	0x0800f91d
 800f8ec:	0800fa3d 	.word	0x0800fa3d
 800f8f0:	0800fa3d 	.word	0x0800fa3d
 800f8f4:	0800fa3d 	.word	0x0800fa3d
 800f8f8:	0800f965 	.word	0x0800f965
 800f8fc:	0800fa3d 	.word	0x0800fa3d
 800f900:	0800fa3d 	.word	0x0800fa3d
 800f904:	0800fa3d 	.word	0x0800fa3d
 800f908:	0800f9ad 	.word	0x0800f9ad
 800f90c:	0800fa3d 	.word	0x0800fa3d
 800f910:	0800fa3d 	.word	0x0800fa3d
 800f914:	0800fa3d 	.word	0x0800fa3d
 800f918:	0800f9f5 	.word	0x0800f9f5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f920:	4a8b      	ldr	r2, [pc, #556]	; (800fb50 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f922:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f928:	4a8a      	ldr	r2, [pc, #552]	; (800fb54 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f92a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f930:	4a89      	ldr	r2, [pc, #548]	; (800fb58 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f932:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f938:	6879      	ldr	r1, [r7, #4]
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	3334      	adds	r3, #52	; 0x34
 800f940:	461a      	mov	r2, r3
 800f942:	887b      	ldrh	r3, [r7, #2]
 800f944:	f7f6 f872 	bl	8005a2c <HAL_DMA_Start_IT>
 800f948:	4603      	mov	r3, r0
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d001      	beq.n	800f952 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f94e:	2301      	movs	r3, #1
 800f950:	e0fa      	b.n	800fb48 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	68da      	ldr	r2, [r3, #12]
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f960:	60da      	str	r2, [r3, #12]
      break;
 800f962:	e06e      	b.n	800fa42 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f968:	4a79      	ldr	r2, [pc, #484]	; (800fb50 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f96a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f970:	4a78      	ldr	r2, [pc, #480]	; (800fb54 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f972:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f978:	4a77      	ldr	r2, [pc, #476]	; (800fb58 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f97a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800f980:	6879      	ldr	r1, [r7, #4]
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	3338      	adds	r3, #56	; 0x38
 800f988:	461a      	mov	r2, r3
 800f98a:	887b      	ldrh	r3, [r7, #2]
 800f98c:	f7f6 f84e 	bl	8005a2c <HAL_DMA_Start_IT>
 800f990:	4603      	mov	r3, r0
 800f992:	2b00      	cmp	r3, #0
 800f994:	d001      	beq.n	800f99a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f996:	2301      	movs	r3, #1
 800f998:	e0d6      	b.n	800fb48 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	68da      	ldr	r2, [r3, #12]
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f9a8:	60da      	str	r2, [r3, #12]
      break;
 800f9aa:	e04a      	b.n	800fa42 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9b0:	4a67      	ldr	r2, [pc, #412]	; (800fb50 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f9b2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9b8:	4a66      	ldr	r2, [pc, #408]	; (800fb54 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f9ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9c0:	4a65      	ldr	r2, [pc, #404]	; (800fb58 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f9c2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f9c8:	6879      	ldr	r1, [r7, #4]
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	333c      	adds	r3, #60	; 0x3c
 800f9d0:	461a      	mov	r2, r3
 800f9d2:	887b      	ldrh	r3, [r7, #2]
 800f9d4:	f7f6 f82a 	bl	8005a2c <HAL_DMA_Start_IT>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d001      	beq.n	800f9e2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f9de:	2301      	movs	r3, #1
 800f9e0:	e0b2      	b.n	800fb48 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	68da      	ldr	r2, [r3, #12]
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f9f0:	60da      	str	r2, [r3, #12]
      break;
 800f9f2:	e026      	b.n	800fa42 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9f8:	4a55      	ldr	r2, [pc, #340]	; (800fb50 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f9fa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa00:	4a54      	ldr	r2, [pc, #336]	; (800fb54 <HAL_TIM_PWM_Start_DMA+0x430>)
 800fa02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa08:	4a53      	ldr	r2, [pc, #332]	; (800fb58 <HAL_TIM_PWM_Start_DMA+0x434>)
 800fa0a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fa10:	6879      	ldr	r1, [r7, #4]
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	3340      	adds	r3, #64	; 0x40
 800fa18:	461a      	mov	r2, r3
 800fa1a:	887b      	ldrh	r3, [r7, #2]
 800fa1c:	f7f6 f806 	bl	8005a2c <HAL_DMA_Start_IT>
 800fa20:	4603      	mov	r3, r0
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d001      	beq.n	800fa2a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fa26:	2301      	movs	r3, #1
 800fa28:	e08e      	b.n	800fb48 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	68da      	ldr	r2, [r3, #12]
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fa38:	60da      	str	r2, [r3, #12]
      break;
 800fa3a:	e002      	b.n	800fa42 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800fa3c:	2301      	movs	r3, #1
 800fa3e:	75fb      	strb	r3, [r7, #23]
      break;
 800fa40:	bf00      	nop
  }

  if (status == HAL_OK)
 800fa42:	7dfb      	ldrb	r3, [r7, #23]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d17e      	bne.n	800fb46 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	2201      	movs	r2, #1
 800fa4e:	68b9      	ldr	r1, [r7, #8]
 800fa50:	4618      	mov	r0, r3
 800fa52:	f000 ff63 	bl	801091c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	4a40      	ldr	r2, [pc, #256]	; (800fb5c <HAL_TIM_PWM_Start_DMA+0x438>)
 800fa5c:	4293      	cmp	r3, r2
 800fa5e:	d013      	beq.n	800fa88 <HAL_TIM_PWM_Start_DMA+0x364>
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	4a3e      	ldr	r2, [pc, #248]	; (800fb60 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d00e      	beq.n	800fa88 <HAL_TIM_PWM_Start_DMA+0x364>
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	4a3d      	ldr	r2, [pc, #244]	; (800fb64 <HAL_TIM_PWM_Start_DMA+0x440>)
 800fa70:	4293      	cmp	r3, r2
 800fa72:	d009      	beq.n	800fa88 <HAL_TIM_PWM_Start_DMA+0x364>
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	4a3b      	ldr	r2, [pc, #236]	; (800fb68 <HAL_TIM_PWM_Start_DMA+0x444>)
 800fa7a:	4293      	cmp	r3, r2
 800fa7c:	d004      	beq.n	800fa88 <HAL_TIM_PWM_Start_DMA+0x364>
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	4a3a      	ldr	r2, [pc, #232]	; (800fb6c <HAL_TIM_PWM_Start_DMA+0x448>)
 800fa84:	4293      	cmp	r3, r2
 800fa86:	d101      	bne.n	800fa8c <HAL_TIM_PWM_Start_DMA+0x368>
 800fa88:	2301      	movs	r3, #1
 800fa8a:	e000      	b.n	800fa8e <HAL_TIM_PWM_Start_DMA+0x36a>
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d007      	beq.n	800faa2 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800faa0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	4a2d      	ldr	r2, [pc, #180]	; (800fb5c <HAL_TIM_PWM_Start_DMA+0x438>)
 800faa8:	4293      	cmp	r3, r2
 800faaa:	d02c      	beq.n	800fb06 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fab4:	d027      	beq.n	800fb06 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	4a2d      	ldr	r2, [pc, #180]	; (800fb70 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800fabc:	4293      	cmp	r3, r2
 800fabe:	d022      	beq.n	800fb06 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	4a2b      	ldr	r2, [pc, #172]	; (800fb74 <HAL_TIM_PWM_Start_DMA+0x450>)
 800fac6:	4293      	cmp	r3, r2
 800fac8:	d01d      	beq.n	800fb06 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	4a2a      	ldr	r2, [pc, #168]	; (800fb78 <HAL_TIM_PWM_Start_DMA+0x454>)
 800fad0:	4293      	cmp	r3, r2
 800fad2:	d018      	beq.n	800fb06 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	4a21      	ldr	r2, [pc, #132]	; (800fb60 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800fada:	4293      	cmp	r3, r2
 800fadc:	d013      	beq.n	800fb06 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	4a26      	ldr	r2, [pc, #152]	; (800fb7c <HAL_TIM_PWM_Start_DMA+0x458>)
 800fae4:	4293      	cmp	r3, r2
 800fae6:	d00e      	beq.n	800fb06 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	4a1d      	ldr	r2, [pc, #116]	; (800fb64 <HAL_TIM_PWM_Start_DMA+0x440>)
 800faee:	4293      	cmp	r3, r2
 800faf0:	d009      	beq.n	800fb06 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	4a22      	ldr	r2, [pc, #136]	; (800fb80 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800faf8:	4293      	cmp	r3, r2
 800fafa:	d004      	beq.n	800fb06 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	4a20      	ldr	r2, [pc, #128]	; (800fb84 <HAL_TIM_PWM_Start_DMA+0x460>)
 800fb02:	4293      	cmp	r3, r2
 800fb04:	d115      	bne.n	800fb32 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	689a      	ldr	r2, [r3, #8]
 800fb0c:	4b1e      	ldr	r3, [pc, #120]	; (800fb88 <HAL_TIM_PWM_Start_DMA+0x464>)
 800fb0e:	4013      	ands	r3, r2
 800fb10:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb12:	693b      	ldr	r3, [r7, #16]
 800fb14:	2b06      	cmp	r3, #6
 800fb16:	d015      	beq.n	800fb44 <HAL_TIM_PWM_Start_DMA+0x420>
 800fb18:	693b      	ldr	r3, [r7, #16]
 800fb1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb1e:	d011      	beq.n	800fb44 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	681a      	ldr	r2, [r3, #0]
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	f042 0201 	orr.w	r2, r2, #1
 800fb2e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb30:	e008      	b.n	800fb44 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	681a      	ldr	r2, [r3, #0]
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	f042 0201 	orr.w	r2, r2, #1
 800fb40:	601a      	str	r2, [r3, #0]
 800fb42:	e000      	b.n	800fb46 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb44:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800fb46:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb48:	4618      	mov	r0, r3
 800fb4a:	3718      	adds	r7, #24
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}
 800fb50:	08010113 	.word	0x08010113
 800fb54:	080101bb 	.word	0x080101bb
 800fb58:	08010081 	.word	0x08010081
 800fb5c:	40010000 	.word	0x40010000
 800fb60:	40010400 	.word	0x40010400
 800fb64:	40014000 	.word	0x40014000
 800fb68:	40014400 	.word	0x40014400
 800fb6c:	40014800 	.word	0x40014800
 800fb70:	40000400 	.word	0x40000400
 800fb74:	40000800 	.word	0x40000800
 800fb78:	40000c00 	.word	0x40000c00
 800fb7c:	40001800 	.word	0x40001800
 800fb80:	4000e000 	.word	0x4000e000
 800fb84:	4000e400 	.word	0x4000e400
 800fb88:	00010007 	.word	0x00010007

0800fb8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b082      	sub	sp, #8
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	691b      	ldr	r3, [r3, #16]
 800fb9a:	f003 0302 	and.w	r3, r3, #2
 800fb9e:	2b02      	cmp	r3, #2
 800fba0:	d122      	bne.n	800fbe8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	68db      	ldr	r3, [r3, #12]
 800fba8:	f003 0302 	and.w	r3, r3, #2
 800fbac:	2b02      	cmp	r3, #2
 800fbae:	d11b      	bne.n	800fbe8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	f06f 0202 	mvn.w	r2, #2
 800fbb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	2201      	movs	r2, #1
 800fbbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	699b      	ldr	r3, [r3, #24]
 800fbc6:	f003 0303 	and.w	r3, r3, #3
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d003      	beq.n	800fbd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fbce:	6878      	ldr	r0, [r7, #4]
 800fbd0:	f000 fa24 	bl	801001c <HAL_TIM_IC_CaptureCallback>
 800fbd4:	e005      	b.n	800fbe2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fbd6:	6878      	ldr	r0, [r7, #4]
 800fbd8:	f000 fa16 	bl	8010008 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	f000 fa27 	bl	8010030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	691b      	ldr	r3, [r3, #16]
 800fbee:	f003 0304 	and.w	r3, r3, #4
 800fbf2:	2b04      	cmp	r3, #4
 800fbf4:	d122      	bne.n	800fc3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	68db      	ldr	r3, [r3, #12]
 800fbfc:	f003 0304 	and.w	r3, r3, #4
 800fc00:	2b04      	cmp	r3, #4
 800fc02:	d11b      	bne.n	800fc3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	f06f 0204 	mvn.w	r2, #4
 800fc0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	2202      	movs	r2, #2
 800fc12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	699b      	ldr	r3, [r3, #24]
 800fc1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d003      	beq.n	800fc2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f000 f9fa 	bl	801001c <HAL_TIM_IC_CaptureCallback>
 800fc28:	e005      	b.n	800fc36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	f000 f9ec 	bl	8010008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f000 f9fd 	bl	8010030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	2200      	movs	r2, #0
 800fc3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	691b      	ldr	r3, [r3, #16]
 800fc42:	f003 0308 	and.w	r3, r3, #8
 800fc46:	2b08      	cmp	r3, #8
 800fc48:	d122      	bne.n	800fc90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	68db      	ldr	r3, [r3, #12]
 800fc50:	f003 0308 	and.w	r3, r3, #8
 800fc54:	2b08      	cmp	r3, #8
 800fc56:	d11b      	bne.n	800fc90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	f06f 0208 	mvn.w	r2, #8
 800fc60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	2204      	movs	r2, #4
 800fc66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	69db      	ldr	r3, [r3, #28]
 800fc6e:	f003 0303 	and.w	r3, r3, #3
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d003      	beq.n	800fc7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fc76:	6878      	ldr	r0, [r7, #4]
 800fc78:	f000 f9d0 	bl	801001c <HAL_TIM_IC_CaptureCallback>
 800fc7c:	e005      	b.n	800fc8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc7e:	6878      	ldr	r0, [r7, #4]
 800fc80:	f000 f9c2 	bl	8010008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc84:	6878      	ldr	r0, [r7, #4]
 800fc86:	f000 f9d3 	bl	8010030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	691b      	ldr	r3, [r3, #16]
 800fc96:	f003 0310 	and.w	r3, r3, #16
 800fc9a:	2b10      	cmp	r3, #16
 800fc9c:	d122      	bne.n	800fce4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	68db      	ldr	r3, [r3, #12]
 800fca4:	f003 0310 	and.w	r3, r3, #16
 800fca8:	2b10      	cmp	r3, #16
 800fcaa:	d11b      	bne.n	800fce4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	f06f 0210 	mvn.w	r2, #16
 800fcb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	2208      	movs	r2, #8
 800fcba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	69db      	ldr	r3, [r3, #28]
 800fcc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d003      	beq.n	800fcd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	f000 f9a6 	bl	801001c <HAL_TIM_IC_CaptureCallback>
 800fcd0:	e005      	b.n	800fcde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	f000 f998 	bl	8010008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f000 f9a9 	bl	8010030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2200      	movs	r2, #0
 800fce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	691b      	ldr	r3, [r3, #16]
 800fcea:	f003 0301 	and.w	r3, r3, #1
 800fcee:	2b01      	cmp	r3, #1
 800fcf0:	d10e      	bne.n	800fd10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	68db      	ldr	r3, [r3, #12]
 800fcf8:	f003 0301 	and.w	r3, r3, #1
 800fcfc:	2b01      	cmp	r3, #1
 800fcfe:	d107      	bne.n	800fd10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	f06f 0201 	mvn.w	r2, #1
 800fd08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	f000 f972 	bl	800fff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	691b      	ldr	r3, [r3, #16]
 800fd16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd1a:	2b80      	cmp	r3, #128	; 0x80
 800fd1c:	d10e      	bne.n	800fd3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	68db      	ldr	r3, [r3, #12]
 800fd24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd28:	2b80      	cmp	r3, #128	; 0x80
 800fd2a:	d107      	bne.n	800fd3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fd34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f000 febc 	bl	8010ab4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	691b      	ldr	r3, [r3, #16]
 800fd42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd4a:	d10e      	bne.n	800fd6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	68db      	ldr	r3, [r3, #12]
 800fd52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd56:	2b80      	cmp	r3, #128	; 0x80
 800fd58:	d107      	bne.n	800fd6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fd62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fd64:	6878      	ldr	r0, [r7, #4]
 800fd66:	f000 feaf 	bl	8010ac8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	691b      	ldr	r3, [r3, #16]
 800fd70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd74:	2b40      	cmp	r3, #64	; 0x40
 800fd76:	d10e      	bne.n	800fd96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	68db      	ldr	r3, [r3, #12]
 800fd7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd82:	2b40      	cmp	r3, #64	; 0x40
 800fd84:	d107      	bne.n	800fd96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fd8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fd90:	6878      	ldr	r0, [r7, #4]
 800fd92:	f000 f961 	bl	8010058 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	691b      	ldr	r3, [r3, #16]
 800fd9c:	f003 0320 	and.w	r3, r3, #32
 800fda0:	2b20      	cmp	r3, #32
 800fda2:	d10e      	bne.n	800fdc2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	68db      	ldr	r3, [r3, #12]
 800fdaa:	f003 0320 	and.w	r3, r3, #32
 800fdae:	2b20      	cmp	r3, #32
 800fdb0:	d107      	bne.n	800fdc2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	f06f 0220 	mvn.w	r2, #32
 800fdba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fdbc:	6878      	ldr	r0, [r7, #4]
 800fdbe:	f000 fe6f 	bl	8010aa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fdc2:	bf00      	nop
 800fdc4:	3708      	adds	r7, #8
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}
	...

0800fdcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b086      	sub	sp, #24
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	60f8      	str	r0, [r7, #12]
 800fdd4:	60b9      	str	r1, [r7, #8]
 800fdd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fdd8:	2300      	movs	r3, #0
 800fdda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fde2:	2b01      	cmp	r3, #1
 800fde4:	d101      	bne.n	800fdea <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fde6:	2302      	movs	r3, #2
 800fde8:	e0ff      	b.n	800ffea <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	2201      	movs	r2, #1
 800fdee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2b14      	cmp	r3, #20
 800fdf6:	f200 80f0 	bhi.w	800ffda <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fdfa:	a201      	add	r2, pc, #4	; (adr r2, 800fe00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fdfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe00:	0800fe55 	.word	0x0800fe55
 800fe04:	0800ffdb 	.word	0x0800ffdb
 800fe08:	0800ffdb 	.word	0x0800ffdb
 800fe0c:	0800ffdb 	.word	0x0800ffdb
 800fe10:	0800fe95 	.word	0x0800fe95
 800fe14:	0800ffdb 	.word	0x0800ffdb
 800fe18:	0800ffdb 	.word	0x0800ffdb
 800fe1c:	0800ffdb 	.word	0x0800ffdb
 800fe20:	0800fed7 	.word	0x0800fed7
 800fe24:	0800ffdb 	.word	0x0800ffdb
 800fe28:	0800ffdb 	.word	0x0800ffdb
 800fe2c:	0800ffdb 	.word	0x0800ffdb
 800fe30:	0800ff17 	.word	0x0800ff17
 800fe34:	0800ffdb 	.word	0x0800ffdb
 800fe38:	0800ffdb 	.word	0x0800ffdb
 800fe3c:	0800ffdb 	.word	0x0800ffdb
 800fe40:	0800ff59 	.word	0x0800ff59
 800fe44:	0800ffdb 	.word	0x0800ffdb
 800fe48:	0800ffdb 	.word	0x0800ffdb
 800fe4c:	0800ffdb 	.word	0x0800ffdb
 800fe50:	0800ff99 	.word	0x0800ff99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	68b9      	ldr	r1, [r7, #8]
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f000 fa88 	bl	8010370 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	699a      	ldr	r2, [r3, #24]
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	f042 0208 	orr.w	r2, r2, #8
 800fe6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	699a      	ldr	r2, [r3, #24]
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	f022 0204 	bic.w	r2, r2, #4
 800fe7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	6999      	ldr	r1, [r3, #24]
 800fe86:	68bb      	ldr	r3, [r7, #8]
 800fe88:	691a      	ldr	r2, [r3, #16]
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	430a      	orrs	r2, r1
 800fe90:	619a      	str	r2, [r3, #24]
      break;
 800fe92:	e0a5      	b.n	800ffe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	68b9      	ldr	r1, [r7, #8]
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	f000 faf8 	bl	8010490 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	699a      	ldr	r2, [r3, #24]
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800feae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	699a      	ldr	r2, [r3, #24]
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800febe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	6999      	ldr	r1, [r3, #24]
 800fec6:	68bb      	ldr	r3, [r7, #8]
 800fec8:	691b      	ldr	r3, [r3, #16]
 800feca:	021a      	lsls	r2, r3, #8
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	430a      	orrs	r2, r1
 800fed2:	619a      	str	r2, [r3, #24]
      break;
 800fed4:	e084      	b.n	800ffe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	68b9      	ldr	r1, [r7, #8]
 800fedc:	4618      	mov	r0, r3
 800fede:	f000 fb61 	bl	80105a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	69da      	ldr	r2, [r3, #28]
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	f042 0208 	orr.w	r2, r2, #8
 800fef0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	69da      	ldr	r2, [r3, #28]
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	f022 0204 	bic.w	r2, r2, #4
 800ff00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	69d9      	ldr	r1, [r3, #28]
 800ff08:	68bb      	ldr	r3, [r7, #8]
 800ff0a:	691a      	ldr	r2, [r3, #16]
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	430a      	orrs	r2, r1
 800ff12:	61da      	str	r2, [r3, #28]
      break;
 800ff14:	e064      	b.n	800ffe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	68b9      	ldr	r1, [r7, #8]
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	f000 fbc9 	bl	80106b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	69da      	ldr	r2, [r3, #28]
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ff30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	69da      	ldr	r2, [r3, #28]
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ff40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	69d9      	ldr	r1, [r3, #28]
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	691b      	ldr	r3, [r3, #16]
 800ff4c:	021a      	lsls	r2, r3, #8
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	430a      	orrs	r2, r1
 800ff54:	61da      	str	r2, [r3, #28]
      break;
 800ff56:	e043      	b.n	800ffe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	68b9      	ldr	r1, [r7, #8]
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f000 fc12 	bl	8010788 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	f042 0208 	orr.w	r2, r2, #8
 800ff72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	f022 0204 	bic.w	r2, r2, #4
 800ff82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ff8a:	68bb      	ldr	r3, [r7, #8]
 800ff8c:	691a      	ldr	r2, [r3, #16]
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	430a      	orrs	r2, r1
 800ff94:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ff96:	e023      	b.n	800ffe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	68b9      	ldr	r1, [r7, #8]
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f000 fc56 	bl	8010850 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ffb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ffc2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	691b      	ldr	r3, [r3, #16]
 800ffce:	021a      	lsls	r2, r3, #8
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	430a      	orrs	r2, r1
 800ffd6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ffd8:	e002      	b.n	800ffe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ffda:	2301      	movs	r3, #1
 800ffdc:	75fb      	strb	r3, [r7, #23]
      break;
 800ffde:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ffe8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffea:	4618      	mov	r0, r3
 800ffec:	3718      	adds	r7, #24
 800ffee:	46bd      	mov	sp, r7
 800fff0:	bd80      	pop	{r7, pc}
 800fff2:	bf00      	nop

0800fff4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fff4:	b480      	push	{r7}
 800fff6:	b083      	sub	sp, #12
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800fffc:	bf00      	nop
 800fffe:	370c      	adds	r7, #12
 8010000:	46bd      	mov	sp, r7
 8010002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010006:	4770      	bx	lr

08010008 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010008:	b480      	push	{r7}
 801000a:	b083      	sub	sp, #12
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010010:	bf00      	nop
 8010012:	370c      	adds	r7, #12
 8010014:	46bd      	mov	sp, r7
 8010016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001a:	4770      	bx	lr

0801001c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801001c:	b480      	push	{r7}
 801001e:	b083      	sub	sp, #12
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010024:	bf00      	nop
 8010026:	370c      	adds	r7, #12
 8010028:	46bd      	mov	sp, r7
 801002a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002e:	4770      	bx	lr

08010030 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010030:	b480      	push	{r7}
 8010032:	b083      	sub	sp, #12
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010038:	bf00      	nop
 801003a:	370c      	adds	r7, #12
 801003c:	46bd      	mov	sp, r7
 801003e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010042:	4770      	bx	lr

08010044 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010044:	b480      	push	{r7}
 8010046:	b083      	sub	sp, #12
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 801004c:	bf00      	nop
 801004e:	370c      	adds	r7, #12
 8010050:	46bd      	mov	sp, r7
 8010052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010056:	4770      	bx	lr

08010058 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010058:	b480      	push	{r7}
 801005a:	b083      	sub	sp, #12
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010060:	bf00      	nop
 8010062:	370c      	adds	r7, #12
 8010064:	46bd      	mov	sp, r7
 8010066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006a:	4770      	bx	lr

0801006c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 801006c:	b480      	push	{r7}
 801006e:	b083      	sub	sp, #12
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8010074:	bf00      	nop
 8010076:	370c      	adds	r7, #12
 8010078:	46bd      	mov	sp, r7
 801007a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007e:	4770      	bx	lr

08010080 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b084      	sub	sp, #16
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801008c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010092:	687a      	ldr	r2, [r7, #4]
 8010094:	429a      	cmp	r2, r3
 8010096:	d107      	bne.n	80100a8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	2201      	movs	r2, #1
 801009c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	2201      	movs	r2, #1
 80100a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80100a6:	e02a      	b.n	80100fe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100ac:	687a      	ldr	r2, [r7, #4]
 80100ae:	429a      	cmp	r2, r3
 80100b0:	d107      	bne.n	80100c2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	2202      	movs	r2, #2
 80100b6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	2201      	movs	r2, #1
 80100bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80100c0:	e01d      	b.n	80100fe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100c6:	687a      	ldr	r2, [r7, #4]
 80100c8:	429a      	cmp	r2, r3
 80100ca:	d107      	bne.n	80100dc <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	2204      	movs	r2, #4
 80100d0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	2201      	movs	r2, #1
 80100d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80100da:	e010      	b.n	80100fe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100e0:	687a      	ldr	r2, [r7, #4]
 80100e2:	429a      	cmp	r2, r3
 80100e4:	d107      	bne.n	80100f6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	2208      	movs	r2, #8
 80100ea:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	2201      	movs	r2, #1
 80100f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80100f4:	e003      	b.n	80100fe <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	2201      	movs	r2, #1
 80100fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80100fe:	68f8      	ldr	r0, [r7, #12]
 8010100:	f7ff ffb4 	bl	801006c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	2200      	movs	r2, #0
 8010108:	771a      	strb	r2, [r3, #28]
}
 801010a:	bf00      	nop
 801010c:	3710      	adds	r7, #16
 801010e:	46bd      	mov	sp, r7
 8010110:	bd80      	pop	{r7, pc}

08010112 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8010112:	b580      	push	{r7, lr}
 8010114:	b084      	sub	sp, #16
 8010116:	af00      	add	r7, sp, #0
 8010118:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801011e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010124:	687a      	ldr	r2, [r7, #4]
 8010126:	429a      	cmp	r2, r3
 8010128:	d10b      	bne.n	8010142 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	2201      	movs	r2, #1
 801012e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	69db      	ldr	r3, [r3, #28]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d136      	bne.n	80101a6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	2201      	movs	r2, #1
 801013c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010140:	e031      	b.n	80101a6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010146:	687a      	ldr	r2, [r7, #4]
 8010148:	429a      	cmp	r2, r3
 801014a:	d10b      	bne.n	8010164 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	2202      	movs	r2, #2
 8010150:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	69db      	ldr	r3, [r3, #28]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d125      	bne.n	80101a6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	2201      	movs	r2, #1
 801015e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010162:	e020      	b.n	80101a6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010168:	687a      	ldr	r2, [r7, #4]
 801016a:	429a      	cmp	r2, r3
 801016c:	d10b      	bne.n	8010186 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	2204      	movs	r2, #4
 8010172:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	69db      	ldr	r3, [r3, #28]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d114      	bne.n	80101a6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	2201      	movs	r2, #1
 8010180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010184:	e00f      	b.n	80101a6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801018a:	687a      	ldr	r2, [r7, #4]
 801018c:	429a      	cmp	r2, r3
 801018e:	d10a      	bne.n	80101a6 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	2208      	movs	r2, #8
 8010194:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	69db      	ldr	r3, [r3, #28]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d103      	bne.n	80101a6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	2201      	movs	r2, #1
 80101a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80101a6:	68f8      	ldr	r0, [r7, #12]
 80101a8:	f7ff ff42 	bl	8010030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	2200      	movs	r2, #0
 80101b0:	771a      	strb	r2, [r3, #28]
}
 80101b2:	bf00      	nop
 80101b4:	3710      	adds	r7, #16
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}

080101ba <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80101ba:	b580      	push	{r7, lr}
 80101bc:	b084      	sub	sp, #16
 80101be:	af00      	add	r7, sp, #0
 80101c0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101c6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101cc:	687a      	ldr	r2, [r7, #4]
 80101ce:	429a      	cmp	r2, r3
 80101d0:	d103      	bne.n	80101da <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	2201      	movs	r2, #1
 80101d6:	771a      	strb	r2, [r3, #28]
 80101d8:	e019      	b.n	801020e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101de:	687a      	ldr	r2, [r7, #4]
 80101e0:	429a      	cmp	r2, r3
 80101e2:	d103      	bne.n	80101ec <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	2202      	movs	r2, #2
 80101e8:	771a      	strb	r2, [r3, #28]
 80101ea:	e010      	b.n	801020e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101f0:	687a      	ldr	r2, [r7, #4]
 80101f2:	429a      	cmp	r2, r3
 80101f4:	d103      	bne.n	80101fe <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	2204      	movs	r2, #4
 80101fa:	771a      	strb	r2, [r3, #28]
 80101fc:	e007      	b.n	801020e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010202:	687a      	ldr	r2, [r7, #4]
 8010204:	429a      	cmp	r2, r3
 8010206:	d102      	bne.n	801020e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	2208      	movs	r2, #8
 801020c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 801020e:	68f8      	ldr	r0, [r7, #12]
 8010210:	f7ff ff18 	bl	8010044 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	2200      	movs	r2, #0
 8010218:	771a      	strb	r2, [r3, #28]
}
 801021a:	bf00      	nop
 801021c:	3710      	adds	r7, #16
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}
	...

08010224 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010224:	b480      	push	{r7}
 8010226:	b085      	sub	sp, #20
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
 801022c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	4a44      	ldr	r2, [pc, #272]	; (8010348 <TIM_Base_SetConfig+0x124>)
 8010238:	4293      	cmp	r3, r2
 801023a:	d013      	beq.n	8010264 <TIM_Base_SetConfig+0x40>
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010242:	d00f      	beq.n	8010264 <TIM_Base_SetConfig+0x40>
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	4a41      	ldr	r2, [pc, #260]	; (801034c <TIM_Base_SetConfig+0x128>)
 8010248:	4293      	cmp	r3, r2
 801024a:	d00b      	beq.n	8010264 <TIM_Base_SetConfig+0x40>
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	4a40      	ldr	r2, [pc, #256]	; (8010350 <TIM_Base_SetConfig+0x12c>)
 8010250:	4293      	cmp	r3, r2
 8010252:	d007      	beq.n	8010264 <TIM_Base_SetConfig+0x40>
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	4a3f      	ldr	r2, [pc, #252]	; (8010354 <TIM_Base_SetConfig+0x130>)
 8010258:	4293      	cmp	r3, r2
 801025a:	d003      	beq.n	8010264 <TIM_Base_SetConfig+0x40>
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	4a3e      	ldr	r2, [pc, #248]	; (8010358 <TIM_Base_SetConfig+0x134>)
 8010260:	4293      	cmp	r3, r2
 8010262:	d108      	bne.n	8010276 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801026a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	685b      	ldr	r3, [r3, #4]
 8010270:	68fa      	ldr	r2, [r7, #12]
 8010272:	4313      	orrs	r3, r2
 8010274:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	4a33      	ldr	r2, [pc, #204]	; (8010348 <TIM_Base_SetConfig+0x124>)
 801027a:	4293      	cmp	r3, r2
 801027c:	d027      	beq.n	80102ce <TIM_Base_SetConfig+0xaa>
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010284:	d023      	beq.n	80102ce <TIM_Base_SetConfig+0xaa>
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	4a30      	ldr	r2, [pc, #192]	; (801034c <TIM_Base_SetConfig+0x128>)
 801028a:	4293      	cmp	r3, r2
 801028c:	d01f      	beq.n	80102ce <TIM_Base_SetConfig+0xaa>
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	4a2f      	ldr	r2, [pc, #188]	; (8010350 <TIM_Base_SetConfig+0x12c>)
 8010292:	4293      	cmp	r3, r2
 8010294:	d01b      	beq.n	80102ce <TIM_Base_SetConfig+0xaa>
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	4a2e      	ldr	r2, [pc, #184]	; (8010354 <TIM_Base_SetConfig+0x130>)
 801029a:	4293      	cmp	r3, r2
 801029c:	d017      	beq.n	80102ce <TIM_Base_SetConfig+0xaa>
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	4a2d      	ldr	r2, [pc, #180]	; (8010358 <TIM_Base_SetConfig+0x134>)
 80102a2:	4293      	cmp	r3, r2
 80102a4:	d013      	beq.n	80102ce <TIM_Base_SetConfig+0xaa>
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	4a2c      	ldr	r2, [pc, #176]	; (801035c <TIM_Base_SetConfig+0x138>)
 80102aa:	4293      	cmp	r3, r2
 80102ac:	d00f      	beq.n	80102ce <TIM_Base_SetConfig+0xaa>
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	4a2b      	ldr	r2, [pc, #172]	; (8010360 <TIM_Base_SetConfig+0x13c>)
 80102b2:	4293      	cmp	r3, r2
 80102b4:	d00b      	beq.n	80102ce <TIM_Base_SetConfig+0xaa>
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	4a2a      	ldr	r2, [pc, #168]	; (8010364 <TIM_Base_SetConfig+0x140>)
 80102ba:	4293      	cmp	r3, r2
 80102bc:	d007      	beq.n	80102ce <TIM_Base_SetConfig+0xaa>
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	4a29      	ldr	r2, [pc, #164]	; (8010368 <TIM_Base_SetConfig+0x144>)
 80102c2:	4293      	cmp	r3, r2
 80102c4:	d003      	beq.n	80102ce <TIM_Base_SetConfig+0xaa>
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	4a28      	ldr	r2, [pc, #160]	; (801036c <TIM_Base_SetConfig+0x148>)
 80102ca:	4293      	cmp	r3, r2
 80102cc:	d108      	bne.n	80102e0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80102d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80102d6:	683b      	ldr	r3, [r7, #0]
 80102d8:	68db      	ldr	r3, [r3, #12]
 80102da:	68fa      	ldr	r2, [r7, #12]
 80102dc:	4313      	orrs	r3, r2
 80102de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	695b      	ldr	r3, [r3, #20]
 80102ea:	4313      	orrs	r3, r2
 80102ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	68fa      	ldr	r2, [r7, #12]
 80102f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	689a      	ldr	r2, [r3, #8]
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80102fc:	683b      	ldr	r3, [r7, #0]
 80102fe:	681a      	ldr	r2, [r3, #0]
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	4a10      	ldr	r2, [pc, #64]	; (8010348 <TIM_Base_SetConfig+0x124>)
 8010308:	4293      	cmp	r3, r2
 801030a:	d00f      	beq.n	801032c <TIM_Base_SetConfig+0x108>
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	4a12      	ldr	r2, [pc, #72]	; (8010358 <TIM_Base_SetConfig+0x134>)
 8010310:	4293      	cmp	r3, r2
 8010312:	d00b      	beq.n	801032c <TIM_Base_SetConfig+0x108>
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	4a11      	ldr	r2, [pc, #68]	; (801035c <TIM_Base_SetConfig+0x138>)
 8010318:	4293      	cmp	r3, r2
 801031a:	d007      	beq.n	801032c <TIM_Base_SetConfig+0x108>
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	4a10      	ldr	r2, [pc, #64]	; (8010360 <TIM_Base_SetConfig+0x13c>)
 8010320:	4293      	cmp	r3, r2
 8010322:	d003      	beq.n	801032c <TIM_Base_SetConfig+0x108>
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	4a0f      	ldr	r2, [pc, #60]	; (8010364 <TIM_Base_SetConfig+0x140>)
 8010328:	4293      	cmp	r3, r2
 801032a:	d103      	bne.n	8010334 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	691a      	ldr	r2, [r3, #16]
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	2201      	movs	r2, #1
 8010338:	615a      	str	r2, [r3, #20]
}
 801033a:	bf00      	nop
 801033c:	3714      	adds	r7, #20
 801033e:	46bd      	mov	sp, r7
 8010340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010344:	4770      	bx	lr
 8010346:	bf00      	nop
 8010348:	40010000 	.word	0x40010000
 801034c:	40000400 	.word	0x40000400
 8010350:	40000800 	.word	0x40000800
 8010354:	40000c00 	.word	0x40000c00
 8010358:	40010400 	.word	0x40010400
 801035c:	40014000 	.word	0x40014000
 8010360:	40014400 	.word	0x40014400
 8010364:	40014800 	.word	0x40014800
 8010368:	4000e000 	.word	0x4000e000
 801036c:	4000e400 	.word	0x4000e400

08010370 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010370:	b480      	push	{r7}
 8010372:	b087      	sub	sp, #28
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
 8010378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	6a1b      	ldr	r3, [r3, #32]
 801037e:	f023 0201 	bic.w	r2, r3, #1
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	6a1b      	ldr	r3, [r3, #32]
 801038a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	685b      	ldr	r3, [r3, #4]
 8010390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	699b      	ldr	r3, [r3, #24]
 8010396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010398:	68fa      	ldr	r2, [r7, #12]
 801039a:	4b37      	ldr	r3, [pc, #220]	; (8010478 <TIM_OC1_SetConfig+0x108>)
 801039c:	4013      	ands	r3, r2
 801039e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	f023 0303 	bic.w	r3, r3, #3
 80103a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	68fa      	ldr	r2, [r7, #12]
 80103ae:	4313      	orrs	r3, r2
 80103b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80103b2:	697b      	ldr	r3, [r7, #20]
 80103b4:	f023 0302 	bic.w	r3, r3, #2
 80103b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80103ba:	683b      	ldr	r3, [r7, #0]
 80103bc:	689b      	ldr	r3, [r3, #8]
 80103be:	697a      	ldr	r2, [r7, #20]
 80103c0:	4313      	orrs	r3, r2
 80103c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	4a2d      	ldr	r2, [pc, #180]	; (801047c <TIM_OC1_SetConfig+0x10c>)
 80103c8:	4293      	cmp	r3, r2
 80103ca:	d00f      	beq.n	80103ec <TIM_OC1_SetConfig+0x7c>
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	4a2c      	ldr	r2, [pc, #176]	; (8010480 <TIM_OC1_SetConfig+0x110>)
 80103d0:	4293      	cmp	r3, r2
 80103d2:	d00b      	beq.n	80103ec <TIM_OC1_SetConfig+0x7c>
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	4a2b      	ldr	r2, [pc, #172]	; (8010484 <TIM_OC1_SetConfig+0x114>)
 80103d8:	4293      	cmp	r3, r2
 80103da:	d007      	beq.n	80103ec <TIM_OC1_SetConfig+0x7c>
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	4a2a      	ldr	r2, [pc, #168]	; (8010488 <TIM_OC1_SetConfig+0x118>)
 80103e0:	4293      	cmp	r3, r2
 80103e2:	d003      	beq.n	80103ec <TIM_OC1_SetConfig+0x7c>
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	4a29      	ldr	r2, [pc, #164]	; (801048c <TIM_OC1_SetConfig+0x11c>)
 80103e8:	4293      	cmp	r3, r2
 80103ea:	d10c      	bne.n	8010406 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80103ec:	697b      	ldr	r3, [r7, #20]
 80103ee:	f023 0308 	bic.w	r3, r3, #8
 80103f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	68db      	ldr	r3, [r3, #12]
 80103f8:	697a      	ldr	r2, [r7, #20]
 80103fa:	4313      	orrs	r3, r2
 80103fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80103fe:	697b      	ldr	r3, [r7, #20]
 8010400:	f023 0304 	bic.w	r3, r3, #4
 8010404:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	4a1c      	ldr	r2, [pc, #112]	; (801047c <TIM_OC1_SetConfig+0x10c>)
 801040a:	4293      	cmp	r3, r2
 801040c:	d00f      	beq.n	801042e <TIM_OC1_SetConfig+0xbe>
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	4a1b      	ldr	r2, [pc, #108]	; (8010480 <TIM_OC1_SetConfig+0x110>)
 8010412:	4293      	cmp	r3, r2
 8010414:	d00b      	beq.n	801042e <TIM_OC1_SetConfig+0xbe>
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	4a1a      	ldr	r2, [pc, #104]	; (8010484 <TIM_OC1_SetConfig+0x114>)
 801041a:	4293      	cmp	r3, r2
 801041c:	d007      	beq.n	801042e <TIM_OC1_SetConfig+0xbe>
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	4a19      	ldr	r2, [pc, #100]	; (8010488 <TIM_OC1_SetConfig+0x118>)
 8010422:	4293      	cmp	r3, r2
 8010424:	d003      	beq.n	801042e <TIM_OC1_SetConfig+0xbe>
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	4a18      	ldr	r2, [pc, #96]	; (801048c <TIM_OC1_SetConfig+0x11c>)
 801042a:	4293      	cmp	r3, r2
 801042c:	d111      	bne.n	8010452 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801042e:	693b      	ldr	r3, [r7, #16]
 8010430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010436:	693b      	ldr	r3, [r7, #16]
 8010438:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801043c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801043e:	683b      	ldr	r3, [r7, #0]
 8010440:	695b      	ldr	r3, [r3, #20]
 8010442:	693a      	ldr	r2, [r7, #16]
 8010444:	4313      	orrs	r3, r2
 8010446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	699b      	ldr	r3, [r3, #24]
 801044c:	693a      	ldr	r2, [r7, #16]
 801044e:	4313      	orrs	r3, r2
 8010450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	693a      	ldr	r2, [r7, #16]
 8010456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	68fa      	ldr	r2, [r7, #12]
 801045c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801045e:	683b      	ldr	r3, [r7, #0]
 8010460:	685a      	ldr	r2, [r3, #4]
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	697a      	ldr	r2, [r7, #20]
 801046a:	621a      	str	r2, [r3, #32]
}
 801046c:	bf00      	nop
 801046e:	371c      	adds	r7, #28
 8010470:	46bd      	mov	sp, r7
 8010472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010476:	4770      	bx	lr
 8010478:	fffeff8f 	.word	0xfffeff8f
 801047c:	40010000 	.word	0x40010000
 8010480:	40010400 	.word	0x40010400
 8010484:	40014000 	.word	0x40014000
 8010488:	40014400 	.word	0x40014400
 801048c:	40014800 	.word	0x40014800

08010490 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010490:	b480      	push	{r7}
 8010492:	b087      	sub	sp, #28
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
 8010498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	6a1b      	ldr	r3, [r3, #32]
 801049e:	f023 0210 	bic.w	r2, r3, #16
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	6a1b      	ldr	r3, [r3, #32]
 80104aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	685b      	ldr	r3, [r3, #4]
 80104b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	699b      	ldr	r3, [r3, #24]
 80104b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80104b8:	68fa      	ldr	r2, [r7, #12]
 80104ba:	4b34      	ldr	r3, [pc, #208]	; (801058c <TIM_OC2_SetConfig+0xfc>)
 80104bc:	4013      	ands	r3, r2
 80104be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80104c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	021b      	lsls	r3, r3, #8
 80104ce:	68fa      	ldr	r2, [r7, #12]
 80104d0:	4313      	orrs	r3, r2
 80104d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80104d4:	697b      	ldr	r3, [r7, #20]
 80104d6:	f023 0320 	bic.w	r3, r3, #32
 80104da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	689b      	ldr	r3, [r3, #8]
 80104e0:	011b      	lsls	r3, r3, #4
 80104e2:	697a      	ldr	r2, [r7, #20]
 80104e4:	4313      	orrs	r3, r2
 80104e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	4a29      	ldr	r2, [pc, #164]	; (8010590 <TIM_OC2_SetConfig+0x100>)
 80104ec:	4293      	cmp	r3, r2
 80104ee:	d003      	beq.n	80104f8 <TIM_OC2_SetConfig+0x68>
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	4a28      	ldr	r2, [pc, #160]	; (8010594 <TIM_OC2_SetConfig+0x104>)
 80104f4:	4293      	cmp	r3, r2
 80104f6:	d10d      	bne.n	8010514 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80104f8:	697b      	ldr	r3, [r7, #20]
 80104fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80104fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	68db      	ldr	r3, [r3, #12]
 8010504:	011b      	lsls	r3, r3, #4
 8010506:	697a      	ldr	r2, [r7, #20]
 8010508:	4313      	orrs	r3, r2
 801050a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801050c:	697b      	ldr	r3, [r7, #20]
 801050e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010512:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	4a1e      	ldr	r2, [pc, #120]	; (8010590 <TIM_OC2_SetConfig+0x100>)
 8010518:	4293      	cmp	r3, r2
 801051a:	d00f      	beq.n	801053c <TIM_OC2_SetConfig+0xac>
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	4a1d      	ldr	r2, [pc, #116]	; (8010594 <TIM_OC2_SetConfig+0x104>)
 8010520:	4293      	cmp	r3, r2
 8010522:	d00b      	beq.n	801053c <TIM_OC2_SetConfig+0xac>
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	4a1c      	ldr	r2, [pc, #112]	; (8010598 <TIM_OC2_SetConfig+0x108>)
 8010528:	4293      	cmp	r3, r2
 801052a:	d007      	beq.n	801053c <TIM_OC2_SetConfig+0xac>
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	4a1b      	ldr	r2, [pc, #108]	; (801059c <TIM_OC2_SetConfig+0x10c>)
 8010530:	4293      	cmp	r3, r2
 8010532:	d003      	beq.n	801053c <TIM_OC2_SetConfig+0xac>
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	4a1a      	ldr	r2, [pc, #104]	; (80105a0 <TIM_OC2_SetConfig+0x110>)
 8010538:	4293      	cmp	r3, r2
 801053a:	d113      	bne.n	8010564 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801053c:	693b      	ldr	r3, [r7, #16]
 801053e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010542:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010544:	693b      	ldr	r3, [r7, #16]
 8010546:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801054a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	695b      	ldr	r3, [r3, #20]
 8010550:	009b      	lsls	r3, r3, #2
 8010552:	693a      	ldr	r2, [r7, #16]
 8010554:	4313      	orrs	r3, r2
 8010556:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010558:	683b      	ldr	r3, [r7, #0]
 801055a:	699b      	ldr	r3, [r3, #24]
 801055c:	009b      	lsls	r3, r3, #2
 801055e:	693a      	ldr	r2, [r7, #16]
 8010560:	4313      	orrs	r3, r2
 8010562:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	693a      	ldr	r2, [r7, #16]
 8010568:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	68fa      	ldr	r2, [r7, #12]
 801056e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	685a      	ldr	r2, [r3, #4]
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	697a      	ldr	r2, [r7, #20]
 801057c:	621a      	str	r2, [r3, #32]
}
 801057e:	bf00      	nop
 8010580:	371c      	adds	r7, #28
 8010582:	46bd      	mov	sp, r7
 8010584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010588:	4770      	bx	lr
 801058a:	bf00      	nop
 801058c:	feff8fff 	.word	0xfeff8fff
 8010590:	40010000 	.word	0x40010000
 8010594:	40010400 	.word	0x40010400
 8010598:	40014000 	.word	0x40014000
 801059c:	40014400 	.word	0x40014400
 80105a0:	40014800 	.word	0x40014800

080105a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80105a4:	b480      	push	{r7}
 80105a6:	b087      	sub	sp, #28
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
 80105ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	6a1b      	ldr	r3, [r3, #32]
 80105b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	6a1b      	ldr	r3, [r3, #32]
 80105be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	685b      	ldr	r3, [r3, #4]
 80105c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	69db      	ldr	r3, [r3, #28]
 80105ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80105cc:	68fa      	ldr	r2, [r7, #12]
 80105ce:	4b33      	ldr	r3, [pc, #204]	; (801069c <TIM_OC3_SetConfig+0xf8>)
 80105d0:	4013      	ands	r3, r2
 80105d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	f023 0303 	bic.w	r3, r3, #3
 80105da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	68fa      	ldr	r2, [r7, #12]
 80105e2:	4313      	orrs	r3, r2
 80105e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80105e6:	697b      	ldr	r3, [r7, #20]
 80105e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80105ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80105ee:	683b      	ldr	r3, [r7, #0]
 80105f0:	689b      	ldr	r3, [r3, #8]
 80105f2:	021b      	lsls	r3, r3, #8
 80105f4:	697a      	ldr	r2, [r7, #20]
 80105f6:	4313      	orrs	r3, r2
 80105f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	4a28      	ldr	r2, [pc, #160]	; (80106a0 <TIM_OC3_SetConfig+0xfc>)
 80105fe:	4293      	cmp	r3, r2
 8010600:	d003      	beq.n	801060a <TIM_OC3_SetConfig+0x66>
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	4a27      	ldr	r2, [pc, #156]	; (80106a4 <TIM_OC3_SetConfig+0x100>)
 8010606:	4293      	cmp	r3, r2
 8010608:	d10d      	bne.n	8010626 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801060a:	697b      	ldr	r3, [r7, #20]
 801060c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010610:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010612:	683b      	ldr	r3, [r7, #0]
 8010614:	68db      	ldr	r3, [r3, #12]
 8010616:	021b      	lsls	r3, r3, #8
 8010618:	697a      	ldr	r2, [r7, #20]
 801061a:	4313      	orrs	r3, r2
 801061c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801061e:	697b      	ldr	r3, [r7, #20]
 8010620:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	4a1d      	ldr	r2, [pc, #116]	; (80106a0 <TIM_OC3_SetConfig+0xfc>)
 801062a:	4293      	cmp	r3, r2
 801062c:	d00f      	beq.n	801064e <TIM_OC3_SetConfig+0xaa>
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	4a1c      	ldr	r2, [pc, #112]	; (80106a4 <TIM_OC3_SetConfig+0x100>)
 8010632:	4293      	cmp	r3, r2
 8010634:	d00b      	beq.n	801064e <TIM_OC3_SetConfig+0xaa>
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	4a1b      	ldr	r2, [pc, #108]	; (80106a8 <TIM_OC3_SetConfig+0x104>)
 801063a:	4293      	cmp	r3, r2
 801063c:	d007      	beq.n	801064e <TIM_OC3_SetConfig+0xaa>
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	4a1a      	ldr	r2, [pc, #104]	; (80106ac <TIM_OC3_SetConfig+0x108>)
 8010642:	4293      	cmp	r3, r2
 8010644:	d003      	beq.n	801064e <TIM_OC3_SetConfig+0xaa>
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	4a19      	ldr	r2, [pc, #100]	; (80106b0 <TIM_OC3_SetConfig+0x10c>)
 801064a:	4293      	cmp	r3, r2
 801064c:	d113      	bne.n	8010676 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801064e:	693b      	ldr	r3, [r7, #16]
 8010650:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010656:	693b      	ldr	r3, [r7, #16]
 8010658:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801065c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801065e:	683b      	ldr	r3, [r7, #0]
 8010660:	695b      	ldr	r3, [r3, #20]
 8010662:	011b      	lsls	r3, r3, #4
 8010664:	693a      	ldr	r2, [r7, #16]
 8010666:	4313      	orrs	r3, r2
 8010668:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801066a:	683b      	ldr	r3, [r7, #0]
 801066c:	699b      	ldr	r3, [r3, #24]
 801066e:	011b      	lsls	r3, r3, #4
 8010670:	693a      	ldr	r2, [r7, #16]
 8010672:	4313      	orrs	r3, r2
 8010674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	693a      	ldr	r2, [r7, #16]
 801067a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	68fa      	ldr	r2, [r7, #12]
 8010680:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	685a      	ldr	r2, [r3, #4]
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	697a      	ldr	r2, [r7, #20]
 801068e:	621a      	str	r2, [r3, #32]
}
 8010690:	bf00      	nop
 8010692:	371c      	adds	r7, #28
 8010694:	46bd      	mov	sp, r7
 8010696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069a:	4770      	bx	lr
 801069c:	fffeff8f 	.word	0xfffeff8f
 80106a0:	40010000 	.word	0x40010000
 80106a4:	40010400 	.word	0x40010400
 80106a8:	40014000 	.word	0x40014000
 80106ac:	40014400 	.word	0x40014400
 80106b0:	40014800 	.word	0x40014800

080106b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80106b4:	b480      	push	{r7}
 80106b6:	b087      	sub	sp, #28
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
 80106bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	6a1b      	ldr	r3, [r3, #32]
 80106c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	6a1b      	ldr	r3, [r3, #32]
 80106ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	685b      	ldr	r3, [r3, #4]
 80106d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	69db      	ldr	r3, [r3, #28]
 80106da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80106dc:	68fa      	ldr	r2, [r7, #12]
 80106de:	4b24      	ldr	r3, [pc, #144]	; (8010770 <TIM_OC4_SetConfig+0xbc>)
 80106e0:	4013      	ands	r3, r2
 80106e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80106ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80106ec:	683b      	ldr	r3, [r7, #0]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	021b      	lsls	r3, r3, #8
 80106f2:	68fa      	ldr	r2, [r7, #12]
 80106f4:	4313      	orrs	r3, r2
 80106f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80106f8:	693b      	ldr	r3, [r7, #16]
 80106fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80106fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010700:	683b      	ldr	r3, [r7, #0]
 8010702:	689b      	ldr	r3, [r3, #8]
 8010704:	031b      	lsls	r3, r3, #12
 8010706:	693a      	ldr	r2, [r7, #16]
 8010708:	4313      	orrs	r3, r2
 801070a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	4a19      	ldr	r2, [pc, #100]	; (8010774 <TIM_OC4_SetConfig+0xc0>)
 8010710:	4293      	cmp	r3, r2
 8010712:	d00f      	beq.n	8010734 <TIM_OC4_SetConfig+0x80>
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	4a18      	ldr	r2, [pc, #96]	; (8010778 <TIM_OC4_SetConfig+0xc4>)
 8010718:	4293      	cmp	r3, r2
 801071a:	d00b      	beq.n	8010734 <TIM_OC4_SetConfig+0x80>
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	4a17      	ldr	r2, [pc, #92]	; (801077c <TIM_OC4_SetConfig+0xc8>)
 8010720:	4293      	cmp	r3, r2
 8010722:	d007      	beq.n	8010734 <TIM_OC4_SetConfig+0x80>
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	4a16      	ldr	r2, [pc, #88]	; (8010780 <TIM_OC4_SetConfig+0xcc>)
 8010728:	4293      	cmp	r3, r2
 801072a:	d003      	beq.n	8010734 <TIM_OC4_SetConfig+0x80>
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	4a15      	ldr	r2, [pc, #84]	; (8010784 <TIM_OC4_SetConfig+0xd0>)
 8010730:	4293      	cmp	r3, r2
 8010732:	d109      	bne.n	8010748 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010734:	697b      	ldr	r3, [r7, #20]
 8010736:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801073a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	695b      	ldr	r3, [r3, #20]
 8010740:	019b      	lsls	r3, r3, #6
 8010742:	697a      	ldr	r2, [r7, #20]
 8010744:	4313      	orrs	r3, r2
 8010746:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	697a      	ldr	r2, [r7, #20]
 801074c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	68fa      	ldr	r2, [r7, #12]
 8010752:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	685a      	ldr	r2, [r3, #4]
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	693a      	ldr	r2, [r7, #16]
 8010760:	621a      	str	r2, [r3, #32]
}
 8010762:	bf00      	nop
 8010764:	371c      	adds	r7, #28
 8010766:	46bd      	mov	sp, r7
 8010768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076c:	4770      	bx	lr
 801076e:	bf00      	nop
 8010770:	feff8fff 	.word	0xfeff8fff
 8010774:	40010000 	.word	0x40010000
 8010778:	40010400 	.word	0x40010400
 801077c:	40014000 	.word	0x40014000
 8010780:	40014400 	.word	0x40014400
 8010784:	40014800 	.word	0x40014800

08010788 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010788:	b480      	push	{r7}
 801078a:	b087      	sub	sp, #28
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
 8010790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	6a1b      	ldr	r3, [r3, #32]
 8010796:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	6a1b      	ldr	r3, [r3, #32]
 80107a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	685b      	ldr	r3, [r3, #4]
 80107a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80107b0:	68fa      	ldr	r2, [r7, #12]
 80107b2:	4b21      	ldr	r3, [pc, #132]	; (8010838 <TIM_OC5_SetConfig+0xb0>)
 80107b4:	4013      	ands	r3, r2
 80107b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	68fa      	ldr	r2, [r7, #12]
 80107be:	4313      	orrs	r3, r2
 80107c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80107c2:	693b      	ldr	r3, [r7, #16]
 80107c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80107c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	689b      	ldr	r3, [r3, #8]
 80107ce:	041b      	lsls	r3, r3, #16
 80107d0:	693a      	ldr	r2, [r7, #16]
 80107d2:	4313      	orrs	r3, r2
 80107d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	4a18      	ldr	r2, [pc, #96]	; (801083c <TIM_OC5_SetConfig+0xb4>)
 80107da:	4293      	cmp	r3, r2
 80107dc:	d00f      	beq.n	80107fe <TIM_OC5_SetConfig+0x76>
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	4a17      	ldr	r2, [pc, #92]	; (8010840 <TIM_OC5_SetConfig+0xb8>)
 80107e2:	4293      	cmp	r3, r2
 80107e4:	d00b      	beq.n	80107fe <TIM_OC5_SetConfig+0x76>
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	4a16      	ldr	r2, [pc, #88]	; (8010844 <TIM_OC5_SetConfig+0xbc>)
 80107ea:	4293      	cmp	r3, r2
 80107ec:	d007      	beq.n	80107fe <TIM_OC5_SetConfig+0x76>
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	4a15      	ldr	r2, [pc, #84]	; (8010848 <TIM_OC5_SetConfig+0xc0>)
 80107f2:	4293      	cmp	r3, r2
 80107f4:	d003      	beq.n	80107fe <TIM_OC5_SetConfig+0x76>
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	4a14      	ldr	r2, [pc, #80]	; (801084c <TIM_OC5_SetConfig+0xc4>)
 80107fa:	4293      	cmp	r3, r2
 80107fc:	d109      	bne.n	8010812 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80107fe:	697b      	ldr	r3, [r7, #20]
 8010800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010804:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	695b      	ldr	r3, [r3, #20]
 801080a:	021b      	lsls	r3, r3, #8
 801080c:	697a      	ldr	r2, [r7, #20]
 801080e:	4313      	orrs	r3, r2
 8010810:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	697a      	ldr	r2, [r7, #20]
 8010816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	68fa      	ldr	r2, [r7, #12]
 801081c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801081e:	683b      	ldr	r3, [r7, #0]
 8010820:	685a      	ldr	r2, [r3, #4]
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	693a      	ldr	r2, [r7, #16]
 801082a:	621a      	str	r2, [r3, #32]
}
 801082c:	bf00      	nop
 801082e:	371c      	adds	r7, #28
 8010830:	46bd      	mov	sp, r7
 8010832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010836:	4770      	bx	lr
 8010838:	fffeff8f 	.word	0xfffeff8f
 801083c:	40010000 	.word	0x40010000
 8010840:	40010400 	.word	0x40010400
 8010844:	40014000 	.word	0x40014000
 8010848:	40014400 	.word	0x40014400
 801084c:	40014800 	.word	0x40014800

08010850 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010850:	b480      	push	{r7}
 8010852:	b087      	sub	sp, #28
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
 8010858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	6a1b      	ldr	r3, [r3, #32]
 801085e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	6a1b      	ldr	r3, [r3, #32]
 801086a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	685b      	ldr	r3, [r3, #4]
 8010870:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010878:	68fa      	ldr	r2, [r7, #12]
 801087a:	4b22      	ldr	r3, [pc, #136]	; (8010904 <TIM_OC6_SetConfig+0xb4>)
 801087c:	4013      	ands	r3, r2
 801087e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	021b      	lsls	r3, r3, #8
 8010886:	68fa      	ldr	r2, [r7, #12]
 8010888:	4313      	orrs	r3, r2
 801088a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801088c:	693b      	ldr	r3, [r7, #16]
 801088e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010892:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010894:	683b      	ldr	r3, [r7, #0]
 8010896:	689b      	ldr	r3, [r3, #8]
 8010898:	051b      	lsls	r3, r3, #20
 801089a:	693a      	ldr	r2, [r7, #16]
 801089c:	4313      	orrs	r3, r2
 801089e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	4a19      	ldr	r2, [pc, #100]	; (8010908 <TIM_OC6_SetConfig+0xb8>)
 80108a4:	4293      	cmp	r3, r2
 80108a6:	d00f      	beq.n	80108c8 <TIM_OC6_SetConfig+0x78>
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	4a18      	ldr	r2, [pc, #96]	; (801090c <TIM_OC6_SetConfig+0xbc>)
 80108ac:	4293      	cmp	r3, r2
 80108ae:	d00b      	beq.n	80108c8 <TIM_OC6_SetConfig+0x78>
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	4a17      	ldr	r2, [pc, #92]	; (8010910 <TIM_OC6_SetConfig+0xc0>)
 80108b4:	4293      	cmp	r3, r2
 80108b6:	d007      	beq.n	80108c8 <TIM_OC6_SetConfig+0x78>
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	4a16      	ldr	r2, [pc, #88]	; (8010914 <TIM_OC6_SetConfig+0xc4>)
 80108bc:	4293      	cmp	r3, r2
 80108be:	d003      	beq.n	80108c8 <TIM_OC6_SetConfig+0x78>
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	4a15      	ldr	r2, [pc, #84]	; (8010918 <TIM_OC6_SetConfig+0xc8>)
 80108c4:	4293      	cmp	r3, r2
 80108c6:	d109      	bne.n	80108dc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80108c8:	697b      	ldr	r3, [r7, #20]
 80108ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80108ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	695b      	ldr	r3, [r3, #20]
 80108d4:	029b      	lsls	r3, r3, #10
 80108d6:	697a      	ldr	r2, [r7, #20]
 80108d8:	4313      	orrs	r3, r2
 80108da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	697a      	ldr	r2, [r7, #20]
 80108e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	68fa      	ldr	r2, [r7, #12]
 80108e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	685a      	ldr	r2, [r3, #4]
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	693a      	ldr	r2, [r7, #16]
 80108f4:	621a      	str	r2, [r3, #32]
}
 80108f6:	bf00      	nop
 80108f8:	371c      	adds	r7, #28
 80108fa:	46bd      	mov	sp, r7
 80108fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010900:	4770      	bx	lr
 8010902:	bf00      	nop
 8010904:	feff8fff 	.word	0xfeff8fff
 8010908:	40010000 	.word	0x40010000
 801090c:	40010400 	.word	0x40010400
 8010910:	40014000 	.word	0x40014000
 8010914:	40014400 	.word	0x40014400
 8010918:	40014800 	.word	0x40014800

0801091c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801091c:	b480      	push	{r7}
 801091e:	b087      	sub	sp, #28
 8010920:	af00      	add	r7, sp, #0
 8010922:	60f8      	str	r0, [r7, #12]
 8010924:	60b9      	str	r1, [r7, #8]
 8010926:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	f003 031f 	and.w	r3, r3, #31
 801092e:	2201      	movs	r2, #1
 8010930:	fa02 f303 	lsl.w	r3, r2, r3
 8010934:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	6a1a      	ldr	r2, [r3, #32]
 801093a:	697b      	ldr	r3, [r7, #20]
 801093c:	43db      	mvns	r3, r3
 801093e:	401a      	ands	r2, r3
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	6a1a      	ldr	r2, [r3, #32]
 8010948:	68bb      	ldr	r3, [r7, #8]
 801094a:	f003 031f 	and.w	r3, r3, #31
 801094e:	6879      	ldr	r1, [r7, #4]
 8010950:	fa01 f303 	lsl.w	r3, r1, r3
 8010954:	431a      	orrs	r2, r3
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	621a      	str	r2, [r3, #32]
}
 801095a:	bf00      	nop
 801095c:	371c      	adds	r7, #28
 801095e:	46bd      	mov	sp, r7
 8010960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010964:	4770      	bx	lr
	...

08010968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010968:	b480      	push	{r7}
 801096a:	b085      	sub	sp, #20
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
 8010970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010978:	2b01      	cmp	r3, #1
 801097a:	d101      	bne.n	8010980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801097c:	2302      	movs	r3, #2
 801097e:	e077      	b.n	8010a70 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2201      	movs	r2, #1
 8010984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2202      	movs	r2, #2
 801098c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	685b      	ldr	r3, [r3, #4]
 8010996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	689b      	ldr	r3, [r3, #8]
 801099e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	4a35      	ldr	r2, [pc, #212]	; (8010a7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80109a6:	4293      	cmp	r3, r2
 80109a8:	d004      	beq.n	80109b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	4a34      	ldr	r2, [pc, #208]	; (8010a80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80109b0:	4293      	cmp	r3, r2
 80109b2:	d108      	bne.n	80109c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80109ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	685b      	ldr	r3, [r3, #4]
 80109c0:	68fa      	ldr	r2, [r7, #12]
 80109c2:	4313      	orrs	r3, r2
 80109c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80109cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80109ce:	683b      	ldr	r3, [r7, #0]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	68fa      	ldr	r2, [r7, #12]
 80109d4:	4313      	orrs	r3, r2
 80109d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	68fa      	ldr	r2, [r7, #12]
 80109de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	4a25      	ldr	r2, [pc, #148]	; (8010a7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80109e6:	4293      	cmp	r3, r2
 80109e8:	d02c      	beq.n	8010a44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80109f2:	d027      	beq.n	8010a44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	4a22      	ldr	r2, [pc, #136]	; (8010a84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80109fa:	4293      	cmp	r3, r2
 80109fc:	d022      	beq.n	8010a44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	4a21      	ldr	r2, [pc, #132]	; (8010a88 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8010a04:	4293      	cmp	r3, r2
 8010a06:	d01d      	beq.n	8010a44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	4a1f      	ldr	r2, [pc, #124]	; (8010a8c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8010a0e:	4293      	cmp	r3, r2
 8010a10:	d018      	beq.n	8010a44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	4a1a      	ldr	r2, [pc, #104]	; (8010a80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010a18:	4293      	cmp	r3, r2
 8010a1a:	d013      	beq.n	8010a44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	4a1b      	ldr	r2, [pc, #108]	; (8010a90 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8010a22:	4293      	cmp	r3, r2
 8010a24:	d00e      	beq.n	8010a44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	4a1a      	ldr	r2, [pc, #104]	; (8010a94 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8010a2c:	4293      	cmp	r3, r2
 8010a2e:	d009      	beq.n	8010a44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	4a18      	ldr	r2, [pc, #96]	; (8010a98 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8010a36:	4293      	cmp	r3, r2
 8010a38:	d004      	beq.n	8010a44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	4a17      	ldr	r2, [pc, #92]	; (8010a9c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8010a40:	4293      	cmp	r3, r2
 8010a42:	d10c      	bne.n	8010a5e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010a44:	68bb      	ldr	r3, [r7, #8]
 8010a46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010a4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010a4c:	683b      	ldr	r3, [r7, #0]
 8010a4e:	689b      	ldr	r3, [r3, #8]
 8010a50:	68ba      	ldr	r2, [r7, #8]
 8010a52:	4313      	orrs	r3, r2
 8010a54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	68ba      	ldr	r2, [r7, #8]
 8010a5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	2201      	movs	r2, #1
 8010a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	2200      	movs	r2, #0
 8010a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010a6e:	2300      	movs	r3, #0
}
 8010a70:	4618      	mov	r0, r3
 8010a72:	3714      	adds	r7, #20
 8010a74:	46bd      	mov	sp, r7
 8010a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7a:	4770      	bx	lr
 8010a7c:	40010000 	.word	0x40010000
 8010a80:	40010400 	.word	0x40010400
 8010a84:	40000400 	.word	0x40000400
 8010a88:	40000800 	.word	0x40000800
 8010a8c:	40000c00 	.word	0x40000c00
 8010a90:	40001800 	.word	0x40001800
 8010a94:	40014000 	.word	0x40014000
 8010a98:	4000e000 	.word	0x4000e000
 8010a9c:	4000e400 	.word	0x4000e400

08010aa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010aa0:	b480      	push	{r7}
 8010aa2:	b083      	sub	sp, #12
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010aa8:	bf00      	nop
 8010aaa:	370c      	adds	r7, #12
 8010aac:	46bd      	mov	sp, r7
 8010aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab2:	4770      	bx	lr

08010ab4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010ab4:	b480      	push	{r7}
 8010ab6:	b083      	sub	sp, #12
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010abc:	bf00      	nop
 8010abe:	370c      	adds	r7, #12
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac6:	4770      	bx	lr

08010ac8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010ac8:	b480      	push	{r7}
 8010aca:	b083      	sub	sp, #12
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010ad0:	bf00      	nop
 8010ad2:	370c      	adds	r7, #12
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ada:	4770      	bx	lr

08010adc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b082      	sub	sp, #8
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d101      	bne.n	8010aee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010aea:	2301      	movs	r3, #1
 8010aec:	e042      	b.n	8010b74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d106      	bne.n	8010b06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	2200      	movs	r2, #0
 8010afc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010b00:	6878      	ldr	r0, [r7, #4]
 8010b02:	f7f2 fcc5 	bl	8003490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	2224      	movs	r2, #36	; 0x24
 8010b0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	681a      	ldr	r2, [r3, #0]
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	f022 0201 	bic.w	r2, r2, #1
 8010b1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010b1e:	6878      	ldr	r0, [r7, #4]
 8010b20:	f000 f82c 	bl	8010b7c <UART_SetConfig>
 8010b24:	4603      	mov	r3, r0
 8010b26:	2b01      	cmp	r3, #1
 8010b28:	d101      	bne.n	8010b2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010b2a:	2301      	movs	r3, #1
 8010b2c:	e022      	b.n	8010b74 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d002      	beq.n	8010b3c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	f000 fe8c 	bl	8011854 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	685a      	ldr	r2, [r3, #4]
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010b4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	689a      	ldr	r2, [r3, #8]
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010b5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	681a      	ldr	r2, [r3, #0]
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	f042 0201 	orr.w	r2, r2, #1
 8010b6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010b6c:	6878      	ldr	r0, [r7, #4]
 8010b6e:	f000 ff13 	bl	8011998 <UART_CheckIdleState>
 8010b72:	4603      	mov	r3, r0
}
 8010b74:	4618      	mov	r0, r3
 8010b76:	3708      	adds	r7, #8
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}

08010b7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010b80:	b092      	sub	sp, #72	; 0x48
 8010b82:	af00      	add	r7, sp, #0
 8010b84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010b86:	2300      	movs	r3, #0
 8010b88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010b8c:	697b      	ldr	r3, [r7, #20]
 8010b8e:	689a      	ldr	r2, [r3, #8]
 8010b90:	697b      	ldr	r3, [r7, #20]
 8010b92:	691b      	ldr	r3, [r3, #16]
 8010b94:	431a      	orrs	r2, r3
 8010b96:	697b      	ldr	r3, [r7, #20]
 8010b98:	695b      	ldr	r3, [r3, #20]
 8010b9a:	431a      	orrs	r2, r3
 8010b9c:	697b      	ldr	r3, [r7, #20]
 8010b9e:	69db      	ldr	r3, [r3, #28]
 8010ba0:	4313      	orrs	r3, r2
 8010ba2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010ba4:	697b      	ldr	r3, [r7, #20]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	681a      	ldr	r2, [r3, #0]
 8010baa:	4bbe      	ldr	r3, [pc, #760]	; (8010ea4 <UART_SetConfig+0x328>)
 8010bac:	4013      	ands	r3, r2
 8010bae:	697a      	ldr	r2, [r7, #20]
 8010bb0:	6812      	ldr	r2, [r2, #0]
 8010bb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010bb4:	430b      	orrs	r3, r1
 8010bb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010bb8:	697b      	ldr	r3, [r7, #20]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	685b      	ldr	r3, [r3, #4]
 8010bbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010bc2:	697b      	ldr	r3, [r7, #20]
 8010bc4:	68da      	ldr	r2, [r3, #12]
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	430a      	orrs	r2, r1
 8010bcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010bce:	697b      	ldr	r3, [r7, #20]
 8010bd0:	699b      	ldr	r3, [r3, #24]
 8010bd2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	4ab3      	ldr	r2, [pc, #716]	; (8010ea8 <UART_SetConfig+0x32c>)
 8010bda:	4293      	cmp	r3, r2
 8010bdc:	d004      	beq.n	8010be8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	6a1b      	ldr	r3, [r3, #32]
 8010be2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010be4:	4313      	orrs	r3, r2
 8010be6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010be8:	697b      	ldr	r3, [r7, #20]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	689a      	ldr	r2, [r3, #8]
 8010bee:	4baf      	ldr	r3, [pc, #700]	; (8010eac <UART_SetConfig+0x330>)
 8010bf0:	4013      	ands	r3, r2
 8010bf2:	697a      	ldr	r2, [r7, #20]
 8010bf4:	6812      	ldr	r2, [r2, #0]
 8010bf6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010bf8:	430b      	orrs	r3, r1
 8010bfa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c02:	f023 010f 	bic.w	r1, r3, #15
 8010c06:	697b      	ldr	r3, [r7, #20]
 8010c08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c0a:	697b      	ldr	r3, [r7, #20]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	430a      	orrs	r2, r1
 8010c10:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010c12:	697b      	ldr	r3, [r7, #20]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	4aa6      	ldr	r2, [pc, #664]	; (8010eb0 <UART_SetConfig+0x334>)
 8010c18:	4293      	cmp	r3, r2
 8010c1a:	d177      	bne.n	8010d0c <UART_SetConfig+0x190>
 8010c1c:	4ba5      	ldr	r3, [pc, #660]	; (8010eb4 <UART_SetConfig+0x338>)
 8010c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010c24:	2b28      	cmp	r3, #40	; 0x28
 8010c26:	d86d      	bhi.n	8010d04 <UART_SetConfig+0x188>
 8010c28:	a201      	add	r2, pc, #4	; (adr r2, 8010c30 <UART_SetConfig+0xb4>)
 8010c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c2e:	bf00      	nop
 8010c30:	08010cd5 	.word	0x08010cd5
 8010c34:	08010d05 	.word	0x08010d05
 8010c38:	08010d05 	.word	0x08010d05
 8010c3c:	08010d05 	.word	0x08010d05
 8010c40:	08010d05 	.word	0x08010d05
 8010c44:	08010d05 	.word	0x08010d05
 8010c48:	08010d05 	.word	0x08010d05
 8010c4c:	08010d05 	.word	0x08010d05
 8010c50:	08010cdd 	.word	0x08010cdd
 8010c54:	08010d05 	.word	0x08010d05
 8010c58:	08010d05 	.word	0x08010d05
 8010c5c:	08010d05 	.word	0x08010d05
 8010c60:	08010d05 	.word	0x08010d05
 8010c64:	08010d05 	.word	0x08010d05
 8010c68:	08010d05 	.word	0x08010d05
 8010c6c:	08010d05 	.word	0x08010d05
 8010c70:	08010ce5 	.word	0x08010ce5
 8010c74:	08010d05 	.word	0x08010d05
 8010c78:	08010d05 	.word	0x08010d05
 8010c7c:	08010d05 	.word	0x08010d05
 8010c80:	08010d05 	.word	0x08010d05
 8010c84:	08010d05 	.word	0x08010d05
 8010c88:	08010d05 	.word	0x08010d05
 8010c8c:	08010d05 	.word	0x08010d05
 8010c90:	08010ced 	.word	0x08010ced
 8010c94:	08010d05 	.word	0x08010d05
 8010c98:	08010d05 	.word	0x08010d05
 8010c9c:	08010d05 	.word	0x08010d05
 8010ca0:	08010d05 	.word	0x08010d05
 8010ca4:	08010d05 	.word	0x08010d05
 8010ca8:	08010d05 	.word	0x08010d05
 8010cac:	08010d05 	.word	0x08010d05
 8010cb0:	08010cf5 	.word	0x08010cf5
 8010cb4:	08010d05 	.word	0x08010d05
 8010cb8:	08010d05 	.word	0x08010d05
 8010cbc:	08010d05 	.word	0x08010d05
 8010cc0:	08010d05 	.word	0x08010d05
 8010cc4:	08010d05 	.word	0x08010d05
 8010cc8:	08010d05 	.word	0x08010d05
 8010ccc:	08010d05 	.word	0x08010d05
 8010cd0:	08010cfd 	.word	0x08010cfd
 8010cd4:	2301      	movs	r3, #1
 8010cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cda:	e326      	b.n	801132a <UART_SetConfig+0x7ae>
 8010cdc:	2304      	movs	r3, #4
 8010cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ce2:	e322      	b.n	801132a <UART_SetConfig+0x7ae>
 8010ce4:	2308      	movs	r3, #8
 8010ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cea:	e31e      	b.n	801132a <UART_SetConfig+0x7ae>
 8010cec:	2310      	movs	r3, #16
 8010cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cf2:	e31a      	b.n	801132a <UART_SetConfig+0x7ae>
 8010cf4:	2320      	movs	r3, #32
 8010cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cfa:	e316      	b.n	801132a <UART_SetConfig+0x7ae>
 8010cfc:	2340      	movs	r3, #64	; 0x40
 8010cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d02:	e312      	b.n	801132a <UART_SetConfig+0x7ae>
 8010d04:	2380      	movs	r3, #128	; 0x80
 8010d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d0a:	e30e      	b.n	801132a <UART_SetConfig+0x7ae>
 8010d0c:	697b      	ldr	r3, [r7, #20]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	4a69      	ldr	r2, [pc, #420]	; (8010eb8 <UART_SetConfig+0x33c>)
 8010d12:	4293      	cmp	r3, r2
 8010d14:	d130      	bne.n	8010d78 <UART_SetConfig+0x1fc>
 8010d16:	4b67      	ldr	r3, [pc, #412]	; (8010eb4 <UART_SetConfig+0x338>)
 8010d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d1a:	f003 0307 	and.w	r3, r3, #7
 8010d1e:	2b05      	cmp	r3, #5
 8010d20:	d826      	bhi.n	8010d70 <UART_SetConfig+0x1f4>
 8010d22:	a201      	add	r2, pc, #4	; (adr r2, 8010d28 <UART_SetConfig+0x1ac>)
 8010d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d28:	08010d41 	.word	0x08010d41
 8010d2c:	08010d49 	.word	0x08010d49
 8010d30:	08010d51 	.word	0x08010d51
 8010d34:	08010d59 	.word	0x08010d59
 8010d38:	08010d61 	.word	0x08010d61
 8010d3c:	08010d69 	.word	0x08010d69
 8010d40:	2300      	movs	r3, #0
 8010d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d46:	e2f0      	b.n	801132a <UART_SetConfig+0x7ae>
 8010d48:	2304      	movs	r3, #4
 8010d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d4e:	e2ec      	b.n	801132a <UART_SetConfig+0x7ae>
 8010d50:	2308      	movs	r3, #8
 8010d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d56:	e2e8      	b.n	801132a <UART_SetConfig+0x7ae>
 8010d58:	2310      	movs	r3, #16
 8010d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d5e:	e2e4      	b.n	801132a <UART_SetConfig+0x7ae>
 8010d60:	2320      	movs	r3, #32
 8010d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d66:	e2e0      	b.n	801132a <UART_SetConfig+0x7ae>
 8010d68:	2340      	movs	r3, #64	; 0x40
 8010d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d6e:	e2dc      	b.n	801132a <UART_SetConfig+0x7ae>
 8010d70:	2380      	movs	r3, #128	; 0x80
 8010d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d76:	e2d8      	b.n	801132a <UART_SetConfig+0x7ae>
 8010d78:	697b      	ldr	r3, [r7, #20]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	4a4f      	ldr	r2, [pc, #316]	; (8010ebc <UART_SetConfig+0x340>)
 8010d7e:	4293      	cmp	r3, r2
 8010d80:	d130      	bne.n	8010de4 <UART_SetConfig+0x268>
 8010d82:	4b4c      	ldr	r3, [pc, #304]	; (8010eb4 <UART_SetConfig+0x338>)
 8010d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d86:	f003 0307 	and.w	r3, r3, #7
 8010d8a:	2b05      	cmp	r3, #5
 8010d8c:	d826      	bhi.n	8010ddc <UART_SetConfig+0x260>
 8010d8e:	a201      	add	r2, pc, #4	; (adr r2, 8010d94 <UART_SetConfig+0x218>)
 8010d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d94:	08010dad 	.word	0x08010dad
 8010d98:	08010db5 	.word	0x08010db5
 8010d9c:	08010dbd 	.word	0x08010dbd
 8010da0:	08010dc5 	.word	0x08010dc5
 8010da4:	08010dcd 	.word	0x08010dcd
 8010da8:	08010dd5 	.word	0x08010dd5
 8010dac:	2300      	movs	r3, #0
 8010dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010db2:	e2ba      	b.n	801132a <UART_SetConfig+0x7ae>
 8010db4:	2304      	movs	r3, #4
 8010db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dba:	e2b6      	b.n	801132a <UART_SetConfig+0x7ae>
 8010dbc:	2308      	movs	r3, #8
 8010dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dc2:	e2b2      	b.n	801132a <UART_SetConfig+0x7ae>
 8010dc4:	2310      	movs	r3, #16
 8010dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dca:	e2ae      	b.n	801132a <UART_SetConfig+0x7ae>
 8010dcc:	2320      	movs	r3, #32
 8010dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dd2:	e2aa      	b.n	801132a <UART_SetConfig+0x7ae>
 8010dd4:	2340      	movs	r3, #64	; 0x40
 8010dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dda:	e2a6      	b.n	801132a <UART_SetConfig+0x7ae>
 8010ddc:	2380      	movs	r3, #128	; 0x80
 8010dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010de2:	e2a2      	b.n	801132a <UART_SetConfig+0x7ae>
 8010de4:	697b      	ldr	r3, [r7, #20]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	4a35      	ldr	r2, [pc, #212]	; (8010ec0 <UART_SetConfig+0x344>)
 8010dea:	4293      	cmp	r3, r2
 8010dec:	d130      	bne.n	8010e50 <UART_SetConfig+0x2d4>
 8010dee:	4b31      	ldr	r3, [pc, #196]	; (8010eb4 <UART_SetConfig+0x338>)
 8010df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010df2:	f003 0307 	and.w	r3, r3, #7
 8010df6:	2b05      	cmp	r3, #5
 8010df8:	d826      	bhi.n	8010e48 <UART_SetConfig+0x2cc>
 8010dfa:	a201      	add	r2, pc, #4	; (adr r2, 8010e00 <UART_SetConfig+0x284>)
 8010dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e00:	08010e19 	.word	0x08010e19
 8010e04:	08010e21 	.word	0x08010e21
 8010e08:	08010e29 	.word	0x08010e29
 8010e0c:	08010e31 	.word	0x08010e31
 8010e10:	08010e39 	.word	0x08010e39
 8010e14:	08010e41 	.word	0x08010e41
 8010e18:	2300      	movs	r3, #0
 8010e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e1e:	e284      	b.n	801132a <UART_SetConfig+0x7ae>
 8010e20:	2304      	movs	r3, #4
 8010e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e26:	e280      	b.n	801132a <UART_SetConfig+0x7ae>
 8010e28:	2308      	movs	r3, #8
 8010e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e2e:	e27c      	b.n	801132a <UART_SetConfig+0x7ae>
 8010e30:	2310      	movs	r3, #16
 8010e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e36:	e278      	b.n	801132a <UART_SetConfig+0x7ae>
 8010e38:	2320      	movs	r3, #32
 8010e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e3e:	e274      	b.n	801132a <UART_SetConfig+0x7ae>
 8010e40:	2340      	movs	r3, #64	; 0x40
 8010e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e46:	e270      	b.n	801132a <UART_SetConfig+0x7ae>
 8010e48:	2380      	movs	r3, #128	; 0x80
 8010e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e4e:	e26c      	b.n	801132a <UART_SetConfig+0x7ae>
 8010e50:	697b      	ldr	r3, [r7, #20]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	4a1b      	ldr	r2, [pc, #108]	; (8010ec4 <UART_SetConfig+0x348>)
 8010e56:	4293      	cmp	r3, r2
 8010e58:	d142      	bne.n	8010ee0 <UART_SetConfig+0x364>
 8010e5a:	4b16      	ldr	r3, [pc, #88]	; (8010eb4 <UART_SetConfig+0x338>)
 8010e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e5e:	f003 0307 	and.w	r3, r3, #7
 8010e62:	2b05      	cmp	r3, #5
 8010e64:	d838      	bhi.n	8010ed8 <UART_SetConfig+0x35c>
 8010e66:	a201      	add	r2, pc, #4	; (adr r2, 8010e6c <UART_SetConfig+0x2f0>)
 8010e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e6c:	08010e85 	.word	0x08010e85
 8010e70:	08010e8d 	.word	0x08010e8d
 8010e74:	08010e95 	.word	0x08010e95
 8010e78:	08010e9d 	.word	0x08010e9d
 8010e7c:	08010ec9 	.word	0x08010ec9
 8010e80:	08010ed1 	.word	0x08010ed1
 8010e84:	2300      	movs	r3, #0
 8010e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e8a:	e24e      	b.n	801132a <UART_SetConfig+0x7ae>
 8010e8c:	2304      	movs	r3, #4
 8010e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e92:	e24a      	b.n	801132a <UART_SetConfig+0x7ae>
 8010e94:	2308      	movs	r3, #8
 8010e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e9a:	e246      	b.n	801132a <UART_SetConfig+0x7ae>
 8010e9c:	2310      	movs	r3, #16
 8010e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ea2:	e242      	b.n	801132a <UART_SetConfig+0x7ae>
 8010ea4:	cfff69f3 	.word	0xcfff69f3
 8010ea8:	58000c00 	.word	0x58000c00
 8010eac:	11fff4ff 	.word	0x11fff4ff
 8010eb0:	40011000 	.word	0x40011000
 8010eb4:	58024400 	.word	0x58024400
 8010eb8:	40004400 	.word	0x40004400
 8010ebc:	40004800 	.word	0x40004800
 8010ec0:	40004c00 	.word	0x40004c00
 8010ec4:	40005000 	.word	0x40005000
 8010ec8:	2320      	movs	r3, #32
 8010eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ece:	e22c      	b.n	801132a <UART_SetConfig+0x7ae>
 8010ed0:	2340      	movs	r3, #64	; 0x40
 8010ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ed6:	e228      	b.n	801132a <UART_SetConfig+0x7ae>
 8010ed8:	2380      	movs	r3, #128	; 0x80
 8010eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ede:	e224      	b.n	801132a <UART_SetConfig+0x7ae>
 8010ee0:	697b      	ldr	r3, [r7, #20]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	4ab1      	ldr	r2, [pc, #708]	; (80111ac <UART_SetConfig+0x630>)
 8010ee6:	4293      	cmp	r3, r2
 8010ee8:	d176      	bne.n	8010fd8 <UART_SetConfig+0x45c>
 8010eea:	4bb1      	ldr	r3, [pc, #708]	; (80111b0 <UART_SetConfig+0x634>)
 8010eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010eee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010ef2:	2b28      	cmp	r3, #40	; 0x28
 8010ef4:	d86c      	bhi.n	8010fd0 <UART_SetConfig+0x454>
 8010ef6:	a201      	add	r2, pc, #4	; (adr r2, 8010efc <UART_SetConfig+0x380>)
 8010ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010efc:	08010fa1 	.word	0x08010fa1
 8010f00:	08010fd1 	.word	0x08010fd1
 8010f04:	08010fd1 	.word	0x08010fd1
 8010f08:	08010fd1 	.word	0x08010fd1
 8010f0c:	08010fd1 	.word	0x08010fd1
 8010f10:	08010fd1 	.word	0x08010fd1
 8010f14:	08010fd1 	.word	0x08010fd1
 8010f18:	08010fd1 	.word	0x08010fd1
 8010f1c:	08010fa9 	.word	0x08010fa9
 8010f20:	08010fd1 	.word	0x08010fd1
 8010f24:	08010fd1 	.word	0x08010fd1
 8010f28:	08010fd1 	.word	0x08010fd1
 8010f2c:	08010fd1 	.word	0x08010fd1
 8010f30:	08010fd1 	.word	0x08010fd1
 8010f34:	08010fd1 	.word	0x08010fd1
 8010f38:	08010fd1 	.word	0x08010fd1
 8010f3c:	08010fb1 	.word	0x08010fb1
 8010f40:	08010fd1 	.word	0x08010fd1
 8010f44:	08010fd1 	.word	0x08010fd1
 8010f48:	08010fd1 	.word	0x08010fd1
 8010f4c:	08010fd1 	.word	0x08010fd1
 8010f50:	08010fd1 	.word	0x08010fd1
 8010f54:	08010fd1 	.word	0x08010fd1
 8010f58:	08010fd1 	.word	0x08010fd1
 8010f5c:	08010fb9 	.word	0x08010fb9
 8010f60:	08010fd1 	.word	0x08010fd1
 8010f64:	08010fd1 	.word	0x08010fd1
 8010f68:	08010fd1 	.word	0x08010fd1
 8010f6c:	08010fd1 	.word	0x08010fd1
 8010f70:	08010fd1 	.word	0x08010fd1
 8010f74:	08010fd1 	.word	0x08010fd1
 8010f78:	08010fd1 	.word	0x08010fd1
 8010f7c:	08010fc1 	.word	0x08010fc1
 8010f80:	08010fd1 	.word	0x08010fd1
 8010f84:	08010fd1 	.word	0x08010fd1
 8010f88:	08010fd1 	.word	0x08010fd1
 8010f8c:	08010fd1 	.word	0x08010fd1
 8010f90:	08010fd1 	.word	0x08010fd1
 8010f94:	08010fd1 	.word	0x08010fd1
 8010f98:	08010fd1 	.word	0x08010fd1
 8010f9c:	08010fc9 	.word	0x08010fc9
 8010fa0:	2301      	movs	r3, #1
 8010fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fa6:	e1c0      	b.n	801132a <UART_SetConfig+0x7ae>
 8010fa8:	2304      	movs	r3, #4
 8010faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fae:	e1bc      	b.n	801132a <UART_SetConfig+0x7ae>
 8010fb0:	2308      	movs	r3, #8
 8010fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fb6:	e1b8      	b.n	801132a <UART_SetConfig+0x7ae>
 8010fb8:	2310      	movs	r3, #16
 8010fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fbe:	e1b4      	b.n	801132a <UART_SetConfig+0x7ae>
 8010fc0:	2320      	movs	r3, #32
 8010fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fc6:	e1b0      	b.n	801132a <UART_SetConfig+0x7ae>
 8010fc8:	2340      	movs	r3, #64	; 0x40
 8010fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fce:	e1ac      	b.n	801132a <UART_SetConfig+0x7ae>
 8010fd0:	2380      	movs	r3, #128	; 0x80
 8010fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fd6:	e1a8      	b.n	801132a <UART_SetConfig+0x7ae>
 8010fd8:	697b      	ldr	r3, [r7, #20]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	4a75      	ldr	r2, [pc, #468]	; (80111b4 <UART_SetConfig+0x638>)
 8010fde:	4293      	cmp	r3, r2
 8010fe0:	d130      	bne.n	8011044 <UART_SetConfig+0x4c8>
 8010fe2:	4b73      	ldr	r3, [pc, #460]	; (80111b0 <UART_SetConfig+0x634>)
 8010fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010fe6:	f003 0307 	and.w	r3, r3, #7
 8010fea:	2b05      	cmp	r3, #5
 8010fec:	d826      	bhi.n	801103c <UART_SetConfig+0x4c0>
 8010fee:	a201      	add	r2, pc, #4	; (adr r2, 8010ff4 <UART_SetConfig+0x478>)
 8010ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ff4:	0801100d 	.word	0x0801100d
 8010ff8:	08011015 	.word	0x08011015
 8010ffc:	0801101d 	.word	0x0801101d
 8011000:	08011025 	.word	0x08011025
 8011004:	0801102d 	.word	0x0801102d
 8011008:	08011035 	.word	0x08011035
 801100c:	2300      	movs	r3, #0
 801100e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011012:	e18a      	b.n	801132a <UART_SetConfig+0x7ae>
 8011014:	2304      	movs	r3, #4
 8011016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801101a:	e186      	b.n	801132a <UART_SetConfig+0x7ae>
 801101c:	2308      	movs	r3, #8
 801101e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011022:	e182      	b.n	801132a <UART_SetConfig+0x7ae>
 8011024:	2310      	movs	r3, #16
 8011026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801102a:	e17e      	b.n	801132a <UART_SetConfig+0x7ae>
 801102c:	2320      	movs	r3, #32
 801102e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011032:	e17a      	b.n	801132a <UART_SetConfig+0x7ae>
 8011034:	2340      	movs	r3, #64	; 0x40
 8011036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801103a:	e176      	b.n	801132a <UART_SetConfig+0x7ae>
 801103c:	2380      	movs	r3, #128	; 0x80
 801103e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011042:	e172      	b.n	801132a <UART_SetConfig+0x7ae>
 8011044:	697b      	ldr	r3, [r7, #20]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	4a5b      	ldr	r2, [pc, #364]	; (80111b8 <UART_SetConfig+0x63c>)
 801104a:	4293      	cmp	r3, r2
 801104c:	d130      	bne.n	80110b0 <UART_SetConfig+0x534>
 801104e:	4b58      	ldr	r3, [pc, #352]	; (80111b0 <UART_SetConfig+0x634>)
 8011050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011052:	f003 0307 	and.w	r3, r3, #7
 8011056:	2b05      	cmp	r3, #5
 8011058:	d826      	bhi.n	80110a8 <UART_SetConfig+0x52c>
 801105a:	a201      	add	r2, pc, #4	; (adr r2, 8011060 <UART_SetConfig+0x4e4>)
 801105c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011060:	08011079 	.word	0x08011079
 8011064:	08011081 	.word	0x08011081
 8011068:	08011089 	.word	0x08011089
 801106c:	08011091 	.word	0x08011091
 8011070:	08011099 	.word	0x08011099
 8011074:	080110a1 	.word	0x080110a1
 8011078:	2300      	movs	r3, #0
 801107a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801107e:	e154      	b.n	801132a <UART_SetConfig+0x7ae>
 8011080:	2304      	movs	r3, #4
 8011082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011086:	e150      	b.n	801132a <UART_SetConfig+0x7ae>
 8011088:	2308      	movs	r3, #8
 801108a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801108e:	e14c      	b.n	801132a <UART_SetConfig+0x7ae>
 8011090:	2310      	movs	r3, #16
 8011092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011096:	e148      	b.n	801132a <UART_SetConfig+0x7ae>
 8011098:	2320      	movs	r3, #32
 801109a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801109e:	e144      	b.n	801132a <UART_SetConfig+0x7ae>
 80110a0:	2340      	movs	r3, #64	; 0x40
 80110a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110a6:	e140      	b.n	801132a <UART_SetConfig+0x7ae>
 80110a8:	2380      	movs	r3, #128	; 0x80
 80110aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ae:	e13c      	b.n	801132a <UART_SetConfig+0x7ae>
 80110b0:	697b      	ldr	r3, [r7, #20]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	4a41      	ldr	r2, [pc, #260]	; (80111bc <UART_SetConfig+0x640>)
 80110b6:	4293      	cmp	r3, r2
 80110b8:	f040 8082 	bne.w	80111c0 <UART_SetConfig+0x644>
 80110bc:	4b3c      	ldr	r3, [pc, #240]	; (80111b0 <UART_SetConfig+0x634>)
 80110be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80110c4:	2b28      	cmp	r3, #40	; 0x28
 80110c6:	d86d      	bhi.n	80111a4 <UART_SetConfig+0x628>
 80110c8:	a201      	add	r2, pc, #4	; (adr r2, 80110d0 <UART_SetConfig+0x554>)
 80110ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110ce:	bf00      	nop
 80110d0:	08011175 	.word	0x08011175
 80110d4:	080111a5 	.word	0x080111a5
 80110d8:	080111a5 	.word	0x080111a5
 80110dc:	080111a5 	.word	0x080111a5
 80110e0:	080111a5 	.word	0x080111a5
 80110e4:	080111a5 	.word	0x080111a5
 80110e8:	080111a5 	.word	0x080111a5
 80110ec:	080111a5 	.word	0x080111a5
 80110f0:	0801117d 	.word	0x0801117d
 80110f4:	080111a5 	.word	0x080111a5
 80110f8:	080111a5 	.word	0x080111a5
 80110fc:	080111a5 	.word	0x080111a5
 8011100:	080111a5 	.word	0x080111a5
 8011104:	080111a5 	.word	0x080111a5
 8011108:	080111a5 	.word	0x080111a5
 801110c:	080111a5 	.word	0x080111a5
 8011110:	08011185 	.word	0x08011185
 8011114:	080111a5 	.word	0x080111a5
 8011118:	080111a5 	.word	0x080111a5
 801111c:	080111a5 	.word	0x080111a5
 8011120:	080111a5 	.word	0x080111a5
 8011124:	080111a5 	.word	0x080111a5
 8011128:	080111a5 	.word	0x080111a5
 801112c:	080111a5 	.word	0x080111a5
 8011130:	0801118d 	.word	0x0801118d
 8011134:	080111a5 	.word	0x080111a5
 8011138:	080111a5 	.word	0x080111a5
 801113c:	080111a5 	.word	0x080111a5
 8011140:	080111a5 	.word	0x080111a5
 8011144:	080111a5 	.word	0x080111a5
 8011148:	080111a5 	.word	0x080111a5
 801114c:	080111a5 	.word	0x080111a5
 8011150:	08011195 	.word	0x08011195
 8011154:	080111a5 	.word	0x080111a5
 8011158:	080111a5 	.word	0x080111a5
 801115c:	080111a5 	.word	0x080111a5
 8011160:	080111a5 	.word	0x080111a5
 8011164:	080111a5 	.word	0x080111a5
 8011168:	080111a5 	.word	0x080111a5
 801116c:	080111a5 	.word	0x080111a5
 8011170:	0801119d 	.word	0x0801119d
 8011174:	2301      	movs	r3, #1
 8011176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801117a:	e0d6      	b.n	801132a <UART_SetConfig+0x7ae>
 801117c:	2304      	movs	r3, #4
 801117e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011182:	e0d2      	b.n	801132a <UART_SetConfig+0x7ae>
 8011184:	2308      	movs	r3, #8
 8011186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801118a:	e0ce      	b.n	801132a <UART_SetConfig+0x7ae>
 801118c:	2310      	movs	r3, #16
 801118e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011192:	e0ca      	b.n	801132a <UART_SetConfig+0x7ae>
 8011194:	2320      	movs	r3, #32
 8011196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801119a:	e0c6      	b.n	801132a <UART_SetConfig+0x7ae>
 801119c:	2340      	movs	r3, #64	; 0x40
 801119e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111a2:	e0c2      	b.n	801132a <UART_SetConfig+0x7ae>
 80111a4:	2380      	movs	r3, #128	; 0x80
 80111a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111aa:	e0be      	b.n	801132a <UART_SetConfig+0x7ae>
 80111ac:	40011400 	.word	0x40011400
 80111b0:	58024400 	.word	0x58024400
 80111b4:	40007800 	.word	0x40007800
 80111b8:	40007c00 	.word	0x40007c00
 80111bc:	40011800 	.word	0x40011800
 80111c0:	697b      	ldr	r3, [r7, #20]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	4aad      	ldr	r2, [pc, #692]	; (801147c <UART_SetConfig+0x900>)
 80111c6:	4293      	cmp	r3, r2
 80111c8:	d176      	bne.n	80112b8 <UART_SetConfig+0x73c>
 80111ca:	4bad      	ldr	r3, [pc, #692]	; (8011480 <UART_SetConfig+0x904>)
 80111cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80111d2:	2b28      	cmp	r3, #40	; 0x28
 80111d4:	d86c      	bhi.n	80112b0 <UART_SetConfig+0x734>
 80111d6:	a201      	add	r2, pc, #4	; (adr r2, 80111dc <UART_SetConfig+0x660>)
 80111d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111dc:	08011281 	.word	0x08011281
 80111e0:	080112b1 	.word	0x080112b1
 80111e4:	080112b1 	.word	0x080112b1
 80111e8:	080112b1 	.word	0x080112b1
 80111ec:	080112b1 	.word	0x080112b1
 80111f0:	080112b1 	.word	0x080112b1
 80111f4:	080112b1 	.word	0x080112b1
 80111f8:	080112b1 	.word	0x080112b1
 80111fc:	08011289 	.word	0x08011289
 8011200:	080112b1 	.word	0x080112b1
 8011204:	080112b1 	.word	0x080112b1
 8011208:	080112b1 	.word	0x080112b1
 801120c:	080112b1 	.word	0x080112b1
 8011210:	080112b1 	.word	0x080112b1
 8011214:	080112b1 	.word	0x080112b1
 8011218:	080112b1 	.word	0x080112b1
 801121c:	08011291 	.word	0x08011291
 8011220:	080112b1 	.word	0x080112b1
 8011224:	080112b1 	.word	0x080112b1
 8011228:	080112b1 	.word	0x080112b1
 801122c:	080112b1 	.word	0x080112b1
 8011230:	080112b1 	.word	0x080112b1
 8011234:	080112b1 	.word	0x080112b1
 8011238:	080112b1 	.word	0x080112b1
 801123c:	08011299 	.word	0x08011299
 8011240:	080112b1 	.word	0x080112b1
 8011244:	080112b1 	.word	0x080112b1
 8011248:	080112b1 	.word	0x080112b1
 801124c:	080112b1 	.word	0x080112b1
 8011250:	080112b1 	.word	0x080112b1
 8011254:	080112b1 	.word	0x080112b1
 8011258:	080112b1 	.word	0x080112b1
 801125c:	080112a1 	.word	0x080112a1
 8011260:	080112b1 	.word	0x080112b1
 8011264:	080112b1 	.word	0x080112b1
 8011268:	080112b1 	.word	0x080112b1
 801126c:	080112b1 	.word	0x080112b1
 8011270:	080112b1 	.word	0x080112b1
 8011274:	080112b1 	.word	0x080112b1
 8011278:	080112b1 	.word	0x080112b1
 801127c:	080112a9 	.word	0x080112a9
 8011280:	2301      	movs	r3, #1
 8011282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011286:	e050      	b.n	801132a <UART_SetConfig+0x7ae>
 8011288:	2304      	movs	r3, #4
 801128a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801128e:	e04c      	b.n	801132a <UART_SetConfig+0x7ae>
 8011290:	2308      	movs	r3, #8
 8011292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011296:	e048      	b.n	801132a <UART_SetConfig+0x7ae>
 8011298:	2310      	movs	r3, #16
 801129a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801129e:	e044      	b.n	801132a <UART_SetConfig+0x7ae>
 80112a0:	2320      	movs	r3, #32
 80112a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112a6:	e040      	b.n	801132a <UART_SetConfig+0x7ae>
 80112a8:	2340      	movs	r3, #64	; 0x40
 80112aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ae:	e03c      	b.n	801132a <UART_SetConfig+0x7ae>
 80112b0:	2380      	movs	r3, #128	; 0x80
 80112b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112b6:	e038      	b.n	801132a <UART_SetConfig+0x7ae>
 80112b8:	697b      	ldr	r3, [r7, #20]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	4a71      	ldr	r2, [pc, #452]	; (8011484 <UART_SetConfig+0x908>)
 80112be:	4293      	cmp	r3, r2
 80112c0:	d130      	bne.n	8011324 <UART_SetConfig+0x7a8>
 80112c2:	4b6f      	ldr	r3, [pc, #444]	; (8011480 <UART_SetConfig+0x904>)
 80112c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80112c6:	f003 0307 	and.w	r3, r3, #7
 80112ca:	2b05      	cmp	r3, #5
 80112cc:	d826      	bhi.n	801131c <UART_SetConfig+0x7a0>
 80112ce:	a201      	add	r2, pc, #4	; (adr r2, 80112d4 <UART_SetConfig+0x758>)
 80112d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112d4:	080112ed 	.word	0x080112ed
 80112d8:	080112f5 	.word	0x080112f5
 80112dc:	080112fd 	.word	0x080112fd
 80112e0:	08011305 	.word	0x08011305
 80112e4:	0801130d 	.word	0x0801130d
 80112e8:	08011315 	.word	0x08011315
 80112ec:	2302      	movs	r3, #2
 80112ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112f2:	e01a      	b.n	801132a <UART_SetConfig+0x7ae>
 80112f4:	2304      	movs	r3, #4
 80112f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112fa:	e016      	b.n	801132a <UART_SetConfig+0x7ae>
 80112fc:	2308      	movs	r3, #8
 80112fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011302:	e012      	b.n	801132a <UART_SetConfig+0x7ae>
 8011304:	2310      	movs	r3, #16
 8011306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801130a:	e00e      	b.n	801132a <UART_SetConfig+0x7ae>
 801130c:	2320      	movs	r3, #32
 801130e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011312:	e00a      	b.n	801132a <UART_SetConfig+0x7ae>
 8011314:	2340      	movs	r3, #64	; 0x40
 8011316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801131a:	e006      	b.n	801132a <UART_SetConfig+0x7ae>
 801131c:	2380      	movs	r3, #128	; 0x80
 801131e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011322:	e002      	b.n	801132a <UART_SetConfig+0x7ae>
 8011324:	2380      	movs	r3, #128	; 0x80
 8011326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801132a:	697b      	ldr	r3, [r7, #20]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	4a55      	ldr	r2, [pc, #340]	; (8011484 <UART_SetConfig+0x908>)
 8011330:	4293      	cmp	r3, r2
 8011332:	f040 80f8 	bne.w	8011526 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011336:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801133a:	2b20      	cmp	r3, #32
 801133c:	dc46      	bgt.n	80113cc <UART_SetConfig+0x850>
 801133e:	2b02      	cmp	r3, #2
 8011340:	db75      	blt.n	801142e <UART_SetConfig+0x8b2>
 8011342:	3b02      	subs	r3, #2
 8011344:	2b1e      	cmp	r3, #30
 8011346:	d872      	bhi.n	801142e <UART_SetConfig+0x8b2>
 8011348:	a201      	add	r2, pc, #4	; (adr r2, 8011350 <UART_SetConfig+0x7d4>)
 801134a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801134e:	bf00      	nop
 8011350:	080113d3 	.word	0x080113d3
 8011354:	0801142f 	.word	0x0801142f
 8011358:	080113db 	.word	0x080113db
 801135c:	0801142f 	.word	0x0801142f
 8011360:	0801142f 	.word	0x0801142f
 8011364:	0801142f 	.word	0x0801142f
 8011368:	080113eb 	.word	0x080113eb
 801136c:	0801142f 	.word	0x0801142f
 8011370:	0801142f 	.word	0x0801142f
 8011374:	0801142f 	.word	0x0801142f
 8011378:	0801142f 	.word	0x0801142f
 801137c:	0801142f 	.word	0x0801142f
 8011380:	0801142f 	.word	0x0801142f
 8011384:	0801142f 	.word	0x0801142f
 8011388:	080113fb 	.word	0x080113fb
 801138c:	0801142f 	.word	0x0801142f
 8011390:	0801142f 	.word	0x0801142f
 8011394:	0801142f 	.word	0x0801142f
 8011398:	0801142f 	.word	0x0801142f
 801139c:	0801142f 	.word	0x0801142f
 80113a0:	0801142f 	.word	0x0801142f
 80113a4:	0801142f 	.word	0x0801142f
 80113a8:	0801142f 	.word	0x0801142f
 80113ac:	0801142f 	.word	0x0801142f
 80113b0:	0801142f 	.word	0x0801142f
 80113b4:	0801142f 	.word	0x0801142f
 80113b8:	0801142f 	.word	0x0801142f
 80113bc:	0801142f 	.word	0x0801142f
 80113c0:	0801142f 	.word	0x0801142f
 80113c4:	0801142f 	.word	0x0801142f
 80113c8:	08011421 	.word	0x08011421
 80113cc:	2b40      	cmp	r3, #64	; 0x40
 80113ce:	d02a      	beq.n	8011426 <UART_SetConfig+0x8aa>
 80113d0:	e02d      	b.n	801142e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80113d2:	f7fb f86b 	bl	800c4ac <HAL_RCCEx_GetD3PCLK1Freq>
 80113d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80113d8:	e02f      	b.n	801143a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80113da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80113de:	4618      	mov	r0, r3
 80113e0:	f7fb f87a 	bl	800c4d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80113e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113e8:	e027      	b.n	801143a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80113ea:	f107 0318 	add.w	r3, r7, #24
 80113ee:	4618      	mov	r0, r3
 80113f0:	f7fb f9c6 	bl	800c780 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80113f4:	69fb      	ldr	r3, [r7, #28]
 80113f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113f8:	e01f      	b.n	801143a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80113fa:	4b21      	ldr	r3, [pc, #132]	; (8011480 <UART_SetConfig+0x904>)
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	f003 0320 	and.w	r3, r3, #32
 8011402:	2b00      	cmp	r3, #0
 8011404:	d009      	beq.n	801141a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011406:	4b1e      	ldr	r3, [pc, #120]	; (8011480 <UART_SetConfig+0x904>)
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	08db      	lsrs	r3, r3, #3
 801140c:	f003 0303 	and.w	r3, r3, #3
 8011410:	4a1d      	ldr	r2, [pc, #116]	; (8011488 <UART_SetConfig+0x90c>)
 8011412:	fa22 f303 	lsr.w	r3, r2, r3
 8011416:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011418:	e00f      	b.n	801143a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801141a:	4b1b      	ldr	r3, [pc, #108]	; (8011488 <UART_SetConfig+0x90c>)
 801141c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801141e:	e00c      	b.n	801143a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011420:	4b1a      	ldr	r3, [pc, #104]	; (801148c <UART_SetConfig+0x910>)
 8011422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011424:	e009      	b.n	801143a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801142a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801142c:	e005      	b.n	801143a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801142e:	2300      	movs	r3, #0
 8011430:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011432:	2301      	movs	r3, #1
 8011434:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011438:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801143a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801143c:	2b00      	cmp	r3, #0
 801143e:	f000 81ee 	beq.w	801181e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011442:	697b      	ldr	r3, [r7, #20]
 8011444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011446:	4a12      	ldr	r2, [pc, #72]	; (8011490 <UART_SetConfig+0x914>)
 8011448:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801144c:	461a      	mov	r2, r3
 801144e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011450:	fbb3 f3f2 	udiv	r3, r3, r2
 8011454:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011456:	697b      	ldr	r3, [r7, #20]
 8011458:	685a      	ldr	r2, [r3, #4]
 801145a:	4613      	mov	r3, r2
 801145c:	005b      	lsls	r3, r3, #1
 801145e:	4413      	add	r3, r2
 8011460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011462:	429a      	cmp	r2, r3
 8011464:	d305      	bcc.n	8011472 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011466:	697b      	ldr	r3, [r7, #20]
 8011468:	685b      	ldr	r3, [r3, #4]
 801146a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801146c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801146e:	429a      	cmp	r2, r3
 8011470:	d910      	bls.n	8011494 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8011472:	2301      	movs	r3, #1
 8011474:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011478:	e1d1      	b.n	801181e <UART_SetConfig+0xca2>
 801147a:	bf00      	nop
 801147c:	40011c00 	.word	0x40011c00
 8011480:	58024400 	.word	0x58024400
 8011484:	58000c00 	.word	0x58000c00
 8011488:	03d09000 	.word	0x03d09000
 801148c:	003d0900 	.word	0x003d0900
 8011490:	08018500 	.word	0x08018500
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011496:	2200      	movs	r2, #0
 8011498:	60bb      	str	r3, [r7, #8]
 801149a:	60fa      	str	r2, [r7, #12]
 801149c:	697b      	ldr	r3, [r7, #20]
 801149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114a0:	4ac0      	ldr	r2, [pc, #768]	; (80117a4 <UART_SetConfig+0xc28>)
 80114a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80114a6:	b29b      	uxth	r3, r3
 80114a8:	2200      	movs	r2, #0
 80114aa:	603b      	str	r3, [r7, #0]
 80114ac:	607a      	str	r2, [r7, #4]
 80114ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80114b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80114b6:	f7ee ff93 	bl	80003e0 <__aeabi_uldivmod>
 80114ba:	4602      	mov	r2, r0
 80114bc:	460b      	mov	r3, r1
 80114be:	4610      	mov	r0, r2
 80114c0:	4619      	mov	r1, r3
 80114c2:	f04f 0200 	mov.w	r2, #0
 80114c6:	f04f 0300 	mov.w	r3, #0
 80114ca:	020b      	lsls	r3, r1, #8
 80114cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80114d0:	0202      	lsls	r2, r0, #8
 80114d2:	6979      	ldr	r1, [r7, #20]
 80114d4:	6849      	ldr	r1, [r1, #4]
 80114d6:	0849      	lsrs	r1, r1, #1
 80114d8:	2000      	movs	r0, #0
 80114da:	460c      	mov	r4, r1
 80114dc:	4605      	mov	r5, r0
 80114de:	eb12 0804 	adds.w	r8, r2, r4
 80114e2:	eb43 0905 	adc.w	r9, r3, r5
 80114e6:	697b      	ldr	r3, [r7, #20]
 80114e8:	685b      	ldr	r3, [r3, #4]
 80114ea:	2200      	movs	r2, #0
 80114ec:	469a      	mov	sl, r3
 80114ee:	4693      	mov	fp, r2
 80114f0:	4652      	mov	r2, sl
 80114f2:	465b      	mov	r3, fp
 80114f4:	4640      	mov	r0, r8
 80114f6:	4649      	mov	r1, r9
 80114f8:	f7ee ff72 	bl	80003e0 <__aeabi_uldivmod>
 80114fc:	4602      	mov	r2, r0
 80114fe:	460b      	mov	r3, r1
 8011500:	4613      	mov	r3, r2
 8011502:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011506:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801150a:	d308      	bcc.n	801151e <UART_SetConfig+0x9a2>
 801150c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801150e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011512:	d204      	bcs.n	801151e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8011514:	697b      	ldr	r3, [r7, #20]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801151a:	60da      	str	r2, [r3, #12]
 801151c:	e17f      	b.n	801181e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801151e:	2301      	movs	r3, #1
 8011520:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011524:	e17b      	b.n	801181e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011526:	697b      	ldr	r3, [r7, #20]
 8011528:	69db      	ldr	r3, [r3, #28]
 801152a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801152e:	f040 80bd 	bne.w	80116ac <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8011532:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011536:	2b20      	cmp	r3, #32
 8011538:	dc48      	bgt.n	80115cc <UART_SetConfig+0xa50>
 801153a:	2b00      	cmp	r3, #0
 801153c:	db7b      	blt.n	8011636 <UART_SetConfig+0xaba>
 801153e:	2b20      	cmp	r3, #32
 8011540:	d879      	bhi.n	8011636 <UART_SetConfig+0xaba>
 8011542:	a201      	add	r2, pc, #4	; (adr r2, 8011548 <UART_SetConfig+0x9cc>)
 8011544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011548:	080115d3 	.word	0x080115d3
 801154c:	080115db 	.word	0x080115db
 8011550:	08011637 	.word	0x08011637
 8011554:	08011637 	.word	0x08011637
 8011558:	080115e3 	.word	0x080115e3
 801155c:	08011637 	.word	0x08011637
 8011560:	08011637 	.word	0x08011637
 8011564:	08011637 	.word	0x08011637
 8011568:	080115f3 	.word	0x080115f3
 801156c:	08011637 	.word	0x08011637
 8011570:	08011637 	.word	0x08011637
 8011574:	08011637 	.word	0x08011637
 8011578:	08011637 	.word	0x08011637
 801157c:	08011637 	.word	0x08011637
 8011580:	08011637 	.word	0x08011637
 8011584:	08011637 	.word	0x08011637
 8011588:	08011603 	.word	0x08011603
 801158c:	08011637 	.word	0x08011637
 8011590:	08011637 	.word	0x08011637
 8011594:	08011637 	.word	0x08011637
 8011598:	08011637 	.word	0x08011637
 801159c:	08011637 	.word	0x08011637
 80115a0:	08011637 	.word	0x08011637
 80115a4:	08011637 	.word	0x08011637
 80115a8:	08011637 	.word	0x08011637
 80115ac:	08011637 	.word	0x08011637
 80115b0:	08011637 	.word	0x08011637
 80115b4:	08011637 	.word	0x08011637
 80115b8:	08011637 	.word	0x08011637
 80115bc:	08011637 	.word	0x08011637
 80115c0:	08011637 	.word	0x08011637
 80115c4:	08011637 	.word	0x08011637
 80115c8:	08011629 	.word	0x08011629
 80115cc:	2b40      	cmp	r3, #64	; 0x40
 80115ce:	d02e      	beq.n	801162e <UART_SetConfig+0xab2>
 80115d0:	e031      	b.n	8011636 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80115d2:	f7f9 f8cd 	bl	800a770 <HAL_RCC_GetPCLK1Freq>
 80115d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80115d8:	e033      	b.n	8011642 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80115da:	f7f9 f8df 	bl	800a79c <HAL_RCC_GetPCLK2Freq>
 80115de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80115e0:	e02f      	b.n	8011642 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80115e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80115e6:	4618      	mov	r0, r3
 80115e8:	f7fa ff76 	bl	800c4d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80115ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115f0:	e027      	b.n	8011642 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80115f2:	f107 0318 	add.w	r3, r7, #24
 80115f6:	4618      	mov	r0, r3
 80115f8:	f7fb f8c2 	bl	800c780 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80115fc:	69fb      	ldr	r3, [r7, #28]
 80115fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011600:	e01f      	b.n	8011642 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011602:	4b69      	ldr	r3, [pc, #420]	; (80117a8 <UART_SetConfig+0xc2c>)
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	f003 0320 	and.w	r3, r3, #32
 801160a:	2b00      	cmp	r3, #0
 801160c:	d009      	beq.n	8011622 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801160e:	4b66      	ldr	r3, [pc, #408]	; (80117a8 <UART_SetConfig+0xc2c>)
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	08db      	lsrs	r3, r3, #3
 8011614:	f003 0303 	and.w	r3, r3, #3
 8011618:	4a64      	ldr	r2, [pc, #400]	; (80117ac <UART_SetConfig+0xc30>)
 801161a:	fa22 f303 	lsr.w	r3, r2, r3
 801161e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011620:	e00f      	b.n	8011642 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8011622:	4b62      	ldr	r3, [pc, #392]	; (80117ac <UART_SetConfig+0xc30>)
 8011624:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011626:	e00c      	b.n	8011642 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011628:	4b61      	ldr	r3, [pc, #388]	; (80117b0 <UART_SetConfig+0xc34>)
 801162a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801162c:	e009      	b.n	8011642 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801162e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011632:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011634:	e005      	b.n	8011642 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8011636:	2300      	movs	r3, #0
 8011638:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801163a:	2301      	movs	r3, #1
 801163c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011640:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011644:	2b00      	cmp	r3, #0
 8011646:	f000 80ea 	beq.w	801181e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801164a:	697b      	ldr	r3, [r7, #20]
 801164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801164e:	4a55      	ldr	r2, [pc, #340]	; (80117a4 <UART_SetConfig+0xc28>)
 8011650:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011654:	461a      	mov	r2, r3
 8011656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011658:	fbb3 f3f2 	udiv	r3, r3, r2
 801165c:	005a      	lsls	r2, r3, #1
 801165e:	697b      	ldr	r3, [r7, #20]
 8011660:	685b      	ldr	r3, [r3, #4]
 8011662:	085b      	lsrs	r3, r3, #1
 8011664:	441a      	add	r2, r3
 8011666:	697b      	ldr	r3, [r7, #20]
 8011668:	685b      	ldr	r3, [r3, #4]
 801166a:	fbb2 f3f3 	udiv	r3, r2, r3
 801166e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011672:	2b0f      	cmp	r3, #15
 8011674:	d916      	bls.n	80116a4 <UART_SetConfig+0xb28>
 8011676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801167c:	d212      	bcs.n	80116a4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801167e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011680:	b29b      	uxth	r3, r3
 8011682:	f023 030f 	bic.w	r3, r3, #15
 8011686:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801168a:	085b      	lsrs	r3, r3, #1
 801168c:	b29b      	uxth	r3, r3
 801168e:	f003 0307 	and.w	r3, r3, #7
 8011692:	b29a      	uxth	r2, r3
 8011694:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011696:	4313      	orrs	r3, r2
 8011698:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801169a:	697b      	ldr	r3, [r7, #20]
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80116a0:	60da      	str	r2, [r3, #12]
 80116a2:	e0bc      	b.n	801181e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80116a4:	2301      	movs	r3, #1
 80116a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80116aa:	e0b8      	b.n	801181e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80116ac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80116b0:	2b20      	cmp	r3, #32
 80116b2:	dc4b      	bgt.n	801174c <UART_SetConfig+0xbd0>
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	f2c0 8087 	blt.w	80117c8 <UART_SetConfig+0xc4c>
 80116ba:	2b20      	cmp	r3, #32
 80116bc:	f200 8084 	bhi.w	80117c8 <UART_SetConfig+0xc4c>
 80116c0:	a201      	add	r2, pc, #4	; (adr r2, 80116c8 <UART_SetConfig+0xb4c>)
 80116c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116c6:	bf00      	nop
 80116c8:	08011753 	.word	0x08011753
 80116cc:	0801175b 	.word	0x0801175b
 80116d0:	080117c9 	.word	0x080117c9
 80116d4:	080117c9 	.word	0x080117c9
 80116d8:	08011763 	.word	0x08011763
 80116dc:	080117c9 	.word	0x080117c9
 80116e0:	080117c9 	.word	0x080117c9
 80116e4:	080117c9 	.word	0x080117c9
 80116e8:	08011773 	.word	0x08011773
 80116ec:	080117c9 	.word	0x080117c9
 80116f0:	080117c9 	.word	0x080117c9
 80116f4:	080117c9 	.word	0x080117c9
 80116f8:	080117c9 	.word	0x080117c9
 80116fc:	080117c9 	.word	0x080117c9
 8011700:	080117c9 	.word	0x080117c9
 8011704:	080117c9 	.word	0x080117c9
 8011708:	08011783 	.word	0x08011783
 801170c:	080117c9 	.word	0x080117c9
 8011710:	080117c9 	.word	0x080117c9
 8011714:	080117c9 	.word	0x080117c9
 8011718:	080117c9 	.word	0x080117c9
 801171c:	080117c9 	.word	0x080117c9
 8011720:	080117c9 	.word	0x080117c9
 8011724:	080117c9 	.word	0x080117c9
 8011728:	080117c9 	.word	0x080117c9
 801172c:	080117c9 	.word	0x080117c9
 8011730:	080117c9 	.word	0x080117c9
 8011734:	080117c9 	.word	0x080117c9
 8011738:	080117c9 	.word	0x080117c9
 801173c:	080117c9 	.word	0x080117c9
 8011740:	080117c9 	.word	0x080117c9
 8011744:	080117c9 	.word	0x080117c9
 8011748:	080117bb 	.word	0x080117bb
 801174c:	2b40      	cmp	r3, #64	; 0x40
 801174e:	d037      	beq.n	80117c0 <UART_SetConfig+0xc44>
 8011750:	e03a      	b.n	80117c8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011752:	f7f9 f80d 	bl	800a770 <HAL_RCC_GetPCLK1Freq>
 8011756:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011758:	e03c      	b.n	80117d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801175a:	f7f9 f81f 	bl	800a79c <HAL_RCC_GetPCLK2Freq>
 801175e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011760:	e038      	b.n	80117d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011766:	4618      	mov	r0, r3
 8011768:	f7fa feb6 	bl	800c4d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801176c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801176e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011770:	e030      	b.n	80117d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011772:	f107 0318 	add.w	r3, r7, #24
 8011776:	4618      	mov	r0, r3
 8011778:	f7fb f802 	bl	800c780 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801177c:	69fb      	ldr	r3, [r7, #28]
 801177e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011780:	e028      	b.n	80117d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011782:	4b09      	ldr	r3, [pc, #36]	; (80117a8 <UART_SetConfig+0xc2c>)
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	f003 0320 	and.w	r3, r3, #32
 801178a:	2b00      	cmp	r3, #0
 801178c:	d012      	beq.n	80117b4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801178e:	4b06      	ldr	r3, [pc, #24]	; (80117a8 <UART_SetConfig+0xc2c>)
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	08db      	lsrs	r3, r3, #3
 8011794:	f003 0303 	and.w	r3, r3, #3
 8011798:	4a04      	ldr	r2, [pc, #16]	; (80117ac <UART_SetConfig+0xc30>)
 801179a:	fa22 f303 	lsr.w	r3, r2, r3
 801179e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80117a0:	e018      	b.n	80117d4 <UART_SetConfig+0xc58>
 80117a2:	bf00      	nop
 80117a4:	08018500 	.word	0x08018500
 80117a8:	58024400 	.word	0x58024400
 80117ac:	03d09000 	.word	0x03d09000
 80117b0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80117b4:	4b24      	ldr	r3, [pc, #144]	; (8011848 <UART_SetConfig+0xccc>)
 80117b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117b8:	e00c      	b.n	80117d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80117ba:	4b24      	ldr	r3, [pc, #144]	; (801184c <UART_SetConfig+0xcd0>)
 80117bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117be:	e009      	b.n	80117d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80117c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80117c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117c6:	e005      	b.n	80117d4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80117c8:	2300      	movs	r3, #0
 80117ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80117cc:	2301      	movs	r3, #1
 80117ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80117d2:	bf00      	nop
    }

    if (pclk != 0U)
 80117d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d021      	beq.n	801181e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80117da:	697b      	ldr	r3, [r7, #20]
 80117dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117de:	4a1c      	ldr	r2, [pc, #112]	; (8011850 <UART_SetConfig+0xcd4>)
 80117e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80117e4:	461a      	mov	r2, r3
 80117e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117e8:	fbb3 f2f2 	udiv	r2, r3, r2
 80117ec:	697b      	ldr	r3, [r7, #20]
 80117ee:	685b      	ldr	r3, [r3, #4]
 80117f0:	085b      	lsrs	r3, r3, #1
 80117f2:	441a      	add	r2, r3
 80117f4:	697b      	ldr	r3, [r7, #20]
 80117f6:	685b      	ldr	r3, [r3, #4]
 80117f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80117fc:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80117fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011800:	2b0f      	cmp	r3, #15
 8011802:	d909      	bls.n	8011818 <UART_SetConfig+0xc9c>
 8011804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801180a:	d205      	bcs.n	8011818 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801180c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801180e:	b29a      	uxth	r2, r3
 8011810:	697b      	ldr	r3, [r7, #20]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	60da      	str	r2, [r3, #12]
 8011816:	e002      	b.n	801181e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011818:	2301      	movs	r3, #1
 801181a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801181e:	697b      	ldr	r3, [r7, #20]
 8011820:	2201      	movs	r2, #1
 8011822:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011826:	697b      	ldr	r3, [r7, #20]
 8011828:	2201      	movs	r2, #1
 801182a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801182e:	697b      	ldr	r3, [r7, #20]
 8011830:	2200      	movs	r2, #0
 8011832:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011834:	697b      	ldr	r3, [r7, #20]
 8011836:	2200      	movs	r2, #0
 8011838:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801183a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 801183e:	4618      	mov	r0, r3
 8011840:	3748      	adds	r7, #72	; 0x48
 8011842:	46bd      	mov	sp, r7
 8011844:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011848:	03d09000 	.word	0x03d09000
 801184c:	003d0900 	.word	0x003d0900
 8011850:	08018500 	.word	0x08018500

08011854 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011854:	b480      	push	{r7}
 8011856:	b083      	sub	sp, #12
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011860:	f003 0301 	and.w	r3, r3, #1
 8011864:	2b00      	cmp	r3, #0
 8011866:	d00a      	beq.n	801187e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	685b      	ldr	r3, [r3, #4]
 801186e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	430a      	orrs	r2, r1
 801187c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011882:	f003 0302 	and.w	r3, r3, #2
 8011886:	2b00      	cmp	r3, #0
 8011888:	d00a      	beq.n	80118a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	685b      	ldr	r3, [r3, #4]
 8011890:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	430a      	orrs	r2, r1
 801189e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118a4:	f003 0304 	and.w	r3, r3, #4
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d00a      	beq.n	80118c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	685b      	ldr	r3, [r3, #4]
 80118b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	430a      	orrs	r2, r1
 80118c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118c6:	f003 0308 	and.w	r3, r3, #8
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d00a      	beq.n	80118e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	685b      	ldr	r3, [r3, #4]
 80118d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	430a      	orrs	r2, r1
 80118e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118e8:	f003 0310 	and.w	r3, r3, #16
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d00a      	beq.n	8011906 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	689b      	ldr	r3, [r3, #8]
 80118f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	430a      	orrs	r2, r1
 8011904:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801190a:	f003 0320 	and.w	r3, r3, #32
 801190e:	2b00      	cmp	r3, #0
 8011910:	d00a      	beq.n	8011928 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	689b      	ldr	r3, [r3, #8]
 8011918:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	430a      	orrs	r2, r1
 8011926:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801192c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011930:	2b00      	cmp	r3, #0
 8011932:	d01a      	beq.n	801196a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	685b      	ldr	r3, [r3, #4]
 801193a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	430a      	orrs	r2, r1
 8011948:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801194e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011952:	d10a      	bne.n	801196a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	685b      	ldr	r3, [r3, #4]
 801195a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	430a      	orrs	r2, r1
 8011968:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801196e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011972:	2b00      	cmp	r3, #0
 8011974:	d00a      	beq.n	801198c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	685b      	ldr	r3, [r3, #4]
 801197c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	430a      	orrs	r2, r1
 801198a:	605a      	str	r2, [r3, #4]
  }
}
 801198c:	bf00      	nop
 801198e:	370c      	adds	r7, #12
 8011990:	46bd      	mov	sp, r7
 8011992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011996:	4770      	bx	lr

08011998 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011998:	b580      	push	{r7, lr}
 801199a:	b098      	sub	sp, #96	; 0x60
 801199c:	af02      	add	r7, sp, #8
 801199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	2200      	movs	r2, #0
 80119a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80119a8:	f7f2 f822 	bl	80039f0 <HAL_GetTick>
 80119ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	f003 0308 	and.w	r3, r3, #8
 80119b8:	2b08      	cmp	r3, #8
 80119ba:	d12f      	bne.n	8011a1c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80119bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80119c0:	9300      	str	r3, [sp, #0]
 80119c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119c4:	2200      	movs	r2, #0
 80119c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80119ca:	6878      	ldr	r0, [r7, #4]
 80119cc:	f000 f88e 	bl	8011aec <UART_WaitOnFlagUntilTimeout>
 80119d0:	4603      	mov	r3, r0
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d022      	beq.n	8011a1c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119de:	e853 3f00 	ldrex	r3, [r3]
 80119e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80119e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80119ea:	653b      	str	r3, [r7, #80]	; 0x50
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	461a      	mov	r2, r3
 80119f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119f4:	647b      	str	r3, [r7, #68]	; 0x44
 80119f6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80119fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80119fc:	e841 2300 	strex	r3, r2, [r1]
 8011a00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d1e6      	bne.n	80119d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	2220      	movs	r2, #32
 8011a0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	2200      	movs	r2, #0
 8011a14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011a18:	2303      	movs	r3, #3
 8011a1a:	e063      	b.n	8011ae4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	f003 0304 	and.w	r3, r3, #4
 8011a26:	2b04      	cmp	r3, #4
 8011a28:	d149      	bne.n	8011abe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011a2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011a2e:	9300      	str	r3, [sp, #0]
 8011a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a32:	2200      	movs	r2, #0
 8011a34:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011a38:	6878      	ldr	r0, [r7, #4]
 8011a3a:	f000 f857 	bl	8011aec <UART_WaitOnFlagUntilTimeout>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d03c      	beq.n	8011abe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a4c:	e853 3f00 	ldrex	r3, [r3]
 8011a50:	623b      	str	r3, [r7, #32]
   return(result);
 8011a52:	6a3b      	ldr	r3, [r7, #32]
 8011a54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011a58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	461a      	mov	r2, r3
 8011a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a62:	633b      	str	r3, [r7, #48]	; 0x30
 8011a64:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a6a:	e841 2300 	strex	r3, r2, [r1]
 8011a6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d1e6      	bne.n	8011a44 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	3308      	adds	r3, #8
 8011a7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a7e:	693b      	ldr	r3, [r7, #16]
 8011a80:	e853 3f00 	ldrex	r3, [r3]
 8011a84:	60fb      	str	r3, [r7, #12]
   return(result);
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	f023 0301 	bic.w	r3, r3, #1
 8011a8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	3308      	adds	r3, #8
 8011a94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011a96:	61fa      	str	r2, [r7, #28]
 8011a98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a9a:	69b9      	ldr	r1, [r7, #24]
 8011a9c:	69fa      	ldr	r2, [r7, #28]
 8011a9e:	e841 2300 	strex	r3, r2, [r1]
 8011aa2:	617b      	str	r3, [r7, #20]
   return(result);
 8011aa4:	697b      	ldr	r3, [r7, #20]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d1e5      	bne.n	8011a76 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	2220      	movs	r2, #32
 8011aae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011aba:	2303      	movs	r3, #3
 8011abc:	e012      	b.n	8011ae4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	2220      	movs	r2, #32
 8011ac2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	2220      	movs	r2, #32
 8011aca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	2200      	movs	r2, #0
 8011ade:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011ae2:	2300      	movs	r3, #0
}
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	3758      	adds	r7, #88	; 0x58
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	bd80      	pop	{r7, pc}

08011aec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b084      	sub	sp, #16
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	60f8      	str	r0, [r7, #12]
 8011af4:	60b9      	str	r1, [r7, #8]
 8011af6:	603b      	str	r3, [r7, #0]
 8011af8:	4613      	mov	r3, r2
 8011afa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011afc:	e049      	b.n	8011b92 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011afe:	69bb      	ldr	r3, [r7, #24]
 8011b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b04:	d045      	beq.n	8011b92 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011b06:	f7f1 ff73 	bl	80039f0 <HAL_GetTick>
 8011b0a:	4602      	mov	r2, r0
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	1ad3      	subs	r3, r2, r3
 8011b10:	69ba      	ldr	r2, [r7, #24]
 8011b12:	429a      	cmp	r2, r3
 8011b14:	d302      	bcc.n	8011b1c <UART_WaitOnFlagUntilTimeout+0x30>
 8011b16:	69bb      	ldr	r3, [r7, #24]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d101      	bne.n	8011b20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011b1c:	2303      	movs	r3, #3
 8011b1e:	e048      	b.n	8011bb2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	f003 0304 	and.w	r3, r3, #4
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d031      	beq.n	8011b92 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	69db      	ldr	r3, [r3, #28]
 8011b34:	f003 0308 	and.w	r3, r3, #8
 8011b38:	2b08      	cmp	r3, #8
 8011b3a:	d110      	bne.n	8011b5e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	2208      	movs	r2, #8
 8011b42:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8011b44:	68f8      	ldr	r0, [r7, #12]
 8011b46:	f000 f839 	bl	8011bbc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	2208      	movs	r2, #8
 8011b4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	2200      	movs	r2, #0
 8011b56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8011b5a:	2301      	movs	r3, #1
 8011b5c:	e029      	b.n	8011bb2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	69db      	ldr	r3, [r3, #28]
 8011b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011b68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011b6c:	d111      	bne.n	8011b92 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011b76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011b78:	68f8      	ldr	r0, [r7, #12]
 8011b7a:	f000 f81f 	bl	8011bbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	2220      	movs	r2, #32
 8011b82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	2200      	movs	r2, #0
 8011b8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011b8e:	2303      	movs	r3, #3
 8011b90:	e00f      	b.n	8011bb2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	69da      	ldr	r2, [r3, #28]
 8011b98:	68bb      	ldr	r3, [r7, #8]
 8011b9a:	4013      	ands	r3, r2
 8011b9c:	68ba      	ldr	r2, [r7, #8]
 8011b9e:	429a      	cmp	r2, r3
 8011ba0:	bf0c      	ite	eq
 8011ba2:	2301      	moveq	r3, #1
 8011ba4:	2300      	movne	r3, #0
 8011ba6:	b2db      	uxtb	r3, r3
 8011ba8:	461a      	mov	r2, r3
 8011baa:	79fb      	ldrb	r3, [r7, #7]
 8011bac:	429a      	cmp	r2, r3
 8011bae:	d0a6      	beq.n	8011afe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011bb0:	2300      	movs	r3, #0
}
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	3710      	adds	r7, #16
 8011bb6:	46bd      	mov	sp, r7
 8011bb8:	bd80      	pop	{r7, pc}
	...

08011bbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011bbc:	b480      	push	{r7}
 8011bbe:	b095      	sub	sp, #84	; 0x54
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bcc:	e853 3f00 	ldrex	r3, [r3]
 8011bd0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	461a      	mov	r2, r3
 8011be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011be2:	643b      	str	r3, [r7, #64]	; 0x40
 8011be4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011be6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011be8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011bea:	e841 2300 	strex	r3, r2, [r1]
 8011bee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d1e6      	bne.n	8011bc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	3308      	adds	r3, #8
 8011bfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bfe:	6a3b      	ldr	r3, [r7, #32]
 8011c00:	e853 3f00 	ldrex	r3, [r3]
 8011c04:	61fb      	str	r3, [r7, #28]
   return(result);
 8011c06:	69fa      	ldr	r2, [r7, #28]
 8011c08:	4b1e      	ldr	r3, [pc, #120]	; (8011c84 <UART_EndRxTransfer+0xc8>)
 8011c0a:	4013      	ands	r3, r2
 8011c0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	3308      	adds	r3, #8
 8011c14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011c18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c1e:	e841 2300 	strex	r3, r2, [r1]
 8011c22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d1e5      	bne.n	8011bf6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c2e:	2b01      	cmp	r3, #1
 8011c30:	d118      	bne.n	8011c64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	e853 3f00 	ldrex	r3, [r3]
 8011c3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011c40:	68bb      	ldr	r3, [r7, #8]
 8011c42:	f023 0310 	bic.w	r3, r3, #16
 8011c46:	647b      	str	r3, [r7, #68]	; 0x44
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	461a      	mov	r2, r3
 8011c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c50:	61bb      	str	r3, [r7, #24]
 8011c52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c54:	6979      	ldr	r1, [r7, #20]
 8011c56:	69ba      	ldr	r2, [r7, #24]
 8011c58:	e841 2300 	strex	r3, r2, [r1]
 8011c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8011c5e:	693b      	ldr	r3, [r7, #16]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d1e6      	bne.n	8011c32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	2220      	movs	r2, #32
 8011c68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	2200      	movs	r2, #0
 8011c70:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	2200      	movs	r2, #0
 8011c76:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011c78:	bf00      	nop
 8011c7a:	3754      	adds	r7, #84	; 0x54
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c82:	4770      	bx	lr
 8011c84:	effffffe 	.word	0xeffffffe

08011c88 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011c88:	b480      	push	{r7}
 8011c8a:	b085      	sub	sp, #20
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011c96:	2b01      	cmp	r3, #1
 8011c98:	d101      	bne.n	8011c9e <HAL_UARTEx_DisableFifoMode+0x16>
 8011c9a:	2302      	movs	r3, #2
 8011c9c:	e027      	b.n	8011cee <HAL_UARTEx_DisableFifoMode+0x66>
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	2201      	movs	r2, #1
 8011ca2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	2224      	movs	r2, #36	; 0x24
 8011caa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	681a      	ldr	r2, [r3, #0]
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	f022 0201 	bic.w	r2, r2, #1
 8011cc4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011ccc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	68fa      	ldr	r2, [r7, #12]
 8011cda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	2220      	movs	r2, #32
 8011ce0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011cec:	2300      	movs	r3, #0
}
 8011cee:	4618      	mov	r0, r3
 8011cf0:	3714      	adds	r7, #20
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf8:	4770      	bx	lr

08011cfa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011cfa:	b580      	push	{r7, lr}
 8011cfc:	b084      	sub	sp, #16
 8011cfe:	af00      	add	r7, sp, #0
 8011d00:	6078      	str	r0, [r7, #4]
 8011d02:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011d0a:	2b01      	cmp	r3, #1
 8011d0c:	d101      	bne.n	8011d12 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011d0e:	2302      	movs	r3, #2
 8011d10:	e02d      	b.n	8011d6e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	2201      	movs	r2, #1
 8011d16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	2224      	movs	r2, #36	; 0x24
 8011d1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	681a      	ldr	r2, [r3, #0]
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	f022 0201 	bic.w	r2, r2, #1
 8011d38:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	689b      	ldr	r3, [r3, #8]
 8011d40:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	683a      	ldr	r2, [r7, #0]
 8011d4a:	430a      	orrs	r2, r1
 8011d4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011d4e:	6878      	ldr	r0, [r7, #4]
 8011d50:	f000 f850 	bl	8011df4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	68fa      	ldr	r2, [r7, #12]
 8011d5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	2220      	movs	r2, #32
 8011d60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2200      	movs	r2, #0
 8011d68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011d6c:	2300      	movs	r3, #0
}
 8011d6e:	4618      	mov	r0, r3
 8011d70:	3710      	adds	r7, #16
 8011d72:	46bd      	mov	sp, r7
 8011d74:	bd80      	pop	{r7, pc}

08011d76 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011d76:	b580      	push	{r7, lr}
 8011d78:	b084      	sub	sp, #16
 8011d7a:	af00      	add	r7, sp, #0
 8011d7c:	6078      	str	r0, [r7, #4]
 8011d7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011d86:	2b01      	cmp	r3, #1
 8011d88:	d101      	bne.n	8011d8e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011d8a:	2302      	movs	r3, #2
 8011d8c:	e02d      	b.n	8011dea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	2201      	movs	r2, #1
 8011d92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	2224      	movs	r2, #36	; 0x24
 8011d9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	681a      	ldr	r2, [r3, #0]
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	f022 0201 	bic.w	r2, r2, #1
 8011db4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	689b      	ldr	r3, [r3, #8]
 8011dbc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	683a      	ldr	r2, [r7, #0]
 8011dc6:	430a      	orrs	r2, r1
 8011dc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011dca:	6878      	ldr	r0, [r7, #4]
 8011dcc:	f000 f812 	bl	8011df4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	68fa      	ldr	r2, [r7, #12]
 8011dd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	2220      	movs	r2, #32
 8011ddc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	2200      	movs	r2, #0
 8011de4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011de8:	2300      	movs	r3, #0
}
 8011dea:	4618      	mov	r0, r3
 8011dec:	3710      	adds	r7, #16
 8011dee:	46bd      	mov	sp, r7
 8011df0:	bd80      	pop	{r7, pc}
	...

08011df4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011df4:	b480      	push	{r7}
 8011df6:	b085      	sub	sp, #20
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d108      	bne.n	8011e16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	2201      	movs	r2, #1
 8011e08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	2201      	movs	r2, #1
 8011e10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011e14:	e031      	b.n	8011e7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011e16:	2310      	movs	r3, #16
 8011e18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011e1a:	2310      	movs	r3, #16
 8011e1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	689b      	ldr	r3, [r3, #8]
 8011e24:	0e5b      	lsrs	r3, r3, #25
 8011e26:	b2db      	uxtb	r3, r3
 8011e28:	f003 0307 	and.w	r3, r3, #7
 8011e2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	689b      	ldr	r3, [r3, #8]
 8011e34:	0f5b      	lsrs	r3, r3, #29
 8011e36:	b2db      	uxtb	r3, r3
 8011e38:	f003 0307 	and.w	r3, r3, #7
 8011e3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011e3e:	7bbb      	ldrb	r3, [r7, #14]
 8011e40:	7b3a      	ldrb	r2, [r7, #12]
 8011e42:	4911      	ldr	r1, [pc, #68]	; (8011e88 <UARTEx_SetNbDataToProcess+0x94>)
 8011e44:	5c8a      	ldrb	r2, [r1, r2]
 8011e46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011e4a:	7b3a      	ldrb	r2, [r7, #12]
 8011e4c:	490f      	ldr	r1, [pc, #60]	; (8011e8c <UARTEx_SetNbDataToProcess+0x98>)
 8011e4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011e50:	fb93 f3f2 	sdiv	r3, r3, r2
 8011e54:	b29a      	uxth	r2, r3
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011e5c:	7bfb      	ldrb	r3, [r7, #15]
 8011e5e:	7b7a      	ldrb	r2, [r7, #13]
 8011e60:	4909      	ldr	r1, [pc, #36]	; (8011e88 <UARTEx_SetNbDataToProcess+0x94>)
 8011e62:	5c8a      	ldrb	r2, [r1, r2]
 8011e64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011e68:	7b7a      	ldrb	r2, [r7, #13]
 8011e6a:	4908      	ldr	r1, [pc, #32]	; (8011e8c <UARTEx_SetNbDataToProcess+0x98>)
 8011e6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011e6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8011e72:	b29a      	uxth	r2, r3
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011e7a:	bf00      	nop
 8011e7c:	3714      	adds	r7, #20
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e84:	4770      	bx	lr
 8011e86:	bf00      	nop
 8011e88:	08018518 	.word	0x08018518
 8011e8c:	08018520 	.word	0x08018520

08011e90 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011e90:	b084      	sub	sp, #16
 8011e92:	b480      	push	{r7}
 8011e94:	b085      	sub	sp, #20
 8011e96:	af00      	add	r7, sp, #0
 8011e98:	6078      	str	r0, [r7, #4]
 8011e9a:	f107 001c 	add.w	r0, r7, #28
 8011e9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8011ea6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8011ea8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8011eaa:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8011eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8011eae:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8011eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8011eb2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8011eb6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8011eb8:	68fa      	ldr	r2, [r7, #12]
 8011eba:	4313      	orrs	r3, r2
 8011ebc:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	685a      	ldr	r2, [r3, #4]
 8011ec2:	4b07      	ldr	r3, [pc, #28]	; (8011ee0 <SDMMC_Init+0x50>)
 8011ec4:	4013      	ands	r3, r2
 8011ec6:	68fa      	ldr	r2, [r7, #12]
 8011ec8:	431a      	orrs	r2, r3
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011ece:	2300      	movs	r3, #0
}
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	3714      	adds	r7, #20
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eda:	b004      	add	sp, #16
 8011edc:	4770      	bx	lr
 8011ede:	bf00      	nop
 8011ee0:	ffc02c00 	.word	0xffc02c00

08011ee4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011ee4:	b480      	push	{r7}
 8011ee6:	b083      	sub	sp, #12
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	370c      	adds	r7, #12
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011efc:	4770      	bx	lr

08011efe <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8011efe:	b480      	push	{r7}
 8011f00:	b083      	sub	sp, #12
 8011f02:	af00      	add	r7, sp, #0
 8011f04:	6078      	str	r0, [r7, #4]
 8011f06:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	681a      	ldr	r2, [r3, #0]
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011f12:	2300      	movs	r3, #0
}
 8011f14:	4618      	mov	r0, r3
 8011f16:	370c      	adds	r7, #12
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1e:	4770      	bx	lr

08011f20 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011f20:	b480      	push	{r7}
 8011f22:	b083      	sub	sp, #12
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	f043 0203 	orr.w	r2, r3, #3
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011f34:	2300      	movs	r3, #0
}
 8011f36:	4618      	mov	r0, r3
 8011f38:	370c      	adds	r7, #12
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f40:	4770      	bx	lr

08011f42 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011f42:	b480      	push	{r7}
 8011f44:	b083      	sub	sp, #12
 8011f46:	af00      	add	r7, sp, #0
 8011f48:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	f003 0303 	and.w	r3, r3, #3
}
 8011f52:	4618      	mov	r0, r3
 8011f54:	370c      	adds	r7, #12
 8011f56:	46bd      	mov	sp, r7
 8011f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5c:	4770      	bx	lr
	...

08011f60 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011f60:	b480      	push	{r7}
 8011f62:	b085      	sub	sp, #20
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
 8011f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011f6e:	683b      	ldr	r3, [r7, #0]
 8011f70:	681a      	ldr	r2, [r3, #0]
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011f76:	683b      	ldr	r3, [r7, #0]
 8011f78:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8011f7a:	683b      	ldr	r3, [r7, #0]
 8011f7c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011f7e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8011f80:	683b      	ldr	r3, [r7, #0]
 8011f82:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8011f84:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011f86:	683b      	ldr	r3, [r7, #0]
 8011f88:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8011f8a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011f8c:	68fa      	ldr	r2, [r7, #12]
 8011f8e:	4313      	orrs	r3, r2
 8011f90:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	68da      	ldr	r2, [r3, #12]
 8011f96:	4b06      	ldr	r3, [pc, #24]	; (8011fb0 <SDMMC_SendCommand+0x50>)
 8011f98:	4013      	ands	r3, r2
 8011f9a:	68fa      	ldr	r2, [r7, #12]
 8011f9c:	431a      	orrs	r2, r3
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011fa2:	2300      	movs	r3, #0
}
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	3714      	adds	r7, #20
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fae:	4770      	bx	lr
 8011fb0:	fffee0c0 	.word	0xfffee0c0

08011fb4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011fb4:	b480      	push	{r7}
 8011fb6:	b083      	sub	sp, #12
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	691b      	ldr	r3, [r3, #16]
 8011fc0:	b2db      	uxtb	r3, r3
}
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	370c      	adds	r7, #12
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fcc:	4770      	bx	lr

08011fce <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8011fce:	b480      	push	{r7}
 8011fd0:	b085      	sub	sp, #20
 8011fd2:	af00      	add	r7, sp, #0
 8011fd4:	6078      	str	r0, [r7, #4]
 8011fd6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	3314      	adds	r3, #20
 8011fdc:	461a      	mov	r2, r3
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	4413      	add	r3, r2
 8011fe2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	681b      	ldr	r3, [r3, #0]
}
 8011fe8:	4618      	mov	r0, r3
 8011fea:	3714      	adds	r7, #20
 8011fec:	46bd      	mov	sp, r7
 8011fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff2:	4770      	bx	lr

08011ff4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8011ff4:	b480      	push	{r7}
 8011ff6:	b085      	sub	sp, #20
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
 8011ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011ffe:	2300      	movs	r3, #0
 8012000:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012002:	683b      	ldr	r3, [r7, #0]
 8012004:	681a      	ldr	r2, [r3, #0]
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801200a:	683b      	ldr	r3, [r7, #0]
 801200c:	685a      	ldr	r2, [r3, #4]
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012012:	683b      	ldr	r3, [r7, #0]
 8012014:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8012016:	683b      	ldr	r3, [r7, #0]
 8012018:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801201a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 801201c:	683b      	ldr	r3, [r7, #0]
 801201e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8012020:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012022:	683b      	ldr	r3, [r7, #0]
 8012024:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8012026:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012028:	68fa      	ldr	r2, [r7, #12]
 801202a:	4313      	orrs	r3, r2
 801202c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012032:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	431a      	orrs	r2, r3
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801203e:	2300      	movs	r3, #0

}
 8012040:	4618      	mov	r0, r3
 8012042:	3714      	adds	r7, #20
 8012044:	46bd      	mov	sp, r7
 8012046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801204a:	4770      	bx	lr

0801204c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b088      	sub	sp, #32
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
 8012054:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8012056:	683b      	ldr	r3, [r7, #0]
 8012058:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801205a:	2310      	movs	r3, #16
 801205c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801205e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012062:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012064:	2300      	movs	r3, #0
 8012066:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801206c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801206e:	f107 0308 	add.w	r3, r7, #8
 8012072:	4619      	mov	r1, r3
 8012074:	6878      	ldr	r0, [r7, #4]
 8012076:	f7ff ff73 	bl	8011f60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801207a:	f241 3288 	movw	r2, #5000	; 0x1388
 801207e:	2110      	movs	r1, #16
 8012080:	6878      	ldr	r0, [r7, #4]
 8012082:	f000 fa5f 	bl	8012544 <SDMMC_GetCmdResp1>
 8012086:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012088:	69fb      	ldr	r3, [r7, #28]
}
 801208a:	4618      	mov	r0, r3
 801208c:	3720      	adds	r7, #32
 801208e:	46bd      	mov	sp, r7
 8012090:	bd80      	pop	{r7, pc}

08012092 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012092:	b580      	push	{r7, lr}
 8012094:	b088      	sub	sp, #32
 8012096:	af00      	add	r7, sp, #0
 8012098:	6078      	str	r0, [r7, #4]
 801209a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801209c:	683b      	ldr	r3, [r7, #0]
 801209e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80120a0:	2311      	movs	r3, #17
 80120a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80120a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80120a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120aa:	2300      	movs	r3, #0
 80120ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80120ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80120b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80120b4:	f107 0308 	add.w	r3, r7, #8
 80120b8:	4619      	mov	r1, r3
 80120ba:	6878      	ldr	r0, [r7, #4]
 80120bc:	f7ff ff50 	bl	8011f60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80120c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80120c4:	2111      	movs	r1, #17
 80120c6:	6878      	ldr	r0, [r7, #4]
 80120c8:	f000 fa3c 	bl	8012544 <SDMMC_GetCmdResp1>
 80120cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80120ce:	69fb      	ldr	r3, [r7, #28]
}
 80120d0:	4618      	mov	r0, r3
 80120d2:	3720      	adds	r7, #32
 80120d4:	46bd      	mov	sp, r7
 80120d6:	bd80      	pop	{r7, pc}

080120d8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80120d8:	b580      	push	{r7, lr}
 80120da:	b088      	sub	sp, #32
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
 80120e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80120e2:	683b      	ldr	r3, [r7, #0]
 80120e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80120e6:	2312      	movs	r3, #18
 80120e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80120ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80120ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120f0:	2300      	movs	r3, #0
 80120f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80120f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80120f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80120fa:	f107 0308 	add.w	r3, r7, #8
 80120fe:	4619      	mov	r1, r3
 8012100:	6878      	ldr	r0, [r7, #4]
 8012102:	f7ff ff2d 	bl	8011f60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012106:	f241 3288 	movw	r2, #5000	; 0x1388
 801210a:	2112      	movs	r1, #18
 801210c:	6878      	ldr	r0, [r7, #4]
 801210e:	f000 fa19 	bl	8012544 <SDMMC_GetCmdResp1>
 8012112:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012114:	69fb      	ldr	r3, [r7, #28]
}
 8012116:	4618      	mov	r0, r3
 8012118:	3720      	adds	r7, #32
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}

0801211e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801211e:	b580      	push	{r7, lr}
 8012120:	b088      	sub	sp, #32
 8012122:	af00      	add	r7, sp, #0
 8012124:	6078      	str	r0, [r7, #4]
 8012126:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012128:	683b      	ldr	r3, [r7, #0]
 801212a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801212c:	2318      	movs	r3, #24
 801212e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012130:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012134:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012136:	2300      	movs	r3, #0
 8012138:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801213a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801213e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012140:	f107 0308 	add.w	r3, r7, #8
 8012144:	4619      	mov	r1, r3
 8012146:	6878      	ldr	r0, [r7, #4]
 8012148:	f7ff ff0a 	bl	8011f60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801214c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012150:	2118      	movs	r1, #24
 8012152:	6878      	ldr	r0, [r7, #4]
 8012154:	f000 f9f6 	bl	8012544 <SDMMC_GetCmdResp1>
 8012158:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801215a:	69fb      	ldr	r3, [r7, #28]
}
 801215c:	4618      	mov	r0, r3
 801215e:	3720      	adds	r7, #32
 8012160:	46bd      	mov	sp, r7
 8012162:	bd80      	pop	{r7, pc}

08012164 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012164:	b580      	push	{r7, lr}
 8012166:	b088      	sub	sp, #32
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
 801216c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801216e:	683b      	ldr	r3, [r7, #0]
 8012170:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012172:	2319      	movs	r3, #25
 8012174:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012176:	f44f 7380 	mov.w	r3, #256	; 0x100
 801217a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801217c:	2300      	movs	r3, #0
 801217e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012184:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012186:	f107 0308 	add.w	r3, r7, #8
 801218a:	4619      	mov	r1, r3
 801218c:	6878      	ldr	r0, [r7, #4]
 801218e:	f7ff fee7 	bl	8011f60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012192:	f241 3288 	movw	r2, #5000	; 0x1388
 8012196:	2119      	movs	r1, #25
 8012198:	6878      	ldr	r0, [r7, #4]
 801219a:	f000 f9d3 	bl	8012544 <SDMMC_GetCmdResp1>
 801219e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121a0:	69fb      	ldr	r3, [r7, #28]
}
 80121a2:	4618      	mov	r0, r3
 80121a4:	3720      	adds	r7, #32
 80121a6:	46bd      	mov	sp, r7
 80121a8:	bd80      	pop	{r7, pc}
	...

080121ac <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b088      	sub	sp, #32
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80121b4:	2300      	movs	r3, #0
 80121b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80121b8:	230c      	movs	r3, #12
 80121ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121c2:	2300      	movs	r3, #0
 80121c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80121c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80121ca:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	68db      	ldr	r3, [r3, #12]
 80121d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	68db      	ldr	r3, [r3, #12]
 80121dc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80121e4:	f107 0308 	add.w	r3, r7, #8
 80121e8:	4619      	mov	r1, r3
 80121ea:	6878      	ldr	r0, [r7, #4]
 80121ec:	f7ff feb8 	bl	8011f60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80121f0:	4a0b      	ldr	r2, [pc, #44]	; (8012220 <SDMMC_CmdStopTransfer+0x74>)
 80121f2:	210c      	movs	r1, #12
 80121f4:	6878      	ldr	r0, [r7, #4]
 80121f6:	f000 f9a5 	bl	8012544 <SDMMC_GetCmdResp1>
 80121fa:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	68db      	ldr	r3, [r3, #12]
 8012200:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012208:	69fb      	ldr	r3, [r7, #28]
 801220a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801220e:	d101      	bne.n	8012214 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8012210:	2300      	movs	r3, #0
 8012212:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8012214:	69fb      	ldr	r3, [r7, #28]
}
 8012216:	4618      	mov	r0, r3
 8012218:	3720      	adds	r7, #32
 801221a:	46bd      	mov	sp, r7
 801221c:	bd80      	pop	{r7, pc}
 801221e:	bf00      	nop
 8012220:	05f5e100 	.word	0x05f5e100

08012224 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8012224:	b580      	push	{r7, lr}
 8012226:	b088      	sub	sp, #32
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
 801222c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801222e:	683b      	ldr	r3, [r7, #0]
 8012230:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8012232:	2307      	movs	r3, #7
 8012234:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012236:	f44f 7380 	mov.w	r3, #256	; 0x100
 801223a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801223c:	2300      	movs	r3, #0
 801223e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012244:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012246:	f107 0308 	add.w	r3, r7, #8
 801224a:	4619      	mov	r1, r3
 801224c:	6878      	ldr	r0, [r7, #4]
 801224e:	f7ff fe87 	bl	8011f60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8012252:	f241 3288 	movw	r2, #5000	; 0x1388
 8012256:	2107      	movs	r1, #7
 8012258:	6878      	ldr	r0, [r7, #4]
 801225a:	f000 f973 	bl	8012544 <SDMMC_GetCmdResp1>
 801225e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012260:	69fb      	ldr	r3, [r7, #28]
}
 8012262:	4618      	mov	r0, r3
 8012264:	3720      	adds	r7, #32
 8012266:	46bd      	mov	sp, r7
 8012268:	bd80      	pop	{r7, pc}

0801226a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801226a:	b580      	push	{r7, lr}
 801226c:	b088      	sub	sp, #32
 801226e:	af00      	add	r7, sp, #0
 8012270:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012272:	2300      	movs	r3, #0
 8012274:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8012276:	2300      	movs	r3, #0
 8012278:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801227a:	2300      	movs	r3, #0
 801227c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801227e:	2300      	movs	r3, #0
 8012280:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012286:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012288:	f107 0308 	add.w	r3, r7, #8
 801228c:	4619      	mov	r1, r3
 801228e:	6878      	ldr	r0, [r7, #4]
 8012290:	f7ff fe66 	bl	8011f60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012294:	6878      	ldr	r0, [r7, #4]
 8012296:	f000 fb97 	bl	80129c8 <SDMMC_GetCmdError>
 801229a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801229c:	69fb      	ldr	r3, [r7, #28]
}
 801229e:	4618      	mov	r0, r3
 80122a0:	3720      	adds	r7, #32
 80122a2:	46bd      	mov	sp, r7
 80122a4:	bd80      	pop	{r7, pc}

080122a6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80122a6:	b580      	push	{r7, lr}
 80122a8:	b088      	sub	sp, #32
 80122aa:	af00      	add	r7, sp, #0
 80122ac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80122ae:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80122b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80122b4:	2308      	movs	r3, #8
 80122b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80122b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80122bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80122be:	2300      	movs	r3, #0
 80122c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80122c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80122c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80122c8:	f107 0308 	add.w	r3, r7, #8
 80122cc:	4619      	mov	r1, r3
 80122ce:	6878      	ldr	r0, [r7, #4]
 80122d0:	f7ff fe46 	bl	8011f60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80122d4:	6878      	ldr	r0, [r7, #4]
 80122d6:	f000 fb29 	bl	801292c <SDMMC_GetCmdResp7>
 80122da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80122dc:	69fb      	ldr	r3, [r7, #28]
}
 80122de:	4618      	mov	r0, r3
 80122e0:	3720      	adds	r7, #32
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd80      	pop	{r7, pc}

080122e6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80122e6:	b580      	push	{r7, lr}
 80122e8:	b088      	sub	sp, #32
 80122ea:	af00      	add	r7, sp, #0
 80122ec:	6078      	str	r0, [r7, #4]
 80122ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80122f0:	683b      	ldr	r3, [r7, #0]
 80122f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80122f4:	2337      	movs	r3, #55	; 0x37
 80122f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80122f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80122fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80122fe:	2300      	movs	r3, #0
 8012300:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012306:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012308:	f107 0308 	add.w	r3, r7, #8
 801230c:	4619      	mov	r1, r3
 801230e:	6878      	ldr	r0, [r7, #4]
 8012310:	f7ff fe26 	bl	8011f60 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012314:	f241 3288 	movw	r2, #5000	; 0x1388
 8012318:	2137      	movs	r1, #55	; 0x37
 801231a:	6878      	ldr	r0, [r7, #4]
 801231c:	f000 f912 	bl	8012544 <SDMMC_GetCmdResp1>
 8012320:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012322:	69fb      	ldr	r3, [r7, #28]
}
 8012324:	4618      	mov	r0, r3
 8012326:	3720      	adds	r7, #32
 8012328:	46bd      	mov	sp, r7
 801232a:	bd80      	pop	{r7, pc}

0801232c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b088      	sub	sp, #32
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
 8012334:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012336:	683b      	ldr	r3, [r7, #0]
 8012338:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801233a:	2329      	movs	r3, #41	; 0x29
 801233c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801233e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012342:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012344:	2300      	movs	r3, #0
 8012346:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801234c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801234e:	f107 0308 	add.w	r3, r7, #8
 8012352:	4619      	mov	r1, r3
 8012354:	6878      	ldr	r0, [r7, #4]
 8012356:	f7ff fe03 	bl	8011f60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801235a:	6878      	ldr	r0, [r7, #4]
 801235c:	f000 fa2e 	bl	80127bc <SDMMC_GetCmdResp3>
 8012360:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012362:	69fb      	ldr	r3, [r7, #28]
}
 8012364:	4618      	mov	r0, r3
 8012366:	3720      	adds	r7, #32
 8012368:	46bd      	mov	sp, r7
 801236a:	bd80      	pop	{r7, pc}

0801236c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b088      	sub	sp, #32
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
 8012374:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012376:	683b      	ldr	r3, [r7, #0]
 8012378:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801237a:	2306      	movs	r3, #6
 801237c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801237e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012382:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012384:	2300      	movs	r3, #0
 8012386:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801238c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801238e:	f107 0308 	add.w	r3, r7, #8
 8012392:	4619      	mov	r1, r3
 8012394:	6878      	ldr	r0, [r7, #4]
 8012396:	f7ff fde3 	bl	8011f60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801239a:	f241 3288 	movw	r2, #5000	; 0x1388
 801239e:	2106      	movs	r1, #6
 80123a0:	6878      	ldr	r0, [r7, #4]
 80123a2:	f000 f8cf 	bl	8012544 <SDMMC_GetCmdResp1>
 80123a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123a8:	69fb      	ldr	r3, [r7, #28]
}
 80123aa:	4618      	mov	r0, r3
 80123ac:	3720      	adds	r7, #32
 80123ae:	46bd      	mov	sp, r7
 80123b0:	bd80      	pop	{r7, pc}

080123b2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80123b2:	b580      	push	{r7, lr}
 80123b4:	b088      	sub	sp, #32
 80123b6:	af00      	add	r7, sp, #0
 80123b8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80123ba:	2300      	movs	r3, #0
 80123bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80123be:	2333      	movs	r3, #51	; 0x33
 80123c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80123c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80123c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80123c8:	2300      	movs	r3, #0
 80123ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80123cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80123d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80123d2:	f107 0308 	add.w	r3, r7, #8
 80123d6:	4619      	mov	r1, r3
 80123d8:	6878      	ldr	r0, [r7, #4]
 80123da:	f7ff fdc1 	bl	8011f60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80123de:	f241 3288 	movw	r2, #5000	; 0x1388
 80123e2:	2133      	movs	r1, #51	; 0x33
 80123e4:	6878      	ldr	r0, [r7, #4]
 80123e6:	f000 f8ad 	bl	8012544 <SDMMC_GetCmdResp1>
 80123ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123ec:	69fb      	ldr	r3, [r7, #28]
}
 80123ee:	4618      	mov	r0, r3
 80123f0:	3720      	adds	r7, #32
 80123f2:	46bd      	mov	sp, r7
 80123f4:	bd80      	pop	{r7, pc}

080123f6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80123f6:	b580      	push	{r7, lr}
 80123f8:	b088      	sub	sp, #32
 80123fa:	af00      	add	r7, sp, #0
 80123fc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80123fe:	2300      	movs	r3, #0
 8012400:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012402:	2302      	movs	r3, #2
 8012404:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012406:	f44f 7340 	mov.w	r3, #768	; 0x300
 801240a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801240c:	2300      	movs	r3, #0
 801240e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012414:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012416:	f107 0308 	add.w	r3, r7, #8
 801241a:	4619      	mov	r1, r3
 801241c:	6878      	ldr	r0, [r7, #4]
 801241e:	f7ff fd9f 	bl	8011f60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012422:	6878      	ldr	r0, [r7, #4]
 8012424:	f000 f980 	bl	8012728 <SDMMC_GetCmdResp2>
 8012428:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801242a:	69fb      	ldr	r3, [r7, #28]
}
 801242c:	4618      	mov	r0, r3
 801242e:	3720      	adds	r7, #32
 8012430:	46bd      	mov	sp, r7
 8012432:	bd80      	pop	{r7, pc}

08012434 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b088      	sub	sp, #32
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
 801243c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801243e:	683b      	ldr	r3, [r7, #0]
 8012440:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012442:	2309      	movs	r3, #9
 8012444:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012446:	f44f 7340 	mov.w	r3, #768	; 0x300
 801244a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801244c:	2300      	movs	r3, #0
 801244e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012454:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012456:	f107 0308 	add.w	r3, r7, #8
 801245a:	4619      	mov	r1, r3
 801245c:	6878      	ldr	r0, [r7, #4]
 801245e:	f7ff fd7f 	bl	8011f60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012462:	6878      	ldr	r0, [r7, #4]
 8012464:	f000 f960 	bl	8012728 <SDMMC_GetCmdResp2>
 8012468:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801246a:	69fb      	ldr	r3, [r7, #28]
}
 801246c:	4618      	mov	r0, r3
 801246e:	3720      	adds	r7, #32
 8012470:	46bd      	mov	sp, r7
 8012472:	bd80      	pop	{r7, pc}

08012474 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b088      	sub	sp, #32
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
 801247c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801247e:	2300      	movs	r3, #0
 8012480:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012482:	2303      	movs	r3, #3
 8012484:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012486:	f44f 7380 	mov.w	r3, #256	; 0x100
 801248a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801248c:	2300      	movs	r3, #0
 801248e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012494:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012496:	f107 0308 	add.w	r3, r7, #8
 801249a:	4619      	mov	r1, r3
 801249c:	6878      	ldr	r0, [r7, #4]
 801249e:	f7ff fd5f 	bl	8011f60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80124a2:	683a      	ldr	r2, [r7, #0]
 80124a4:	2103      	movs	r1, #3
 80124a6:	6878      	ldr	r0, [r7, #4]
 80124a8:	f000 f9c8 	bl	801283c <SDMMC_GetCmdResp6>
 80124ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124ae:	69fb      	ldr	r3, [r7, #28]
}
 80124b0:	4618      	mov	r0, r3
 80124b2:	3720      	adds	r7, #32
 80124b4:	46bd      	mov	sp, r7
 80124b6:	bd80      	pop	{r7, pc}

080124b8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b088      	sub	sp, #32
 80124bc:	af00      	add	r7, sp, #0
 80124be:	6078      	str	r0, [r7, #4]
 80124c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80124c2:	683b      	ldr	r3, [r7, #0]
 80124c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80124c6:	230d      	movs	r3, #13
 80124c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80124ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80124ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124d0:	2300      	movs	r3, #0
 80124d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80124d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80124d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80124da:	f107 0308 	add.w	r3, r7, #8
 80124de:	4619      	mov	r1, r3
 80124e0:	6878      	ldr	r0, [r7, #4]
 80124e2:	f7ff fd3d 	bl	8011f60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80124e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80124ea:	210d      	movs	r1, #13
 80124ec:	6878      	ldr	r0, [r7, #4]
 80124ee:	f000 f829 	bl	8012544 <SDMMC_GetCmdResp1>
 80124f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124f4:	69fb      	ldr	r3, [r7, #28]
}
 80124f6:	4618      	mov	r0, r3
 80124f8:	3720      	adds	r7, #32
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd80      	pop	{r7, pc}

080124fe <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80124fe:	b580      	push	{r7, lr}
 8012500:	b088      	sub	sp, #32
 8012502:	af00      	add	r7, sp, #0
 8012504:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012506:	2300      	movs	r3, #0
 8012508:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801250a:	230d      	movs	r3, #13
 801250c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801250e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012512:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012514:	2300      	movs	r3, #0
 8012516:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801251c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801251e:	f107 0308 	add.w	r3, r7, #8
 8012522:	4619      	mov	r1, r3
 8012524:	6878      	ldr	r0, [r7, #4]
 8012526:	f7ff fd1b 	bl	8011f60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801252a:	f241 3288 	movw	r2, #5000	; 0x1388
 801252e:	210d      	movs	r1, #13
 8012530:	6878      	ldr	r0, [r7, #4]
 8012532:	f000 f807 	bl	8012544 <SDMMC_GetCmdResp1>
 8012536:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012538:	69fb      	ldr	r3, [r7, #28]
}
 801253a:	4618      	mov	r0, r3
 801253c:	3720      	adds	r7, #32
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}
	...

08012544 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012544:	b580      	push	{r7, lr}
 8012546:	b088      	sub	sp, #32
 8012548:	af00      	add	r7, sp, #0
 801254a:	60f8      	str	r0, [r7, #12]
 801254c:	460b      	mov	r3, r1
 801254e:	607a      	str	r2, [r7, #4]
 8012550:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8012552:	4b70      	ldr	r3, [pc, #448]	; (8012714 <SDMMC_GetCmdResp1+0x1d0>)
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	4a70      	ldr	r2, [pc, #448]	; (8012718 <SDMMC_GetCmdResp1+0x1d4>)
 8012558:	fba2 2303 	umull	r2, r3, r2, r3
 801255c:	0a5a      	lsrs	r2, r3, #9
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	fb02 f303 	mul.w	r3, r2, r3
 8012564:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012566:	69fb      	ldr	r3, [r7, #28]
 8012568:	1e5a      	subs	r2, r3, #1
 801256a:	61fa      	str	r2, [r7, #28]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d102      	bne.n	8012576 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012570:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012574:	e0c9      	b.n	801270a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801257a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 801257c:	69ba      	ldr	r2, [r7, #24]
 801257e:	4b67      	ldr	r3, [pc, #412]	; (801271c <SDMMC_GetCmdResp1+0x1d8>)
 8012580:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012582:	2b00      	cmp	r3, #0
 8012584:	d0ef      	beq.n	8012566 <SDMMC_GetCmdResp1+0x22>
 8012586:	69bb      	ldr	r3, [r7, #24]
 8012588:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801258c:	2b00      	cmp	r3, #0
 801258e:	d1ea      	bne.n	8012566 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012594:	f003 0304 	and.w	r3, r3, #4
 8012598:	2b00      	cmp	r3, #0
 801259a:	d004      	beq.n	80125a6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	2204      	movs	r2, #4
 80125a0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80125a2:	2304      	movs	r3, #4
 80125a4:	e0b1      	b.n	801270a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125aa:	f003 0301 	and.w	r3, r3, #1
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d004      	beq.n	80125bc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	2201      	movs	r2, #1
 80125b6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80125b8:	2301      	movs	r3, #1
 80125ba:	e0a6      	b.n	801270a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	4a58      	ldr	r2, [pc, #352]	; (8012720 <SDMMC_GetCmdResp1+0x1dc>)
 80125c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80125c2:	68f8      	ldr	r0, [r7, #12]
 80125c4:	f7ff fcf6 	bl	8011fb4 <SDMMC_GetCommandResponse>
 80125c8:	4603      	mov	r3, r0
 80125ca:	461a      	mov	r2, r3
 80125cc:	7afb      	ldrb	r3, [r7, #11]
 80125ce:	4293      	cmp	r3, r2
 80125d0:	d001      	beq.n	80125d6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80125d2:	2301      	movs	r3, #1
 80125d4:	e099      	b.n	801270a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80125d6:	2100      	movs	r1, #0
 80125d8:	68f8      	ldr	r0, [r7, #12]
 80125da:	f7ff fcf8 	bl	8011fce <SDMMC_GetResponse>
 80125de:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80125e0:	697a      	ldr	r2, [r7, #20]
 80125e2:	4b50      	ldr	r3, [pc, #320]	; (8012724 <SDMMC_GetCmdResp1+0x1e0>)
 80125e4:	4013      	ands	r3, r2
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d101      	bne.n	80125ee <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80125ea:	2300      	movs	r3, #0
 80125ec:	e08d      	b.n	801270a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80125ee:	697b      	ldr	r3, [r7, #20]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	da02      	bge.n	80125fa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80125f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80125f8:	e087      	b.n	801270a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80125fa:	697b      	ldr	r3, [r7, #20]
 80125fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012600:	2b00      	cmp	r3, #0
 8012602:	d001      	beq.n	8012608 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012604:	2340      	movs	r3, #64	; 0x40
 8012606:	e080      	b.n	801270a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012608:	697b      	ldr	r3, [r7, #20]
 801260a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801260e:	2b00      	cmp	r3, #0
 8012610:	d001      	beq.n	8012616 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012612:	2380      	movs	r3, #128	; 0x80
 8012614:	e079      	b.n	801270a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012616:	697b      	ldr	r3, [r7, #20]
 8012618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801261c:	2b00      	cmp	r3, #0
 801261e:	d002      	beq.n	8012626 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012620:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012624:	e071      	b.n	801270a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012626:	697b      	ldr	r3, [r7, #20]
 8012628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801262c:	2b00      	cmp	r3, #0
 801262e:	d002      	beq.n	8012636 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012630:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012634:	e069      	b.n	801270a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012636:	697b      	ldr	r3, [r7, #20]
 8012638:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801263c:	2b00      	cmp	r3, #0
 801263e:	d002      	beq.n	8012646 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012640:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012644:	e061      	b.n	801270a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012646:	697b      	ldr	r3, [r7, #20]
 8012648:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801264c:	2b00      	cmp	r3, #0
 801264e:	d002      	beq.n	8012656 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012650:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012654:	e059      	b.n	801270a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012656:	697b      	ldr	r3, [r7, #20]
 8012658:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801265c:	2b00      	cmp	r3, #0
 801265e:	d002      	beq.n	8012666 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012664:	e051      	b.n	801270a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012666:	697b      	ldr	r3, [r7, #20]
 8012668:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801266c:	2b00      	cmp	r3, #0
 801266e:	d002      	beq.n	8012676 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012670:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012674:	e049      	b.n	801270a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012676:	697b      	ldr	r3, [r7, #20]
 8012678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801267c:	2b00      	cmp	r3, #0
 801267e:	d002      	beq.n	8012686 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012680:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012684:	e041      	b.n	801270a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012686:	697b      	ldr	r3, [r7, #20]
 8012688:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801268c:	2b00      	cmp	r3, #0
 801268e:	d002      	beq.n	8012696 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012690:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012694:	e039      	b.n	801270a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012696:	697b      	ldr	r3, [r7, #20]
 8012698:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801269c:	2b00      	cmp	r3, #0
 801269e:	d002      	beq.n	80126a6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80126a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80126a4:	e031      	b.n	801270a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80126a6:	697b      	ldr	r3, [r7, #20]
 80126a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d002      	beq.n	80126b6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80126b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80126b4:	e029      	b.n	801270a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80126b6:	697b      	ldr	r3, [r7, #20]
 80126b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d002      	beq.n	80126c6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80126c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80126c4:	e021      	b.n	801270a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80126c6:	697b      	ldr	r3, [r7, #20]
 80126c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d002      	beq.n	80126d6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80126d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80126d4:	e019      	b.n	801270a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80126d6:	697b      	ldr	r3, [r7, #20]
 80126d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d002      	beq.n	80126e6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80126e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80126e4:	e011      	b.n	801270a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80126e6:	697b      	ldr	r3, [r7, #20]
 80126e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d002      	beq.n	80126f6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80126f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80126f4:	e009      	b.n	801270a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80126f6:	697b      	ldr	r3, [r7, #20]
 80126f8:	f003 0308 	and.w	r3, r3, #8
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d002      	beq.n	8012706 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012700:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012704:	e001      	b.n	801270a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012706:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801270a:	4618      	mov	r0, r3
 801270c:	3720      	adds	r7, #32
 801270e:	46bd      	mov	sp, r7
 8012710:	bd80      	pop	{r7, pc}
 8012712:	bf00      	nop
 8012714:	24000000 	.word	0x24000000
 8012718:	10624dd3 	.word	0x10624dd3
 801271c:	00200045 	.word	0x00200045
 8012720:	002000c5 	.word	0x002000c5
 8012724:	fdffe008 	.word	0xfdffe008

08012728 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012728:	b480      	push	{r7}
 801272a:	b085      	sub	sp, #20
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012730:	4b1f      	ldr	r3, [pc, #124]	; (80127b0 <SDMMC_GetCmdResp2+0x88>)
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	4a1f      	ldr	r2, [pc, #124]	; (80127b4 <SDMMC_GetCmdResp2+0x8c>)
 8012736:	fba2 2303 	umull	r2, r3, r2, r3
 801273a:	0a5b      	lsrs	r3, r3, #9
 801273c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012740:	fb02 f303 	mul.w	r3, r2, r3
 8012744:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	1e5a      	subs	r2, r3, #1
 801274a:	60fa      	str	r2, [r7, #12]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d102      	bne.n	8012756 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012750:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012754:	e026      	b.n	80127a4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801275a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801275c:	68bb      	ldr	r3, [r7, #8]
 801275e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012762:	2b00      	cmp	r3, #0
 8012764:	d0ef      	beq.n	8012746 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012766:	68bb      	ldr	r3, [r7, #8]
 8012768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801276c:	2b00      	cmp	r3, #0
 801276e:	d1ea      	bne.n	8012746 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012774:	f003 0304 	and.w	r3, r3, #4
 8012778:	2b00      	cmp	r3, #0
 801277a:	d004      	beq.n	8012786 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	2204      	movs	r2, #4
 8012780:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012782:	2304      	movs	r3, #4
 8012784:	e00e      	b.n	80127a4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801278a:	f003 0301 	and.w	r3, r3, #1
 801278e:	2b00      	cmp	r3, #0
 8012790:	d004      	beq.n	801279c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	2201      	movs	r2, #1
 8012796:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012798:	2301      	movs	r3, #1
 801279a:	e003      	b.n	80127a4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	4a06      	ldr	r2, [pc, #24]	; (80127b8 <SDMMC_GetCmdResp2+0x90>)
 80127a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80127a2:	2300      	movs	r3, #0
}
 80127a4:	4618      	mov	r0, r3
 80127a6:	3714      	adds	r7, #20
 80127a8:	46bd      	mov	sp, r7
 80127aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ae:	4770      	bx	lr
 80127b0:	24000000 	.word	0x24000000
 80127b4:	10624dd3 	.word	0x10624dd3
 80127b8:	002000c5 	.word	0x002000c5

080127bc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80127bc:	b480      	push	{r7}
 80127be:	b085      	sub	sp, #20
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80127c4:	4b1a      	ldr	r3, [pc, #104]	; (8012830 <SDMMC_GetCmdResp3+0x74>)
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	4a1a      	ldr	r2, [pc, #104]	; (8012834 <SDMMC_GetCmdResp3+0x78>)
 80127ca:	fba2 2303 	umull	r2, r3, r2, r3
 80127ce:	0a5b      	lsrs	r3, r3, #9
 80127d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80127d4:	fb02 f303 	mul.w	r3, r2, r3
 80127d8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	1e5a      	subs	r2, r3, #1
 80127de:	60fa      	str	r2, [r7, #12]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d102      	bne.n	80127ea <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80127e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80127e8:	e01b      	b.n	8012822 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127ee:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80127f0:	68bb      	ldr	r3, [r7, #8]
 80127f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d0ef      	beq.n	80127da <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80127fa:	68bb      	ldr	r3, [r7, #8]
 80127fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012800:	2b00      	cmp	r3, #0
 8012802:	d1ea      	bne.n	80127da <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012808:	f003 0304 	and.w	r3, r3, #4
 801280c:	2b00      	cmp	r3, #0
 801280e:	d004      	beq.n	801281a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	2204      	movs	r2, #4
 8012814:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012816:	2304      	movs	r3, #4
 8012818:	e003      	b.n	8012822 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	4a06      	ldr	r2, [pc, #24]	; (8012838 <SDMMC_GetCmdResp3+0x7c>)
 801281e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012820:	2300      	movs	r3, #0
}
 8012822:	4618      	mov	r0, r3
 8012824:	3714      	adds	r7, #20
 8012826:	46bd      	mov	sp, r7
 8012828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801282c:	4770      	bx	lr
 801282e:	bf00      	nop
 8012830:	24000000 	.word	0x24000000
 8012834:	10624dd3 	.word	0x10624dd3
 8012838:	002000c5 	.word	0x002000c5

0801283c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801283c:	b580      	push	{r7, lr}
 801283e:	b088      	sub	sp, #32
 8012840:	af00      	add	r7, sp, #0
 8012842:	60f8      	str	r0, [r7, #12]
 8012844:	460b      	mov	r3, r1
 8012846:	607a      	str	r2, [r7, #4]
 8012848:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801284a:	4b35      	ldr	r3, [pc, #212]	; (8012920 <SDMMC_GetCmdResp6+0xe4>)
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	4a35      	ldr	r2, [pc, #212]	; (8012924 <SDMMC_GetCmdResp6+0xe8>)
 8012850:	fba2 2303 	umull	r2, r3, r2, r3
 8012854:	0a5b      	lsrs	r3, r3, #9
 8012856:	f241 3288 	movw	r2, #5000	; 0x1388
 801285a:	fb02 f303 	mul.w	r3, r2, r3
 801285e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012860:	69fb      	ldr	r3, [r7, #28]
 8012862:	1e5a      	subs	r2, r3, #1
 8012864:	61fa      	str	r2, [r7, #28]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d102      	bne.n	8012870 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801286a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801286e:	e052      	b.n	8012916 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012874:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012876:	69bb      	ldr	r3, [r7, #24]
 8012878:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801287c:	2b00      	cmp	r3, #0
 801287e:	d0ef      	beq.n	8012860 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012880:	69bb      	ldr	r3, [r7, #24]
 8012882:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012886:	2b00      	cmp	r3, #0
 8012888:	d1ea      	bne.n	8012860 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801288e:	f003 0304 	and.w	r3, r3, #4
 8012892:	2b00      	cmp	r3, #0
 8012894:	d004      	beq.n	80128a0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	2204      	movs	r2, #4
 801289a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801289c:	2304      	movs	r3, #4
 801289e:	e03a      	b.n	8012916 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128a4:	f003 0301 	and.w	r3, r3, #1
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d004      	beq.n	80128b6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	2201      	movs	r2, #1
 80128b0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80128b2:	2301      	movs	r3, #1
 80128b4:	e02f      	b.n	8012916 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80128b6:	68f8      	ldr	r0, [r7, #12]
 80128b8:	f7ff fb7c 	bl	8011fb4 <SDMMC_GetCommandResponse>
 80128bc:	4603      	mov	r3, r0
 80128be:	461a      	mov	r2, r3
 80128c0:	7afb      	ldrb	r3, [r7, #11]
 80128c2:	4293      	cmp	r3, r2
 80128c4:	d001      	beq.n	80128ca <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80128c6:	2301      	movs	r3, #1
 80128c8:	e025      	b.n	8012916 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	4a16      	ldr	r2, [pc, #88]	; (8012928 <SDMMC_GetCmdResp6+0xec>)
 80128ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80128d0:	2100      	movs	r1, #0
 80128d2:	68f8      	ldr	r0, [r7, #12]
 80128d4:	f7ff fb7b 	bl	8011fce <SDMMC_GetResponse>
 80128d8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80128da:	697b      	ldr	r3, [r7, #20]
 80128dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d106      	bne.n	80128f2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80128e4:	697b      	ldr	r3, [r7, #20]
 80128e6:	0c1b      	lsrs	r3, r3, #16
 80128e8:	b29a      	uxth	r2, r3
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80128ee:	2300      	movs	r3, #0
 80128f0:	e011      	b.n	8012916 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80128f2:	697b      	ldr	r3, [r7, #20]
 80128f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d002      	beq.n	8012902 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80128fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012900:	e009      	b.n	8012916 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012902:	697b      	ldr	r3, [r7, #20]
 8012904:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012908:	2b00      	cmp	r3, #0
 801290a:	d002      	beq.n	8012912 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801290c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012910:	e001      	b.n	8012916 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012912:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012916:	4618      	mov	r0, r3
 8012918:	3720      	adds	r7, #32
 801291a:	46bd      	mov	sp, r7
 801291c:	bd80      	pop	{r7, pc}
 801291e:	bf00      	nop
 8012920:	24000000 	.word	0x24000000
 8012924:	10624dd3 	.word	0x10624dd3
 8012928:	002000c5 	.word	0x002000c5

0801292c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 801292c:	b480      	push	{r7}
 801292e:	b085      	sub	sp, #20
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012934:	4b22      	ldr	r3, [pc, #136]	; (80129c0 <SDMMC_GetCmdResp7+0x94>)
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	4a22      	ldr	r2, [pc, #136]	; (80129c4 <SDMMC_GetCmdResp7+0x98>)
 801293a:	fba2 2303 	umull	r2, r3, r2, r3
 801293e:	0a5b      	lsrs	r3, r3, #9
 8012940:	f241 3288 	movw	r2, #5000	; 0x1388
 8012944:	fb02 f303 	mul.w	r3, r2, r3
 8012948:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	1e5a      	subs	r2, r3, #1
 801294e:	60fa      	str	r2, [r7, #12]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d102      	bne.n	801295a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012954:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012958:	e02c      	b.n	80129b4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801295e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012960:	68bb      	ldr	r3, [r7, #8]
 8012962:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012966:	2b00      	cmp	r3, #0
 8012968:	d0ef      	beq.n	801294a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801296a:	68bb      	ldr	r3, [r7, #8]
 801296c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012970:	2b00      	cmp	r3, #0
 8012972:	d1ea      	bne.n	801294a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012978:	f003 0304 	and.w	r3, r3, #4
 801297c:	2b00      	cmp	r3, #0
 801297e:	d004      	beq.n	801298a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	2204      	movs	r2, #4
 8012984:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012986:	2304      	movs	r3, #4
 8012988:	e014      	b.n	80129b4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801298e:	f003 0301 	and.w	r3, r3, #1
 8012992:	2b00      	cmp	r3, #0
 8012994:	d004      	beq.n	80129a0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	2201      	movs	r2, #1
 801299a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801299c:	2301      	movs	r3, #1
 801299e:	e009      	b.n	80129b4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d002      	beq.n	80129b2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	2240      	movs	r2, #64	; 0x40
 80129b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80129b2:	2300      	movs	r3, #0

}
 80129b4:	4618      	mov	r0, r3
 80129b6:	3714      	adds	r7, #20
 80129b8:	46bd      	mov	sp, r7
 80129ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129be:	4770      	bx	lr
 80129c0:	24000000 	.word	0x24000000
 80129c4:	10624dd3 	.word	0x10624dd3

080129c8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80129c8:	b480      	push	{r7}
 80129ca:	b085      	sub	sp, #20
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80129d0:	4b11      	ldr	r3, [pc, #68]	; (8012a18 <SDMMC_GetCmdError+0x50>)
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	4a11      	ldr	r2, [pc, #68]	; (8012a1c <SDMMC_GetCmdError+0x54>)
 80129d6:	fba2 2303 	umull	r2, r3, r2, r3
 80129da:	0a5b      	lsrs	r3, r3, #9
 80129dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80129e0:	fb02 f303 	mul.w	r3, r2, r3
 80129e4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	1e5a      	subs	r2, r3, #1
 80129ea:	60fa      	str	r2, [r7, #12]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d102      	bne.n	80129f6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80129f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80129f4:	e009      	b.n	8012a0a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d0f1      	beq.n	80129e6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	4a06      	ldr	r2, [pc, #24]	; (8012a20 <SDMMC_GetCmdError+0x58>)
 8012a06:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8012a08:	2300      	movs	r3, #0
}
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	3714      	adds	r7, #20
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a14:	4770      	bx	lr
 8012a16:	bf00      	nop
 8012a18:	24000000 	.word	0x24000000
 8012a1c:	10624dd3 	.word	0x10624dd3
 8012a20:	002000c5 	.word	0x002000c5

08012a24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012a24:	b084      	sub	sp, #16
 8012a26:	b580      	push	{r7, lr}
 8012a28:	b084      	sub	sp, #16
 8012a2a:	af00      	add	r7, sp, #0
 8012a2c:	6078      	str	r0, [r7, #4]
 8012a2e:	f107 001c 	add.w	r0, r7, #28
 8012a32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a38:	2b01      	cmp	r3, #1
 8012a3a:	d120      	bne.n	8012a7e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	68da      	ldr	r2, [r3, #12]
 8012a4c:	4b2a      	ldr	r3, [pc, #168]	; (8012af8 <USB_CoreInit+0xd4>)
 8012a4e:	4013      	ands	r3, r2
 8012a50:	687a      	ldr	r2, [r7, #4]
 8012a52:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	68db      	ldr	r3, [r3, #12]
 8012a58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a62:	2b01      	cmp	r3, #1
 8012a64:	d105      	bne.n	8012a72 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	68db      	ldr	r3, [r3, #12]
 8012a6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012a72:	6878      	ldr	r0, [r7, #4]
 8012a74:	f001 faf8 	bl	8014068 <USB_CoreReset>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	73fb      	strb	r3, [r7, #15]
 8012a7c:	e01a      	b.n	8012ab4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	68db      	ldr	r3, [r3, #12]
 8012a82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012a8a:	6878      	ldr	r0, [r7, #4]
 8012a8c:	f001 faec 	bl	8014068 <USB_CoreReset>
 8012a90:	4603      	mov	r3, r0
 8012a92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d106      	bne.n	8012aa8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	639a      	str	r2, [r3, #56]	; 0x38
 8012aa6:	e005      	b.n	8012ab4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012aac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ab6:	2b01      	cmp	r3, #1
 8012ab8:	d116      	bne.n	8012ae8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012abe:	b29a      	uxth	r2, r3
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012ac8:	4b0c      	ldr	r3, [pc, #48]	; (8012afc <USB_CoreInit+0xd8>)
 8012aca:	4313      	orrs	r3, r2
 8012acc:	687a      	ldr	r2, [r7, #4]
 8012ace:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	689b      	ldr	r3, [r3, #8]
 8012ad4:	f043 0206 	orr.w	r2, r3, #6
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	689b      	ldr	r3, [r3, #8]
 8012ae0:	f043 0220 	orr.w	r2, r3, #32
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012aea:	4618      	mov	r0, r3
 8012aec:	3710      	adds	r7, #16
 8012aee:	46bd      	mov	sp, r7
 8012af0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012af4:	b004      	add	sp, #16
 8012af6:	4770      	bx	lr
 8012af8:	ffbdffbf 	.word	0xffbdffbf
 8012afc:	03ee0000 	.word	0x03ee0000

08012b00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012b00:	b480      	push	{r7}
 8012b02:	b087      	sub	sp, #28
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	60f8      	str	r0, [r7, #12]
 8012b08:	60b9      	str	r1, [r7, #8]
 8012b0a:	4613      	mov	r3, r2
 8012b0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012b0e:	79fb      	ldrb	r3, [r7, #7]
 8012b10:	2b02      	cmp	r3, #2
 8012b12:	d165      	bne.n	8012be0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012b14:	68bb      	ldr	r3, [r7, #8]
 8012b16:	4a41      	ldr	r2, [pc, #260]	; (8012c1c <USB_SetTurnaroundTime+0x11c>)
 8012b18:	4293      	cmp	r3, r2
 8012b1a:	d906      	bls.n	8012b2a <USB_SetTurnaroundTime+0x2a>
 8012b1c:	68bb      	ldr	r3, [r7, #8]
 8012b1e:	4a40      	ldr	r2, [pc, #256]	; (8012c20 <USB_SetTurnaroundTime+0x120>)
 8012b20:	4293      	cmp	r3, r2
 8012b22:	d202      	bcs.n	8012b2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012b24:	230f      	movs	r3, #15
 8012b26:	617b      	str	r3, [r7, #20]
 8012b28:	e062      	b.n	8012bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012b2a:	68bb      	ldr	r3, [r7, #8]
 8012b2c:	4a3c      	ldr	r2, [pc, #240]	; (8012c20 <USB_SetTurnaroundTime+0x120>)
 8012b2e:	4293      	cmp	r3, r2
 8012b30:	d306      	bcc.n	8012b40 <USB_SetTurnaroundTime+0x40>
 8012b32:	68bb      	ldr	r3, [r7, #8]
 8012b34:	4a3b      	ldr	r2, [pc, #236]	; (8012c24 <USB_SetTurnaroundTime+0x124>)
 8012b36:	4293      	cmp	r3, r2
 8012b38:	d202      	bcs.n	8012b40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012b3a:	230e      	movs	r3, #14
 8012b3c:	617b      	str	r3, [r7, #20]
 8012b3e:	e057      	b.n	8012bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012b40:	68bb      	ldr	r3, [r7, #8]
 8012b42:	4a38      	ldr	r2, [pc, #224]	; (8012c24 <USB_SetTurnaroundTime+0x124>)
 8012b44:	4293      	cmp	r3, r2
 8012b46:	d306      	bcc.n	8012b56 <USB_SetTurnaroundTime+0x56>
 8012b48:	68bb      	ldr	r3, [r7, #8]
 8012b4a:	4a37      	ldr	r2, [pc, #220]	; (8012c28 <USB_SetTurnaroundTime+0x128>)
 8012b4c:	4293      	cmp	r3, r2
 8012b4e:	d202      	bcs.n	8012b56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012b50:	230d      	movs	r3, #13
 8012b52:	617b      	str	r3, [r7, #20]
 8012b54:	e04c      	b.n	8012bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012b56:	68bb      	ldr	r3, [r7, #8]
 8012b58:	4a33      	ldr	r2, [pc, #204]	; (8012c28 <USB_SetTurnaroundTime+0x128>)
 8012b5a:	4293      	cmp	r3, r2
 8012b5c:	d306      	bcc.n	8012b6c <USB_SetTurnaroundTime+0x6c>
 8012b5e:	68bb      	ldr	r3, [r7, #8]
 8012b60:	4a32      	ldr	r2, [pc, #200]	; (8012c2c <USB_SetTurnaroundTime+0x12c>)
 8012b62:	4293      	cmp	r3, r2
 8012b64:	d802      	bhi.n	8012b6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012b66:	230c      	movs	r3, #12
 8012b68:	617b      	str	r3, [r7, #20]
 8012b6a:	e041      	b.n	8012bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012b6c:	68bb      	ldr	r3, [r7, #8]
 8012b6e:	4a2f      	ldr	r2, [pc, #188]	; (8012c2c <USB_SetTurnaroundTime+0x12c>)
 8012b70:	4293      	cmp	r3, r2
 8012b72:	d906      	bls.n	8012b82 <USB_SetTurnaroundTime+0x82>
 8012b74:	68bb      	ldr	r3, [r7, #8]
 8012b76:	4a2e      	ldr	r2, [pc, #184]	; (8012c30 <USB_SetTurnaroundTime+0x130>)
 8012b78:	4293      	cmp	r3, r2
 8012b7a:	d802      	bhi.n	8012b82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012b7c:	230b      	movs	r3, #11
 8012b7e:	617b      	str	r3, [r7, #20]
 8012b80:	e036      	b.n	8012bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012b82:	68bb      	ldr	r3, [r7, #8]
 8012b84:	4a2a      	ldr	r2, [pc, #168]	; (8012c30 <USB_SetTurnaroundTime+0x130>)
 8012b86:	4293      	cmp	r3, r2
 8012b88:	d906      	bls.n	8012b98 <USB_SetTurnaroundTime+0x98>
 8012b8a:	68bb      	ldr	r3, [r7, #8]
 8012b8c:	4a29      	ldr	r2, [pc, #164]	; (8012c34 <USB_SetTurnaroundTime+0x134>)
 8012b8e:	4293      	cmp	r3, r2
 8012b90:	d802      	bhi.n	8012b98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012b92:	230a      	movs	r3, #10
 8012b94:	617b      	str	r3, [r7, #20]
 8012b96:	e02b      	b.n	8012bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012b98:	68bb      	ldr	r3, [r7, #8]
 8012b9a:	4a26      	ldr	r2, [pc, #152]	; (8012c34 <USB_SetTurnaroundTime+0x134>)
 8012b9c:	4293      	cmp	r3, r2
 8012b9e:	d906      	bls.n	8012bae <USB_SetTurnaroundTime+0xae>
 8012ba0:	68bb      	ldr	r3, [r7, #8]
 8012ba2:	4a25      	ldr	r2, [pc, #148]	; (8012c38 <USB_SetTurnaroundTime+0x138>)
 8012ba4:	4293      	cmp	r3, r2
 8012ba6:	d202      	bcs.n	8012bae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012ba8:	2309      	movs	r3, #9
 8012baa:	617b      	str	r3, [r7, #20]
 8012bac:	e020      	b.n	8012bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012bae:	68bb      	ldr	r3, [r7, #8]
 8012bb0:	4a21      	ldr	r2, [pc, #132]	; (8012c38 <USB_SetTurnaroundTime+0x138>)
 8012bb2:	4293      	cmp	r3, r2
 8012bb4:	d306      	bcc.n	8012bc4 <USB_SetTurnaroundTime+0xc4>
 8012bb6:	68bb      	ldr	r3, [r7, #8]
 8012bb8:	4a20      	ldr	r2, [pc, #128]	; (8012c3c <USB_SetTurnaroundTime+0x13c>)
 8012bba:	4293      	cmp	r3, r2
 8012bbc:	d802      	bhi.n	8012bc4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012bbe:	2308      	movs	r3, #8
 8012bc0:	617b      	str	r3, [r7, #20]
 8012bc2:	e015      	b.n	8012bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012bc4:	68bb      	ldr	r3, [r7, #8]
 8012bc6:	4a1d      	ldr	r2, [pc, #116]	; (8012c3c <USB_SetTurnaroundTime+0x13c>)
 8012bc8:	4293      	cmp	r3, r2
 8012bca:	d906      	bls.n	8012bda <USB_SetTurnaroundTime+0xda>
 8012bcc:	68bb      	ldr	r3, [r7, #8]
 8012bce:	4a1c      	ldr	r2, [pc, #112]	; (8012c40 <USB_SetTurnaroundTime+0x140>)
 8012bd0:	4293      	cmp	r3, r2
 8012bd2:	d202      	bcs.n	8012bda <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012bd4:	2307      	movs	r3, #7
 8012bd6:	617b      	str	r3, [r7, #20]
 8012bd8:	e00a      	b.n	8012bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012bda:	2306      	movs	r3, #6
 8012bdc:	617b      	str	r3, [r7, #20]
 8012bde:	e007      	b.n	8012bf0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012be0:	79fb      	ldrb	r3, [r7, #7]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d102      	bne.n	8012bec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012be6:	2309      	movs	r3, #9
 8012be8:	617b      	str	r3, [r7, #20]
 8012bea:	e001      	b.n	8012bf0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012bec:	2309      	movs	r3, #9
 8012bee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	68db      	ldr	r3, [r3, #12]
 8012bf4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	68da      	ldr	r2, [r3, #12]
 8012c00:	697b      	ldr	r3, [r7, #20]
 8012c02:	029b      	lsls	r3, r3, #10
 8012c04:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012c08:	431a      	orrs	r2, r3
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012c0e:	2300      	movs	r3, #0
}
 8012c10:	4618      	mov	r0, r3
 8012c12:	371c      	adds	r7, #28
 8012c14:	46bd      	mov	sp, r7
 8012c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1a:	4770      	bx	lr
 8012c1c:	00d8acbf 	.word	0x00d8acbf
 8012c20:	00e4e1c0 	.word	0x00e4e1c0
 8012c24:	00f42400 	.word	0x00f42400
 8012c28:	01067380 	.word	0x01067380
 8012c2c:	011a499f 	.word	0x011a499f
 8012c30:	01312cff 	.word	0x01312cff
 8012c34:	014ca43f 	.word	0x014ca43f
 8012c38:	016e3600 	.word	0x016e3600
 8012c3c:	01a6ab1f 	.word	0x01a6ab1f
 8012c40:	01e84800 	.word	0x01e84800

08012c44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012c44:	b480      	push	{r7}
 8012c46:	b083      	sub	sp, #12
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	689b      	ldr	r3, [r3, #8]
 8012c50:	f043 0201 	orr.w	r2, r3, #1
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012c58:	2300      	movs	r3, #0
}
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	370c      	adds	r7, #12
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c64:	4770      	bx	lr

08012c66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012c66:	b480      	push	{r7}
 8012c68:	b083      	sub	sp, #12
 8012c6a:	af00      	add	r7, sp, #0
 8012c6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	689b      	ldr	r3, [r3, #8]
 8012c72:	f023 0201 	bic.w	r2, r3, #1
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012c7a:	2300      	movs	r3, #0
}
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	370c      	adds	r7, #12
 8012c80:	46bd      	mov	sp, r7
 8012c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c86:	4770      	bx	lr

08012c88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b084      	sub	sp, #16
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
 8012c90:	460b      	mov	r3, r1
 8012c92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012c94:	2300      	movs	r3, #0
 8012c96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	68db      	ldr	r3, [r3, #12]
 8012c9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012ca4:	78fb      	ldrb	r3, [r7, #3]
 8012ca6:	2b01      	cmp	r3, #1
 8012ca8:	d115      	bne.n	8012cd6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	68db      	ldr	r3, [r3, #12]
 8012cae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012cb6:	2001      	movs	r0, #1
 8012cb8:	f7f0 fea6 	bl	8003a08 <HAL_Delay>
      ms++;
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	3301      	adds	r3, #1
 8012cc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012cc2:	6878      	ldr	r0, [r7, #4]
 8012cc4:	f001 f93f 	bl	8013f46 <USB_GetMode>
 8012cc8:	4603      	mov	r3, r0
 8012cca:	2b01      	cmp	r3, #1
 8012ccc:	d01e      	beq.n	8012d0c <USB_SetCurrentMode+0x84>
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	2b31      	cmp	r3, #49	; 0x31
 8012cd2:	d9f0      	bls.n	8012cb6 <USB_SetCurrentMode+0x2e>
 8012cd4:	e01a      	b.n	8012d0c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012cd6:	78fb      	ldrb	r3, [r7, #3]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d115      	bne.n	8012d08 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	68db      	ldr	r3, [r3, #12]
 8012ce0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012ce8:	2001      	movs	r0, #1
 8012cea:	f7f0 fe8d 	bl	8003a08 <HAL_Delay>
      ms++;
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	3301      	adds	r3, #1
 8012cf2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012cf4:	6878      	ldr	r0, [r7, #4]
 8012cf6:	f001 f926 	bl	8013f46 <USB_GetMode>
 8012cfa:	4603      	mov	r3, r0
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d005      	beq.n	8012d0c <USB_SetCurrentMode+0x84>
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	2b31      	cmp	r3, #49	; 0x31
 8012d04:	d9f0      	bls.n	8012ce8 <USB_SetCurrentMode+0x60>
 8012d06:	e001      	b.n	8012d0c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012d08:	2301      	movs	r3, #1
 8012d0a:	e005      	b.n	8012d18 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	2b32      	cmp	r3, #50	; 0x32
 8012d10:	d101      	bne.n	8012d16 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012d12:	2301      	movs	r3, #1
 8012d14:	e000      	b.n	8012d18 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012d16:	2300      	movs	r3, #0
}
 8012d18:	4618      	mov	r0, r3
 8012d1a:	3710      	adds	r7, #16
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	bd80      	pop	{r7, pc}

08012d20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012d20:	b084      	sub	sp, #16
 8012d22:	b580      	push	{r7, lr}
 8012d24:	b086      	sub	sp, #24
 8012d26:	af00      	add	r7, sp, #0
 8012d28:	6078      	str	r0, [r7, #4]
 8012d2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012d2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012d32:	2300      	movs	r3, #0
 8012d34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012d3a:	2300      	movs	r3, #0
 8012d3c:	613b      	str	r3, [r7, #16]
 8012d3e:	e009      	b.n	8012d54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012d40:	687a      	ldr	r2, [r7, #4]
 8012d42:	693b      	ldr	r3, [r7, #16]
 8012d44:	3340      	adds	r3, #64	; 0x40
 8012d46:	009b      	lsls	r3, r3, #2
 8012d48:	4413      	add	r3, r2
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012d4e:	693b      	ldr	r3, [r7, #16]
 8012d50:	3301      	adds	r3, #1
 8012d52:	613b      	str	r3, [r7, #16]
 8012d54:	693b      	ldr	r3, [r7, #16]
 8012d56:	2b0e      	cmp	r3, #14
 8012d58:	d9f2      	bls.n	8012d40 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d11c      	bne.n	8012d9a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d66:	685b      	ldr	r3, [r3, #4]
 8012d68:	68fa      	ldr	r2, [r7, #12]
 8012d6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012d6e:	f043 0302 	orr.w	r3, r3, #2
 8012d72:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d78:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	601a      	str	r2, [r3, #0]
 8012d98:	e005      	b.n	8012da6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012dac:	461a      	mov	r2, r3
 8012dae:	2300      	movs	r3, #0
 8012db0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012db8:	4619      	mov	r1, r3
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012dc0:	461a      	mov	r2, r3
 8012dc2:	680b      	ldr	r3, [r1, #0]
 8012dc4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dc8:	2b01      	cmp	r3, #1
 8012dca:	d10c      	bne.n	8012de6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d104      	bne.n	8012ddc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012dd2:	2100      	movs	r1, #0
 8012dd4:	6878      	ldr	r0, [r7, #4]
 8012dd6:	f000 f965 	bl	80130a4 <USB_SetDevSpeed>
 8012dda:	e008      	b.n	8012dee <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012ddc:	2101      	movs	r1, #1
 8012dde:	6878      	ldr	r0, [r7, #4]
 8012de0:	f000 f960 	bl	80130a4 <USB_SetDevSpeed>
 8012de4:	e003      	b.n	8012dee <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012de6:	2103      	movs	r1, #3
 8012de8:	6878      	ldr	r0, [r7, #4]
 8012dea:	f000 f95b 	bl	80130a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012dee:	2110      	movs	r1, #16
 8012df0:	6878      	ldr	r0, [r7, #4]
 8012df2:	f000 f8f3 	bl	8012fdc <USB_FlushTxFifo>
 8012df6:	4603      	mov	r3, r0
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d001      	beq.n	8012e00 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8012dfc:	2301      	movs	r3, #1
 8012dfe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012e00:	6878      	ldr	r0, [r7, #4]
 8012e02:	f000 f91f 	bl	8013044 <USB_FlushRxFifo>
 8012e06:	4603      	mov	r3, r0
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d001      	beq.n	8012e10 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8012e0c:	2301      	movs	r3, #1
 8012e0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e16:	461a      	mov	r2, r3
 8012e18:	2300      	movs	r3, #0
 8012e1a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e22:	461a      	mov	r2, r3
 8012e24:	2300      	movs	r3, #0
 8012e26:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e2e:	461a      	mov	r2, r3
 8012e30:	2300      	movs	r3, #0
 8012e32:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012e34:	2300      	movs	r3, #0
 8012e36:	613b      	str	r3, [r7, #16]
 8012e38:	e043      	b.n	8012ec2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012e3a:	693b      	ldr	r3, [r7, #16]
 8012e3c:	015a      	lsls	r2, r3, #5
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	4413      	add	r3, r2
 8012e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012e4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012e50:	d118      	bne.n	8012e84 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8012e52:	693b      	ldr	r3, [r7, #16]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d10a      	bne.n	8012e6e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012e58:	693b      	ldr	r3, [r7, #16]
 8012e5a:	015a      	lsls	r2, r3, #5
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	4413      	add	r3, r2
 8012e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e64:	461a      	mov	r2, r3
 8012e66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012e6a:	6013      	str	r3, [r2, #0]
 8012e6c:	e013      	b.n	8012e96 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012e6e:	693b      	ldr	r3, [r7, #16]
 8012e70:	015a      	lsls	r2, r3, #5
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	4413      	add	r3, r2
 8012e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e7a:	461a      	mov	r2, r3
 8012e7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012e80:	6013      	str	r3, [r2, #0]
 8012e82:	e008      	b.n	8012e96 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012e84:	693b      	ldr	r3, [r7, #16]
 8012e86:	015a      	lsls	r2, r3, #5
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	4413      	add	r3, r2
 8012e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e90:	461a      	mov	r2, r3
 8012e92:	2300      	movs	r3, #0
 8012e94:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012e96:	693b      	ldr	r3, [r7, #16]
 8012e98:	015a      	lsls	r2, r3, #5
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	4413      	add	r3, r2
 8012e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ea2:	461a      	mov	r2, r3
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012ea8:	693b      	ldr	r3, [r7, #16]
 8012eaa:	015a      	lsls	r2, r3, #5
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	4413      	add	r3, r2
 8012eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012eb4:	461a      	mov	r2, r3
 8012eb6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012eba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012ebc:	693b      	ldr	r3, [r7, #16]
 8012ebe:	3301      	adds	r3, #1
 8012ec0:	613b      	str	r3, [r7, #16]
 8012ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ec4:	693a      	ldr	r2, [r7, #16]
 8012ec6:	429a      	cmp	r2, r3
 8012ec8:	d3b7      	bcc.n	8012e3a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012eca:	2300      	movs	r3, #0
 8012ecc:	613b      	str	r3, [r7, #16]
 8012ece:	e043      	b.n	8012f58 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012ed0:	693b      	ldr	r3, [r7, #16]
 8012ed2:	015a      	lsls	r2, r3, #5
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	4413      	add	r3, r2
 8012ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012ee2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012ee6:	d118      	bne.n	8012f1a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012ee8:	693b      	ldr	r3, [r7, #16]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d10a      	bne.n	8012f04 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012eee:	693b      	ldr	r3, [r7, #16]
 8012ef0:	015a      	lsls	r2, r3, #5
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	4413      	add	r3, r2
 8012ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012efa:	461a      	mov	r2, r3
 8012efc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012f00:	6013      	str	r3, [r2, #0]
 8012f02:	e013      	b.n	8012f2c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012f04:	693b      	ldr	r3, [r7, #16]
 8012f06:	015a      	lsls	r2, r3, #5
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	4413      	add	r3, r2
 8012f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f10:	461a      	mov	r2, r3
 8012f12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012f16:	6013      	str	r3, [r2, #0]
 8012f18:	e008      	b.n	8012f2c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012f1a:	693b      	ldr	r3, [r7, #16]
 8012f1c:	015a      	lsls	r2, r3, #5
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	4413      	add	r3, r2
 8012f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f26:	461a      	mov	r2, r3
 8012f28:	2300      	movs	r3, #0
 8012f2a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012f2c:	693b      	ldr	r3, [r7, #16]
 8012f2e:	015a      	lsls	r2, r3, #5
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	4413      	add	r3, r2
 8012f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f38:	461a      	mov	r2, r3
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012f3e:	693b      	ldr	r3, [r7, #16]
 8012f40:	015a      	lsls	r2, r3, #5
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	4413      	add	r3, r2
 8012f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f4a:	461a      	mov	r2, r3
 8012f4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012f50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012f52:	693b      	ldr	r3, [r7, #16]
 8012f54:	3301      	adds	r3, #1
 8012f56:	613b      	str	r3, [r7, #16]
 8012f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f5a:	693a      	ldr	r2, [r7, #16]
 8012f5c:	429a      	cmp	r2, r3
 8012f5e:	d3b7      	bcc.n	8012ed0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f66:	691b      	ldr	r3, [r3, #16]
 8012f68:	68fa      	ldr	r2, [r7, #12]
 8012f6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012f6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012f72:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	2200      	movs	r2, #0
 8012f78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012f80:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d105      	bne.n	8012f94 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	699b      	ldr	r3, [r3, #24]
 8012f8c:	f043 0210 	orr.w	r2, r3, #16
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	699a      	ldr	r2, [r3, #24]
 8012f98:	4b0e      	ldr	r3, [pc, #56]	; (8012fd4 <USB_DevInit+0x2b4>)
 8012f9a:	4313      	orrs	r3, r2
 8012f9c:	687a      	ldr	r2, [r7, #4]
 8012f9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d005      	beq.n	8012fb2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	699b      	ldr	r3, [r3, #24]
 8012faa:	f043 0208 	orr.w	r2, r3, #8
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fb4:	2b01      	cmp	r3, #1
 8012fb6:	d105      	bne.n	8012fc4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	699a      	ldr	r2, [r3, #24]
 8012fbc:	4b06      	ldr	r3, [pc, #24]	; (8012fd8 <USB_DevInit+0x2b8>)
 8012fbe:	4313      	orrs	r3, r2
 8012fc0:	687a      	ldr	r2, [r7, #4]
 8012fc2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	3718      	adds	r7, #24
 8012fca:	46bd      	mov	sp, r7
 8012fcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012fd0:	b004      	add	sp, #16
 8012fd2:	4770      	bx	lr
 8012fd4:	803c3800 	.word	0x803c3800
 8012fd8:	40000004 	.word	0x40000004

08012fdc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012fdc:	b480      	push	{r7}
 8012fde:	b085      	sub	sp, #20
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	6078      	str	r0, [r7, #4]
 8012fe4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	3301      	adds	r3, #1
 8012fee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	4a13      	ldr	r2, [pc, #76]	; (8013040 <USB_FlushTxFifo+0x64>)
 8012ff4:	4293      	cmp	r3, r2
 8012ff6:	d901      	bls.n	8012ffc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012ff8:	2303      	movs	r3, #3
 8012ffa:	e01b      	b.n	8013034 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	691b      	ldr	r3, [r3, #16]
 8013000:	2b00      	cmp	r3, #0
 8013002:	daf2      	bge.n	8012fea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8013004:	2300      	movs	r3, #0
 8013006:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013008:	683b      	ldr	r3, [r7, #0]
 801300a:	019b      	lsls	r3, r3, #6
 801300c:	f043 0220 	orr.w	r2, r3, #32
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	3301      	adds	r3, #1
 8013018:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	4a08      	ldr	r2, [pc, #32]	; (8013040 <USB_FlushTxFifo+0x64>)
 801301e:	4293      	cmp	r3, r2
 8013020:	d901      	bls.n	8013026 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8013022:	2303      	movs	r3, #3
 8013024:	e006      	b.n	8013034 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	691b      	ldr	r3, [r3, #16]
 801302a:	f003 0320 	and.w	r3, r3, #32
 801302e:	2b20      	cmp	r3, #32
 8013030:	d0f0      	beq.n	8013014 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8013032:	2300      	movs	r3, #0
}
 8013034:	4618      	mov	r0, r3
 8013036:	3714      	adds	r7, #20
 8013038:	46bd      	mov	sp, r7
 801303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303e:	4770      	bx	lr
 8013040:	00030d40 	.word	0x00030d40

08013044 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013044:	b480      	push	{r7}
 8013046:	b085      	sub	sp, #20
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801304c:	2300      	movs	r3, #0
 801304e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	3301      	adds	r3, #1
 8013054:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	4a11      	ldr	r2, [pc, #68]	; (80130a0 <USB_FlushRxFifo+0x5c>)
 801305a:	4293      	cmp	r3, r2
 801305c:	d901      	bls.n	8013062 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801305e:	2303      	movs	r3, #3
 8013060:	e018      	b.n	8013094 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	691b      	ldr	r3, [r3, #16]
 8013066:	2b00      	cmp	r3, #0
 8013068:	daf2      	bge.n	8013050 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801306a:	2300      	movs	r3, #0
 801306c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	2210      	movs	r2, #16
 8013072:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	3301      	adds	r3, #1
 8013078:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	4a08      	ldr	r2, [pc, #32]	; (80130a0 <USB_FlushRxFifo+0x5c>)
 801307e:	4293      	cmp	r3, r2
 8013080:	d901      	bls.n	8013086 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013082:	2303      	movs	r3, #3
 8013084:	e006      	b.n	8013094 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	691b      	ldr	r3, [r3, #16]
 801308a:	f003 0310 	and.w	r3, r3, #16
 801308e:	2b10      	cmp	r3, #16
 8013090:	d0f0      	beq.n	8013074 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013092:	2300      	movs	r3, #0
}
 8013094:	4618      	mov	r0, r3
 8013096:	3714      	adds	r7, #20
 8013098:	46bd      	mov	sp, r7
 801309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801309e:	4770      	bx	lr
 80130a0:	00030d40 	.word	0x00030d40

080130a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80130a4:	b480      	push	{r7}
 80130a6:	b085      	sub	sp, #20
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	6078      	str	r0, [r7, #4]
 80130ac:	460b      	mov	r3, r1
 80130ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130ba:	681a      	ldr	r2, [r3, #0]
 80130bc:	78fb      	ldrb	r3, [r7, #3]
 80130be:	68f9      	ldr	r1, [r7, #12]
 80130c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80130c4:	4313      	orrs	r3, r2
 80130c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80130c8:	2300      	movs	r3, #0
}
 80130ca:	4618      	mov	r0, r3
 80130cc:	3714      	adds	r7, #20
 80130ce:	46bd      	mov	sp, r7
 80130d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d4:	4770      	bx	lr

080130d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80130d6:	b480      	push	{r7}
 80130d8:	b087      	sub	sp, #28
 80130da:	af00      	add	r7, sp, #0
 80130dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80130e2:	693b      	ldr	r3, [r7, #16]
 80130e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130e8:	689b      	ldr	r3, [r3, #8]
 80130ea:	f003 0306 	and.w	r3, r3, #6
 80130ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d102      	bne.n	80130fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80130f6:	2300      	movs	r3, #0
 80130f8:	75fb      	strb	r3, [r7, #23]
 80130fa:	e00a      	b.n	8013112 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	2b02      	cmp	r3, #2
 8013100:	d002      	beq.n	8013108 <USB_GetDevSpeed+0x32>
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	2b06      	cmp	r3, #6
 8013106:	d102      	bne.n	801310e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8013108:	2302      	movs	r3, #2
 801310a:	75fb      	strb	r3, [r7, #23]
 801310c:	e001      	b.n	8013112 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801310e:	230f      	movs	r3, #15
 8013110:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8013112:	7dfb      	ldrb	r3, [r7, #23]
}
 8013114:	4618      	mov	r0, r3
 8013116:	371c      	adds	r7, #28
 8013118:	46bd      	mov	sp, r7
 801311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801311e:	4770      	bx	lr

08013120 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013120:	b480      	push	{r7}
 8013122:	b085      	sub	sp, #20
 8013124:	af00      	add	r7, sp, #0
 8013126:	6078      	str	r0, [r7, #4]
 8013128:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801312e:	683b      	ldr	r3, [r7, #0]
 8013130:	781b      	ldrb	r3, [r3, #0]
 8013132:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013134:	683b      	ldr	r3, [r7, #0]
 8013136:	785b      	ldrb	r3, [r3, #1]
 8013138:	2b01      	cmp	r3, #1
 801313a:	d139      	bne.n	80131b0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013142:	69da      	ldr	r2, [r3, #28]
 8013144:	683b      	ldr	r3, [r7, #0]
 8013146:	781b      	ldrb	r3, [r3, #0]
 8013148:	f003 030f 	and.w	r3, r3, #15
 801314c:	2101      	movs	r1, #1
 801314e:	fa01 f303 	lsl.w	r3, r1, r3
 8013152:	b29b      	uxth	r3, r3
 8013154:	68f9      	ldr	r1, [r7, #12]
 8013156:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801315a:	4313      	orrs	r3, r2
 801315c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801315e:	68bb      	ldr	r3, [r7, #8]
 8013160:	015a      	lsls	r2, r3, #5
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	4413      	add	r3, r2
 8013166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013170:	2b00      	cmp	r3, #0
 8013172:	d153      	bne.n	801321c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013174:	68bb      	ldr	r3, [r7, #8]
 8013176:	015a      	lsls	r2, r3, #5
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	4413      	add	r3, r2
 801317c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013180:	681a      	ldr	r2, [r3, #0]
 8013182:	683b      	ldr	r3, [r7, #0]
 8013184:	689b      	ldr	r3, [r3, #8]
 8013186:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801318a:	683b      	ldr	r3, [r7, #0]
 801318c:	791b      	ldrb	r3, [r3, #4]
 801318e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013190:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013192:	68bb      	ldr	r3, [r7, #8]
 8013194:	059b      	lsls	r3, r3, #22
 8013196:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013198:	431a      	orrs	r2, r3
 801319a:	68bb      	ldr	r3, [r7, #8]
 801319c:	0159      	lsls	r1, r3, #5
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	440b      	add	r3, r1
 80131a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131a6:	4619      	mov	r1, r3
 80131a8:	4b20      	ldr	r3, [pc, #128]	; (801322c <USB_ActivateEndpoint+0x10c>)
 80131aa:	4313      	orrs	r3, r2
 80131ac:	600b      	str	r3, [r1, #0]
 80131ae:	e035      	b.n	801321c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131b6:	69da      	ldr	r2, [r3, #28]
 80131b8:	683b      	ldr	r3, [r7, #0]
 80131ba:	781b      	ldrb	r3, [r3, #0]
 80131bc:	f003 030f 	and.w	r3, r3, #15
 80131c0:	2101      	movs	r1, #1
 80131c2:	fa01 f303 	lsl.w	r3, r1, r3
 80131c6:	041b      	lsls	r3, r3, #16
 80131c8:	68f9      	ldr	r1, [r7, #12]
 80131ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80131ce:	4313      	orrs	r3, r2
 80131d0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80131d2:	68bb      	ldr	r3, [r7, #8]
 80131d4:	015a      	lsls	r2, r3, #5
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	4413      	add	r3, r2
 80131da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d119      	bne.n	801321c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80131e8:	68bb      	ldr	r3, [r7, #8]
 80131ea:	015a      	lsls	r2, r3, #5
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	4413      	add	r3, r2
 80131f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131f4:	681a      	ldr	r2, [r3, #0]
 80131f6:	683b      	ldr	r3, [r7, #0]
 80131f8:	689b      	ldr	r3, [r3, #8]
 80131fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80131fe:	683b      	ldr	r3, [r7, #0]
 8013200:	791b      	ldrb	r3, [r3, #4]
 8013202:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013204:	430b      	orrs	r3, r1
 8013206:	431a      	orrs	r2, r3
 8013208:	68bb      	ldr	r3, [r7, #8]
 801320a:	0159      	lsls	r1, r3, #5
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	440b      	add	r3, r1
 8013210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013214:	4619      	mov	r1, r3
 8013216:	4b05      	ldr	r3, [pc, #20]	; (801322c <USB_ActivateEndpoint+0x10c>)
 8013218:	4313      	orrs	r3, r2
 801321a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801321c:	2300      	movs	r3, #0
}
 801321e:	4618      	mov	r0, r3
 8013220:	3714      	adds	r7, #20
 8013222:	46bd      	mov	sp, r7
 8013224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013228:	4770      	bx	lr
 801322a:	bf00      	nop
 801322c:	10008000 	.word	0x10008000

08013230 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013230:	b480      	push	{r7}
 8013232:	b085      	sub	sp, #20
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
 8013238:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801323e:	683b      	ldr	r3, [r7, #0]
 8013240:	781b      	ldrb	r3, [r3, #0]
 8013242:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8013244:	683b      	ldr	r3, [r7, #0]
 8013246:	785b      	ldrb	r3, [r3, #1]
 8013248:	2b01      	cmp	r3, #1
 801324a:	d161      	bne.n	8013310 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801324c:	68bb      	ldr	r3, [r7, #8]
 801324e:	015a      	lsls	r2, r3, #5
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	4413      	add	r3, r2
 8013254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801325e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013262:	d11f      	bne.n	80132a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013264:	68bb      	ldr	r3, [r7, #8]
 8013266:	015a      	lsls	r2, r3, #5
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	4413      	add	r3, r2
 801326c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	68ba      	ldr	r2, [r7, #8]
 8013274:	0151      	lsls	r1, r2, #5
 8013276:	68fa      	ldr	r2, [r7, #12]
 8013278:	440a      	add	r2, r1
 801327a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801327e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013282:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013284:	68bb      	ldr	r3, [r7, #8]
 8013286:	015a      	lsls	r2, r3, #5
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	4413      	add	r3, r2
 801328c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	68ba      	ldr	r2, [r7, #8]
 8013294:	0151      	lsls	r1, r2, #5
 8013296:	68fa      	ldr	r2, [r7, #12]
 8013298:	440a      	add	r2, r1
 801329a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801329e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80132a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80132aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80132ac:	683b      	ldr	r3, [r7, #0]
 80132ae:	781b      	ldrb	r3, [r3, #0]
 80132b0:	f003 030f 	and.w	r3, r3, #15
 80132b4:	2101      	movs	r1, #1
 80132b6:	fa01 f303 	lsl.w	r3, r1, r3
 80132ba:	b29b      	uxth	r3, r3
 80132bc:	43db      	mvns	r3, r3
 80132be:	68f9      	ldr	r1, [r7, #12]
 80132c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80132c4:	4013      	ands	r3, r2
 80132c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80132ce:	69da      	ldr	r2, [r3, #28]
 80132d0:	683b      	ldr	r3, [r7, #0]
 80132d2:	781b      	ldrb	r3, [r3, #0]
 80132d4:	f003 030f 	and.w	r3, r3, #15
 80132d8:	2101      	movs	r1, #1
 80132da:	fa01 f303 	lsl.w	r3, r1, r3
 80132de:	b29b      	uxth	r3, r3
 80132e0:	43db      	mvns	r3, r3
 80132e2:	68f9      	ldr	r1, [r7, #12]
 80132e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80132e8:	4013      	ands	r3, r2
 80132ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80132ec:	68bb      	ldr	r3, [r7, #8]
 80132ee:	015a      	lsls	r2, r3, #5
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	4413      	add	r3, r2
 80132f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132f8:	681a      	ldr	r2, [r3, #0]
 80132fa:	68bb      	ldr	r3, [r7, #8]
 80132fc:	0159      	lsls	r1, r3, #5
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	440b      	add	r3, r1
 8013302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013306:	4619      	mov	r1, r3
 8013308:	4b35      	ldr	r3, [pc, #212]	; (80133e0 <USB_DeactivateEndpoint+0x1b0>)
 801330a:	4013      	ands	r3, r2
 801330c:	600b      	str	r3, [r1, #0]
 801330e:	e060      	b.n	80133d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013310:	68bb      	ldr	r3, [r7, #8]
 8013312:	015a      	lsls	r2, r3, #5
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	4413      	add	r3, r2
 8013318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013322:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013326:	d11f      	bne.n	8013368 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013328:	68bb      	ldr	r3, [r7, #8]
 801332a:	015a      	lsls	r2, r3, #5
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	4413      	add	r3, r2
 8013330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	68ba      	ldr	r2, [r7, #8]
 8013338:	0151      	lsls	r1, r2, #5
 801333a:	68fa      	ldr	r2, [r7, #12]
 801333c:	440a      	add	r2, r1
 801333e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013342:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013346:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013348:	68bb      	ldr	r3, [r7, #8]
 801334a:	015a      	lsls	r2, r3, #5
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	4413      	add	r3, r2
 8013350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	68ba      	ldr	r2, [r7, #8]
 8013358:	0151      	lsls	r1, r2, #5
 801335a:	68fa      	ldr	r2, [r7, #12]
 801335c:	440a      	add	r2, r1
 801335e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013362:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013366:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801336e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013370:	683b      	ldr	r3, [r7, #0]
 8013372:	781b      	ldrb	r3, [r3, #0]
 8013374:	f003 030f 	and.w	r3, r3, #15
 8013378:	2101      	movs	r1, #1
 801337a:	fa01 f303 	lsl.w	r3, r1, r3
 801337e:	041b      	lsls	r3, r3, #16
 8013380:	43db      	mvns	r3, r3
 8013382:	68f9      	ldr	r1, [r7, #12]
 8013384:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013388:	4013      	ands	r3, r2
 801338a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013392:	69da      	ldr	r2, [r3, #28]
 8013394:	683b      	ldr	r3, [r7, #0]
 8013396:	781b      	ldrb	r3, [r3, #0]
 8013398:	f003 030f 	and.w	r3, r3, #15
 801339c:	2101      	movs	r1, #1
 801339e:	fa01 f303 	lsl.w	r3, r1, r3
 80133a2:	041b      	lsls	r3, r3, #16
 80133a4:	43db      	mvns	r3, r3
 80133a6:	68f9      	ldr	r1, [r7, #12]
 80133a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80133ac:	4013      	ands	r3, r2
 80133ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80133b0:	68bb      	ldr	r3, [r7, #8]
 80133b2:	015a      	lsls	r2, r3, #5
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	4413      	add	r3, r2
 80133b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133bc:	681a      	ldr	r2, [r3, #0]
 80133be:	68bb      	ldr	r3, [r7, #8]
 80133c0:	0159      	lsls	r1, r3, #5
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	440b      	add	r3, r1
 80133c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133ca:	4619      	mov	r1, r3
 80133cc:	4b05      	ldr	r3, [pc, #20]	; (80133e4 <USB_DeactivateEndpoint+0x1b4>)
 80133ce:	4013      	ands	r3, r2
 80133d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80133d2:	2300      	movs	r3, #0
}
 80133d4:	4618      	mov	r0, r3
 80133d6:	3714      	adds	r7, #20
 80133d8:	46bd      	mov	sp, r7
 80133da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133de:	4770      	bx	lr
 80133e0:	ec337800 	.word	0xec337800
 80133e4:	eff37800 	.word	0xeff37800

080133e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80133e8:	b580      	push	{r7, lr}
 80133ea:	b08a      	sub	sp, #40	; 0x28
 80133ec:	af02      	add	r7, sp, #8
 80133ee:	60f8      	str	r0, [r7, #12]
 80133f0:	60b9      	str	r1, [r7, #8]
 80133f2:	4613      	mov	r3, r2
 80133f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80133fa:	68bb      	ldr	r3, [r7, #8]
 80133fc:	781b      	ldrb	r3, [r3, #0]
 80133fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013400:	68bb      	ldr	r3, [r7, #8]
 8013402:	785b      	ldrb	r3, [r3, #1]
 8013404:	2b01      	cmp	r3, #1
 8013406:	f040 8181 	bne.w	801370c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801340a:	68bb      	ldr	r3, [r7, #8]
 801340c:	691b      	ldr	r3, [r3, #16]
 801340e:	2b00      	cmp	r3, #0
 8013410:	d132      	bne.n	8013478 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013412:	69bb      	ldr	r3, [r7, #24]
 8013414:	015a      	lsls	r2, r3, #5
 8013416:	69fb      	ldr	r3, [r7, #28]
 8013418:	4413      	add	r3, r2
 801341a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801341e:	691a      	ldr	r2, [r3, #16]
 8013420:	69bb      	ldr	r3, [r7, #24]
 8013422:	0159      	lsls	r1, r3, #5
 8013424:	69fb      	ldr	r3, [r7, #28]
 8013426:	440b      	add	r3, r1
 8013428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801342c:	4619      	mov	r1, r3
 801342e:	4ba5      	ldr	r3, [pc, #660]	; (80136c4 <USB_EPStartXfer+0x2dc>)
 8013430:	4013      	ands	r3, r2
 8013432:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013434:	69bb      	ldr	r3, [r7, #24]
 8013436:	015a      	lsls	r2, r3, #5
 8013438:	69fb      	ldr	r3, [r7, #28]
 801343a:	4413      	add	r3, r2
 801343c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013440:	691b      	ldr	r3, [r3, #16]
 8013442:	69ba      	ldr	r2, [r7, #24]
 8013444:	0151      	lsls	r1, r2, #5
 8013446:	69fa      	ldr	r2, [r7, #28]
 8013448:	440a      	add	r2, r1
 801344a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801344e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013452:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013454:	69bb      	ldr	r3, [r7, #24]
 8013456:	015a      	lsls	r2, r3, #5
 8013458:	69fb      	ldr	r3, [r7, #28]
 801345a:	4413      	add	r3, r2
 801345c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013460:	691a      	ldr	r2, [r3, #16]
 8013462:	69bb      	ldr	r3, [r7, #24]
 8013464:	0159      	lsls	r1, r3, #5
 8013466:	69fb      	ldr	r3, [r7, #28]
 8013468:	440b      	add	r3, r1
 801346a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801346e:	4619      	mov	r1, r3
 8013470:	4b95      	ldr	r3, [pc, #596]	; (80136c8 <USB_EPStartXfer+0x2e0>)
 8013472:	4013      	ands	r3, r2
 8013474:	610b      	str	r3, [r1, #16]
 8013476:	e092      	b.n	801359e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013478:	69bb      	ldr	r3, [r7, #24]
 801347a:	015a      	lsls	r2, r3, #5
 801347c:	69fb      	ldr	r3, [r7, #28]
 801347e:	4413      	add	r3, r2
 8013480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013484:	691a      	ldr	r2, [r3, #16]
 8013486:	69bb      	ldr	r3, [r7, #24]
 8013488:	0159      	lsls	r1, r3, #5
 801348a:	69fb      	ldr	r3, [r7, #28]
 801348c:	440b      	add	r3, r1
 801348e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013492:	4619      	mov	r1, r3
 8013494:	4b8c      	ldr	r3, [pc, #560]	; (80136c8 <USB_EPStartXfer+0x2e0>)
 8013496:	4013      	ands	r3, r2
 8013498:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801349a:	69bb      	ldr	r3, [r7, #24]
 801349c:	015a      	lsls	r2, r3, #5
 801349e:	69fb      	ldr	r3, [r7, #28]
 80134a0:	4413      	add	r3, r2
 80134a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134a6:	691a      	ldr	r2, [r3, #16]
 80134a8:	69bb      	ldr	r3, [r7, #24]
 80134aa:	0159      	lsls	r1, r3, #5
 80134ac:	69fb      	ldr	r3, [r7, #28]
 80134ae:	440b      	add	r3, r1
 80134b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134b4:	4619      	mov	r1, r3
 80134b6:	4b83      	ldr	r3, [pc, #524]	; (80136c4 <USB_EPStartXfer+0x2dc>)
 80134b8:	4013      	ands	r3, r2
 80134ba:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80134bc:	69bb      	ldr	r3, [r7, #24]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d11a      	bne.n	80134f8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80134c2:	68bb      	ldr	r3, [r7, #8]
 80134c4:	691a      	ldr	r2, [r3, #16]
 80134c6:	68bb      	ldr	r3, [r7, #8]
 80134c8:	689b      	ldr	r3, [r3, #8]
 80134ca:	429a      	cmp	r2, r3
 80134cc:	d903      	bls.n	80134d6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80134ce:	68bb      	ldr	r3, [r7, #8]
 80134d0:	689a      	ldr	r2, [r3, #8]
 80134d2:	68bb      	ldr	r3, [r7, #8]
 80134d4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80134d6:	69bb      	ldr	r3, [r7, #24]
 80134d8:	015a      	lsls	r2, r3, #5
 80134da:	69fb      	ldr	r3, [r7, #28]
 80134dc:	4413      	add	r3, r2
 80134de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134e2:	691b      	ldr	r3, [r3, #16]
 80134e4:	69ba      	ldr	r2, [r7, #24]
 80134e6:	0151      	lsls	r1, r2, #5
 80134e8:	69fa      	ldr	r2, [r7, #28]
 80134ea:	440a      	add	r2, r1
 80134ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80134f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80134f4:	6113      	str	r3, [r2, #16]
 80134f6:	e01b      	b.n	8013530 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80134f8:	69bb      	ldr	r3, [r7, #24]
 80134fa:	015a      	lsls	r2, r3, #5
 80134fc:	69fb      	ldr	r3, [r7, #28]
 80134fe:	4413      	add	r3, r2
 8013500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013504:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8013506:	68bb      	ldr	r3, [r7, #8]
 8013508:	6919      	ldr	r1, [r3, #16]
 801350a:	68bb      	ldr	r3, [r7, #8]
 801350c:	689b      	ldr	r3, [r3, #8]
 801350e:	440b      	add	r3, r1
 8013510:	1e59      	subs	r1, r3, #1
 8013512:	68bb      	ldr	r3, [r7, #8]
 8013514:	689b      	ldr	r3, [r3, #8]
 8013516:	fbb1 f3f3 	udiv	r3, r1, r3
 801351a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801351c:	4b6b      	ldr	r3, [pc, #428]	; (80136cc <USB_EPStartXfer+0x2e4>)
 801351e:	400b      	ands	r3, r1
 8013520:	69b9      	ldr	r1, [r7, #24]
 8013522:	0148      	lsls	r0, r1, #5
 8013524:	69f9      	ldr	r1, [r7, #28]
 8013526:	4401      	add	r1, r0
 8013528:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801352c:	4313      	orrs	r3, r2
 801352e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013530:	69bb      	ldr	r3, [r7, #24]
 8013532:	015a      	lsls	r2, r3, #5
 8013534:	69fb      	ldr	r3, [r7, #28]
 8013536:	4413      	add	r3, r2
 8013538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801353c:	691a      	ldr	r2, [r3, #16]
 801353e:	68bb      	ldr	r3, [r7, #8]
 8013540:	691b      	ldr	r3, [r3, #16]
 8013542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013546:	69b9      	ldr	r1, [r7, #24]
 8013548:	0148      	lsls	r0, r1, #5
 801354a:	69f9      	ldr	r1, [r7, #28]
 801354c:	4401      	add	r1, r0
 801354e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013552:	4313      	orrs	r3, r2
 8013554:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8013556:	68bb      	ldr	r3, [r7, #8]
 8013558:	791b      	ldrb	r3, [r3, #4]
 801355a:	2b01      	cmp	r3, #1
 801355c:	d11f      	bne.n	801359e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801355e:	69bb      	ldr	r3, [r7, #24]
 8013560:	015a      	lsls	r2, r3, #5
 8013562:	69fb      	ldr	r3, [r7, #28]
 8013564:	4413      	add	r3, r2
 8013566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801356a:	691b      	ldr	r3, [r3, #16]
 801356c:	69ba      	ldr	r2, [r7, #24]
 801356e:	0151      	lsls	r1, r2, #5
 8013570:	69fa      	ldr	r2, [r7, #28]
 8013572:	440a      	add	r2, r1
 8013574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013578:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801357c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801357e:	69bb      	ldr	r3, [r7, #24]
 8013580:	015a      	lsls	r2, r3, #5
 8013582:	69fb      	ldr	r3, [r7, #28]
 8013584:	4413      	add	r3, r2
 8013586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801358a:	691b      	ldr	r3, [r3, #16]
 801358c:	69ba      	ldr	r2, [r7, #24]
 801358e:	0151      	lsls	r1, r2, #5
 8013590:	69fa      	ldr	r2, [r7, #28]
 8013592:	440a      	add	r2, r1
 8013594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013598:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801359c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801359e:	79fb      	ldrb	r3, [r7, #7]
 80135a0:	2b01      	cmp	r3, #1
 80135a2:	d14b      	bne.n	801363c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80135a4:	68bb      	ldr	r3, [r7, #8]
 80135a6:	69db      	ldr	r3, [r3, #28]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d009      	beq.n	80135c0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80135ac:	69bb      	ldr	r3, [r7, #24]
 80135ae:	015a      	lsls	r2, r3, #5
 80135b0:	69fb      	ldr	r3, [r7, #28]
 80135b2:	4413      	add	r3, r2
 80135b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135b8:	461a      	mov	r2, r3
 80135ba:	68bb      	ldr	r3, [r7, #8]
 80135bc:	69db      	ldr	r3, [r3, #28]
 80135be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	791b      	ldrb	r3, [r3, #4]
 80135c4:	2b01      	cmp	r3, #1
 80135c6:	d128      	bne.n	801361a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80135c8:	69fb      	ldr	r3, [r7, #28]
 80135ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80135ce:	689b      	ldr	r3, [r3, #8]
 80135d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d110      	bne.n	80135fa <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80135d8:	69bb      	ldr	r3, [r7, #24]
 80135da:	015a      	lsls	r2, r3, #5
 80135dc:	69fb      	ldr	r3, [r7, #28]
 80135de:	4413      	add	r3, r2
 80135e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	69ba      	ldr	r2, [r7, #24]
 80135e8:	0151      	lsls	r1, r2, #5
 80135ea:	69fa      	ldr	r2, [r7, #28]
 80135ec:	440a      	add	r2, r1
 80135ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80135f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80135f6:	6013      	str	r3, [r2, #0]
 80135f8:	e00f      	b.n	801361a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80135fa:	69bb      	ldr	r3, [r7, #24]
 80135fc:	015a      	lsls	r2, r3, #5
 80135fe:	69fb      	ldr	r3, [r7, #28]
 8013600:	4413      	add	r3, r2
 8013602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	69ba      	ldr	r2, [r7, #24]
 801360a:	0151      	lsls	r1, r2, #5
 801360c:	69fa      	ldr	r2, [r7, #28]
 801360e:	440a      	add	r2, r1
 8013610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013618:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801361a:	69bb      	ldr	r3, [r7, #24]
 801361c:	015a      	lsls	r2, r3, #5
 801361e:	69fb      	ldr	r3, [r7, #28]
 8013620:	4413      	add	r3, r2
 8013622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	69ba      	ldr	r2, [r7, #24]
 801362a:	0151      	lsls	r1, r2, #5
 801362c:	69fa      	ldr	r2, [r7, #28]
 801362e:	440a      	add	r2, r1
 8013630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013634:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013638:	6013      	str	r3, [r2, #0]
 801363a:	e16a      	b.n	8013912 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801363c:	69bb      	ldr	r3, [r7, #24]
 801363e:	015a      	lsls	r2, r3, #5
 8013640:	69fb      	ldr	r3, [r7, #28]
 8013642:	4413      	add	r3, r2
 8013644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	69ba      	ldr	r2, [r7, #24]
 801364c:	0151      	lsls	r1, r2, #5
 801364e:	69fa      	ldr	r2, [r7, #28]
 8013650:	440a      	add	r2, r1
 8013652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013656:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801365a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801365c:	68bb      	ldr	r3, [r7, #8]
 801365e:	791b      	ldrb	r3, [r3, #4]
 8013660:	2b01      	cmp	r3, #1
 8013662:	d015      	beq.n	8013690 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013664:	68bb      	ldr	r3, [r7, #8]
 8013666:	691b      	ldr	r3, [r3, #16]
 8013668:	2b00      	cmp	r3, #0
 801366a:	f000 8152 	beq.w	8013912 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801366e:	69fb      	ldr	r3, [r7, #28]
 8013670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013674:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013676:	68bb      	ldr	r3, [r7, #8]
 8013678:	781b      	ldrb	r3, [r3, #0]
 801367a:	f003 030f 	and.w	r3, r3, #15
 801367e:	2101      	movs	r1, #1
 8013680:	fa01 f303 	lsl.w	r3, r1, r3
 8013684:	69f9      	ldr	r1, [r7, #28]
 8013686:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801368a:	4313      	orrs	r3, r2
 801368c:	634b      	str	r3, [r1, #52]	; 0x34
 801368e:	e140      	b.n	8013912 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013690:	69fb      	ldr	r3, [r7, #28]
 8013692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013696:	689b      	ldr	r3, [r3, #8]
 8013698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801369c:	2b00      	cmp	r3, #0
 801369e:	d117      	bne.n	80136d0 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80136a0:	69bb      	ldr	r3, [r7, #24]
 80136a2:	015a      	lsls	r2, r3, #5
 80136a4:	69fb      	ldr	r3, [r7, #28]
 80136a6:	4413      	add	r3, r2
 80136a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	69ba      	ldr	r2, [r7, #24]
 80136b0:	0151      	lsls	r1, r2, #5
 80136b2:	69fa      	ldr	r2, [r7, #28]
 80136b4:	440a      	add	r2, r1
 80136b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80136be:	6013      	str	r3, [r2, #0]
 80136c0:	e016      	b.n	80136f0 <USB_EPStartXfer+0x308>
 80136c2:	bf00      	nop
 80136c4:	e007ffff 	.word	0xe007ffff
 80136c8:	fff80000 	.word	0xfff80000
 80136cc:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80136d0:	69bb      	ldr	r3, [r7, #24]
 80136d2:	015a      	lsls	r2, r3, #5
 80136d4:	69fb      	ldr	r3, [r7, #28]
 80136d6:	4413      	add	r3, r2
 80136d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	69ba      	ldr	r2, [r7, #24]
 80136e0:	0151      	lsls	r1, r2, #5
 80136e2:	69fa      	ldr	r2, [r7, #28]
 80136e4:	440a      	add	r2, r1
 80136e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80136ee:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80136f0:	68bb      	ldr	r3, [r7, #8]
 80136f2:	68d9      	ldr	r1, [r3, #12]
 80136f4:	68bb      	ldr	r3, [r7, #8]
 80136f6:	781a      	ldrb	r2, [r3, #0]
 80136f8:	68bb      	ldr	r3, [r7, #8]
 80136fa:	691b      	ldr	r3, [r3, #16]
 80136fc:	b298      	uxth	r0, r3
 80136fe:	79fb      	ldrb	r3, [r7, #7]
 8013700:	9300      	str	r3, [sp, #0]
 8013702:	4603      	mov	r3, r0
 8013704:	68f8      	ldr	r0, [r7, #12]
 8013706:	f000 f9b9 	bl	8013a7c <USB_WritePacket>
 801370a:	e102      	b.n	8013912 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801370c:	69bb      	ldr	r3, [r7, #24]
 801370e:	015a      	lsls	r2, r3, #5
 8013710:	69fb      	ldr	r3, [r7, #28]
 8013712:	4413      	add	r3, r2
 8013714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013718:	691a      	ldr	r2, [r3, #16]
 801371a:	69bb      	ldr	r3, [r7, #24]
 801371c:	0159      	lsls	r1, r3, #5
 801371e:	69fb      	ldr	r3, [r7, #28]
 8013720:	440b      	add	r3, r1
 8013722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013726:	4619      	mov	r1, r3
 8013728:	4b7c      	ldr	r3, [pc, #496]	; (801391c <USB_EPStartXfer+0x534>)
 801372a:	4013      	ands	r3, r2
 801372c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801372e:	69bb      	ldr	r3, [r7, #24]
 8013730:	015a      	lsls	r2, r3, #5
 8013732:	69fb      	ldr	r3, [r7, #28]
 8013734:	4413      	add	r3, r2
 8013736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801373a:	691a      	ldr	r2, [r3, #16]
 801373c:	69bb      	ldr	r3, [r7, #24]
 801373e:	0159      	lsls	r1, r3, #5
 8013740:	69fb      	ldr	r3, [r7, #28]
 8013742:	440b      	add	r3, r1
 8013744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013748:	4619      	mov	r1, r3
 801374a:	4b75      	ldr	r3, [pc, #468]	; (8013920 <USB_EPStartXfer+0x538>)
 801374c:	4013      	ands	r3, r2
 801374e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8013750:	69bb      	ldr	r3, [r7, #24]
 8013752:	2b00      	cmp	r3, #0
 8013754:	d12f      	bne.n	80137b6 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8013756:	68bb      	ldr	r3, [r7, #8]
 8013758:	691b      	ldr	r3, [r3, #16]
 801375a:	2b00      	cmp	r3, #0
 801375c:	d003      	beq.n	8013766 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 801375e:	68bb      	ldr	r3, [r7, #8]
 8013760:	689a      	ldr	r2, [r3, #8]
 8013762:	68bb      	ldr	r3, [r7, #8]
 8013764:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8013766:	68bb      	ldr	r3, [r7, #8]
 8013768:	689a      	ldr	r2, [r3, #8]
 801376a:	68bb      	ldr	r3, [r7, #8]
 801376c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801376e:	69bb      	ldr	r3, [r7, #24]
 8013770:	015a      	lsls	r2, r3, #5
 8013772:	69fb      	ldr	r3, [r7, #28]
 8013774:	4413      	add	r3, r2
 8013776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801377a:	691a      	ldr	r2, [r3, #16]
 801377c:	68bb      	ldr	r3, [r7, #8]
 801377e:	6a1b      	ldr	r3, [r3, #32]
 8013780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013784:	69b9      	ldr	r1, [r7, #24]
 8013786:	0148      	lsls	r0, r1, #5
 8013788:	69f9      	ldr	r1, [r7, #28]
 801378a:	4401      	add	r1, r0
 801378c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013790:	4313      	orrs	r3, r2
 8013792:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013794:	69bb      	ldr	r3, [r7, #24]
 8013796:	015a      	lsls	r2, r3, #5
 8013798:	69fb      	ldr	r3, [r7, #28]
 801379a:	4413      	add	r3, r2
 801379c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137a0:	691b      	ldr	r3, [r3, #16]
 80137a2:	69ba      	ldr	r2, [r7, #24]
 80137a4:	0151      	lsls	r1, r2, #5
 80137a6:	69fa      	ldr	r2, [r7, #28]
 80137a8:	440a      	add	r2, r1
 80137aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80137ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80137b2:	6113      	str	r3, [r2, #16]
 80137b4:	e05f      	b.n	8013876 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80137b6:	68bb      	ldr	r3, [r7, #8]
 80137b8:	691b      	ldr	r3, [r3, #16]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d123      	bne.n	8013806 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80137be:	69bb      	ldr	r3, [r7, #24]
 80137c0:	015a      	lsls	r2, r3, #5
 80137c2:	69fb      	ldr	r3, [r7, #28]
 80137c4:	4413      	add	r3, r2
 80137c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137ca:	691a      	ldr	r2, [r3, #16]
 80137cc:	68bb      	ldr	r3, [r7, #8]
 80137ce:	689b      	ldr	r3, [r3, #8]
 80137d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80137d4:	69b9      	ldr	r1, [r7, #24]
 80137d6:	0148      	lsls	r0, r1, #5
 80137d8:	69f9      	ldr	r1, [r7, #28]
 80137da:	4401      	add	r1, r0
 80137dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80137e0:	4313      	orrs	r3, r2
 80137e2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80137e4:	69bb      	ldr	r3, [r7, #24]
 80137e6:	015a      	lsls	r2, r3, #5
 80137e8:	69fb      	ldr	r3, [r7, #28]
 80137ea:	4413      	add	r3, r2
 80137ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137f0:	691b      	ldr	r3, [r3, #16]
 80137f2:	69ba      	ldr	r2, [r7, #24]
 80137f4:	0151      	lsls	r1, r2, #5
 80137f6:	69fa      	ldr	r2, [r7, #28]
 80137f8:	440a      	add	r2, r1
 80137fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80137fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013802:	6113      	str	r3, [r2, #16]
 8013804:	e037      	b.n	8013876 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013806:	68bb      	ldr	r3, [r7, #8]
 8013808:	691a      	ldr	r2, [r3, #16]
 801380a:	68bb      	ldr	r3, [r7, #8]
 801380c:	689b      	ldr	r3, [r3, #8]
 801380e:	4413      	add	r3, r2
 8013810:	1e5a      	subs	r2, r3, #1
 8013812:	68bb      	ldr	r3, [r7, #8]
 8013814:	689b      	ldr	r3, [r3, #8]
 8013816:	fbb2 f3f3 	udiv	r3, r2, r3
 801381a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 801381c:	68bb      	ldr	r3, [r7, #8]
 801381e:	689b      	ldr	r3, [r3, #8]
 8013820:	8afa      	ldrh	r2, [r7, #22]
 8013822:	fb03 f202 	mul.w	r2, r3, r2
 8013826:	68bb      	ldr	r3, [r7, #8]
 8013828:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801382a:	69bb      	ldr	r3, [r7, #24]
 801382c:	015a      	lsls	r2, r3, #5
 801382e:	69fb      	ldr	r3, [r7, #28]
 8013830:	4413      	add	r3, r2
 8013832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013836:	691a      	ldr	r2, [r3, #16]
 8013838:	8afb      	ldrh	r3, [r7, #22]
 801383a:	04d9      	lsls	r1, r3, #19
 801383c:	4b39      	ldr	r3, [pc, #228]	; (8013924 <USB_EPStartXfer+0x53c>)
 801383e:	400b      	ands	r3, r1
 8013840:	69b9      	ldr	r1, [r7, #24]
 8013842:	0148      	lsls	r0, r1, #5
 8013844:	69f9      	ldr	r1, [r7, #28]
 8013846:	4401      	add	r1, r0
 8013848:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801384c:	4313      	orrs	r3, r2
 801384e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013850:	69bb      	ldr	r3, [r7, #24]
 8013852:	015a      	lsls	r2, r3, #5
 8013854:	69fb      	ldr	r3, [r7, #28]
 8013856:	4413      	add	r3, r2
 8013858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801385c:	691a      	ldr	r2, [r3, #16]
 801385e:	68bb      	ldr	r3, [r7, #8]
 8013860:	6a1b      	ldr	r3, [r3, #32]
 8013862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013866:	69b9      	ldr	r1, [r7, #24]
 8013868:	0148      	lsls	r0, r1, #5
 801386a:	69f9      	ldr	r1, [r7, #28]
 801386c:	4401      	add	r1, r0
 801386e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013872:	4313      	orrs	r3, r2
 8013874:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8013876:	79fb      	ldrb	r3, [r7, #7]
 8013878:	2b01      	cmp	r3, #1
 801387a:	d10d      	bne.n	8013898 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801387c:	68bb      	ldr	r3, [r7, #8]
 801387e:	68db      	ldr	r3, [r3, #12]
 8013880:	2b00      	cmp	r3, #0
 8013882:	d009      	beq.n	8013898 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013884:	68bb      	ldr	r3, [r7, #8]
 8013886:	68d9      	ldr	r1, [r3, #12]
 8013888:	69bb      	ldr	r3, [r7, #24]
 801388a:	015a      	lsls	r2, r3, #5
 801388c:	69fb      	ldr	r3, [r7, #28]
 801388e:	4413      	add	r3, r2
 8013890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013894:	460a      	mov	r2, r1
 8013896:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013898:	68bb      	ldr	r3, [r7, #8]
 801389a:	791b      	ldrb	r3, [r3, #4]
 801389c:	2b01      	cmp	r3, #1
 801389e:	d128      	bne.n	80138f2 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80138a0:	69fb      	ldr	r3, [r7, #28]
 80138a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80138a6:	689b      	ldr	r3, [r3, #8]
 80138a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d110      	bne.n	80138d2 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80138b0:	69bb      	ldr	r3, [r7, #24]
 80138b2:	015a      	lsls	r2, r3, #5
 80138b4:	69fb      	ldr	r3, [r7, #28]
 80138b6:	4413      	add	r3, r2
 80138b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	69ba      	ldr	r2, [r7, #24]
 80138c0:	0151      	lsls	r1, r2, #5
 80138c2:	69fa      	ldr	r2, [r7, #28]
 80138c4:	440a      	add	r2, r1
 80138c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80138ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80138ce:	6013      	str	r3, [r2, #0]
 80138d0:	e00f      	b.n	80138f2 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80138d2:	69bb      	ldr	r3, [r7, #24]
 80138d4:	015a      	lsls	r2, r3, #5
 80138d6:	69fb      	ldr	r3, [r7, #28]
 80138d8:	4413      	add	r3, r2
 80138da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	69ba      	ldr	r2, [r7, #24]
 80138e2:	0151      	lsls	r1, r2, #5
 80138e4:	69fa      	ldr	r2, [r7, #28]
 80138e6:	440a      	add	r2, r1
 80138e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80138ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80138f0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80138f2:	69bb      	ldr	r3, [r7, #24]
 80138f4:	015a      	lsls	r2, r3, #5
 80138f6:	69fb      	ldr	r3, [r7, #28]
 80138f8:	4413      	add	r3, r2
 80138fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	69ba      	ldr	r2, [r7, #24]
 8013902:	0151      	lsls	r1, r2, #5
 8013904:	69fa      	ldr	r2, [r7, #28]
 8013906:	440a      	add	r2, r1
 8013908:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801390c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013910:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013912:	2300      	movs	r3, #0
}
 8013914:	4618      	mov	r0, r3
 8013916:	3720      	adds	r7, #32
 8013918:	46bd      	mov	sp, r7
 801391a:	bd80      	pop	{r7, pc}
 801391c:	fff80000 	.word	0xfff80000
 8013920:	e007ffff 	.word	0xe007ffff
 8013924:	1ff80000 	.word	0x1ff80000

08013928 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013928:	b480      	push	{r7}
 801392a:	b087      	sub	sp, #28
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
 8013930:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013932:	2300      	movs	r3, #0
 8013934:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8013936:	2300      	movs	r3, #0
 8013938:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801393e:	683b      	ldr	r3, [r7, #0]
 8013940:	785b      	ldrb	r3, [r3, #1]
 8013942:	2b01      	cmp	r3, #1
 8013944:	d14a      	bne.n	80139dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013946:	683b      	ldr	r3, [r7, #0]
 8013948:	781b      	ldrb	r3, [r3, #0]
 801394a:	015a      	lsls	r2, r3, #5
 801394c:	693b      	ldr	r3, [r7, #16]
 801394e:	4413      	add	r3, r2
 8013950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801395a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801395e:	f040 8086 	bne.w	8013a6e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8013962:	683b      	ldr	r3, [r7, #0]
 8013964:	781b      	ldrb	r3, [r3, #0]
 8013966:	015a      	lsls	r2, r3, #5
 8013968:	693b      	ldr	r3, [r7, #16]
 801396a:	4413      	add	r3, r2
 801396c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	683a      	ldr	r2, [r7, #0]
 8013974:	7812      	ldrb	r2, [r2, #0]
 8013976:	0151      	lsls	r1, r2, #5
 8013978:	693a      	ldr	r2, [r7, #16]
 801397a:	440a      	add	r2, r1
 801397c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013980:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013984:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013986:	683b      	ldr	r3, [r7, #0]
 8013988:	781b      	ldrb	r3, [r3, #0]
 801398a:	015a      	lsls	r2, r3, #5
 801398c:	693b      	ldr	r3, [r7, #16]
 801398e:	4413      	add	r3, r2
 8013990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	683a      	ldr	r2, [r7, #0]
 8013998:	7812      	ldrb	r2, [r2, #0]
 801399a:	0151      	lsls	r1, r2, #5
 801399c:	693a      	ldr	r2, [r7, #16]
 801399e:	440a      	add	r2, r1
 80139a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80139a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80139a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	3301      	adds	r3, #1
 80139ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80139b6:	4293      	cmp	r3, r2
 80139b8:	d902      	bls.n	80139c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80139ba:	2301      	movs	r3, #1
 80139bc:	75fb      	strb	r3, [r7, #23]
          break;
 80139be:	e056      	b.n	8013a6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80139c0:	683b      	ldr	r3, [r7, #0]
 80139c2:	781b      	ldrb	r3, [r3, #0]
 80139c4:	015a      	lsls	r2, r3, #5
 80139c6:	693b      	ldr	r3, [r7, #16]
 80139c8:	4413      	add	r3, r2
 80139ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80139d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80139d8:	d0e7      	beq.n	80139aa <USB_EPStopXfer+0x82>
 80139da:	e048      	b.n	8013a6e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80139dc:	683b      	ldr	r3, [r7, #0]
 80139de:	781b      	ldrb	r3, [r3, #0]
 80139e0:	015a      	lsls	r2, r3, #5
 80139e2:	693b      	ldr	r3, [r7, #16]
 80139e4:	4413      	add	r3, r2
 80139e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80139f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80139f4:	d13b      	bne.n	8013a6e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80139f6:	683b      	ldr	r3, [r7, #0]
 80139f8:	781b      	ldrb	r3, [r3, #0]
 80139fa:	015a      	lsls	r2, r3, #5
 80139fc:	693b      	ldr	r3, [r7, #16]
 80139fe:	4413      	add	r3, r2
 8013a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	683a      	ldr	r2, [r7, #0]
 8013a08:	7812      	ldrb	r2, [r2, #0]
 8013a0a:	0151      	lsls	r1, r2, #5
 8013a0c:	693a      	ldr	r2, [r7, #16]
 8013a0e:	440a      	add	r2, r1
 8013a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013a14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013a18:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013a1a:	683b      	ldr	r3, [r7, #0]
 8013a1c:	781b      	ldrb	r3, [r3, #0]
 8013a1e:	015a      	lsls	r2, r3, #5
 8013a20:	693b      	ldr	r3, [r7, #16]
 8013a22:	4413      	add	r3, r2
 8013a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	683a      	ldr	r2, [r7, #0]
 8013a2c:	7812      	ldrb	r2, [r2, #0]
 8013a2e:	0151      	lsls	r1, r2, #5
 8013a30:	693a      	ldr	r2, [r7, #16]
 8013a32:	440a      	add	r2, r1
 8013a34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013a38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013a3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	3301      	adds	r3, #1
 8013a42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	f242 7210 	movw	r2, #10000	; 0x2710
 8013a4a:	4293      	cmp	r3, r2
 8013a4c:	d902      	bls.n	8013a54 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013a4e:	2301      	movs	r3, #1
 8013a50:	75fb      	strb	r3, [r7, #23]
          break;
 8013a52:	e00c      	b.n	8013a6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013a54:	683b      	ldr	r3, [r7, #0]
 8013a56:	781b      	ldrb	r3, [r3, #0]
 8013a58:	015a      	lsls	r2, r3, #5
 8013a5a:	693b      	ldr	r3, [r7, #16]
 8013a5c:	4413      	add	r3, r2
 8013a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013a68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a6c:	d0e7      	beq.n	8013a3e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a70:	4618      	mov	r0, r3
 8013a72:	371c      	adds	r7, #28
 8013a74:	46bd      	mov	sp, r7
 8013a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a7a:	4770      	bx	lr

08013a7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013a7c:	b480      	push	{r7}
 8013a7e:	b089      	sub	sp, #36	; 0x24
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	60f8      	str	r0, [r7, #12]
 8013a84:	60b9      	str	r1, [r7, #8]
 8013a86:	4611      	mov	r1, r2
 8013a88:	461a      	mov	r2, r3
 8013a8a:	460b      	mov	r3, r1
 8013a8c:	71fb      	strb	r3, [r7, #7]
 8013a8e:	4613      	mov	r3, r2
 8013a90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013a96:	68bb      	ldr	r3, [r7, #8]
 8013a98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013a9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d123      	bne.n	8013aea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013aa2:	88bb      	ldrh	r3, [r7, #4]
 8013aa4:	3303      	adds	r3, #3
 8013aa6:	089b      	lsrs	r3, r3, #2
 8013aa8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013aaa:	2300      	movs	r3, #0
 8013aac:	61bb      	str	r3, [r7, #24]
 8013aae:	e018      	b.n	8013ae2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013ab0:	79fb      	ldrb	r3, [r7, #7]
 8013ab2:	031a      	lsls	r2, r3, #12
 8013ab4:	697b      	ldr	r3, [r7, #20]
 8013ab6:	4413      	add	r3, r2
 8013ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013abc:	461a      	mov	r2, r3
 8013abe:	69fb      	ldr	r3, [r7, #28]
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013ac4:	69fb      	ldr	r3, [r7, #28]
 8013ac6:	3301      	adds	r3, #1
 8013ac8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013aca:	69fb      	ldr	r3, [r7, #28]
 8013acc:	3301      	adds	r3, #1
 8013ace:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013ad0:	69fb      	ldr	r3, [r7, #28]
 8013ad2:	3301      	adds	r3, #1
 8013ad4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013ad6:	69fb      	ldr	r3, [r7, #28]
 8013ad8:	3301      	adds	r3, #1
 8013ada:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013adc:	69bb      	ldr	r3, [r7, #24]
 8013ade:	3301      	adds	r3, #1
 8013ae0:	61bb      	str	r3, [r7, #24]
 8013ae2:	69ba      	ldr	r2, [r7, #24]
 8013ae4:	693b      	ldr	r3, [r7, #16]
 8013ae6:	429a      	cmp	r2, r3
 8013ae8:	d3e2      	bcc.n	8013ab0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013aea:	2300      	movs	r3, #0
}
 8013aec:	4618      	mov	r0, r3
 8013aee:	3724      	adds	r7, #36	; 0x24
 8013af0:	46bd      	mov	sp, r7
 8013af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af6:	4770      	bx	lr

08013af8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013af8:	b480      	push	{r7}
 8013afa:	b08b      	sub	sp, #44	; 0x2c
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	60f8      	str	r0, [r7, #12]
 8013b00:	60b9      	str	r1, [r7, #8]
 8013b02:	4613      	mov	r3, r2
 8013b04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013b0a:	68bb      	ldr	r3, [r7, #8]
 8013b0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013b0e:	88fb      	ldrh	r3, [r7, #6]
 8013b10:	089b      	lsrs	r3, r3, #2
 8013b12:	b29b      	uxth	r3, r3
 8013b14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013b16:	88fb      	ldrh	r3, [r7, #6]
 8013b18:	f003 0303 	and.w	r3, r3, #3
 8013b1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013b1e:	2300      	movs	r3, #0
 8013b20:	623b      	str	r3, [r7, #32]
 8013b22:	e014      	b.n	8013b4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013b24:	69bb      	ldr	r3, [r7, #24]
 8013b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b2a:	681a      	ldr	r2, [r3, #0]
 8013b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8013b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b32:	3301      	adds	r3, #1
 8013b34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b38:	3301      	adds	r3, #1
 8013b3a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b3e:	3301      	adds	r3, #1
 8013b40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b44:	3301      	adds	r3, #1
 8013b46:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013b48:	6a3b      	ldr	r3, [r7, #32]
 8013b4a:	3301      	adds	r3, #1
 8013b4c:	623b      	str	r3, [r7, #32]
 8013b4e:	6a3a      	ldr	r2, [r7, #32]
 8013b50:	697b      	ldr	r3, [r7, #20]
 8013b52:	429a      	cmp	r2, r3
 8013b54:	d3e6      	bcc.n	8013b24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013b56:	8bfb      	ldrh	r3, [r7, #30]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d01e      	beq.n	8013b9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013b60:	69bb      	ldr	r3, [r7, #24]
 8013b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b66:	461a      	mov	r2, r3
 8013b68:	f107 0310 	add.w	r3, r7, #16
 8013b6c:	6812      	ldr	r2, [r2, #0]
 8013b6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013b70:	693a      	ldr	r2, [r7, #16]
 8013b72:	6a3b      	ldr	r3, [r7, #32]
 8013b74:	b2db      	uxtb	r3, r3
 8013b76:	00db      	lsls	r3, r3, #3
 8013b78:	fa22 f303 	lsr.w	r3, r2, r3
 8013b7c:	b2da      	uxtb	r2, r3
 8013b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b80:	701a      	strb	r2, [r3, #0]
      i++;
 8013b82:	6a3b      	ldr	r3, [r7, #32]
 8013b84:	3301      	adds	r3, #1
 8013b86:	623b      	str	r3, [r7, #32]
      pDest++;
 8013b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b8a:	3301      	adds	r3, #1
 8013b8c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8013b8e:	8bfb      	ldrh	r3, [r7, #30]
 8013b90:	3b01      	subs	r3, #1
 8013b92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013b94:	8bfb      	ldrh	r3, [r7, #30]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d1ea      	bne.n	8013b70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	372c      	adds	r7, #44	; 0x2c
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba6:	4770      	bx	lr

08013ba8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013ba8:	b480      	push	{r7}
 8013baa:	b085      	sub	sp, #20
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	6078      	str	r0, [r7, #4]
 8013bb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013bb6:	683b      	ldr	r3, [r7, #0]
 8013bb8:	781b      	ldrb	r3, [r3, #0]
 8013bba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013bbc:	683b      	ldr	r3, [r7, #0]
 8013bbe:	785b      	ldrb	r3, [r3, #1]
 8013bc0:	2b01      	cmp	r3, #1
 8013bc2:	d12c      	bne.n	8013c1e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013bc4:	68bb      	ldr	r3, [r7, #8]
 8013bc6:	015a      	lsls	r2, r3, #5
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	4413      	add	r3, r2
 8013bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	db12      	blt.n	8013bfc <USB_EPSetStall+0x54>
 8013bd6:	68bb      	ldr	r3, [r7, #8]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d00f      	beq.n	8013bfc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013bdc:	68bb      	ldr	r3, [r7, #8]
 8013bde:	015a      	lsls	r2, r3, #5
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	4413      	add	r3, r2
 8013be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	68ba      	ldr	r2, [r7, #8]
 8013bec:	0151      	lsls	r1, r2, #5
 8013bee:	68fa      	ldr	r2, [r7, #12]
 8013bf0:	440a      	add	r2, r1
 8013bf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013bf6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013bfa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013bfc:	68bb      	ldr	r3, [r7, #8]
 8013bfe:	015a      	lsls	r2, r3, #5
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	4413      	add	r3, r2
 8013c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	68ba      	ldr	r2, [r7, #8]
 8013c0c:	0151      	lsls	r1, r2, #5
 8013c0e:	68fa      	ldr	r2, [r7, #12]
 8013c10:	440a      	add	r2, r1
 8013c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013c1a:	6013      	str	r3, [r2, #0]
 8013c1c:	e02b      	b.n	8013c76 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013c1e:	68bb      	ldr	r3, [r7, #8]
 8013c20:	015a      	lsls	r2, r3, #5
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	4413      	add	r3, r2
 8013c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	db12      	blt.n	8013c56 <USB_EPSetStall+0xae>
 8013c30:	68bb      	ldr	r3, [r7, #8]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d00f      	beq.n	8013c56 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013c36:	68bb      	ldr	r3, [r7, #8]
 8013c38:	015a      	lsls	r2, r3, #5
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	4413      	add	r3, r2
 8013c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	68ba      	ldr	r2, [r7, #8]
 8013c46:	0151      	lsls	r1, r2, #5
 8013c48:	68fa      	ldr	r2, [r7, #12]
 8013c4a:	440a      	add	r2, r1
 8013c4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013c54:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013c56:	68bb      	ldr	r3, [r7, #8]
 8013c58:	015a      	lsls	r2, r3, #5
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	4413      	add	r3, r2
 8013c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	68ba      	ldr	r2, [r7, #8]
 8013c66:	0151      	lsls	r1, r2, #5
 8013c68:	68fa      	ldr	r2, [r7, #12]
 8013c6a:	440a      	add	r2, r1
 8013c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013c74:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013c76:	2300      	movs	r3, #0
}
 8013c78:	4618      	mov	r0, r3
 8013c7a:	3714      	adds	r7, #20
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c82:	4770      	bx	lr

08013c84 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013c84:	b480      	push	{r7}
 8013c86:	b085      	sub	sp, #20
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	6078      	str	r0, [r7, #4]
 8013c8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013c92:	683b      	ldr	r3, [r7, #0]
 8013c94:	781b      	ldrb	r3, [r3, #0]
 8013c96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013c98:	683b      	ldr	r3, [r7, #0]
 8013c9a:	785b      	ldrb	r3, [r3, #1]
 8013c9c:	2b01      	cmp	r3, #1
 8013c9e:	d128      	bne.n	8013cf2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013ca0:	68bb      	ldr	r3, [r7, #8]
 8013ca2:	015a      	lsls	r2, r3, #5
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	4413      	add	r3, r2
 8013ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	68ba      	ldr	r2, [r7, #8]
 8013cb0:	0151      	lsls	r1, r2, #5
 8013cb2:	68fa      	ldr	r2, [r7, #12]
 8013cb4:	440a      	add	r2, r1
 8013cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013cba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013cbe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013cc0:	683b      	ldr	r3, [r7, #0]
 8013cc2:	791b      	ldrb	r3, [r3, #4]
 8013cc4:	2b03      	cmp	r3, #3
 8013cc6:	d003      	beq.n	8013cd0 <USB_EPClearStall+0x4c>
 8013cc8:	683b      	ldr	r3, [r7, #0]
 8013cca:	791b      	ldrb	r3, [r3, #4]
 8013ccc:	2b02      	cmp	r3, #2
 8013cce:	d138      	bne.n	8013d42 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013cd0:	68bb      	ldr	r3, [r7, #8]
 8013cd2:	015a      	lsls	r2, r3, #5
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	4413      	add	r3, r2
 8013cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	68ba      	ldr	r2, [r7, #8]
 8013ce0:	0151      	lsls	r1, r2, #5
 8013ce2:	68fa      	ldr	r2, [r7, #12]
 8013ce4:	440a      	add	r2, r1
 8013ce6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013cee:	6013      	str	r3, [r2, #0]
 8013cf0:	e027      	b.n	8013d42 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013cf2:	68bb      	ldr	r3, [r7, #8]
 8013cf4:	015a      	lsls	r2, r3, #5
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	4413      	add	r3, r2
 8013cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	68ba      	ldr	r2, [r7, #8]
 8013d02:	0151      	lsls	r1, r2, #5
 8013d04:	68fa      	ldr	r2, [r7, #12]
 8013d06:	440a      	add	r2, r1
 8013d08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013d10:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013d12:	683b      	ldr	r3, [r7, #0]
 8013d14:	791b      	ldrb	r3, [r3, #4]
 8013d16:	2b03      	cmp	r3, #3
 8013d18:	d003      	beq.n	8013d22 <USB_EPClearStall+0x9e>
 8013d1a:	683b      	ldr	r3, [r7, #0]
 8013d1c:	791b      	ldrb	r3, [r3, #4]
 8013d1e:	2b02      	cmp	r3, #2
 8013d20:	d10f      	bne.n	8013d42 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013d22:	68bb      	ldr	r3, [r7, #8]
 8013d24:	015a      	lsls	r2, r3, #5
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	4413      	add	r3, r2
 8013d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	68ba      	ldr	r2, [r7, #8]
 8013d32:	0151      	lsls	r1, r2, #5
 8013d34:	68fa      	ldr	r2, [r7, #12]
 8013d36:	440a      	add	r2, r1
 8013d38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013d40:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013d42:	2300      	movs	r3, #0
}
 8013d44:	4618      	mov	r0, r3
 8013d46:	3714      	adds	r7, #20
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d4e:	4770      	bx	lr

08013d50 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013d50:	b480      	push	{r7}
 8013d52:	b085      	sub	sp, #20
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	6078      	str	r0, [r7, #4]
 8013d58:	460b      	mov	r3, r1
 8013d5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	68fa      	ldr	r2, [r7, #12]
 8013d6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013d6e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013d72:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d7a:	681a      	ldr	r2, [r3, #0]
 8013d7c:	78fb      	ldrb	r3, [r7, #3]
 8013d7e:	011b      	lsls	r3, r3, #4
 8013d80:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013d84:	68f9      	ldr	r1, [r7, #12]
 8013d86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013d8a:	4313      	orrs	r3, r2
 8013d8c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013d8e:	2300      	movs	r3, #0
}
 8013d90:	4618      	mov	r0, r3
 8013d92:	3714      	adds	r7, #20
 8013d94:	46bd      	mov	sp, r7
 8013d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d9a:	4770      	bx	lr

08013d9c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013d9c:	b480      	push	{r7}
 8013d9e:	b085      	sub	sp, #20
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	68fa      	ldr	r2, [r7, #12]
 8013db2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013db6:	f023 0303 	bic.w	r3, r3, #3
 8013dba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dc2:	685b      	ldr	r3, [r3, #4]
 8013dc4:	68fa      	ldr	r2, [r7, #12]
 8013dc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013dca:	f023 0302 	bic.w	r3, r3, #2
 8013dce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013dd0:	2300      	movs	r3, #0
}
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	3714      	adds	r7, #20
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ddc:	4770      	bx	lr

08013dde <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013dde:	b480      	push	{r7}
 8013de0:	b085      	sub	sp, #20
 8013de2:	af00      	add	r7, sp, #0
 8013de4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	68fa      	ldr	r2, [r7, #12]
 8013df4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013df8:	f023 0303 	bic.w	r3, r3, #3
 8013dfc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e04:	685b      	ldr	r3, [r3, #4]
 8013e06:	68fa      	ldr	r2, [r7, #12]
 8013e08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e0c:	f043 0302 	orr.w	r3, r3, #2
 8013e10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013e12:	2300      	movs	r3, #0
}
 8013e14:	4618      	mov	r0, r3
 8013e16:	3714      	adds	r7, #20
 8013e18:	46bd      	mov	sp, r7
 8013e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1e:	4770      	bx	lr

08013e20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013e20:	b480      	push	{r7}
 8013e22:	b085      	sub	sp, #20
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	695b      	ldr	r3, [r3, #20]
 8013e2c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	699b      	ldr	r3, [r3, #24]
 8013e32:	68fa      	ldr	r2, [r7, #12]
 8013e34:	4013      	ands	r3, r2
 8013e36:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013e38:	68fb      	ldr	r3, [r7, #12]
}
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	3714      	adds	r7, #20
 8013e3e:	46bd      	mov	sp, r7
 8013e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e44:	4770      	bx	lr

08013e46 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013e46:	b480      	push	{r7}
 8013e48:	b085      	sub	sp, #20
 8013e4a:	af00      	add	r7, sp, #0
 8013e4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e58:	699b      	ldr	r3, [r3, #24]
 8013e5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e62:	69db      	ldr	r3, [r3, #28]
 8013e64:	68ba      	ldr	r2, [r7, #8]
 8013e66:	4013      	ands	r3, r2
 8013e68:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013e6a:	68bb      	ldr	r3, [r7, #8]
 8013e6c:	0c1b      	lsrs	r3, r3, #16
}
 8013e6e:	4618      	mov	r0, r3
 8013e70:	3714      	adds	r7, #20
 8013e72:	46bd      	mov	sp, r7
 8013e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e78:	4770      	bx	lr

08013e7a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013e7a:	b480      	push	{r7}
 8013e7c:	b085      	sub	sp, #20
 8013e7e:	af00      	add	r7, sp, #0
 8013e80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e8c:	699b      	ldr	r3, [r3, #24]
 8013e8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e96:	69db      	ldr	r3, [r3, #28]
 8013e98:	68ba      	ldr	r2, [r7, #8]
 8013e9a:	4013      	ands	r3, r2
 8013e9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013e9e:	68bb      	ldr	r3, [r7, #8]
 8013ea0:	b29b      	uxth	r3, r3
}
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	3714      	adds	r7, #20
 8013ea6:	46bd      	mov	sp, r7
 8013ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eac:	4770      	bx	lr

08013eae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013eae:	b480      	push	{r7}
 8013eb0:	b085      	sub	sp, #20
 8013eb2:	af00      	add	r7, sp, #0
 8013eb4:	6078      	str	r0, [r7, #4]
 8013eb6:	460b      	mov	r3, r1
 8013eb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013ebe:	78fb      	ldrb	r3, [r7, #3]
 8013ec0:	015a      	lsls	r2, r3, #5
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	4413      	add	r3, r2
 8013ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013eca:	689b      	ldr	r3, [r3, #8]
 8013ecc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ed4:	695b      	ldr	r3, [r3, #20]
 8013ed6:	68ba      	ldr	r2, [r7, #8]
 8013ed8:	4013      	ands	r3, r2
 8013eda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013edc:	68bb      	ldr	r3, [r7, #8]
}
 8013ede:	4618      	mov	r0, r3
 8013ee0:	3714      	adds	r7, #20
 8013ee2:	46bd      	mov	sp, r7
 8013ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee8:	4770      	bx	lr

08013eea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013eea:	b480      	push	{r7}
 8013eec:	b087      	sub	sp, #28
 8013eee:	af00      	add	r7, sp, #0
 8013ef0:	6078      	str	r0, [r7, #4]
 8013ef2:	460b      	mov	r3, r1
 8013ef4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013efa:	697b      	ldr	r3, [r7, #20]
 8013efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f00:	691b      	ldr	r3, [r3, #16]
 8013f02:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013f04:	697b      	ldr	r3, [r7, #20]
 8013f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f0c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013f0e:	78fb      	ldrb	r3, [r7, #3]
 8013f10:	f003 030f 	and.w	r3, r3, #15
 8013f14:	68fa      	ldr	r2, [r7, #12]
 8013f16:	fa22 f303 	lsr.w	r3, r2, r3
 8013f1a:	01db      	lsls	r3, r3, #7
 8013f1c:	b2db      	uxtb	r3, r3
 8013f1e:	693a      	ldr	r2, [r7, #16]
 8013f20:	4313      	orrs	r3, r2
 8013f22:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013f24:	78fb      	ldrb	r3, [r7, #3]
 8013f26:	015a      	lsls	r2, r3, #5
 8013f28:	697b      	ldr	r3, [r7, #20]
 8013f2a:	4413      	add	r3, r2
 8013f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f30:	689b      	ldr	r3, [r3, #8]
 8013f32:	693a      	ldr	r2, [r7, #16]
 8013f34:	4013      	ands	r3, r2
 8013f36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013f38:	68bb      	ldr	r3, [r7, #8]
}
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	371c      	adds	r7, #28
 8013f3e:	46bd      	mov	sp, r7
 8013f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f44:	4770      	bx	lr

08013f46 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013f46:	b480      	push	{r7}
 8013f48:	b083      	sub	sp, #12
 8013f4a:	af00      	add	r7, sp, #0
 8013f4c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	695b      	ldr	r3, [r3, #20]
 8013f52:	f003 0301 	and.w	r3, r3, #1
}
 8013f56:	4618      	mov	r0, r3
 8013f58:	370c      	adds	r7, #12
 8013f5a:	46bd      	mov	sp, r7
 8013f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f60:	4770      	bx	lr
	...

08013f64 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013f64:	b480      	push	{r7}
 8013f66:	b085      	sub	sp, #20
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f76:	681a      	ldr	r2, [r3, #0]
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f7e:	4619      	mov	r1, r3
 8013f80:	4b09      	ldr	r3, [pc, #36]	; (8013fa8 <USB_ActivateSetup+0x44>)
 8013f82:	4013      	ands	r3, r2
 8013f84:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f8c:	685b      	ldr	r3, [r3, #4]
 8013f8e:	68fa      	ldr	r2, [r7, #12]
 8013f90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013f98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013f9a:	2300      	movs	r3, #0
}
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	3714      	adds	r7, #20
 8013fa0:	46bd      	mov	sp, r7
 8013fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa6:	4770      	bx	lr
 8013fa8:	fffff800 	.word	0xfffff800

08013fac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8013fac:	b480      	push	{r7}
 8013fae:	b087      	sub	sp, #28
 8013fb0:	af00      	add	r7, sp, #0
 8013fb2:	60f8      	str	r0, [r7, #12]
 8013fb4:	460b      	mov	r3, r1
 8013fb6:	607a      	str	r2, [r7, #4]
 8013fb8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	333c      	adds	r3, #60	; 0x3c
 8013fc2:	3304      	adds	r3, #4
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013fc8:	693b      	ldr	r3, [r7, #16]
 8013fca:	4a26      	ldr	r2, [pc, #152]	; (8014064 <USB_EP0_OutStart+0xb8>)
 8013fcc:	4293      	cmp	r3, r2
 8013fce:	d90a      	bls.n	8013fe6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013fd0:	697b      	ldr	r3, [r7, #20]
 8013fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013fdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013fe0:	d101      	bne.n	8013fe6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8013fe2:	2300      	movs	r3, #0
 8013fe4:	e037      	b.n	8014056 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013fe6:	697b      	ldr	r3, [r7, #20]
 8013fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fec:	461a      	mov	r2, r3
 8013fee:	2300      	movs	r3, #0
 8013ff0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013ff2:	697b      	ldr	r3, [r7, #20]
 8013ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ff8:	691b      	ldr	r3, [r3, #16]
 8013ffa:	697a      	ldr	r2, [r7, #20]
 8013ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014000:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014004:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014006:	697b      	ldr	r3, [r7, #20]
 8014008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801400c:	691b      	ldr	r3, [r3, #16]
 801400e:	697a      	ldr	r2, [r7, #20]
 8014010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014014:	f043 0318 	orr.w	r3, r3, #24
 8014018:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801401a:	697b      	ldr	r3, [r7, #20]
 801401c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014020:	691b      	ldr	r3, [r3, #16]
 8014022:	697a      	ldr	r2, [r7, #20]
 8014024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014028:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801402c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801402e:	7afb      	ldrb	r3, [r7, #11]
 8014030:	2b01      	cmp	r3, #1
 8014032:	d10f      	bne.n	8014054 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014034:	697b      	ldr	r3, [r7, #20]
 8014036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801403a:	461a      	mov	r2, r3
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014040:	697b      	ldr	r3, [r7, #20]
 8014042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	697a      	ldr	r2, [r7, #20]
 801404a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801404e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8014052:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014054:	2300      	movs	r3, #0
}
 8014056:	4618      	mov	r0, r3
 8014058:	371c      	adds	r7, #28
 801405a:	46bd      	mov	sp, r7
 801405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014060:	4770      	bx	lr
 8014062:	bf00      	nop
 8014064:	4f54300a 	.word	0x4f54300a

08014068 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014068:	b480      	push	{r7}
 801406a:	b085      	sub	sp, #20
 801406c:	af00      	add	r7, sp, #0
 801406e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014070:	2300      	movs	r3, #0
 8014072:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	3301      	adds	r3, #1
 8014078:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	4a13      	ldr	r2, [pc, #76]	; (80140cc <USB_CoreReset+0x64>)
 801407e:	4293      	cmp	r3, r2
 8014080:	d901      	bls.n	8014086 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014082:	2303      	movs	r3, #3
 8014084:	e01b      	b.n	80140be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	691b      	ldr	r3, [r3, #16]
 801408a:	2b00      	cmp	r3, #0
 801408c:	daf2      	bge.n	8014074 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801408e:	2300      	movs	r3, #0
 8014090:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	691b      	ldr	r3, [r3, #16]
 8014096:	f043 0201 	orr.w	r2, r3, #1
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	3301      	adds	r3, #1
 80140a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	4a09      	ldr	r2, [pc, #36]	; (80140cc <USB_CoreReset+0x64>)
 80140a8:	4293      	cmp	r3, r2
 80140aa:	d901      	bls.n	80140b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80140ac:	2303      	movs	r3, #3
 80140ae:	e006      	b.n	80140be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	691b      	ldr	r3, [r3, #16]
 80140b4:	f003 0301 	and.w	r3, r3, #1
 80140b8:	2b01      	cmp	r3, #1
 80140ba:	d0f0      	beq.n	801409e <USB_CoreReset+0x36>

  return HAL_OK;
 80140bc:	2300      	movs	r3, #0
}
 80140be:	4618      	mov	r0, r3
 80140c0:	3714      	adds	r7, #20
 80140c2:	46bd      	mov	sp, r7
 80140c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c8:	4770      	bx	lr
 80140ca:	bf00      	nop
 80140cc:	00030d40 	.word	0x00030d40

080140d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80140d4:	4904      	ldr	r1, [pc, #16]	; (80140e8 <MX_FATFS_Init+0x18>)
 80140d6:	4805      	ldr	r0, [pc, #20]	; (80140ec <MX_FATFS_Init+0x1c>)
 80140d8:	f002 fa56 	bl	8016588 <FATFS_LinkDriver>
 80140dc:	4603      	mov	r3, r0
 80140de:	461a      	mov	r2, r3
 80140e0:	4b03      	ldr	r3, [pc, #12]	; (80140f0 <MX_FATFS_Init+0x20>)
 80140e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80140e4:	bf00      	nop
 80140e6:	bd80      	pop	{r7, pc}
 80140e8:	240015d8 	.word	0x240015d8
 80140ec:	08018528 	.word	0x08018528
 80140f0:	240015d4 	.word	0x240015d4

080140f4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b082      	sub	sp, #8
 80140f8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80140fa:	2300      	movs	r3, #0
 80140fc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80140fe:	f000 f885 	bl	801420c <BSP_SD_IsDetected>
 8014102:	4603      	mov	r3, r0
 8014104:	2b01      	cmp	r3, #1
 8014106:	d001      	beq.n	801410c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8014108:	2302      	movs	r3, #2
 801410a:	e012      	b.n	8014132 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 801410c:	480b      	ldr	r0, [pc, #44]	; (801413c <BSP_SD_Init+0x48>)
 801410e:	f7f8 ff41 	bl	800cf94 <HAL_SD_Init>
 8014112:	4603      	mov	r3, r0
 8014114:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8014116:	79fb      	ldrb	r3, [r7, #7]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d109      	bne.n	8014130 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801411c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8014120:	4806      	ldr	r0, [pc, #24]	; (801413c <BSP_SD_Init+0x48>)
 8014122:	f7f9 fdf7 	bl	800dd14 <HAL_SD_ConfigWideBusOperation>
 8014126:	4603      	mov	r3, r0
 8014128:	2b00      	cmp	r3, #0
 801412a:	d001      	beq.n	8014130 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801412c:	2301      	movs	r3, #1
 801412e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8014130:	79fb      	ldrb	r3, [r7, #7]
}
 8014132:	4618      	mov	r0, r3
 8014134:	3708      	adds	r7, #8
 8014136:	46bd      	mov	sp, r7
 8014138:	bd80      	pop	{r7, pc}
 801413a:	bf00      	nop
 801413c:	24000ebc 	.word	0x24000ebc

08014140 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8014140:	b580      	push	{r7, lr}
 8014142:	b086      	sub	sp, #24
 8014144:	af00      	add	r7, sp, #0
 8014146:	60f8      	str	r0, [r7, #12]
 8014148:	60b9      	str	r1, [r7, #8]
 801414a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801414c:	2300      	movs	r3, #0
 801414e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	68ba      	ldr	r2, [r7, #8]
 8014154:	68f9      	ldr	r1, [r7, #12]
 8014156:	4806      	ldr	r0, [pc, #24]	; (8014170 <BSP_SD_ReadBlocks_DMA+0x30>)
 8014158:	f7f9 f83c 	bl	800d1d4 <HAL_SD_ReadBlocks_DMA>
 801415c:	4603      	mov	r3, r0
 801415e:	2b00      	cmp	r3, #0
 8014160:	d001      	beq.n	8014166 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014162:	2301      	movs	r3, #1
 8014164:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014166:	7dfb      	ldrb	r3, [r7, #23]
}
 8014168:	4618      	mov	r0, r3
 801416a:	3718      	adds	r7, #24
 801416c:	46bd      	mov	sp, r7
 801416e:	bd80      	pop	{r7, pc}
 8014170:	24000ebc 	.word	0x24000ebc

08014174 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8014174:	b580      	push	{r7, lr}
 8014176:	b086      	sub	sp, #24
 8014178:	af00      	add	r7, sp, #0
 801417a:	60f8      	str	r0, [r7, #12]
 801417c:	60b9      	str	r1, [r7, #8]
 801417e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014180:	2300      	movs	r3, #0
 8014182:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	68ba      	ldr	r2, [r7, #8]
 8014188:	68f9      	ldr	r1, [r7, #12]
 801418a:	4806      	ldr	r0, [pc, #24]	; (80141a4 <BSP_SD_WriteBlocks_DMA+0x30>)
 801418c:	f7f9 f8ca 	bl	800d324 <HAL_SD_WriteBlocks_DMA>
 8014190:	4603      	mov	r3, r0
 8014192:	2b00      	cmp	r3, #0
 8014194:	d001      	beq.n	801419a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014196:	2301      	movs	r3, #1
 8014198:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801419a:	7dfb      	ldrb	r3, [r7, #23]
}
 801419c:	4618      	mov	r0, r3
 801419e:	3718      	adds	r7, #24
 80141a0:	46bd      	mov	sp, r7
 80141a2:	bd80      	pop	{r7, pc}
 80141a4:	24000ebc 	.word	0x24000ebc

080141a8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80141a8:	b580      	push	{r7, lr}
 80141aa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80141ac:	4805      	ldr	r0, [pc, #20]	; (80141c4 <BSP_SD_GetCardState+0x1c>)
 80141ae:	f7f9 fec3 	bl	800df38 <HAL_SD_GetCardState>
 80141b2:	4603      	mov	r3, r0
 80141b4:	2b04      	cmp	r3, #4
 80141b6:	bf14      	ite	ne
 80141b8:	2301      	movne	r3, #1
 80141ba:	2300      	moveq	r3, #0
 80141bc:	b2db      	uxtb	r3, r3
}
 80141be:	4618      	mov	r0, r3
 80141c0:	bd80      	pop	{r7, pc}
 80141c2:	bf00      	nop
 80141c4:	24000ebc 	.word	0x24000ebc

080141c8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80141c8:	b580      	push	{r7, lr}
 80141ca:	b082      	sub	sp, #8
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 80141d0:	6879      	ldr	r1, [r7, #4]
 80141d2:	4803      	ldr	r0, [pc, #12]	; (80141e0 <BSP_SD_GetCardInfo+0x18>)
 80141d4:	f7f9 fd72 	bl	800dcbc <HAL_SD_GetCardInfo>
}
 80141d8:	bf00      	nop
 80141da:	3708      	adds	r7, #8
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}
 80141e0:	24000ebc 	.word	0x24000ebc

080141e4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b082      	sub	sp, #8
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80141ec:	f000 f9a0 	bl	8014530 <BSP_SD_WriteCpltCallback>
}
 80141f0:	bf00      	nop
 80141f2:	3708      	adds	r7, #8
 80141f4:	46bd      	mov	sp, r7
 80141f6:	bd80      	pop	{r7, pc}

080141f8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b082      	sub	sp, #8
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8014200:	f000 f9a2 	bl	8014548 <BSP_SD_ReadCpltCallback>
}
 8014204:	bf00      	nop
 8014206:	3708      	adds	r7, #8
 8014208:	46bd      	mov	sp, r7
 801420a:	bd80      	pop	{r7, pc}

0801420c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801420c:	b580      	push	{r7, lr}
 801420e:	b082      	sub	sp, #8
 8014210:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8014212:	2301      	movs	r3, #1
 8014214:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8014216:	f000 f80b 	bl	8014230 <BSP_PlatformIsDetected>
 801421a:	4603      	mov	r3, r0
 801421c:	2b00      	cmp	r3, #0
 801421e:	d101      	bne.n	8014224 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8014220:	2300      	movs	r3, #0
 8014222:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8014224:	79fb      	ldrb	r3, [r7, #7]
 8014226:	b2db      	uxtb	r3, r3
}
 8014228:	4618      	mov	r0, r3
 801422a:	3708      	adds	r7, #8
 801422c:	46bd      	mov	sp, r7
 801422e:	bd80      	pop	{r7, pc}

08014230 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8014230:	b580      	push	{r7, lr}
 8014232:	b082      	sub	sp, #8
 8014234:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8014236:	2301      	movs	r3, #1
 8014238:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801423a:	2104      	movs	r1, #4
 801423c:	4806      	ldr	r0, [pc, #24]	; (8014258 <BSP_PlatformIsDetected+0x28>)
 801423e:	f7f3 fe7d 	bl	8007f3c <HAL_GPIO_ReadPin>
 8014242:	4603      	mov	r3, r0
 8014244:	2b00      	cmp	r3, #0
 8014246:	d001      	beq.n	801424c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8014248:	2300      	movs	r3, #0
 801424a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801424c:	79fb      	ldrb	r3, [r7, #7]
}
 801424e:	4618      	mov	r0, r3
 8014250:	3708      	adds	r7, #8
 8014252:	46bd      	mov	sp, r7
 8014254:	bd80      	pop	{r7, pc}
 8014256:	bf00      	nop
 8014258:	58020400 	.word	0x58020400

0801425c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801425c:	b580      	push	{r7, lr}
 801425e:	b084      	sub	sp, #16
 8014260:	af00      	add	r7, sp, #0
 8014262:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8014264:	f7ef fbc4 	bl	80039f0 <HAL_GetTick>
 8014268:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801426a:	e006      	b.n	801427a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801426c:	f7ff ff9c 	bl	80141a8 <BSP_SD_GetCardState>
 8014270:	4603      	mov	r3, r0
 8014272:	2b00      	cmp	r3, #0
 8014274:	d101      	bne.n	801427a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8014276:	2300      	movs	r3, #0
 8014278:	e009      	b.n	801428e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801427a:	f7ef fbb9 	bl	80039f0 <HAL_GetTick>
 801427e:	4602      	mov	r2, r0
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	1ad3      	subs	r3, r2, r3
 8014284:	687a      	ldr	r2, [r7, #4]
 8014286:	429a      	cmp	r2, r3
 8014288:	d8f0      	bhi.n	801426c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801428a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801428e:	4618      	mov	r0, r3
 8014290:	3710      	adds	r7, #16
 8014292:	46bd      	mov	sp, r7
 8014294:	bd80      	pop	{r7, pc}
	...

08014298 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014298:	b580      	push	{r7, lr}
 801429a:	b082      	sub	sp, #8
 801429c:	af00      	add	r7, sp, #0
 801429e:	4603      	mov	r3, r0
 80142a0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80142a2:	4b0b      	ldr	r3, [pc, #44]	; (80142d0 <SD_CheckStatus+0x38>)
 80142a4:	2201      	movs	r2, #1
 80142a6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80142a8:	f7ff ff7e 	bl	80141a8 <BSP_SD_GetCardState>
 80142ac:	4603      	mov	r3, r0
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d107      	bne.n	80142c2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80142b2:	4b07      	ldr	r3, [pc, #28]	; (80142d0 <SD_CheckStatus+0x38>)
 80142b4:	781b      	ldrb	r3, [r3, #0]
 80142b6:	b2db      	uxtb	r3, r3
 80142b8:	f023 0301 	bic.w	r3, r3, #1
 80142bc:	b2da      	uxtb	r2, r3
 80142be:	4b04      	ldr	r3, [pc, #16]	; (80142d0 <SD_CheckStatus+0x38>)
 80142c0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80142c2:	4b03      	ldr	r3, [pc, #12]	; (80142d0 <SD_CheckStatus+0x38>)
 80142c4:	781b      	ldrb	r3, [r3, #0]
 80142c6:	b2db      	uxtb	r3, r3
}
 80142c8:	4618      	mov	r0, r3
 80142ca:	3708      	adds	r7, #8
 80142cc:	46bd      	mov	sp, r7
 80142ce:	bd80      	pop	{r7, pc}
 80142d0:	2400000d 	.word	0x2400000d

080142d4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b082      	sub	sp, #8
 80142d8:	af00      	add	r7, sp, #0
 80142da:	4603      	mov	r3, r0
 80142dc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80142de:	f7ff ff09 	bl	80140f4 <BSP_SD_Init>
 80142e2:	4603      	mov	r3, r0
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d107      	bne.n	80142f8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80142e8:	79fb      	ldrb	r3, [r7, #7]
 80142ea:	4618      	mov	r0, r3
 80142ec:	f7ff ffd4 	bl	8014298 <SD_CheckStatus>
 80142f0:	4603      	mov	r3, r0
 80142f2:	461a      	mov	r2, r3
 80142f4:	4b04      	ldr	r3, [pc, #16]	; (8014308 <SD_initialize+0x34>)
 80142f6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80142f8:	4b03      	ldr	r3, [pc, #12]	; (8014308 <SD_initialize+0x34>)
 80142fa:	781b      	ldrb	r3, [r3, #0]
 80142fc:	b2db      	uxtb	r3, r3
}
 80142fe:	4618      	mov	r0, r3
 8014300:	3708      	adds	r7, #8
 8014302:	46bd      	mov	sp, r7
 8014304:	bd80      	pop	{r7, pc}
 8014306:	bf00      	nop
 8014308:	2400000d 	.word	0x2400000d

0801430c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801430c:	b580      	push	{r7, lr}
 801430e:	b082      	sub	sp, #8
 8014310:	af00      	add	r7, sp, #0
 8014312:	4603      	mov	r3, r0
 8014314:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8014316:	79fb      	ldrb	r3, [r7, #7]
 8014318:	4618      	mov	r0, r3
 801431a:	f7ff ffbd 	bl	8014298 <SD_CheckStatus>
 801431e:	4603      	mov	r3, r0
}
 8014320:	4618      	mov	r0, r3
 8014322:	3708      	adds	r7, #8
 8014324:	46bd      	mov	sp, r7
 8014326:	bd80      	pop	{r7, pc}

08014328 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014328:	b580      	push	{r7, lr}
 801432a:	b086      	sub	sp, #24
 801432c:	af00      	add	r7, sp, #0
 801432e:	60b9      	str	r1, [r7, #8]
 8014330:	607a      	str	r2, [r7, #4]
 8014332:	603b      	str	r3, [r7, #0]
 8014334:	4603      	mov	r3, r0
 8014336:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014338:	2301      	movs	r3, #1
 801433a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801433c:	f247 5030 	movw	r0, #30000	; 0x7530
 8014340:	f7ff ff8c 	bl	801425c <SD_CheckStatusWithTimeout>
 8014344:	4603      	mov	r3, r0
 8014346:	2b00      	cmp	r3, #0
 8014348:	da01      	bge.n	801434e <SD_read+0x26>
  {
    return res;
 801434a:	7dfb      	ldrb	r3, [r7, #23]
 801434c:	e03b      	b.n	80143c6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801434e:	683a      	ldr	r2, [r7, #0]
 8014350:	6879      	ldr	r1, [r7, #4]
 8014352:	68b8      	ldr	r0, [r7, #8]
 8014354:	f7ff fef4 	bl	8014140 <BSP_SD_ReadBlocks_DMA>
 8014358:	4603      	mov	r3, r0
 801435a:	2b00      	cmp	r3, #0
 801435c:	d132      	bne.n	80143c4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801435e:	4b1c      	ldr	r3, [pc, #112]	; (80143d0 <SD_read+0xa8>)
 8014360:	2200      	movs	r2, #0
 8014362:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8014364:	f7ef fb44 	bl	80039f0 <HAL_GetTick>
 8014368:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801436a:	bf00      	nop
 801436c:	4b18      	ldr	r3, [pc, #96]	; (80143d0 <SD_read+0xa8>)
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d108      	bne.n	8014386 <SD_read+0x5e>
 8014374:	f7ef fb3c 	bl	80039f0 <HAL_GetTick>
 8014378:	4602      	mov	r2, r0
 801437a:	693b      	ldr	r3, [r7, #16]
 801437c:	1ad3      	subs	r3, r2, r3
 801437e:	f247 522f 	movw	r2, #29999	; 0x752f
 8014382:	4293      	cmp	r3, r2
 8014384:	d9f2      	bls.n	801436c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8014386:	4b12      	ldr	r3, [pc, #72]	; (80143d0 <SD_read+0xa8>)
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d102      	bne.n	8014394 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801438e:	2301      	movs	r3, #1
 8014390:	75fb      	strb	r3, [r7, #23]
 8014392:	e017      	b.n	80143c4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8014394:	4b0e      	ldr	r3, [pc, #56]	; (80143d0 <SD_read+0xa8>)
 8014396:	2200      	movs	r2, #0
 8014398:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801439a:	f7ef fb29 	bl	80039f0 <HAL_GetTick>
 801439e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80143a0:	e007      	b.n	80143b2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80143a2:	f7ff ff01 	bl	80141a8 <BSP_SD_GetCardState>
 80143a6:	4603      	mov	r3, r0
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d102      	bne.n	80143b2 <SD_read+0x8a>
          {
            res = RES_OK;
 80143ac:	2300      	movs	r3, #0
 80143ae:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80143b0:	e008      	b.n	80143c4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80143b2:	f7ef fb1d 	bl	80039f0 <HAL_GetTick>
 80143b6:	4602      	mov	r2, r0
 80143b8:	693b      	ldr	r3, [r7, #16]
 80143ba:	1ad3      	subs	r3, r2, r3
 80143bc:	f247 522f 	movw	r2, #29999	; 0x752f
 80143c0:	4293      	cmp	r3, r2
 80143c2:	d9ee      	bls.n	80143a2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80143c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80143c6:	4618      	mov	r0, r3
 80143c8:	3718      	adds	r7, #24
 80143ca:	46bd      	mov	sp, r7
 80143cc:	bd80      	pop	{r7, pc}
 80143ce:	bf00      	nop
 80143d0:	240015e0 	.word	0x240015e0

080143d4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b086      	sub	sp, #24
 80143d8:	af00      	add	r7, sp, #0
 80143da:	60b9      	str	r1, [r7, #8]
 80143dc:	607a      	str	r2, [r7, #4]
 80143de:	603b      	str	r3, [r7, #0]
 80143e0:	4603      	mov	r3, r0
 80143e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80143e4:	2301      	movs	r3, #1
 80143e6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80143e8:	4b24      	ldr	r3, [pc, #144]	; (801447c <SD_write+0xa8>)
 80143ea:	2200      	movs	r2, #0
 80143ec:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80143ee:	f247 5030 	movw	r0, #30000	; 0x7530
 80143f2:	f7ff ff33 	bl	801425c <SD_CheckStatusWithTimeout>
 80143f6:	4603      	mov	r3, r0
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	da01      	bge.n	8014400 <SD_write+0x2c>
  {
    return res;
 80143fc:	7dfb      	ldrb	r3, [r7, #23]
 80143fe:	e038      	b.n	8014472 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8014400:	683a      	ldr	r2, [r7, #0]
 8014402:	6879      	ldr	r1, [r7, #4]
 8014404:	68b8      	ldr	r0, [r7, #8]
 8014406:	f7ff feb5 	bl	8014174 <BSP_SD_WriteBlocks_DMA>
 801440a:	4603      	mov	r3, r0
 801440c:	2b00      	cmp	r3, #0
 801440e:	d12f      	bne.n	8014470 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8014410:	f7ef faee 	bl	80039f0 <HAL_GetTick>
 8014414:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014416:	bf00      	nop
 8014418:	4b18      	ldr	r3, [pc, #96]	; (801447c <SD_write+0xa8>)
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d108      	bne.n	8014432 <SD_write+0x5e>
 8014420:	f7ef fae6 	bl	80039f0 <HAL_GetTick>
 8014424:	4602      	mov	r2, r0
 8014426:	693b      	ldr	r3, [r7, #16]
 8014428:	1ad3      	subs	r3, r2, r3
 801442a:	f247 522f 	movw	r2, #29999	; 0x752f
 801442e:	4293      	cmp	r3, r2
 8014430:	d9f2      	bls.n	8014418 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8014432:	4b12      	ldr	r3, [pc, #72]	; (801447c <SD_write+0xa8>)
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d102      	bne.n	8014440 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801443a:	2301      	movs	r3, #1
 801443c:	75fb      	strb	r3, [r7, #23]
 801443e:	e017      	b.n	8014470 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8014440:	4b0e      	ldr	r3, [pc, #56]	; (801447c <SD_write+0xa8>)
 8014442:	2200      	movs	r2, #0
 8014444:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014446:	f7ef fad3 	bl	80039f0 <HAL_GetTick>
 801444a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801444c:	e007      	b.n	801445e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801444e:	f7ff feab 	bl	80141a8 <BSP_SD_GetCardState>
 8014452:	4603      	mov	r3, r0
 8014454:	2b00      	cmp	r3, #0
 8014456:	d102      	bne.n	801445e <SD_write+0x8a>
          {
            res = RES_OK;
 8014458:	2300      	movs	r3, #0
 801445a:	75fb      	strb	r3, [r7, #23]
            break;
 801445c:	e008      	b.n	8014470 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801445e:	f7ef fac7 	bl	80039f0 <HAL_GetTick>
 8014462:	4602      	mov	r2, r0
 8014464:	693b      	ldr	r3, [r7, #16]
 8014466:	1ad3      	subs	r3, r2, r3
 8014468:	f247 522f 	movw	r2, #29999	; 0x752f
 801446c:	4293      	cmp	r3, r2
 801446e:	d9ee      	bls.n	801444e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8014470:	7dfb      	ldrb	r3, [r7, #23]
}
 8014472:	4618      	mov	r0, r3
 8014474:	3718      	adds	r7, #24
 8014476:	46bd      	mov	sp, r7
 8014478:	bd80      	pop	{r7, pc}
 801447a:	bf00      	nop
 801447c:	240015dc 	.word	0x240015dc

08014480 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014480:	b580      	push	{r7, lr}
 8014482:	b08c      	sub	sp, #48	; 0x30
 8014484:	af00      	add	r7, sp, #0
 8014486:	4603      	mov	r3, r0
 8014488:	603a      	str	r2, [r7, #0]
 801448a:	71fb      	strb	r3, [r7, #7]
 801448c:	460b      	mov	r3, r1
 801448e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014490:	2301      	movs	r3, #1
 8014492:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014496:	4b25      	ldr	r3, [pc, #148]	; (801452c <SD_ioctl+0xac>)
 8014498:	781b      	ldrb	r3, [r3, #0]
 801449a:	b2db      	uxtb	r3, r3
 801449c:	f003 0301 	and.w	r3, r3, #1
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d001      	beq.n	80144a8 <SD_ioctl+0x28>
 80144a4:	2303      	movs	r3, #3
 80144a6:	e03c      	b.n	8014522 <SD_ioctl+0xa2>

  switch (cmd)
 80144a8:	79bb      	ldrb	r3, [r7, #6]
 80144aa:	2b03      	cmp	r3, #3
 80144ac:	d834      	bhi.n	8014518 <SD_ioctl+0x98>
 80144ae:	a201      	add	r2, pc, #4	; (adr r2, 80144b4 <SD_ioctl+0x34>)
 80144b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144b4:	080144c5 	.word	0x080144c5
 80144b8:	080144cd 	.word	0x080144cd
 80144bc:	080144e5 	.word	0x080144e5
 80144c0:	080144ff 	.word	0x080144ff
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80144c4:	2300      	movs	r3, #0
 80144c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80144ca:	e028      	b.n	801451e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80144cc:	f107 0308 	add.w	r3, r7, #8
 80144d0:	4618      	mov	r0, r3
 80144d2:	f7ff fe79 	bl	80141c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80144d6:	6a3a      	ldr	r2, [r7, #32]
 80144d8:	683b      	ldr	r3, [r7, #0]
 80144da:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80144dc:	2300      	movs	r3, #0
 80144de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80144e2:	e01c      	b.n	801451e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80144e4:	f107 0308 	add.w	r3, r7, #8
 80144e8:	4618      	mov	r0, r3
 80144ea:	f7ff fe6d 	bl	80141c8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80144ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144f0:	b29a      	uxth	r2, r3
 80144f2:	683b      	ldr	r3, [r7, #0]
 80144f4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80144f6:	2300      	movs	r3, #0
 80144f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80144fc:	e00f      	b.n	801451e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80144fe:	f107 0308 	add.w	r3, r7, #8
 8014502:	4618      	mov	r0, r3
 8014504:	f7ff fe60 	bl	80141c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801450a:	0a5a      	lsrs	r2, r3, #9
 801450c:	683b      	ldr	r3, [r7, #0]
 801450e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014510:	2300      	movs	r3, #0
 8014512:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014516:	e002      	b.n	801451e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014518:	2304      	movs	r3, #4
 801451a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801451e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014522:	4618      	mov	r0, r3
 8014524:	3730      	adds	r7, #48	; 0x30
 8014526:	46bd      	mov	sp, r7
 8014528:	bd80      	pop	{r7, pc}
 801452a:	bf00      	nop
 801452c:	2400000d 	.word	0x2400000d

08014530 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8014530:	b480      	push	{r7}
 8014532:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8014534:	4b03      	ldr	r3, [pc, #12]	; (8014544 <BSP_SD_WriteCpltCallback+0x14>)
 8014536:	2201      	movs	r2, #1
 8014538:	601a      	str	r2, [r3, #0]
}
 801453a:	bf00      	nop
 801453c:	46bd      	mov	sp, r7
 801453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014542:	4770      	bx	lr
 8014544:	240015dc 	.word	0x240015dc

08014548 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014548:	b480      	push	{r7}
 801454a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 801454c:	4b03      	ldr	r3, [pc, #12]	; (801455c <BSP_SD_ReadCpltCallback+0x14>)
 801454e:	2201      	movs	r2, #1
 8014550:	601a      	str	r2, [r3, #0]
}
 8014552:	bf00      	nop
 8014554:	46bd      	mov	sp, r7
 8014556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801455a:	4770      	bx	lr
 801455c:	240015e0 	.word	0x240015e0

08014560 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014560:	b580      	push	{r7, lr}
 8014562:	b084      	sub	sp, #16
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]
 8014568:	460b      	mov	r3, r1
 801456a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801456c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014570:	f002 fd00 	bl	8016f74 <USBD_static_malloc>
 8014574:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d109      	bne.n	8014590 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	32b0      	adds	r2, #176	; 0xb0
 8014586:	2100      	movs	r1, #0
 8014588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801458c:	2302      	movs	r3, #2
 801458e:	e0d4      	b.n	801473a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014590:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8014594:	2100      	movs	r1, #0
 8014596:	68f8      	ldr	r0, [r7, #12]
 8014598:	f002 fd7e 	bl	8017098 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	32b0      	adds	r2, #176	; 0xb0
 80145a6:	68f9      	ldr	r1, [r7, #12]
 80145a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	32b0      	adds	r2, #176	; 0xb0
 80145b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	7c1b      	ldrb	r3, [r3, #16]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d138      	bne.n	801463a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80145c8:	4b5e      	ldr	r3, [pc, #376]	; (8014744 <USBD_CDC_Init+0x1e4>)
 80145ca:	7819      	ldrb	r1, [r3, #0]
 80145cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80145d0:	2202      	movs	r2, #2
 80145d2:	6878      	ldr	r0, [r7, #4]
 80145d4:	f002 fbab 	bl	8016d2e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80145d8:	4b5a      	ldr	r3, [pc, #360]	; (8014744 <USBD_CDC_Init+0x1e4>)
 80145da:	781b      	ldrb	r3, [r3, #0]
 80145dc:	f003 020f 	and.w	r2, r3, #15
 80145e0:	6879      	ldr	r1, [r7, #4]
 80145e2:	4613      	mov	r3, r2
 80145e4:	009b      	lsls	r3, r3, #2
 80145e6:	4413      	add	r3, r2
 80145e8:	009b      	lsls	r3, r3, #2
 80145ea:	440b      	add	r3, r1
 80145ec:	3324      	adds	r3, #36	; 0x24
 80145ee:	2201      	movs	r2, #1
 80145f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80145f2:	4b55      	ldr	r3, [pc, #340]	; (8014748 <USBD_CDC_Init+0x1e8>)
 80145f4:	7819      	ldrb	r1, [r3, #0]
 80145f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80145fa:	2202      	movs	r2, #2
 80145fc:	6878      	ldr	r0, [r7, #4]
 80145fe:	f002 fb96 	bl	8016d2e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014602:	4b51      	ldr	r3, [pc, #324]	; (8014748 <USBD_CDC_Init+0x1e8>)
 8014604:	781b      	ldrb	r3, [r3, #0]
 8014606:	f003 020f 	and.w	r2, r3, #15
 801460a:	6879      	ldr	r1, [r7, #4]
 801460c:	4613      	mov	r3, r2
 801460e:	009b      	lsls	r3, r3, #2
 8014610:	4413      	add	r3, r2
 8014612:	009b      	lsls	r3, r3, #2
 8014614:	440b      	add	r3, r1
 8014616:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801461a:	2201      	movs	r2, #1
 801461c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801461e:	4b4b      	ldr	r3, [pc, #300]	; (801474c <USBD_CDC_Init+0x1ec>)
 8014620:	781b      	ldrb	r3, [r3, #0]
 8014622:	f003 020f 	and.w	r2, r3, #15
 8014626:	6879      	ldr	r1, [r7, #4]
 8014628:	4613      	mov	r3, r2
 801462a:	009b      	lsls	r3, r3, #2
 801462c:	4413      	add	r3, r2
 801462e:	009b      	lsls	r3, r3, #2
 8014630:	440b      	add	r3, r1
 8014632:	3326      	adds	r3, #38	; 0x26
 8014634:	2210      	movs	r2, #16
 8014636:	801a      	strh	r2, [r3, #0]
 8014638:	e035      	b.n	80146a6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801463a:	4b42      	ldr	r3, [pc, #264]	; (8014744 <USBD_CDC_Init+0x1e4>)
 801463c:	7819      	ldrb	r1, [r3, #0]
 801463e:	2340      	movs	r3, #64	; 0x40
 8014640:	2202      	movs	r2, #2
 8014642:	6878      	ldr	r0, [r7, #4]
 8014644:	f002 fb73 	bl	8016d2e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014648:	4b3e      	ldr	r3, [pc, #248]	; (8014744 <USBD_CDC_Init+0x1e4>)
 801464a:	781b      	ldrb	r3, [r3, #0]
 801464c:	f003 020f 	and.w	r2, r3, #15
 8014650:	6879      	ldr	r1, [r7, #4]
 8014652:	4613      	mov	r3, r2
 8014654:	009b      	lsls	r3, r3, #2
 8014656:	4413      	add	r3, r2
 8014658:	009b      	lsls	r3, r3, #2
 801465a:	440b      	add	r3, r1
 801465c:	3324      	adds	r3, #36	; 0x24
 801465e:	2201      	movs	r2, #1
 8014660:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014662:	4b39      	ldr	r3, [pc, #228]	; (8014748 <USBD_CDC_Init+0x1e8>)
 8014664:	7819      	ldrb	r1, [r3, #0]
 8014666:	2340      	movs	r3, #64	; 0x40
 8014668:	2202      	movs	r2, #2
 801466a:	6878      	ldr	r0, [r7, #4]
 801466c:	f002 fb5f 	bl	8016d2e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014670:	4b35      	ldr	r3, [pc, #212]	; (8014748 <USBD_CDC_Init+0x1e8>)
 8014672:	781b      	ldrb	r3, [r3, #0]
 8014674:	f003 020f 	and.w	r2, r3, #15
 8014678:	6879      	ldr	r1, [r7, #4]
 801467a:	4613      	mov	r3, r2
 801467c:	009b      	lsls	r3, r3, #2
 801467e:	4413      	add	r3, r2
 8014680:	009b      	lsls	r3, r3, #2
 8014682:	440b      	add	r3, r1
 8014684:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014688:	2201      	movs	r2, #1
 801468a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801468c:	4b2f      	ldr	r3, [pc, #188]	; (801474c <USBD_CDC_Init+0x1ec>)
 801468e:	781b      	ldrb	r3, [r3, #0]
 8014690:	f003 020f 	and.w	r2, r3, #15
 8014694:	6879      	ldr	r1, [r7, #4]
 8014696:	4613      	mov	r3, r2
 8014698:	009b      	lsls	r3, r3, #2
 801469a:	4413      	add	r3, r2
 801469c:	009b      	lsls	r3, r3, #2
 801469e:	440b      	add	r3, r1
 80146a0:	3326      	adds	r3, #38	; 0x26
 80146a2:	2210      	movs	r2, #16
 80146a4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80146a6:	4b29      	ldr	r3, [pc, #164]	; (801474c <USBD_CDC_Init+0x1ec>)
 80146a8:	7819      	ldrb	r1, [r3, #0]
 80146aa:	2308      	movs	r3, #8
 80146ac:	2203      	movs	r2, #3
 80146ae:	6878      	ldr	r0, [r7, #4]
 80146b0:	f002 fb3d 	bl	8016d2e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80146b4:	4b25      	ldr	r3, [pc, #148]	; (801474c <USBD_CDC_Init+0x1ec>)
 80146b6:	781b      	ldrb	r3, [r3, #0]
 80146b8:	f003 020f 	and.w	r2, r3, #15
 80146bc:	6879      	ldr	r1, [r7, #4]
 80146be:	4613      	mov	r3, r2
 80146c0:	009b      	lsls	r3, r3, #2
 80146c2:	4413      	add	r3, r2
 80146c4:	009b      	lsls	r3, r3, #2
 80146c6:	440b      	add	r3, r1
 80146c8:	3324      	adds	r3, #36	; 0x24
 80146ca:	2201      	movs	r2, #1
 80146cc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	2200      	movs	r2, #0
 80146d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80146dc:	687a      	ldr	r2, [r7, #4]
 80146de:	33b0      	adds	r3, #176	; 0xb0
 80146e0:	009b      	lsls	r3, r3, #2
 80146e2:	4413      	add	r3, r2
 80146e4:	685b      	ldr	r3, [r3, #4]
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	2200      	movs	r2, #0
 80146ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	2200      	movs	r2, #0
 80146f6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8014700:	2b00      	cmp	r3, #0
 8014702:	d101      	bne.n	8014708 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8014704:	2302      	movs	r3, #2
 8014706:	e018      	b.n	801473a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	7c1b      	ldrb	r3, [r3, #16]
 801470c:	2b00      	cmp	r3, #0
 801470e:	d10a      	bne.n	8014726 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014710:	4b0d      	ldr	r3, [pc, #52]	; (8014748 <USBD_CDC_Init+0x1e8>)
 8014712:	7819      	ldrb	r1, [r3, #0]
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801471a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801471e:	6878      	ldr	r0, [r7, #4]
 8014720:	f002 fbf4 	bl	8016f0c <USBD_LL_PrepareReceive>
 8014724:	e008      	b.n	8014738 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014726:	4b08      	ldr	r3, [pc, #32]	; (8014748 <USBD_CDC_Init+0x1e8>)
 8014728:	7819      	ldrb	r1, [r3, #0]
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014730:	2340      	movs	r3, #64	; 0x40
 8014732:	6878      	ldr	r0, [r7, #4]
 8014734:	f002 fbea 	bl	8016f0c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014738:	2300      	movs	r3, #0
}
 801473a:	4618      	mov	r0, r3
 801473c:	3710      	adds	r7, #16
 801473e:	46bd      	mov	sp, r7
 8014740:	bd80      	pop	{r7, pc}
 8014742:	bf00      	nop
 8014744:	24000097 	.word	0x24000097
 8014748:	24000098 	.word	0x24000098
 801474c:	24000099 	.word	0x24000099

08014750 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014750:	b580      	push	{r7, lr}
 8014752:	b082      	sub	sp, #8
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
 8014758:	460b      	mov	r3, r1
 801475a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801475c:	4b3a      	ldr	r3, [pc, #232]	; (8014848 <USBD_CDC_DeInit+0xf8>)
 801475e:	781b      	ldrb	r3, [r3, #0]
 8014760:	4619      	mov	r1, r3
 8014762:	6878      	ldr	r0, [r7, #4]
 8014764:	f002 fb09 	bl	8016d7a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014768:	4b37      	ldr	r3, [pc, #220]	; (8014848 <USBD_CDC_DeInit+0xf8>)
 801476a:	781b      	ldrb	r3, [r3, #0]
 801476c:	f003 020f 	and.w	r2, r3, #15
 8014770:	6879      	ldr	r1, [r7, #4]
 8014772:	4613      	mov	r3, r2
 8014774:	009b      	lsls	r3, r3, #2
 8014776:	4413      	add	r3, r2
 8014778:	009b      	lsls	r3, r3, #2
 801477a:	440b      	add	r3, r1
 801477c:	3324      	adds	r3, #36	; 0x24
 801477e:	2200      	movs	r2, #0
 8014780:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8014782:	4b32      	ldr	r3, [pc, #200]	; (801484c <USBD_CDC_DeInit+0xfc>)
 8014784:	781b      	ldrb	r3, [r3, #0]
 8014786:	4619      	mov	r1, r3
 8014788:	6878      	ldr	r0, [r7, #4]
 801478a:	f002 faf6 	bl	8016d7a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801478e:	4b2f      	ldr	r3, [pc, #188]	; (801484c <USBD_CDC_DeInit+0xfc>)
 8014790:	781b      	ldrb	r3, [r3, #0]
 8014792:	f003 020f 	and.w	r2, r3, #15
 8014796:	6879      	ldr	r1, [r7, #4]
 8014798:	4613      	mov	r3, r2
 801479a:	009b      	lsls	r3, r3, #2
 801479c:	4413      	add	r3, r2
 801479e:	009b      	lsls	r3, r3, #2
 80147a0:	440b      	add	r3, r1
 80147a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80147a6:	2200      	movs	r2, #0
 80147a8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80147aa:	4b29      	ldr	r3, [pc, #164]	; (8014850 <USBD_CDC_DeInit+0x100>)
 80147ac:	781b      	ldrb	r3, [r3, #0]
 80147ae:	4619      	mov	r1, r3
 80147b0:	6878      	ldr	r0, [r7, #4]
 80147b2:	f002 fae2 	bl	8016d7a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80147b6:	4b26      	ldr	r3, [pc, #152]	; (8014850 <USBD_CDC_DeInit+0x100>)
 80147b8:	781b      	ldrb	r3, [r3, #0]
 80147ba:	f003 020f 	and.w	r2, r3, #15
 80147be:	6879      	ldr	r1, [r7, #4]
 80147c0:	4613      	mov	r3, r2
 80147c2:	009b      	lsls	r3, r3, #2
 80147c4:	4413      	add	r3, r2
 80147c6:	009b      	lsls	r3, r3, #2
 80147c8:	440b      	add	r3, r1
 80147ca:	3324      	adds	r3, #36	; 0x24
 80147cc:	2200      	movs	r2, #0
 80147ce:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80147d0:	4b1f      	ldr	r3, [pc, #124]	; (8014850 <USBD_CDC_DeInit+0x100>)
 80147d2:	781b      	ldrb	r3, [r3, #0]
 80147d4:	f003 020f 	and.w	r2, r3, #15
 80147d8:	6879      	ldr	r1, [r7, #4]
 80147da:	4613      	mov	r3, r2
 80147dc:	009b      	lsls	r3, r3, #2
 80147de:	4413      	add	r3, r2
 80147e0:	009b      	lsls	r3, r3, #2
 80147e2:	440b      	add	r3, r1
 80147e4:	3326      	adds	r3, #38	; 0x26
 80147e6:	2200      	movs	r2, #0
 80147e8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	32b0      	adds	r2, #176	; 0xb0
 80147f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d01f      	beq.n	801483c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014802:	687a      	ldr	r2, [r7, #4]
 8014804:	33b0      	adds	r3, #176	; 0xb0
 8014806:	009b      	lsls	r3, r3, #2
 8014808:	4413      	add	r3, r2
 801480a:	685b      	ldr	r3, [r3, #4]
 801480c:	685b      	ldr	r3, [r3, #4]
 801480e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	32b0      	adds	r2, #176	; 0xb0
 801481a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801481e:	4618      	mov	r0, r3
 8014820:	f002 fbb6 	bl	8016f90 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	32b0      	adds	r2, #176	; 0xb0
 801482e:	2100      	movs	r1, #0
 8014830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	2200      	movs	r2, #0
 8014838:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801483c:	2300      	movs	r3, #0
}
 801483e:	4618      	mov	r0, r3
 8014840:	3708      	adds	r7, #8
 8014842:	46bd      	mov	sp, r7
 8014844:	bd80      	pop	{r7, pc}
 8014846:	bf00      	nop
 8014848:	24000097 	.word	0x24000097
 801484c:	24000098 	.word	0x24000098
 8014850:	24000099 	.word	0x24000099

08014854 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014854:	b580      	push	{r7, lr}
 8014856:	b086      	sub	sp, #24
 8014858:	af00      	add	r7, sp, #0
 801485a:	6078      	str	r0, [r7, #4]
 801485c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	32b0      	adds	r2, #176	; 0xb0
 8014868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801486c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801486e:	2300      	movs	r3, #0
 8014870:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014872:	2300      	movs	r3, #0
 8014874:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014876:	2300      	movs	r3, #0
 8014878:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801487a:	693b      	ldr	r3, [r7, #16]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d101      	bne.n	8014884 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014880:	2303      	movs	r3, #3
 8014882:	e0bf      	b.n	8014a04 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014884:	683b      	ldr	r3, [r7, #0]
 8014886:	781b      	ldrb	r3, [r3, #0]
 8014888:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801488c:	2b00      	cmp	r3, #0
 801488e:	d050      	beq.n	8014932 <USBD_CDC_Setup+0xde>
 8014890:	2b20      	cmp	r3, #32
 8014892:	f040 80af 	bne.w	80149f4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014896:	683b      	ldr	r3, [r7, #0]
 8014898:	88db      	ldrh	r3, [r3, #6]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d03a      	beq.n	8014914 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801489e:	683b      	ldr	r3, [r7, #0]
 80148a0:	781b      	ldrb	r3, [r3, #0]
 80148a2:	b25b      	sxtb	r3, r3
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	da1b      	bge.n	80148e0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80148ae:	687a      	ldr	r2, [r7, #4]
 80148b0:	33b0      	adds	r3, #176	; 0xb0
 80148b2:	009b      	lsls	r3, r3, #2
 80148b4:	4413      	add	r3, r2
 80148b6:	685b      	ldr	r3, [r3, #4]
 80148b8:	689b      	ldr	r3, [r3, #8]
 80148ba:	683a      	ldr	r2, [r7, #0]
 80148bc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80148be:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80148c0:	683a      	ldr	r2, [r7, #0]
 80148c2:	88d2      	ldrh	r2, [r2, #6]
 80148c4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80148c6:	683b      	ldr	r3, [r7, #0]
 80148c8:	88db      	ldrh	r3, [r3, #6]
 80148ca:	2b07      	cmp	r3, #7
 80148cc:	bf28      	it	cs
 80148ce:	2307      	movcs	r3, #7
 80148d0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80148d2:	693b      	ldr	r3, [r7, #16]
 80148d4:	89fa      	ldrh	r2, [r7, #14]
 80148d6:	4619      	mov	r1, r3
 80148d8:	6878      	ldr	r0, [r7, #4]
 80148da:	f001 fd89 	bl	80163f0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80148de:	e090      	b.n	8014a02 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80148e0:	683b      	ldr	r3, [r7, #0]
 80148e2:	785a      	ldrb	r2, [r3, #1]
 80148e4:	693b      	ldr	r3, [r7, #16]
 80148e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80148ea:	683b      	ldr	r3, [r7, #0]
 80148ec:	88db      	ldrh	r3, [r3, #6]
 80148ee:	2b3f      	cmp	r3, #63	; 0x3f
 80148f0:	d803      	bhi.n	80148fa <USBD_CDC_Setup+0xa6>
 80148f2:	683b      	ldr	r3, [r7, #0]
 80148f4:	88db      	ldrh	r3, [r3, #6]
 80148f6:	b2da      	uxtb	r2, r3
 80148f8:	e000      	b.n	80148fc <USBD_CDC_Setup+0xa8>
 80148fa:	2240      	movs	r2, #64	; 0x40
 80148fc:	693b      	ldr	r3, [r7, #16]
 80148fe:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8014902:	6939      	ldr	r1, [r7, #16]
 8014904:	693b      	ldr	r3, [r7, #16]
 8014906:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801490a:	461a      	mov	r2, r3
 801490c:	6878      	ldr	r0, [r7, #4]
 801490e:	f001 fd9b 	bl	8016448 <USBD_CtlPrepareRx>
      break;
 8014912:	e076      	b.n	8014a02 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801491a:	687a      	ldr	r2, [r7, #4]
 801491c:	33b0      	adds	r3, #176	; 0xb0
 801491e:	009b      	lsls	r3, r3, #2
 8014920:	4413      	add	r3, r2
 8014922:	685b      	ldr	r3, [r3, #4]
 8014924:	689b      	ldr	r3, [r3, #8]
 8014926:	683a      	ldr	r2, [r7, #0]
 8014928:	7850      	ldrb	r0, [r2, #1]
 801492a:	2200      	movs	r2, #0
 801492c:	6839      	ldr	r1, [r7, #0]
 801492e:	4798      	blx	r3
      break;
 8014930:	e067      	b.n	8014a02 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014932:	683b      	ldr	r3, [r7, #0]
 8014934:	785b      	ldrb	r3, [r3, #1]
 8014936:	2b0b      	cmp	r3, #11
 8014938:	d851      	bhi.n	80149de <USBD_CDC_Setup+0x18a>
 801493a:	a201      	add	r2, pc, #4	; (adr r2, 8014940 <USBD_CDC_Setup+0xec>)
 801493c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014940:	08014971 	.word	0x08014971
 8014944:	080149ed 	.word	0x080149ed
 8014948:	080149df 	.word	0x080149df
 801494c:	080149df 	.word	0x080149df
 8014950:	080149df 	.word	0x080149df
 8014954:	080149df 	.word	0x080149df
 8014958:	080149df 	.word	0x080149df
 801495c:	080149df 	.word	0x080149df
 8014960:	080149df 	.word	0x080149df
 8014964:	080149df 	.word	0x080149df
 8014968:	0801499b 	.word	0x0801499b
 801496c:	080149c5 	.word	0x080149c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014976:	b2db      	uxtb	r3, r3
 8014978:	2b03      	cmp	r3, #3
 801497a:	d107      	bne.n	801498c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801497c:	f107 030a 	add.w	r3, r7, #10
 8014980:	2202      	movs	r2, #2
 8014982:	4619      	mov	r1, r3
 8014984:	6878      	ldr	r0, [r7, #4]
 8014986:	f001 fd33 	bl	80163f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801498a:	e032      	b.n	80149f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801498c:	6839      	ldr	r1, [r7, #0]
 801498e:	6878      	ldr	r0, [r7, #4]
 8014990:	f001 fcbd 	bl	801630e <USBD_CtlError>
            ret = USBD_FAIL;
 8014994:	2303      	movs	r3, #3
 8014996:	75fb      	strb	r3, [r7, #23]
          break;
 8014998:	e02b      	b.n	80149f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80149a0:	b2db      	uxtb	r3, r3
 80149a2:	2b03      	cmp	r3, #3
 80149a4:	d107      	bne.n	80149b6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80149a6:	f107 030d 	add.w	r3, r7, #13
 80149aa:	2201      	movs	r2, #1
 80149ac:	4619      	mov	r1, r3
 80149ae:	6878      	ldr	r0, [r7, #4]
 80149b0:	f001 fd1e 	bl	80163f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80149b4:	e01d      	b.n	80149f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80149b6:	6839      	ldr	r1, [r7, #0]
 80149b8:	6878      	ldr	r0, [r7, #4]
 80149ba:	f001 fca8 	bl	801630e <USBD_CtlError>
            ret = USBD_FAIL;
 80149be:	2303      	movs	r3, #3
 80149c0:	75fb      	strb	r3, [r7, #23]
          break;
 80149c2:	e016      	b.n	80149f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80149ca:	b2db      	uxtb	r3, r3
 80149cc:	2b03      	cmp	r3, #3
 80149ce:	d00f      	beq.n	80149f0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80149d0:	6839      	ldr	r1, [r7, #0]
 80149d2:	6878      	ldr	r0, [r7, #4]
 80149d4:	f001 fc9b 	bl	801630e <USBD_CtlError>
            ret = USBD_FAIL;
 80149d8:	2303      	movs	r3, #3
 80149da:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80149dc:	e008      	b.n	80149f0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80149de:	6839      	ldr	r1, [r7, #0]
 80149e0:	6878      	ldr	r0, [r7, #4]
 80149e2:	f001 fc94 	bl	801630e <USBD_CtlError>
          ret = USBD_FAIL;
 80149e6:	2303      	movs	r3, #3
 80149e8:	75fb      	strb	r3, [r7, #23]
          break;
 80149ea:	e002      	b.n	80149f2 <USBD_CDC_Setup+0x19e>
          break;
 80149ec:	bf00      	nop
 80149ee:	e008      	b.n	8014a02 <USBD_CDC_Setup+0x1ae>
          break;
 80149f0:	bf00      	nop
      }
      break;
 80149f2:	e006      	b.n	8014a02 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80149f4:	6839      	ldr	r1, [r7, #0]
 80149f6:	6878      	ldr	r0, [r7, #4]
 80149f8:	f001 fc89 	bl	801630e <USBD_CtlError>
      ret = USBD_FAIL;
 80149fc:	2303      	movs	r3, #3
 80149fe:	75fb      	strb	r3, [r7, #23]
      break;
 8014a00:	bf00      	nop
  }

  return (uint8_t)ret;
 8014a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a04:	4618      	mov	r0, r3
 8014a06:	3718      	adds	r7, #24
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	bd80      	pop	{r7, pc}

08014a0c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b084      	sub	sp, #16
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
 8014a14:	460b      	mov	r3, r1
 8014a16:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014a1e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	32b0      	adds	r2, #176	; 0xb0
 8014a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d101      	bne.n	8014a36 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8014a32:	2303      	movs	r3, #3
 8014a34:	e065      	b.n	8014b02 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	32b0      	adds	r2, #176	; 0xb0
 8014a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a44:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014a46:	78fb      	ldrb	r3, [r7, #3]
 8014a48:	f003 020f 	and.w	r2, r3, #15
 8014a4c:	6879      	ldr	r1, [r7, #4]
 8014a4e:	4613      	mov	r3, r2
 8014a50:	009b      	lsls	r3, r3, #2
 8014a52:	4413      	add	r3, r2
 8014a54:	009b      	lsls	r3, r3, #2
 8014a56:	440b      	add	r3, r1
 8014a58:	3318      	adds	r3, #24
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d02f      	beq.n	8014ac0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014a60:	78fb      	ldrb	r3, [r7, #3]
 8014a62:	f003 020f 	and.w	r2, r3, #15
 8014a66:	6879      	ldr	r1, [r7, #4]
 8014a68:	4613      	mov	r3, r2
 8014a6a:	009b      	lsls	r3, r3, #2
 8014a6c:	4413      	add	r3, r2
 8014a6e:	009b      	lsls	r3, r3, #2
 8014a70:	440b      	add	r3, r1
 8014a72:	3318      	adds	r3, #24
 8014a74:	681a      	ldr	r2, [r3, #0]
 8014a76:	78fb      	ldrb	r3, [r7, #3]
 8014a78:	f003 010f 	and.w	r1, r3, #15
 8014a7c:	68f8      	ldr	r0, [r7, #12]
 8014a7e:	460b      	mov	r3, r1
 8014a80:	00db      	lsls	r3, r3, #3
 8014a82:	440b      	add	r3, r1
 8014a84:	009b      	lsls	r3, r3, #2
 8014a86:	4403      	add	r3, r0
 8014a88:	3344      	adds	r3, #68	; 0x44
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	fbb2 f1f3 	udiv	r1, r2, r3
 8014a90:	fb01 f303 	mul.w	r3, r1, r3
 8014a94:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d112      	bne.n	8014ac0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014a9a:	78fb      	ldrb	r3, [r7, #3]
 8014a9c:	f003 020f 	and.w	r2, r3, #15
 8014aa0:	6879      	ldr	r1, [r7, #4]
 8014aa2:	4613      	mov	r3, r2
 8014aa4:	009b      	lsls	r3, r3, #2
 8014aa6:	4413      	add	r3, r2
 8014aa8:	009b      	lsls	r3, r3, #2
 8014aaa:	440b      	add	r3, r1
 8014aac:	3318      	adds	r3, #24
 8014aae:	2200      	movs	r2, #0
 8014ab0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014ab2:	78f9      	ldrb	r1, [r7, #3]
 8014ab4:	2300      	movs	r3, #0
 8014ab6:	2200      	movs	r2, #0
 8014ab8:	6878      	ldr	r0, [r7, #4]
 8014aba:	f002 fa06 	bl	8016eca <USBD_LL_Transmit>
 8014abe:	e01f      	b.n	8014b00 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014ac0:	68bb      	ldr	r3, [r7, #8]
 8014ac2:	2200      	movs	r2, #0
 8014ac4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014ace:	687a      	ldr	r2, [r7, #4]
 8014ad0:	33b0      	adds	r3, #176	; 0xb0
 8014ad2:	009b      	lsls	r3, r3, #2
 8014ad4:	4413      	add	r3, r2
 8014ad6:	685b      	ldr	r3, [r3, #4]
 8014ad8:	691b      	ldr	r3, [r3, #16]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d010      	beq.n	8014b00 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014ae4:	687a      	ldr	r2, [r7, #4]
 8014ae6:	33b0      	adds	r3, #176	; 0xb0
 8014ae8:	009b      	lsls	r3, r3, #2
 8014aea:	4413      	add	r3, r2
 8014aec:	685b      	ldr	r3, [r3, #4]
 8014aee:	691b      	ldr	r3, [r3, #16]
 8014af0:	68ba      	ldr	r2, [r7, #8]
 8014af2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014af6:	68ba      	ldr	r2, [r7, #8]
 8014af8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014afc:	78fa      	ldrb	r2, [r7, #3]
 8014afe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014b00:	2300      	movs	r3, #0
}
 8014b02:	4618      	mov	r0, r3
 8014b04:	3710      	adds	r7, #16
 8014b06:	46bd      	mov	sp, r7
 8014b08:	bd80      	pop	{r7, pc}

08014b0a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014b0a:	b580      	push	{r7, lr}
 8014b0c:	b084      	sub	sp, #16
 8014b0e:	af00      	add	r7, sp, #0
 8014b10:	6078      	str	r0, [r7, #4]
 8014b12:	460b      	mov	r3, r1
 8014b14:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	32b0      	adds	r2, #176	; 0xb0
 8014b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b24:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	32b0      	adds	r2, #176	; 0xb0
 8014b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d101      	bne.n	8014b3c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014b38:	2303      	movs	r3, #3
 8014b3a:	e01a      	b.n	8014b72 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014b3c:	78fb      	ldrb	r3, [r7, #3]
 8014b3e:	4619      	mov	r1, r3
 8014b40:	6878      	ldr	r0, [r7, #4]
 8014b42:	f002 fa04 	bl	8016f4e <USBD_LL_GetRxDataSize>
 8014b46:	4602      	mov	r2, r0
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b54:	687a      	ldr	r2, [r7, #4]
 8014b56:	33b0      	adds	r3, #176	; 0xb0
 8014b58:	009b      	lsls	r3, r3, #2
 8014b5a:	4413      	add	r3, r2
 8014b5c:	685b      	ldr	r3, [r3, #4]
 8014b5e:	68db      	ldr	r3, [r3, #12]
 8014b60:	68fa      	ldr	r2, [r7, #12]
 8014b62:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014b66:	68fa      	ldr	r2, [r7, #12]
 8014b68:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014b6c:	4611      	mov	r1, r2
 8014b6e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014b70:	2300      	movs	r3, #0
}
 8014b72:	4618      	mov	r0, r3
 8014b74:	3710      	adds	r7, #16
 8014b76:	46bd      	mov	sp, r7
 8014b78:	bd80      	pop	{r7, pc}

08014b7a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014b7a:	b580      	push	{r7, lr}
 8014b7c:	b084      	sub	sp, #16
 8014b7e:	af00      	add	r7, sp, #0
 8014b80:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	32b0      	adds	r2, #176	; 0xb0
 8014b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b90:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d101      	bne.n	8014b9c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014b98:	2303      	movs	r3, #3
 8014b9a:	e025      	b.n	8014be8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014ba2:	687a      	ldr	r2, [r7, #4]
 8014ba4:	33b0      	adds	r3, #176	; 0xb0
 8014ba6:	009b      	lsls	r3, r3, #2
 8014ba8:	4413      	add	r3, r2
 8014baa:	685b      	ldr	r3, [r3, #4]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d01a      	beq.n	8014be6 <USBD_CDC_EP0_RxReady+0x6c>
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014bb6:	2bff      	cmp	r3, #255	; 0xff
 8014bb8:	d015      	beq.n	8014be6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014bc0:	687a      	ldr	r2, [r7, #4]
 8014bc2:	33b0      	adds	r3, #176	; 0xb0
 8014bc4:	009b      	lsls	r3, r3, #2
 8014bc6:	4413      	add	r3, r2
 8014bc8:	685b      	ldr	r3, [r3, #4]
 8014bca:	689b      	ldr	r3, [r3, #8]
 8014bcc:	68fa      	ldr	r2, [r7, #12]
 8014bce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8014bd2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014bd4:	68fa      	ldr	r2, [r7, #12]
 8014bd6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014bda:	b292      	uxth	r2, r2
 8014bdc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	22ff      	movs	r2, #255	; 0xff
 8014be2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014be6:	2300      	movs	r3, #0
}
 8014be8:	4618      	mov	r0, r3
 8014bea:	3710      	adds	r7, #16
 8014bec:	46bd      	mov	sp, r7
 8014bee:	bd80      	pop	{r7, pc}

08014bf0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014bf0:	b580      	push	{r7, lr}
 8014bf2:	b086      	sub	sp, #24
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014bf8:	2182      	movs	r1, #130	; 0x82
 8014bfa:	4818      	ldr	r0, [pc, #96]	; (8014c5c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014bfc:	f000 fd4f 	bl	801569e <USBD_GetEpDesc>
 8014c00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014c02:	2101      	movs	r1, #1
 8014c04:	4815      	ldr	r0, [pc, #84]	; (8014c5c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014c06:	f000 fd4a 	bl	801569e <USBD_GetEpDesc>
 8014c0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014c0c:	2181      	movs	r1, #129	; 0x81
 8014c0e:	4813      	ldr	r0, [pc, #76]	; (8014c5c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014c10:	f000 fd45 	bl	801569e <USBD_GetEpDesc>
 8014c14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014c16:	697b      	ldr	r3, [r7, #20]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d002      	beq.n	8014c22 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014c1c:	697b      	ldr	r3, [r7, #20]
 8014c1e:	2210      	movs	r2, #16
 8014c20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014c22:	693b      	ldr	r3, [r7, #16]
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d006      	beq.n	8014c36 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014c28:	693b      	ldr	r3, [r7, #16]
 8014c2a:	2200      	movs	r2, #0
 8014c2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014c30:	711a      	strb	r2, [r3, #4]
 8014c32:	2200      	movs	r2, #0
 8014c34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d006      	beq.n	8014c4a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	2200      	movs	r2, #0
 8014c40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014c44:	711a      	strb	r2, [r3, #4]
 8014c46:	2200      	movs	r2, #0
 8014c48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	2243      	movs	r2, #67	; 0x43
 8014c4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014c50:	4b02      	ldr	r3, [pc, #8]	; (8014c5c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014c52:	4618      	mov	r0, r3
 8014c54:	3718      	adds	r7, #24
 8014c56:	46bd      	mov	sp, r7
 8014c58:	bd80      	pop	{r7, pc}
 8014c5a:	bf00      	nop
 8014c5c:	24000054 	.word	0x24000054

08014c60 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014c60:	b580      	push	{r7, lr}
 8014c62:	b086      	sub	sp, #24
 8014c64:	af00      	add	r7, sp, #0
 8014c66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014c68:	2182      	movs	r1, #130	; 0x82
 8014c6a:	4818      	ldr	r0, [pc, #96]	; (8014ccc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014c6c:	f000 fd17 	bl	801569e <USBD_GetEpDesc>
 8014c70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014c72:	2101      	movs	r1, #1
 8014c74:	4815      	ldr	r0, [pc, #84]	; (8014ccc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014c76:	f000 fd12 	bl	801569e <USBD_GetEpDesc>
 8014c7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014c7c:	2181      	movs	r1, #129	; 0x81
 8014c7e:	4813      	ldr	r0, [pc, #76]	; (8014ccc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014c80:	f000 fd0d 	bl	801569e <USBD_GetEpDesc>
 8014c84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014c86:	697b      	ldr	r3, [r7, #20]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d002      	beq.n	8014c92 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014c8c:	697b      	ldr	r3, [r7, #20]
 8014c8e:	2210      	movs	r2, #16
 8014c90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014c92:	693b      	ldr	r3, [r7, #16]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d006      	beq.n	8014ca6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014c98:	693b      	ldr	r3, [r7, #16]
 8014c9a:	2200      	movs	r2, #0
 8014c9c:	711a      	strb	r2, [r3, #4]
 8014c9e:	2200      	movs	r2, #0
 8014ca0:	f042 0202 	orr.w	r2, r2, #2
 8014ca4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d006      	beq.n	8014cba <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	2200      	movs	r2, #0
 8014cb0:	711a      	strb	r2, [r3, #4]
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	f042 0202 	orr.w	r2, r2, #2
 8014cb8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	2243      	movs	r2, #67	; 0x43
 8014cbe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014cc0:	4b02      	ldr	r3, [pc, #8]	; (8014ccc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	3718      	adds	r7, #24
 8014cc6:	46bd      	mov	sp, r7
 8014cc8:	bd80      	pop	{r7, pc}
 8014cca:	bf00      	nop
 8014ccc:	24000054 	.word	0x24000054

08014cd0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014cd0:	b580      	push	{r7, lr}
 8014cd2:	b086      	sub	sp, #24
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014cd8:	2182      	movs	r1, #130	; 0x82
 8014cda:	4818      	ldr	r0, [pc, #96]	; (8014d3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014cdc:	f000 fcdf 	bl	801569e <USBD_GetEpDesc>
 8014ce0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014ce2:	2101      	movs	r1, #1
 8014ce4:	4815      	ldr	r0, [pc, #84]	; (8014d3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014ce6:	f000 fcda 	bl	801569e <USBD_GetEpDesc>
 8014cea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014cec:	2181      	movs	r1, #129	; 0x81
 8014cee:	4813      	ldr	r0, [pc, #76]	; (8014d3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014cf0:	f000 fcd5 	bl	801569e <USBD_GetEpDesc>
 8014cf4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014cf6:	697b      	ldr	r3, [r7, #20]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d002      	beq.n	8014d02 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014cfc:	697b      	ldr	r3, [r7, #20]
 8014cfe:	2210      	movs	r2, #16
 8014d00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014d02:	693b      	ldr	r3, [r7, #16]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d006      	beq.n	8014d16 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014d08:	693b      	ldr	r3, [r7, #16]
 8014d0a:	2200      	movs	r2, #0
 8014d0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014d10:	711a      	strb	r2, [r3, #4]
 8014d12:	2200      	movs	r2, #0
 8014d14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d006      	beq.n	8014d2a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	2200      	movs	r2, #0
 8014d20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014d24:	711a      	strb	r2, [r3, #4]
 8014d26:	2200      	movs	r2, #0
 8014d28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	2243      	movs	r2, #67	; 0x43
 8014d2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014d30:	4b02      	ldr	r3, [pc, #8]	; (8014d3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8014d32:	4618      	mov	r0, r3
 8014d34:	3718      	adds	r7, #24
 8014d36:	46bd      	mov	sp, r7
 8014d38:	bd80      	pop	{r7, pc}
 8014d3a:	bf00      	nop
 8014d3c:	24000054 	.word	0x24000054

08014d40 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014d40:	b480      	push	{r7}
 8014d42:	b083      	sub	sp, #12
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	220a      	movs	r2, #10
 8014d4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014d4e:	4b03      	ldr	r3, [pc, #12]	; (8014d5c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014d50:	4618      	mov	r0, r3
 8014d52:	370c      	adds	r7, #12
 8014d54:	46bd      	mov	sp, r7
 8014d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5a:	4770      	bx	lr
 8014d5c:	24000010 	.word	0x24000010

08014d60 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014d60:	b480      	push	{r7}
 8014d62:	b083      	sub	sp, #12
 8014d64:	af00      	add	r7, sp, #0
 8014d66:	6078      	str	r0, [r7, #4]
 8014d68:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014d6a:	683b      	ldr	r3, [r7, #0]
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d101      	bne.n	8014d74 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014d70:	2303      	movs	r3, #3
 8014d72:	e009      	b.n	8014d88 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014d7a:	687a      	ldr	r2, [r7, #4]
 8014d7c:	33b0      	adds	r3, #176	; 0xb0
 8014d7e:	009b      	lsls	r3, r3, #2
 8014d80:	4413      	add	r3, r2
 8014d82:	683a      	ldr	r2, [r7, #0]
 8014d84:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014d86:	2300      	movs	r3, #0
}
 8014d88:	4618      	mov	r0, r3
 8014d8a:	370c      	adds	r7, #12
 8014d8c:	46bd      	mov	sp, r7
 8014d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d92:	4770      	bx	lr

08014d94 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014d94:	b480      	push	{r7}
 8014d96:	b087      	sub	sp, #28
 8014d98:	af00      	add	r7, sp, #0
 8014d9a:	60f8      	str	r0, [r7, #12]
 8014d9c:	60b9      	str	r1, [r7, #8]
 8014d9e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	32b0      	adds	r2, #176	; 0xb0
 8014daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dae:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014db0:	697b      	ldr	r3, [r7, #20]
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d101      	bne.n	8014dba <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014db6:	2303      	movs	r3, #3
 8014db8:	e008      	b.n	8014dcc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014dba:	697b      	ldr	r3, [r7, #20]
 8014dbc:	68ba      	ldr	r2, [r7, #8]
 8014dbe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014dc2:	697b      	ldr	r3, [r7, #20]
 8014dc4:	687a      	ldr	r2, [r7, #4]
 8014dc6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014dca:	2300      	movs	r3, #0
}
 8014dcc:	4618      	mov	r0, r3
 8014dce:	371c      	adds	r7, #28
 8014dd0:	46bd      	mov	sp, r7
 8014dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd6:	4770      	bx	lr

08014dd8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014dd8:	b480      	push	{r7}
 8014dda:	b085      	sub	sp, #20
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
 8014de0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	32b0      	adds	r2, #176	; 0xb0
 8014dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014df0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d101      	bne.n	8014dfc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014df8:	2303      	movs	r3, #3
 8014dfa:	e004      	b.n	8014e06 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	683a      	ldr	r2, [r7, #0]
 8014e00:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014e04:	2300      	movs	r3, #0
}
 8014e06:	4618      	mov	r0, r3
 8014e08:	3714      	adds	r7, #20
 8014e0a:	46bd      	mov	sp, r7
 8014e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e10:	4770      	bx	lr
	...

08014e14 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014e14:	b580      	push	{r7, lr}
 8014e16:	b084      	sub	sp, #16
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	32b0      	adds	r2, #176	; 0xb0
 8014e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e2a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014e2c:	2301      	movs	r3, #1
 8014e2e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014e30:	68bb      	ldr	r3, [r7, #8]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d101      	bne.n	8014e3a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014e36:	2303      	movs	r3, #3
 8014e38:	e025      	b.n	8014e86 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014e3a:	68bb      	ldr	r3, [r7, #8]
 8014e3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d11f      	bne.n	8014e84 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014e44:	68bb      	ldr	r3, [r7, #8]
 8014e46:	2201      	movs	r2, #1
 8014e48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014e4c:	4b10      	ldr	r3, [pc, #64]	; (8014e90 <USBD_CDC_TransmitPacket+0x7c>)
 8014e4e:	781b      	ldrb	r3, [r3, #0]
 8014e50:	f003 020f 	and.w	r2, r3, #15
 8014e54:	68bb      	ldr	r3, [r7, #8]
 8014e56:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8014e5a:	6878      	ldr	r0, [r7, #4]
 8014e5c:	4613      	mov	r3, r2
 8014e5e:	009b      	lsls	r3, r3, #2
 8014e60:	4413      	add	r3, r2
 8014e62:	009b      	lsls	r3, r3, #2
 8014e64:	4403      	add	r3, r0
 8014e66:	3318      	adds	r3, #24
 8014e68:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014e6a:	4b09      	ldr	r3, [pc, #36]	; (8014e90 <USBD_CDC_TransmitPacket+0x7c>)
 8014e6c:	7819      	ldrb	r1, [r3, #0]
 8014e6e:	68bb      	ldr	r3, [r7, #8]
 8014e70:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014e74:	68bb      	ldr	r3, [r7, #8]
 8014e76:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014e7a:	6878      	ldr	r0, [r7, #4]
 8014e7c:	f002 f825 	bl	8016eca <USBD_LL_Transmit>

    ret = USBD_OK;
 8014e80:	2300      	movs	r3, #0
 8014e82:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e86:	4618      	mov	r0, r3
 8014e88:	3710      	adds	r7, #16
 8014e8a:	46bd      	mov	sp, r7
 8014e8c:	bd80      	pop	{r7, pc}
 8014e8e:	bf00      	nop
 8014e90:	24000097 	.word	0x24000097

08014e94 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014e94:	b580      	push	{r7, lr}
 8014e96:	b084      	sub	sp, #16
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	32b0      	adds	r2, #176	; 0xb0
 8014ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014eaa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	32b0      	adds	r2, #176	; 0xb0
 8014eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d101      	bne.n	8014ec2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014ebe:	2303      	movs	r3, #3
 8014ec0:	e018      	b.n	8014ef4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	7c1b      	ldrb	r3, [r3, #16]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d10a      	bne.n	8014ee0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014eca:	4b0c      	ldr	r3, [pc, #48]	; (8014efc <USBD_CDC_ReceivePacket+0x68>)
 8014ecc:	7819      	ldrb	r1, [r3, #0]
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014ed8:	6878      	ldr	r0, [r7, #4]
 8014eda:	f002 f817 	bl	8016f0c <USBD_LL_PrepareReceive>
 8014ede:	e008      	b.n	8014ef2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014ee0:	4b06      	ldr	r3, [pc, #24]	; (8014efc <USBD_CDC_ReceivePacket+0x68>)
 8014ee2:	7819      	ldrb	r1, [r3, #0]
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014eea:	2340      	movs	r3, #64	; 0x40
 8014eec:	6878      	ldr	r0, [r7, #4]
 8014eee:	f002 f80d 	bl	8016f0c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014ef2:	2300      	movs	r3, #0
}
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	3710      	adds	r7, #16
 8014ef8:	46bd      	mov	sp, r7
 8014efa:	bd80      	pop	{r7, pc}
 8014efc:	24000098 	.word	0x24000098

08014f00 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014f00:	b580      	push	{r7, lr}
 8014f02:	b086      	sub	sp, #24
 8014f04:	af00      	add	r7, sp, #0
 8014f06:	60f8      	str	r0, [r7, #12]
 8014f08:	60b9      	str	r1, [r7, #8]
 8014f0a:	4613      	mov	r3, r2
 8014f0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d101      	bne.n	8014f18 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014f14:	2303      	movs	r3, #3
 8014f16:	e01f      	b.n	8014f58 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	2200      	movs	r2, #0
 8014f1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	2200      	movs	r2, #0
 8014f24:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	2200      	movs	r2, #0
 8014f2c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014f30:	68bb      	ldr	r3, [r7, #8]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d003      	beq.n	8014f3e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	68ba      	ldr	r2, [r7, #8]
 8014f3a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	2201      	movs	r2, #1
 8014f42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	79fa      	ldrb	r2, [r7, #7]
 8014f4a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014f4c:	68f8      	ldr	r0, [r7, #12]
 8014f4e:	f001 fe81 	bl	8016c54 <USBD_LL_Init>
 8014f52:	4603      	mov	r3, r0
 8014f54:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f58:	4618      	mov	r0, r3
 8014f5a:	3718      	adds	r7, #24
 8014f5c:	46bd      	mov	sp, r7
 8014f5e:	bd80      	pop	{r7, pc}

08014f60 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b084      	sub	sp, #16
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	6078      	str	r0, [r7, #4]
 8014f68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014f6e:	683b      	ldr	r3, [r7, #0]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d101      	bne.n	8014f78 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014f74:	2303      	movs	r3, #3
 8014f76:	e025      	b.n	8014fc4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	683a      	ldr	r2, [r7, #0]
 8014f7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	32ae      	adds	r2, #174	; 0xae
 8014f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d00f      	beq.n	8014fb4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	32ae      	adds	r2, #174	; 0xae
 8014f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fa4:	f107 020e 	add.w	r2, r7, #14
 8014fa8:	4610      	mov	r0, r2
 8014faa:	4798      	blx	r3
 8014fac:	4602      	mov	r2, r0
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014fba:	1c5a      	adds	r2, r3, #1
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8014fc2:	2300      	movs	r3, #0
}
 8014fc4:	4618      	mov	r0, r3
 8014fc6:	3710      	adds	r7, #16
 8014fc8:	46bd      	mov	sp, r7
 8014fca:	bd80      	pop	{r7, pc}

08014fcc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b082      	sub	sp, #8
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014fd4:	6878      	ldr	r0, [r7, #4]
 8014fd6:	f001 fe8f 	bl	8016cf8 <USBD_LL_Start>
 8014fda:	4603      	mov	r3, r0
}
 8014fdc:	4618      	mov	r0, r3
 8014fde:	3708      	adds	r7, #8
 8014fe0:	46bd      	mov	sp, r7
 8014fe2:	bd80      	pop	{r7, pc}

08014fe4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8014fe4:	b480      	push	{r7}
 8014fe6:	b083      	sub	sp, #12
 8014fe8:	af00      	add	r7, sp, #0
 8014fea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014fec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8014fee:	4618      	mov	r0, r3
 8014ff0:	370c      	adds	r7, #12
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff8:	4770      	bx	lr

08014ffa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014ffa:	b580      	push	{r7, lr}
 8014ffc:	b084      	sub	sp, #16
 8014ffe:	af00      	add	r7, sp, #0
 8015000:	6078      	str	r0, [r7, #4]
 8015002:	460b      	mov	r3, r1
 8015004:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015006:	2300      	movs	r3, #0
 8015008:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015010:	2b00      	cmp	r3, #0
 8015012:	d009      	beq.n	8015028 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	78fa      	ldrb	r2, [r7, #3]
 801501e:	4611      	mov	r1, r2
 8015020:	6878      	ldr	r0, [r7, #4]
 8015022:	4798      	blx	r3
 8015024:	4603      	mov	r3, r0
 8015026:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015028:	7bfb      	ldrb	r3, [r7, #15]
}
 801502a:	4618      	mov	r0, r3
 801502c:	3710      	adds	r7, #16
 801502e:	46bd      	mov	sp, r7
 8015030:	bd80      	pop	{r7, pc}

08015032 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015032:	b580      	push	{r7, lr}
 8015034:	b084      	sub	sp, #16
 8015036:	af00      	add	r7, sp, #0
 8015038:	6078      	str	r0, [r7, #4]
 801503a:	460b      	mov	r3, r1
 801503c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801503e:	2300      	movs	r3, #0
 8015040:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015048:	685b      	ldr	r3, [r3, #4]
 801504a:	78fa      	ldrb	r2, [r7, #3]
 801504c:	4611      	mov	r1, r2
 801504e:	6878      	ldr	r0, [r7, #4]
 8015050:	4798      	blx	r3
 8015052:	4603      	mov	r3, r0
 8015054:	2b00      	cmp	r3, #0
 8015056:	d001      	beq.n	801505c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015058:	2303      	movs	r3, #3
 801505a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801505c:	7bfb      	ldrb	r3, [r7, #15]
}
 801505e:	4618      	mov	r0, r3
 8015060:	3710      	adds	r7, #16
 8015062:	46bd      	mov	sp, r7
 8015064:	bd80      	pop	{r7, pc}

08015066 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015066:	b580      	push	{r7, lr}
 8015068:	b084      	sub	sp, #16
 801506a:	af00      	add	r7, sp, #0
 801506c:	6078      	str	r0, [r7, #4]
 801506e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015076:	6839      	ldr	r1, [r7, #0]
 8015078:	4618      	mov	r0, r3
 801507a:	f001 f90e 	bl	801629a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	2201      	movs	r2, #1
 8015082:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801508c:	461a      	mov	r2, r3
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801509a:	f003 031f 	and.w	r3, r3, #31
 801509e:	2b02      	cmp	r3, #2
 80150a0:	d01a      	beq.n	80150d8 <USBD_LL_SetupStage+0x72>
 80150a2:	2b02      	cmp	r3, #2
 80150a4:	d822      	bhi.n	80150ec <USBD_LL_SetupStage+0x86>
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d002      	beq.n	80150b0 <USBD_LL_SetupStage+0x4a>
 80150aa:	2b01      	cmp	r3, #1
 80150ac:	d00a      	beq.n	80150c4 <USBD_LL_SetupStage+0x5e>
 80150ae:	e01d      	b.n	80150ec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80150b6:	4619      	mov	r1, r3
 80150b8:	6878      	ldr	r0, [r7, #4]
 80150ba:	f000 fb65 	bl	8015788 <USBD_StdDevReq>
 80150be:	4603      	mov	r3, r0
 80150c0:	73fb      	strb	r3, [r7, #15]
      break;
 80150c2:	e020      	b.n	8015106 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80150ca:	4619      	mov	r1, r3
 80150cc:	6878      	ldr	r0, [r7, #4]
 80150ce:	f000 fbcd 	bl	801586c <USBD_StdItfReq>
 80150d2:	4603      	mov	r3, r0
 80150d4:	73fb      	strb	r3, [r7, #15]
      break;
 80150d6:	e016      	b.n	8015106 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80150de:	4619      	mov	r1, r3
 80150e0:	6878      	ldr	r0, [r7, #4]
 80150e2:	f000 fc2f 	bl	8015944 <USBD_StdEPReq>
 80150e6:	4603      	mov	r3, r0
 80150e8:	73fb      	strb	r3, [r7, #15]
      break;
 80150ea:	e00c      	b.n	8015106 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80150f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80150f6:	b2db      	uxtb	r3, r3
 80150f8:	4619      	mov	r1, r3
 80150fa:	6878      	ldr	r0, [r7, #4]
 80150fc:	f001 fe5c 	bl	8016db8 <USBD_LL_StallEP>
 8015100:	4603      	mov	r3, r0
 8015102:	73fb      	strb	r3, [r7, #15]
      break;
 8015104:	bf00      	nop
  }

  return ret;
 8015106:	7bfb      	ldrb	r3, [r7, #15]
}
 8015108:	4618      	mov	r0, r3
 801510a:	3710      	adds	r7, #16
 801510c:	46bd      	mov	sp, r7
 801510e:	bd80      	pop	{r7, pc}

08015110 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015110:	b580      	push	{r7, lr}
 8015112:	b086      	sub	sp, #24
 8015114:	af00      	add	r7, sp, #0
 8015116:	60f8      	str	r0, [r7, #12]
 8015118:	460b      	mov	r3, r1
 801511a:	607a      	str	r2, [r7, #4]
 801511c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801511e:	2300      	movs	r3, #0
 8015120:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8015122:	7afb      	ldrb	r3, [r7, #11]
 8015124:	2b00      	cmp	r3, #0
 8015126:	d16e      	bne.n	8015206 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801512e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015136:	2b03      	cmp	r3, #3
 8015138:	f040 8098 	bne.w	801526c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801513c:	693b      	ldr	r3, [r7, #16]
 801513e:	689a      	ldr	r2, [r3, #8]
 8015140:	693b      	ldr	r3, [r7, #16]
 8015142:	68db      	ldr	r3, [r3, #12]
 8015144:	429a      	cmp	r2, r3
 8015146:	d913      	bls.n	8015170 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8015148:	693b      	ldr	r3, [r7, #16]
 801514a:	689a      	ldr	r2, [r3, #8]
 801514c:	693b      	ldr	r3, [r7, #16]
 801514e:	68db      	ldr	r3, [r3, #12]
 8015150:	1ad2      	subs	r2, r2, r3
 8015152:	693b      	ldr	r3, [r7, #16]
 8015154:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015156:	693b      	ldr	r3, [r7, #16]
 8015158:	68da      	ldr	r2, [r3, #12]
 801515a:	693b      	ldr	r3, [r7, #16]
 801515c:	689b      	ldr	r3, [r3, #8]
 801515e:	4293      	cmp	r3, r2
 8015160:	bf28      	it	cs
 8015162:	4613      	movcs	r3, r2
 8015164:	461a      	mov	r2, r3
 8015166:	6879      	ldr	r1, [r7, #4]
 8015168:	68f8      	ldr	r0, [r7, #12]
 801516a:	f001 f98a 	bl	8016482 <USBD_CtlContinueRx>
 801516e:	e07d      	b.n	801526c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015176:	f003 031f 	and.w	r3, r3, #31
 801517a:	2b02      	cmp	r3, #2
 801517c:	d014      	beq.n	80151a8 <USBD_LL_DataOutStage+0x98>
 801517e:	2b02      	cmp	r3, #2
 8015180:	d81d      	bhi.n	80151be <USBD_LL_DataOutStage+0xae>
 8015182:	2b00      	cmp	r3, #0
 8015184:	d002      	beq.n	801518c <USBD_LL_DataOutStage+0x7c>
 8015186:	2b01      	cmp	r3, #1
 8015188:	d003      	beq.n	8015192 <USBD_LL_DataOutStage+0x82>
 801518a:	e018      	b.n	80151be <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801518c:	2300      	movs	r3, #0
 801518e:	75bb      	strb	r3, [r7, #22]
            break;
 8015190:	e018      	b.n	80151c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015198:	b2db      	uxtb	r3, r3
 801519a:	4619      	mov	r1, r3
 801519c:	68f8      	ldr	r0, [r7, #12]
 801519e:	f000 fa64 	bl	801566a <USBD_CoreFindIF>
 80151a2:	4603      	mov	r3, r0
 80151a4:	75bb      	strb	r3, [r7, #22]
            break;
 80151a6:	e00d      	b.n	80151c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80151ae:	b2db      	uxtb	r3, r3
 80151b0:	4619      	mov	r1, r3
 80151b2:	68f8      	ldr	r0, [r7, #12]
 80151b4:	f000 fa66 	bl	8015684 <USBD_CoreFindEP>
 80151b8:	4603      	mov	r3, r0
 80151ba:	75bb      	strb	r3, [r7, #22]
            break;
 80151bc:	e002      	b.n	80151c4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80151be:	2300      	movs	r3, #0
 80151c0:	75bb      	strb	r3, [r7, #22]
            break;
 80151c2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80151c4:	7dbb      	ldrb	r3, [r7, #22]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d119      	bne.n	80151fe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80151d0:	b2db      	uxtb	r3, r3
 80151d2:	2b03      	cmp	r3, #3
 80151d4:	d113      	bne.n	80151fe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80151d6:	7dba      	ldrb	r2, [r7, #22]
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	32ae      	adds	r2, #174	; 0xae
 80151dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151e0:	691b      	ldr	r3, [r3, #16]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d00b      	beq.n	80151fe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80151e6:	7dba      	ldrb	r2, [r7, #22]
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80151ee:	7dba      	ldrb	r2, [r7, #22]
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	32ae      	adds	r2, #174	; 0xae
 80151f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151f8:	691b      	ldr	r3, [r3, #16]
 80151fa:	68f8      	ldr	r0, [r7, #12]
 80151fc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80151fe:	68f8      	ldr	r0, [r7, #12]
 8015200:	f001 f950 	bl	80164a4 <USBD_CtlSendStatus>
 8015204:	e032      	b.n	801526c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8015206:	7afb      	ldrb	r3, [r7, #11]
 8015208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801520c:	b2db      	uxtb	r3, r3
 801520e:	4619      	mov	r1, r3
 8015210:	68f8      	ldr	r0, [r7, #12]
 8015212:	f000 fa37 	bl	8015684 <USBD_CoreFindEP>
 8015216:	4603      	mov	r3, r0
 8015218:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801521a:	7dbb      	ldrb	r3, [r7, #22]
 801521c:	2bff      	cmp	r3, #255	; 0xff
 801521e:	d025      	beq.n	801526c <USBD_LL_DataOutStage+0x15c>
 8015220:	7dbb      	ldrb	r3, [r7, #22]
 8015222:	2b00      	cmp	r3, #0
 8015224:	d122      	bne.n	801526c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801522c:	b2db      	uxtb	r3, r3
 801522e:	2b03      	cmp	r3, #3
 8015230:	d117      	bne.n	8015262 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8015232:	7dba      	ldrb	r2, [r7, #22]
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	32ae      	adds	r2, #174	; 0xae
 8015238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801523c:	699b      	ldr	r3, [r3, #24]
 801523e:	2b00      	cmp	r3, #0
 8015240:	d00f      	beq.n	8015262 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8015242:	7dba      	ldrb	r2, [r7, #22]
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801524a:	7dba      	ldrb	r2, [r7, #22]
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	32ae      	adds	r2, #174	; 0xae
 8015250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015254:	699b      	ldr	r3, [r3, #24]
 8015256:	7afa      	ldrb	r2, [r7, #11]
 8015258:	4611      	mov	r1, r2
 801525a:	68f8      	ldr	r0, [r7, #12]
 801525c:	4798      	blx	r3
 801525e:	4603      	mov	r3, r0
 8015260:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8015262:	7dfb      	ldrb	r3, [r7, #23]
 8015264:	2b00      	cmp	r3, #0
 8015266:	d001      	beq.n	801526c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8015268:	7dfb      	ldrb	r3, [r7, #23]
 801526a:	e000      	b.n	801526e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801526c:	2300      	movs	r3, #0
}
 801526e:	4618      	mov	r0, r3
 8015270:	3718      	adds	r7, #24
 8015272:	46bd      	mov	sp, r7
 8015274:	bd80      	pop	{r7, pc}

08015276 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015276:	b580      	push	{r7, lr}
 8015278:	b086      	sub	sp, #24
 801527a:	af00      	add	r7, sp, #0
 801527c:	60f8      	str	r0, [r7, #12]
 801527e:	460b      	mov	r3, r1
 8015280:	607a      	str	r2, [r7, #4]
 8015282:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015284:	7afb      	ldrb	r3, [r7, #11]
 8015286:	2b00      	cmp	r3, #0
 8015288:	d16f      	bne.n	801536a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	3314      	adds	r3, #20
 801528e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015296:	2b02      	cmp	r3, #2
 8015298:	d15a      	bne.n	8015350 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801529a:	693b      	ldr	r3, [r7, #16]
 801529c:	689a      	ldr	r2, [r3, #8]
 801529e:	693b      	ldr	r3, [r7, #16]
 80152a0:	68db      	ldr	r3, [r3, #12]
 80152a2:	429a      	cmp	r2, r3
 80152a4:	d914      	bls.n	80152d0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80152a6:	693b      	ldr	r3, [r7, #16]
 80152a8:	689a      	ldr	r2, [r3, #8]
 80152aa:	693b      	ldr	r3, [r7, #16]
 80152ac:	68db      	ldr	r3, [r3, #12]
 80152ae:	1ad2      	subs	r2, r2, r3
 80152b0:	693b      	ldr	r3, [r7, #16]
 80152b2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80152b4:	693b      	ldr	r3, [r7, #16]
 80152b6:	689b      	ldr	r3, [r3, #8]
 80152b8:	461a      	mov	r2, r3
 80152ba:	6879      	ldr	r1, [r7, #4]
 80152bc:	68f8      	ldr	r0, [r7, #12]
 80152be:	f001 f8b2 	bl	8016426 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80152c2:	2300      	movs	r3, #0
 80152c4:	2200      	movs	r2, #0
 80152c6:	2100      	movs	r1, #0
 80152c8:	68f8      	ldr	r0, [r7, #12]
 80152ca:	f001 fe1f 	bl	8016f0c <USBD_LL_PrepareReceive>
 80152ce:	e03f      	b.n	8015350 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80152d0:	693b      	ldr	r3, [r7, #16]
 80152d2:	68da      	ldr	r2, [r3, #12]
 80152d4:	693b      	ldr	r3, [r7, #16]
 80152d6:	689b      	ldr	r3, [r3, #8]
 80152d8:	429a      	cmp	r2, r3
 80152da:	d11c      	bne.n	8015316 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80152dc:	693b      	ldr	r3, [r7, #16]
 80152de:	685a      	ldr	r2, [r3, #4]
 80152e0:	693b      	ldr	r3, [r7, #16]
 80152e2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80152e4:	429a      	cmp	r2, r3
 80152e6:	d316      	bcc.n	8015316 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80152e8:	693b      	ldr	r3, [r7, #16]
 80152ea:	685a      	ldr	r2, [r3, #4]
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80152f2:	429a      	cmp	r2, r3
 80152f4:	d20f      	bcs.n	8015316 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80152f6:	2200      	movs	r2, #0
 80152f8:	2100      	movs	r1, #0
 80152fa:	68f8      	ldr	r0, [r7, #12]
 80152fc:	f001 f893 	bl	8016426 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	2200      	movs	r2, #0
 8015304:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015308:	2300      	movs	r3, #0
 801530a:	2200      	movs	r2, #0
 801530c:	2100      	movs	r1, #0
 801530e:	68f8      	ldr	r0, [r7, #12]
 8015310:	f001 fdfc 	bl	8016f0c <USBD_LL_PrepareReceive>
 8015314:	e01c      	b.n	8015350 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801531c:	b2db      	uxtb	r3, r3
 801531e:	2b03      	cmp	r3, #3
 8015320:	d10f      	bne.n	8015342 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015328:	68db      	ldr	r3, [r3, #12]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d009      	beq.n	8015342 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	2200      	movs	r2, #0
 8015332:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801533c:	68db      	ldr	r3, [r3, #12]
 801533e:	68f8      	ldr	r0, [r7, #12]
 8015340:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015342:	2180      	movs	r1, #128	; 0x80
 8015344:	68f8      	ldr	r0, [r7, #12]
 8015346:	f001 fd37 	bl	8016db8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801534a:	68f8      	ldr	r0, [r7, #12]
 801534c:	f001 f8bd 	bl	80164ca <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015356:	2b00      	cmp	r3, #0
 8015358:	d03a      	beq.n	80153d0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801535a:	68f8      	ldr	r0, [r7, #12]
 801535c:	f7ff fe42 	bl	8014fe4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	2200      	movs	r2, #0
 8015364:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015368:	e032      	b.n	80153d0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801536a:	7afb      	ldrb	r3, [r7, #11]
 801536c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015370:	b2db      	uxtb	r3, r3
 8015372:	4619      	mov	r1, r3
 8015374:	68f8      	ldr	r0, [r7, #12]
 8015376:	f000 f985 	bl	8015684 <USBD_CoreFindEP>
 801537a:	4603      	mov	r3, r0
 801537c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801537e:	7dfb      	ldrb	r3, [r7, #23]
 8015380:	2bff      	cmp	r3, #255	; 0xff
 8015382:	d025      	beq.n	80153d0 <USBD_LL_DataInStage+0x15a>
 8015384:	7dfb      	ldrb	r3, [r7, #23]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d122      	bne.n	80153d0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015390:	b2db      	uxtb	r3, r3
 8015392:	2b03      	cmp	r3, #3
 8015394:	d11c      	bne.n	80153d0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015396:	7dfa      	ldrb	r2, [r7, #23]
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	32ae      	adds	r2, #174	; 0xae
 801539c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80153a0:	695b      	ldr	r3, [r3, #20]
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d014      	beq.n	80153d0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80153a6:	7dfa      	ldrb	r2, [r7, #23]
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80153ae:	7dfa      	ldrb	r2, [r7, #23]
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	32ae      	adds	r2, #174	; 0xae
 80153b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80153b8:	695b      	ldr	r3, [r3, #20]
 80153ba:	7afa      	ldrb	r2, [r7, #11]
 80153bc:	4611      	mov	r1, r2
 80153be:	68f8      	ldr	r0, [r7, #12]
 80153c0:	4798      	blx	r3
 80153c2:	4603      	mov	r3, r0
 80153c4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80153c6:	7dbb      	ldrb	r3, [r7, #22]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d001      	beq.n	80153d0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80153cc:	7dbb      	ldrb	r3, [r7, #22]
 80153ce:	e000      	b.n	80153d2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80153d0:	2300      	movs	r3, #0
}
 80153d2:	4618      	mov	r0, r3
 80153d4:	3718      	adds	r7, #24
 80153d6:	46bd      	mov	sp, r7
 80153d8:	bd80      	pop	{r7, pc}

080153da <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80153da:	b580      	push	{r7, lr}
 80153dc:	b084      	sub	sp, #16
 80153de:	af00      	add	r7, sp, #0
 80153e0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80153e2:	2300      	movs	r3, #0
 80153e4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	2201      	movs	r2, #1
 80153ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	2200      	movs	r2, #0
 80153f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	2200      	movs	r2, #0
 80153fa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	2200      	movs	r2, #0
 8015400:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	2200      	movs	r2, #0
 8015408:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015412:	2b00      	cmp	r3, #0
 8015414:	d014      	beq.n	8015440 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801541c:	685b      	ldr	r3, [r3, #4]
 801541e:	2b00      	cmp	r3, #0
 8015420:	d00e      	beq.n	8015440 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015428:	685b      	ldr	r3, [r3, #4]
 801542a:	687a      	ldr	r2, [r7, #4]
 801542c:	6852      	ldr	r2, [r2, #4]
 801542e:	b2d2      	uxtb	r2, r2
 8015430:	4611      	mov	r1, r2
 8015432:	6878      	ldr	r0, [r7, #4]
 8015434:	4798      	blx	r3
 8015436:	4603      	mov	r3, r0
 8015438:	2b00      	cmp	r3, #0
 801543a:	d001      	beq.n	8015440 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801543c:	2303      	movs	r3, #3
 801543e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015440:	2340      	movs	r3, #64	; 0x40
 8015442:	2200      	movs	r2, #0
 8015444:	2100      	movs	r1, #0
 8015446:	6878      	ldr	r0, [r7, #4]
 8015448:	f001 fc71 	bl	8016d2e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	2201      	movs	r2, #1
 8015450:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	2240      	movs	r2, #64	; 0x40
 8015458:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801545c:	2340      	movs	r3, #64	; 0x40
 801545e:	2200      	movs	r2, #0
 8015460:	2180      	movs	r1, #128	; 0x80
 8015462:	6878      	ldr	r0, [r7, #4]
 8015464:	f001 fc63 	bl	8016d2e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	2201      	movs	r2, #1
 801546c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	2240      	movs	r2, #64	; 0x40
 8015472:	621a      	str	r2, [r3, #32]

  return ret;
 8015474:	7bfb      	ldrb	r3, [r7, #15]
}
 8015476:	4618      	mov	r0, r3
 8015478:	3710      	adds	r7, #16
 801547a:	46bd      	mov	sp, r7
 801547c:	bd80      	pop	{r7, pc}

0801547e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801547e:	b480      	push	{r7}
 8015480:	b083      	sub	sp, #12
 8015482:	af00      	add	r7, sp, #0
 8015484:	6078      	str	r0, [r7, #4]
 8015486:	460b      	mov	r3, r1
 8015488:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	78fa      	ldrb	r2, [r7, #3]
 801548e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015490:	2300      	movs	r3, #0
}
 8015492:	4618      	mov	r0, r3
 8015494:	370c      	adds	r7, #12
 8015496:	46bd      	mov	sp, r7
 8015498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801549c:	4770      	bx	lr

0801549e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801549e:	b480      	push	{r7}
 80154a0:	b083      	sub	sp, #12
 80154a2:	af00      	add	r7, sp, #0
 80154a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80154ac:	b2db      	uxtb	r3, r3
 80154ae:	2b04      	cmp	r3, #4
 80154b0:	d006      	beq.n	80154c0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80154b8:	b2da      	uxtb	r2, r3
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	2204      	movs	r2, #4
 80154c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80154c8:	2300      	movs	r3, #0
}
 80154ca:	4618      	mov	r0, r3
 80154cc:	370c      	adds	r7, #12
 80154ce:	46bd      	mov	sp, r7
 80154d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d4:	4770      	bx	lr

080154d6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80154d6:	b480      	push	{r7}
 80154d8:	b083      	sub	sp, #12
 80154da:	af00      	add	r7, sp, #0
 80154dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80154e4:	b2db      	uxtb	r3, r3
 80154e6:	2b04      	cmp	r3, #4
 80154e8:	d106      	bne.n	80154f8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80154f0:	b2da      	uxtb	r2, r3
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80154f8:	2300      	movs	r3, #0
}
 80154fa:	4618      	mov	r0, r3
 80154fc:	370c      	adds	r7, #12
 80154fe:	46bd      	mov	sp, r7
 8015500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015504:	4770      	bx	lr

08015506 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015506:	b580      	push	{r7, lr}
 8015508:	b082      	sub	sp, #8
 801550a:	af00      	add	r7, sp, #0
 801550c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015514:	b2db      	uxtb	r3, r3
 8015516:	2b03      	cmp	r3, #3
 8015518:	d110      	bne.n	801553c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015520:	2b00      	cmp	r3, #0
 8015522:	d00b      	beq.n	801553c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801552a:	69db      	ldr	r3, [r3, #28]
 801552c:	2b00      	cmp	r3, #0
 801552e:	d005      	beq.n	801553c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015536:	69db      	ldr	r3, [r3, #28]
 8015538:	6878      	ldr	r0, [r7, #4]
 801553a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801553c:	2300      	movs	r3, #0
}
 801553e:	4618      	mov	r0, r3
 8015540:	3708      	adds	r7, #8
 8015542:	46bd      	mov	sp, r7
 8015544:	bd80      	pop	{r7, pc}

08015546 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8015546:	b580      	push	{r7, lr}
 8015548:	b082      	sub	sp, #8
 801554a:	af00      	add	r7, sp, #0
 801554c:	6078      	str	r0, [r7, #4]
 801554e:	460b      	mov	r3, r1
 8015550:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	32ae      	adds	r2, #174	; 0xae
 801555c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015560:	2b00      	cmp	r3, #0
 8015562:	d101      	bne.n	8015568 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015564:	2303      	movs	r3, #3
 8015566:	e01c      	b.n	80155a2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801556e:	b2db      	uxtb	r3, r3
 8015570:	2b03      	cmp	r3, #3
 8015572:	d115      	bne.n	80155a0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	32ae      	adds	r2, #174	; 0xae
 801557e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015582:	6a1b      	ldr	r3, [r3, #32]
 8015584:	2b00      	cmp	r3, #0
 8015586:	d00b      	beq.n	80155a0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	32ae      	adds	r2, #174	; 0xae
 8015592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015596:	6a1b      	ldr	r3, [r3, #32]
 8015598:	78fa      	ldrb	r2, [r7, #3]
 801559a:	4611      	mov	r1, r2
 801559c:	6878      	ldr	r0, [r7, #4]
 801559e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80155a0:	2300      	movs	r3, #0
}
 80155a2:	4618      	mov	r0, r3
 80155a4:	3708      	adds	r7, #8
 80155a6:	46bd      	mov	sp, r7
 80155a8:	bd80      	pop	{r7, pc}

080155aa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80155aa:	b580      	push	{r7, lr}
 80155ac:	b082      	sub	sp, #8
 80155ae:	af00      	add	r7, sp, #0
 80155b0:	6078      	str	r0, [r7, #4]
 80155b2:	460b      	mov	r3, r1
 80155b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	32ae      	adds	r2, #174	; 0xae
 80155c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d101      	bne.n	80155cc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80155c8:	2303      	movs	r3, #3
 80155ca:	e01c      	b.n	8015606 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80155d2:	b2db      	uxtb	r3, r3
 80155d4:	2b03      	cmp	r3, #3
 80155d6:	d115      	bne.n	8015604 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	32ae      	adds	r2, #174	; 0xae
 80155e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d00b      	beq.n	8015604 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	32ae      	adds	r2, #174	; 0xae
 80155f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155fc:	78fa      	ldrb	r2, [r7, #3]
 80155fe:	4611      	mov	r1, r2
 8015600:	6878      	ldr	r0, [r7, #4]
 8015602:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015604:	2300      	movs	r3, #0
}
 8015606:	4618      	mov	r0, r3
 8015608:	3708      	adds	r7, #8
 801560a:	46bd      	mov	sp, r7
 801560c:	bd80      	pop	{r7, pc}

0801560e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801560e:	b480      	push	{r7}
 8015610:	b083      	sub	sp, #12
 8015612:	af00      	add	r7, sp, #0
 8015614:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015616:	2300      	movs	r3, #0
}
 8015618:	4618      	mov	r0, r3
 801561a:	370c      	adds	r7, #12
 801561c:	46bd      	mov	sp, r7
 801561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015622:	4770      	bx	lr

08015624 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015624:	b580      	push	{r7, lr}
 8015626:	b084      	sub	sp, #16
 8015628:	af00      	add	r7, sp, #0
 801562a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801562c:	2300      	movs	r3, #0
 801562e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	2201      	movs	r2, #1
 8015634:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801563e:	2b00      	cmp	r3, #0
 8015640:	d00e      	beq.n	8015660 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015648:	685b      	ldr	r3, [r3, #4]
 801564a:	687a      	ldr	r2, [r7, #4]
 801564c:	6852      	ldr	r2, [r2, #4]
 801564e:	b2d2      	uxtb	r2, r2
 8015650:	4611      	mov	r1, r2
 8015652:	6878      	ldr	r0, [r7, #4]
 8015654:	4798      	blx	r3
 8015656:	4603      	mov	r3, r0
 8015658:	2b00      	cmp	r3, #0
 801565a:	d001      	beq.n	8015660 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801565c:	2303      	movs	r3, #3
 801565e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015660:	7bfb      	ldrb	r3, [r7, #15]
}
 8015662:	4618      	mov	r0, r3
 8015664:	3710      	adds	r7, #16
 8015666:	46bd      	mov	sp, r7
 8015668:	bd80      	pop	{r7, pc}

0801566a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801566a:	b480      	push	{r7}
 801566c:	b083      	sub	sp, #12
 801566e:	af00      	add	r7, sp, #0
 8015670:	6078      	str	r0, [r7, #4]
 8015672:	460b      	mov	r3, r1
 8015674:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015676:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015678:	4618      	mov	r0, r3
 801567a:	370c      	adds	r7, #12
 801567c:	46bd      	mov	sp, r7
 801567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015682:	4770      	bx	lr

08015684 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015684:	b480      	push	{r7}
 8015686:	b083      	sub	sp, #12
 8015688:	af00      	add	r7, sp, #0
 801568a:	6078      	str	r0, [r7, #4]
 801568c:	460b      	mov	r3, r1
 801568e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015690:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015692:	4618      	mov	r0, r3
 8015694:	370c      	adds	r7, #12
 8015696:	46bd      	mov	sp, r7
 8015698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801569c:	4770      	bx	lr

0801569e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801569e:	b580      	push	{r7, lr}
 80156a0:	b086      	sub	sp, #24
 80156a2:	af00      	add	r7, sp, #0
 80156a4:	6078      	str	r0, [r7, #4]
 80156a6:	460b      	mov	r3, r1
 80156a8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80156b2:	2300      	movs	r3, #0
 80156b4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	885b      	ldrh	r3, [r3, #2]
 80156ba:	b29a      	uxth	r2, r3
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	781b      	ldrb	r3, [r3, #0]
 80156c0:	b29b      	uxth	r3, r3
 80156c2:	429a      	cmp	r2, r3
 80156c4:	d920      	bls.n	8015708 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	781b      	ldrb	r3, [r3, #0]
 80156ca:	b29b      	uxth	r3, r3
 80156cc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80156ce:	e013      	b.n	80156f8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80156d0:	f107 030a 	add.w	r3, r7, #10
 80156d4:	4619      	mov	r1, r3
 80156d6:	6978      	ldr	r0, [r7, #20]
 80156d8:	f000 f81b 	bl	8015712 <USBD_GetNextDesc>
 80156dc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80156de:	697b      	ldr	r3, [r7, #20]
 80156e0:	785b      	ldrb	r3, [r3, #1]
 80156e2:	2b05      	cmp	r3, #5
 80156e4:	d108      	bne.n	80156f8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80156e6:	697b      	ldr	r3, [r7, #20]
 80156e8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80156ea:	693b      	ldr	r3, [r7, #16]
 80156ec:	789b      	ldrb	r3, [r3, #2]
 80156ee:	78fa      	ldrb	r2, [r7, #3]
 80156f0:	429a      	cmp	r2, r3
 80156f2:	d008      	beq.n	8015706 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80156f4:	2300      	movs	r3, #0
 80156f6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	885b      	ldrh	r3, [r3, #2]
 80156fc:	b29a      	uxth	r2, r3
 80156fe:	897b      	ldrh	r3, [r7, #10]
 8015700:	429a      	cmp	r2, r3
 8015702:	d8e5      	bhi.n	80156d0 <USBD_GetEpDesc+0x32>
 8015704:	e000      	b.n	8015708 <USBD_GetEpDesc+0x6a>
          break;
 8015706:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015708:	693b      	ldr	r3, [r7, #16]
}
 801570a:	4618      	mov	r0, r3
 801570c:	3718      	adds	r7, #24
 801570e:	46bd      	mov	sp, r7
 8015710:	bd80      	pop	{r7, pc}

08015712 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8015712:	b480      	push	{r7}
 8015714:	b085      	sub	sp, #20
 8015716:	af00      	add	r7, sp, #0
 8015718:	6078      	str	r0, [r7, #4]
 801571a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015720:	683b      	ldr	r3, [r7, #0]
 8015722:	881a      	ldrh	r2, [r3, #0]
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	781b      	ldrb	r3, [r3, #0]
 8015728:	b29b      	uxth	r3, r3
 801572a:	4413      	add	r3, r2
 801572c:	b29a      	uxth	r2, r3
 801572e:	683b      	ldr	r3, [r7, #0]
 8015730:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	781b      	ldrb	r3, [r3, #0]
 8015736:	461a      	mov	r2, r3
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	4413      	add	r3, r2
 801573c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801573e:	68fb      	ldr	r3, [r7, #12]
}
 8015740:	4618      	mov	r0, r3
 8015742:	3714      	adds	r7, #20
 8015744:	46bd      	mov	sp, r7
 8015746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801574a:	4770      	bx	lr

0801574c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801574c:	b480      	push	{r7}
 801574e:	b087      	sub	sp, #28
 8015750:	af00      	add	r7, sp, #0
 8015752:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015758:	697b      	ldr	r3, [r7, #20]
 801575a:	781b      	ldrb	r3, [r3, #0]
 801575c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801575e:	697b      	ldr	r3, [r7, #20]
 8015760:	3301      	adds	r3, #1
 8015762:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015764:	697b      	ldr	r3, [r7, #20]
 8015766:	781b      	ldrb	r3, [r3, #0]
 8015768:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801576a:	8a3b      	ldrh	r3, [r7, #16]
 801576c:	021b      	lsls	r3, r3, #8
 801576e:	b21a      	sxth	r2, r3
 8015770:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015774:	4313      	orrs	r3, r2
 8015776:	b21b      	sxth	r3, r3
 8015778:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801577a:	89fb      	ldrh	r3, [r7, #14]
}
 801577c:	4618      	mov	r0, r3
 801577e:	371c      	adds	r7, #28
 8015780:	46bd      	mov	sp, r7
 8015782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015786:	4770      	bx	lr

08015788 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015788:	b580      	push	{r7, lr}
 801578a:	b084      	sub	sp, #16
 801578c:	af00      	add	r7, sp, #0
 801578e:	6078      	str	r0, [r7, #4]
 8015790:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015792:	2300      	movs	r3, #0
 8015794:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015796:	683b      	ldr	r3, [r7, #0]
 8015798:	781b      	ldrb	r3, [r3, #0]
 801579a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801579e:	2b40      	cmp	r3, #64	; 0x40
 80157a0:	d005      	beq.n	80157ae <USBD_StdDevReq+0x26>
 80157a2:	2b40      	cmp	r3, #64	; 0x40
 80157a4:	d857      	bhi.n	8015856 <USBD_StdDevReq+0xce>
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d00f      	beq.n	80157ca <USBD_StdDevReq+0x42>
 80157aa:	2b20      	cmp	r3, #32
 80157ac:	d153      	bne.n	8015856 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	32ae      	adds	r2, #174	; 0xae
 80157b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80157bc:	689b      	ldr	r3, [r3, #8]
 80157be:	6839      	ldr	r1, [r7, #0]
 80157c0:	6878      	ldr	r0, [r7, #4]
 80157c2:	4798      	blx	r3
 80157c4:	4603      	mov	r3, r0
 80157c6:	73fb      	strb	r3, [r7, #15]
      break;
 80157c8:	e04a      	b.n	8015860 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80157ca:	683b      	ldr	r3, [r7, #0]
 80157cc:	785b      	ldrb	r3, [r3, #1]
 80157ce:	2b09      	cmp	r3, #9
 80157d0:	d83b      	bhi.n	801584a <USBD_StdDevReq+0xc2>
 80157d2:	a201      	add	r2, pc, #4	; (adr r2, 80157d8 <USBD_StdDevReq+0x50>)
 80157d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157d8:	0801582d 	.word	0x0801582d
 80157dc:	08015841 	.word	0x08015841
 80157e0:	0801584b 	.word	0x0801584b
 80157e4:	08015837 	.word	0x08015837
 80157e8:	0801584b 	.word	0x0801584b
 80157ec:	0801580b 	.word	0x0801580b
 80157f0:	08015801 	.word	0x08015801
 80157f4:	0801584b 	.word	0x0801584b
 80157f8:	08015823 	.word	0x08015823
 80157fc:	08015815 	.word	0x08015815
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015800:	6839      	ldr	r1, [r7, #0]
 8015802:	6878      	ldr	r0, [r7, #4]
 8015804:	f000 fa3c 	bl	8015c80 <USBD_GetDescriptor>
          break;
 8015808:	e024      	b.n	8015854 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801580a:	6839      	ldr	r1, [r7, #0]
 801580c:	6878      	ldr	r0, [r7, #4]
 801580e:	f000 fba1 	bl	8015f54 <USBD_SetAddress>
          break;
 8015812:	e01f      	b.n	8015854 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015814:	6839      	ldr	r1, [r7, #0]
 8015816:	6878      	ldr	r0, [r7, #4]
 8015818:	f000 fbe0 	bl	8015fdc <USBD_SetConfig>
 801581c:	4603      	mov	r3, r0
 801581e:	73fb      	strb	r3, [r7, #15]
          break;
 8015820:	e018      	b.n	8015854 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015822:	6839      	ldr	r1, [r7, #0]
 8015824:	6878      	ldr	r0, [r7, #4]
 8015826:	f000 fc83 	bl	8016130 <USBD_GetConfig>
          break;
 801582a:	e013      	b.n	8015854 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801582c:	6839      	ldr	r1, [r7, #0]
 801582e:	6878      	ldr	r0, [r7, #4]
 8015830:	f000 fcb4 	bl	801619c <USBD_GetStatus>
          break;
 8015834:	e00e      	b.n	8015854 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015836:	6839      	ldr	r1, [r7, #0]
 8015838:	6878      	ldr	r0, [r7, #4]
 801583a:	f000 fce3 	bl	8016204 <USBD_SetFeature>
          break;
 801583e:	e009      	b.n	8015854 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015840:	6839      	ldr	r1, [r7, #0]
 8015842:	6878      	ldr	r0, [r7, #4]
 8015844:	f000 fd07 	bl	8016256 <USBD_ClrFeature>
          break;
 8015848:	e004      	b.n	8015854 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801584a:	6839      	ldr	r1, [r7, #0]
 801584c:	6878      	ldr	r0, [r7, #4]
 801584e:	f000 fd5e 	bl	801630e <USBD_CtlError>
          break;
 8015852:	bf00      	nop
      }
      break;
 8015854:	e004      	b.n	8015860 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015856:	6839      	ldr	r1, [r7, #0]
 8015858:	6878      	ldr	r0, [r7, #4]
 801585a:	f000 fd58 	bl	801630e <USBD_CtlError>
      break;
 801585e:	bf00      	nop
  }

  return ret;
 8015860:	7bfb      	ldrb	r3, [r7, #15]
}
 8015862:	4618      	mov	r0, r3
 8015864:	3710      	adds	r7, #16
 8015866:	46bd      	mov	sp, r7
 8015868:	bd80      	pop	{r7, pc}
 801586a:	bf00      	nop

0801586c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801586c:	b580      	push	{r7, lr}
 801586e:	b084      	sub	sp, #16
 8015870:	af00      	add	r7, sp, #0
 8015872:	6078      	str	r0, [r7, #4]
 8015874:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015876:	2300      	movs	r3, #0
 8015878:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801587a:	683b      	ldr	r3, [r7, #0]
 801587c:	781b      	ldrb	r3, [r3, #0]
 801587e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015882:	2b40      	cmp	r3, #64	; 0x40
 8015884:	d005      	beq.n	8015892 <USBD_StdItfReq+0x26>
 8015886:	2b40      	cmp	r3, #64	; 0x40
 8015888:	d852      	bhi.n	8015930 <USBD_StdItfReq+0xc4>
 801588a:	2b00      	cmp	r3, #0
 801588c:	d001      	beq.n	8015892 <USBD_StdItfReq+0x26>
 801588e:	2b20      	cmp	r3, #32
 8015890:	d14e      	bne.n	8015930 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015898:	b2db      	uxtb	r3, r3
 801589a:	3b01      	subs	r3, #1
 801589c:	2b02      	cmp	r3, #2
 801589e:	d840      	bhi.n	8015922 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80158a0:	683b      	ldr	r3, [r7, #0]
 80158a2:	889b      	ldrh	r3, [r3, #4]
 80158a4:	b2db      	uxtb	r3, r3
 80158a6:	2b01      	cmp	r3, #1
 80158a8:	d836      	bhi.n	8015918 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80158aa:	683b      	ldr	r3, [r7, #0]
 80158ac:	889b      	ldrh	r3, [r3, #4]
 80158ae:	b2db      	uxtb	r3, r3
 80158b0:	4619      	mov	r1, r3
 80158b2:	6878      	ldr	r0, [r7, #4]
 80158b4:	f7ff fed9 	bl	801566a <USBD_CoreFindIF>
 80158b8:	4603      	mov	r3, r0
 80158ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80158bc:	7bbb      	ldrb	r3, [r7, #14]
 80158be:	2bff      	cmp	r3, #255	; 0xff
 80158c0:	d01d      	beq.n	80158fe <USBD_StdItfReq+0x92>
 80158c2:	7bbb      	ldrb	r3, [r7, #14]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d11a      	bne.n	80158fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80158c8:	7bba      	ldrb	r2, [r7, #14]
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	32ae      	adds	r2, #174	; 0xae
 80158ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158d2:	689b      	ldr	r3, [r3, #8]
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d00f      	beq.n	80158f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80158d8:	7bba      	ldrb	r2, [r7, #14]
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80158e0:	7bba      	ldrb	r2, [r7, #14]
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	32ae      	adds	r2, #174	; 0xae
 80158e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158ea:	689b      	ldr	r3, [r3, #8]
 80158ec:	6839      	ldr	r1, [r7, #0]
 80158ee:	6878      	ldr	r0, [r7, #4]
 80158f0:	4798      	blx	r3
 80158f2:	4603      	mov	r3, r0
 80158f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80158f6:	e004      	b.n	8015902 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80158f8:	2303      	movs	r3, #3
 80158fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80158fc:	e001      	b.n	8015902 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80158fe:	2303      	movs	r3, #3
 8015900:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015902:	683b      	ldr	r3, [r7, #0]
 8015904:	88db      	ldrh	r3, [r3, #6]
 8015906:	2b00      	cmp	r3, #0
 8015908:	d110      	bne.n	801592c <USBD_StdItfReq+0xc0>
 801590a:	7bfb      	ldrb	r3, [r7, #15]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d10d      	bne.n	801592c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015910:	6878      	ldr	r0, [r7, #4]
 8015912:	f000 fdc7 	bl	80164a4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015916:	e009      	b.n	801592c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015918:	6839      	ldr	r1, [r7, #0]
 801591a:	6878      	ldr	r0, [r7, #4]
 801591c:	f000 fcf7 	bl	801630e <USBD_CtlError>
          break;
 8015920:	e004      	b.n	801592c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8015922:	6839      	ldr	r1, [r7, #0]
 8015924:	6878      	ldr	r0, [r7, #4]
 8015926:	f000 fcf2 	bl	801630e <USBD_CtlError>
          break;
 801592a:	e000      	b.n	801592e <USBD_StdItfReq+0xc2>
          break;
 801592c:	bf00      	nop
      }
      break;
 801592e:	e004      	b.n	801593a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015930:	6839      	ldr	r1, [r7, #0]
 8015932:	6878      	ldr	r0, [r7, #4]
 8015934:	f000 fceb 	bl	801630e <USBD_CtlError>
      break;
 8015938:	bf00      	nop
  }

  return ret;
 801593a:	7bfb      	ldrb	r3, [r7, #15]
}
 801593c:	4618      	mov	r0, r3
 801593e:	3710      	adds	r7, #16
 8015940:	46bd      	mov	sp, r7
 8015942:	bd80      	pop	{r7, pc}

08015944 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015944:	b580      	push	{r7, lr}
 8015946:	b084      	sub	sp, #16
 8015948:	af00      	add	r7, sp, #0
 801594a:	6078      	str	r0, [r7, #4]
 801594c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801594e:	2300      	movs	r3, #0
 8015950:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8015952:	683b      	ldr	r3, [r7, #0]
 8015954:	889b      	ldrh	r3, [r3, #4]
 8015956:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015958:	683b      	ldr	r3, [r7, #0]
 801595a:	781b      	ldrb	r3, [r3, #0]
 801595c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015960:	2b40      	cmp	r3, #64	; 0x40
 8015962:	d007      	beq.n	8015974 <USBD_StdEPReq+0x30>
 8015964:	2b40      	cmp	r3, #64	; 0x40
 8015966:	f200 817f 	bhi.w	8015c68 <USBD_StdEPReq+0x324>
 801596a:	2b00      	cmp	r3, #0
 801596c:	d02a      	beq.n	80159c4 <USBD_StdEPReq+0x80>
 801596e:	2b20      	cmp	r3, #32
 8015970:	f040 817a 	bne.w	8015c68 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015974:	7bbb      	ldrb	r3, [r7, #14]
 8015976:	4619      	mov	r1, r3
 8015978:	6878      	ldr	r0, [r7, #4]
 801597a:	f7ff fe83 	bl	8015684 <USBD_CoreFindEP>
 801597e:	4603      	mov	r3, r0
 8015980:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015982:	7b7b      	ldrb	r3, [r7, #13]
 8015984:	2bff      	cmp	r3, #255	; 0xff
 8015986:	f000 8174 	beq.w	8015c72 <USBD_StdEPReq+0x32e>
 801598a:	7b7b      	ldrb	r3, [r7, #13]
 801598c:	2b00      	cmp	r3, #0
 801598e:	f040 8170 	bne.w	8015c72 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015992:	7b7a      	ldrb	r2, [r7, #13]
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801599a:	7b7a      	ldrb	r2, [r7, #13]
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	32ae      	adds	r2, #174	; 0xae
 80159a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159a4:	689b      	ldr	r3, [r3, #8]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	f000 8163 	beq.w	8015c72 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80159ac:	7b7a      	ldrb	r2, [r7, #13]
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	32ae      	adds	r2, #174	; 0xae
 80159b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159b6:	689b      	ldr	r3, [r3, #8]
 80159b8:	6839      	ldr	r1, [r7, #0]
 80159ba:	6878      	ldr	r0, [r7, #4]
 80159bc:	4798      	blx	r3
 80159be:	4603      	mov	r3, r0
 80159c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80159c2:	e156      	b.n	8015c72 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80159c4:	683b      	ldr	r3, [r7, #0]
 80159c6:	785b      	ldrb	r3, [r3, #1]
 80159c8:	2b03      	cmp	r3, #3
 80159ca:	d008      	beq.n	80159de <USBD_StdEPReq+0x9a>
 80159cc:	2b03      	cmp	r3, #3
 80159ce:	f300 8145 	bgt.w	8015c5c <USBD_StdEPReq+0x318>
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	f000 809b 	beq.w	8015b0e <USBD_StdEPReq+0x1ca>
 80159d8:	2b01      	cmp	r3, #1
 80159da:	d03c      	beq.n	8015a56 <USBD_StdEPReq+0x112>
 80159dc:	e13e      	b.n	8015c5c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159e4:	b2db      	uxtb	r3, r3
 80159e6:	2b02      	cmp	r3, #2
 80159e8:	d002      	beq.n	80159f0 <USBD_StdEPReq+0xac>
 80159ea:	2b03      	cmp	r3, #3
 80159ec:	d016      	beq.n	8015a1c <USBD_StdEPReq+0xd8>
 80159ee:	e02c      	b.n	8015a4a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80159f0:	7bbb      	ldrb	r3, [r7, #14]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d00d      	beq.n	8015a12 <USBD_StdEPReq+0xce>
 80159f6:	7bbb      	ldrb	r3, [r7, #14]
 80159f8:	2b80      	cmp	r3, #128	; 0x80
 80159fa:	d00a      	beq.n	8015a12 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80159fc:	7bbb      	ldrb	r3, [r7, #14]
 80159fe:	4619      	mov	r1, r3
 8015a00:	6878      	ldr	r0, [r7, #4]
 8015a02:	f001 f9d9 	bl	8016db8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015a06:	2180      	movs	r1, #128	; 0x80
 8015a08:	6878      	ldr	r0, [r7, #4]
 8015a0a:	f001 f9d5 	bl	8016db8 <USBD_LL_StallEP>
 8015a0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015a10:	e020      	b.n	8015a54 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8015a12:	6839      	ldr	r1, [r7, #0]
 8015a14:	6878      	ldr	r0, [r7, #4]
 8015a16:	f000 fc7a 	bl	801630e <USBD_CtlError>
              break;
 8015a1a:	e01b      	b.n	8015a54 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015a1c:	683b      	ldr	r3, [r7, #0]
 8015a1e:	885b      	ldrh	r3, [r3, #2]
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d10e      	bne.n	8015a42 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015a24:	7bbb      	ldrb	r3, [r7, #14]
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d00b      	beq.n	8015a42 <USBD_StdEPReq+0xfe>
 8015a2a:	7bbb      	ldrb	r3, [r7, #14]
 8015a2c:	2b80      	cmp	r3, #128	; 0x80
 8015a2e:	d008      	beq.n	8015a42 <USBD_StdEPReq+0xfe>
 8015a30:	683b      	ldr	r3, [r7, #0]
 8015a32:	88db      	ldrh	r3, [r3, #6]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d104      	bne.n	8015a42 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015a38:	7bbb      	ldrb	r3, [r7, #14]
 8015a3a:	4619      	mov	r1, r3
 8015a3c:	6878      	ldr	r0, [r7, #4]
 8015a3e:	f001 f9bb 	bl	8016db8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015a42:	6878      	ldr	r0, [r7, #4]
 8015a44:	f000 fd2e 	bl	80164a4 <USBD_CtlSendStatus>

              break;
 8015a48:	e004      	b.n	8015a54 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015a4a:	6839      	ldr	r1, [r7, #0]
 8015a4c:	6878      	ldr	r0, [r7, #4]
 8015a4e:	f000 fc5e 	bl	801630e <USBD_CtlError>
              break;
 8015a52:	bf00      	nop
          }
          break;
 8015a54:	e107      	b.n	8015c66 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a5c:	b2db      	uxtb	r3, r3
 8015a5e:	2b02      	cmp	r3, #2
 8015a60:	d002      	beq.n	8015a68 <USBD_StdEPReq+0x124>
 8015a62:	2b03      	cmp	r3, #3
 8015a64:	d016      	beq.n	8015a94 <USBD_StdEPReq+0x150>
 8015a66:	e04b      	b.n	8015b00 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015a68:	7bbb      	ldrb	r3, [r7, #14]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d00d      	beq.n	8015a8a <USBD_StdEPReq+0x146>
 8015a6e:	7bbb      	ldrb	r3, [r7, #14]
 8015a70:	2b80      	cmp	r3, #128	; 0x80
 8015a72:	d00a      	beq.n	8015a8a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015a74:	7bbb      	ldrb	r3, [r7, #14]
 8015a76:	4619      	mov	r1, r3
 8015a78:	6878      	ldr	r0, [r7, #4]
 8015a7a:	f001 f99d 	bl	8016db8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015a7e:	2180      	movs	r1, #128	; 0x80
 8015a80:	6878      	ldr	r0, [r7, #4]
 8015a82:	f001 f999 	bl	8016db8 <USBD_LL_StallEP>
 8015a86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015a88:	e040      	b.n	8015b0c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015a8a:	6839      	ldr	r1, [r7, #0]
 8015a8c:	6878      	ldr	r0, [r7, #4]
 8015a8e:	f000 fc3e 	bl	801630e <USBD_CtlError>
              break;
 8015a92:	e03b      	b.n	8015b0c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015a94:	683b      	ldr	r3, [r7, #0]
 8015a96:	885b      	ldrh	r3, [r3, #2]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d136      	bne.n	8015b0a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015a9c:	7bbb      	ldrb	r3, [r7, #14]
 8015a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d004      	beq.n	8015ab0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015aa6:	7bbb      	ldrb	r3, [r7, #14]
 8015aa8:	4619      	mov	r1, r3
 8015aaa:	6878      	ldr	r0, [r7, #4]
 8015aac:	f001 f9a3 	bl	8016df6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015ab0:	6878      	ldr	r0, [r7, #4]
 8015ab2:	f000 fcf7 	bl	80164a4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015ab6:	7bbb      	ldrb	r3, [r7, #14]
 8015ab8:	4619      	mov	r1, r3
 8015aba:	6878      	ldr	r0, [r7, #4]
 8015abc:	f7ff fde2 	bl	8015684 <USBD_CoreFindEP>
 8015ac0:	4603      	mov	r3, r0
 8015ac2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015ac4:	7b7b      	ldrb	r3, [r7, #13]
 8015ac6:	2bff      	cmp	r3, #255	; 0xff
 8015ac8:	d01f      	beq.n	8015b0a <USBD_StdEPReq+0x1c6>
 8015aca:	7b7b      	ldrb	r3, [r7, #13]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d11c      	bne.n	8015b0a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015ad0:	7b7a      	ldrb	r2, [r7, #13]
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015ad8:	7b7a      	ldrb	r2, [r7, #13]
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	32ae      	adds	r2, #174	; 0xae
 8015ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ae2:	689b      	ldr	r3, [r3, #8]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d010      	beq.n	8015b0a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015ae8:	7b7a      	ldrb	r2, [r7, #13]
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	32ae      	adds	r2, #174	; 0xae
 8015aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015af2:	689b      	ldr	r3, [r3, #8]
 8015af4:	6839      	ldr	r1, [r7, #0]
 8015af6:	6878      	ldr	r0, [r7, #4]
 8015af8:	4798      	blx	r3
 8015afa:	4603      	mov	r3, r0
 8015afc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015afe:	e004      	b.n	8015b0a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015b00:	6839      	ldr	r1, [r7, #0]
 8015b02:	6878      	ldr	r0, [r7, #4]
 8015b04:	f000 fc03 	bl	801630e <USBD_CtlError>
              break;
 8015b08:	e000      	b.n	8015b0c <USBD_StdEPReq+0x1c8>
              break;
 8015b0a:	bf00      	nop
          }
          break;
 8015b0c:	e0ab      	b.n	8015c66 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b14:	b2db      	uxtb	r3, r3
 8015b16:	2b02      	cmp	r3, #2
 8015b18:	d002      	beq.n	8015b20 <USBD_StdEPReq+0x1dc>
 8015b1a:	2b03      	cmp	r3, #3
 8015b1c:	d032      	beq.n	8015b84 <USBD_StdEPReq+0x240>
 8015b1e:	e097      	b.n	8015c50 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015b20:	7bbb      	ldrb	r3, [r7, #14]
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d007      	beq.n	8015b36 <USBD_StdEPReq+0x1f2>
 8015b26:	7bbb      	ldrb	r3, [r7, #14]
 8015b28:	2b80      	cmp	r3, #128	; 0x80
 8015b2a:	d004      	beq.n	8015b36 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015b2c:	6839      	ldr	r1, [r7, #0]
 8015b2e:	6878      	ldr	r0, [r7, #4]
 8015b30:	f000 fbed 	bl	801630e <USBD_CtlError>
                break;
 8015b34:	e091      	b.n	8015c5a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015b36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	da0b      	bge.n	8015b56 <USBD_StdEPReq+0x212>
 8015b3e:	7bbb      	ldrb	r3, [r7, #14]
 8015b40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015b44:	4613      	mov	r3, r2
 8015b46:	009b      	lsls	r3, r3, #2
 8015b48:	4413      	add	r3, r2
 8015b4a:	009b      	lsls	r3, r3, #2
 8015b4c:	3310      	adds	r3, #16
 8015b4e:	687a      	ldr	r2, [r7, #4]
 8015b50:	4413      	add	r3, r2
 8015b52:	3304      	adds	r3, #4
 8015b54:	e00b      	b.n	8015b6e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015b56:	7bbb      	ldrb	r3, [r7, #14]
 8015b58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015b5c:	4613      	mov	r3, r2
 8015b5e:	009b      	lsls	r3, r3, #2
 8015b60:	4413      	add	r3, r2
 8015b62:	009b      	lsls	r3, r3, #2
 8015b64:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015b68:	687a      	ldr	r2, [r7, #4]
 8015b6a:	4413      	add	r3, r2
 8015b6c:	3304      	adds	r3, #4
 8015b6e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015b70:	68bb      	ldr	r3, [r7, #8]
 8015b72:	2200      	movs	r2, #0
 8015b74:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015b76:	68bb      	ldr	r3, [r7, #8]
 8015b78:	2202      	movs	r2, #2
 8015b7a:	4619      	mov	r1, r3
 8015b7c:	6878      	ldr	r0, [r7, #4]
 8015b7e:	f000 fc37 	bl	80163f0 <USBD_CtlSendData>
              break;
 8015b82:	e06a      	b.n	8015c5a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015b84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	da11      	bge.n	8015bb0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015b8c:	7bbb      	ldrb	r3, [r7, #14]
 8015b8e:	f003 020f 	and.w	r2, r3, #15
 8015b92:	6879      	ldr	r1, [r7, #4]
 8015b94:	4613      	mov	r3, r2
 8015b96:	009b      	lsls	r3, r3, #2
 8015b98:	4413      	add	r3, r2
 8015b9a:	009b      	lsls	r3, r3, #2
 8015b9c:	440b      	add	r3, r1
 8015b9e:	3324      	adds	r3, #36	; 0x24
 8015ba0:	881b      	ldrh	r3, [r3, #0]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d117      	bne.n	8015bd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015ba6:	6839      	ldr	r1, [r7, #0]
 8015ba8:	6878      	ldr	r0, [r7, #4]
 8015baa:	f000 fbb0 	bl	801630e <USBD_CtlError>
                  break;
 8015bae:	e054      	b.n	8015c5a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015bb0:	7bbb      	ldrb	r3, [r7, #14]
 8015bb2:	f003 020f 	and.w	r2, r3, #15
 8015bb6:	6879      	ldr	r1, [r7, #4]
 8015bb8:	4613      	mov	r3, r2
 8015bba:	009b      	lsls	r3, r3, #2
 8015bbc:	4413      	add	r3, r2
 8015bbe:	009b      	lsls	r3, r3, #2
 8015bc0:	440b      	add	r3, r1
 8015bc2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015bc6:	881b      	ldrh	r3, [r3, #0]
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d104      	bne.n	8015bd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015bcc:	6839      	ldr	r1, [r7, #0]
 8015bce:	6878      	ldr	r0, [r7, #4]
 8015bd0:	f000 fb9d 	bl	801630e <USBD_CtlError>
                  break;
 8015bd4:	e041      	b.n	8015c5a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015bd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	da0b      	bge.n	8015bf6 <USBD_StdEPReq+0x2b2>
 8015bde:	7bbb      	ldrb	r3, [r7, #14]
 8015be0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015be4:	4613      	mov	r3, r2
 8015be6:	009b      	lsls	r3, r3, #2
 8015be8:	4413      	add	r3, r2
 8015bea:	009b      	lsls	r3, r3, #2
 8015bec:	3310      	adds	r3, #16
 8015bee:	687a      	ldr	r2, [r7, #4]
 8015bf0:	4413      	add	r3, r2
 8015bf2:	3304      	adds	r3, #4
 8015bf4:	e00b      	b.n	8015c0e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015bf6:	7bbb      	ldrb	r3, [r7, #14]
 8015bf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015bfc:	4613      	mov	r3, r2
 8015bfe:	009b      	lsls	r3, r3, #2
 8015c00:	4413      	add	r3, r2
 8015c02:	009b      	lsls	r3, r3, #2
 8015c04:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015c08:	687a      	ldr	r2, [r7, #4]
 8015c0a:	4413      	add	r3, r2
 8015c0c:	3304      	adds	r3, #4
 8015c0e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015c10:	7bbb      	ldrb	r3, [r7, #14]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d002      	beq.n	8015c1c <USBD_StdEPReq+0x2d8>
 8015c16:	7bbb      	ldrb	r3, [r7, #14]
 8015c18:	2b80      	cmp	r3, #128	; 0x80
 8015c1a:	d103      	bne.n	8015c24 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015c1c:	68bb      	ldr	r3, [r7, #8]
 8015c1e:	2200      	movs	r2, #0
 8015c20:	601a      	str	r2, [r3, #0]
 8015c22:	e00e      	b.n	8015c42 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015c24:	7bbb      	ldrb	r3, [r7, #14]
 8015c26:	4619      	mov	r1, r3
 8015c28:	6878      	ldr	r0, [r7, #4]
 8015c2a:	f001 f903 	bl	8016e34 <USBD_LL_IsStallEP>
 8015c2e:	4603      	mov	r3, r0
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d003      	beq.n	8015c3c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015c34:	68bb      	ldr	r3, [r7, #8]
 8015c36:	2201      	movs	r2, #1
 8015c38:	601a      	str	r2, [r3, #0]
 8015c3a:	e002      	b.n	8015c42 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015c3c:	68bb      	ldr	r3, [r7, #8]
 8015c3e:	2200      	movs	r2, #0
 8015c40:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015c42:	68bb      	ldr	r3, [r7, #8]
 8015c44:	2202      	movs	r2, #2
 8015c46:	4619      	mov	r1, r3
 8015c48:	6878      	ldr	r0, [r7, #4]
 8015c4a:	f000 fbd1 	bl	80163f0 <USBD_CtlSendData>
              break;
 8015c4e:	e004      	b.n	8015c5a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015c50:	6839      	ldr	r1, [r7, #0]
 8015c52:	6878      	ldr	r0, [r7, #4]
 8015c54:	f000 fb5b 	bl	801630e <USBD_CtlError>
              break;
 8015c58:	bf00      	nop
          }
          break;
 8015c5a:	e004      	b.n	8015c66 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015c5c:	6839      	ldr	r1, [r7, #0]
 8015c5e:	6878      	ldr	r0, [r7, #4]
 8015c60:	f000 fb55 	bl	801630e <USBD_CtlError>
          break;
 8015c64:	bf00      	nop
      }
      break;
 8015c66:	e005      	b.n	8015c74 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015c68:	6839      	ldr	r1, [r7, #0]
 8015c6a:	6878      	ldr	r0, [r7, #4]
 8015c6c:	f000 fb4f 	bl	801630e <USBD_CtlError>
      break;
 8015c70:	e000      	b.n	8015c74 <USBD_StdEPReq+0x330>
      break;
 8015c72:	bf00      	nop
  }

  return ret;
 8015c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c76:	4618      	mov	r0, r3
 8015c78:	3710      	adds	r7, #16
 8015c7a:	46bd      	mov	sp, r7
 8015c7c:	bd80      	pop	{r7, pc}
	...

08015c80 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c80:	b580      	push	{r7, lr}
 8015c82:	b084      	sub	sp, #16
 8015c84:	af00      	add	r7, sp, #0
 8015c86:	6078      	str	r0, [r7, #4]
 8015c88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015c8a:	2300      	movs	r3, #0
 8015c8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015c8e:	2300      	movs	r3, #0
 8015c90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015c92:	2300      	movs	r3, #0
 8015c94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015c96:	683b      	ldr	r3, [r7, #0]
 8015c98:	885b      	ldrh	r3, [r3, #2]
 8015c9a:	0a1b      	lsrs	r3, r3, #8
 8015c9c:	b29b      	uxth	r3, r3
 8015c9e:	3b01      	subs	r3, #1
 8015ca0:	2b06      	cmp	r3, #6
 8015ca2:	f200 8128 	bhi.w	8015ef6 <USBD_GetDescriptor+0x276>
 8015ca6:	a201      	add	r2, pc, #4	; (adr r2, 8015cac <USBD_GetDescriptor+0x2c>)
 8015ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015cac:	08015cc9 	.word	0x08015cc9
 8015cb0:	08015ce1 	.word	0x08015ce1
 8015cb4:	08015d21 	.word	0x08015d21
 8015cb8:	08015ef7 	.word	0x08015ef7
 8015cbc:	08015ef7 	.word	0x08015ef7
 8015cc0:	08015e97 	.word	0x08015e97
 8015cc4:	08015ec3 	.word	0x08015ec3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	687a      	ldr	r2, [r7, #4]
 8015cd2:	7c12      	ldrb	r2, [r2, #16]
 8015cd4:	f107 0108 	add.w	r1, r7, #8
 8015cd8:	4610      	mov	r0, r2
 8015cda:	4798      	blx	r3
 8015cdc:	60f8      	str	r0, [r7, #12]
      break;
 8015cde:	e112      	b.n	8015f06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	7c1b      	ldrb	r3, [r3, #16]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d10d      	bne.n	8015d04 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015cf0:	f107 0208 	add.w	r2, r7, #8
 8015cf4:	4610      	mov	r0, r2
 8015cf6:	4798      	blx	r3
 8015cf8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	3301      	adds	r3, #1
 8015cfe:	2202      	movs	r2, #2
 8015d00:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015d02:	e100      	b.n	8015f06 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d0c:	f107 0208 	add.w	r2, r7, #8
 8015d10:	4610      	mov	r0, r2
 8015d12:	4798      	blx	r3
 8015d14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	3301      	adds	r3, #1
 8015d1a:	2202      	movs	r2, #2
 8015d1c:	701a      	strb	r2, [r3, #0]
      break;
 8015d1e:	e0f2      	b.n	8015f06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015d20:	683b      	ldr	r3, [r7, #0]
 8015d22:	885b      	ldrh	r3, [r3, #2]
 8015d24:	b2db      	uxtb	r3, r3
 8015d26:	2b05      	cmp	r3, #5
 8015d28:	f200 80ac 	bhi.w	8015e84 <USBD_GetDescriptor+0x204>
 8015d2c:	a201      	add	r2, pc, #4	; (adr r2, 8015d34 <USBD_GetDescriptor+0xb4>)
 8015d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d32:	bf00      	nop
 8015d34:	08015d4d 	.word	0x08015d4d
 8015d38:	08015d81 	.word	0x08015d81
 8015d3c:	08015db5 	.word	0x08015db5
 8015d40:	08015de9 	.word	0x08015de9
 8015d44:	08015e1d 	.word	0x08015e1d
 8015d48:	08015e51 	.word	0x08015e51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d52:	685b      	ldr	r3, [r3, #4]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d00b      	beq.n	8015d70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d5e:	685b      	ldr	r3, [r3, #4]
 8015d60:	687a      	ldr	r2, [r7, #4]
 8015d62:	7c12      	ldrb	r2, [r2, #16]
 8015d64:	f107 0108 	add.w	r1, r7, #8
 8015d68:	4610      	mov	r0, r2
 8015d6a:	4798      	blx	r3
 8015d6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015d6e:	e091      	b.n	8015e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015d70:	6839      	ldr	r1, [r7, #0]
 8015d72:	6878      	ldr	r0, [r7, #4]
 8015d74:	f000 facb 	bl	801630e <USBD_CtlError>
            err++;
 8015d78:	7afb      	ldrb	r3, [r7, #11]
 8015d7a:	3301      	adds	r3, #1
 8015d7c:	72fb      	strb	r3, [r7, #11]
          break;
 8015d7e:	e089      	b.n	8015e94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d86:	689b      	ldr	r3, [r3, #8]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d00b      	beq.n	8015da4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d92:	689b      	ldr	r3, [r3, #8]
 8015d94:	687a      	ldr	r2, [r7, #4]
 8015d96:	7c12      	ldrb	r2, [r2, #16]
 8015d98:	f107 0108 	add.w	r1, r7, #8
 8015d9c:	4610      	mov	r0, r2
 8015d9e:	4798      	blx	r3
 8015da0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015da2:	e077      	b.n	8015e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015da4:	6839      	ldr	r1, [r7, #0]
 8015da6:	6878      	ldr	r0, [r7, #4]
 8015da8:	f000 fab1 	bl	801630e <USBD_CtlError>
            err++;
 8015dac:	7afb      	ldrb	r3, [r7, #11]
 8015dae:	3301      	adds	r3, #1
 8015db0:	72fb      	strb	r3, [r7, #11]
          break;
 8015db2:	e06f      	b.n	8015e94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dba:	68db      	ldr	r3, [r3, #12]
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d00b      	beq.n	8015dd8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dc6:	68db      	ldr	r3, [r3, #12]
 8015dc8:	687a      	ldr	r2, [r7, #4]
 8015dca:	7c12      	ldrb	r2, [r2, #16]
 8015dcc:	f107 0108 	add.w	r1, r7, #8
 8015dd0:	4610      	mov	r0, r2
 8015dd2:	4798      	blx	r3
 8015dd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015dd6:	e05d      	b.n	8015e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015dd8:	6839      	ldr	r1, [r7, #0]
 8015dda:	6878      	ldr	r0, [r7, #4]
 8015ddc:	f000 fa97 	bl	801630e <USBD_CtlError>
            err++;
 8015de0:	7afb      	ldrb	r3, [r7, #11]
 8015de2:	3301      	adds	r3, #1
 8015de4:	72fb      	strb	r3, [r7, #11]
          break;
 8015de6:	e055      	b.n	8015e94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dee:	691b      	ldr	r3, [r3, #16]
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d00b      	beq.n	8015e0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dfa:	691b      	ldr	r3, [r3, #16]
 8015dfc:	687a      	ldr	r2, [r7, #4]
 8015dfe:	7c12      	ldrb	r2, [r2, #16]
 8015e00:	f107 0108 	add.w	r1, r7, #8
 8015e04:	4610      	mov	r0, r2
 8015e06:	4798      	blx	r3
 8015e08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e0a:	e043      	b.n	8015e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e0c:	6839      	ldr	r1, [r7, #0]
 8015e0e:	6878      	ldr	r0, [r7, #4]
 8015e10:	f000 fa7d 	bl	801630e <USBD_CtlError>
            err++;
 8015e14:	7afb      	ldrb	r3, [r7, #11]
 8015e16:	3301      	adds	r3, #1
 8015e18:	72fb      	strb	r3, [r7, #11]
          break;
 8015e1a:	e03b      	b.n	8015e94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e22:	695b      	ldr	r3, [r3, #20]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d00b      	beq.n	8015e40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e2e:	695b      	ldr	r3, [r3, #20]
 8015e30:	687a      	ldr	r2, [r7, #4]
 8015e32:	7c12      	ldrb	r2, [r2, #16]
 8015e34:	f107 0108 	add.w	r1, r7, #8
 8015e38:	4610      	mov	r0, r2
 8015e3a:	4798      	blx	r3
 8015e3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e3e:	e029      	b.n	8015e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e40:	6839      	ldr	r1, [r7, #0]
 8015e42:	6878      	ldr	r0, [r7, #4]
 8015e44:	f000 fa63 	bl	801630e <USBD_CtlError>
            err++;
 8015e48:	7afb      	ldrb	r3, [r7, #11]
 8015e4a:	3301      	adds	r3, #1
 8015e4c:	72fb      	strb	r3, [r7, #11]
          break;
 8015e4e:	e021      	b.n	8015e94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e56:	699b      	ldr	r3, [r3, #24]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d00b      	beq.n	8015e74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e62:	699b      	ldr	r3, [r3, #24]
 8015e64:	687a      	ldr	r2, [r7, #4]
 8015e66:	7c12      	ldrb	r2, [r2, #16]
 8015e68:	f107 0108 	add.w	r1, r7, #8
 8015e6c:	4610      	mov	r0, r2
 8015e6e:	4798      	blx	r3
 8015e70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e72:	e00f      	b.n	8015e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e74:	6839      	ldr	r1, [r7, #0]
 8015e76:	6878      	ldr	r0, [r7, #4]
 8015e78:	f000 fa49 	bl	801630e <USBD_CtlError>
            err++;
 8015e7c:	7afb      	ldrb	r3, [r7, #11]
 8015e7e:	3301      	adds	r3, #1
 8015e80:	72fb      	strb	r3, [r7, #11]
          break;
 8015e82:	e007      	b.n	8015e94 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015e84:	6839      	ldr	r1, [r7, #0]
 8015e86:	6878      	ldr	r0, [r7, #4]
 8015e88:	f000 fa41 	bl	801630e <USBD_CtlError>
          err++;
 8015e8c:	7afb      	ldrb	r3, [r7, #11]
 8015e8e:	3301      	adds	r3, #1
 8015e90:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015e92:	bf00      	nop
      }
      break;
 8015e94:	e037      	b.n	8015f06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	7c1b      	ldrb	r3, [r3, #16]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d109      	bne.n	8015eb2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ea6:	f107 0208 	add.w	r2, r7, #8
 8015eaa:	4610      	mov	r0, r2
 8015eac:	4798      	blx	r3
 8015eae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015eb0:	e029      	b.n	8015f06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015eb2:	6839      	ldr	r1, [r7, #0]
 8015eb4:	6878      	ldr	r0, [r7, #4]
 8015eb6:	f000 fa2a 	bl	801630e <USBD_CtlError>
        err++;
 8015eba:	7afb      	ldrb	r3, [r7, #11]
 8015ebc:	3301      	adds	r3, #1
 8015ebe:	72fb      	strb	r3, [r7, #11]
      break;
 8015ec0:	e021      	b.n	8015f06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	7c1b      	ldrb	r3, [r3, #16]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d10d      	bne.n	8015ee6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ed2:	f107 0208 	add.w	r2, r7, #8
 8015ed6:	4610      	mov	r0, r2
 8015ed8:	4798      	blx	r3
 8015eda:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	3301      	adds	r3, #1
 8015ee0:	2207      	movs	r2, #7
 8015ee2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015ee4:	e00f      	b.n	8015f06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015ee6:	6839      	ldr	r1, [r7, #0]
 8015ee8:	6878      	ldr	r0, [r7, #4]
 8015eea:	f000 fa10 	bl	801630e <USBD_CtlError>
        err++;
 8015eee:	7afb      	ldrb	r3, [r7, #11]
 8015ef0:	3301      	adds	r3, #1
 8015ef2:	72fb      	strb	r3, [r7, #11]
      break;
 8015ef4:	e007      	b.n	8015f06 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015ef6:	6839      	ldr	r1, [r7, #0]
 8015ef8:	6878      	ldr	r0, [r7, #4]
 8015efa:	f000 fa08 	bl	801630e <USBD_CtlError>
      err++;
 8015efe:	7afb      	ldrb	r3, [r7, #11]
 8015f00:	3301      	adds	r3, #1
 8015f02:	72fb      	strb	r3, [r7, #11]
      break;
 8015f04:	bf00      	nop
  }

  if (err != 0U)
 8015f06:	7afb      	ldrb	r3, [r7, #11]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d11e      	bne.n	8015f4a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015f0c:	683b      	ldr	r3, [r7, #0]
 8015f0e:	88db      	ldrh	r3, [r3, #6]
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d016      	beq.n	8015f42 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015f14:	893b      	ldrh	r3, [r7, #8]
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d00e      	beq.n	8015f38 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015f1a:	683b      	ldr	r3, [r7, #0]
 8015f1c:	88da      	ldrh	r2, [r3, #6]
 8015f1e:	893b      	ldrh	r3, [r7, #8]
 8015f20:	4293      	cmp	r3, r2
 8015f22:	bf28      	it	cs
 8015f24:	4613      	movcs	r3, r2
 8015f26:	b29b      	uxth	r3, r3
 8015f28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015f2a:	893b      	ldrh	r3, [r7, #8]
 8015f2c:	461a      	mov	r2, r3
 8015f2e:	68f9      	ldr	r1, [r7, #12]
 8015f30:	6878      	ldr	r0, [r7, #4]
 8015f32:	f000 fa5d 	bl	80163f0 <USBD_CtlSendData>
 8015f36:	e009      	b.n	8015f4c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015f38:	6839      	ldr	r1, [r7, #0]
 8015f3a:	6878      	ldr	r0, [r7, #4]
 8015f3c:	f000 f9e7 	bl	801630e <USBD_CtlError>
 8015f40:	e004      	b.n	8015f4c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015f42:	6878      	ldr	r0, [r7, #4]
 8015f44:	f000 faae 	bl	80164a4 <USBD_CtlSendStatus>
 8015f48:	e000      	b.n	8015f4c <USBD_GetDescriptor+0x2cc>
    return;
 8015f4a:	bf00      	nop
  }
}
 8015f4c:	3710      	adds	r7, #16
 8015f4e:	46bd      	mov	sp, r7
 8015f50:	bd80      	pop	{r7, pc}
 8015f52:	bf00      	nop

08015f54 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f54:	b580      	push	{r7, lr}
 8015f56:	b084      	sub	sp, #16
 8015f58:	af00      	add	r7, sp, #0
 8015f5a:	6078      	str	r0, [r7, #4]
 8015f5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015f5e:	683b      	ldr	r3, [r7, #0]
 8015f60:	889b      	ldrh	r3, [r3, #4]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d131      	bne.n	8015fca <USBD_SetAddress+0x76>
 8015f66:	683b      	ldr	r3, [r7, #0]
 8015f68:	88db      	ldrh	r3, [r3, #6]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d12d      	bne.n	8015fca <USBD_SetAddress+0x76>
 8015f6e:	683b      	ldr	r3, [r7, #0]
 8015f70:	885b      	ldrh	r3, [r3, #2]
 8015f72:	2b7f      	cmp	r3, #127	; 0x7f
 8015f74:	d829      	bhi.n	8015fca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015f76:	683b      	ldr	r3, [r7, #0]
 8015f78:	885b      	ldrh	r3, [r3, #2]
 8015f7a:	b2db      	uxtb	r3, r3
 8015f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015f80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f88:	b2db      	uxtb	r3, r3
 8015f8a:	2b03      	cmp	r3, #3
 8015f8c:	d104      	bne.n	8015f98 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015f8e:	6839      	ldr	r1, [r7, #0]
 8015f90:	6878      	ldr	r0, [r7, #4]
 8015f92:	f000 f9bc 	bl	801630e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f96:	e01d      	b.n	8015fd4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	7bfa      	ldrb	r2, [r7, #15]
 8015f9c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015fa0:	7bfb      	ldrb	r3, [r7, #15]
 8015fa2:	4619      	mov	r1, r3
 8015fa4:	6878      	ldr	r0, [r7, #4]
 8015fa6:	f000 ff71 	bl	8016e8c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015faa:	6878      	ldr	r0, [r7, #4]
 8015fac:	f000 fa7a 	bl	80164a4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015fb0:	7bfb      	ldrb	r3, [r7, #15]
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d004      	beq.n	8015fc0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	2202      	movs	r2, #2
 8015fba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015fbe:	e009      	b.n	8015fd4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	2201      	movs	r2, #1
 8015fc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015fc8:	e004      	b.n	8015fd4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015fca:	6839      	ldr	r1, [r7, #0]
 8015fcc:	6878      	ldr	r0, [r7, #4]
 8015fce:	f000 f99e 	bl	801630e <USBD_CtlError>
  }
}
 8015fd2:	bf00      	nop
 8015fd4:	bf00      	nop
 8015fd6:	3710      	adds	r7, #16
 8015fd8:	46bd      	mov	sp, r7
 8015fda:	bd80      	pop	{r7, pc}

08015fdc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	b084      	sub	sp, #16
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	6078      	str	r0, [r7, #4]
 8015fe4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015fe6:	2300      	movs	r3, #0
 8015fe8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015fea:	683b      	ldr	r3, [r7, #0]
 8015fec:	885b      	ldrh	r3, [r3, #2]
 8015fee:	b2da      	uxtb	r2, r3
 8015ff0:	4b4e      	ldr	r3, [pc, #312]	; (801612c <USBD_SetConfig+0x150>)
 8015ff2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015ff4:	4b4d      	ldr	r3, [pc, #308]	; (801612c <USBD_SetConfig+0x150>)
 8015ff6:	781b      	ldrb	r3, [r3, #0]
 8015ff8:	2b01      	cmp	r3, #1
 8015ffa:	d905      	bls.n	8016008 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015ffc:	6839      	ldr	r1, [r7, #0]
 8015ffe:	6878      	ldr	r0, [r7, #4]
 8016000:	f000 f985 	bl	801630e <USBD_CtlError>
    return USBD_FAIL;
 8016004:	2303      	movs	r3, #3
 8016006:	e08c      	b.n	8016122 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801600e:	b2db      	uxtb	r3, r3
 8016010:	2b02      	cmp	r3, #2
 8016012:	d002      	beq.n	801601a <USBD_SetConfig+0x3e>
 8016014:	2b03      	cmp	r3, #3
 8016016:	d029      	beq.n	801606c <USBD_SetConfig+0x90>
 8016018:	e075      	b.n	8016106 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801601a:	4b44      	ldr	r3, [pc, #272]	; (801612c <USBD_SetConfig+0x150>)
 801601c:	781b      	ldrb	r3, [r3, #0]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d020      	beq.n	8016064 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8016022:	4b42      	ldr	r3, [pc, #264]	; (801612c <USBD_SetConfig+0x150>)
 8016024:	781b      	ldrb	r3, [r3, #0]
 8016026:	461a      	mov	r2, r3
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801602c:	4b3f      	ldr	r3, [pc, #252]	; (801612c <USBD_SetConfig+0x150>)
 801602e:	781b      	ldrb	r3, [r3, #0]
 8016030:	4619      	mov	r1, r3
 8016032:	6878      	ldr	r0, [r7, #4]
 8016034:	f7fe ffe1 	bl	8014ffa <USBD_SetClassConfig>
 8016038:	4603      	mov	r3, r0
 801603a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801603c:	7bfb      	ldrb	r3, [r7, #15]
 801603e:	2b00      	cmp	r3, #0
 8016040:	d008      	beq.n	8016054 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8016042:	6839      	ldr	r1, [r7, #0]
 8016044:	6878      	ldr	r0, [r7, #4]
 8016046:	f000 f962 	bl	801630e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	2202      	movs	r2, #2
 801604e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016052:	e065      	b.n	8016120 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016054:	6878      	ldr	r0, [r7, #4]
 8016056:	f000 fa25 	bl	80164a4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	2203      	movs	r2, #3
 801605e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016062:	e05d      	b.n	8016120 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016064:	6878      	ldr	r0, [r7, #4]
 8016066:	f000 fa1d 	bl	80164a4 <USBD_CtlSendStatus>
      break;
 801606a:	e059      	b.n	8016120 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801606c:	4b2f      	ldr	r3, [pc, #188]	; (801612c <USBD_SetConfig+0x150>)
 801606e:	781b      	ldrb	r3, [r3, #0]
 8016070:	2b00      	cmp	r3, #0
 8016072:	d112      	bne.n	801609a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	2202      	movs	r2, #2
 8016078:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801607c:	4b2b      	ldr	r3, [pc, #172]	; (801612c <USBD_SetConfig+0x150>)
 801607e:	781b      	ldrb	r3, [r3, #0]
 8016080:	461a      	mov	r2, r3
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016086:	4b29      	ldr	r3, [pc, #164]	; (801612c <USBD_SetConfig+0x150>)
 8016088:	781b      	ldrb	r3, [r3, #0]
 801608a:	4619      	mov	r1, r3
 801608c:	6878      	ldr	r0, [r7, #4]
 801608e:	f7fe ffd0 	bl	8015032 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8016092:	6878      	ldr	r0, [r7, #4]
 8016094:	f000 fa06 	bl	80164a4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016098:	e042      	b.n	8016120 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801609a:	4b24      	ldr	r3, [pc, #144]	; (801612c <USBD_SetConfig+0x150>)
 801609c:	781b      	ldrb	r3, [r3, #0]
 801609e:	461a      	mov	r2, r3
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	685b      	ldr	r3, [r3, #4]
 80160a4:	429a      	cmp	r2, r3
 80160a6:	d02a      	beq.n	80160fe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	685b      	ldr	r3, [r3, #4]
 80160ac:	b2db      	uxtb	r3, r3
 80160ae:	4619      	mov	r1, r3
 80160b0:	6878      	ldr	r0, [r7, #4]
 80160b2:	f7fe ffbe 	bl	8015032 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80160b6:	4b1d      	ldr	r3, [pc, #116]	; (801612c <USBD_SetConfig+0x150>)
 80160b8:	781b      	ldrb	r3, [r3, #0]
 80160ba:	461a      	mov	r2, r3
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80160c0:	4b1a      	ldr	r3, [pc, #104]	; (801612c <USBD_SetConfig+0x150>)
 80160c2:	781b      	ldrb	r3, [r3, #0]
 80160c4:	4619      	mov	r1, r3
 80160c6:	6878      	ldr	r0, [r7, #4]
 80160c8:	f7fe ff97 	bl	8014ffa <USBD_SetClassConfig>
 80160cc:	4603      	mov	r3, r0
 80160ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80160d0:	7bfb      	ldrb	r3, [r7, #15]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d00f      	beq.n	80160f6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80160d6:	6839      	ldr	r1, [r7, #0]
 80160d8:	6878      	ldr	r0, [r7, #4]
 80160da:	f000 f918 	bl	801630e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	685b      	ldr	r3, [r3, #4]
 80160e2:	b2db      	uxtb	r3, r3
 80160e4:	4619      	mov	r1, r3
 80160e6:	6878      	ldr	r0, [r7, #4]
 80160e8:	f7fe ffa3 	bl	8015032 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	2202      	movs	r2, #2
 80160f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80160f4:	e014      	b.n	8016120 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80160f6:	6878      	ldr	r0, [r7, #4]
 80160f8:	f000 f9d4 	bl	80164a4 <USBD_CtlSendStatus>
      break;
 80160fc:	e010      	b.n	8016120 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80160fe:	6878      	ldr	r0, [r7, #4]
 8016100:	f000 f9d0 	bl	80164a4 <USBD_CtlSendStatus>
      break;
 8016104:	e00c      	b.n	8016120 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8016106:	6839      	ldr	r1, [r7, #0]
 8016108:	6878      	ldr	r0, [r7, #4]
 801610a:	f000 f900 	bl	801630e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801610e:	4b07      	ldr	r3, [pc, #28]	; (801612c <USBD_SetConfig+0x150>)
 8016110:	781b      	ldrb	r3, [r3, #0]
 8016112:	4619      	mov	r1, r3
 8016114:	6878      	ldr	r0, [r7, #4]
 8016116:	f7fe ff8c 	bl	8015032 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801611a:	2303      	movs	r3, #3
 801611c:	73fb      	strb	r3, [r7, #15]
      break;
 801611e:	bf00      	nop
  }

  return ret;
 8016120:	7bfb      	ldrb	r3, [r7, #15]
}
 8016122:	4618      	mov	r0, r3
 8016124:	3710      	adds	r7, #16
 8016126:	46bd      	mov	sp, r7
 8016128:	bd80      	pop	{r7, pc}
 801612a:	bf00      	nop
 801612c:	240015e4 	.word	0x240015e4

08016130 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016130:	b580      	push	{r7, lr}
 8016132:	b082      	sub	sp, #8
 8016134:	af00      	add	r7, sp, #0
 8016136:	6078      	str	r0, [r7, #4]
 8016138:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801613a:	683b      	ldr	r3, [r7, #0]
 801613c:	88db      	ldrh	r3, [r3, #6]
 801613e:	2b01      	cmp	r3, #1
 8016140:	d004      	beq.n	801614c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8016142:	6839      	ldr	r1, [r7, #0]
 8016144:	6878      	ldr	r0, [r7, #4]
 8016146:	f000 f8e2 	bl	801630e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801614a:	e023      	b.n	8016194 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016152:	b2db      	uxtb	r3, r3
 8016154:	2b02      	cmp	r3, #2
 8016156:	dc02      	bgt.n	801615e <USBD_GetConfig+0x2e>
 8016158:	2b00      	cmp	r3, #0
 801615a:	dc03      	bgt.n	8016164 <USBD_GetConfig+0x34>
 801615c:	e015      	b.n	801618a <USBD_GetConfig+0x5a>
 801615e:	2b03      	cmp	r3, #3
 8016160:	d00b      	beq.n	801617a <USBD_GetConfig+0x4a>
 8016162:	e012      	b.n	801618a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	2200      	movs	r2, #0
 8016168:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	3308      	adds	r3, #8
 801616e:	2201      	movs	r2, #1
 8016170:	4619      	mov	r1, r3
 8016172:	6878      	ldr	r0, [r7, #4]
 8016174:	f000 f93c 	bl	80163f0 <USBD_CtlSendData>
        break;
 8016178:	e00c      	b.n	8016194 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	3304      	adds	r3, #4
 801617e:	2201      	movs	r2, #1
 8016180:	4619      	mov	r1, r3
 8016182:	6878      	ldr	r0, [r7, #4]
 8016184:	f000 f934 	bl	80163f0 <USBD_CtlSendData>
        break;
 8016188:	e004      	b.n	8016194 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801618a:	6839      	ldr	r1, [r7, #0]
 801618c:	6878      	ldr	r0, [r7, #4]
 801618e:	f000 f8be 	bl	801630e <USBD_CtlError>
        break;
 8016192:	bf00      	nop
}
 8016194:	bf00      	nop
 8016196:	3708      	adds	r7, #8
 8016198:	46bd      	mov	sp, r7
 801619a:	bd80      	pop	{r7, pc}

0801619c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801619c:	b580      	push	{r7, lr}
 801619e:	b082      	sub	sp, #8
 80161a0:	af00      	add	r7, sp, #0
 80161a2:	6078      	str	r0, [r7, #4]
 80161a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161ac:	b2db      	uxtb	r3, r3
 80161ae:	3b01      	subs	r3, #1
 80161b0:	2b02      	cmp	r3, #2
 80161b2:	d81e      	bhi.n	80161f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80161b4:	683b      	ldr	r3, [r7, #0]
 80161b6:	88db      	ldrh	r3, [r3, #6]
 80161b8:	2b02      	cmp	r3, #2
 80161ba:	d004      	beq.n	80161c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80161bc:	6839      	ldr	r1, [r7, #0]
 80161be:	6878      	ldr	r0, [r7, #4]
 80161c0:	f000 f8a5 	bl	801630e <USBD_CtlError>
        break;
 80161c4:	e01a      	b.n	80161fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	2201      	movs	r2, #1
 80161ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d005      	beq.n	80161e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	68db      	ldr	r3, [r3, #12]
 80161da:	f043 0202 	orr.w	r2, r3, #2
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	330c      	adds	r3, #12
 80161e6:	2202      	movs	r2, #2
 80161e8:	4619      	mov	r1, r3
 80161ea:	6878      	ldr	r0, [r7, #4]
 80161ec:	f000 f900 	bl	80163f0 <USBD_CtlSendData>
      break;
 80161f0:	e004      	b.n	80161fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80161f2:	6839      	ldr	r1, [r7, #0]
 80161f4:	6878      	ldr	r0, [r7, #4]
 80161f6:	f000 f88a 	bl	801630e <USBD_CtlError>
      break;
 80161fa:	bf00      	nop
  }
}
 80161fc:	bf00      	nop
 80161fe:	3708      	adds	r7, #8
 8016200:	46bd      	mov	sp, r7
 8016202:	bd80      	pop	{r7, pc}

08016204 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016204:	b580      	push	{r7, lr}
 8016206:	b082      	sub	sp, #8
 8016208:	af00      	add	r7, sp, #0
 801620a:	6078      	str	r0, [r7, #4]
 801620c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801620e:	683b      	ldr	r3, [r7, #0]
 8016210:	885b      	ldrh	r3, [r3, #2]
 8016212:	2b01      	cmp	r3, #1
 8016214:	d107      	bne.n	8016226 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	2201      	movs	r2, #1
 801621a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801621e:	6878      	ldr	r0, [r7, #4]
 8016220:	f000 f940 	bl	80164a4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8016224:	e013      	b.n	801624e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8016226:	683b      	ldr	r3, [r7, #0]
 8016228:	885b      	ldrh	r3, [r3, #2]
 801622a:	2b02      	cmp	r3, #2
 801622c:	d10b      	bne.n	8016246 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801622e:	683b      	ldr	r3, [r7, #0]
 8016230:	889b      	ldrh	r3, [r3, #4]
 8016232:	0a1b      	lsrs	r3, r3, #8
 8016234:	b29b      	uxth	r3, r3
 8016236:	b2da      	uxtb	r2, r3
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801623e:	6878      	ldr	r0, [r7, #4]
 8016240:	f000 f930 	bl	80164a4 <USBD_CtlSendStatus>
}
 8016244:	e003      	b.n	801624e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8016246:	6839      	ldr	r1, [r7, #0]
 8016248:	6878      	ldr	r0, [r7, #4]
 801624a:	f000 f860 	bl	801630e <USBD_CtlError>
}
 801624e:	bf00      	nop
 8016250:	3708      	adds	r7, #8
 8016252:	46bd      	mov	sp, r7
 8016254:	bd80      	pop	{r7, pc}

08016256 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016256:	b580      	push	{r7, lr}
 8016258:	b082      	sub	sp, #8
 801625a:	af00      	add	r7, sp, #0
 801625c:	6078      	str	r0, [r7, #4]
 801625e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016266:	b2db      	uxtb	r3, r3
 8016268:	3b01      	subs	r3, #1
 801626a:	2b02      	cmp	r3, #2
 801626c:	d80b      	bhi.n	8016286 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801626e:	683b      	ldr	r3, [r7, #0]
 8016270:	885b      	ldrh	r3, [r3, #2]
 8016272:	2b01      	cmp	r3, #1
 8016274:	d10c      	bne.n	8016290 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	2200      	movs	r2, #0
 801627a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801627e:	6878      	ldr	r0, [r7, #4]
 8016280:	f000 f910 	bl	80164a4 <USBD_CtlSendStatus>
      }
      break;
 8016284:	e004      	b.n	8016290 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8016286:	6839      	ldr	r1, [r7, #0]
 8016288:	6878      	ldr	r0, [r7, #4]
 801628a:	f000 f840 	bl	801630e <USBD_CtlError>
      break;
 801628e:	e000      	b.n	8016292 <USBD_ClrFeature+0x3c>
      break;
 8016290:	bf00      	nop
  }
}
 8016292:	bf00      	nop
 8016294:	3708      	adds	r7, #8
 8016296:	46bd      	mov	sp, r7
 8016298:	bd80      	pop	{r7, pc}

0801629a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801629a:	b580      	push	{r7, lr}
 801629c:	b084      	sub	sp, #16
 801629e:	af00      	add	r7, sp, #0
 80162a0:	6078      	str	r0, [r7, #4]
 80162a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80162a4:	683b      	ldr	r3, [r7, #0]
 80162a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	781a      	ldrb	r2, [r3, #0]
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	3301      	adds	r3, #1
 80162b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	781a      	ldrb	r2, [r3, #0]
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	3301      	adds	r3, #1
 80162c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80162c4:	68f8      	ldr	r0, [r7, #12]
 80162c6:	f7ff fa41 	bl	801574c <SWAPBYTE>
 80162ca:	4603      	mov	r3, r0
 80162cc:	461a      	mov	r2, r3
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	3301      	adds	r3, #1
 80162d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	3301      	adds	r3, #1
 80162dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80162de:	68f8      	ldr	r0, [r7, #12]
 80162e0:	f7ff fa34 	bl	801574c <SWAPBYTE>
 80162e4:	4603      	mov	r3, r0
 80162e6:	461a      	mov	r2, r3
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	3301      	adds	r3, #1
 80162f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	3301      	adds	r3, #1
 80162f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80162f8:	68f8      	ldr	r0, [r7, #12]
 80162fa:	f7ff fa27 	bl	801574c <SWAPBYTE>
 80162fe:	4603      	mov	r3, r0
 8016300:	461a      	mov	r2, r3
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	80da      	strh	r2, [r3, #6]
}
 8016306:	bf00      	nop
 8016308:	3710      	adds	r7, #16
 801630a:	46bd      	mov	sp, r7
 801630c:	bd80      	pop	{r7, pc}

0801630e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801630e:	b580      	push	{r7, lr}
 8016310:	b082      	sub	sp, #8
 8016312:	af00      	add	r7, sp, #0
 8016314:	6078      	str	r0, [r7, #4]
 8016316:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016318:	2180      	movs	r1, #128	; 0x80
 801631a:	6878      	ldr	r0, [r7, #4]
 801631c:	f000 fd4c 	bl	8016db8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016320:	2100      	movs	r1, #0
 8016322:	6878      	ldr	r0, [r7, #4]
 8016324:	f000 fd48 	bl	8016db8 <USBD_LL_StallEP>
}
 8016328:	bf00      	nop
 801632a:	3708      	adds	r7, #8
 801632c:	46bd      	mov	sp, r7
 801632e:	bd80      	pop	{r7, pc}

08016330 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016330:	b580      	push	{r7, lr}
 8016332:	b086      	sub	sp, #24
 8016334:	af00      	add	r7, sp, #0
 8016336:	60f8      	str	r0, [r7, #12]
 8016338:	60b9      	str	r1, [r7, #8]
 801633a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801633c:	2300      	movs	r3, #0
 801633e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	2b00      	cmp	r3, #0
 8016344:	d036      	beq.n	80163b4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801634a:	6938      	ldr	r0, [r7, #16]
 801634c:	f000 f836 	bl	80163bc <USBD_GetLen>
 8016350:	4603      	mov	r3, r0
 8016352:	3301      	adds	r3, #1
 8016354:	b29b      	uxth	r3, r3
 8016356:	005b      	lsls	r3, r3, #1
 8016358:	b29a      	uxth	r2, r3
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801635e:	7dfb      	ldrb	r3, [r7, #23]
 8016360:	68ba      	ldr	r2, [r7, #8]
 8016362:	4413      	add	r3, r2
 8016364:	687a      	ldr	r2, [r7, #4]
 8016366:	7812      	ldrb	r2, [r2, #0]
 8016368:	701a      	strb	r2, [r3, #0]
  idx++;
 801636a:	7dfb      	ldrb	r3, [r7, #23]
 801636c:	3301      	adds	r3, #1
 801636e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016370:	7dfb      	ldrb	r3, [r7, #23]
 8016372:	68ba      	ldr	r2, [r7, #8]
 8016374:	4413      	add	r3, r2
 8016376:	2203      	movs	r2, #3
 8016378:	701a      	strb	r2, [r3, #0]
  idx++;
 801637a:	7dfb      	ldrb	r3, [r7, #23]
 801637c:	3301      	adds	r3, #1
 801637e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016380:	e013      	b.n	80163aa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016382:	7dfb      	ldrb	r3, [r7, #23]
 8016384:	68ba      	ldr	r2, [r7, #8]
 8016386:	4413      	add	r3, r2
 8016388:	693a      	ldr	r2, [r7, #16]
 801638a:	7812      	ldrb	r2, [r2, #0]
 801638c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801638e:	693b      	ldr	r3, [r7, #16]
 8016390:	3301      	adds	r3, #1
 8016392:	613b      	str	r3, [r7, #16]
    idx++;
 8016394:	7dfb      	ldrb	r3, [r7, #23]
 8016396:	3301      	adds	r3, #1
 8016398:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801639a:	7dfb      	ldrb	r3, [r7, #23]
 801639c:	68ba      	ldr	r2, [r7, #8]
 801639e:	4413      	add	r3, r2
 80163a0:	2200      	movs	r2, #0
 80163a2:	701a      	strb	r2, [r3, #0]
    idx++;
 80163a4:	7dfb      	ldrb	r3, [r7, #23]
 80163a6:	3301      	adds	r3, #1
 80163a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80163aa:	693b      	ldr	r3, [r7, #16]
 80163ac:	781b      	ldrb	r3, [r3, #0]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d1e7      	bne.n	8016382 <USBD_GetString+0x52>
 80163b2:	e000      	b.n	80163b6 <USBD_GetString+0x86>
    return;
 80163b4:	bf00      	nop
  }
}
 80163b6:	3718      	adds	r7, #24
 80163b8:	46bd      	mov	sp, r7
 80163ba:	bd80      	pop	{r7, pc}

080163bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80163bc:	b480      	push	{r7}
 80163be:	b085      	sub	sp, #20
 80163c0:	af00      	add	r7, sp, #0
 80163c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80163c4:	2300      	movs	r3, #0
 80163c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80163cc:	e005      	b.n	80163da <USBD_GetLen+0x1e>
  {
    len++;
 80163ce:	7bfb      	ldrb	r3, [r7, #15]
 80163d0:	3301      	adds	r3, #1
 80163d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80163d4:	68bb      	ldr	r3, [r7, #8]
 80163d6:	3301      	adds	r3, #1
 80163d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80163da:	68bb      	ldr	r3, [r7, #8]
 80163dc:	781b      	ldrb	r3, [r3, #0]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d1f5      	bne.n	80163ce <USBD_GetLen+0x12>
  }

  return len;
 80163e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80163e4:	4618      	mov	r0, r3
 80163e6:	3714      	adds	r7, #20
 80163e8:	46bd      	mov	sp, r7
 80163ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ee:	4770      	bx	lr

080163f0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80163f0:	b580      	push	{r7, lr}
 80163f2:	b084      	sub	sp, #16
 80163f4:	af00      	add	r7, sp, #0
 80163f6:	60f8      	str	r0, [r7, #12]
 80163f8:	60b9      	str	r1, [r7, #8]
 80163fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	2202      	movs	r2, #2
 8016400:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	687a      	ldr	r2, [r7, #4]
 8016408:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	687a      	ldr	r2, [r7, #4]
 801640e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	68ba      	ldr	r2, [r7, #8]
 8016414:	2100      	movs	r1, #0
 8016416:	68f8      	ldr	r0, [r7, #12]
 8016418:	f000 fd57 	bl	8016eca <USBD_LL_Transmit>

  return USBD_OK;
 801641c:	2300      	movs	r3, #0
}
 801641e:	4618      	mov	r0, r3
 8016420:	3710      	adds	r7, #16
 8016422:	46bd      	mov	sp, r7
 8016424:	bd80      	pop	{r7, pc}

08016426 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016426:	b580      	push	{r7, lr}
 8016428:	b084      	sub	sp, #16
 801642a:	af00      	add	r7, sp, #0
 801642c:	60f8      	str	r0, [r7, #12]
 801642e:	60b9      	str	r1, [r7, #8]
 8016430:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	68ba      	ldr	r2, [r7, #8]
 8016436:	2100      	movs	r1, #0
 8016438:	68f8      	ldr	r0, [r7, #12]
 801643a:	f000 fd46 	bl	8016eca <USBD_LL_Transmit>

  return USBD_OK;
 801643e:	2300      	movs	r3, #0
}
 8016440:	4618      	mov	r0, r3
 8016442:	3710      	adds	r7, #16
 8016444:	46bd      	mov	sp, r7
 8016446:	bd80      	pop	{r7, pc}

08016448 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016448:	b580      	push	{r7, lr}
 801644a:	b084      	sub	sp, #16
 801644c:	af00      	add	r7, sp, #0
 801644e:	60f8      	str	r0, [r7, #12]
 8016450:	60b9      	str	r1, [r7, #8]
 8016452:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	2203      	movs	r2, #3
 8016458:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	687a      	ldr	r2, [r7, #4]
 8016460:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	687a      	ldr	r2, [r7, #4]
 8016468:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	68ba      	ldr	r2, [r7, #8]
 8016470:	2100      	movs	r1, #0
 8016472:	68f8      	ldr	r0, [r7, #12]
 8016474:	f000 fd4a 	bl	8016f0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016478:	2300      	movs	r3, #0
}
 801647a:	4618      	mov	r0, r3
 801647c:	3710      	adds	r7, #16
 801647e:	46bd      	mov	sp, r7
 8016480:	bd80      	pop	{r7, pc}

08016482 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016482:	b580      	push	{r7, lr}
 8016484:	b084      	sub	sp, #16
 8016486:	af00      	add	r7, sp, #0
 8016488:	60f8      	str	r0, [r7, #12]
 801648a:	60b9      	str	r1, [r7, #8]
 801648c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	68ba      	ldr	r2, [r7, #8]
 8016492:	2100      	movs	r1, #0
 8016494:	68f8      	ldr	r0, [r7, #12]
 8016496:	f000 fd39 	bl	8016f0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801649a:	2300      	movs	r3, #0
}
 801649c:	4618      	mov	r0, r3
 801649e:	3710      	adds	r7, #16
 80164a0:	46bd      	mov	sp, r7
 80164a2:	bd80      	pop	{r7, pc}

080164a4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80164a4:	b580      	push	{r7, lr}
 80164a6:	b082      	sub	sp, #8
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	2204      	movs	r2, #4
 80164b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80164b4:	2300      	movs	r3, #0
 80164b6:	2200      	movs	r2, #0
 80164b8:	2100      	movs	r1, #0
 80164ba:	6878      	ldr	r0, [r7, #4]
 80164bc:	f000 fd05 	bl	8016eca <USBD_LL_Transmit>

  return USBD_OK;
 80164c0:	2300      	movs	r3, #0
}
 80164c2:	4618      	mov	r0, r3
 80164c4:	3708      	adds	r7, #8
 80164c6:	46bd      	mov	sp, r7
 80164c8:	bd80      	pop	{r7, pc}

080164ca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80164ca:	b580      	push	{r7, lr}
 80164cc:	b082      	sub	sp, #8
 80164ce:	af00      	add	r7, sp, #0
 80164d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	2205      	movs	r2, #5
 80164d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80164da:	2300      	movs	r3, #0
 80164dc:	2200      	movs	r2, #0
 80164de:	2100      	movs	r1, #0
 80164e0:	6878      	ldr	r0, [r7, #4]
 80164e2:	f000 fd13 	bl	8016f0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80164e6:	2300      	movs	r3, #0
}
 80164e8:	4618      	mov	r0, r3
 80164ea:	3708      	adds	r7, #8
 80164ec:	46bd      	mov	sp, r7
 80164ee:	bd80      	pop	{r7, pc}

080164f0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80164f0:	b480      	push	{r7}
 80164f2:	b087      	sub	sp, #28
 80164f4:	af00      	add	r7, sp, #0
 80164f6:	60f8      	str	r0, [r7, #12]
 80164f8:	60b9      	str	r1, [r7, #8]
 80164fa:	4613      	mov	r3, r2
 80164fc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80164fe:	2301      	movs	r3, #1
 8016500:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8016502:	2300      	movs	r3, #0
 8016504:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8016506:	4b1f      	ldr	r3, [pc, #124]	; (8016584 <FATFS_LinkDriverEx+0x94>)
 8016508:	7a5b      	ldrb	r3, [r3, #9]
 801650a:	b2db      	uxtb	r3, r3
 801650c:	2b00      	cmp	r3, #0
 801650e:	d131      	bne.n	8016574 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016510:	4b1c      	ldr	r3, [pc, #112]	; (8016584 <FATFS_LinkDriverEx+0x94>)
 8016512:	7a5b      	ldrb	r3, [r3, #9]
 8016514:	b2db      	uxtb	r3, r3
 8016516:	461a      	mov	r2, r3
 8016518:	4b1a      	ldr	r3, [pc, #104]	; (8016584 <FATFS_LinkDriverEx+0x94>)
 801651a:	2100      	movs	r1, #0
 801651c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801651e:	4b19      	ldr	r3, [pc, #100]	; (8016584 <FATFS_LinkDriverEx+0x94>)
 8016520:	7a5b      	ldrb	r3, [r3, #9]
 8016522:	b2db      	uxtb	r3, r3
 8016524:	4a17      	ldr	r2, [pc, #92]	; (8016584 <FATFS_LinkDriverEx+0x94>)
 8016526:	009b      	lsls	r3, r3, #2
 8016528:	4413      	add	r3, r2
 801652a:	68fa      	ldr	r2, [r7, #12]
 801652c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801652e:	4b15      	ldr	r3, [pc, #84]	; (8016584 <FATFS_LinkDriverEx+0x94>)
 8016530:	7a5b      	ldrb	r3, [r3, #9]
 8016532:	b2db      	uxtb	r3, r3
 8016534:	461a      	mov	r2, r3
 8016536:	4b13      	ldr	r3, [pc, #76]	; (8016584 <FATFS_LinkDriverEx+0x94>)
 8016538:	4413      	add	r3, r2
 801653a:	79fa      	ldrb	r2, [r7, #7]
 801653c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801653e:	4b11      	ldr	r3, [pc, #68]	; (8016584 <FATFS_LinkDriverEx+0x94>)
 8016540:	7a5b      	ldrb	r3, [r3, #9]
 8016542:	b2db      	uxtb	r3, r3
 8016544:	1c5a      	adds	r2, r3, #1
 8016546:	b2d1      	uxtb	r1, r2
 8016548:	4a0e      	ldr	r2, [pc, #56]	; (8016584 <FATFS_LinkDriverEx+0x94>)
 801654a:	7251      	strb	r1, [r2, #9]
 801654c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801654e:	7dbb      	ldrb	r3, [r7, #22]
 8016550:	3330      	adds	r3, #48	; 0x30
 8016552:	b2da      	uxtb	r2, r3
 8016554:	68bb      	ldr	r3, [r7, #8]
 8016556:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016558:	68bb      	ldr	r3, [r7, #8]
 801655a:	3301      	adds	r3, #1
 801655c:	223a      	movs	r2, #58	; 0x3a
 801655e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016560:	68bb      	ldr	r3, [r7, #8]
 8016562:	3302      	adds	r3, #2
 8016564:	222f      	movs	r2, #47	; 0x2f
 8016566:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016568:	68bb      	ldr	r3, [r7, #8]
 801656a:	3303      	adds	r3, #3
 801656c:	2200      	movs	r2, #0
 801656e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016570:	2300      	movs	r3, #0
 8016572:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016574:	7dfb      	ldrb	r3, [r7, #23]
}
 8016576:	4618      	mov	r0, r3
 8016578:	371c      	adds	r7, #28
 801657a:	46bd      	mov	sp, r7
 801657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016580:	4770      	bx	lr
 8016582:	bf00      	nop
 8016584:	240015e8 	.word	0x240015e8

08016588 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016588:	b580      	push	{r7, lr}
 801658a:	b082      	sub	sp, #8
 801658c:	af00      	add	r7, sp, #0
 801658e:	6078      	str	r0, [r7, #4]
 8016590:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016592:	2200      	movs	r2, #0
 8016594:	6839      	ldr	r1, [r7, #0]
 8016596:	6878      	ldr	r0, [r7, #4]
 8016598:	f7ff ffaa 	bl	80164f0 <FATFS_LinkDriverEx>
 801659c:	4603      	mov	r3, r0
}
 801659e:	4618      	mov	r0, r3
 80165a0:	3708      	adds	r7, #8
 80165a2:	46bd      	mov	sp, r7
 80165a4:	bd80      	pop	{r7, pc}
	...

080165a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80165a8:	b580      	push	{r7, lr}
 80165aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80165ac:	2201      	movs	r2, #1
 80165ae:	4913      	ldr	r1, [pc, #76]	; (80165fc <MX_USB_DEVICE_Init+0x54>)
 80165b0:	4813      	ldr	r0, [pc, #76]	; (8016600 <MX_USB_DEVICE_Init+0x58>)
 80165b2:	f7fe fca5 	bl	8014f00 <USBD_Init>
 80165b6:	4603      	mov	r3, r0
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d001      	beq.n	80165c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80165bc:	f7ec f986 	bl	80028cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80165c0:	4910      	ldr	r1, [pc, #64]	; (8016604 <MX_USB_DEVICE_Init+0x5c>)
 80165c2:	480f      	ldr	r0, [pc, #60]	; (8016600 <MX_USB_DEVICE_Init+0x58>)
 80165c4:	f7fe fccc 	bl	8014f60 <USBD_RegisterClass>
 80165c8:	4603      	mov	r3, r0
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d001      	beq.n	80165d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80165ce:	f7ec f97d 	bl	80028cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80165d2:	490d      	ldr	r1, [pc, #52]	; (8016608 <MX_USB_DEVICE_Init+0x60>)
 80165d4:	480a      	ldr	r0, [pc, #40]	; (8016600 <MX_USB_DEVICE_Init+0x58>)
 80165d6:	f7fe fbc3 	bl	8014d60 <USBD_CDC_RegisterInterface>
 80165da:	4603      	mov	r3, r0
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d001      	beq.n	80165e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80165e0:	f7ec f974 	bl	80028cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80165e4:	4806      	ldr	r0, [pc, #24]	; (8016600 <MX_USB_DEVICE_Init+0x58>)
 80165e6:	f7fe fcf1 	bl	8014fcc <USBD_Start>
 80165ea:	4603      	mov	r3, r0
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d001      	beq.n	80165f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80165f0:	f7ec f96c 	bl	80028cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80165f4:	f7f3 f908 	bl	8009808 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80165f8:	bf00      	nop
 80165fa:	bd80      	pop	{r7, pc}
 80165fc:	240000b0 	.word	0x240000b0
 8016600:	240015f4 	.word	0x240015f4
 8016604:	2400001c 	.word	0x2400001c
 8016608:	2400009c 	.word	0x2400009c

0801660c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 801660c:	b580      	push	{r7, lr}
 801660e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8016610:	2200      	movs	r2, #0
 8016612:	4905      	ldr	r1, [pc, #20]	; (8016628 <CDC_Init_HS+0x1c>)
 8016614:	4805      	ldr	r0, [pc, #20]	; (801662c <CDC_Init_HS+0x20>)
 8016616:	f7fe fbbd 	bl	8014d94 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801661a:	4905      	ldr	r1, [pc, #20]	; (8016630 <CDC_Init_HS+0x24>)
 801661c:	4803      	ldr	r0, [pc, #12]	; (801662c <CDC_Init_HS+0x20>)
 801661e:	f7fe fbdb 	bl	8014dd8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016622:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8016624:	4618      	mov	r0, r3
 8016626:	bd80      	pop	{r7, pc}
 8016628:	240020d0 	.word	0x240020d0
 801662c:	240015f4 	.word	0x240015f4
 8016630:	240018d0 	.word	0x240018d0

08016634 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8016634:	b480      	push	{r7}
 8016636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8016638:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801663a:	4618      	mov	r0, r3
 801663c:	46bd      	mov	sp, r7
 801663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016642:	4770      	bx	lr

08016644 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016644:	b480      	push	{r7}
 8016646:	b083      	sub	sp, #12
 8016648:	af00      	add	r7, sp, #0
 801664a:	4603      	mov	r3, r0
 801664c:	6039      	str	r1, [r7, #0]
 801664e:	71fb      	strb	r3, [r7, #7]
 8016650:	4613      	mov	r3, r2
 8016652:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8016654:	79fb      	ldrb	r3, [r7, #7]
 8016656:	2b23      	cmp	r3, #35	; 0x23
 8016658:	d84a      	bhi.n	80166f0 <CDC_Control_HS+0xac>
 801665a:	a201      	add	r2, pc, #4	; (adr r2, 8016660 <CDC_Control_HS+0x1c>)
 801665c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016660:	080166f1 	.word	0x080166f1
 8016664:	080166f1 	.word	0x080166f1
 8016668:	080166f1 	.word	0x080166f1
 801666c:	080166f1 	.word	0x080166f1
 8016670:	080166f1 	.word	0x080166f1
 8016674:	080166f1 	.word	0x080166f1
 8016678:	080166f1 	.word	0x080166f1
 801667c:	080166f1 	.word	0x080166f1
 8016680:	080166f1 	.word	0x080166f1
 8016684:	080166f1 	.word	0x080166f1
 8016688:	080166f1 	.word	0x080166f1
 801668c:	080166f1 	.word	0x080166f1
 8016690:	080166f1 	.word	0x080166f1
 8016694:	080166f1 	.word	0x080166f1
 8016698:	080166f1 	.word	0x080166f1
 801669c:	080166f1 	.word	0x080166f1
 80166a0:	080166f1 	.word	0x080166f1
 80166a4:	080166f1 	.word	0x080166f1
 80166a8:	080166f1 	.word	0x080166f1
 80166ac:	080166f1 	.word	0x080166f1
 80166b0:	080166f1 	.word	0x080166f1
 80166b4:	080166f1 	.word	0x080166f1
 80166b8:	080166f1 	.word	0x080166f1
 80166bc:	080166f1 	.word	0x080166f1
 80166c0:	080166f1 	.word	0x080166f1
 80166c4:	080166f1 	.word	0x080166f1
 80166c8:	080166f1 	.word	0x080166f1
 80166cc:	080166f1 	.word	0x080166f1
 80166d0:	080166f1 	.word	0x080166f1
 80166d4:	080166f1 	.word	0x080166f1
 80166d8:	080166f1 	.word	0x080166f1
 80166dc:	080166f1 	.word	0x080166f1
 80166e0:	080166f1 	.word	0x080166f1
 80166e4:	080166f1 	.word	0x080166f1
 80166e8:	080166f1 	.word	0x080166f1
 80166ec:	080166f1 	.word	0x080166f1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80166f0:	bf00      	nop
  }

  return (USBD_OK);
 80166f2:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80166f4:	4618      	mov	r0, r3
 80166f6:	370c      	adds	r7, #12
 80166f8:	46bd      	mov	sp, r7
 80166fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166fe:	4770      	bx	lr

08016700 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8016700:	b580      	push	{r7, lr}
 8016702:	b084      	sub	sp, #16
 8016704:	af00      	add	r7, sp, #0
 8016706:	6078      	str	r0, [r7, #4]
 8016708:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801670a:	6879      	ldr	r1, [r7, #4]
 801670c:	480e      	ldr	r0, [pc, #56]	; (8016748 <CDC_Receive_HS+0x48>)
 801670e:	f7fe fb63 	bl	8014dd8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8016712:	480d      	ldr	r0, [pc, #52]	; (8016748 <CDC_Receive_HS+0x48>)
 8016714:	f7fe fbbe 	bl	8014e94 <USBD_CDC_ReceivePacket>

  extern uint8_t usbDataBuffer[usbBufferLen];
  extern uint32_t usbBytesReady;

  uint32_t cpyLen = *Len;
 8016718:	683b      	ldr	r3, [r7, #0]
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	60fb      	str	r3, [r7, #12]
  /*char debug[250];
  sprintf(debug, "cpyLen: %d\n", cpyLen);
  CDC_Transmit_HS(debug, strlen(debug));*/

  memcpy(usbDataBuffer + usbBytesReady, Buf, cpyLen);
 801671e:	4b0b      	ldr	r3, [pc, #44]	; (801674c <CDC_Receive_HS+0x4c>)
 8016720:	681b      	ldr	r3, [r3, #0]
 8016722:	4a0b      	ldr	r2, [pc, #44]	; (8016750 <CDC_Receive_HS+0x50>)
 8016724:	4413      	add	r3, r2
 8016726:	68fa      	ldr	r2, [r7, #12]
 8016728:	6879      	ldr	r1, [r7, #4]
 801672a:	4618      	mov	r0, r3
 801672c:	f000 fcf0 	bl	8017110 <memcpy>
  usbBytesReady += cpyLen;
 8016730:	4b06      	ldr	r3, [pc, #24]	; (801674c <CDC_Receive_HS+0x4c>)
 8016732:	681a      	ldr	r2, [r3, #0]
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	4413      	add	r3, r2
 8016738:	4a04      	ldr	r2, [pc, #16]	; (801674c <CDC_Receive_HS+0x4c>)
 801673a:	6013      	str	r3, [r2, #0]
  
  return (USBD_OK);
 801673c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801673e:	4618      	mov	r0, r3
 8016740:	3710      	adds	r7, #16
 8016742:	46bd      	mov	sp, r7
 8016744:	bd80      	pop	{r7, pc}
 8016746:	bf00      	nop
 8016748:	240015f4 	.word	0x240015f4
 801674c:	2400026c 	.word	0x2400026c
 8016750:	2400016c 	.word	0x2400016c

08016754 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8016754:	b580      	push	{r7, lr}
 8016756:	b084      	sub	sp, #16
 8016758:	af00      	add	r7, sp, #0
 801675a:	6078      	str	r0, [r7, #4]
 801675c:	460b      	mov	r3, r1
 801675e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016760:	2300      	movs	r3, #0
 8016762:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8016764:	4b0d      	ldr	r3, [pc, #52]	; (801679c <CDC_Transmit_HS+0x48>)
 8016766:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801676a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801676c:	68bb      	ldr	r3, [r7, #8]
 801676e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016772:	2b00      	cmp	r3, #0
 8016774:	d001      	beq.n	801677a <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8016776:	2301      	movs	r3, #1
 8016778:	e00b      	b.n	8016792 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 801677a:	887b      	ldrh	r3, [r7, #2]
 801677c:	461a      	mov	r2, r3
 801677e:	6879      	ldr	r1, [r7, #4]
 8016780:	4806      	ldr	r0, [pc, #24]	; (801679c <CDC_Transmit_HS+0x48>)
 8016782:	f7fe fb07 	bl	8014d94 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8016786:	4805      	ldr	r0, [pc, #20]	; (801679c <CDC_Transmit_HS+0x48>)
 8016788:	f7fe fb44 	bl	8014e14 <USBD_CDC_TransmitPacket>
 801678c:	4603      	mov	r3, r0
 801678e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8016790:	7bfb      	ldrb	r3, [r7, #15]
}
 8016792:	4618      	mov	r0, r3
 8016794:	3710      	adds	r7, #16
 8016796:	46bd      	mov	sp, r7
 8016798:	bd80      	pop	{r7, pc}
 801679a:	bf00      	nop
 801679c:	240015f4 	.word	0x240015f4

080167a0 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80167a0:	b480      	push	{r7}
 80167a2:	b087      	sub	sp, #28
 80167a4:	af00      	add	r7, sp, #0
 80167a6:	60f8      	str	r0, [r7, #12]
 80167a8:	60b9      	str	r1, [r7, #8]
 80167aa:	4613      	mov	r3, r2
 80167ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80167ae:	2300      	movs	r3, #0
 80167b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80167b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80167b6:	4618      	mov	r0, r3
 80167b8:	371c      	adds	r7, #28
 80167ba:	46bd      	mov	sp, r7
 80167bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167c0:	4770      	bx	lr
	...

080167c4 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80167c4:	b480      	push	{r7}
 80167c6:	b083      	sub	sp, #12
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	4603      	mov	r3, r0
 80167cc:	6039      	str	r1, [r7, #0]
 80167ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80167d0:	683b      	ldr	r3, [r7, #0]
 80167d2:	2212      	movs	r2, #18
 80167d4:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80167d6:	4b03      	ldr	r3, [pc, #12]	; (80167e4 <USBD_HS_DeviceDescriptor+0x20>)
}
 80167d8:	4618      	mov	r0, r3
 80167da:	370c      	adds	r7, #12
 80167dc:	46bd      	mov	sp, r7
 80167de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167e2:	4770      	bx	lr
 80167e4:	240000cc 	.word	0x240000cc

080167e8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80167e8:	b480      	push	{r7}
 80167ea:	b083      	sub	sp, #12
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	4603      	mov	r3, r0
 80167f0:	6039      	str	r1, [r7, #0]
 80167f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80167f4:	683b      	ldr	r3, [r7, #0]
 80167f6:	2204      	movs	r2, #4
 80167f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80167fa:	4b03      	ldr	r3, [pc, #12]	; (8016808 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80167fc:	4618      	mov	r0, r3
 80167fe:	370c      	adds	r7, #12
 8016800:	46bd      	mov	sp, r7
 8016802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016806:	4770      	bx	lr
 8016808:	240000e0 	.word	0x240000e0

0801680c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801680c:	b580      	push	{r7, lr}
 801680e:	b082      	sub	sp, #8
 8016810:	af00      	add	r7, sp, #0
 8016812:	4603      	mov	r3, r0
 8016814:	6039      	str	r1, [r7, #0]
 8016816:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016818:	79fb      	ldrb	r3, [r7, #7]
 801681a:	2b00      	cmp	r3, #0
 801681c:	d105      	bne.n	801682a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801681e:	683a      	ldr	r2, [r7, #0]
 8016820:	4907      	ldr	r1, [pc, #28]	; (8016840 <USBD_HS_ProductStrDescriptor+0x34>)
 8016822:	4808      	ldr	r0, [pc, #32]	; (8016844 <USBD_HS_ProductStrDescriptor+0x38>)
 8016824:	f7ff fd84 	bl	8016330 <USBD_GetString>
 8016828:	e004      	b.n	8016834 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801682a:	683a      	ldr	r2, [r7, #0]
 801682c:	4904      	ldr	r1, [pc, #16]	; (8016840 <USBD_HS_ProductStrDescriptor+0x34>)
 801682e:	4805      	ldr	r0, [pc, #20]	; (8016844 <USBD_HS_ProductStrDescriptor+0x38>)
 8016830:	f7ff fd7e 	bl	8016330 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016834:	4b02      	ldr	r3, [pc, #8]	; (8016840 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8016836:	4618      	mov	r0, r3
 8016838:	3708      	adds	r7, #8
 801683a:	46bd      	mov	sp, r7
 801683c:	bd80      	pop	{r7, pc}
 801683e:	bf00      	nop
 8016840:	240028d0 	.word	0x240028d0
 8016844:	08018430 	.word	0x08018430

08016848 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016848:	b580      	push	{r7, lr}
 801684a:	b082      	sub	sp, #8
 801684c:	af00      	add	r7, sp, #0
 801684e:	4603      	mov	r3, r0
 8016850:	6039      	str	r1, [r7, #0]
 8016852:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016854:	683a      	ldr	r2, [r7, #0]
 8016856:	4904      	ldr	r1, [pc, #16]	; (8016868 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8016858:	4804      	ldr	r0, [pc, #16]	; (801686c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801685a:	f7ff fd69 	bl	8016330 <USBD_GetString>
  return USBD_StrDesc;
 801685e:	4b02      	ldr	r3, [pc, #8]	; (8016868 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8016860:	4618      	mov	r0, r3
 8016862:	3708      	adds	r7, #8
 8016864:	46bd      	mov	sp, r7
 8016866:	bd80      	pop	{r7, pc}
 8016868:	240028d0 	.word	0x240028d0
 801686c:	0801844c 	.word	0x0801844c

08016870 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016870:	b580      	push	{r7, lr}
 8016872:	b082      	sub	sp, #8
 8016874:	af00      	add	r7, sp, #0
 8016876:	4603      	mov	r3, r0
 8016878:	6039      	str	r1, [r7, #0]
 801687a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801687c:	683b      	ldr	r3, [r7, #0]
 801687e:	221a      	movs	r2, #26
 8016880:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016882:	f000 f843 	bl	801690c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8016886:	4b02      	ldr	r3, [pc, #8]	; (8016890 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8016888:	4618      	mov	r0, r3
 801688a:	3708      	adds	r7, #8
 801688c:	46bd      	mov	sp, r7
 801688e:	bd80      	pop	{r7, pc}
 8016890:	240000e4 	.word	0x240000e4

08016894 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016894:	b580      	push	{r7, lr}
 8016896:	b082      	sub	sp, #8
 8016898:	af00      	add	r7, sp, #0
 801689a:	4603      	mov	r3, r0
 801689c:	6039      	str	r1, [r7, #0]
 801689e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80168a0:	79fb      	ldrb	r3, [r7, #7]
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d105      	bne.n	80168b2 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80168a6:	683a      	ldr	r2, [r7, #0]
 80168a8:	4907      	ldr	r1, [pc, #28]	; (80168c8 <USBD_HS_ConfigStrDescriptor+0x34>)
 80168aa:	4808      	ldr	r0, [pc, #32]	; (80168cc <USBD_HS_ConfigStrDescriptor+0x38>)
 80168ac:	f7ff fd40 	bl	8016330 <USBD_GetString>
 80168b0:	e004      	b.n	80168bc <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80168b2:	683a      	ldr	r2, [r7, #0]
 80168b4:	4904      	ldr	r1, [pc, #16]	; (80168c8 <USBD_HS_ConfigStrDescriptor+0x34>)
 80168b6:	4805      	ldr	r0, [pc, #20]	; (80168cc <USBD_HS_ConfigStrDescriptor+0x38>)
 80168b8:	f7ff fd3a 	bl	8016330 <USBD_GetString>
  }
  return USBD_StrDesc;
 80168bc:	4b02      	ldr	r3, [pc, #8]	; (80168c8 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80168be:	4618      	mov	r0, r3
 80168c0:	3708      	adds	r7, #8
 80168c2:	46bd      	mov	sp, r7
 80168c4:	bd80      	pop	{r7, pc}
 80168c6:	bf00      	nop
 80168c8:	240028d0 	.word	0x240028d0
 80168cc:	08018450 	.word	0x08018450

080168d0 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80168d0:	b580      	push	{r7, lr}
 80168d2:	b082      	sub	sp, #8
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	4603      	mov	r3, r0
 80168d8:	6039      	str	r1, [r7, #0]
 80168da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80168dc:	79fb      	ldrb	r3, [r7, #7]
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d105      	bne.n	80168ee <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80168e2:	683a      	ldr	r2, [r7, #0]
 80168e4:	4907      	ldr	r1, [pc, #28]	; (8016904 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80168e6:	4808      	ldr	r0, [pc, #32]	; (8016908 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80168e8:	f7ff fd22 	bl	8016330 <USBD_GetString>
 80168ec:	e004      	b.n	80168f8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80168ee:	683a      	ldr	r2, [r7, #0]
 80168f0:	4904      	ldr	r1, [pc, #16]	; (8016904 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80168f2:	4805      	ldr	r0, [pc, #20]	; (8016908 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80168f4:	f7ff fd1c 	bl	8016330 <USBD_GetString>
  }
  return USBD_StrDesc;
 80168f8:	4b02      	ldr	r3, [pc, #8]	; (8016904 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80168fa:	4618      	mov	r0, r3
 80168fc:	3708      	adds	r7, #8
 80168fe:	46bd      	mov	sp, r7
 8016900:	bd80      	pop	{r7, pc}
 8016902:	bf00      	nop
 8016904:	240028d0 	.word	0x240028d0
 8016908:	0801845c 	.word	0x0801845c

0801690c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801690c:	b580      	push	{r7, lr}
 801690e:	b084      	sub	sp, #16
 8016910:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016912:	4b0f      	ldr	r3, [pc, #60]	; (8016950 <Get_SerialNum+0x44>)
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016918:	4b0e      	ldr	r3, [pc, #56]	; (8016954 <Get_SerialNum+0x48>)
 801691a:	681b      	ldr	r3, [r3, #0]
 801691c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801691e:	4b0e      	ldr	r3, [pc, #56]	; (8016958 <Get_SerialNum+0x4c>)
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016924:	68fa      	ldr	r2, [r7, #12]
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	4413      	add	r3, r2
 801692a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	2b00      	cmp	r3, #0
 8016930:	d009      	beq.n	8016946 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016932:	2208      	movs	r2, #8
 8016934:	4909      	ldr	r1, [pc, #36]	; (801695c <Get_SerialNum+0x50>)
 8016936:	68f8      	ldr	r0, [r7, #12]
 8016938:	f000 f814 	bl	8016964 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801693c:	2204      	movs	r2, #4
 801693e:	4908      	ldr	r1, [pc, #32]	; (8016960 <Get_SerialNum+0x54>)
 8016940:	68b8      	ldr	r0, [r7, #8]
 8016942:	f000 f80f 	bl	8016964 <IntToUnicode>
  }
}
 8016946:	bf00      	nop
 8016948:	3710      	adds	r7, #16
 801694a:	46bd      	mov	sp, r7
 801694c:	bd80      	pop	{r7, pc}
 801694e:	bf00      	nop
 8016950:	1ff1e800 	.word	0x1ff1e800
 8016954:	1ff1e804 	.word	0x1ff1e804
 8016958:	1ff1e808 	.word	0x1ff1e808
 801695c:	240000e6 	.word	0x240000e6
 8016960:	240000f6 	.word	0x240000f6

08016964 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016964:	b480      	push	{r7}
 8016966:	b087      	sub	sp, #28
 8016968:	af00      	add	r7, sp, #0
 801696a:	60f8      	str	r0, [r7, #12]
 801696c:	60b9      	str	r1, [r7, #8]
 801696e:	4613      	mov	r3, r2
 8016970:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016972:	2300      	movs	r3, #0
 8016974:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016976:	2300      	movs	r3, #0
 8016978:	75fb      	strb	r3, [r7, #23]
 801697a:	e027      	b.n	80169cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	0f1b      	lsrs	r3, r3, #28
 8016980:	2b09      	cmp	r3, #9
 8016982:	d80b      	bhi.n	801699c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	0f1b      	lsrs	r3, r3, #28
 8016988:	b2da      	uxtb	r2, r3
 801698a:	7dfb      	ldrb	r3, [r7, #23]
 801698c:	005b      	lsls	r3, r3, #1
 801698e:	4619      	mov	r1, r3
 8016990:	68bb      	ldr	r3, [r7, #8]
 8016992:	440b      	add	r3, r1
 8016994:	3230      	adds	r2, #48	; 0x30
 8016996:	b2d2      	uxtb	r2, r2
 8016998:	701a      	strb	r2, [r3, #0]
 801699a:	e00a      	b.n	80169b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	0f1b      	lsrs	r3, r3, #28
 80169a0:	b2da      	uxtb	r2, r3
 80169a2:	7dfb      	ldrb	r3, [r7, #23]
 80169a4:	005b      	lsls	r3, r3, #1
 80169a6:	4619      	mov	r1, r3
 80169a8:	68bb      	ldr	r3, [r7, #8]
 80169aa:	440b      	add	r3, r1
 80169ac:	3237      	adds	r2, #55	; 0x37
 80169ae:	b2d2      	uxtb	r2, r2
 80169b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	011b      	lsls	r3, r3, #4
 80169b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80169b8:	7dfb      	ldrb	r3, [r7, #23]
 80169ba:	005b      	lsls	r3, r3, #1
 80169bc:	3301      	adds	r3, #1
 80169be:	68ba      	ldr	r2, [r7, #8]
 80169c0:	4413      	add	r3, r2
 80169c2:	2200      	movs	r2, #0
 80169c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80169c6:	7dfb      	ldrb	r3, [r7, #23]
 80169c8:	3301      	adds	r3, #1
 80169ca:	75fb      	strb	r3, [r7, #23]
 80169cc:	7dfa      	ldrb	r2, [r7, #23]
 80169ce:	79fb      	ldrb	r3, [r7, #7]
 80169d0:	429a      	cmp	r2, r3
 80169d2:	d3d3      	bcc.n	801697c <IntToUnicode+0x18>
  }
}
 80169d4:	bf00      	nop
 80169d6:	bf00      	nop
 80169d8:	371c      	adds	r7, #28
 80169da:	46bd      	mov	sp, r7
 80169dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169e0:	4770      	bx	lr
	...

080169e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80169e4:	b580      	push	{r7, lr}
 80169e6:	b0b2      	sub	sp, #200	; 0xc8
 80169e8:	af00      	add	r7, sp, #0
 80169ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80169ec:	f107 0310 	add.w	r3, r7, #16
 80169f0:	22b8      	movs	r2, #184	; 0xb8
 80169f2:	2100      	movs	r1, #0
 80169f4:	4618      	mov	r0, r3
 80169f6:	f000 fb4f 	bl	8017098 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	4a1a      	ldr	r2, [pc, #104]	; (8016a68 <HAL_PCD_MspInit+0x84>)
 8016a00:	4293      	cmp	r3, r2
 8016a02:	d12c      	bne.n	8016a5e <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8016a04:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8016a08:	f04f 0300 	mov.w	r3, #0
 8016a0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8016a10:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8016a14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016a18:	f107 0310 	add.w	r3, r7, #16
 8016a1c:	4618      	mov	r0, r3
 8016a1e:	f7f3 fed3 	bl	800a7c8 <HAL_RCCEx_PeriphCLKConfig>
 8016a22:	4603      	mov	r3, r0
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d001      	beq.n	8016a2c <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8016a28:	f7eb ff50 	bl	80028cc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8016a2c:	f7f2 feec 	bl	8009808 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8016a30:	4b0e      	ldr	r3, [pc, #56]	; (8016a6c <HAL_PCD_MspInit+0x88>)
 8016a32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016a36:	4a0d      	ldr	r2, [pc, #52]	; (8016a6c <HAL_PCD_MspInit+0x88>)
 8016a38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016a3c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8016a40:	4b0a      	ldr	r3, [pc, #40]	; (8016a6c <HAL_PCD_MspInit+0x88>)
 8016a42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016a4a:	60fb      	str	r3, [r7, #12]
 8016a4c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8016a4e:	2200      	movs	r2, #0
 8016a50:	2100      	movs	r1, #0
 8016a52:	204d      	movs	r0, #77	; 0x4d
 8016a54:	f7ee fc5d 	bl	8005312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8016a58:	204d      	movs	r0, #77	; 0x4d
 8016a5a:	f7ee fc74 	bl	8005346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8016a5e:	bf00      	nop
 8016a60:	37c8      	adds	r7, #200	; 0xc8
 8016a62:	46bd      	mov	sp, r7
 8016a64:	bd80      	pop	{r7, pc}
 8016a66:	bf00      	nop
 8016a68:	40040000 	.word	0x40040000
 8016a6c:	58024400 	.word	0x58024400

08016a70 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a70:	b580      	push	{r7, lr}
 8016a72:	b082      	sub	sp, #8
 8016a74:	af00      	add	r7, sp, #0
 8016a76:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8016a84:	4619      	mov	r1, r3
 8016a86:	4610      	mov	r0, r2
 8016a88:	f7fe faed 	bl	8015066 <USBD_LL_SetupStage>
}
 8016a8c:	bf00      	nop
 8016a8e:	3708      	adds	r7, #8
 8016a90:	46bd      	mov	sp, r7
 8016a92:	bd80      	pop	{r7, pc}

08016a94 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a94:	b580      	push	{r7, lr}
 8016a96:	b082      	sub	sp, #8
 8016a98:	af00      	add	r7, sp, #0
 8016a9a:	6078      	str	r0, [r7, #4]
 8016a9c:	460b      	mov	r3, r1
 8016a9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016aa6:	78fa      	ldrb	r2, [r7, #3]
 8016aa8:	6879      	ldr	r1, [r7, #4]
 8016aaa:	4613      	mov	r3, r2
 8016aac:	00db      	lsls	r3, r3, #3
 8016aae:	4413      	add	r3, r2
 8016ab0:	009b      	lsls	r3, r3, #2
 8016ab2:	440b      	add	r3, r1
 8016ab4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016ab8:	681a      	ldr	r2, [r3, #0]
 8016aba:	78fb      	ldrb	r3, [r7, #3]
 8016abc:	4619      	mov	r1, r3
 8016abe:	f7fe fb27 	bl	8015110 <USBD_LL_DataOutStage>
}
 8016ac2:	bf00      	nop
 8016ac4:	3708      	adds	r7, #8
 8016ac6:	46bd      	mov	sp, r7
 8016ac8:	bd80      	pop	{r7, pc}

08016aca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016aca:	b580      	push	{r7, lr}
 8016acc:	b082      	sub	sp, #8
 8016ace:	af00      	add	r7, sp, #0
 8016ad0:	6078      	str	r0, [r7, #4]
 8016ad2:	460b      	mov	r3, r1
 8016ad4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016adc:	78fa      	ldrb	r2, [r7, #3]
 8016ade:	6879      	ldr	r1, [r7, #4]
 8016ae0:	4613      	mov	r3, r2
 8016ae2:	00db      	lsls	r3, r3, #3
 8016ae4:	4413      	add	r3, r2
 8016ae6:	009b      	lsls	r3, r3, #2
 8016ae8:	440b      	add	r3, r1
 8016aea:	3348      	adds	r3, #72	; 0x48
 8016aec:	681a      	ldr	r2, [r3, #0]
 8016aee:	78fb      	ldrb	r3, [r7, #3]
 8016af0:	4619      	mov	r1, r3
 8016af2:	f7fe fbc0 	bl	8015276 <USBD_LL_DataInStage>
}
 8016af6:	bf00      	nop
 8016af8:	3708      	adds	r7, #8
 8016afa:	46bd      	mov	sp, r7
 8016afc:	bd80      	pop	{r7, pc}

08016afe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016afe:	b580      	push	{r7, lr}
 8016b00:	b082      	sub	sp, #8
 8016b02:	af00      	add	r7, sp, #0
 8016b04:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	f7fe fcfa 	bl	8015506 <USBD_LL_SOF>
}
 8016b12:	bf00      	nop
 8016b14:	3708      	adds	r7, #8
 8016b16:	46bd      	mov	sp, r7
 8016b18:	bd80      	pop	{r7, pc}

08016b1a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b1a:	b580      	push	{r7, lr}
 8016b1c:	b084      	sub	sp, #16
 8016b1e:	af00      	add	r7, sp, #0
 8016b20:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016b22:	2301      	movs	r3, #1
 8016b24:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	691b      	ldr	r3, [r3, #16]
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d102      	bne.n	8016b34 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016b2e:	2300      	movs	r3, #0
 8016b30:	73fb      	strb	r3, [r7, #15]
 8016b32:	e008      	b.n	8016b46 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	691b      	ldr	r3, [r3, #16]
 8016b38:	2b02      	cmp	r3, #2
 8016b3a:	d102      	bne.n	8016b42 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016b3c:	2301      	movs	r3, #1
 8016b3e:	73fb      	strb	r3, [r7, #15]
 8016b40:	e001      	b.n	8016b46 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016b42:	f7eb fec3 	bl	80028cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016b4c:	7bfa      	ldrb	r2, [r7, #15]
 8016b4e:	4611      	mov	r1, r2
 8016b50:	4618      	mov	r0, r3
 8016b52:	f7fe fc94 	bl	801547e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	f7fe fc3c 	bl	80153da <USBD_LL_Reset>
}
 8016b62:	bf00      	nop
 8016b64:	3710      	adds	r7, #16
 8016b66:	46bd      	mov	sp, r7
 8016b68:	bd80      	pop	{r7, pc}
	...

08016b6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b6c:	b580      	push	{r7, lr}
 8016b6e:	b082      	sub	sp, #8
 8016b70:	af00      	add	r7, sp, #0
 8016b72:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016b7a:	4618      	mov	r0, r3
 8016b7c:	f7fe fc8f 	bl	801549e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	687a      	ldr	r2, [r7, #4]
 8016b8c:	6812      	ldr	r2, [r2, #0]
 8016b8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016b92:	f043 0301 	orr.w	r3, r3, #1
 8016b96:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	6a1b      	ldr	r3, [r3, #32]
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d005      	beq.n	8016bac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016ba0:	4b04      	ldr	r3, [pc, #16]	; (8016bb4 <HAL_PCD_SuspendCallback+0x48>)
 8016ba2:	691b      	ldr	r3, [r3, #16]
 8016ba4:	4a03      	ldr	r2, [pc, #12]	; (8016bb4 <HAL_PCD_SuspendCallback+0x48>)
 8016ba6:	f043 0306 	orr.w	r3, r3, #6
 8016baa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016bac:	bf00      	nop
 8016bae:	3708      	adds	r7, #8
 8016bb0:	46bd      	mov	sp, r7
 8016bb2:	bd80      	pop	{r7, pc}
 8016bb4:	e000ed00 	.word	0xe000ed00

08016bb8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	b082      	sub	sp, #8
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016bc6:	4618      	mov	r0, r3
 8016bc8:	f7fe fc85 	bl	80154d6 <USBD_LL_Resume>
}
 8016bcc:	bf00      	nop
 8016bce:	3708      	adds	r7, #8
 8016bd0:	46bd      	mov	sp, r7
 8016bd2:	bd80      	pop	{r7, pc}

08016bd4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016bd4:	b580      	push	{r7, lr}
 8016bd6:	b082      	sub	sp, #8
 8016bd8:	af00      	add	r7, sp, #0
 8016bda:	6078      	str	r0, [r7, #4]
 8016bdc:	460b      	mov	r3, r1
 8016bde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016be6:	78fa      	ldrb	r2, [r7, #3]
 8016be8:	4611      	mov	r1, r2
 8016bea:	4618      	mov	r0, r3
 8016bec:	f7fe fcdd 	bl	80155aa <USBD_LL_IsoOUTIncomplete>
}
 8016bf0:	bf00      	nop
 8016bf2:	3708      	adds	r7, #8
 8016bf4:	46bd      	mov	sp, r7
 8016bf6:	bd80      	pop	{r7, pc}

08016bf8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016bf8:	b580      	push	{r7, lr}
 8016bfa:	b082      	sub	sp, #8
 8016bfc:	af00      	add	r7, sp, #0
 8016bfe:	6078      	str	r0, [r7, #4]
 8016c00:	460b      	mov	r3, r1
 8016c02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c0a:	78fa      	ldrb	r2, [r7, #3]
 8016c0c:	4611      	mov	r1, r2
 8016c0e:	4618      	mov	r0, r3
 8016c10:	f7fe fc99 	bl	8015546 <USBD_LL_IsoINIncomplete>
}
 8016c14:	bf00      	nop
 8016c16:	3708      	adds	r7, #8
 8016c18:	46bd      	mov	sp, r7
 8016c1a:	bd80      	pop	{r7, pc}

08016c1c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c1c:	b580      	push	{r7, lr}
 8016c1e:	b082      	sub	sp, #8
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c2a:	4618      	mov	r0, r3
 8016c2c:	f7fe fcef 	bl	801560e <USBD_LL_DevConnected>
}
 8016c30:	bf00      	nop
 8016c32:	3708      	adds	r7, #8
 8016c34:	46bd      	mov	sp, r7
 8016c36:	bd80      	pop	{r7, pc}

08016c38 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c38:	b580      	push	{r7, lr}
 8016c3a:	b082      	sub	sp, #8
 8016c3c:	af00      	add	r7, sp, #0
 8016c3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c46:	4618      	mov	r0, r3
 8016c48:	f7fe fcec 	bl	8015624 <USBD_LL_DevDisconnected>
}
 8016c4c:	bf00      	nop
 8016c4e:	3708      	adds	r7, #8
 8016c50:	46bd      	mov	sp, r7
 8016c52:	bd80      	pop	{r7, pc}

08016c54 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b082      	sub	sp, #8
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	781b      	ldrb	r3, [r3, #0]
 8016c60:	2b01      	cmp	r3, #1
 8016c62:	d140      	bne.n	8016ce6 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8016c64:	4a22      	ldr	r2, [pc, #136]	; (8016cf0 <USBD_LL_Init+0x9c>)
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	4a20      	ldr	r2, [pc, #128]	; (8016cf0 <USBD_LL_Init+0x9c>)
 8016c70:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8016c74:	4b1e      	ldr	r3, [pc, #120]	; (8016cf0 <USBD_LL_Init+0x9c>)
 8016c76:	4a1f      	ldr	r2, [pc, #124]	; (8016cf4 <USBD_LL_Init+0xa0>)
 8016c78:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8016c7a:	4b1d      	ldr	r3, [pc, #116]	; (8016cf0 <USBD_LL_Init+0x9c>)
 8016c7c:	2209      	movs	r2, #9
 8016c7e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8016c80:	4b1b      	ldr	r3, [pc, #108]	; (8016cf0 <USBD_LL_Init+0x9c>)
 8016c82:	2202      	movs	r2, #2
 8016c84:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8016c86:	4b1a      	ldr	r3, [pc, #104]	; (8016cf0 <USBD_LL_Init+0x9c>)
 8016c88:	2200      	movs	r2, #0
 8016c8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8016c8c:	4b18      	ldr	r3, [pc, #96]	; (8016cf0 <USBD_LL_Init+0x9c>)
 8016c8e:	2202      	movs	r2, #2
 8016c90:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8016c92:	4b17      	ldr	r3, [pc, #92]	; (8016cf0 <USBD_LL_Init+0x9c>)
 8016c94:	2200      	movs	r2, #0
 8016c96:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8016c98:	4b15      	ldr	r3, [pc, #84]	; (8016cf0 <USBD_LL_Init+0x9c>)
 8016c9a:	2200      	movs	r2, #0
 8016c9c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8016c9e:	4b14      	ldr	r3, [pc, #80]	; (8016cf0 <USBD_LL_Init+0x9c>)
 8016ca0:	2200      	movs	r2, #0
 8016ca2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8016ca4:	4b12      	ldr	r3, [pc, #72]	; (8016cf0 <USBD_LL_Init+0x9c>)
 8016ca6:	2200      	movs	r2, #0
 8016ca8:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8016caa:	4b11      	ldr	r3, [pc, #68]	; (8016cf0 <USBD_LL_Init+0x9c>)
 8016cac:	2200      	movs	r2, #0
 8016cae:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8016cb0:	4b0f      	ldr	r3, [pc, #60]	; (8016cf0 <USBD_LL_Init+0x9c>)
 8016cb2:	2200      	movs	r2, #0
 8016cb4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8016cb6:	480e      	ldr	r0, [pc, #56]	; (8016cf0 <USBD_LL_Init+0x9c>)
 8016cb8:	f7f1 fab3 	bl	8008222 <HAL_PCD_Init>
 8016cbc:	4603      	mov	r3, r0
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d001      	beq.n	8016cc6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8016cc2:	f7eb fe03 	bl	80028cc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8016cc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016cca:	4809      	ldr	r0, [pc, #36]	; (8016cf0 <USBD_LL_Init+0x9c>)
 8016ccc:	f7f2 fd21 	bl	8009712 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8016cd0:	2280      	movs	r2, #128	; 0x80
 8016cd2:	2100      	movs	r1, #0
 8016cd4:	4806      	ldr	r0, [pc, #24]	; (8016cf0 <USBD_LL_Init+0x9c>)
 8016cd6:	f7f2 fcd5 	bl	8009684 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8016cda:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8016cde:	2101      	movs	r1, #1
 8016ce0:	4803      	ldr	r0, [pc, #12]	; (8016cf0 <USBD_LL_Init+0x9c>)
 8016ce2:	f7f2 fccf 	bl	8009684 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8016ce6:	2300      	movs	r3, #0
}
 8016ce8:	4618      	mov	r0, r3
 8016cea:	3708      	adds	r7, #8
 8016cec:	46bd      	mov	sp, r7
 8016cee:	bd80      	pop	{r7, pc}
 8016cf0:	24002ad0 	.word	0x24002ad0
 8016cf4:	40040000 	.word	0x40040000

08016cf8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016cf8:	b580      	push	{r7, lr}
 8016cfa:	b084      	sub	sp, #16
 8016cfc:	af00      	add	r7, sp, #0
 8016cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d00:	2300      	movs	r3, #0
 8016d02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d04:	2300      	movs	r3, #0
 8016d06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016d0e:	4618      	mov	r0, r3
 8016d10:	f7f1 fbab 	bl	800846a <HAL_PCD_Start>
 8016d14:	4603      	mov	r3, r0
 8016d16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d18:	7bfb      	ldrb	r3, [r7, #15]
 8016d1a:	4618      	mov	r0, r3
 8016d1c:	f000 f942 	bl	8016fa4 <USBD_Get_USB_Status>
 8016d20:	4603      	mov	r3, r0
 8016d22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d24:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d26:	4618      	mov	r0, r3
 8016d28:	3710      	adds	r7, #16
 8016d2a:	46bd      	mov	sp, r7
 8016d2c:	bd80      	pop	{r7, pc}

08016d2e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016d2e:	b580      	push	{r7, lr}
 8016d30:	b084      	sub	sp, #16
 8016d32:	af00      	add	r7, sp, #0
 8016d34:	6078      	str	r0, [r7, #4]
 8016d36:	4608      	mov	r0, r1
 8016d38:	4611      	mov	r1, r2
 8016d3a:	461a      	mov	r2, r3
 8016d3c:	4603      	mov	r3, r0
 8016d3e:	70fb      	strb	r3, [r7, #3]
 8016d40:	460b      	mov	r3, r1
 8016d42:	70bb      	strb	r3, [r7, #2]
 8016d44:	4613      	mov	r3, r2
 8016d46:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d48:	2300      	movs	r3, #0
 8016d4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d4c:	2300      	movs	r3, #0
 8016d4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016d56:	78bb      	ldrb	r3, [r7, #2]
 8016d58:	883a      	ldrh	r2, [r7, #0]
 8016d5a:	78f9      	ldrb	r1, [r7, #3]
 8016d5c:	f7f2 f8ab 	bl	8008eb6 <HAL_PCD_EP_Open>
 8016d60:	4603      	mov	r3, r0
 8016d62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d64:	7bfb      	ldrb	r3, [r7, #15]
 8016d66:	4618      	mov	r0, r3
 8016d68:	f000 f91c 	bl	8016fa4 <USBD_Get_USB_Status>
 8016d6c:	4603      	mov	r3, r0
 8016d6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d70:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d72:	4618      	mov	r0, r3
 8016d74:	3710      	adds	r7, #16
 8016d76:	46bd      	mov	sp, r7
 8016d78:	bd80      	pop	{r7, pc}

08016d7a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016d7a:	b580      	push	{r7, lr}
 8016d7c:	b084      	sub	sp, #16
 8016d7e:	af00      	add	r7, sp, #0
 8016d80:	6078      	str	r0, [r7, #4]
 8016d82:	460b      	mov	r3, r1
 8016d84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d86:	2300      	movs	r3, #0
 8016d88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d8a:	2300      	movs	r3, #0
 8016d8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016d94:	78fa      	ldrb	r2, [r7, #3]
 8016d96:	4611      	mov	r1, r2
 8016d98:	4618      	mov	r0, r3
 8016d9a:	f7f2 f8f4 	bl	8008f86 <HAL_PCD_EP_Close>
 8016d9e:	4603      	mov	r3, r0
 8016da0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016da2:	7bfb      	ldrb	r3, [r7, #15]
 8016da4:	4618      	mov	r0, r3
 8016da6:	f000 f8fd 	bl	8016fa4 <USBD_Get_USB_Status>
 8016daa:	4603      	mov	r3, r0
 8016dac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016dae:	7bbb      	ldrb	r3, [r7, #14]
}
 8016db0:	4618      	mov	r0, r3
 8016db2:	3710      	adds	r7, #16
 8016db4:	46bd      	mov	sp, r7
 8016db6:	bd80      	pop	{r7, pc}

08016db8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016db8:	b580      	push	{r7, lr}
 8016dba:	b084      	sub	sp, #16
 8016dbc:	af00      	add	r7, sp, #0
 8016dbe:	6078      	str	r0, [r7, #4]
 8016dc0:	460b      	mov	r3, r1
 8016dc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016dc4:	2300      	movs	r3, #0
 8016dc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016dc8:	2300      	movs	r3, #0
 8016dca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016dd2:	78fa      	ldrb	r2, [r7, #3]
 8016dd4:	4611      	mov	r1, r2
 8016dd6:	4618      	mov	r0, r3
 8016dd8:	f7f2 f9ae 	bl	8009138 <HAL_PCD_EP_SetStall>
 8016ddc:	4603      	mov	r3, r0
 8016dde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016de0:	7bfb      	ldrb	r3, [r7, #15]
 8016de2:	4618      	mov	r0, r3
 8016de4:	f000 f8de 	bl	8016fa4 <USBD_Get_USB_Status>
 8016de8:	4603      	mov	r3, r0
 8016dea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016dec:	7bbb      	ldrb	r3, [r7, #14]
}
 8016dee:	4618      	mov	r0, r3
 8016df0:	3710      	adds	r7, #16
 8016df2:	46bd      	mov	sp, r7
 8016df4:	bd80      	pop	{r7, pc}

08016df6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016df6:	b580      	push	{r7, lr}
 8016df8:	b084      	sub	sp, #16
 8016dfa:	af00      	add	r7, sp, #0
 8016dfc:	6078      	str	r0, [r7, #4]
 8016dfe:	460b      	mov	r3, r1
 8016e00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e02:	2300      	movs	r3, #0
 8016e04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e06:	2300      	movs	r3, #0
 8016e08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016e10:	78fa      	ldrb	r2, [r7, #3]
 8016e12:	4611      	mov	r1, r2
 8016e14:	4618      	mov	r0, r3
 8016e16:	f7f2 f9f3 	bl	8009200 <HAL_PCD_EP_ClrStall>
 8016e1a:	4603      	mov	r3, r0
 8016e1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e1e:	7bfb      	ldrb	r3, [r7, #15]
 8016e20:	4618      	mov	r0, r3
 8016e22:	f000 f8bf 	bl	8016fa4 <USBD_Get_USB_Status>
 8016e26:	4603      	mov	r3, r0
 8016e28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e2c:	4618      	mov	r0, r3
 8016e2e:	3710      	adds	r7, #16
 8016e30:	46bd      	mov	sp, r7
 8016e32:	bd80      	pop	{r7, pc}

08016e34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e34:	b480      	push	{r7}
 8016e36:	b085      	sub	sp, #20
 8016e38:	af00      	add	r7, sp, #0
 8016e3a:	6078      	str	r0, [r7, #4]
 8016e3c:	460b      	mov	r3, r1
 8016e3e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016e46:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016e48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	da0b      	bge.n	8016e68 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016e50:	78fb      	ldrb	r3, [r7, #3]
 8016e52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016e56:	68f9      	ldr	r1, [r7, #12]
 8016e58:	4613      	mov	r3, r2
 8016e5a:	00db      	lsls	r3, r3, #3
 8016e5c:	4413      	add	r3, r2
 8016e5e:	009b      	lsls	r3, r3, #2
 8016e60:	440b      	add	r3, r1
 8016e62:	333e      	adds	r3, #62	; 0x3e
 8016e64:	781b      	ldrb	r3, [r3, #0]
 8016e66:	e00b      	b.n	8016e80 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016e68:	78fb      	ldrb	r3, [r7, #3]
 8016e6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016e6e:	68f9      	ldr	r1, [r7, #12]
 8016e70:	4613      	mov	r3, r2
 8016e72:	00db      	lsls	r3, r3, #3
 8016e74:	4413      	add	r3, r2
 8016e76:	009b      	lsls	r3, r3, #2
 8016e78:	440b      	add	r3, r1
 8016e7a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8016e7e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016e80:	4618      	mov	r0, r3
 8016e82:	3714      	adds	r7, #20
 8016e84:	46bd      	mov	sp, r7
 8016e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e8a:	4770      	bx	lr

08016e8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	b084      	sub	sp, #16
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	6078      	str	r0, [r7, #4]
 8016e94:	460b      	mov	r3, r1
 8016e96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e98:	2300      	movs	r3, #0
 8016e9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e9c:	2300      	movs	r3, #0
 8016e9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016ea6:	78fa      	ldrb	r2, [r7, #3]
 8016ea8:	4611      	mov	r1, r2
 8016eaa:	4618      	mov	r0, r3
 8016eac:	f7f1 ffde 	bl	8008e6c <HAL_PCD_SetAddress>
 8016eb0:	4603      	mov	r3, r0
 8016eb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016eb4:	7bfb      	ldrb	r3, [r7, #15]
 8016eb6:	4618      	mov	r0, r3
 8016eb8:	f000 f874 	bl	8016fa4 <USBD_Get_USB_Status>
 8016ebc:	4603      	mov	r3, r0
 8016ebe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ec0:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	3710      	adds	r7, #16
 8016ec6:	46bd      	mov	sp, r7
 8016ec8:	bd80      	pop	{r7, pc}

08016eca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016eca:	b580      	push	{r7, lr}
 8016ecc:	b086      	sub	sp, #24
 8016ece:	af00      	add	r7, sp, #0
 8016ed0:	60f8      	str	r0, [r7, #12]
 8016ed2:	607a      	str	r2, [r7, #4]
 8016ed4:	603b      	str	r3, [r7, #0]
 8016ed6:	460b      	mov	r3, r1
 8016ed8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016eda:	2300      	movs	r3, #0
 8016edc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ede:	2300      	movs	r3, #0
 8016ee0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016ee2:	68fb      	ldr	r3, [r7, #12]
 8016ee4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016ee8:	7af9      	ldrb	r1, [r7, #11]
 8016eea:	683b      	ldr	r3, [r7, #0]
 8016eec:	687a      	ldr	r2, [r7, #4]
 8016eee:	f7f2 f8e8 	bl	80090c2 <HAL_PCD_EP_Transmit>
 8016ef2:	4603      	mov	r3, r0
 8016ef4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ef6:	7dfb      	ldrb	r3, [r7, #23]
 8016ef8:	4618      	mov	r0, r3
 8016efa:	f000 f853 	bl	8016fa4 <USBD_Get_USB_Status>
 8016efe:	4603      	mov	r3, r0
 8016f00:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016f02:	7dbb      	ldrb	r3, [r7, #22]
}
 8016f04:	4618      	mov	r0, r3
 8016f06:	3718      	adds	r7, #24
 8016f08:	46bd      	mov	sp, r7
 8016f0a:	bd80      	pop	{r7, pc}

08016f0c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016f0c:	b580      	push	{r7, lr}
 8016f0e:	b086      	sub	sp, #24
 8016f10:	af00      	add	r7, sp, #0
 8016f12:	60f8      	str	r0, [r7, #12]
 8016f14:	607a      	str	r2, [r7, #4]
 8016f16:	603b      	str	r3, [r7, #0]
 8016f18:	460b      	mov	r3, r1
 8016f1a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f1c:	2300      	movs	r3, #0
 8016f1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f20:	2300      	movs	r3, #0
 8016f22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016f2a:	7af9      	ldrb	r1, [r7, #11]
 8016f2c:	683b      	ldr	r3, [r7, #0]
 8016f2e:	687a      	ldr	r2, [r7, #4]
 8016f30:	f7f2 f873 	bl	800901a <HAL_PCD_EP_Receive>
 8016f34:	4603      	mov	r3, r0
 8016f36:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f38:	7dfb      	ldrb	r3, [r7, #23]
 8016f3a:	4618      	mov	r0, r3
 8016f3c:	f000 f832 	bl	8016fa4 <USBD_Get_USB_Status>
 8016f40:	4603      	mov	r3, r0
 8016f42:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016f44:	7dbb      	ldrb	r3, [r7, #22]
}
 8016f46:	4618      	mov	r0, r3
 8016f48:	3718      	adds	r7, #24
 8016f4a:	46bd      	mov	sp, r7
 8016f4c:	bd80      	pop	{r7, pc}

08016f4e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016f4e:	b580      	push	{r7, lr}
 8016f50:	b082      	sub	sp, #8
 8016f52:	af00      	add	r7, sp, #0
 8016f54:	6078      	str	r0, [r7, #4]
 8016f56:	460b      	mov	r3, r1
 8016f58:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016f60:	78fa      	ldrb	r2, [r7, #3]
 8016f62:	4611      	mov	r1, r2
 8016f64:	4618      	mov	r0, r3
 8016f66:	f7f2 f894 	bl	8009092 <HAL_PCD_EP_GetRxCount>
 8016f6a:	4603      	mov	r3, r0
}
 8016f6c:	4618      	mov	r0, r3
 8016f6e:	3708      	adds	r7, #8
 8016f70:	46bd      	mov	sp, r7
 8016f72:	bd80      	pop	{r7, pc}

08016f74 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016f74:	b480      	push	{r7}
 8016f76:	b083      	sub	sp, #12
 8016f78:	af00      	add	r7, sp, #0
 8016f7a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016f7c:	4b03      	ldr	r3, [pc, #12]	; (8016f8c <USBD_static_malloc+0x18>)
}
 8016f7e:	4618      	mov	r0, r3
 8016f80:	370c      	adds	r7, #12
 8016f82:	46bd      	mov	sp, r7
 8016f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f88:	4770      	bx	lr
 8016f8a:	bf00      	nop
 8016f8c:	24002fdc 	.word	0x24002fdc

08016f90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016f90:	b480      	push	{r7}
 8016f92:	b083      	sub	sp, #12
 8016f94:	af00      	add	r7, sp, #0
 8016f96:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8016f98:	bf00      	nop
 8016f9a:	370c      	adds	r7, #12
 8016f9c:	46bd      	mov	sp, r7
 8016f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fa2:	4770      	bx	lr

08016fa4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016fa4:	b480      	push	{r7}
 8016fa6:	b085      	sub	sp, #20
 8016fa8:	af00      	add	r7, sp, #0
 8016faa:	4603      	mov	r3, r0
 8016fac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016fae:	2300      	movs	r3, #0
 8016fb0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016fb2:	79fb      	ldrb	r3, [r7, #7]
 8016fb4:	2b03      	cmp	r3, #3
 8016fb6:	d817      	bhi.n	8016fe8 <USBD_Get_USB_Status+0x44>
 8016fb8:	a201      	add	r2, pc, #4	; (adr r2, 8016fc0 <USBD_Get_USB_Status+0x1c>)
 8016fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016fbe:	bf00      	nop
 8016fc0:	08016fd1 	.word	0x08016fd1
 8016fc4:	08016fd7 	.word	0x08016fd7
 8016fc8:	08016fdd 	.word	0x08016fdd
 8016fcc:	08016fe3 	.word	0x08016fe3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016fd0:	2300      	movs	r3, #0
 8016fd2:	73fb      	strb	r3, [r7, #15]
    break;
 8016fd4:	e00b      	b.n	8016fee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016fd6:	2303      	movs	r3, #3
 8016fd8:	73fb      	strb	r3, [r7, #15]
    break;
 8016fda:	e008      	b.n	8016fee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016fdc:	2301      	movs	r3, #1
 8016fde:	73fb      	strb	r3, [r7, #15]
    break;
 8016fe0:	e005      	b.n	8016fee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016fe2:	2303      	movs	r3, #3
 8016fe4:	73fb      	strb	r3, [r7, #15]
    break;
 8016fe6:	e002      	b.n	8016fee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016fe8:	2303      	movs	r3, #3
 8016fea:	73fb      	strb	r3, [r7, #15]
    break;
 8016fec:	bf00      	nop
  }
  return usb_status;
 8016fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ff0:	4618      	mov	r0, r3
 8016ff2:	3714      	adds	r7, #20
 8016ff4:	46bd      	mov	sp, r7
 8016ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ffa:	4770      	bx	lr

08016ffc <siprintf>:
 8016ffc:	b40e      	push	{r1, r2, r3}
 8016ffe:	b500      	push	{lr}
 8017000:	b09c      	sub	sp, #112	; 0x70
 8017002:	ab1d      	add	r3, sp, #116	; 0x74
 8017004:	9002      	str	r0, [sp, #8]
 8017006:	9006      	str	r0, [sp, #24]
 8017008:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801700c:	4809      	ldr	r0, [pc, #36]	; (8017034 <siprintf+0x38>)
 801700e:	9107      	str	r1, [sp, #28]
 8017010:	9104      	str	r1, [sp, #16]
 8017012:	4909      	ldr	r1, [pc, #36]	; (8017038 <siprintf+0x3c>)
 8017014:	f853 2b04 	ldr.w	r2, [r3], #4
 8017018:	9105      	str	r1, [sp, #20]
 801701a:	6800      	ldr	r0, [r0, #0]
 801701c:	9301      	str	r3, [sp, #4]
 801701e:	a902      	add	r1, sp, #8
 8017020:	f000 f9d6 	bl	80173d0 <_svfiprintf_r>
 8017024:	9b02      	ldr	r3, [sp, #8]
 8017026:	2200      	movs	r2, #0
 8017028:	701a      	strb	r2, [r3, #0]
 801702a:	b01c      	add	sp, #112	; 0x70
 801702c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017030:	b003      	add	sp, #12
 8017032:	4770      	bx	lr
 8017034:	2400014c 	.word	0x2400014c
 8017038:	ffff0208 	.word	0xffff0208

0801703c <siscanf>:
 801703c:	b40e      	push	{r1, r2, r3}
 801703e:	b510      	push	{r4, lr}
 8017040:	b09f      	sub	sp, #124	; 0x7c
 8017042:	ac21      	add	r4, sp, #132	; 0x84
 8017044:	f44f 7101 	mov.w	r1, #516	; 0x204
 8017048:	f854 2b04 	ldr.w	r2, [r4], #4
 801704c:	9201      	str	r2, [sp, #4]
 801704e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8017052:	9004      	str	r0, [sp, #16]
 8017054:	9008      	str	r0, [sp, #32]
 8017056:	f7e9 f965 	bl	8000324 <strlen>
 801705a:	4b0c      	ldr	r3, [pc, #48]	; (801708c <siscanf+0x50>)
 801705c:	9005      	str	r0, [sp, #20]
 801705e:	9009      	str	r0, [sp, #36]	; 0x24
 8017060:	930d      	str	r3, [sp, #52]	; 0x34
 8017062:	480b      	ldr	r0, [pc, #44]	; (8017090 <siscanf+0x54>)
 8017064:	9a01      	ldr	r2, [sp, #4]
 8017066:	6800      	ldr	r0, [r0, #0]
 8017068:	9403      	str	r4, [sp, #12]
 801706a:	2300      	movs	r3, #0
 801706c:	9311      	str	r3, [sp, #68]	; 0x44
 801706e:	9316      	str	r3, [sp, #88]	; 0x58
 8017070:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017074:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017078:	a904      	add	r1, sp, #16
 801707a:	4623      	mov	r3, r4
 801707c:	f000 fb00 	bl	8017680 <__ssvfiscanf_r>
 8017080:	b01f      	add	sp, #124	; 0x7c
 8017082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017086:	b003      	add	sp, #12
 8017088:	4770      	bx	lr
 801708a:	bf00      	nop
 801708c:	08017095 	.word	0x08017095
 8017090:	2400014c 	.word	0x2400014c

08017094 <__seofread>:
 8017094:	2000      	movs	r0, #0
 8017096:	4770      	bx	lr

08017098 <memset>:
 8017098:	4402      	add	r2, r0
 801709a:	4603      	mov	r3, r0
 801709c:	4293      	cmp	r3, r2
 801709e:	d100      	bne.n	80170a2 <memset+0xa>
 80170a0:	4770      	bx	lr
 80170a2:	f803 1b01 	strb.w	r1, [r3], #1
 80170a6:	e7f9      	b.n	801709c <memset+0x4>

080170a8 <__errno>:
 80170a8:	4b01      	ldr	r3, [pc, #4]	; (80170b0 <__errno+0x8>)
 80170aa:	6818      	ldr	r0, [r3, #0]
 80170ac:	4770      	bx	lr
 80170ae:	bf00      	nop
 80170b0:	2400014c 	.word	0x2400014c

080170b4 <__libc_init_array>:
 80170b4:	b570      	push	{r4, r5, r6, lr}
 80170b6:	4d0d      	ldr	r5, [pc, #52]	; (80170ec <__libc_init_array+0x38>)
 80170b8:	4c0d      	ldr	r4, [pc, #52]	; (80170f0 <__libc_init_array+0x3c>)
 80170ba:	1b64      	subs	r4, r4, r5
 80170bc:	10a4      	asrs	r4, r4, #2
 80170be:	2600      	movs	r6, #0
 80170c0:	42a6      	cmp	r6, r4
 80170c2:	d109      	bne.n	80170d8 <__libc_init_array+0x24>
 80170c4:	4d0b      	ldr	r5, [pc, #44]	; (80170f4 <__libc_init_array+0x40>)
 80170c6:	4c0c      	ldr	r4, [pc, #48]	; (80170f8 <__libc_init_array+0x44>)
 80170c8:	f001 f8fe 	bl	80182c8 <_init>
 80170cc:	1b64      	subs	r4, r4, r5
 80170ce:	10a4      	asrs	r4, r4, #2
 80170d0:	2600      	movs	r6, #0
 80170d2:	42a6      	cmp	r6, r4
 80170d4:	d105      	bne.n	80170e2 <__libc_init_array+0x2e>
 80170d6:	bd70      	pop	{r4, r5, r6, pc}
 80170d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80170dc:	4798      	blx	r3
 80170de:	3601      	adds	r6, #1
 80170e0:	e7ee      	b.n	80170c0 <__libc_init_array+0xc>
 80170e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80170e6:	4798      	blx	r3
 80170e8:	3601      	adds	r6, #1
 80170ea:	e7f2      	b.n	80170d2 <__libc_init_array+0x1e>
 80170ec:	08018694 	.word	0x08018694
 80170f0:	08018694 	.word	0x08018694
 80170f4:	08018694 	.word	0x08018694
 80170f8:	08018698 	.word	0x08018698

080170fc <__retarget_lock_acquire_recursive>:
 80170fc:	4770      	bx	lr

080170fe <__retarget_lock_release_recursive>:
 80170fe:	4770      	bx	lr

08017100 <strcpy>:
 8017100:	4603      	mov	r3, r0
 8017102:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017106:	f803 2b01 	strb.w	r2, [r3], #1
 801710a:	2a00      	cmp	r2, #0
 801710c:	d1f9      	bne.n	8017102 <strcpy+0x2>
 801710e:	4770      	bx	lr

08017110 <memcpy>:
 8017110:	440a      	add	r2, r1
 8017112:	4291      	cmp	r1, r2
 8017114:	f100 33ff 	add.w	r3, r0, #4294967295
 8017118:	d100      	bne.n	801711c <memcpy+0xc>
 801711a:	4770      	bx	lr
 801711c:	b510      	push	{r4, lr}
 801711e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017122:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017126:	4291      	cmp	r1, r2
 8017128:	d1f9      	bne.n	801711e <memcpy+0xe>
 801712a:	bd10      	pop	{r4, pc}

0801712c <_free_r>:
 801712c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801712e:	2900      	cmp	r1, #0
 8017130:	d044      	beq.n	80171bc <_free_r+0x90>
 8017132:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017136:	9001      	str	r0, [sp, #4]
 8017138:	2b00      	cmp	r3, #0
 801713a:	f1a1 0404 	sub.w	r4, r1, #4
 801713e:	bfb8      	it	lt
 8017140:	18e4      	addlt	r4, r4, r3
 8017142:	f000 f8df 	bl	8017304 <__malloc_lock>
 8017146:	4a1e      	ldr	r2, [pc, #120]	; (80171c0 <_free_r+0x94>)
 8017148:	9801      	ldr	r0, [sp, #4]
 801714a:	6813      	ldr	r3, [r2, #0]
 801714c:	b933      	cbnz	r3, 801715c <_free_r+0x30>
 801714e:	6063      	str	r3, [r4, #4]
 8017150:	6014      	str	r4, [r2, #0]
 8017152:	b003      	add	sp, #12
 8017154:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017158:	f000 b8da 	b.w	8017310 <__malloc_unlock>
 801715c:	42a3      	cmp	r3, r4
 801715e:	d908      	bls.n	8017172 <_free_r+0x46>
 8017160:	6825      	ldr	r5, [r4, #0]
 8017162:	1961      	adds	r1, r4, r5
 8017164:	428b      	cmp	r3, r1
 8017166:	bf01      	itttt	eq
 8017168:	6819      	ldreq	r1, [r3, #0]
 801716a:	685b      	ldreq	r3, [r3, #4]
 801716c:	1949      	addeq	r1, r1, r5
 801716e:	6021      	streq	r1, [r4, #0]
 8017170:	e7ed      	b.n	801714e <_free_r+0x22>
 8017172:	461a      	mov	r2, r3
 8017174:	685b      	ldr	r3, [r3, #4]
 8017176:	b10b      	cbz	r3, 801717c <_free_r+0x50>
 8017178:	42a3      	cmp	r3, r4
 801717a:	d9fa      	bls.n	8017172 <_free_r+0x46>
 801717c:	6811      	ldr	r1, [r2, #0]
 801717e:	1855      	adds	r5, r2, r1
 8017180:	42a5      	cmp	r5, r4
 8017182:	d10b      	bne.n	801719c <_free_r+0x70>
 8017184:	6824      	ldr	r4, [r4, #0]
 8017186:	4421      	add	r1, r4
 8017188:	1854      	adds	r4, r2, r1
 801718a:	42a3      	cmp	r3, r4
 801718c:	6011      	str	r1, [r2, #0]
 801718e:	d1e0      	bne.n	8017152 <_free_r+0x26>
 8017190:	681c      	ldr	r4, [r3, #0]
 8017192:	685b      	ldr	r3, [r3, #4]
 8017194:	6053      	str	r3, [r2, #4]
 8017196:	440c      	add	r4, r1
 8017198:	6014      	str	r4, [r2, #0]
 801719a:	e7da      	b.n	8017152 <_free_r+0x26>
 801719c:	d902      	bls.n	80171a4 <_free_r+0x78>
 801719e:	230c      	movs	r3, #12
 80171a0:	6003      	str	r3, [r0, #0]
 80171a2:	e7d6      	b.n	8017152 <_free_r+0x26>
 80171a4:	6825      	ldr	r5, [r4, #0]
 80171a6:	1961      	adds	r1, r4, r5
 80171a8:	428b      	cmp	r3, r1
 80171aa:	bf04      	itt	eq
 80171ac:	6819      	ldreq	r1, [r3, #0]
 80171ae:	685b      	ldreq	r3, [r3, #4]
 80171b0:	6063      	str	r3, [r4, #4]
 80171b2:	bf04      	itt	eq
 80171b4:	1949      	addeq	r1, r1, r5
 80171b6:	6021      	streq	r1, [r4, #0]
 80171b8:	6054      	str	r4, [r2, #4]
 80171ba:	e7ca      	b.n	8017152 <_free_r+0x26>
 80171bc:	b003      	add	sp, #12
 80171be:	bd30      	pop	{r4, r5, pc}
 80171c0:	2400333c 	.word	0x2400333c

080171c4 <sbrk_aligned>:
 80171c4:	b570      	push	{r4, r5, r6, lr}
 80171c6:	4e0e      	ldr	r6, [pc, #56]	; (8017200 <sbrk_aligned+0x3c>)
 80171c8:	460c      	mov	r4, r1
 80171ca:	6831      	ldr	r1, [r6, #0]
 80171cc:	4605      	mov	r5, r0
 80171ce:	b911      	cbnz	r1, 80171d6 <sbrk_aligned+0x12>
 80171d0:	f000 ff3a 	bl	8018048 <_sbrk_r>
 80171d4:	6030      	str	r0, [r6, #0]
 80171d6:	4621      	mov	r1, r4
 80171d8:	4628      	mov	r0, r5
 80171da:	f000 ff35 	bl	8018048 <_sbrk_r>
 80171de:	1c43      	adds	r3, r0, #1
 80171e0:	d00a      	beq.n	80171f8 <sbrk_aligned+0x34>
 80171e2:	1cc4      	adds	r4, r0, #3
 80171e4:	f024 0403 	bic.w	r4, r4, #3
 80171e8:	42a0      	cmp	r0, r4
 80171ea:	d007      	beq.n	80171fc <sbrk_aligned+0x38>
 80171ec:	1a21      	subs	r1, r4, r0
 80171ee:	4628      	mov	r0, r5
 80171f0:	f000 ff2a 	bl	8018048 <_sbrk_r>
 80171f4:	3001      	adds	r0, #1
 80171f6:	d101      	bne.n	80171fc <sbrk_aligned+0x38>
 80171f8:	f04f 34ff 	mov.w	r4, #4294967295
 80171fc:	4620      	mov	r0, r4
 80171fe:	bd70      	pop	{r4, r5, r6, pc}
 8017200:	24003340 	.word	0x24003340

08017204 <_malloc_r>:
 8017204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017208:	1ccd      	adds	r5, r1, #3
 801720a:	f025 0503 	bic.w	r5, r5, #3
 801720e:	3508      	adds	r5, #8
 8017210:	2d0c      	cmp	r5, #12
 8017212:	bf38      	it	cc
 8017214:	250c      	movcc	r5, #12
 8017216:	2d00      	cmp	r5, #0
 8017218:	4607      	mov	r7, r0
 801721a:	db01      	blt.n	8017220 <_malloc_r+0x1c>
 801721c:	42a9      	cmp	r1, r5
 801721e:	d905      	bls.n	801722c <_malloc_r+0x28>
 8017220:	230c      	movs	r3, #12
 8017222:	603b      	str	r3, [r7, #0]
 8017224:	2600      	movs	r6, #0
 8017226:	4630      	mov	r0, r6
 8017228:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801722c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017300 <_malloc_r+0xfc>
 8017230:	f000 f868 	bl	8017304 <__malloc_lock>
 8017234:	f8d8 3000 	ldr.w	r3, [r8]
 8017238:	461c      	mov	r4, r3
 801723a:	bb5c      	cbnz	r4, 8017294 <_malloc_r+0x90>
 801723c:	4629      	mov	r1, r5
 801723e:	4638      	mov	r0, r7
 8017240:	f7ff ffc0 	bl	80171c4 <sbrk_aligned>
 8017244:	1c43      	adds	r3, r0, #1
 8017246:	4604      	mov	r4, r0
 8017248:	d155      	bne.n	80172f6 <_malloc_r+0xf2>
 801724a:	f8d8 4000 	ldr.w	r4, [r8]
 801724e:	4626      	mov	r6, r4
 8017250:	2e00      	cmp	r6, #0
 8017252:	d145      	bne.n	80172e0 <_malloc_r+0xdc>
 8017254:	2c00      	cmp	r4, #0
 8017256:	d048      	beq.n	80172ea <_malloc_r+0xe6>
 8017258:	6823      	ldr	r3, [r4, #0]
 801725a:	4631      	mov	r1, r6
 801725c:	4638      	mov	r0, r7
 801725e:	eb04 0903 	add.w	r9, r4, r3
 8017262:	f000 fef1 	bl	8018048 <_sbrk_r>
 8017266:	4581      	cmp	r9, r0
 8017268:	d13f      	bne.n	80172ea <_malloc_r+0xe6>
 801726a:	6821      	ldr	r1, [r4, #0]
 801726c:	1a6d      	subs	r5, r5, r1
 801726e:	4629      	mov	r1, r5
 8017270:	4638      	mov	r0, r7
 8017272:	f7ff ffa7 	bl	80171c4 <sbrk_aligned>
 8017276:	3001      	adds	r0, #1
 8017278:	d037      	beq.n	80172ea <_malloc_r+0xe6>
 801727a:	6823      	ldr	r3, [r4, #0]
 801727c:	442b      	add	r3, r5
 801727e:	6023      	str	r3, [r4, #0]
 8017280:	f8d8 3000 	ldr.w	r3, [r8]
 8017284:	2b00      	cmp	r3, #0
 8017286:	d038      	beq.n	80172fa <_malloc_r+0xf6>
 8017288:	685a      	ldr	r2, [r3, #4]
 801728a:	42a2      	cmp	r2, r4
 801728c:	d12b      	bne.n	80172e6 <_malloc_r+0xe2>
 801728e:	2200      	movs	r2, #0
 8017290:	605a      	str	r2, [r3, #4]
 8017292:	e00f      	b.n	80172b4 <_malloc_r+0xb0>
 8017294:	6822      	ldr	r2, [r4, #0]
 8017296:	1b52      	subs	r2, r2, r5
 8017298:	d41f      	bmi.n	80172da <_malloc_r+0xd6>
 801729a:	2a0b      	cmp	r2, #11
 801729c:	d917      	bls.n	80172ce <_malloc_r+0xca>
 801729e:	1961      	adds	r1, r4, r5
 80172a0:	42a3      	cmp	r3, r4
 80172a2:	6025      	str	r5, [r4, #0]
 80172a4:	bf18      	it	ne
 80172a6:	6059      	strne	r1, [r3, #4]
 80172a8:	6863      	ldr	r3, [r4, #4]
 80172aa:	bf08      	it	eq
 80172ac:	f8c8 1000 	streq.w	r1, [r8]
 80172b0:	5162      	str	r2, [r4, r5]
 80172b2:	604b      	str	r3, [r1, #4]
 80172b4:	4638      	mov	r0, r7
 80172b6:	f104 060b 	add.w	r6, r4, #11
 80172ba:	f000 f829 	bl	8017310 <__malloc_unlock>
 80172be:	f026 0607 	bic.w	r6, r6, #7
 80172c2:	1d23      	adds	r3, r4, #4
 80172c4:	1af2      	subs	r2, r6, r3
 80172c6:	d0ae      	beq.n	8017226 <_malloc_r+0x22>
 80172c8:	1b9b      	subs	r3, r3, r6
 80172ca:	50a3      	str	r3, [r4, r2]
 80172cc:	e7ab      	b.n	8017226 <_malloc_r+0x22>
 80172ce:	42a3      	cmp	r3, r4
 80172d0:	6862      	ldr	r2, [r4, #4]
 80172d2:	d1dd      	bne.n	8017290 <_malloc_r+0x8c>
 80172d4:	f8c8 2000 	str.w	r2, [r8]
 80172d8:	e7ec      	b.n	80172b4 <_malloc_r+0xb0>
 80172da:	4623      	mov	r3, r4
 80172dc:	6864      	ldr	r4, [r4, #4]
 80172de:	e7ac      	b.n	801723a <_malloc_r+0x36>
 80172e0:	4634      	mov	r4, r6
 80172e2:	6876      	ldr	r6, [r6, #4]
 80172e4:	e7b4      	b.n	8017250 <_malloc_r+0x4c>
 80172e6:	4613      	mov	r3, r2
 80172e8:	e7cc      	b.n	8017284 <_malloc_r+0x80>
 80172ea:	230c      	movs	r3, #12
 80172ec:	603b      	str	r3, [r7, #0]
 80172ee:	4638      	mov	r0, r7
 80172f0:	f000 f80e 	bl	8017310 <__malloc_unlock>
 80172f4:	e797      	b.n	8017226 <_malloc_r+0x22>
 80172f6:	6025      	str	r5, [r4, #0]
 80172f8:	e7dc      	b.n	80172b4 <_malloc_r+0xb0>
 80172fa:	605b      	str	r3, [r3, #4]
 80172fc:	deff      	udf	#255	; 0xff
 80172fe:	bf00      	nop
 8017300:	2400333c 	.word	0x2400333c

08017304 <__malloc_lock>:
 8017304:	4801      	ldr	r0, [pc, #4]	; (801730c <__malloc_lock+0x8>)
 8017306:	f7ff bef9 	b.w	80170fc <__retarget_lock_acquire_recursive>
 801730a:	bf00      	nop
 801730c:	24003338 	.word	0x24003338

08017310 <__malloc_unlock>:
 8017310:	4801      	ldr	r0, [pc, #4]	; (8017318 <__malloc_unlock+0x8>)
 8017312:	f7ff bef4 	b.w	80170fe <__retarget_lock_release_recursive>
 8017316:	bf00      	nop
 8017318:	24003338 	.word	0x24003338

0801731c <__ssputs_r>:
 801731c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017320:	688e      	ldr	r6, [r1, #8]
 8017322:	461f      	mov	r7, r3
 8017324:	42be      	cmp	r6, r7
 8017326:	680b      	ldr	r3, [r1, #0]
 8017328:	4682      	mov	sl, r0
 801732a:	460c      	mov	r4, r1
 801732c:	4690      	mov	r8, r2
 801732e:	d82c      	bhi.n	801738a <__ssputs_r+0x6e>
 8017330:	898a      	ldrh	r2, [r1, #12]
 8017332:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017336:	d026      	beq.n	8017386 <__ssputs_r+0x6a>
 8017338:	6965      	ldr	r5, [r4, #20]
 801733a:	6909      	ldr	r1, [r1, #16]
 801733c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017340:	eba3 0901 	sub.w	r9, r3, r1
 8017344:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017348:	1c7b      	adds	r3, r7, #1
 801734a:	444b      	add	r3, r9
 801734c:	106d      	asrs	r5, r5, #1
 801734e:	429d      	cmp	r5, r3
 8017350:	bf38      	it	cc
 8017352:	461d      	movcc	r5, r3
 8017354:	0553      	lsls	r3, r2, #21
 8017356:	d527      	bpl.n	80173a8 <__ssputs_r+0x8c>
 8017358:	4629      	mov	r1, r5
 801735a:	f7ff ff53 	bl	8017204 <_malloc_r>
 801735e:	4606      	mov	r6, r0
 8017360:	b360      	cbz	r0, 80173bc <__ssputs_r+0xa0>
 8017362:	6921      	ldr	r1, [r4, #16]
 8017364:	464a      	mov	r2, r9
 8017366:	f7ff fed3 	bl	8017110 <memcpy>
 801736a:	89a3      	ldrh	r3, [r4, #12]
 801736c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017374:	81a3      	strh	r3, [r4, #12]
 8017376:	6126      	str	r6, [r4, #16]
 8017378:	6165      	str	r5, [r4, #20]
 801737a:	444e      	add	r6, r9
 801737c:	eba5 0509 	sub.w	r5, r5, r9
 8017380:	6026      	str	r6, [r4, #0]
 8017382:	60a5      	str	r5, [r4, #8]
 8017384:	463e      	mov	r6, r7
 8017386:	42be      	cmp	r6, r7
 8017388:	d900      	bls.n	801738c <__ssputs_r+0x70>
 801738a:	463e      	mov	r6, r7
 801738c:	6820      	ldr	r0, [r4, #0]
 801738e:	4632      	mov	r2, r6
 8017390:	4641      	mov	r1, r8
 8017392:	f000 fe3e 	bl	8018012 <memmove>
 8017396:	68a3      	ldr	r3, [r4, #8]
 8017398:	1b9b      	subs	r3, r3, r6
 801739a:	60a3      	str	r3, [r4, #8]
 801739c:	6823      	ldr	r3, [r4, #0]
 801739e:	4433      	add	r3, r6
 80173a0:	6023      	str	r3, [r4, #0]
 80173a2:	2000      	movs	r0, #0
 80173a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173a8:	462a      	mov	r2, r5
 80173aa:	f000 fe5d 	bl	8018068 <_realloc_r>
 80173ae:	4606      	mov	r6, r0
 80173b0:	2800      	cmp	r0, #0
 80173b2:	d1e0      	bne.n	8017376 <__ssputs_r+0x5a>
 80173b4:	6921      	ldr	r1, [r4, #16]
 80173b6:	4650      	mov	r0, sl
 80173b8:	f7ff feb8 	bl	801712c <_free_r>
 80173bc:	230c      	movs	r3, #12
 80173be:	f8ca 3000 	str.w	r3, [sl]
 80173c2:	89a3      	ldrh	r3, [r4, #12]
 80173c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80173c8:	81a3      	strh	r3, [r4, #12]
 80173ca:	f04f 30ff 	mov.w	r0, #4294967295
 80173ce:	e7e9      	b.n	80173a4 <__ssputs_r+0x88>

080173d0 <_svfiprintf_r>:
 80173d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173d4:	4698      	mov	r8, r3
 80173d6:	898b      	ldrh	r3, [r1, #12]
 80173d8:	061b      	lsls	r3, r3, #24
 80173da:	b09d      	sub	sp, #116	; 0x74
 80173dc:	4607      	mov	r7, r0
 80173de:	460d      	mov	r5, r1
 80173e0:	4614      	mov	r4, r2
 80173e2:	d50e      	bpl.n	8017402 <_svfiprintf_r+0x32>
 80173e4:	690b      	ldr	r3, [r1, #16]
 80173e6:	b963      	cbnz	r3, 8017402 <_svfiprintf_r+0x32>
 80173e8:	2140      	movs	r1, #64	; 0x40
 80173ea:	f7ff ff0b 	bl	8017204 <_malloc_r>
 80173ee:	6028      	str	r0, [r5, #0]
 80173f0:	6128      	str	r0, [r5, #16]
 80173f2:	b920      	cbnz	r0, 80173fe <_svfiprintf_r+0x2e>
 80173f4:	230c      	movs	r3, #12
 80173f6:	603b      	str	r3, [r7, #0]
 80173f8:	f04f 30ff 	mov.w	r0, #4294967295
 80173fc:	e0d0      	b.n	80175a0 <_svfiprintf_r+0x1d0>
 80173fe:	2340      	movs	r3, #64	; 0x40
 8017400:	616b      	str	r3, [r5, #20]
 8017402:	2300      	movs	r3, #0
 8017404:	9309      	str	r3, [sp, #36]	; 0x24
 8017406:	2320      	movs	r3, #32
 8017408:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801740c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017410:	2330      	movs	r3, #48	; 0x30
 8017412:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80175b8 <_svfiprintf_r+0x1e8>
 8017416:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801741a:	f04f 0901 	mov.w	r9, #1
 801741e:	4623      	mov	r3, r4
 8017420:	469a      	mov	sl, r3
 8017422:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017426:	b10a      	cbz	r2, 801742c <_svfiprintf_r+0x5c>
 8017428:	2a25      	cmp	r2, #37	; 0x25
 801742a:	d1f9      	bne.n	8017420 <_svfiprintf_r+0x50>
 801742c:	ebba 0b04 	subs.w	fp, sl, r4
 8017430:	d00b      	beq.n	801744a <_svfiprintf_r+0x7a>
 8017432:	465b      	mov	r3, fp
 8017434:	4622      	mov	r2, r4
 8017436:	4629      	mov	r1, r5
 8017438:	4638      	mov	r0, r7
 801743a:	f7ff ff6f 	bl	801731c <__ssputs_r>
 801743e:	3001      	adds	r0, #1
 8017440:	f000 80a9 	beq.w	8017596 <_svfiprintf_r+0x1c6>
 8017444:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017446:	445a      	add	r2, fp
 8017448:	9209      	str	r2, [sp, #36]	; 0x24
 801744a:	f89a 3000 	ldrb.w	r3, [sl]
 801744e:	2b00      	cmp	r3, #0
 8017450:	f000 80a1 	beq.w	8017596 <_svfiprintf_r+0x1c6>
 8017454:	2300      	movs	r3, #0
 8017456:	f04f 32ff 	mov.w	r2, #4294967295
 801745a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801745e:	f10a 0a01 	add.w	sl, sl, #1
 8017462:	9304      	str	r3, [sp, #16]
 8017464:	9307      	str	r3, [sp, #28]
 8017466:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801746a:	931a      	str	r3, [sp, #104]	; 0x68
 801746c:	4654      	mov	r4, sl
 801746e:	2205      	movs	r2, #5
 8017470:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017474:	4850      	ldr	r0, [pc, #320]	; (80175b8 <_svfiprintf_r+0x1e8>)
 8017476:	f7e8 ff63 	bl	8000340 <memchr>
 801747a:	9a04      	ldr	r2, [sp, #16]
 801747c:	b9d8      	cbnz	r0, 80174b6 <_svfiprintf_r+0xe6>
 801747e:	06d0      	lsls	r0, r2, #27
 8017480:	bf44      	itt	mi
 8017482:	2320      	movmi	r3, #32
 8017484:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017488:	0711      	lsls	r1, r2, #28
 801748a:	bf44      	itt	mi
 801748c:	232b      	movmi	r3, #43	; 0x2b
 801748e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017492:	f89a 3000 	ldrb.w	r3, [sl]
 8017496:	2b2a      	cmp	r3, #42	; 0x2a
 8017498:	d015      	beq.n	80174c6 <_svfiprintf_r+0xf6>
 801749a:	9a07      	ldr	r2, [sp, #28]
 801749c:	4654      	mov	r4, sl
 801749e:	2000      	movs	r0, #0
 80174a0:	f04f 0c0a 	mov.w	ip, #10
 80174a4:	4621      	mov	r1, r4
 80174a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80174aa:	3b30      	subs	r3, #48	; 0x30
 80174ac:	2b09      	cmp	r3, #9
 80174ae:	d94d      	bls.n	801754c <_svfiprintf_r+0x17c>
 80174b0:	b1b0      	cbz	r0, 80174e0 <_svfiprintf_r+0x110>
 80174b2:	9207      	str	r2, [sp, #28]
 80174b4:	e014      	b.n	80174e0 <_svfiprintf_r+0x110>
 80174b6:	eba0 0308 	sub.w	r3, r0, r8
 80174ba:	fa09 f303 	lsl.w	r3, r9, r3
 80174be:	4313      	orrs	r3, r2
 80174c0:	9304      	str	r3, [sp, #16]
 80174c2:	46a2      	mov	sl, r4
 80174c4:	e7d2      	b.n	801746c <_svfiprintf_r+0x9c>
 80174c6:	9b03      	ldr	r3, [sp, #12]
 80174c8:	1d19      	adds	r1, r3, #4
 80174ca:	681b      	ldr	r3, [r3, #0]
 80174cc:	9103      	str	r1, [sp, #12]
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	bfbb      	ittet	lt
 80174d2:	425b      	neglt	r3, r3
 80174d4:	f042 0202 	orrlt.w	r2, r2, #2
 80174d8:	9307      	strge	r3, [sp, #28]
 80174da:	9307      	strlt	r3, [sp, #28]
 80174dc:	bfb8      	it	lt
 80174de:	9204      	strlt	r2, [sp, #16]
 80174e0:	7823      	ldrb	r3, [r4, #0]
 80174e2:	2b2e      	cmp	r3, #46	; 0x2e
 80174e4:	d10c      	bne.n	8017500 <_svfiprintf_r+0x130>
 80174e6:	7863      	ldrb	r3, [r4, #1]
 80174e8:	2b2a      	cmp	r3, #42	; 0x2a
 80174ea:	d134      	bne.n	8017556 <_svfiprintf_r+0x186>
 80174ec:	9b03      	ldr	r3, [sp, #12]
 80174ee:	1d1a      	adds	r2, r3, #4
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	9203      	str	r2, [sp, #12]
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	bfb8      	it	lt
 80174f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80174fc:	3402      	adds	r4, #2
 80174fe:	9305      	str	r3, [sp, #20]
 8017500:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80175c8 <_svfiprintf_r+0x1f8>
 8017504:	7821      	ldrb	r1, [r4, #0]
 8017506:	2203      	movs	r2, #3
 8017508:	4650      	mov	r0, sl
 801750a:	f7e8 ff19 	bl	8000340 <memchr>
 801750e:	b138      	cbz	r0, 8017520 <_svfiprintf_r+0x150>
 8017510:	9b04      	ldr	r3, [sp, #16]
 8017512:	eba0 000a 	sub.w	r0, r0, sl
 8017516:	2240      	movs	r2, #64	; 0x40
 8017518:	4082      	lsls	r2, r0
 801751a:	4313      	orrs	r3, r2
 801751c:	3401      	adds	r4, #1
 801751e:	9304      	str	r3, [sp, #16]
 8017520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017524:	4825      	ldr	r0, [pc, #148]	; (80175bc <_svfiprintf_r+0x1ec>)
 8017526:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801752a:	2206      	movs	r2, #6
 801752c:	f7e8 ff08 	bl	8000340 <memchr>
 8017530:	2800      	cmp	r0, #0
 8017532:	d038      	beq.n	80175a6 <_svfiprintf_r+0x1d6>
 8017534:	4b22      	ldr	r3, [pc, #136]	; (80175c0 <_svfiprintf_r+0x1f0>)
 8017536:	bb1b      	cbnz	r3, 8017580 <_svfiprintf_r+0x1b0>
 8017538:	9b03      	ldr	r3, [sp, #12]
 801753a:	3307      	adds	r3, #7
 801753c:	f023 0307 	bic.w	r3, r3, #7
 8017540:	3308      	adds	r3, #8
 8017542:	9303      	str	r3, [sp, #12]
 8017544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017546:	4433      	add	r3, r6
 8017548:	9309      	str	r3, [sp, #36]	; 0x24
 801754a:	e768      	b.n	801741e <_svfiprintf_r+0x4e>
 801754c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017550:	460c      	mov	r4, r1
 8017552:	2001      	movs	r0, #1
 8017554:	e7a6      	b.n	80174a4 <_svfiprintf_r+0xd4>
 8017556:	2300      	movs	r3, #0
 8017558:	3401      	adds	r4, #1
 801755a:	9305      	str	r3, [sp, #20]
 801755c:	4619      	mov	r1, r3
 801755e:	f04f 0c0a 	mov.w	ip, #10
 8017562:	4620      	mov	r0, r4
 8017564:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017568:	3a30      	subs	r2, #48	; 0x30
 801756a:	2a09      	cmp	r2, #9
 801756c:	d903      	bls.n	8017576 <_svfiprintf_r+0x1a6>
 801756e:	2b00      	cmp	r3, #0
 8017570:	d0c6      	beq.n	8017500 <_svfiprintf_r+0x130>
 8017572:	9105      	str	r1, [sp, #20]
 8017574:	e7c4      	b.n	8017500 <_svfiprintf_r+0x130>
 8017576:	fb0c 2101 	mla	r1, ip, r1, r2
 801757a:	4604      	mov	r4, r0
 801757c:	2301      	movs	r3, #1
 801757e:	e7f0      	b.n	8017562 <_svfiprintf_r+0x192>
 8017580:	ab03      	add	r3, sp, #12
 8017582:	9300      	str	r3, [sp, #0]
 8017584:	462a      	mov	r2, r5
 8017586:	4b0f      	ldr	r3, [pc, #60]	; (80175c4 <_svfiprintf_r+0x1f4>)
 8017588:	a904      	add	r1, sp, #16
 801758a:	4638      	mov	r0, r7
 801758c:	f3af 8000 	nop.w
 8017590:	1c42      	adds	r2, r0, #1
 8017592:	4606      	mov	r6, r0
 8017594:	d1d6      	bne.n	8017544 <_svfiprintf_r+0x174>
 8017596:	89ab      	ldrh	r3, [r5, #12]
 8017598:	065b      	lsls	r3, r3, #25
 801759a:	f53f af2d 	bmi.w	80173f8 <_svfiprintf_r+0x28>
 801759e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80175a0:	b01d      	add	sp, #116	; 0x74
 80175a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175a6:	ab03      	add	r3, sp, #12
 80175a8:	9300      	str	r3, [sp, #0]
 80175aa:	462a      	mov	r2, r5
 80175ac:	4b05      	ldr	r3, [pc, #20]	; (80175c4 <_svfiprintf_r+0x1f4>)
 80175ae:	a904      	add	r1, sp, #16
 80175b0:	4638      	mov	r0, r7
 80175b2:	f000 fa4b 	bl	8017a4c <_printf_i>
 80175b6:	e7eb      	b.n	8017590 <_svfiprintf_r+0x1c0>
 80175b8:	0801853c 	.word	0x0801853c
 80175bc:	08018546 	.word	0x08018546
 80175c0:	00000000 	.word	0x00000000
 80175c4:	0801731d 	.word	0x0801731d
 80175c8:	08018542 	.word	0x08018542

080175cc <_sungetc_r>:
 80175cc:	b538      	push	{r3, r4, r5, lr}
 80175ce:	1c4b      	adds	r3, r1, #1
 80175d0:	4614      	mov	r4, r2
 80175d2:	d103      	bne.n	80175dc <_sungetc_r+0x10>
 80175d4:	f04f 35ff 	mov.w	r5, #4294967295
 80175d8:	4628      	mov	r0, r5
 80175da:	bd38      	pop	{r3, r4, r5, pc}
 80175dc:	8993      	ldrh	r3, [r2, #12]
 80175de:	f023 0320 	bic.w	r3, r3, #32
 80175e2:	8193      	strh	r3, [r2, #12]
 80175e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80175e6:	6852      	ldr	r2, [r2, #4]
 80175e8:	b2cd      	uxtb	r5, r1
 80175ea:	b18b      	cbz	r3, 8017610 <_sungetc_r+0x44>
 80175ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80175ee:	4293      	cmp	r3, r2
 80175f0:	dd08      	ble.n	8017604 <_sungetc_r+0x38>
 80175f2:	6823      	ldr	r3, [r4, #0]
 80175f4:	1e5a      	subs	r2, r3, #1
 80175f6:	6022      	str	r2, [r4, #0]
 80175f8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80175fc:	6863      	ldr	r3, [r4, #4]
 80175fe:	3301      	adds	r3, #1
 8017600:	6063      	str	r3, [r4, #4]
 8017602:	e7e9      	b.n	80175d8 <_sungetc_r+0xc>
 8017604:	4621      	mov	r1, r4
 8017606:	f000 fcca 	bl	8017f9e <__submore>
 801760a:	2800      	cmp	r0, #0
 801760c:	d0f1      	beq.n	80175f2 <_sungetc_r+0x26>
 801760e:	e7e1      	b.n	80175d4 <_sungetc_r+0x8>
 8017610:	6921      	ldr	r1, [r4, #16]
 8017612:	6823      	ldr	r3, [r4, #0]
 8017614:	b151      	cbz	r1, 801762c <_sungetc_r+0x60>
 8017616:	4299      	cmp	r1, r3
 8017618:	d208      	bcs.n	801762c <_sungetc_r+0x60>
 801761a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801761e:	42a9      	cmp	r1, r5
 8017620:	d104      	bne.n	801762c <_sungetc_r+0x60>
 8017622:	3b01      	subs	r3, #1
 8017624:	3201      	adds	r2, #1
 8017626:	6023      	str	r3, [r4, #0]
 8017628:	6062      	str	r2, [r4, #4]
 801762a:	e7d5      	b.n	80175d8 <_sungetc_r+0xc>
 801762c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017630:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017634:	6363      	str	r3, [r4, #52]	; 0x34
 8017636:	2303      	movs	r3, #3
 8017638:	63a3      	str	r3, [r4, #56]	; 0x38
 801763a:	4623      	mov	r3, r4
 801763c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017640:	6023      	str	r3, [r4, #0]
 8017642:	2301      	movs	r3, #1
 8017644:	e7dc      	b.n	8017600 <_sungetc_r+0x34>

08017646 <__ssrefill_r>:
 8017646:	b510      	push	{r4, lr}
 8017648:	460c      	mov	r4, r1
 801764a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801764c:	b169      	cbz	r1, 801766a <__ssrefill_r+0x24>
 801764e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017652:	4299      	cmp	r1, r3
 8017654:	d001      	beq.n	801765a <__ssrefill_r+0x14>
 8017656:	f7ff fd69 	bl	801712c <_free_r>
 801765a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801765c:	6063      	str	r3, [r4, #4]
 801765e:	2000      	movs	r0, #0
 8017660:	6360      	str	r0, [r4, #52]	; 0x34
 8017662:	b113      	cbz	r3, 801766a <__ssrefill_r+0x24>
 8017664:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017666:	6023      	str	r3, [r4, #0]
 8017668:	bd10      	pop	{r4, pc}
 801766a:	6923      	ldr	r3, [r4, #16]
 801766c:	6023      	str	r3, [r4, #0]
 801766e:	2300      	movs	r3, #0
 8017670:	6063      	str	r3, [r4, #4]
 8017672:	89a3      	ldrh	r3, [r4, #12]
 8017674:	f043 0320 	orr.w	r3, r3, #32
 8017678:	81a3      	strh	r3, [r4, #12]
 801767a:	f04f 30ff 	mov.w	r0, #4294967295
 801767e:	e7f3      	b.n	8017668 <__ssrefill_r+0x22>

08017680 <__ssvfiscanf_r>:
 8017680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017684:	460c      	mov	r4, r1
 8017686:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801768a:	2100      	movs	r1, #0
 801768c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8017690:	49a6      	ldr	r1, [pc, #664]	; (801792c <__ssvfiscanf_r+0x2ac>)
 8017692:	91a0      	str	r1, [sp, #640]	; 0x280
 8017694:	f10d 0804 	add.w	r8, sp, #4
 8017698:	49a5      	ldr	r1, [pc, #660]	; (8017930 <__ssvfiscanf_r+0x2b0>)
 801769a:	4fa6      	ldr	r7, [pc, #664]	; (8017934 <__ssvfiscanf_r+0x2b4>)
 801769c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8017938 <__ssvfiscanf_r+0x2b8>
 80176a0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80176a4:	4606      	mov	r6, r0
 80176a6:	91a1      	str	r1, [sp, #644]	; 0x284
 80176a8:	9300      	str	r3, [sp, #0]
 80176aa:	7813      	ldrb	r3, [r2, #0]
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	f000 815a 	beq.w	8017966 <__ssvfiscanf_r+0x2e6>
 80176b2:	5cf9      	ldrb	r1, [r7, r3]
 80176b4:	f011 0108 	ands.w	r1, r1, #8
 80176b8:	f102 0501 	add.w	r5, r2, #1
 80176bc:	d019      	beq.n	80176f2 <__ssvfiscanf_r+0x72>
 80176be:	6863      	ldr	r3, [r4, #4]
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	dd0f      	ble.n	80176e4 <__ssvfiscanf_r+0x64>
 80176c4:	6823      	ldr	r3, [r4, #0]
 80176c6:	781a      	ldrb	r2, [r3, #0]
 80176c8:	5cba      	ldrb	r2, [r7, r2]
 80176ca:	0712      	lsls	r2, r2, #28
 80176cc:	d401      	bmi.n	80176d2 <__ssvfiscanf_r+0x52>
 80176ce:	462a      	mov	r2, r5
 80176d0:	e7eb      	b.n	80176aa <__ssvfiscanf_r+0x2a>
 80176d2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80176d4:	3201      	adds	r2, #1
 80176d6:	9245      	str	r2, [sp, #276]	; 0x114
 80176d8:	6862      	ldr	r2, [r4, #4]
 80176da:	3301      	adds	r3, #1
 80176dc:	3a01      	subs	r2, #1
 80176de:	6062      	str	r2, [r4, #4]
 80176e0:	6023      	str	r3, [r4, #0]
 80176e2:	e7ec      	b.n	80176be <__ssvfiscanf_r+0x3e>
 80176e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80176e6:	4621      	mov	r1, r4
 80176e8:	4630      	mov	r0, r6
 80176ea:	4798      	blx	r3
 80176ec:	2800      	cmp	r0, #0
 80176ee:	d0e9      	beq.n	80176c4 <__ssvfiscanf_r+0x44>
 80176f0:	e7ed      	b.n	80176ce <__ssvfiscanf_r+0x4e>
 80176f2:	2b25      	cmp	r3, #37	; 0x25
 80176f4:	d012      	beq.n	801771c <__ssvfiscanf_r+0x9c>
 80176f6:	469a      	mov	sl, r3
 80176f8:	6863      	ldr	r3, [r4, #4]
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	f340 8091 	ble.w	8017822 <__ssvfiscanf_r+0x1a2>
 8017700:	6822      	ldr	r2, [r4, #0]
 8017702:	7813      	ldrb	r3, [r2, #0]
 8017704:	4553      	cmp	r3, sl
 8017706:	f040 812e 	bne.w	8017966 <__ssvfiscanf_r+0x2e6>
 801770a:	6863      	ldr	r3, [r4, #4]
 801770c:	3b01      	subs	r3, #1
 801770e:	6063      	str	r3, [r4, #4]
 8017710:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017712:	3201      	adds	r2, #1
 8017714:	3301      	adds	r3, #1
 8017716:	6022      	str	r2, [r4, #0]
 8017718:	9345      	str	r3, [sp, #276]	; 0x114
 801771a:	e7d8      	b.n	80176ce <__ssvfiscanf_r+0x4e>
 801771c:	9141      	str	r1, [sp, #260]	; 0x104
 801771e:	9143      	str	r1, [sp, #268]	; 0x10c
 8017720:	7853      	ldrb	r3, [r2, #1]
 8017722:	2b2a      	cmp	r3, #42	; 0x2a
 8017724:	bf02      	ittt	eq
 8017726:	2310      	moveq	r3, #16
 8017728:	1c95      	addeq	r5, r2, #2
 801772a:	9341      	streq	r3, [sp, #260]	; 0x104
 801772c:	220a      	movs	r2, #10
 801772e:	46aa      	mov	sl, r5
 8017730:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8017734:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8017738:	2b09      	cmp	r3, #9
 801773a:	d91c      	bls.n	8017776 <__ssvfiscanf_r+0xf6>
 801773c:	487e      	ldr	r0, [pc, #504]	; (8017938 <__ssvfiscanf_r+0x2b8>)
 801773e:	2203      	movs	r2, #3
 8017740:	f7e8 fdfe 	bl	8000340 <memchr>
 8017744:	b138      	cbz	r0, 8017756 <__ssvfiscanf_r+0xd6>
 8017746:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017748:	eba0 0009 	sub.w	r0, r0, r9
 801774c:	2301      	movs	r3, #1
 801774e:	4083      	lsls	r3, r0
 8017750:	4313      	orrs	r3, r2
 8017752:	9341      	str	r3, [sp, #260]	; 0x104
 8017754:	4655      	mov	r5, sl
 8017756:	f815 3b01 	ldrb.w	r3, [r5], #1
 801775a:	2b78      	cmp	r3, #120	; 0x78
 801775c:	d806      	bhi.n	801776c <__ssvfiscanf_r+0xec>
 801775e:	2b57      	cmp	r3, #87	; 0x57
 8017760:	d810      	bhi.n	8017784 <__ssvfiscanf_r+0x104>
 8017762:	2b25      	cmp	r3, #37	; 0x25
 8017764:	d0c7      	beq.n	80176f6 <__ssvfiscanf_r+0x76>
 8017766:	d857      	bhi.n	8017818 <__ssvfiscanf_r+0x198>
 8017768:	2b00      	cmp	r3, #0
 801776a:	d065      	beq.n	8017838 <__ssvfiscanf_r+0x1b8>
 801776c:	2303      	movs	r3, #3
 801776e:	9347      	str	r3, [sp, #284]	; 0x11c
 8017770:	230a      	movs	r3, #10
 8017772:	9342      	str	r3, [sp, #264]	; 0x108
 8017774:	e076      	b.n	8017864 <__ssvfiscanf_r+0x1e4>
 8017776:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017778:	fb02 1103 	mla	r1, r2, r3, r1
 801777c:	3930      	subs	r1, #48	; 0x30
 801777e:	9143      	str	r1, [sp, #268]	; 0x10c
 8017780:	4655      	mov	r5, sl
 8017782:	e7d4      	b.n	801772e <__ssvfiscanf_r+0xae>
 8017784:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8017788:	2a20      	cmp	r2, #32
 801778a:	d8ef      	bhi.n	801776c <__ssvfiscanf_r+0xec>
 801778c:	a101      	add	r1, pc, #4	; (adr r1, 8017794 <__ssvfiscanf_r+0x114>)
 801778e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017792:	bf00      	nop
 8017794:	08017847 	.word	0x08017847
 8017798:	0801776d 	.word	0x0801776d
 801779c:	0801776d 	.word	0x0801776d
 80177a0:	080178a5 	.word	0x080178a5
 80177a4:	0801776d 	.word	0x0801776d
 80177a8:	0801776d 	.word	0x0801776d
 80177ac:	0801776d 	.word	0x0801776d
 80177b0:	0801776d 	.word	0x0801776d
 80177b4:	0801776d 	.word	0x0801776d
 80177b8:	0801776d 	.word	0x0801776d
 80177bc:	0801776d 	.word	0x0801776d
 80177c0:	080178bb 	.word	0x080178bb
 80177c4:	080178a1 	.word	0x080178a1
 80177c8:	0801781f 	.word	0x0801781f
 80177cc:	0801781f 	.word	0x0801781f
 80177d0:	0801781f 	.word	0x0801781f
 80177d4:	0801776d 	.word	0x0801776d
 80177d8:	0801785d 	.word	0x0801785d
 80177dc:	0801776d 	.word	0x0801776d
 80177e0:	0801776d 	.word	0x0801776d
 80177e4:	0801776d 	.word	0x0801776d
 80177e8:	0801776d 	.word	0x0801776d
 80177ec:	080178cb 	.word	0x080178cb
 80177f0:	08017899 	.word	0x08017899
 80177f4:	0801783f 	.word	0x0801783f
 80177f8:	0801776d 	.word	0x0801776d
 80177fc:	0801776d 	.word	0x0801776d
 8017800:	080178c7 	.word	0x080178c7
 8017804:	0801776d 	.word	0x0801776d
 8017808:	080178a1 	.word	0x080178a1
 801780c:	0801776d 	.word	0x0801776d
 8017810:	0801776d 	.word	0x0801776d
 8017814:	08017847 	.word	0x08017847
 8017818:	3b45      	subs	r3, #69	; 0x45
 801781a:	2b02      	cmp	r3, #2
 801781c:	d8a6      	bhi.n	801776c <__ssvfiscanf_r+0xec>
 801781e:	2305      	movs	r3, #5
 8017820:	e01f      	b.n	8017862 <__ssvfiscanf_r+0x1e2>
 8017822:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017824:	4621      	mov	r1, r4
 8017826:	4630      	mov	r0, r6
 8017828:	4798      	blx	r3
 801782a:	2800      	cmp	r0, #0
 801782c:	f43f af68 	beq.w	8017700 <__ssvfiscanf_r+0x80>
 8017830:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017832:	2800      	cmp	r0, #0
 8017834:	f040 808d 	bne.w	8017952 <__ssvfiscanf_r+0x2d2>
 8017838:	f04f 30ff 	mov.w	r0, #4294967295
 801783c:	e08f      	b.n	801795e <__ssvfiscanf_r+0x2de>
 801783e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017840:	f042 0220 	orr.w	r2, r2, #32
 8017844:	9241      	str	r2, [sp, #260]	; 0x104
 8017846:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801784c:	9241      	str	r2, [sp, #260]	; 0x104
 801784e:	2210      	movs	r2, #16
 8017850:	2b6f      	cmp	r3, #111	; 0x6f
 8017852:	9242      	str	r2, [sp, #264]	; 0x108
 8017854:	bf34      	ite	cc
 8017856:	2303      	movcc	r3, #3
 8017858:	2304      	movcs	r3, #4
 801785a:	e002      	b.n	8017862 <__ssvfiscanf_r+0x1e2>
 801785c:	2300      	movs	r3, #0
 801785e:	9342      	str	r3, [sp, #264]	; 0x108
 8017860:	2303      	movs	r3, #3
 8017862:	9347      	str	r3, [sp, #284]	; 0x11c
 8017864:	6863      	ldr	r3, [r4, #4]
 8017866:	2b00      	cmp	r3, #0
 8017868:	dd3d      	ble.n	80178e6 <__ssvfiscanf_r+0x266>
 801786a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801786c:	0659      	lsls	r1, r3, #25
 801786e:	d404      	bmi.n	801787a <__ssvfiscanf_r+0x1fa>
 8017870:	6823      	ldr	r3, [r4, #0]
 8017872:	781a      	ldrb	r2, [r3, #0]
 8017874:	5cba      	ldrb	r2, [r7, r2]
 8017876:	0712      	lsls	r2, r2, #28
 8017878:	d43c      	bmi.n	80178f4 <__ssvfiscanf_r+0x274>
 801787a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801787c:	2b02      	cmp	r3, #2
 801787e:	dc4b      	bgt.n	8017918 <__ssvfiscanf_r+0x298>
 8017880:	466b      	mov	r3, sp
 8017882:	4622      	mov	r2, r4
 8017884:	a941      	add	r1, sp, #260	; 0x104
 8017886:	4630      	mov	r0, r6
 8017888:	f000 fa02 	bl	8017c90 <_scanf_chars>
 801788c:	2801      	cmp	r0, #1
 801788e:	d06a      	beq.n	8017966 <__ssvfiscanf_r+0x2e6>
 8017890:	2802      	cmp	r0, #2
 8017892:	f47f af1c 	bne.w	80176ce <__ssvfiscanf_r+0x4e>
 8017896:	e7cb      	b.n	8017830 <__ssvfiscanf_r+0x1b0>
 8017898:	2308      	movs	r3, #8
 801789a:	9342      	str	r3, [sp, #264]	; 0x108
 801789c:	2304      	movs	r3, #4
 801789e:	e7e0      	b.n	8017862 <__ssvfiscanf_r+0x1e2>
 80178a0:	220a      	movs	r2, #10
 80178a2:	e7d5      	b.n	8017850 <__ssvfiscanf_r+0x1d0>
 80178a4:	4629      	mov	r1, r5
 80178a6:	4640      	mov	r0, r8
 80178a8:	f000 fb40 	bl	8017f2c <__sccl>
 80178ac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80178ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80178b2:	9341      	str	r3, [sp, #260]	; 0x104
 80178b4:	4605      	mov	r5, r0
 80178b6:	2301      	movs	r3, #1
 80178b8:	e7d3      	b.n	8017862 <__ssvfiscanf_r+0x1e2>
 80178ba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80178bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80178c0:	9341      	str	r3, [sp, #260]	; 0x104
 80178c2:	2300      	movs	r3, #0
 80178c4:	e7cd      	b.n	8017862 <__ssvfiscanf_r+0x1e2>
 80178c6:	2302      	movs	r3, #2
 80178c8:	e7cb      	b.n	8017862 <__ssvfiscanf_r+0x1e2>
 80178ca:	9841      	ldr	r0, [sp, #260]	; 0x104
 80178cc:	06c3      	lsls	r3, r0, #27
 80178ce:	f53f aefe 	bmi.w	80176ce <__ssvfiscanf_r+0x4e>
 80178d2:	9b00      	ldr	r3, [sp, #0]
 80178d4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80178d6:	1d19      	adds	r1, r3, #4
 80178d8:	9100      	str	r1, [sp, #0]
 80178da:	681b      	ldr	r3, [r3, #0]
 80178dc:	07c0      	lsls	r0, r0, #31
 80178de:	bf4c      	ite	mi
 80178e0:	801a      	strhmi	r2, [r3, #0]
 80178e2:	601a      	strpl	r2, [r3, #0]
 80178e4:	e6f3      	b.n	80176ce <__ssvfiscanf_r+0x4e>
 80178e6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80178e8:	4621      	mov	r1, r4
 80178ea:	4630      	mov	r0, r6
 80178ec:	4798      	blx	r3
 80178ee:	2800      	cmp	r0, #0
 80178f0:	d0bb      	beq.n	801786a <__ssvfiscanf_r+0x1ea>
 80178f2:	e79d      	b.n	8017830 <__ssvfiscanf_r+0x1b0>
 80178f4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80178f6:	3201      	adds	r2, #1
 80178f8:	9245      	str	r2, [sp, #276]	; 0x114
 80178fa:	6862      	ldr	r2, [r4, #4]
 80178fc:	3a01      	subs	r2, #1
 80178fe:	2a00      	cmp	r2, #0
 8017900:	6062      	str	r2, [r4, #4]
 8017902:	dd02      	ble.n	801790a <__ssvfiscanf_r+0x28a>
 8017904:	3301      	adds	r3, #1
 8017906:	6023      	str	r3, [r4, #0]
 8017908:	e7b2      	b.n	8017870 <__ssvfiscanf_r+0x1f0>
 801790a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801790c:	4621      	mov	r1, r4
 801790e:	4630      	mov	r0, r6
 8017910:	4798      	blx	r3
 8017912:	2800      	cmp	r0, #0
 8017914:	d0ac      	beq.n	8017870 <__ssvfiscanf_r+0x1f0>
 8017916:	e78b      	b.n	8017830 <__ssvfiscanf_r+0x1b0>
 8017918:	2b04      	cmp	r3, #4
 801791a:	dc0f      	bgt.n	801793c <__ssvfiscanf_r+0x2bc>
 801791c:	466b      	mov	r3, sp
 801791e:	4622      	mov	r2, r4
 8017920:	a941      	add	r1, sp, #260	; 0x104
 8017922:	4630      	mov	r0, r6
 8017924:	f000 fa0e 	bl	8017d44 <_scanf_i>
 8017928:	e7b0      	b.n	801788c <__ssvfiscanf_r+0x20c>
 801792a:	bf00      	nop
 801792c:	080175cd 	.word	0x080175cd
 8017930:	08017647 	.word	0x08017647
 8017934:	0801858b 	.word	0x0801858b
 8017938:	08018542 	.word	0x08018542
 801793c:	4b0b      	ldr	r3, [pc, #44]	; (801796c <__ssvfiscanf_r+0x2ec>)
 801793e:	2b00      	cmp	r3, #0
 8017940:	f43f aec5 	beq.w	80176ce <__ssvfiscanf_r+0x4e>
 8017944:	466b      	mov	r3, sp
 8017946:	4622      	mov	r2, r4
 8017948:	a941      	add	r1, sp, #260	; 0x104
 801794a:	4630      	mov	r0, r6
 801794c:	f3af 8000 	nop.w
 8017950:	e79c      	b.n	801788c <__ssvfiscanf_r+0x20c>
 8017952:	89a3      	ldrh	r3, [r4, #12]
 8017954:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017958:	bf18      	it	ne
 801795a:	f04f 30ff 	movne.w	r0, #4294967295
 801795e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8017962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017966:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017968:	e7f9      	b.n	801795e <__ssvfiscanf_r+0x2de>
 801796a:	bf00      	nop
 801796c:	00000000 	.word	0x00000000

08017970 <_printf_common>:
 8017970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017974:	4616      	mov	r6, r2
 8017976:	4699      	mov	r9, r3
 8017978:	688a      	ldr	r2, [r1, #8]
 801797a:	690b      	ldr	r3, [r1, #16]
 801797c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017980:	4293      	cmp	r3, r2
 8017982:	bfb8      	it	lt
 8017984:	4613      	movlt	r3, r2
 8017986:	6033      	str	r3, [r6, #0]
 8017988:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801798c:	4607      	mov	r7, r0
 801798e:	460c      	mov	r4, r1
 8017990:	b10a      	cbz	r2, 8017996 <_printf_common+0x26>
 8017992:	3301      	adds	r3, #1
 8017994:	6033      	str	r3, [r6, #0]
 8017996:	6823      	ldr	r3, [r4, #0]
 8017998:	0699      	lsls	r1, r3, #26
 801799a:	bf42      	ittt	mi
 801799c:	6833      	ldrmi	r3, [r6, #0]
 801799e:	3302      	addmi	r3, #2
 80179a0:	6033      	strmi	r3, [r6, #0]
 80179a2:	6825      	ldr	r5, [r4, #0]
 80179a4:	f015 0506 	ands.w	r5, r5, #6
 80179a8:	d106      	bne.n	80179b8 <_printf_common+0x48>
 80179aa:	f104 0a19 	add.w	sl, r4, #25
 80179ae:	68e3      	ldr	r3, [r4, #12]
 80179b0:	6832      	ldr	r2, [r6, #0]
 80179b2:	1a9b      	subs	r3, r3, r2
 80179b4:	42ab      	cmp	r3, r5
 80179b6:	dc26      	bgt.n	8017a06 <_printf_common+0x96>
 80179b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80179bc:	1e13      	subs	r3, r2, #0
 80179be:	6822      	ldr	r2, [r4, #0]
 80179c0:	bf18      	it	ne
 80179c2:	2301      	movne	r3, #1
 80179c4:	0692      	lsls	r2, r2, #26
 80179c6:	d42b      	bmi.n	8017a20 <_printf_common+0xb0>
 80179c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80179cc:	4649      	mov	r1, r9
 80179ce:	4638      	mov	r0, r7
 80179d0:	47c0      	blx	r8
 80179d2:	3001      	adds	r0, #1
 80179d4:	d01e      	beq.n	8017a14 <_printf_common+0xa4>
 80179d6:	6823      	ldr	r3, [r4, #0]
 80179d8:	6922      	ldr	r2, [r4, #16]
 80179da:	f003 0306 	and.w	r3, r3, #6
 80179de:	2b04      	cmp	r3, #4
 80179e0:	bf02      	ittt	eq
 80179e2:	68e5      	ldreq	r5, [r4, #12]
 80179e4:	6833      	ldreq	r3, [r6, #0]
 80179e6:	1aed      	subeq	r5, r5, r3
 80179e8:	68a3      	ldr	r3, [r4, #8]
 80179ea:	bf0c      	ite	eq
 80179ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80179f0:	2500      	movne	r5, #0
 80179f2:	4293      	cmp	r3, r2
 80179f4:	bfc4      	itt	gt
 80179f6:	1a9b      	subgt	r3, r3, r2
 80179f8:	18ed      	addgt	r5, r5, r3
 80179fa:	2600      	movs	r6, #0
 80179fc:	341a      	adds	r4, #26
 80179fe:	42b5      	cmp	r5, r6
 8017a00:	d11a      	bne.n	8017a38 <_printf_common+0xc8>
 8017a02:	2000      	movs	r0, #0
 8017a04:	e008      	b.n	8017a18 <_printf_common+0xa8>
 8017a06:	2301      	movs	r3, #1
 8017a08:	4652      	mov	r2, sl
 8017a0a:	4649      	mov	r1, r9
 8017a0c:	4638      	mov	r0, r7
 8017a0e:	47c0      	blx	r8
 8017a10:	3001      	adds	r0, #1
 8017a12:	d103      	bne.n	8017a1c <_printf_common+0xac>
 8017a14:	f04f 30ff 	mov.w	r0, #4294967295
 8017a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a1c:	3501      	adds	r5, #1
 8017a1e:	e7c6      	b.n	80179ae <_printf_common+0x3e>
 8017a20:	18e1      	adds	r1, r4, r3
 8017a22:	1c5a      	adds	r2, r3, #1
 8017a24:	2030      	movs	r0, #48	; 0x30
 8017a26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017a2a:	4422      	add	r2, r4
 8017a2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017a30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017a34:	3302      	adds	r3, #2
 8017a36:	e7c7      	b.n	80179c8 <_printf_common+0x58>
 8017a38:	2301      	movs	r3, #1
 8017a3a:	4622      	mov	r2, r4
 8017a3c:	4649      	mov	r1, r9
 8017a3e:	4638      	mov	r0, r7
 8017a40:	47c0      	blx	r8
 8017a42:	3001      	adds	r0, #1
 8017a44:	d0e6      	beq.n	8017a14 <_printf_common+0xa4>
 8017a46:	3601      	adds	r6, #1
 8017a48:	e7d9      	b.n	80179fe <_printf_common+0x8e>
	...

08017a4c <_printf_i>:
 8017a4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017a50:	7e0f      	ldrb	r7, [r1, #24]
 8017a52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017a54:	2f78      	cmp	r7, #120	; 0x78
 8017a56:	4691      	mov	r9, r2
 8017a58:	4680      	mov	r8, r0
 8017a5a:	460c      	mov	r4, r1
 8017a5c:	469a      	mov	sl, r3
 8017a5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017a62:	d807      	bhi.n	8017a74 <_printf_i+0x28>
 8017a64:	2f62      	cmp	r7, #98	; 0x62
 8017a66:	d80a      	bhi.n	8017a7e <_printf_i+0x32>
 8017a68:	2f00      	cmp	r7, #0
 8017a6a:	f000 80d4 	beq.w	8017c16 <_printf_i+0x1ca>
 8017a6e:	2f58      	cmp	r7, #88	; 0x58
 8017a70:	f000 80c0 	beq.w	8017bf4 <_printf_i+0x1a8>
 8017a74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017a78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017a7c:	e03a      	b.n	8017af4 <_printf_i+0xa8>
 8017a7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017a82:	2b15      	cmp	r3, #21
 8017a84:	d8f6      	bhi.n	8017a74 <_printf_i+0x28>
 8017a86:	a101      	add	r1, pc, #4	; (adr r1, 8017a8c <_printf_i+0x40>)
 8017a88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017a8c:	08017ae5 	.word	0x08017ae5
 8017a90:	08017af9 	.word	0x08017af9
 8017a94:	08017a75 	.word	0x08017a75
 8017a98:	08017a75 	.word	0x08017a75
 8017a9c:	08017a75 	.word	0x08017a75
 8017aa0:	08017a75 	.word	0x08017a75
 8017aa4:	08017af9 	.word	0x08017af9
 8017aa8:	08017a75 	.word	0x08017a75
 8017aac:	08017a75 	.word	0x08017a75
 8017ab0:	08017a75 	.word	0x08017a75
 8017ab4:	08017a75 	.word	0x08017a75
 8017ab8:	08017bfd 	.word	0x08017bfd
 8017abc:	08017b25 	.word	0x08017b25
 8017ac0:	08017bb7 	.word	0x08017bb7
 8017ac4:	08017a75 	.word	0x08017a75
 8017ac8:	08017a75 	.word	0x08017a75
 8017acc:	08017c1f 	.word	0x08017c1f
 8017ad0:	08017a75 	.word	0x08017a75
 8017ad4:	08017b25 	.word	0x08017b25
 8017ad8:	08017a75 	.word	0x08017a75
 8017adc:	08017a75 	.word	0x08017a75
 8017ae0:	08017bbf 	.word	0x08017bbf
 8017ae4:	682b      	ldr	r3, [r5, #0]
 8017ae6:	1d1a      	adds	r2, r3, #4
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	602a      	str	r2, [r5, #0]
 8017aec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017af0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017af4:	2301      	movs	r3, #1
 8017af6:	e09f      	b.n	8017c38 <_printf_i+0x1ec>
 8017af8:	6820      	ldr	r0, [r4, #0]
 8017afa:	682b      	ldr	r3, [r5, #0]
 8017afc:	0607      	lsls	r7, r0, #24
 8017afe:	f103 0104 	add.w	r1, r3, #4
 8017b02:	6029      	str	r1, [r5, #0]
 8017b04:	d501      	bpl.n	8017b0a <_printf_i+0xbe>
 8017b06:	681e      	ldr	r6, [r3, #0]
 8017b08:	e003      	b.n	8017b12 <_printf_i+0xc6>
 8017b0a:	0646      	lsls	r6, r0, #25
 8017b0c:	d5fb      	bpl.n	8017b06 <_printf_i+0xba>
 8017b0e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017b12:	2e00      	cmp	r6, #0
 8017b14:	da03      	bge.n	8017b1e <_printf_i+0xd2>
 8017b16:	232d      	movs	r3, #45	; 0x2d
 8017b18:	4276      	negs	r6, r6
 8017b1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017b1e:	485a      	ldr	r0, [pc, #360]	; (8017c88 <_printf_i+0x23c>)
 8017b20:	230a      	movs	r3, #10
 8017b22:	e012      	b.n	8017b4a <_printf_i+0xfe>
 8017b24:	682b      	ldr	r3, [r5, #0]
 8017b26:	6820      	ldr	r0, [r4, #0]
 8017b28:	1d19      	adds	r1, r3, #4
 8017b2a:	6029      	str	r1, [r5, #0]
 8017b2c:	0605      	lsls	r5, r0, #24
 8017b2e:	d501      	bpl.n	8017b34 <_printf_i+0xe8>
 8017b30:	681e      	ldr	r6, [r3, #0]
 8017b32:	e002      	b.n	8017b3a <_printf_i+0xee>
 8017b34:	0641      	lsls	r1, r0, #25
 8017b36:	d5fb      	bpl.n	8017b30 <_printf_i+0xe4>
 8017b38:	881e      	ldrh	r6, [r3, #0]
 8017b3a:	4853      	ldr	r0, [pc, #332]	; (8017c88 <_printf_i+0x23c>)
 8017b3c:	2f6f      	cmp	r7, #111	; 0x6f
 8017b3e:	bf0c      	ite	eq
 8017b40:	2308      	moveq	r3, #8
 8017b42:	230a      	movne	r3, #10
 8017b44:	2100      	movs	r1, #0
 8017b46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017b4a:	6865      	ldr	r5, [r4, #4]
 8017b4c:	60a5      	str	r5, [r4, #8]
 8017b4e:	2d00      	cmp	r5, #0
 8017b50:	bfa2      	ittt	ge
 8017b52:	6821      	ldrge	r1, [r4, #0]
 8017b54:	f021 0104 	bicge.w	r1, r1, #4
 8017b58:	6021      	strge	r1, [r4, #0]
 8017b5a:	b90e      	cbnz	r6, 8017b60 <_printf_i+0x114>
 8017b5c:	2d00      	cmp	r5, #0
 8017b5e:	d04b      	beq.n	8017bf8 <_printf_i+0x1ac>
 8017b60:	4615      	mov	r5, r2
 8017b62:	fbb6 f1f3 	udiv	r1, r6, r3
 8017b66:	fb03 6711 	mls	r7, r3, r1, r6
 8017b6a:	5dc7      	ldrb	r7, [r0, r7]
 8017b6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017b70:	4637      	mov	r7, r6
 8017b72:	42bb      	cmp	r3, r7
 8017b74:	460e      	mov	r6, r1
 8017b76:	d9f4      	bls.n	8017b62 <_printf_i+0x116>
 8017b78:	2b08      	cmp	r3, #8
 8017b7a:	d10b      	bne.n	8017b94 <_printf_i+0x148>
 8017b7c:	6823      	ldr	r3, [r4, #0]
 8017b7e:	07de      	lsls	r6, r3, #31
 8017b80:	d508      	bpl.n	8017b94 <_printf_i+0x148>
 8017b82:	6923      	ldr	r3, [r4, #16]
 8017b84:	6861      	ldr	r1, [r4, #4]
 8017b86:	4299      	cmp	r1, r3
 8017b88:	bfde      	ittt	le
 8017b8a:	2330      	movle	r3, #48	; 0x30
 8017b8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017b90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017b94:	1b52      	subs	r2, r2, r5
 8017b96:	6122      	str	r2, [r4, #16]
 8017b98:	f8cd a000 	str.w	sl, [sp]
 8017b9c:	464b      	mov	r3, r9
 8017b9e:	aa03      	add	r2, sp, #12
 8017ba0:	4621      	mov	r1, r4
 8017ba2:	4640      	mov	r0, r8
 8017ba4:	f7ff fee4 	bl	8017970 <_printf_common>
 8017ba8:	3001      	adds	r0, #1
 8017baa:	d14a      	bne.n	8017c42 <_printf_i+0x1f6>
 8017bac:	f04f 30ff 	mov.w	r0, #4294967295
 8017bb0:	b004      	add	sp, #16
 8017bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017bb6:	6823      	ldr	r3, [r4, #0]
 8017bb8:	f043 0320 	orr.w	r3, r3, #32
 8017bbc:	6023      	str	r3, [r4, #0]
 8017bbe:	4833      	ldr	r0, [pc, #204]	; (8017c8c <_printf_i+0x240>)
 8017bc0:	2778      	movs	r7, #120	; 0x78
 8017bc2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017bc6:	6823      	ldr	r3, [r4, #0]
 8017bc8:	6829      	ldr	r1, [r5, #0]
 8017bca:	061f      	lsls	r7, r3, #24
 8017bcc:	f851 6b04 	ldr.w	r6, [r1], #4
 8017bd0:	d402      	bmi.n	8017bd8 <_printf_i+0x18c>
 8017bd2:	065f      	lsls	r7, r3, #25
 8017bd4:	bf48      	it	mi
 8017bd6:	b2b6      	uxthmi	r6, r6
 8017bd8:	07df      	lsls	r7, r3, #31
 8017bda:	bf48      	it	mi
 8017bdc:	f043 0320 	orrmi.w	r3, r3, #32
 8017be0:	6029      	str	r1, [r5, #0]
 8017be2:	bf48      	it	mi
 8017be4:	6023      	strmi	r3, [r4, #0]
 8017be6:	b91e      	cbnz	r6, 8017bf0 <_printf_i+0x1a4>
 8017be8:	6823      	ldr	r3, [r4, #0]
 8017bea:	f023 0320 	bic.w	r3, r3, #32
 8017bee:	6023      	str	r3, [r4, #0]
 8017bf0:	2310      	movs	r3, #16
 8017bf2:	e7a7      	b.n	8017b44 <_printf_i+0xf8>
 8017bf4:	4824      	ldr	r0, [pc, #144]	; (8017c88 <_printf_i+0x23c>)
 8017bf6:	e7e4      	b.n	8017bc2 <_printf_i+0x176>
 8017bf8:	4615      	mov	r5, r2
 8017bfa:	e7bd      	b.n	8017b78 <_printf_i+0x12c>
 8017bfc:	682b      	ldr	r3, [r5, #0]
 8017bfe:	6826      	ldr	r6, [r4, #0]
 8017c00:	6961      	ldr	r1, [r4, #20]
 8017c02:	1d18      	adds	r0, r3, #4
 8017c04:	6028      	str	r0, [r5, #0]
 8017c06:	0635      	lsls	r5, r6, #24
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	d501      	bpl.n	8017c10 <_printf_i+0x1c4>
 8017c0c:	6019      	str	r1, [r3, #0]
 8017c0e:	e002      	b.n	8017c16 <_printf_i+0x1ca>
 8017c10:	0670      	lsls	r0, r6, #25
 8017c12:	d5fb      	bpl.n	8017c0c <_printf_i+0x1c0>
 8017c14:	8019      	strh	r1, [r3, #0]
 8017c16:	2300      	movs	r3, #0
 8017c18:	6123      	str	r3, [r4, #16]
 8017c1a:	4615      	mov	r5, r2
 8017c1c:	e7bc      	b.n	8017b98 <_printf_i+0x14c>
 8017c1e:	682b      	ldr	r3, [r5, #0]
 8017c20:	1d1a      	adds	r2, r3, #4
 8017c22:	602a      	str	r2, [r5, #0]
 8017c24:	681d      	ldr	r5, [r3, #0]
 8017c26:	6862      	ldr	r2, [r4, #4]
 8017c28:	2100      	movs	r1, #0
 8017c2a:	4628      	mov	r0, r5
 8017c2c:	f7e8 fb88 	bl	8000340 <memchr>
 8017c30:	b108      	cbz	r0, 8017c36 <_printf_i+0x1ea>
 8017c32:	1b40      	subs	r0, r0, r5
 8017c34:	6060      	str	r0, [r4, #4]
 8017c36:	6863      	ldr	r3, [r4, #4]
 8017c38:	6123      	str	r3, [r4, #16]
 8017c3a:	2300      	movs	r3, #0
 8017c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017c40:	e7aa      	b.n	8017b98 <_printf_i+0x14c>
 8017c42:	6923      	ldr	r3, [r4, #16]
 8017c44:	462a      	mov	r2, r5
 8017c46:	4649      	mov	r1, r9
 8017c48:	4640      	mov	r0, r8
 8017c4a:	47d0      	blx	sl
 8017c4c:	3001      	adds	r0, #1
 8017c4e:	d0ad      	beq.n	8017bac <_printf_i+0x160>
 8017c50:	6823      	ldr	r3, [r4, #0]
 8017c52:	079b      	lsls	r3, r3, #30
 8017c54:	d413      	bmi.n	8017c7e <_printf_i+0x232>
 8017c56:	68e0      	ldr	r0, [r4, #12]
 8017c58:	9b03      	ldr	r3, [sp, #12]
 8017c5a:	4298      	cmp	r0, r3
 8017c5c:	bfb8      	it	lt
 8017c5e:	4618      	movlt	r0, r3
 8017c60:	e7a6      	b.n	8017bb0 <_printf_i+0x164>
 8017c62:	2301      	movs	r3, #1
 8017c64:	4632      	mov	r2, r6
 8017c66:	4649      	mov	r1, r9
 8017c68:	4640      	mov	r0, r8
 8017c6a:	47d0      	blx	sl
 8017c6c:	3001      	adds	r0, #1
 8017c6e:	d09d      	beq.n	8017bac <_printf_i+0x160>
 8017c70:	3501      	adds	r5, #1
 8017c72:	68e3      	ldr	r3, [r4, #12]
 8017c74:	9903      	ldr	r1, [sp, #12]
 8017c76:	1a5b      	subs	r3, r3, r1
 8017c78:	42ab      	cmp	r3, r5
 8017c7a:	dcf2      	bgt.n	8017c62 <_printf_i+0x216>
 8017c7c:	e7eb      	b.n	8017c56 <_printf_i+0x20a>
 8017c7e:	2500      	movs	r5, #0
 8017c80:	f104 0619 	add.w	r6, r4, #25
 8017c84:	e7f5      	b.n	8017c72 <_printf_i+0x226>
 8017c86:	bf00      	nop
 8017c88:	0801854d 	.word	0x0801854d
 8017c8c:	0801855e 	.word	0x0801855e

08017c90 <_scanf_chars>:
 8017c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c94:	4615      	mov	r5, r2
 8017c96:	688a      	ldr	r2, [r1, #8]
 8017c98:	4680      	mov	r8, r0
 8017c9a:	460c      	mov	r4, r1
 8017c9c:	b932      	cbnz	r2, 8017cac <_scanf_chars+0x1c>
 8017c9e:	698a      	ldr	r2, [r1, #24]
 8017ca0:	2a00      	cmp	r2, #0
 8017ca2:	bf0c      	ite	eq
 8017ca4:	2201      	moveq	r2, #1
 8017ca6:	f04f 32ff 	movne.w	r2, #4294967295
 8017caa:	608a      	str	r2, [r1, #8]
 8017cac:	6822      	ldr	r2, [r4, #0]
 8017cae:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8017d40 <_scanf_chars+0xb0>
 8017cb2:	06d1      	lsls	r1, r2, #27
 8017cb4:	bf5f      	itttt	pl
 8017cb6:	681a      	ldrpl	r2, [r3, #0]
 8017cb8:	1d11      	addpl	r1, r2, #4
 8017cba:	6019      	strpl	r1, [r3, #0]
 8017cbc:	6816      	ldrpl	r6, [r2, #0]
 8017cbe:	2700      	movs	r7, #0
 8017cc0:	69a0      	ldr	r0, [r4, #24]
 8017cc2:	b188      	cbz	r0, 8017ce8 <_scanf_chars+0x58>
 8017cc4:	2801      	cmp	r0, #1
 8017cc6:	d107      	bne.n	8017cd8 <_scanf_chars+0x48>
 8017cc8:	682a      	ldr	r2, [r5, #0]
 8017cca:	7811      	ldrb	r1, [r2, #0]
 8017ccc:	6962      	ldr	r2, [r4, #20]
 8017cce:	5c52      	ldrb	r2, [r2, r1]
 8017cd0:	b952      	cbnz	r2, 8017ce8 <_scanf_chars+0x58>
 8017cd2:	2f00      	cmp	r7, #0
 8017cd4:	d031      	beq.n	8017d3a <_scanf_chars+0xaa>
 8017cd6:	e022      	b.n	8017d1e <_scanf_chars+0x8e>
 8017cd8:	2802      	cmp	r0, #2
 8017cda:	d120      	bne.n	8017d1e <_scanf_chars+0x8e>
 8017cdc:	682b      	ldr	r3, [r5, #0]
 8017cde:	781b      	ldrb	r3, [r3, #0]
 8017ce0:	f819 3003 	ldrb.w	r3, [r9, r3]
 8017ce4:	071b      	lsls	r3, r3, #28
 8017ce6:	d41a      	bmi.n	8017d1e <_scanf_chars+0x8e>
 8017ce8:	6823      	ldr	r3, [r4, #0]
 8017cea:	06da      	lsls	r2, r3, #27
 8017cec:	bf5e      	ittt	pl
 8017cee:	682b      	ldrpl	r3, [r5, #0]
 8017cf0:	781b      	ldrbpl	r3, [r3, #0]
 8017cf2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8017cf6:	682a      	ldr	r2, [r5, #0]
 8017cf8:	686b      	ldr	r3, [r5, #4]
 8017cfa:	3201      	adds	r2, #1
 8017cfc:	602a      	str	r2, [r5, #0]
 8017cfe:	68a2      	ldr	r2, [r4, #8]
 8017d00:	3b01      	subs	r3, #1
 8017d02:	3a01      	subs	r2, #1
 8017d04:	606b      	str	r3, [r5, #4]
 8017d06:	3701      	adds	r7, #1
 8017d08:	60a2      	str	r2, [r4, #8]
 8017d0a:	b142      	cbz	r2, 8017d1e <_scanf_chars+0x8e>
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	dcd7      	bgt.n	8017cc0 <_scanf_chars+0x30>
 8017d10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017d14:	4629      	mov	r1, r5
 8017d16:	4640      	mov	r0, r8
 8017d18:	4798      	blx	r3
 8017d1a:	2800      	cmp	r0, #0
 8017d1c:	d0d0      	beq.n	8017cc0 <_scanf_chars+0x30>
 8017d1e:	6823      	ldr	r3, [r4, #0]
 8017d20:	f013 0310 	ands.w	r3, r3, #16
 8017d24:	d105      	bne.n	8017d32 <_scanf_chars+0xa2>
 8017d26:	68e2      	ldr	r2, [r4, #12]
 8017d28:	3201      	adds	r2, #1
 8017d2a:	60e2      	str	r2, [r4, #12]
 8017d2c:	69a2      	ldr	r2, [r4, #24]
 8017d2e:	b102      	cbz	r2, 8017d32 <_scanf_chars+0xa2>
 8017d30:	7033      	strb	r3, [r6, #0]
 8017d32:	6923      	ldr	r3, [r4, #16]
 8017d34:	443b      	add	r3, r7
 8017d36:	6123      	str	r3, [r4, #16]
 8017d38:	2000      	movs	r0, #0
 8017d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d3e:	bf00      	nop
 8017d40:	0801858b 	.word	0x0801858b

08017d44 <_scanf_i>:
 8017d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d48:	4698      	mov	r8, r3
 8017d4a:	4b74      	ldr	r3, [pc, #464]	; (8017f1c <_scanf_i+0x1d8>)
 8017d4c:	460c      	mov	r4, r1
 8017d4e:	4682      	mov	sl, r0
 8017d50:	4616      	mov	r6, r2
 8017d52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017d56:	b087      	sub	sp, #28
 8017d58:	ab03      	add	r3, sp, #12
 8017d5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017d5e:	4b70      	ldr	r3, [pc, #448]	; (8017f20 <_scanf_i+0x1dc>)
 8017d60:	69a1      	ldr	r1, [r4, #24]
 8017d62:	4a70      	ldr	r2, [pc, #448]	; (8017f24 <_scanf_i+0x1e0>)
 8017d64:	2903      	cmp	r1, #3
 8017d66:	bf18      	it	ne
 8017d68:	461a      	movne	r2, r3
 8017d6a:	68a3      	ldr	r3, [r4, #8]
 8017d6c:	9201      	str	r2, [sp, #4]
 8017d6e:	1e5a      	subs	r2, r3, #1
 8017d70:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017d74:	bf88      	it	hi
 8017d76:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017d7a:	4627      	mov	r7, r4
 8017d7c:	bf82      	ittt	hi
 8017d7e:	eb03 0905 	addhi.w	r9, r3, r5
 8017d82:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017d86:	60a3      	strhi	r3, [r4, #8]
 8017d88:	f857 3b1c 	ldr.w	r3, [r7], #28
 8017d8c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017d90:	bf98      	it	ls
 8017d92:	f04f 0900 	movls.w	r9, #0
 8017d96:	6023      	str	r3, [r4, #0]
 8017d98:	463d      	mov	r5, r7
 8017d9a:	f04f 0b00 	mov.w	fp, #0
 8017d9e:	6831      	ldr	r1, [r6, #0]
 8017da0:	ab03      	add	r3, sp, #12
 8017da2:	7809      	ldrb	r1, [r1, #0]
 8017da4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8017da8:	2202      	movs	r2, #2
 8017daa:	f7e8 fac9 	bl	8000340 <memchr>
 8017dae:	b328      	cbz	r0, 8017dfc <_scanf_i+0xb8>
 8017db0:	f1bb 0f01 	cmp.w	fp, #1
 8017db4:	d159      	bne.n	8017e6a <_scanf_i+0x126>
 8017db6:	6862      	ldr	r2, [r4, #4]
 8017db8:	b92a      	cbnz	r2, 8017dc6 <_scanf_i+0x82>
 8017dba:	6822      	ldr	r2, [r4, #0]
 8017dbc:	2308      	movs	r3, #8
 8017dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017dc2:	6063      	str	r3, [r4, #4]
 8017dc4:	6022      	str	r2, [r4, #0]
 8017dc6:	6822      	ldr	r2, [r4, #0]
 8017dc8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017dcc:	6022      	str	r2, [r4, #0]
 8017dce:	68a2      	ldr	r2, [r4, #8]
 8017dd0:	1e51      	subs	r1, r2, #1
 8017dd2:	60a1      	str	r1, [r4, #8]
 8017dd4:	b192      	cbz	r2, 8017dfc <_scanf_i+0xb8>
 8017dd6:	6832      	ldr	r2, [r6, #0]
 8017dd8:	1c51      	adds	r1, r2, #1
 8017dda:	6031      	str	r1, [r6, #0]
 8017ddc:	7812      	ldrb	r2, [r2, #0]
 8017dde:	f805 2b01 	strb.w	r2, [r5], #1
 8017de2:	6872      	ldr	r2, [r6, #4]
 8017de4:	3a01      	subs	r2, #1
 8017de6:	2a00      	cmp	r2, #0
 8017de8:	6072      	str	r2, [r6, #4]
 8017dea:	dc07      	bgt.n	8017dfc <_scanf_i+0xb8>
 8017dec:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8017df0:	4631      	mov	r1, r6
 8017df2:	4650      	mov	r0, sl
 8017df4:	4790      	blx	r2
 8017df6:	2800      	cmp	r0, #0
 8017df8:	f040 8085 	bne.w	8017f06 <_scanf_i+0x1c2>
 8017dfc:	f10b 0b01 	add.w	fp, fp, #1
 8017e00:	f1bb 0f03 	cmp.w	fp, #3
 8017e04:	d1cb      	bne.n	8017d9e <_scanf_i+0x5a>
 8017e06:	6863      	ldr	r3, [r4, #4]
 8017e08:	b90b      	cbnz	r3, 8017e0e <_scanf_i+0xca>
 8017e0a:	230a      	movs	r3, #10
 8017e0c:	6063      	str	r3, [r4, #4]
 8017e0e:	6863      	ldr	r3, [r4, #4]
 8017e10:	4945      	ldr	r1, [pc, #276]	; (8017f28 <_scanf_i+0x1e4>)
 8017e12:	6960      	ldr	r0, [r4, #20]
 8017e14:	1ac9      	subs	r1, r1, r3
 8017e16:	f000 f889 	bl	8017f2c <__sccl>
 8017e1a:	f04f 0b00 	mov.w	fp, #0
 8017e1e:	68a3      	ldr	r3, [r4, #8]
 8017e20:	6822      	ldr	r2, [r4, #0]
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	d03d      	beq.n	8017ea2 <_scanf_i+0x15e>
 8017e26:	6831      	ldr	r1, [r6, #0]
 8017e28:	6960      	ldr	r0, [r4, #20]
 8017e2a:	f891 c000 	ldrb.w	ip, [r1]
 8017e2e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017e32:	2800      	cmp	r0, #0
 8017e34:	d035      	beq.n	8017ea2 <_scanf_i+0x15e>
 8017e36:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017e3a:	d124      	bne.n	8017e86 <_scanf_i+0x142>
 8017e3c:	0510      	lsls	r0, r2, #20
 8017e3e:	d522      	bpl.n	8017e86 <_scanf_i+0x142>
 8017e40:	f10b 0b01 	add.w	fp, fp, #1
 8017e44:	f1b9 0f00 	cmp.w	r9, #0
 8017e48:	d003      	beq.n	8017e52 <_scanf_i+0x10e>
 8017e4a:	3301      	adds	r3, #1
 8017e4c:	f109 39ff 	add.w	r9, r9, #4294967295
 8017e50:	60a3      	str	r3, [r4, #8]
 8017e52:	6873      	ldr	r3, [r6, #4]
 8017e54:	3b01      	subs	r3, #1
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	6073      	str	r3, [r6, #4]
 8017e5a:	dd1b      	ble.n	8017e94 <_scanf_i+0x150>
 8017e5c:	6833      	ldr	r3, [r6, #0]
 8017e5e:	3301      	adds	r3, #1
 8017e60:	6033      	str	r3, [r6, #0]
 8017e62:	68a3      	ldr	r3, [r4, #8]
 8017e64:	3b01      	subs	r3, #1
 8017e66:	60a3      	str	r3, [r4, #8]
 8017e68:	e7d9      	b.n	8017e1e <_scanf_i+0xda>
 8017e6a:	f1bb 0f02 	cmp.w	fp, #2
 8017e6e:	d1ae      	bne.n	8017dce <_scanf_i+0x8a>
 8017e70:	6822      	ldr	r2, [r4, #0]
 8017e72:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017e76:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017e7a:	d1bf      	bne.n	8017dfc <_scanf_i+0xb8>
 8017e7c:	2310      	movs	r3, #16
 8017e7e:	6063      	str	r3, [r4, #4]
 8017e80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017e84:	e7a2      	b.n	8017dcc <_scanf_i+0x88>
 8017e86:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017e8a:	6022      	str	r2, [r4, #0]
 8017e8c:	780b      	ldrb	r3, [r1, #0]
 8017e8e:	f805 3b01 	strb.w	r3, [r5], #1
 8017e92:	e7de      	b.n	8017e52 <_scanf_i+0x10e>
 8017e94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017e98:	4631      	mov	r1, r6
 8017e9a:	4650      	mov	r0, sl
 8017e9c:	4798      	blx	r3
 8017e9e:	2800      	cmp	r0, #0
 8017ea0:	d0df      	beq.n	8017e62 <_scanf_i+0x11e>
 8017ea2:	6823      	ldr	r3, [r4, #0]
 8017ea4:	05d9      	lsls	r1, r3, #23
 8017ea6:	d50d      	bpl.n	8017ec4 <_scanf_i+0x180>
 8017ea8:	42bd      	cmp	r5, r7
 8017eaa:	d909      	bls.n	8017ec0 <_scanf_i+0x17c>
 8017eac:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017eb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017eb4:	4632      	mov	r2, r6
 8017eb6:	4650      	mov	r0, sl
 8017eb8:	4798      	blx	r3
 8017eba:	f105 39ff 	add.w	r9, r5, #4294967295
 8017ebe:	464d      	mov	r5, r9
 8017ec0:	42bd      	cmp	r5, r7
 8017ec2:	d028      	beq.n	8017f16 <_scanf_i+0x1d2>
 8017ec4:	6822      	ldr	r2, [r4, #0]
 8017ec6:	f012 0210 	ands.w	r2, r2, #16
 8017eca:	d113      	bne.n	8017ef4 <_scanf_i+0x1b0>
 8017ecc:	702a      	strb	r2, [r5, #0]
 8017ece:	6863      	ldr	r3, [r4, #4]
 8017ed0:	9e01      	ldr	r6, [sp, #4]
 8017ed2:	4639      	mov	r1, r7
 8017ed4:	4650      	mov	r0, sl
 8017ed6:	47b0      	blx	r6
 8017ed8:	f8d8 3000 	ldr.w	r3, [r8]
 8017edc:	6821      	ldr	r1, [r4, #0]
 8017ede:	1d1a      	adds	r2, r3, #4
 8017ee0:	f8c8 2000 	str.w	r2, [r8]
 8017ee4:	f011 0f20 	tst.w	r1, #32
 8017ee8:	681b      	ldr	r3, [r3, #0]
 8017eea:	d00f      	beq.n	8017f0c <_scanf_i+0x1c8>
 8017eec:	6018      	str	r0, [r3, #0]
 8017eee:	68e3      	ldr	r3, [r4, #12]
 8017ef0:	3301      	adds	r3, #1
 8017ef2:	60e3      	str	r3, [r4, #12]
 8017ef4:	6923      	ldr	r3, [r4, #16]
 8017ef6:	1bed      	subs	r5, r5, r7
 8017ef8:	445d      	add	r5, fp
 8017efa:	442b      	add	r3, r5
 8017efc:	6123      	str	r3, [r4, #16]
 8017efe:	2000      	movs	r0, #0
 8017f00:	b007      	add	sp, #28
 8017f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f06:	f04f 0b00 	mov.w	fp, #0
 8017f0a:	e7ca      	b.n	8017ea2 <_scanf_i+0x15e>
 8017f0c:	07ca      	lsls	r2, r1, #31
 8017f0e:	bf4c      	ite	mi
 8017f10:	8018      	strhmi	r0, [r3, #0]
 8017f12:	6018      	strpl	r0, [r3, #0]
 8017f14:	e7eb      	b.n	8017eee <_scanf_i+0x1aa>
 8017f16:	2001      	movs	r0, #1
 8017f18:	e7f2      	b.n	8017f00 <_scanf_i+0x1bc>
 8017f1a:	bf00      	nop
 8017f1c:	0801846c 	.word	0x0801846c
 8017f20:	080182b5 	.word	0x080182b5
 8017f24:	080181cd 	.word	0x080181cd
 8017f28:	0801857f 	.word	0x0801857f

08017f2c <__sccl>:
 8017f2c:	b570      	push	{r4, r5, r6, lr}
 8017f2e:	780b      	ldrb	r3, [r1, #0]
 8017f30:	4604      	mov	r4, r0
 8017f32:	2b5e      	cmp	r3, #94	; 0x5e
 8017f34:	bf0b      	itete	eq
 8017f36:	784b      	ldrbeq	r3, [r1, #1]
 8017f38:	1c4a      	addne	r2, r1, #1
 8017f3a:	1c8a      	addeq	r2, r1, #2
 8017f3c:	2100      	movne	r1, #0
 8017f3e:	bf08      	it	eq
 8017f40:	2101      	moveq	r1, #1
 8017f42:	3801      	subs	r0, #1
 8017f44:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8017f48:	f800 1f01 	strb.w	r1, [r0, #1]!
 8017f4c:	42a8      	cmp	r0, r5
 8017f4e:	d1fb      	bne.n	8017f48 <__sccl+0x1c>
 8017f50:	b90b      	cbnz	r3, 8017f56 <__sccl+0x2a>
 8017f52:	1e50      	subs	r0, r2, #1
 8017f54:	bd70      	pop	{r4, r5, r6, pc}
 8017f56:	f081 0101 	eor.w	r1, r1, #1
 8017f5a:	54e1      	strb	r1, [r4, r3]
 8017f5c:	4610      	mov	r0, r2
 8017f5e:	4602      	mov	r2, r0
 8017f60:	f812 5b01 	ldrb.w	r5, [r2], #1
 8017f64:	2d2d      	cmp	r5, #45	; 0x2d
 8017f66:	d005      	beq.n	8017f74 <__sccl+0x48>
 8017f68:	2d5d      	cmp	r5, #93	; 0x5d
 8017f6a:	d016      	beq.n	8017f9a <__sccl+0x6e>
 8017f6c:	2d00      	cmp	r5, #0
 8017f6e:	d0f1      	beq.n	8017f54 <__sccl+0x28>
 8017f70:	462b      	mov	r3, r5
 8017f72:	e7f2      	b.n	8017f5a <__sccl+0x2e>
 8017f74:	7846      	ldrb	r6, [r0, #1]
 8017f76:	2e5d      	cmp	r6, #93	; 0x5d
 8017f78:	d0fa      	beq.n	8017f70 <__sccl+0x44>
 8017f7a:	42b3      	cmp	r3, r6
 8017f7c:	dcf8      	bgt.n	8017f70 <__sccl+0x44>
 8017f7e:	3002      	adds	r0, #2
 8017f80:	461a      	mov	r2, r3
 8017f82:	3201      	adds	r2, #1
 8017f84:	4296      	cmp	r6, r2
 8017f86:	54a1      	strb	r1, [r4, r2]
 8017f88:	dcfb      	bgt.n	8017f82 <__sccl+0x56>
 8017f8a:	1af2      	subs	r2, r6, r3
 8017f8c:	3a01      	subs	r2, #1
 8017f8e:	1c5d      	adds	r5, r3, #1
 8017f90:	42b3      	cmp	r3, r6
 8017f92:	bfa8      	it	ge
 8017f94:	2200      	movge	r2, #0
 8017f96:	18ab      	adds	r3, r5, r2
 8017f98:	e7e1      	b.n	8017f5e <__sccl+0x32>
 8017f9a:	4610      	mov	r0, r2
 8017f9c:	e7da      	b.n	8017f54 <__sccl+0x28>

08017f9e <__submore>:
 8017f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fa2:	460c      	mov	r4, r1
 8017fa4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017fa6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017faa:	4299      	cmp	r1, r3
 8017fac:	d11d      	bne.n	8017fea <__submore+0x4c>
 8017fae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017fb2:	f7ff f927 	bl	8017204 <_malloc_r>
 8017fb6:	b918      	cbnz	r0, 8017fc0 <__submore+0x22>
 8017fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8017fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017fc4:	63a3      	str	r3, [r4, #56]	; 0x38
 8017fc6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017fca:	6360      	str	r0, [r4, #52]	; 0x34
 8017fcc:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017fd0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017fd4:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017fd8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017fdc:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017fe0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017fe4:	6020      	str	r0, [r4, #0]
 8017fe6:	2000      	movs	r0, #0
 8017fe8:	e7e8      	b.n	8017fbc <__submore+0x1e>
 8017fea:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017fec:	0077      	lsls	r7, r6, #1
 8017fee:	463a      	mov	r2, r7
 8017ff0:	f000 f83a 	bl	8018068 <_realloc_r>
 8017ff4:	4605      	mov	r5, r0
 8017ff6:	2800      	cmp	r0, #0
 8017ff8:	d0de      	beq.n	8017fb8 <__submore+0x1a>
 8017ffa:	eb00 0806 	add.w	r8, r0, r6
 8017ffe:	4601      	mov	r1, r0
 8018000:	4632      	mov	r2, r6
 8018002:	4640      	mov	r0, r8
 8018004:	f7ff f884 	bl	8017110 <memcpy>
 8018008:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801800c:	f8c4 8000 	str.w	r8, [r4]
 8018010:	e7e9      	b.n	8017fe6 <__submore+0x48>

08018012 <memmove>:
 8018012:	4288      	cmp	r0, r1
 8018014:	b510      	push	{r4, lr}
 8018016:	eb01 0402 	add.w	r4, r1, r2
 801801a:	d902      	bls.n	8018022 <memmove+0x10>
 801801c:	4284      	cmp	r4, r0
 801801e:	4623      	mov	r3, r4
 8018020:	d807      	bhi.n	8018032 <memmove+0x20>
 8018022:	1e43      	subs	r3, r0, #1
 8018024:	42a1      	cmp	r1, r4
 8018026:	d008      	beq.n	801803a <memmove+0x28>
 8018028:	f811 2b01 	ldrb.w	r2, [r1], #1
 801802c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018030:	e7f8      	b.n	8018024 <memmove+0x12>
 8018032:	4402      	add	r2, r0
 8018034:	4601      	mov	r1, r0
 8018036:	428a      	cmp	r2, r1
 8018038:	d100      	bne.n	801803c <memmove+0x2a>
 801803a:	bd10      	pop	{r4, pc}
 801803c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018040:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018044:	e7f7      	b.n	8018036 <memmove+0x24>
	...

08018048 <_sbrk_r>:
 8018048:	b538      	push	{r3, r4, r5, lr}
 801804a:	4d06      	ldr	r5, [pc, #24]	; (8018064 <_sbrk_r+0x1c>)
 801804c:	2300      	movs	r3, #0
 801804e:	4604      	mov	r4, r0
 8018050:	4608      	mov	r0, r1
 8018052:	602b      	str	r3, [r5, #0]
 8018054:	f7eb fb6e 	bl	8003734 <_sbrk>
 8018058:	1c43      	adds	r3, r0, #1
 801805a:	d102      	bne.n	8018062 <_sbrk_r+0x1a>
 801805c:	682b      	ldr	r3, [r5, #0]
 801805e:	b103      	cbz	r3, 8018062 <_sbrk_r+0x1a>
 8018060:	6023      	str	r3, [r4, #0]
 8018062:	bd38      	pop	{r3, r4, r5, pc}
 8018064:	24003334 	.word	0x24003334

08018068 <_realloc_r>:
 8018068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801806c:	4680      	mov	r8, r0
 801806e:	4614      	mov	r4, r2
 8018070:	460e      	mov	r6, r1
 8018072:	b921      	cbnz	r1, 801807e <_realloc_r+0x16>
 8018074:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018078:	4611      	mov	r1, r2
 801807a:	f7ff b8c3 	b.w	8017204 <_malloc_r>
 801807e:	b92a      	cbnz	r2, 801808c <_realloc_r+0x24>
 8018080:	f7ff f854 	bl	801712c <_free_r>
 8018084:	4625      	mov	r5, r4
 8018086:	4628      	mov	r0, r5
 8018088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801808c:	f000 f914 	bl	80182b8 <_malloc_usable_size_r>
 8018090:	4284      	cmp	r4, r0
 8018092:	4607      	mov	r7, r0
 8018094:	d802      	bhi.n	801809c <_realloc_r+0x34>
 8018096:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801809a:	d812      	bhi.n	80180c2 <_realloc_r+0x5a>
 801809c:	4621      	mov	r1, r4
 801809e:	4640      	mov	r0, r8
 80180a0:	f7ff f8b0 	bl	8017204 <_malloc_r>
 80180a4:	4605      	mov	r5, r0
 80180a6:	2800      	cmp	r0, #0
 80180a8:	d0ed      	beq.n	8018086 <_realloc_r+0x1e>
 80180aa:	42bc      	cmp	r4, r7
 80180ac:	4622      	mov	r2, r4
 80180ae:	4631      	mov	r1, r6
 80180b0:	bf28      	it	cs
 80180b2:	463a      	movcs	r2, r7
 80180b4:	f7ff f82c 	bl	8017110 <memcpy>
 80180b8:	4631      	mov	r1, r6
 80180ba:	4640      	mov	r0, r8
 80180bc:	f7ff f836 	bl	801712c <_free_r>
 80180c0:	e7e1      	b.n	8018086 <_realloc_r+0x1e>
 80180c2:	4635      	mov	r5, r6
 80180c4:	e7df      	b.n	8018086 <_realloc_r+0x1e>
	...

080180c8 <_strtol_l.constprop.0>:
 80180c8:	2b01      	cmp	r3, #1
 80180ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80180ce:	d001      	beq.n	80180d4 <_strtol_l.constprop.0+0xc>
 80180d0:	2b24      	cmp	r3, #36	; 0x24
 80180d2:	d906      	bls.n	80180e2 <_strtol_l.constprop.0+0x1a>
 80180d4:	f7fe ffe8 	bl	80170a8 <__errno>
 80180d8:	2316      	movs	r3, #22
 80180da:	6003      	str	r3, [r0, #0]
 80180dc:	2000      	movs	r0, #0
 80180de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80181c8 <_strtol_l.constprop.0+0x100>
 80180e6:	460d      	mov	r5, r1
 80180e8:	462e      	mov	r6, r5
 80180ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80180ee:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80180f2:	f017 0708 	ands.w	r7, r7, #8
 80180f6:	d1f7      	bne.n	80180e8 <_strtol_l.constprop.0+0x20>
 80180f8:	2c2d      	cmp	r4, #45	; 0x2d
 80180fa:	d132      	bne.n	8018162 <_strtol_l.constprop.0+0x9a>
 80180fc:	782c      	ldrb	r4, [r5, #0]
 80180fe:	2701      	movs	r7, #1
 8018100:	1cb5      	adds	r5, r6, #2
 8018102:	2b00      	cmp	r3, #0
 8018104:	d05b      	beq.n	80181be <_strtol_l.constprop.0+0xf6>
 8018106:	2b10      	cmp	r3, #16
 8018108:	d109      	bne.n	801811e <_strtol_l.constprop.0+0x56>
 801810a:	2c30      	cmp	r4, #48	; 0x30
 801810c:	d107      	bne.n	801811e <_strtol_l.constprop.0+0x56>
 801810e:	782c      	ldrb	r4, [r5, #0]
 8018110:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8018114:	2c58      	cmp	r4, #88	; 0x58
 8018116:	d14d      	bne.n	80181b4 <_strtol_l.constprop.0+0xec>
 8018118:	786c      	ldrb	r4, [r5, #1]
 801811a:	2310      	movs	r3, #16
 801811c:	3502      	adds	r5, #2
 801811e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8018122:	f108 38ff 	add.w	r8, r8, #4294967295
 8018126:	f04f 0e00 	mov.w	lr, #0
 801812a:	fbb8 f9f3 	udiv	r9, r8, r3
 801812e:	4676      	mov	r6, lr
 8018130:	fb03 8a19 	mls	sl, r3, r9, r8
 8018134:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8018138:	f1bc 0f09 	cmp.w	ip, #9
 801813c:	d816      	bhi.n	801816c <_strtol_l.constprop.0+0xa4>
 801813e:	4664      	mov	r4, ip
 8018140:	42a3      	cmp	r3, r4
 8018142:	dd24      	ble.n	801818e <_strtol_l.constprop.0+0xc6>
 8018144:	f1be 3fff 	cmp.w	lr, #4294967295
 8018148:	d008      	beq.n	801815c <_strtol_l.constprop.0+0x94>
 801814a:	45b1      	cmp	r9, r6
 801814c:	d31c      	bcc.n	8018188 <_strtol_l.constprop.0+0xc0>
 801814e:	d101      	bne.n	8018154 <_strtol_l.constprop.0+0x8c>
 8018150:	45a2      	cmp	sl, r4
 8018152:	db19      	blt.n	8018188 <_strtol_l.constprop.0+0xc0>
 8018154:	fb06 4603 	mla	r6, r6, r3, r4
 8018158:	f04f 0e01 	mov.w	lr, #1
 801815c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018160:	e7e8      	b.n	8018134 <_strtol_l.constprop.0+0x6c>
 8018162:	2c2b      	cmp	r4, #43	; 0x2b
 8018164:	bf04      	itt	eq
 8018166:	782c      	ldrbeq	r4, [r5, #0]
 8018168:	1cb5      	addeq	r5, r6, #2
 801816a:	e7ca      	b.n	8018102 <_strtol_l.constprop.0+0x3a>
 801816c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8018170:	f1bc 0f19 	cmp.w	ip, #25
 8018174:	d801      	bhi.n	801817a <_strtol_l.constprop.0+0xb2>
 8018176:	3c37      	subs	r4, #55	; 0x37
 8018178:	e7e2      	b.n	8018140 <_strtol_l.constprop.0+0x78>
 801817a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801817e:	f1bc 0f19 	cmp.w	ip, #25
 8018182:	d804      	bhi.n	801818e <_strtol_l.constprop.0+0xc6>
 8018184:	3c57      	subs	r4, #87	; 0x57
 8018186:	e7db      	b.n	8018140 <_strtol_l.constprop.0+0x78>
 8018188:	f04f 3eff 	mov.w	lr, #4294967295
 801818c:	e7e6      	b.n	801815c <_strtol_l.constprop.0+0x94>
 801818e:	f1be 3fff 	cmp.w	lr, #4294967295
 8018192:	d105      	bne.n	80181a0 <_strtol_l.constprop.0+0xd8>
 8018194:	2322      	movs	r3, #34	; 0x22
 8018196:	6003      	str	r3, [r0, #0]
 8018198:	4646      	mov	r6, r8
 801819a:	b942      	cbnz	r2, 80181ae <_strtol_l.constprop.0+0xe6>
 801819c:	4630      	mov	r0, r6
 801819e:	e79e      	b.n	80180de <_strtol_l.constprop.0+0x16>
 80181a0:	b107      	cbz	r7, 80181a4 <_strtol_l.constprop.0+0xdc>
 80181a2:	4276      	negs	r6, r6
 80181a4:	2a00      	cmp	r2, #0
 80181a6:	d0f9      	beq.n	801819c <_strtol_l.constprop.0+0xd4>
 80181a8:	f1be 0f00 	cmp.w	lr, #0
 80181ac:	d000      	beq.n	80181b0 <_strtol_l.constprop.0+0xe8>
 80181ae:	1e69      	subs	r1, r5, #1
 80181b0:	6011      	str	r1, [r2, #0]
 80181b2:	e7f3      	b.n	801819c <_strtol_l.constprop.0+0xd4>
 80181b4:	2430      	movs	r4, #48	; 0x30
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d1b1      	bne.n	801811e <_strtol_l.constprop.0+0x56>
 80181ba:	2308      	movs	r3, #8
 80181bc:	e7af      	b.n	801811e <_strtol_l.constprop.0+0x56>
 80181be:	2c30      	cmp	r4, #48	; 0x30
 80181c0:	d0a5      	beq.n	801810e <_strtol_l.constprop.0+0x46>
 80181c2:	230a      	movs	r3, #10
 80181c4:	e7ab      	b.n	801811e <_strtol_l.constprop.0+0x56>
 80181c6:	bf00      	nop
 80181c8:	0801858b 	.word	0x0801858b

080181cc <_strtol_r>:
 80181cc:	f7ff bf7c 	b.w	80180c8 <_strtol_l.constprop.0>

080181d0 <_strtoul_l.constprop.0>:
 80181d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80181d4:	4f36      	ldr	r7, [pc, #216]	; (80182b0 <_strtoul_l.constprop.0+0xe0>)
 80181d6:	4686      	mov	lr, r0
 80181d8:	460d      	mov	r5, r1
 80181da:	4628      	mov	r0, r5
 80181dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80181e0:	5d3e      	ldrb	r6, [r7, r4]
 80181e2:	f016 0608 	ands.w	r6, r6, #8
 80181e6:	d1f8      	bne.n	80181da <_strtoul_l.constprop.0+0xa>
 80181e8:	2c2d      	cmp	r4, #45	; 0x2d
 80181ea:	d130      	bne.n	801824e <_strtoul_l.constprop.0+0x7e>
 80181ec:	782c      	ldrb	r4, [r5, #0]
 80181ee:	2601      	movs	r6, #1
 80181f0:	1c85      	adds	r5, r0, #2
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d057      	beq.n	80182a6 <_strtoul_l.constprop.0+0xd6>
 80181f6:	2b10      	cmp	r3, #16
 80181f8:	d109      	bne.n	801820e <_strtoul_l.constprop.0+0x3e>
 80181fa:	2c30      	cmp	r4, #48	; 0x30
 80181fc:	d107      	bne.n	801820e <_strtoul_l.constprop.0+0x3e>
 80181fe:	7828      	ldrb	r0, [r5, #0]
 8018200:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8018204:	2858      	cmp	r0, #88	; 0x58
 8018206:	d149      	bne.n	801829c <_strtoul_l.constprop.0+0xcc>
 8018208:	786c      	ldrb	r4, [r5, #1]
 801820a:	2310      	movs	r3, #16
 801820c:	3502      	adds	r5, #2
 801820e:	f04f 38ff 	mov.w	r8, #4294967295
 8018212:	2700      	movs	r7, #0
 8018214:	fbb8 f8f3 	udiv	r8, r8, r3
 8018218:	fb03 f908 	mul.w	r9, r3, r8
 801821c:	ea6f 0909 	mvn.w	r9, r9
 8018220:	4638      	mov	r0, r7
 8018222:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8018226:	f1bc 0f09 	cmp.w	ip, #9
 801822a:	d815      	bhi.n	8018258 <_strtoul_l.constprop.0+0x88>
 801822c:	4664      	mov	r4, ip
 801822e:	42a3      	cmp	r3, r4
 8018230:	dd23      	ble.n	801827a <_strtoul_l.constprop.0+0xaa>
 8018232:	f1b7 3fff 	cmp.w	r7, #4294967295
 8018236:	d007      	beq.n	8018248 <_strtoul_l.constprop.0+0x78>
 8018238:	4580      	cmp	r8, r0
 801823a:	d31b      	bcc.n	8018274 <_strtoul_l.constprop.0+0xa4>
 801823c:	d101      	bne.n	8018242 <_strtoul_l.constprop.0+0x72>
 801823e:	45a1      	cmp	r9, r4
 8018240:	db18      	blt.n	8018274 <_strtoul_l.constprop.0+0xa4>
 8018242:	fb00 4003 	mla	r0, r0, r3, r4
 8018246:	2701      	movs	r7, #1
 8018248:	f815 4b01 	ldrb.w	r4, [r5], #1
 801824c:	e7e9      	b.n	8018222 <_strtoul_l.constprop.0+0x52>
 801824e:	2c2b      	cmp	r4, #43	; 0x2b
 8018250:	bf04      	itt	eq
 8018252:	782c      	ldrbeq	r4, [r5, #0]
 8018254:	1c85      	addeq	r5, r0, #2
 8018256:	e7cc      	b.n	80181f2 <_strtoul_l.constprop.0+0x22>
 8018258:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801825c:	f1bc 0f19 	cmp.w	ip, #25
 8018260:	d801      	bhi.n	8018266 <_strtoul_l.constprop.0+0x96>
 8018262:	3c37      	subs	r4, #55	; 0x37
 8018264:	e7e3      	b.n	801822e <_strtoul_l.constprop.0+0x5e>
 8018266:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801826a:	f1bc 0f19 	cmp.w	ip, #25
 801826e:	d804      	bhi.n	801827a <_strtoul_l.constprop.0+0xaa>
 8018270:	3c57      	subs	r4, #87	; 0x57
 8018272:	e7dc      	b.n	801822e <_strtoul_l.constprop.0+0x5e>
 8018274:	f04f 37ff 	mov.w	r7, #4294967295
 8018278:	e7e6      	b.n	8018248 <_strtoul_l.constprop.0+0x78>
 801827a:	1c7b      	adds	r3, r7, #1
 801827c:	d106      	bne.n	801828c <_strtoul_l.constprop.0+0xbc>
 801827e:	2322      	movs	r3, #34	; 0x22
 8018280:	f8ce 3000 	str.w	r3, [lr]
 8018284:	4638      	mov	r0, r7
 8018286:	b932      	cbnz	r2, 8018296 <_strtoul_l.constprop.0+0xc6>
 8018288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801828c:	b106      	cbz	r6, 8018290 <_strtoul_l.constprop.0+0xc0>
 801828e:	4240      	negs	r0, r0
 8018290:	2a00      	cmp	r2, #0
 8018292:	d0f9      	beq.n	8018288 <_strtoul_l.constprop.0+0xb8>
 8018294:	b107      	cbz	r7, 8018298 <_strtoul_l.constprop.0+0xc8>
 8018296:	1e69      	subs	r1, r5, #1
 8018298:	6011      	str	r1, [r2, #0]
 801829a:	e7f5      	b.n	8018288 <_strtoul_l.constprop.0+0xb8>
 801829c:	2430      	movs	r4, #48	; 0x30
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d1b5      	bne.n	801820e <_strtoul_l.constprop.0+0x3e>
 80182a2:	2308      	movs	r3, #8
 80182a4:	e7b3      	b.n	801820e <_strtoul_l.constprop.0+0x3e>
 80182a6:	2c30      	cmp	r4, #48	; 0x30
 80182a8:	d0a9      	beq.n	80181fe <_strtoul_l.constprop.0+0x2e>
 80182aa:	230a      	movs	r3, #10
 80182ac:	e7af      	b.n	801820e <_strtoul_l.constprop.0+0x3e>
 80182ae:	bf00      	nop
 80182b0:	0801858b 	.word	0x0801858b

080182b4 <_strtoul_r>:
 80182b4:	f7ff bf8c 	b.w	80181d0 <_strtoul_l.constprop.0>

080182b8 <_malloc_usable_size_r>:
 80182b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80182bc:	1f18      	subs	r0, r3, #4
 80182be:	2b00      	cmp	r3, #0
 80182c0:	bfbc      	itt	lt
 80182c2:	580b      	ldrlt	r3, [r1, r0]
 80182c4:	18c0      	addlt	r0, r0, r3
 80182c6:	4770      	bx	lr

080182c8 <_init>:
 80182c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182ca:	bf00      	nop
 80182cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80182ce:	bc08      	pop	{r3}
 80182d0:	469e      	mov	lr, r3
 80182d2:	4770      	bx	lr

080182d4 <_fini>:
 80182d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182d6:	bf00      	nop
 80182d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80182da:	bc08      	pop	{r3}
 80182dc:	469e      	mov	lr, r3
 80182de:	4770      	bx	lr
