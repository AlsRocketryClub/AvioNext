
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019a20  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  08019cf0  08019cf0  00029cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a248  0801a248  0002a248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a250  0801a250  0002a250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801a254  0801a254  0002a254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002c8  24000000  0801a258  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000027d0  240002c8  0801a520  000302c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  24002a98  0801a520  00032a98  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000302c8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000302f6  2**0
                  CONTENTS, READONLY
 11 .debug_info   000354e6  00000000  00000000  00030339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000061a4  00000000  00000000  0006581f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002aa8  00000000  00000000  0006b9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00002113  00000000  00000000  0006e470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000a8d3  00000000  00000000  00070583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003a040  00000000  00000000  0007ae56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017ed49  00000000  00000000  000b4e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000cc90  00000000  00000000  00233be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  00240870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002c8 	.word	0x240002c8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08019cd8 	.word	0x08019cd8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002cc 	.word	0x240002cc
 800030c:	08019cd8 	.word	0x08019cd8

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a8 	b.w	8000aa0 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9e08      	ldr	r6, [sp, #32]
 80007de:	460d      	mov	r5, r1
 80007e0:	4604      	mov	r4, r0
 80007e2:	460f      	mov	r7, r1
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d14a      	bne.n	800087e <__udivmoddi4+0xa6>
 80007e8:	428a      	cmp	r2, r1
 80007ea:	4694      	mov	ip, r2
 80007ec:	d965      	bls.n	80008ba <__udivmoddi4+0xe2>
 80007ee:	fab2 f382 	clz	r3, r2
 80007f2:	b143      	cbz	r3, 8000806 <__udivmoddi4+0x2e>
 80007f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007f8:	f1c3 0220 	rsb	r2, r3, #32
 80007fc:	409f      	lsls	r7, r3
 80007fe:	fa20 f202 	lsr.w	r2, r0, r2
 8000802:	4317      	orrs	r7, r2
 8000804:	409c      	lsls	r4, r3
 8000806:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800080a:	fa1f f58c 	uxth.w	r5, ip
 800080e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000812:	0c22      	lsrs	r2, r4, #16
 8000814:	fb0e 7711 	mls	r7, lr, r1, r7
 8000818:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800081c:	fb01 f005 	mul.w	r0, r1, r5
 8000820:	4290      	cmp	r0, r2
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x62>
 8000824:	eb1c 0202 	adds.w	r2, ip, r2
 8000828:	f101 37ff 	add.w	r7, r1, #4294967295
 800082c:	f080 811c 	bcs.w	8000a68 <__udivmoddi4+0x290>
 8000830:	4290      	cmp	r0, r2
 8000832:	f240 8119 	bls.w	8000a68 <__udivmoddi4+0x290>
 8000836:	3902      	subs	r1, #2
 8000838:	4462      	add	r2, ip
 800083a:	1a12      	subs	r2, r2, r0
 800083c:	b2a4      	uxth	r4, r4
 800083e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000842:	fb0e 2210 	mls	r2, lr, r0, r2
 8000846:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800084a:	fb00 f505 	mul.w	r5, r0, r5
 800084e:	42a5      	cmp	r5, r4
 8000850:	d90a      	bls.n	8000868 <__udivmoddi4+0x90>
 8000852:	eb1c 0404 	adds.w	r4, ip, r4
 8000856:	f100 32ff 	add.w	r2, r0, #4294967295
 800085a:	f080 8107 	bcs.w	8000a6c <__udivmoddi4+0x294>
 800085e:	42a5      	cmp	r5, r4
 8000860:	f240 8104 	bls.w	8000a6c <__udivmoddi4+0x294>
 8000864:	4464      	add	r4, ip
 8000866:	3802      	subs	r0, #2
 8000868:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800086c:	1b64      	subs	r4, r4, r5
 800086e:	2100      	movs	r1, #0
 8000870:	b11e      	cbz	r6, 800087a <__udivmoddi4+0xa2>
 8000872:	40dc      	lsrs	r4, r3
 8000874:	2300      	movs	r3, #0
 8000876:	e9c6 4300 	strd	r4, r3, [r6]
 800087a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800087e:	428b      	cmp	r3, r1
 8000880:	d908      	bls.n	8000894 <__udivmoddi4+0xbc>
 8000882:	2e00      	cmp	r6, #0
 8000884:	f000 80ed 	beq.w	8000a62 <__udivmoddi4+0x28a>
 8000888:	2100      	movs	r1, #0
 800088a:	e9c6 0500 	strd	r0, r5, [r6]
 800088e:	4608      	mov	r0, r1
 8000890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000894:	fab3 f183 	clz	r1, r3
 8000898:	2900      	cmp	r1, #0
 800089a:	d149      	bne.n	8000930 <__udivmoddi4+0x158>
 800089c:	42ab      	cmp	r3, r5
 800089e:	d302      	bcc.n	80008a6 <__udivmoddi4+0xce>
 80008a0:	4282      	cmp	r2, r0
 80008a2:	f200 80f8 	bhi.w	8000a96 <__udivmoddi4+0x2be>
 80008a6:	1a84      	subs	r4, r0, r2
 80008a8:	eb65 0203 	sbc.w	r2, r5, r3
 80008ac:	2001      	movs	r0, #1
 80008ae:	4617      	mov	r7, r2
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d0e2      	beq.n	800087a <__udivmoddi4+0xa2>
 80008b4:	e9c6 4700 	strd	r4, r7, [r6]
 80008b8:	e7df      	b.n	800087a <__udivmoddi4+0xa2>
 80008ba:	b902      	cbnz	r2, 80008be <__udivmoddi4+0xe6>
 80008bc:	deff      	udf	#255	; 0xff
 80008be:	fab2 f382 	clz	r3, r2
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	f040 8090 	bne.w	80009e8 <__udivmoddi4+0x210>
 80008c8:	1a8a      	subs	r2, r1, r2
 80008ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ce:	fa1f fe8c 	uxth.w	lr, ip
 80008d2:	2101      	movs	r1, #1
 80008d4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008d8:	fb07 2015 	mls	r0, r7, r5, r2
 80008dc:	0c22      	lsrs	r2, r4, #16
 80008de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008e2:	fb0e f005 	mul.w	r0, lr, r5
 80008e6:	4290      	cmp	r0, r2
 80008e8:	d908      	bls.n	80008fc <__udivmoddi4+0x124>
 80008ea:	eb1c 0202 	adds.w	r2, ip, r2
 80008ee:	f105 38ff 	add.w	r8, r5, #4294967295
 80008f2:	d202      	bcs.n	80008fa <__udivmoddi4+0x122>
 80008f4:	4290      	cmp	r0, r2
 80008f6:	f200 80cb 	bhi.w	8000a90 <__udivmoddi4+0x2b8>
 80008fa:	4645      	mov	r5, r8
 80008fc:	1a12      	subs	r2, r2, r0
 80008fe:	b2a4      	uxth	r4, r4
 8000900:	fbb2 f0f7 	udiv	r0, r2, r7
 8000904:	fb07 2210 	mls	r2, r7, r0, r2
 8000908:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800090c:	fb0e fe00 	mul.w	lr, lr, r0
 8000910:	45a6      	cmp	lr, r4
 8000912:	d908      	bls.n	8000926 <__udivmoddi4+0x14e>
 8000914:	eb1c 0404 	adds.w	r4, ip, r4
 8000918:	f100 32ff 	add.w	r2, r0, #4294967295
 800091c:	d202      	bcs.n	8000924 <__udivmoddi4+0x14c>
 800091e:	45a6      	cmp	lr, r4
 8000920:	f200 80bb 	bhi.w	8000a9a <__udivmoddi4+0x2c2>
 8000924:	4610      	mov	r0, r2
 8000926:	eba4 040e 	sub.w	r4, r4, lr
 800092a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800092e:	e79f      	b.n	8000870 <__udivmoddi4+0x98>
 8000930:	f1c1 0720 	rsb	r7, r1, #32
 8000934:	408b      	lsls	r3, r1
 8000936:	fa22 fc07 	lsr.w	ip, r2, r7
 800093a:	ea4c 0c03 	orr.w	ip, ip, r3
 800093e:	fa05 f401 	lsl.w	r4, r5, r1
 8000942:	fa20 f307 	lsr.w	r3, r0, r7
 8000946:	40fd      	lsrs	r5, r7
 8000948:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800094c:	4323      	orrs	r3, r4
 800094e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000952:	fa1f fe8c 	uxth.w	lr, ip
 8000956:	fb09 5518 	mls	r5, r9, r8, r5
 800095a:	0c1c      	lsrs	r4, r3, #16
 800095c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000960:	fb08 f50e 	mul.w	r5, r8, lr
 8000964:	42a5      	cmp	r5, r4
 8000966:	fa02 f201 	lsl.w	r2, r2, r1
 800096a:	fa00 f001 	lsl.w	r0, r0, r1
 800096e:	d90b      	bls.n	8000988 <__udivmoddi4+0x1b0>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f108 3aff 	add.w	sl, r8, #4294967295
 8000978:	f080 8088 	bcs.w	8000a8c <__udivmoddi4+0x2b4>
 800097c:	42a5      	cmp	r5, r4
 800097e:	f240 8085 	bls.w	8000a8c <__udivmoddi4+0x2b4>
 8000982:	f1a8 0802 	sub.w	r8, r8, #2
 8000986:	4464      	add	r4, ip
 8000988:	1b64      	subs	r4, r4, r5
 800098a:	b29d      	uxth	r5, r3
 800098c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000990:	fb09 4413 	mls	r4, r9, r3, r4
 8000994:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000998:	fb03 fe0e 	mul.w	lr, r3, lr
 800099c:	45a6      	cmp	lr, r4
 800099e:	d908      	bls.n	80009b2 <__udivmoddi4+0x1da>
 80009a0:	eb1c 0404 	adds.w	r4, ip, r4
 80009a4:	f103 35ff 	add.w	r5, r3, #4294967295
 80009a8:	d26c      	bcs.n	8000a84 <__udivmoddi4+0x2ac>
 80009aa:	45a6      	cmp	lr, r4
 80009ac:	d96a      	bls.n	8000a84 <__udivmoddi4+0x2ac>
 80009ae:	3b02      	subs	r3, #2
 80009b0:	4464      	add	r4, ip
 80009b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009b6:	fba3 9502 	umull	r9, r5, r3, r2
 80009ba:	eba4 040e 	sub.w	r4, r4, lr
 80009be:	42ac      	cmp	r4, r5
 80009c0:	46c8      	mov	r8, r9
 80009c2:	46ae      	mov	lr, r5
 80009c4:	d356      	bcc.n	8000a74 <__udivmoddi4+0x29c>
 80009c6:	d053      	beq.n	8000a70 <__udivmoddi4+0x298>
 80009c8:	b156      	cbz	r6, 80009e0 <__udivmoddi4+0x208>
 80009ca:	ebb0 0208 	subs.w	r2, r0, r8
 80009ce:	eb64 040e 	sbc.w	r4, r4, lr
 80009d2:	fa04 f707 	lsl.w	r7, r4, r7
 80009d6:	40ca      	lsrs	r2, r1
 80009d8:	40cc      	lsrs	r4, r1
 80009da:	4317      	orrs	r7, r2
 80009dc:	e9c6 7400 	strd	r7, r4, [r6]
 80009e0:	4618      	mov	r0, r3
 80009e2:	2100      	movs	r1, #0
 80009e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e8:	f1c3 0120 	rsb	r1, r3, #32
 80009ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80009f0:	fa20 f201 	lsr.w	r2, r0, r1
 80009f4:	fa25 f101 	lsr.w	r1, r5, r1
 80009f8:	409d      	lsls	r5, r3
 80009fa:	432a      	orrs	r2, r5
 80009fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a00:	fa1f fe8c 	uxth.w	lr, ip
 8000a04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a08:	fb07 1510 	mls	r5, r7, r0, r1
 8000a0c:	0c11      	lsrs	r1, r2, #16
 8000a0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a12:	fb00 f50e 	mul.w	r5, r0, lr
 8000a16:	428d      	cmp	r5, r1
 8000a18:	fa04 f403 	lsl.w	r4, r4, r3
 8000a1c:	d908      	bls.n	8000a30 <__udivmoddi4+0x258>
 8000a1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a26:	d22f      	bcs.n	8000a88 <__udivmoddi4+0x2b0>
 8000a28:	428d      	cmp	r5, r1
 8000a2a:	d92d      	bls.n	8000a88 <__udivmoddi4+0x2b0>
 8000a2c:	3802      	subs	r0, #2
 8000a2e:	4461      	add	r1, ip
 8000a30:	1b49      	subs	r1, r1, r5
 8000a32:	b292      	uxth	r2, r2
 8000a34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a38:	fb07 1115 	mls	r1, r7, r5, r1
 8000a3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a40:	fb05 f10e 	mul.w	r1, r5, lr
 8000a44:	4291      	cmp	r1, r2
 8000a46:	d908      	bls.n	8000a5a <__udivmoddi4+0x282>
 8000a48:	eb1c 0202 	adds.w	r2, ip, r2
 8000a4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a50:	d216      	bcs.n	8000a80 <__udivmoddi4+0x2a8>
 8000a52:	4291      	cmp	r1, r2
 8000a54:	d914      	bls.n	8000a80 <__udivmoddi4+0x2a8>
 8000a56:	3d02      	subs	r5, #2
 8000a58:	4462      	add	r2, ip
 8000a5a:	1a52      	subs	r2, r2, r1
 8000a5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a60:	e738      	b.n	80008d4 <__udivmoddi4+0xfc>
 8000a62:	4631      	mov	r1, r6
 8000a64:	4630      	mov	r0, r6
 8000a66:	e708      	b.n	800087a <__udivmoddi4+0xa2>
 8000a68:	4639      	mov	r1, r7
 8000a6a:	e6e6      	b.n	800083a <__udivmoddi4+0x62>
 8000a6c:	4610      	mov	r0, r2
 8000a6e:	e6fb      	b.n	8000868 <__udivmoddi4+0x90>
 8000a70:	4548      	cmp	r0, r9
 8000a72:	d2a9      	bcs.n	80009c8 <__udivmoddi4+0x1f0>
 8000a74:	ebb9 0802 	subs.w	r8, r9, r2
 8000a78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	e7a3      	b.n	80009c8 <__udivmoddi4+0x1f0>
 8000a80:	4645      	mov	r5, r8
 8000a82:	e7ea      	b.n	8000a5a <__udivmoddi4+0x282>
 8000a84:	462b      	mov	r3, r5
 8000a86:	e794      	b.n	80009b2 <__udivmoddi4+0x1da>
 8000a88:	4640      	mov	r0, r8
 8000a8a:	e7d1      	b.n	8000a30 <__udivmoddi4+0x258>
 8000a8c:	46d0      	mov	r8, sl
 8000a8e:	e77b      	b.n	8000988 <__udivmoddi4+0x1b0>
 8000a90:	3d02      	subs	r5, #2
 8000a92:	4462      	add	r2, ip
 8000a94:	e732      	b.n	80008fc <__udivmoddi4+0x124>
 8000a96:	4608      	mov	r0, r1
 8000a98:	e70a      	b.n	80008b0 <__udivmoddi4+0xd8>
 8000a9a:	4464      	add	r4, ip
 8000a9c:	3802      	subs	r0, #2
 8000a9e:	e742      	b.n	8000926 <__udivmoddi4+0x14e>

08000aa0 <__aeabi_idiv0>:
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <HAL_FDCAN_RxFifo0Callback>:
uint8_t               TxData[12];
uint8_t               RxData[12];
int indx = 0;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b090      	sub	sp, #64	; 0x40
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d014      	beq.n	8000ae2 <HAL_FDCAN_RxFifo0Callback+0x3e>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000ab8:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <HAL_FDCAN_RxFifo0Callback+0x70>)
 8000aba:	4a17      	ldr	r2, [pc, #92]	; (8000b18 <HAL_FDCAN_RxFifo0Callback+0x74>)
 8000abc:	2140      	movs	r1, #64	; 0x40
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f005 fe16 	bl	80066f0 <HAL_FDCAN_GetRxMessage>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 8000aca:	f001 f87f 	bl	8001bcc <Error_Handler>
    }
    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f005 ff7a 	bl	80069cc <HAL_FDCAN_ActivateNotification>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_FDCAN_RxFifo0Callback+0x3e>
    {
      /* Notification Error */
      Error_Handler();
 8000ade:	f001 f875 	bl	8001bcc <Error_Handler>
    }
  }

	char debug[50];

	sprintf(debug, "%x\n", RxData[0]);
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <HAL_FDCAN_RxFifo0Callback+0x70>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	490b      	ldr	r1, [pc, #44]	; (8000b1c <HAL_FDCAN_RxFifo0Callback+0x78>)
 8000aee:	4618      	mov	r0, r3
 8000af0:	f015 fd1e 	bl	8016530 <siprintf>
	CDC_Transmit_HS(debug, strlen(debug));
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fc59 	bl	80003b0 <strlen>
 8000afe:	4602      	mov	r2, r0
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	4611      	mov	r1, r2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f014 f9bc 	bl	8014e84 <CDC_Transmit_HS>
}
 8000b0c:	bf00      	nop
 8000b0e:	3740      	adds	r7, #64	; 0x40
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	24000d10 	.word	0x24000d10
 8000b18:	24000cdc 	.word	0x24000cdc
 8000b1c:	08019d08 	.word	0x08019d08

08000b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b20:	b5b0      	push	{r4, r5, r7, lr}
 8000b22:	f5ad 6dc8 	sub.w	sp, sp, #1600	; 0x640
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	char state[50] = "DISARMED";
 8000b28:	4a6b      	ldr	r2, [pc, #428]	; (8000cd8 <main+0x1b8>)
 8000b2a:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 8000b2e:	6810      	ldr	r0, [r2, #0]
 8000b30:	6851      	ldr	r1, [r2, #4]
 8000b32:	c303      	stmia	r3!, {r0, r1}
 8000b34:	7a12      	ldrb	r2, [r2, #8]
 8000b36:	701a      	strb	r2, [r3, #0]
 8000b38:	f207 6311 	addw	r3, r7, #1553	; 0x611
 8000b3c:	2229      	movs	r2, #41	; 0x29
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f015 fd58 	bl	80165f6 <memset>


	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8000b46:	4b65      	ldr	r3, [pc, #404]	; (8000cdc <main+0x1bc>)
 8000b48:	f207 54ec 	addw	r4, r7, #1516	; 0x5ec
 8000b4c:	461d      	mov	r5, r3
 8000b4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b56:	c403      	stmia	r4!, {r0, r1}
 8000b58:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5a:	f002 f8e5 	bl	8002d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b5e:	f000 f8c9 	bl	8000cf4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b62:	f000 f93f 	bl	8000de4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b66:	f000 fec7 	bl	80018f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b6a:	f000 fe65 	bl	8001838 <MX_DMA_Init>
  MX_SPI3_Init();
 8000b6e:	f000 fbbf 	bl	80012f0 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 8000b72:	f000 fa4f 	bl	8001014 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8000b76:	f000 fe13 	bl	80017a0 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000b7a:	f000 f965 	bl	8000e48 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000b7e:	f000 fcc9 	bl	8001514 <MX_TIM4_Init>
  MX_ADC3_Init();
 8000b82:	f000 f9d9 	bl	8000f38 <MX_ADC3_Init>
  MX_SPI2_Init();
 8000b86:	f000 fb5d 	bl	8001244 <MX_SPI2_Init>
  MX_I2C2_Init();
 8000b8a:	f000 faa7 	bl	80010dc <MX_I2C2_Init>
  MX_TIM2_Init();
 8000b8e:	f000 fc05 	bl	800139c <MX_TIM2_Init>
  MX_TIM5_Init();
 8000b92:	f000 fd3b 	bl	800160c <MX_TIM5_Init>
  MX_TIM3_Init();
 8000b96:	f000 fc59 	bl	800144c <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000b9a:	f014 f8b3 	bl	8014d04 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000b9e:	f000 fafb 	bl	8001198 <MX_SPI1_Init>
  MX_UART4_Init();
 8000ba2:	f000 fdb1 	bl	8001708 <MX_UART4_Init>
  MX_FATFS_Init();
 8000ba6:	f011 fe41 	bl	801282c <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 8000baa:	f000 fad7 	bl	800115c <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 8000bae:	f000 fd87 	bl	80016c0 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb8:	4849      	ldr	r0, [pc, #292]	; (8000ce0 <main+0x1c0>)
 8000bba:	f006 fe3d 	bl	8007838 <HAL_GPIO_WritePin>
  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000bbe:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8000bc2:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIndex = 0;
 8000bca:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8000bce:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000bd6:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8000bda:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8000bde:	2202      	movs	r2, #2
 8000be0:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000be2:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8000be6:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8000bea:	2201      	movs	r2, #1
 8000bec:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterID1 = 0x12;
 8000bee:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8000bf2:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8000bf6:	2212      	movs	r2, #18
 8000bf8:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterID2 = 0x12;
 8000bfa:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8000bfe:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8000c02:	2212      	movs	r2, #18
 8000c04:	615a      	str	r2, [r3, #20]
  sFilterConfig.RxBufferIndex = 0;
 8000c06:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8000c0a:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8000c0e:	2200      	movs	r2, #0
 8000c10:	619a      	str	r2, [r3, #24]
  if (HAL_FDCAN_ConfigFilter(&hfdcan3, &sFilterConfig) != HAL_OK)
 8000c12:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8000c16:	4619      	mov	r1, r3
 8000c18:	4832      	ldr	r0, [pc, #200]	; (8000ce4 <main+0x1c4>)
 8000c1a:	f005 fc6d 	bl	80064f8 <HAL_FDCAN_ConfigFilter>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <main+0x108>
  {
    /* Filter configuration Error */
    Error_Handler();
 8000c24:	f000 ffd2 	bl	8001bcc <Error_Handler>
  }

  if(HAL_FDCAN_Start(&hfdcan3)!= HAL_OK)
 8000c28:	482e      	ldr	r0, [pc, #184]	; (8000ce4 <main+0x1c4>)
 8000c2a:	f005 fcdb 	bl	80065e4 <HAL_FDCAN_Start>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <main+0x118>
  {
	  Error_Handler();
 8000c34:	f000 ffca 	bl	8001bcc <Error_Handler>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	4829      	ldr	r0, [pc, #164]	; (8000ce4 <main+0x1c4>)
 8000c3e:	f005 fec5 	bl	80069cc <HAL_FDCAN_ActivateNotification>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <main+0x12c>
  {
    /* Notification Error */
    Error_Handler();
 8000c48:	f000 ffc0 	bl	8001bcc <Error_Handler>
  }

  TxHeader.Identifier = 0x11;
 8000c4c:	4b26      	ldr	r3, [pc, #152]	; (8000ce8 <main+0x1c8>)
 8000c4e:	2211      	movs	r2, #17
 8000c50:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000c52:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <main+0x1c8>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000c58:	4b23      	ldr	r3, [pc, #140]	; (8000ce8 <main+0x1c8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_12;
 8000c5e:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <main+0x1c8>)
 8000c60:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000c64:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000c66:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <main+0x1c8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000c6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ce8 <main+0x1c8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_FD_CAN;
 8000c72:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <main+0x1c8>)
 8000c74:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c78:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000c7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <main+0x1c8>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000c80:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <main+0x1c8>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	621a      	str	r2, [r3, #32]


  while (1)
  {
   for (int i=0; i<12; i++)
 8000c86:	2300      	movs	r3, #0
 8000c88:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
 8000c8c:	e00a      	b.n	8000ca4 <main+0x184>
   {
    TxData[i] = 0x22;
 8000c8e:	4a17      	ldr	r2, [pc, #92]	; (8000cec <main+0x1cc>)
 8000c90:	f8d7 363c 	ldr.w	r3, [r7, #1596]	; 0x63c
 8000c94:	4413      	add	r3, r2
 8000c96:	2222      	movs	r2, #34	; 0x22
 8000c98:	701a      	strb	r2, [r3, #0]
   for (int i=0; i<12; i++)
 8000c9a:	f8d7 363c 	ldr.w	r3, [r7, #1596]	; 0x63c
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
 8000ca4:	f8d7 363c 	ldr.w	r3, [r7, #1596]	; 0x63c
 8000ca8:	2b0b      	cmp	r3, #11
 8000caa:	ddf0      	ble.n	8000c8e <main+0x16e>
   }


   TxData[0] = 0x22;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <main+0x1cc>)
 8000cae:	2222      	movs	r2, #34	; 0x22
 8000cb0:	701a      	strb	r2, [r3, #0]
   if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan3, &TxHeader, TxData)!= HAL_OK)
 8000cb2:	4a0e      	ldr	r2, [pc, #56]	; (8000cec <main+0x1cc>)
 8000cb4:	490c      	ldr	r1, [pc, #48]	; (8000ce8 <main+0x1c8>)
 8000cb6:	480b      	ldr	r0, [pc, #44]	; (8000ce4 <main+0x1c4>)
 8000cb8:	f005 fcbf 	bl	800663a <HAL_FDCAN_AddMessageToTxFifoQ>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <main+0x1a6>
   {
    Error_Handler();
 8000cc2:	f000 ff83 	bl	8001bcc <Error_Handler>

   }
		CDC_Transmit_HS("hi", 2);
 8000cc6:	2102      	movs	r1, #2
 8000cc8:	4809      	ldr	r0, [pc, #36]	; (8000cf0 <main+0x1d0>)
 8000cca:	f014 f8db 	bl	8014e84 <CDC_Transmit_HS>

   HAL_Delay (1000);
 8000cce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cd2:	f002 f8bb 	bl	8002e4c <HAL_Delay>
  {
 8000cd6:	e7d6      	b.n	8000c86 <main+0x166>
 8000cd8:	08019cf4 	.word	0x08019cf4
 8000cdc:	08019d10 	.word	0x08019d10
 8000ce0:	58021400 	.word	0x58021400
 8000ce4:	240004b4 	.word	0x240004b4
 8000ce8:	24000cb8 	.word	0x24000cb8
 8000cec:	24000d04 	.word	0x24000d04
 8000cf0:	08019d0c 	.word	0x08019d0c

08000cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b09c      	sub	sp, #112	; 0x70
 8000cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfe:	224c      	movs	r2, #76	; 0x4c
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f015 fc77 	bl	80165f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2220      	movs	r2, #32
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f015 fc71 	bl	80165f6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d14:	2002      	movs	r0, #2
 8000d16:	f008 f9a3 	bl	8009060 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	4b30      	ldr	r3, [pc, #192]	; (8000de0 <SystemClock_Config+0xec>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d26:	4a2e      	ldr	r2, [pc, #184]	; (8000de0 <SystemClock_Config+0xec>)
 8000d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d2c:	6193      	str	r3, [r2, #24]
 8000d2e:	4b2c      	ldr	r3, [pc, #176]	; (8000de0 <SystemClock_Config+0xec>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d3a:	bf00      	nop
 8000d3c:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <SystemClock_Config+0xec>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d48:	d1f8      	bne.n	8000d3c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000d4a:	2322      	movs	r3, #34	; 0x22
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000d52:	2340      	movs	r3, #64	; 0x40
 8000d54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000d56:	2301      	movs	r3, #1
 8000d58:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d62:	2304      	movs	r3, #4
 8000d64:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000d66:	230c      	movs	r3, #12
 8000d68:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8000d6e:	230c      	movs	r3, #12
 8000d70:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d72:	2302      	movs	r3, #2
 8000d74:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d76:	230c      	movs	r3, #12
 8000d78:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d86:	4618      	mov	r0, r3
 8000d88:	f008 f9b4 	bl	80090f4 <HAL_RCC_OscConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000d92:	f000 ff1b 	bl	8001bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d96:	233f      	movs	r3, #63	; 0x3f
 8000d98:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000da2:	2308      	movs	r3, #8
 8000da4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000da6:	2340      	movs	r3, #64	; 0x40
 8000da8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000daa:	2340      	movs	r3, #64	; 0x40
 8000dac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000db2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000db4:	2340      	movs	r3, #64	; 0x40
 8000db6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	2101      	movs	r1, #1
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f008 fd73 	bl	80098a8 <HAL_RCC_ClockConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000dc8:	f000 ff00 	bl	8001bcc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000dcc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	f008 ff1e 	bl	8009c14 <HAL_RCC_MCOConfig>
}
 8000dd8:	bf00      	nop
 8000dda:	3770      	adds	r7, #112	; 0x70
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	58024800 	.word	0x58024800

08000de4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b0ae      	sub	sp, #184	; 0xb8
 8000de8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dea:	463b      	mov	r3, r7
 8000dec:	22b8      	movs	r2, #184	; 0xb8
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f015 fc00 	bl	80165f6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8000df6:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000e02:	2304      	movs	r3, #4
 8000e04:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000e06:	230c      	movs	r3, #12
 8000e08:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e12:	2302      	movs	r3, #2
 8000e14:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000e16:	23c0      	movs	r3, #192	; 0xc0
 8000e18:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e26:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e2e:	463b      	mov	r3, r7
 8000e30:	4618      	mov	r0, r3
 8000e32:	f009 f92f 	bl	800a094 <HAL_RCCEx_PeriphCLKConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000e3c:	f000 fec6 	bl	8001bcc <Error_Handler>
  }
}
 8000e40:	bf00      	nop
 8000e42:	37b8      	adds	r7, #184	; 0xb8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08c      	sub	sp, #48	; 0x30
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	2224      	movs	r2, #36	; 0x24
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f015 fbc8 	bl	80165f6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e66:	4b31      	ldr	r3, [pc, #196]	; (8000f2c <MX_ADC1_Init+0xe4>)
 8000e68:	4a31      	ldr	r2, [pc, #196]	; (8000f30 <MX_ADC1_Init+0xe8>)
 8000e6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000e6c:	4b2f      	ldr	r3, [pc, #188]	; (8000f2c <MX_ADC1_Init+0xe4>)
 8000e6e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000e72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000e74:	4b2d      	ldr	r3, [pc, #180]	; (8000f2c <MX_ADC1_Init+0xe4>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e7a:	4b2c      	ldr	r3, [pc, #176]	; (8000f2c <MX_ADC1_Init+0xe4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e80:	4b2a      	ldr	r3, [pc, #168]	; (8000f2c <MX_ADC1_Init+0xe4>)
 8000e82:	2204      	movs	r2, #4
 8000e84:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e86:	4b29      	ldr	r3, [pc, #164]	; (8000f2c <MX_ADC1_Init+0xe4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e8c:	4b27      	ldr	r3, [pc, #156]	; (8000f2c <MX_ADC1_Init+0xe4>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e92:	4b26      	ldr	r3, [pc, #152]	; (8000f2c <MX_ADC1_Init+0xe4>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e98:	4b24      	ldr	r3, [pc, #144]	; (8000f2c <MX_ADC1_Init+0xe4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ea0:	4b22      	ldr	r3, [pc, #136]	; (8000f2c <MX_ADC1_Init+0xe4>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ea6:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <MX_ADC1_Init+0xe4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000eac:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <MX_ADC1_Init+0xe4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eb2:	4b1e      	ldr	r3, [pc, #120]	; (8000f2c <MX_ADC1_Init+0xe4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000eb8:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <MX_ADC1_Init+0xe4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000ebe:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <MX_ADC1_Init+0xe4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ec6:	4819      	ldr	r0, [pc, #100]	; (8000f2c <MX_ADC1_Init+0xe4>)
 8000ec8:	f002 fa40 	bl	800334c <HAL_ADC_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000ed2:	f000 fe7b 	bl	8001bcc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000eda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4812      	ldr	r0, [pc, #72]	; (8000f2c <MX_ADC1_Init+0xe4>)
 8000ee2:	f003 fa7b 	bl	80043dc <HAL_ADCEx_MultiModeConfigChannel>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000eec:	f000 fe6e 	bl	8001bcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000ef0:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <MX_ADC1_Init+0xec>)
 8000ef2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ef4:	2306      	movs	r3, #6
 8000ef6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000efc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f00:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f02:	2304      	movs	r3, #4
 8000f04:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f10:	463b      	mov	r3, r7
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_ADC1_Init+0xe4>)
 8000f16:	f002 fc21 	bl	800375c <HAL_ADC_ConfigChannel>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000f20:	f000 fe54 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	3730      	adds	r7, #48	; 0x30
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	240002e4 	.word	0x240002e4
 8000f30:	40022000 	.word	0x40022000
 8000f34:	2a000400 	.word	0x2a000400

08000f38 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2224      	movs	r2, #36	; 0x24
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f015 fb56 	bl	80165f6 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000f4a:	4b2f      	ldr	r3, [pc, #188]	; (8001008 <MX_ADC3_Init+0xd0>)
 8000f4c:	4a2f      	ldr	r2, [pc, #188]	; (800100c <MX_ADC3_Init+0xd4>)
 8000f4e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000f50:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <MX_ADC3_Init+0xd0>)
 8000f52:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000f56:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000f58:	4b2b      	ldr	r3, [pc, #172]	; (8001008 <MX_ADC3_Init+0xd0>)
 8000f5a:	2208      	movs	r2, #8
 8000f5c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <MX_ADC3_Init+0xd0>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f64:	4b28      	ldr	r3, [pc, #160]	; (8001008 <MX_ADC3_Init+0xd0>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f6a:	4b27      	ldr	r3, [pc, #156]	; (8001008 <MX_ADC3_Init+0xd0>)
 8000f6c:	2204      	movs	r2, #4
 8000f6e:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000f70:	4b25      	ldr	r3, [pc, #148]	; (8001008 <MX_ADC3_Init+0xd0>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000f76:	4b24      	ldr	r3, [pc, #144]	; (8001008 <MX_ADC3_Init+0xd0>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000f7c:	4b22      	ldr	r3, [pc, #136]	; (8001008 <MX_ADC3_Init+0xd0>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000f82:	4b21      	ldr	r3, [pc, #132]	; (8001008 <MX_ADC3_Init+0xd0>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <MX_ADC3_Init+0xd0>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f90:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <MX_ADC3_Init+0xd0>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <MX_ADC3_Init+0xd0>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <MX_ADC3_Init+0xd0>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000fa4:	4b18      	ldr	r3, [pc, #96]	; (8001008 <MX_ADC3_Init+0xd0>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000faa:	4b17      	ldr	r3, [pc, #92]	; (8001008 <MX_ADC3_Init+0xd0>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000fb0:	4b15      	ldr	r3, [pc, #84]	; (8001008 <MX_ADC3_Init+0xd0>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000fb6:	4b14      	ldr	r3, [pc, #80]	; (8001008 <MX_ADC3_Init+0xd0>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000fbe:	4812      	ldr	r0, [pc, #72]	; (8001008 <MX_ADC3_Init+0xd0>)
 8000fc0:	f002 f9c4 	bl	800334c <HAL_ADC_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8000fca:	f000 fdff 	bl	8001bcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <MX_ADC3_Init+0xd8>)
 8000fd0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd2:	2306      	movs	r3, #6
 8000fd4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fda:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000fde:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_ADC3_Init+0xd0>)
 8000ff2:	f002 fbb3 	bl	800375c <HAL_ADC_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000ffc:	f000 fde6 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	3728      	adds	r7, #40	; 0x28
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	24000354 	.word	0x24000354
 800100c:	58026000 	.word	0x58026000
 8001010:	04300002 	.word	0x04300002

08001014 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001018:	4b2e      	ldr	r3, [pc, #184]	; (80010d4 <MX_FDCAN3_Init+0xc0>)
 800101a:	4a2f      	ldr	r2, [pc, #188]	; (80010d8 <MX_FDCAN3_Init+0xc4>)
 800101c:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800101e:	4b2d      	ldr	r3, [pc, #180]	; (80010d4 <MX_FDCAN3_Init+0xc0>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001024:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <MX_FDCAN3_Init+0xc0>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = ENABLE;
 800102a:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <MX_FDCAN3_Init+0xc0>)
 800102c:	2201      	movs	r2, #1
 800102e:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001030:	4b28      	ldr	r3, [pc, #160]	; (80010d4 <MX_FDCAN3_Init+0xc0>)
 8001032:	2200      	movs	r2, #0
 8001034:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001036:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <MX_FDCAN3_Init+0xc0>)
 8001038:	2200      	movs	r2, #0
 800103a:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 1;
 800103c:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <MX_FDCAN3_Init+0xc0>)
 800103e:	2201      	movs	r2, #1
 8001040:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 13;
 8001042:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <MX_FDCAN3_Init+0xc0>)
 8001044:	220d      	movs	r2, #13
 8001046:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 86;
 8001048:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <MX_FDCAN3_Init+0xc0>)
 800104a:	2256      	movs	r2, #86	; 0x56
 800104c:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 13;
 800104e:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <MX_FDCAN3_Init+0xc0>)
 8001050:	220d      	movs	r2, #13
 8001052:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 25;
 8001054:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <MX_FDCAN3_Init+0xc0>)
 8001056:	2219      	movs	r2, #25
 8001058:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 800105a:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <MX_FDCAN3_Init+0xc0>)
 800105c:	2201      	movs	r2, #1
 800105e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001060:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <MX_FDCAN3_Init+0xc0>)
 8001062:	2201      	movs	r2, #1
 8001064:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001066:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <MX_FDCAN3_Init+0xc0>)
 8001068:	2201      	movs	r2, #1
 800106a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <MX_FDCAN3_Init+0xc0>)
 800106e:	2200      	movs	r2, #0
 8001070:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 1;
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <MX_FDCAN3_Init+0xc0>)
 8001074:	2201      	movs	r2, #1
 8001076:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <MX_FDCAN3_Init+0xc0>)
 800107a:	2200      	movs	r2, #0
 800107c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 1;
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <MX_FDCAN3_Init+0xc0>)
 8001080:	2201      	movs	r2, #1
 8001082:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_12;
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <MX_FDCAN3_Init+0xc0>)
 8001086:	2205      	movs	r2, #5
 8001088:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <MX_FDCAN3_Init+0xc0>)
 800108c:	2200      	movs	r2, #0
 800108e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001090:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <MX_FDCAN3_Init+0xc0>)
 8001092:	2204      	movs	r2, #4
 8001094:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_FDCAN3_Init+0xc0>)
 8001098:	2200      	movs	r2, #0
 800109a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800109c:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <MX_FDCAN3_Init+0xc0>)
 800109e:	2204      	movs	r2, #4
 80010a0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_FDCAN3_Init+0xc0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <MX_FDCAN3_Init+0xc0>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 1;
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_FDCAN3_Init+0xc0>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80010b4:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <MX_FDCAN3_Init+0xc0>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_12;
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_FDCAN3_Init+0xc0>)
 80010bc:	2205      	movs	r2, #5
 80010be:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <MX_FDCAN3_Init+0xc0>)
 80010c2:	f005 f83b 	bl	800613c <HAL_FDCAN_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 80010cc:	f000 fd7e 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	240004b4 	.word	0x240004b4
 80010d8:	4000d400 	.word	0x4000d400

080010dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010e0:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <MX_I2C2_Init+0x74>)
 80010e2:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <MX_I2C2_Init+0x78>)
 80010e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <MX_I2C2_Init+0x74>)
 80010e8:	4a1b      	ldr	r2, [pc, #108]	; (8001158 <MX_I2C2_Init+0x7c>)
 80010ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80010ec:	4b18      	ldr	r3, [pc, #96]	; (8001150 <MX_I2C2_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f2:	4b17      	ldr	r3, [pc, #92]	; (8001150 <MX_I2C2_Init+0x74>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f8:	4b15      	ldr	r3, [pc, #84]	; (8001150 <MX_I2C2_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80010fe:	4b14      	ldr	r3, [pc, #80]	; (8001150 <MX_I2C2_Init+0x74>)
 8001100:	2200      	movs	r2, #0
 8001102:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <MX_I2C2_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_I2C2_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_I2C2_Init+0x74>)
 8001112:	2200      	movs	r2, #0
 8001114:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001116:	480e      	ldr	r0, [pc, #56]	; (8001150 <MX_I2C2_Init+0x74>)
 8001118:	f006 fba8 	bl	800786c <HAL_I2C_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001122:	f000 fd53 	bl	8001bcc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001126:	2100      	movs	r1, #0
 8001128:	4809      	ldr	r0, [pc, #36]	; (8001150 <MX_I2C2_Init+0x74>)
 800112a:	f006 fc49 	bl	80079c0 <HAL_I2CEx_ConfigAnalogFilter>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001134:	f000 fd4a 	bl	8001bcc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001138:	2100      	movs	r1, #0
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <MX_I2C2_Init+0x74>)
 800113c:	f006 fc8b 	bl	8007a56 <HAL_I2CEx_ConfigDigitalFilter>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001146:	f000 fd41 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	24000554 	.word	0x24000554
 8001154:	40005800 	.word	0x40005800
 8001158:	20303e5d 	.word	0x20303e5d

0800115c <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <MX_SDMMC2_SD_Init+0x34>)
 8001162:	4a0c      	ldr	r2, [pc, #48]	; (8001194 <MX_SDMMC2_SD_Init+0x38>)
 8001164:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <MX_SDMMC2_SD_Init+0x34>)
 8001168:	2200      	movs	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <MX_SDMMC2_SD_Init+0x34>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001172:	4b07      	ldr	r3, [pc, #28]	; (8001190 <MX_SDMMC2_SD_Init+0x34>)
 8001174:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001178:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800117a:	4b05      	ldr	r3, [pc, #20]	; (8001190 <MX_SDMMC2_SD_Init+0x34>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8001180:	4b03      	ldr	r3, [pc, #12]	; (8001190 <MX_SDMMC2_SD_Init+0x34>)
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	240005a8 	.word	0x240005a8
 8001194:	48022400 	.word	0x48022400

08001198 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800119c:	4b27      	ldr	r3, [pc, #156]	; (800123c <MX_SPI1_Init+0xa4>)
 800119e:	4a28      	ldr	r2, [pc, #160]	; (8001240 <MX_SPI1_Init+0xa8>)
 80011a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011a2:	4b26      	ldr	r3, [pc, #152]	; (800123c <MX_SPI1_Init+0xa4>)
 80011a4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80011a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011aa:	4b24      	ldr	r3, [pc, #144]	; (800123c <MX_SPI1_Init+0xa4>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011b0:	4b22      	ldr	r3, [pc, #136]	; (800123c <MX_SPI1_Init+0xa4>)
 80011b2:	2207      	movs	r2, #7
 80011b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011b6:	4b21      	ldr	r3, [pc, #132]	; (800123c <MX_SPI1_Init+0xa4>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011bc:	4b1f      	ldr	r3, [pc, #124]	; (800123c <MX_SPI1_Init+0xa4>)
 80011be:	2200      	movs	r2, #0
 80011c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011c2:	4b1e      	ldr	r3, [pc, #120]	; (800123c <MX_SPI1_Init+0xa4>)
 80011c4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80011c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <MX_SPI1_Init+0xa4>)
 80011cc:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80011d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d2:	4b1a      	ldr	r3, [pc, #104]	; (800123c <MX_SPI1_Init+0xa4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011d8:	4b18      	ldr	r3, [pc, #96]	; (800123c <MX_SPI1_Init+0xa4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011de:	4b17      	ldr	r3, [pc, #92]	; (800123c <MX_SPI1_Init+0xa4>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <MX_SPI1_Init+0xa4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_SPI1_Init+0xa4>)
 80011ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011f0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <MX_SPI1_Init+0xa4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011f8:	4b10      	ldr	r3, [pc, #64]	; (800123c <MX_SPI1_Init+0xa4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <MX_SPI1_Init+0xa4>)
 8001200:	2200      	movs	r2, #0
 8001202:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001204:	4b0d      	ldr	r3, [pc, #52]	; (800123c <MX_SPI1_Init+0xa4>)
 8001206:	2200      	movs	r2, #0
 8001208:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_SPI1_Init+0xa4>)
 800120c:	2200      	movs	r2, #0
 800120e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <MX_SPI1_Init+0xa4>)
 8001212:	2200      	movs	r2, #0
 8001214:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_SPI1_Init+0xa4>)
 8001218:	2200      	movs	r2, #0
 800121a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <MX_SPI1_Init+0xa4>)
 800121e:	2200      	movs	r2, #0
 8001220:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_SPI1_Init+0xa4>)
 8001224:	2200      	movs	r2, #0
 8001226:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_SPI1_Init+0xa4>)
 800122a:	f00c ff7d 	bl	800e128 <HAL_SPI_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001234:	f000 fcca 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	24000624 	.word	0x24000624
 8001240:	40013000 	.word	0x40013000

08001244 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001248:	4b27      	ldr	r3, [pc, #156]	; (80012e8 <MX_SPI2_Init+0xa4>)
 800124a:	4a28      	ldr	r2, [pc, #160]	; (80012ec <MX_SPI2_Init+0xa8>)
 800124c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800124e:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <MX_SPI2_Init+0xa4>)
 8001250:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001254:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001256:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <MX_SPI2_Init+0xa4>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800125c:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <MX_SPI2_Init+0xa4>)
 800125e:	2207      	movs	r2, #7
 8001260:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001262:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <MX_SPI2_Init+0xa4>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001268:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <MX_SPI2_Init+0xa4>)
 800126a:	2200      	movs	r2, #0
 800126c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800126e:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <MX_SPI2_Init+0xa4>)
 8001270:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001274:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001276:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <MX_SPI2_Init+0xa4>)
 8001278:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800127c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <MX_SPI2_Init+0xa4>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <MX_SPI2_Init+0xa4>)
 8001286:	2200      	movs	r2, #0
 8001288:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <MX_SPI2_Init+0xa4>)
 800128c:	2200      	movs	r2, #0
 800128e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <MX_SPI2_Init+0xa4>)
 8001292:	2200      	movs	r2, #0
 8001294:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <MX_SPI2_Init+0xa4>)
 8001298:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800129c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <MX_SPI2_Init+0xa4>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012a4:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <MX_SPI2_Init+0xa4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <MX_SPI2_Init+0xa4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012b0:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <MX_SPI2_Init+0xa4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80012b6:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <MX_SPI2_Init+0xa4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80012bc:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <MX_SPI2_Init+0xa4>)
 80012be:	2200      	movs	r2, #0
 80012c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <MX_SPI2_Init+0xa4>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <MX_SPI2_Init+0xa4>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <MX_SPI2_Init+0xa4>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012d4:	4804      	ldr	r0, [pc, #16]	; (80012e8 <MX_SPI2_Init+0xa4>)
 80012d6:	f00c ff27 	bl	800e128 <HAL_SPI_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80012e0:	f000 fc74 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	240006ac 	.word	0x240006ac
 80012ec:	40003800 	.word	0x40003800

080012f0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80012f4:	4b27      	ldr	r3, [pc, #156]	; (8001394 <MX_SPI3_Init+0xa4>)
 80012f6:	4a28      	ldr	r2, [pc, #160]	; (8001398 <MX_SPI3_Init+0xa8>)
 80012f8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80012fa:	4b26      	ldr	r3, [pc, #152]	; (8001394 <MX_SPI3_Init+0xa4>)
 80012fc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001300:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001302:	4b24      	ldr	r3, [pc, #144]	; (8001394 <MX_SPI3_Init+0xa4>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001308:	4b22      	ldr	r3, [pc, #136]	; (8001394 <MX_SPI3_Init+0xa4>)
 800130a:	2207      	movs	r2, #7
 800130c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800130e:	4b21      	ldr	r3, [pc, #132]	; (8001394 <MX_SPI3_Init+0xa4>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001314:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <MX_SPI3_Init+0xa4>)
 8001316:	2200      	movs	r2, #0
 8001318:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800131a:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <MX_SPI3_Init+0xa4>)
 800131c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001320:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001322:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <MX_SPI3_Init+0xa4>)
 8001324:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001328:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <MX_SPI3_Init+0xa4>)
 800132c:	2200      	movs	r2, #0
 800132e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001330:	4b18      	ldr	r3, [pc, #96]	; (8001394 <MX_SPI3_Init+0xa4>)
 8001332:	2200      	movs	r2, #0
 8001334:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001336:	4b17      	ldr	r3, [pc, #92]	; (8001394 <MX_SPI3_Init+0xa4>)
 8001338:	2200      	movs	r2, #0
 800133a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800133c:	4b15      	ldr	r3, [pc, #84]	; (8001394 <MX_SPI3_Init+0xa4>)
 800133e:	2200      	movs	r2, #0
 8001340:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <MX_SPI3_Init+0xa4>)
 8001344:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001348:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800134a:	4b12      	ldr	r3, [pc, #72]	; (8001394 <MX_SPI3_Init+0xa4>)
 800134c:	2200      	movs	r2, #0
 800134e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001350:	4b10      	ldr	r3, [pc, #64]	; (8001394 <MX_SPI3_Init+0xa4>)
 8001352:	2200      	movs	r2, #0
 8001354:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_SPI3_Init+0xa4>)
 8001358:	2200      	movs	r2, #0
 800135a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800135c:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <MX_SPI3_Init+0xa4>)
 800135e:	2200      	movs	r2, #0
 8001360:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <MX_SPI3_Init+0xa4>)
 8001364:	2200      	movs	r2, #0
 8001366:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001368:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <MX_SPI3_Init+0xa4>)
 800136a:	2200      	movs	r2, #0
 800136c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <MX_SPI3_Init+0xa4>)
 8001370:	2200      	movs	r2, #0
 8001372:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001374:	4b07      	ldr	r3, [pc, #28]	; (8001394 <MX_SPI3_Init+0xa4>)
 8001376:	2200      	movs	r2, #0
 8001378:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <MX_SPI3_Init+0xa4>)
 800137c:	2200      	movs	r2, #0
 800137e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001380:	4804      	ldr	r0, [pc, #16]	; (8001394 <MX_SPI3_Init+0xa4>)
 8001382:	f00c fed1 	bl	800e128 <HAL_SPI_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 800138c:	f000 fc1e 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	24000734 	.word	0x24000734
 8001398:	40003c00 	.word	0x40003c00

0800139c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	; 0x28
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ae:	463b      	mov	r3, r7
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
 80013bc:	615a      	str	r2, [r3, #20]
 80013be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013c0:	4b21      	ldr	r3, [pc, #132]	; (8001448 <MX_TIM2_Init+0xac>)
 80013c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013c8:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <MX_TIM2_Init+0xac>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ce:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <MX_TIM2_Init+0xac>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 80013d4:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <MX_TIM2_Init+0xac>)
 80013d6:	225a      	movs	r2, #90	; 0x5a
 80013d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013da:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <MX_TIM2_Init+0xac>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e0:	4b19      	ldr	r3, [pc, #100]	; (8001448 <MX_TIM2_Init+0xac>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013e6:	4818      	ldr	r0, [pc, #96]	; (8001448 <MX_TIM2_Init+0xac>)
 80013e8:	f00d f834 	bl	800e454 <HAL_TIM_PWM_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80013f2:	f000 fbeb 	bl	8001bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013fe:	f107 031c 	add.w	r3, r7, #28
 8001402:	4619      	mov	r1, r3
 8001404:	4810      	ldr	r0, [pc, #64]	; (8001448 <MX_TIM2_Init+0xac>)
 8001406:	f00d fe5d 	bl	800f0c4 <HAL_TIMEx_MasterConfigSynchronization>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001410:	f000 fbdc 	bl	8001bcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001414:	2360      	movs	r3, #96	; 0x60
 8001416:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001424:	463b      	mov	r3, r7
 8001426:	2208      	movs	r2, #8
 8001428:	4619      	mov	r1, r3
 800142a:	4807      	ldr	r0, [pc, #28]	; (8001448 <MX_TIM2_Init+0xac>)
 800142c:	f00d f988 	bl	800e740 <HAL_TIM_PWM_ConfigChannel>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001436:	f000 fbc9 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800143a:	4803      	ldr	r0, [pc, #12]	; (8001448 <MX_TIM2_Init+0xac>)
 800143c:	f001 f8ec 	bl	8002618 <HAL_TIM_MspPostInit>

}
 8001440:	bf00      	nop
 8001442:	3728      	adds	r7, #40	; 0x28
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	240007bc 	.word	0x240007bc

0800144c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800145e:	463b      	mov	r3, r7
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
 800146c:	615a      	str	r2, [r3, #20]
 800146e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001470:	4b26      	ldr	r3, [pc, #152]	; (800150c <MX_TIM3_Init+0xc0>)
 8001472:	4a27      	ldr	r2, [pc, #156]	; (8001510 <MX_TIM3_Init+0xc4>)
 8001474:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001476:	4b25      	ldr	r3, [pc, #148]	; (800150c <MX_TIM3_Init+0xc0>)
 8001478:	2200      	movs	r2, #0
 800147a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147c:	4b23      	ldr	r3, [pc, #140]	; (800150c <MX_TIM3_Init+0xc0>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 8001482:	4b22      	ldr	r3, [pc, #136]	; (800150c <MX_TIM3_Init+0xc0>)
 8001484:	225a      	movs	r2, #90	; 0x5a
 8001486:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001488:	4b20      	ldr	r3, [pc, #128]	; (800150c <MX_TIM3_Init+0xc0>)
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148e:	4b1f      	ldr	r3, [pc, #124]	; (800150c <MX_TIM3_Init+0xc0>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001494:	481d      	ldr	r0, [pc, #116]	; (800150c <MX_TIM3_Init+0xc0>)
 8001496:	f00c ffdd 	bl	800e454 <HAL_TIM_PWM_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80014a0:	f000 fb94 	bl	8001bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014ac:	f107 031c 	add.w	r3, r7, #28
 80014b0:	4619      	mov	r1, r3
 80014b2:	4816      	ldr	r0, [pc, #88]	; (800150c <MX_TIM3_Init+0xc0>)
 80014b4:	f00d fe06 	bl	800f0c4 <HAL_TIMEx_MasterConfigSynchronization>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80014be:	f000 fb85 	bl	8001bcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014c2:	2360      	movs	r3, #96	; 0x60
 80014c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014d2:	463b      	mov	r3, r7
 80014d4:	2200      	movs	r2, #0
 80014d6:	4619      	mov	r1, r3
 80014d8:	480c      	ldr	r0, [pc, #48]	; (800150c <MX_TIM3_Init+0xc0>)
 80014da:	f00d f931 	bl	800e740 <HAL_TIM_PWM_ConfigChannel>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80014e4:	f000 fb72 	bl	8001bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014e8:	463b      	mov	r3, r7
 80014ea:	2204      	movs	r2, #4
 80014ec:	4619      	mov	r1, r3
 80014ee:	4807      	ldr	r0, [pc, #28]	; (800150c <MX_TIM3_Init+0xc0>)
 80014f0:	f00d f926 	bl	800e740 <HAL_TIM_PWM_ConfigChannel>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80014fa:	f000 fb67 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014fe:	4803      	ldr	r0, [pc, #12]	; (800150c <MX_TIM3_Init+0xc0>)
 8001500:	f001 f88a 	bl	8002618 <HAL_TIM_MspPostInit>

}
 8001504:	bf00      	nop
 8001506:	3728      	adds	r7, #40	; 0x28
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	24000808 	.word	0x24000808
 8001510:	40000400 	.word	0x40000400

08001514 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	; 0x28
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151a:	f107 031c 	add.w	r3, r7, #28
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001526:	463b      	mov	r3, r7
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
 8001534:	615a      	str	r2, [r3, #20]
 8001536:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001538:	4b32      	ldr	r3, [pc, #200]	; (8001604 <MX_TIM4_Init+0xf0>)
 800153a:	4a33      	ldr	r2, [pc, #204]	; (8001608 <MX_TIM4_Init+0xf4>)
 800153c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 800153e:	4b31      	ldr	r3, [pc, #196]	; (8001604 <MX_TIM4_Init+0xf0>)
 8001540:	221c      	movs	r2, #28
 8001542:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001544:	4b2f      	ldr	r3, [pc, #188]	; (8001604 <MX_TIM4_Init+0xf0>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800154a:	4b2e      	ldr	r3, [pc, #184]	; (8001604 <MX_TIM4_Init+0xf0>)
 800154c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001550:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001552:	4b2c      	ldr	r3, [pc, #176]	; (8001604 <MX_TIM4_Init+0xf0>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001558:	4b2a      	ldr	r3, [pc, #168]	; (8001604 <MX_TIM4_Init+0xf0>)
 800155a:	2200      	movs	r2, #0
 800155c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800155e:	4829      	ldr	r0, [pc, #164]	; (8001604 <MX_TIM4_Init+0xf0>)
 8001560:	f00c ff78 	bl	800e454 <HAL_TIM_PWM_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800156a:	f000 fb2f 	bl	8001bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001576:	f107 031c 	add.w	r3, r7, #28
 800157a:	4619      	mov	r1, r3
 800157c:	4821      	ldr	r0, [pc, #132]	; (8001604 <MX_TIM4_Init+0xf0>)
 800157e:	f00d fda1 	bl	800f0c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001588:	f000 fb20 	bl	8001bcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800158c:	2360      	movs	r3, #96	; 0x60
 800158e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001594:	2300      	movs	r3, #0
 8001596:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800159c:	463b      	mov	r3, r7
 800159e:	2200      	movs	r2, #0
 80015a0:	4619      	mov	r1, r3
 80015a2:	4818      	ldr	r0, [pc, #96]	; (8001604 <MX_TIM4_Init+0xf0>)
 80015a4:	f00d f8cc 	bl	800e740 <HAL_TIM_PWM_ConfigChannel>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80015ae:	f000 fb0d 	bl	8001bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015b2:	463b      	mov	r3, r7
 80015b4:	2204      	movs	r2, #4
 80015b6:	4619      	mov	r1, r3
 80015b8:	4812      	ldr	r0, [pc, #72]	; (8001604 <MX_TIM4_Init+0xf0>)
 80015ba:	f00d f8c1 	bl	800e740 <HAL_TIM_PWM_ConfigChannel>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80015c4:	f000 fb02 	bl	8001bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015c8:	463b      	mov	r3, r7
 80015ca:	2208      	movs	r2, #8
 80015cc:	4619      	mov	r1, r3
 80015ce:	480d      	ldr	r0, [pc, #52]	; (8001604 <MX_TIM4_Init+0xf0>)
 80015d0:	f00d f8b6 	bl	800e740 <HAL_TIM_PWM_ConfigChannel>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80015da:	f000 faf7 	bl	8001bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015de:	463b      	mov	r3, r7
 80015e0:	220c      	movs	r2, #12
 80015e2:	4619      	mov	r1, r3
 80015e4:	4807      	ldr	r0, [pc, #28]	; (8001604 <MX_TIM4_Init+0xf0>)
 80015e6:	f00d f8ab 	bl	800e740 <HAL_TIM_PWM_ConfigChannel>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80015f0:	f000 faec 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80015f4:	4803      	ldr	r0, [pc, #12]	; (8001604 <MX_TIM4_Init+0xf0>)
 80015f6:	f001 f80f 	bl	8002618 <HAL_TIM_MspPostInit>

}
 80015fa:	bf00      	nop
 80015fc:	3728      	adds	r7, #40	; 0x28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	24000854 	.word	0x24000854
 8001608:	40000800 	.word	0x40000800

0800160c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	; 0x28
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001612:	f107 031c 	add.w	r3, r7, #28
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800161e:	463b      	mov	r3, r7
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
 800162c:	615a      	str	r2, [r3, #20]
 800162e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001630:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <MX_TIM5_Init+0xac>)
 8001632:	4a22      	ldr	r2, [pc, #136]	; (80016bc <MX_TIM5_Init+0xb0>)
 8001634:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001636:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <MX_TIM5_Init+0xac>)
 8001638:	2200      	movs	r2, #0
 800163a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163c:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <MX_TIM5_Init+0xac>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 8001642:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <MX_TIM5_Init+0xac>)
 8001644:	225a      	movs	r2, #90	; 0x5a
 8001646:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001648:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <MX_TIM5_Init+0xac>)
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164e:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <MX_TIM5_Init+0xac>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001654:	4818      	ldr	r0, [pc, #96]	; (80016b8 <MX_TIM5_Init+0xac>)
 8001656:	f00c fefd 	bl	800e454 <HAL_TIM_PWM_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001660:	f000 fab4 	bl	8001bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800166c:	f107 031c 	add.w	r3, r7, #28
 8001670:	4619      	mov	r1, r3
 8001672:	4811      	ldr	r0, [pc, #68]	; (80016b8 <MX_TIM5_Init+0xac>)
 8001674:	f00d fd26 	bl	800f0c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800167e:	f000 faa5 	bl	8001bcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001682:	2360      	movs	r3, #96	; 0x60
 8001684:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001692:	463b      	mov	r3, r7
 8001694:	220c      	movs	r2, #12
 8001696:	4619      	mov	r1, r3
 8001698:	4807      	ldr	r0, [pc, #28]	; (80016b8 <MX_TIM5_Init+0xac>)
 800169a:	f00d f851 	bl	800e740 <HAL_TIM_PWM_ConfigChannel>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80016a4:	f000 fa92 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80016a8:	4803      	ldr	r0, [pc, #12]	; (80016b8 <MX_TIM5_Init+0xac>)
 80016aa:	f000 ffb5 	bl	8002618 <HAL_TIM_MspPostInit>

}
 80016ae:	bf00      	nop
 80016b0:	3728      	adds	r7, #40	; 0x28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	240008a0 	.word	0x240008a0
 80016bc:	40000c00 	.word	0x40000c00

080016c0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80016c4:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_TIM13_Init+0x40>)
 80016c6:	4a0f      	ldr	r2, [pc, #60]	; (8001704 <MX_TIM13_Init+0x44>)
 80016c8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 95;
 80016ca:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <MX_TIM13_Init+0x40>)
 80016cc:	225f      	movs	r2, #95	; 0x5f
 80016ce:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <MX_TIM13_Init+0x40>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80016d6:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <MX_TIM13_Init+0x40>)
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016de:	4b08      	ldr	r3, [pc, #32]	; (8001700 <MX_TIM13_Init+0x40>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_TIM13_Init+0x40>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_TIM13_Init+0x40>)
 80016ec:	f00c fe5b 	bl	800e3a6 <HAL_TIM_Base_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80016f6:	f000 fa69 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	240008ec 	.word	0x240008ec
 8001704:	40001c00 	.word	0x40001c00

08001708 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800170c:	4b22      	ldr	r3, [pc, #136]	; (8001798 <MX_UART4_Init+0x90>)
 800170e:	4a23      	ldr	r2, [pc, #140]	; (800179c <MX_UART4_Init+0x94>)
 8001710:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001712:	4b21      	ldr	r3, [pc, #132]	; (8001798 <MX_UART4_Init+0x90>)
 8001714:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001718:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800171a:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <MX_UART4_Init+0x90>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001720:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <MX_UART4_Init+0x90>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001726:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <MX_UART4_Init+0x90>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800172c:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <MX_UART4_Init+0x90>)
 800172e:	220c      	movs	r2, #12
 8001730:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001732:	4b19      	ldr	r3, [pc, #100]	; (8001798 <MX_UART4_Init+0x90>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001738:	4b17      	ldr	r3, [pc, #92]	; (8001798 <MX_UART4_Init+0x90>)
 800173a:	2200      	movs	r2, #0
 800173c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800173e:	4b16      	ldr	r3, [pc, #88]	; (8001798 <MX_UART4_Init+0x90>)
 8001740:	2200      	movs	r2, #0
 8001742:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001744:	4b14      	ldr	r3, [pc, #80]	; (8001798 <MX_UART4_Init+0x90>)
 8001746:	2200      	movs	r2, #0
 8001748:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800174a:	4b13      	ldr	r3, [pc, #76]	; (8001798 <MX_UART4_Init+0x90>)
 800174c:	2200      	movs	r2, #0
 800174e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001750:	4811      	ldr	r0, [pc, #68]	; (8001798 <MX_UART4_Init+0x90>)
 8001752:	f00d fd71 	bl	800f238 <HAL_UART_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800175c:	f000 fa36 	bl	8001bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001760:	2100      	movs	r1, #0
 8001762:	480d      	ldr	r0, [pc, #52]	; (8001798 <MX_UART4_Init+0x90>)
 8001764:	f00e fe77 	bl	8010456 <HAL_UARTEx_SetTxFifoThreshold>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800176e:	f000 fa2d 	bl	8001bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001772:	2100      	movs	r1, #0
 8001774:	4808      	ldr	r0, [pc, #32]	; (8001798 <MX_UART4_Init+0x90>)
 8001776:	f00e feac 	bl	80104d2 <HAL_UARTEx_SetRxFifoThreshold>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001780:	f000 fa24 	bl	8001bcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001784:	4804      	ldr	r0, [pc, #16]	; (8001798 <MX_UART4_Init+0x90>)
 8001786:	f00e fe2d 	bl	80103e4 <HAL_UARTEx_DisableFifoMode>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001790:	f000 fa1c 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	24000b90 	.word	0x24000b90
 800179c:	40004c00 	.word	0x40004c00

080017a0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80017a4:	4b22      	ldr	r3, [pc, #136]	; (8001830 <MX_USART6_UART_Init+0x90>)
 80017a6:	4a23      	ldr	r2, [pc, #140]	; (8001834 <MX_USART6_UART_Init+0x94>)
 80017a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80017aa:	4b21      	ldr	r3, [pc, #132]	; (8001830 <MX_USART6_UART_Init+0x90>)
 80017ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80017b2:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <MX_USART6_UART_Init+0x90>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80017b8:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <MX_USART6_UART_Init+0x90>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80017be:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <MX_USART6_UART_Init+0x90>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <MX_USART6_UART_Init+0x90>)
 80017c6:	220c      	movs	r2, #12
 80017c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ca:	4b19      	ldr	r3, [pc, #100]	; (8001830 <MX_USART6_UART_Init+0x90>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <MX_USART6_UART_Init+0x90>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017d6:	4b16      	ldr	r3, [pc, #88]	; (8001830 <MX_USART6_UART_Init+0x90>)
 80017d8:	2200      	movs	r2, #0
 80017da:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017dc:	4b14      	ldr	r3, [pc, #80]	; (8001830 <MX_USART6_UART_Init+0x90>)
 80017de:	2200      	movs	r2, #0
 80017e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017e2:	4b13      	ldr	r3, [pc, #76]	; (8001830 <MX_USART6_UART_Init+0x90>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80017e8:	4811      	ldr	r0, [pc, #68]	; (8001830 <MX_USART6_UART_Init+0x90>)
 80017ea:	f00d fd25 	bl	800f238 <HAL_UART_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80017f4:	f000 f9ea 	bl	8001bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017f8:	2100      	movs	r1, #0
 80017fa:	480d      	ldr	r0, [pc, #52]	; (8001830 <MX_USART6_UART_Init+0x90>)
 80017fc:	f00e fe2b 	bl	8010456 <HAL_UARTEx_SetTxFifoThreshold>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001806:	f000 f9e1 	bl	8001bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800180a:	2100      	movs	r1, #0
 800180c:	4808      	ldr	r0, [pc, #32]	; (8001830 <MX_USART6_UART_Init+0x90>)
 800180e:	f00e fe60 	bl	80104d2 <HAL_UARTEx_SetRxFifoThreshold>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001818:	f000 f9d8 	bl	8001bcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800181c:	4804      	ldr	r0, [pc, #16]	; (8001830 <MX_USART6_UART_Init+0x90>)
 800181e:	f00e fde1 	bl	80103e4 <HAL_UARTEx_DisableFifoMode>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001828:	f000 f9d0 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	24000c24 	.word	0x24000c24
 8001834:	40011400 	.word	0x40011400

08001838 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800183e:	4b2d      	ldr	r3, [pc, #180]	; (80018f4 <MX_DMA_Init+0xbc>)
 8001840:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001844:	4a2b      	ldr	r2, [pc, #172]	; (80018f4 <MX_DMA_Init+0xbc>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800184e:	4b29      	ldr	r3, [pc, #164]	; (80018f4 <MX_DMA_Init+0xbc>)
 8001850:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800185c:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <MX_DMA_Init+0xbc>)
 800185e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001862:	4a24      	ldr	r2, [pc, #144]	; (80018f4 <MX_DMA_Init+0xbc>)
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800186c:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <MX_DMA_Init+0xbc>)
 800186e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	2100      	movs	r1, #0
 800187e:	200b      	movs	r0, #11
 8001880:	f002 ff69 	bl	8004756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001884:	200b      	movs	r0, #11
 8001886:	f002 ff80 	bl	800478a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2100      	movs	r1, #0
 800188e:	200c      	movs	r0, #12
 8001890:	f002 ff61 	bl	8004756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001894:	200c      	movs	r0, #12
 8001896:	f002 ff78 	bl	800478a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2100      	movs	r1, #0
 800189e:	200d      	movs	r0, #13
 80018a0:	f002 ff59 	bl	8004756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80018a4:	200d      	movs	r0, #13
 80018a6:	f002 ff70 	bl	800478a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2100      	movs	r1, #0
 80018ae:	200e      	movs	r0, #14
 80018b0:	f002 ff51 	bl	8004756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80018b4:	200e      	movs	r0, #14
 80018b6:	f002 ff68 	bl	800478a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	200f      	movs	r0, #15
 80018c0:	f002 ff49 	bl	8004756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80018c4:	200f      	movs	r0, #15
 80018c6:	f002 ff60 	bl	800478a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	2010      	movs	r0, #16
 80018d0:	f002 ff41 	bl	8004756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80018d4:	2010      	movs	r0, #16
 80018d6:	f002 ff58 	bl	800478a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	2046      	movs	r0, #70	; 0x46
 80018e0:	f002 ff39 	bl	8004756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80018e4:	2046      	movs	r0, #70	; 0x46
 80018e6:	f002 ff50 	bl	800478a <HAL_NVIC_EnableIRQ>

}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	58024400 	.word	0x58024400

080018f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08c      	sub	sp, #48	; 0x30
 80018fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fe:	f107 031c 	add.w	r3, r7, #28
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800190e:	4ba7      	ldr	r3, [pc, #668]	; (8001bac <MX_GPIO_Init+0x2b4>)
 8001910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001914:	4aa5      	ldr	r2, [pc, #660]	; (8001bac <MX_GPIO_Init+0x2b4>)
 8001916:	f043 0310 	orr.w	r3, r3, #16
 800191a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800191e:	4ba3      	ldr	r3, [pc, #652]	; (8001bac <MX_GPIO_Init+0x2b4>)
 8001920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001924:	f003 0310 	and.w	r3, r3, #16
 8001928:	61bb      	str	r3, [r7, #24]
 800192a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800192c:	4b9f      	ldr	r3, [pc, #636]	; (8001bac <MX_GPIO_Init+0x2b4>)
 800192e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001932:	4a9e      	ldr	r2, [pc, #632]	; (8001bac <MX_GPIO_Init+0x2b4>)
 8001934:	f043 0320 	orr.w	r3, r3, #32
 8001938:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800193c:	4b9b      	ldr	r3, [pc, #620]	; (8001bac <MX_GPIO_Init+0x2b4>)
 800193e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001942:	f003 0320 	and.w	r3, r3, #32
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800194a:	4b98      	ldr	r3, [pc, #608]	; (8001bac <MX_GPIO_Init+0x2b4>)
 800194c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001950:	4a96      	ldr	r2, [pc, #600]	; (8001bac <MX_GPIO_Init+0x2b4>)
 8001952:	f043 0304 	orr.w	r3, r3, #4
 8001956:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800195a:	4b94      	ldr	r3, [pc, #592]	; (8001bac <MX_GPIO_Init+0x2b4>)
 800195c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001968:	4b90      	ldr	r3, [pc, #576]	; (8001bac <MX_GPIO_Init+0x2b4>)
 800196a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800196e:	4a8f      	ldr	r2, [pc, #572]	; (8001bac <MX_GPIO_Init+0x2b4>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001978:	4b8c      	ldr	r3, [pc, #560]	; (8001bac <MX_GPIO_Init+0x2b4>)
 800197a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	4b89      	ldr	r3, [pc, #548]	; (8001bac <MX_GPIO_Init+0x2b4>)
 8001988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800198c:	4a87      	ldr	r2, [pc, #540]	; (8001bac <MX_GPIO_Init+0x2b4>)
 800198e:	f043 0302 	orr.w	r3, r3, #2
 8001992:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001996:	4b85      	ldr	r3, [pc, #532]	; (8001bac <MX_GPIO_Init+0x2b4>)
 8001998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019a4:	4b81      	ldr	r3, [pc, #516]	; (8001bac <MX_GPIO_Init+0x2b4>)
 80019a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019aa:	4a80      	ldr	r2, [pc, #512]	; (8001bac <MX_GPIO_Init+0x2b4>)
 80019ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019b4:	4b7d      	ldr	r3, [pc, #500]	; (8001bac <MX_GPIO_Init+0x2b4>)
 80019b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019c2:	4b7a      	ldr	r3, [pc, #488]	; (8001bac <MX_GPIO_Init+0x2b4>)
 80019c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c8:	4a78      	ldr	r2, [pc, #480]	; (8001bac <MX_GPIO_Init+0x2b4>)
 80019ca:	f043 0308 	orr.w	r3, r3, #8
 80019ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d2:	4b76      	ldr	r3, [pc, #472]	; (8001bac <MX_GPIO_Init+0x2b4>)
 80019d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	603b      	str	r3, [r7, #0]
 80019de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	f241 5104 	movw	r1, #5380	; 0x1504
 80019e6:	4872      	ldr	r0, [pc, #456]	; (8001bb0 <MX_GPIO_Init+0x2b8>)
 80019e8:	f005 ff26 	bl	8007838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8|PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 80019ec:	2200      	movs	r2, #0
 80019ee:	f44f 4129 	mov.w	r1, #43264	; 0xa900
 80019f2:	4870      	ldr	r0, [pc, #448]	; (8001bb4 <MX_GPIO_Init+0x2bc>)
 80019f4:	f005 ff20 	bl	8007838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 80019f8:	2200      	movs	r2, #0
 80019fa:	f248 0106 	movw	r1, #32774	; 0x8006
 80019fe:	486e      	ldr	r0, [pc, #440]	; (8001bb8 <MX_GPIO_Init+0x2c0>)
 8001a00:	f005 ff1a 	bl	8007838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2130      	movs	r1, #48	; 0x30
 8001a08:	486c      	ldr	r0, [pc, #432]	; (8001bbc <MX_GPIO_Init+0x2c4>)
 8001a0a:	f005 ff15 	bl	8007838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|PYRO1_Pin, GPIO_PIN_RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2103      	movs	r1, #3
 8001a12:	486b      	ldr	r0, [pc, #428]	; (8001bc0 <MX_GPIO_Init+0x2c8>)
 8001a14:	f005 ff10 	bl	8007838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	210e      	movs	r1, #14
 8001a1c:	4869      	ldr	r0, [pc, #420]	; (8001bc4 <MX_GPIO_Init+0x2cc>)
 8001a1e:	f005 ff0b 	bl	8007838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_SET);
 8001a22:	2201      	movs	r2, #1
 8001a24:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001a28:	4867      	ldr	r0, [pc, #412]	; (8001bc8 <MX_GPIO_Init+0x2d0>)
 8001a2a:	f005 ff05 	bl	8007838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2101      	movs	r1, #1
 8001a32:	4865      	ldr	r0, [pc, #404]	; (8001bc8 <MX_GPIO_Init+0x2d0>)
 8001a34:	f005 ff00 	bl	8007838 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 8001a38:	f241 5304 	movw	r3, #5380	; 0x1504
 8001a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a46:	2300      	movs	r3, #0
 8001a48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a4a:	f107 031c 	add.w	r3, r7, #28
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4857      	ldr	r0, [pc, #348]	; (8001bb0 <MX_GPIO_Init+0x2b8>)
 8001a52:	f005 fd31 	bl	80074b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF8 PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 8001a56:	f44f 4329 	mov.w	r3, #43264	; 0xa900
 8001a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2300      	movs	r3, #0
 8001a66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a68:	f107 031c 	add.w	r3, r7, #28
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4851      	ldr	r0, [pc, #324]	; (8001bb4 <MX_GPIO_Init+0x2bc>)
 8001a70:	f005 fd22 	bl	80074b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 8001a74:	f248 0306 	movw	r3, #32774	; 0x8006
 8001a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a82:	2300      	movs	r3, #0
 8001a84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a86:	f107 031c 	add.w	r3, r7, #28
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	484a      	ldr	r0, [pc, #296]	; (8001bb8 <MX_GPIO_Init+0x2c0>)
 8001a8e:	f005 fd13 	bl	80074b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001a92:	2330      	movs	r3, #48	; 0x30
 8001a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a96:	2301      	movs	r3, #1
 8001a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa2:	f107 031c 	add.w	r3, r7, #28
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4844      	ldr	r0, [pc, #272]	; (8001bbc <MX_GPIO_Init+0x2c4>)
 8001aaa:	f005 fd05 	bl	80074b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PYRO1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|PYRO1_Pin;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aba:	2300      	movs	r3, #0
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001abe:	f107 031c 	add.w	r3, r7, #28
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	483e      	ldr	r0, [pc, #248]	; (8001bc0 <MX_GPIO_Init+0x2c8>)
 8001ac6:	f005 fcf7 	bl	80074b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 8001aca:	2304      	movs	r3, #4
 8001acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8001ad6:	f107 031c 	add.w	r3, r7, #28
 8001ada:	4619      	mov	r1, r3
 8001adc:	4838      	ldr	r0, [pc, #224]	; (8001bc0 <MX_GPIO_Init+0x2c8>)
 8001ade:	f005 fceb 	bl	80074b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 8001ae2:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aec:	2301      	movs	r3, #1
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	4619      	mov	r1, r3
 8001af6:	482f      	ldr	r0, [pc, #188]	; (8001bb4 <MX_GPIO_Init+0x2bc>)
 8001af8:	f005 fcde 	bl	80074b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 8001afc:	2301      	movs	r3, #1
 8001afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b00:	2300      	movs	r3, #0
 8001b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b04:	2301      	movs	r3, #1
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8001b08:	f107 031c 	add.w	r3, r7, #28
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	482d      	ldr	r0, [pc, #180]	; (8001bc4 <MX_GPIO_Init+0x2cc>)
 8001b10:	f005 fcd2 	bl	80074b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8001b14:	230e      	movs	r3, #14
 8001b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b20:	2300      	movs	r3, #0
 8001b22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b24:	f107 031c 	add.w	r3, r7, #28
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4826      	ldr	r0, [pc, #152]	; (8001bc4 <MX_GPIO_Init+0x2cc>)
 8001b2c:	f005 fcc4 	bl	80074b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 8001b30:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8001b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	4619      	mov	r1, r3
 8001b44:	481a      	ldr	r0, [pc, #104]	; (8001bb0 <MX_GPIO_Init+0x2b8>)
 8001b46:	f005 fcb7 	bl	80074b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0;
 8001b4a:	f240 7301 	movw	r3, #1793	; 0x701
 8001b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b50:	2301      	movs	r3, #1
 8001b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b5c:	f107 031c 	add.w	r3, r7, #28
 8001b60:	4619      	mov	r1, r3
 8001b62:	4819      	ldr	r0, [pc, #100]	; (8001bc8 <MX_GPIO_Init+0x2d0>)
 8001b64:	f005 fca8 	bl	80074b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8001b68:	2310      	movs	r3, #16
 8001b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8001b74:	f107 031c 	add.w	r3, r7, #28
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4812      	ldr	r0, [pc, #72]	; (8001bc4 <MX_GPIO_Init+0x2cc>)
 8001b7c:	f005 fc9c 	bl	80074b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001b92:	2300      	movs	r3, #0
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b96:	f107 031c 	add.w	r3, r7, #28
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4806      	ldr	r0, [pc, #24]	; (8001bb8 <MX_GPIO_Init+0x2c0>)
 8001b9e:	f005 fc8b 	bl	80074b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ba2:	bf00      	nop
 8001ba4:	3730      	adds	r7, #48	; 0x30
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	58024400 	.word	0x58024400
 8001bb0:	58021000 	.word	0x58021000
 8001bb4:	58021400 	.word	0x58021400
 8001bb8:	58020000 	.word	0x58020000
 8001bbc:	58020800 	.word	0x58020800
 8001bc0:	58020400 	.word	0x58020400
 8001bc4:	58021800 	.word	0x58021800
 8001bc8:	58020c00 	.word	0x58020c00

08001bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd0:	b672      	cpsid	i
}
 8001bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8001bd4:	e7fe      	b.n	8001bd4 <Error_Handler+0x8>
	...

08001bd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bde:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <HAL_MspInit+0x30>)
 8001be0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001be4:	4a08      	ldr	r2, [pc, #32]	; (8001c08 <HAL_MspInit+0x30>)
 8001be6:	f043 0302 	orr.w	r3, r3, #2
 8001bea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_MspInit+0x30>)
 8001bf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	58024400 	.word	0x58024400

08001c0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08c      	sub	sp, #48	; 0x30
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 031c 	add.w	r3, r7, #28
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a5d      	ldr	r2, [pc, #372]	; (8001da0 <HAL_ADC_MspInit+0x194>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d159      	bne.n	8001ce2 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001c2e:	4b5d      	ldr	r3, [pc, #372]	; (8001da4 <HAL_ADC_MspInit+0x198>)
 8001c30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c34:	4a5b      	ldr	r2, [pc, #364]	; (8001da4 <HAL_ADC_MspInit+0x198>)
 8001c36:	f043 0320 	orr.w	r3, r3, #32
 8001c3a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c3e:	4b59      	ldr	r3, [pc, #356]	; (8001da4 <HAL_ADC_MspInit+0x198>)
 8001c40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c44:	f003 0320 	and.w	r3, r3, #32
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4c:	4b55      	ldr	r3, [pc, #340]	; (8001da4 <HAL_ADC_MspInit+0x198>)
 8001c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c52:	4a54      	ldr	r2, [pc, #336]	; (8001da4 <HAL_ADC_MspInit+0x198>)
 8001c54:	f043 0304 	orr.w	r3, r3, #4
 8001c58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c5c:	4b51      	ldr	r3, [pc, #324]	; (8001da4 <HAL_ADC_MspInit+0x198>)
 8001c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8001c76:	f107 031c 	add.w	r3, r7, #28
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	484a      	ldr	r0, [pc, #296]	; (8001da8 <HAL_ADC_MspInit+0x19c>)
 8001c7e:	f005 fc1b 	bl	80074b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8001c82:	4b4a      	ldr	r3, [pc, #296]	; (8001dac <HAL_ADC_MspInit+0x1a0>)
 8001c84:	4a4a      	ldr	r2, [pc, #296]	; (8001db0 <HAL_ADC_MspInit+0x1a4>)
 8001c86:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001c88:	4b48      	ldr	r3, [pc, #288]	; (8001dac <HAL_ADC_MspInit+0x1a0>)
 8001c8a:	2209      	movs	r2, #9
 8001c8c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c8e:	4b47      	ldr	r3, [pc, #284]	; (8001dac <HAL_ADC_MspInit+0x1a0>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c94:	4b45      	ldr	r3, [pc, #276]	; (8001dac <HAL_ADC_MspInit+0x1a0>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c9a:	4b44      	ldr	r3, [pc, #272]	; (8001dac <HAL_ADC_MspInit+0x1a0>)
 8001c9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ca0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ca2:	4b42      	ldr	r3, [pc, #264]	; (8001dac <HAL_ADC_MspInit+0x1a0>)
 8001ca4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ca8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001caa:	4b40      	ldr	r3, [pc, #256]	; (8001dac <HAL_ADC_MspInit+0x1a0>)
 8001cac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cb0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001cb2:	4b3e      	ldr	r3, [pc, #248]	; (8001dac <HAL_ADC_MspInit+0x1a0>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001cb8:	4b3c      	ldr	r3, [pc, #240]	; (8001dac <HAL_ADC_MspInit+0x1a0>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cbe:	4b3b      	ldr	r3, [pc, #236]	; (8001dac <HAL_ADC_MspInit+0x1a0>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001cc4:	4839      	ldr	r0, [pc, #228]	; (8001dac <HAL_ADC_MspInit+0x1a0>)
 8001cc6:	f002 fd7b 	bl	80047c0 <HAL_DMA_Init>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001cd0:	f7ff ff7c 	bl	8001bcc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a35      	ldr	r2, [pc, #212]	; (8001dac <HAL_ADC_MspInit+0x1a0>)
 8001cd8:	659a      	str	r2, [r3, #88]	; 0x58
 8001cda:	4a34      	ldr	r2, [pc, #208]	; (8001dac <HAL_ADC_MspInit+0x1a0>)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001ce0:	e059      	b.n	8001d96 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a33      	ldr	r2, [pc, #204]	; (8001db4 <HAL_ADC_MspInit+0x1a8>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d154      	bne.n	8001d96 <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001cec:	4b2d      	ldr	r3, [pc, #180]	; (8001da4 <HAL_ADC_MspInit+0x198>)
 8001cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf2:	4a2c      	ldr	r2, [pc, #176]	; (8001da4 <HAL_ADC_MspInit+0x198>)
 8001cf4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cfc:	4b29      	ldr	r3, [pc, #164]	; (8001da4 <HAL_ADC_MspInit+0x198>)
 8001cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d0a:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <HAL_ADC_MspInit+0x198>)
 8001d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d10:	4a24      	ldr	r2, [pc, #144]	; (8001da4 <HAL_ADC_MspInit+0x198>)
 8001d12:	f043 0304 	orr.w	r3, r3, #4
 8001d16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d1a:	4b22      	ldr	r3, [pc, #136]	; (8001da4 <HAL_ADC_MspInit+0x198>)
 8001d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001d28:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001d2c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001d30:	f001 f8b0 	bl	8002e94 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8001d34:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <HAL_ADC_MspInit+0x1ac>)
 8001d36:	4a21      	ldr	r2, [pc, #132]	; (8001dbc <HAL_ADC_MspInit+0x1b0>)
 8001d38:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001d3a:	4b1f      	ldr	r3, [pc, #124]	; (8001db8 <HAL_ADC_MspInit+0x1ac>)
 8001d3c:	2273      	movs	r2, #115	; 0x73
 8001d3e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d40:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <HAL_ADC_MspInit+0x1ac>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d46:	4b1c      	ldr	r3, [pc, #112]	; (8001db8 <HAL_ADC_MspInit+0x1ac>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <HAL_ADC_MspInit+0x1ac>)
 8001d4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d52:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d54:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <HAL_ADC_MspInit+0x1ac>)
 8001d56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d5a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d5c:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <HAL_ADC_MspInit+0x1ac>)
 8001d5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d62:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001d64:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <HAL_ADC_MspInit+0x1ac>)
 8001d66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d6a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_ADC_MspInit+0x1ac>)
 8001d6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d72:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d74:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <HAL_ADC_MspInit+0x1ac>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001d7a:	480f      	ldr	r0, [pc, #60]	; (8001db8 <HAL_ADC_MspInit+0x1ac>)
 8001d7c:	f002 fd20 	bl	80047c0 <HAL_DMA_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8001d86:	f7ff ff21 	bl	8001bcc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <HAL_ADC_MspInit+0x1ac>)
 8001d8e:	659a      	str	r2, [r3, #88]	; 0x58
 8001d90:	4a09      	ldr	r2, [pc, #36]	; (8001db8 <HAL_ADC_MspInit+0x1ac>)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001d96:	bf00      	nop
 8001d98:	3730      	adds	r7, #48	; 0x30
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40022000 	.word	0x40022000
 8001da4:	58024400 	.word	0x58024400
 8001da8:	58020800 	.word	0x58020800
 8001dac:	240003c4 	.word	0x240003c4
 8001db0:	40020088 	.word	0x40020088
 8001db4:	58026000 	.word	0x58026000
 8001db8:	2400043c 	.word	0x2400043c
 8001dbc:	400204b8 	.word	0x400204b8

08001dc0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b0b8      	sub	sp, #224	; 0xe0
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dd8:	f107 0310 	add.w	r3, r7, #16
 8001ddc:	22b8      	movs	r2, #184	; 0xb8
 8001dde:	2100      	movs	r1, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f014 fc08 	bl	80165f6 <memset>
  if(hfdcan->Instance==FDCAN3)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a2a      	ldr	r2, [pc, #168]	; (8001e94 <HAL_FDCAN_MspInit+0xd4>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d14d      	bne.n	8001e8c <HAL_FDCAN_MspInit+0xcc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001df0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001dfc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001e00:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e02:	f107 0310 	add.w	r3, r7, #16
 8001e06:	4618      	mov	r0, r3
 8001e08:	f008 f944 	bl	800a094 <HAL_RCCEx_PeriphCLKConfig>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8001e12:	f7ff fedb 	bl	8001bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001e16:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <HAL_FDCAN_MspInit+0xd8>)
 8001e18:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e1c:	4a1e      	ldr	r2, [pc, #120]	; (8001e98 <HAL_FDCAN_MspInit+0xd8>)
 8001e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e22:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001e26:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <HAL_FDCAN_MspInit+0xd8>)
 8001e28:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e34:	4b18      	ldr	r3, [pc, #96]	; (8001e98 <HAL_FDCAN_MspInit+0xd8>)
 8001e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e3a:	4a17      	ldr	r2, [pc, #92]	; (8001e98 <HAL_FDCAN_MspInit+0xd8>)
 8001e3c:	f043 0320 	orr.w	r3, r3, #32
 8001e40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e44:	4b14      	ldr	r3, [pc, #80]	; (8001e98 <HAL_FDCAN_MspInit+0xd8>)
 8001e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e4a:	f003 0320 	and.w	r3, r3, #32
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e52:	23c0      	movs	r3, #192	; 0xc0
 8001e54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e74:	4619      	mov	r1, r3
 8001e76:	4809      	ldr	r0, [pc, #36]	; (8001e9c <HAL_FDCAN_MspInit+0xdc>)
 8001e78:	f005 fb1e 	bl	80074b8 <HAL_GPIO_Init>

    /* FDCAN3 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2100      	movs	r1, #0
 8001e80:	209f      	movs	r0, #159	; 0x9f
 8001e82:	f002 fc68 	bl	8004756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8001e86:	209f      	movs	r0, #159	; 0x9f
 8001e88:	f002 fc7f 	bl	800478a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8001e8c:	bf00      	nop
 8001e8e:	37e0      	adds	r7, #224	; 0xe0
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	4000d400 	.word	0x4000d400
 8001e98:	58024400 	.word	0x58024400
 8001e9c:	58021400 	.word	0x58021400

08001ea0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b0b8      	sub	sp, #224	; 0xe0
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eb8:	f107 0310 	add.w	r3, r7, #16
 8001ebc:	22b8      	movs	r2, #184	; 0xb8
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f014 fb98 	bl	80165f6 <memset>
  if(hi2c->Instance==I2C2)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a2a      	ldr	r2, [pc, #168]	; (8001f74 <HAL_I2C_MspInit+0xd4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d14d      	bne.n	8001f6c <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ed0:	f04f 0208 	mov.w	r2, #8
 8001ed4:	f04f 0300 	mov.w	r3, #0
 8001ed8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ee2:	f107 0310 	add.w	r3, r7, #16
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f008 f8d4 	bl	800a094 <HAL_RCCEx_PeriphCLKConfig>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001ef2:	f7ff fe6b 	bl	8001bcc <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ef6:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <HAL_I2C_MspInit+0xd8>)
 8001ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001efc:	4a1e      	ldr	r2, [pc, #120]	; (8001f78 <HAL_I2C_MspInit+0xd8>)
 8001efe:	f043 0320 	orr.w	r3, r3, #32
 8001f02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f06:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <HAL_I2C_MspInit+0xd8>)
 8001f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f0c:	f003 0320 	and.w	r3, r3, #32
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f14:	2303      	movs	r3, #3
 8001f16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f1a:	2312      	movs	r3, #18
 8001f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f26:	2300      	movs	r3, #0
 8001f28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f2c:	2304      	movs	r3, #4
 8001f2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f32:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f36:	4619      	mov	r1, r3
 8001f38:	4810      	ldr	r0, [pc, #64]	; (8001f7c <HAL_I2C_MspInit+0xdc>)
 8001f3a:	f005 fabd 	bl	80074b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <HAL_I2C_MspInit+0xd8>)
 8001f40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f44:	4a0c      	ldr	r2, [pc, #48]	; (8001f78 <HAL_I2C_MspInit+0xd8>)
 8001f46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <HAL_I2C_MspInit+0xd8>)
 8001f50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2101      	movs	r1, #1
 8001f60:	2021      	movs	r0, #33	; 0x21
 8001f62:	f002 fbf8 	bl	8004756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001f66:	2021      	movs	r0, #33	; 0x21
 8001f68:	f002 fc0f 	bl	800478a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f6c:	bf00      	nop
 8001f6e:	37e0      	adds	r7, #224	; 0xe0
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40005800 	.word	0x40005800
 8001f78:	58024400 	.word	0x58024400
 8001f7c:	58021400 	.word	0x58021400

08001f80 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b0ba      	sub	sp, #232	; 0xe8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f98:	f107 0318 	add.w	r3, r7, #24
 8001f9c:	22b8      	movs	r2, #184	; 0xb8
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f014 fb28 	bl	80165f6 <memset>
  if(hsd->Instance==SDMMC2)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a5d      	ldr	r2, [pc, #372]	; (8002120 <HAL_SD_MspInit+0x1a0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	f040 80b3 	bne.w	8002118 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001fb2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fc2:	f107 0318 	add.w	r3, r7, #24
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f008 f864 	bl	800a094 <HAL_RCCEx_PeriphCLKConfig>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8001fd2:	f7ff fdfb 	bl	8001bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8001fd6:	4b53      	ldr	r3, [pc, #332]	; (8002124 <HAL_SD_MspInit+0x1a4>)
 8001fd8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001fdc:	4a51      	ldr	r2, [pc, #324]	; (8002124 <HAL_SD_MspInit+0x1a4>)
 8001fde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fe2:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001fe6:	4b4f      	ldr	r3, [pc, #316]	; (8002124 <HAL_SD_MspInit+0x1a4>)
 8001fe8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001fec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ff0:	617b      	str	r3, [r7, #20]
 8001ff2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ff4:	4b4b      	ldr	r3, [pc, #300]	; (8002124 <HAL_SD_MspInit+0x1a4>)
 8001ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ffa:	4a4a      	ldr	r2, [pc, #296]	; (8002124 <HAL_SD_MspInit+0x1a4>)
 8001ffc:	f043 0308 	orr.w	r3, r3, #8
 8002000:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002004:	4b47      	ldr	r3, [pc, #284]	; (8002124 <HAL_SD_MspInit+0x1a4>)
 8002006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002012:	4b44      	ldr	r3, [pc, #272]	; (8002124 <HAL_SD_MspInit+0x1a4>)
 8002014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002018:	4a42      	ldr	r2, [pc, #264]	; (8002124 <HAL_SD_MspInit+0x1a4>)
 800201a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800201e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002022:	4b40      	ldr	r3, [pc, #256]	; (8002124 <HAL_SD_MspInit+0x1a4>)
 8002024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002030:	2340      	movs	r3, #64	; 0x40
 8002032:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002036:	2302      	movs	r3, #2
 8002038:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002042:	2303      	movs	r3, #3
 8002044:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002048:	230b      	movs	r3, #11
 800204a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800204e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002052:	4619      	mov	r1, r3
 8002054:	4834      	ldr	r0, [pc, #208]	; (8002128 <HAL_SD_MspInit+0x1a8>)
 8002056:	f005 fa2f 	bl	80074b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002060:	2302      	movs	r3, #2
 8002062:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002066:	2301      	movs	r3, #1
 8002068:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206c:	2303      	movs	r3, #3
 800206e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002072:	230b      	movs	r3, #11
 8002074:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002078:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800207c:	4619      	mov	r1, r3
 800207e:	482a      	ldr	r0, [pc, #168]	; (8002128 <HAL_SD_MspInit+0x1a8>)
 8002080:	f005 fa1a 	bl	80074b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002084:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002088:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002092:	2301      	movs	r3, #1
 8002094:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002098:	2303      	movs	r3, #3
 800209a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800209e:	230b      	movs	r3, #11
 80020a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020a8:	4619      	mov	r1, r3
 80020aa:	4820      	ldr	r0, [pc, #128]	; (800212c <HAL_SD_MspInit+0x1ac>)
 80020ac:	f005 fa04 	bl	80074b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b8:	2302      	movs	r3, #2
 80020ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c4:	2303      	movs	r3, #3
 80020c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80020ca:	230b      	movs	r3, #11
 80020cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020d4:	4619      	mov	r1, r3
 80020d6:	4815      	ldr	r0, [pc, #84]	; (800212c <HAL_SD_MspInit+0x1ac>)
 80020d8:	f005 f9ee 	bl	80074b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80020dc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80020e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e4:	2302      	movs	r3, #2
 80020e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f0:	2303      	movs	r3, #3
 80020f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 80020f6:	230a      	movs	r3, #10
 80020f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002100:	4619      	mov	r1, r3
 8002102:	480a      	ldr	r0, [pc, #40]	; (800212c <HAL_SD_MspInit+0x1ac>)
 8002104:	f005 f9d8 	bl	80074b8 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8002108:	2200      	movs	r2, #0
 800210a:	2100      	movs	r1, #0
 800210c:	207c      	movs	r0, #124	; 0x7c
 800210e:	f002 fb22 	bl	8004756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8002112:	207c      	movs	r0, #124	; 0x7c
 8002114:	f002 fb39 	bl	800478a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8002118:	bf00      	nop
 800211a:	37e8      	adds	r7, #232	; 0xe8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	48022400 	.word	0x48022400
 8002124:	58024400 	.word	0x58024400
 8002128:	58020c00 	.word	0x58020c00
 800212c:	58021800 	.word	0x58021800

08002130 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08e      	sub	sp, #56	; 0x38
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a4f      	ldr	r2, [pc, #316]	; (800228c <HAL_SPI_MspInit+0x15c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d12e      	bne.n	80021b0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002152:	4b4f      	ldr	r3, [pc, #316]	; (8002290 <HAL_SPI_MspInit+0x160>)
 8002154:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002158:	4a4d      	ldr	r2, [pc, #308]	; (8002290 <HAL_SPI_MspInit+0x160>)
 800215a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800215e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002162:	4b4b      	ldr	r3, [pc, #300]	; (8002290 <HAL_SPI_MspInit+0x160>)
 8002164:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002168:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800216c:	623b      	str	r3, [r7, #32]
 800216e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002170:	4b47      	ldr	r3, [pc, #284]	; (8002290 <HAL_SPI_MspInit+0x160>)
 8002172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002176:	4a46      	ldr	r2, [pc, #280]	; (8002290 <HAL_SPI_MspInit+0x160>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002180:	4b43      	ldr	r3, [pc, #268]	; (8002290 <HAL_SPI_MspInit+0x160>)
 8002182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	61fb      	str	r3, [r7, #28]
 800218c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800218e:	23e0      	movs	r3, #224	; 0xe0
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002192:	2302      	movs	r3, #2
 8002194:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219a:	2300      	movs	r3, #0
 800219c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800219e:	2305      	movs	r3, #5
 80021a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a6:	4619      	mov	r1, r3
 80021a8:	483a      	ldr	r0, [pc, #232]	; (8002294 <HAL_SPI_MspInit+0x164>)
 80021aa:	f005 f985 	bl	80074b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80021ae:	e068      	b.n	8002282 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a38      	ldr	r2, [pc, #224]	; (8002298 <HAL_SPI_MspInit+0x168>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d12f      	bne.n	800221a <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021ba:	4b35      	ldr	r3, [pc, #212]	; (8002290 <HAL_SPI_MspInit+0x160>)
 80021bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021c0:	4a33      	ldr	r2, [pc, #204]	; (8002290 <HAL_SPI_MspInit+0x160>)
 80021c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021ca:	4b31      	ldr	r3, [pc, #196]	; (8002290 <HAL_SPI_MspInit+0x160>)
 80021cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d4:	61bb      	str	r3, [r7, #24]
 80021d6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d8:	4b2d      	ldr	r3, [pc, #180]	; (8002290 <HAL_SPI_MspInit+0x160>)
 80021da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021de:	4a2c      	ldr	r2, [pc, #176]	; (8002290 <HAL_SPI_MspInit+0x160>)
 80021e0:	f043 0302 	orr.w	r3, r3, #2
 80021e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021e8:	4b29      	ldr	r3, [pc, #164]	; (8002290 <HAL_SPI_MspInit+0x160>)
 80021ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80021f6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fc:	2302      	movs	r3, #2
 80021fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002204:	2300      	movs	r3, #0
 8002206:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002208:	2305      	movs	r3, #5
 800220a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800220c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002210:	4619      	mov	r1, r3
 8002212:	4822      	ldr	r0, [pc, #136]	; (800229c <HAL_SPI_MspInit+0x16c>)
 8002214:	f005 f950 	bl	80074b8 <HAL_GPIO_Init>
}
 8002218:	e033      	b.n	8002282 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a20      	ldr	r2, [pc, #128]	; (80022a0 <HAL_SPI_MspInit+0x170>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d12e      	bne.n	8002282 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002224:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <HAL_SPI_MspInit+0x160>)
 8002226:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800222a:	4a19      	ldr	r2, [pc, #100]	; (8002290 <HAL_SPI_MspInit+0x160>)
 800222c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002230:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002234:	4b16      	ldr	r3, [pc, #88]	; (8002290 <HAL_SPI_MspInit+0x160>)
 8002236:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800223a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002242:	4b13      	ldr	r3, [pc, #76]	; (8002290 <HAL_SPI_MspInit+0x160>)
 8002244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002248:	4a11      	ldr	r2, [pc, #68]	; (8002290 <HAL_SPI_MspInit+0x160>)
 800224a:	f043 0304 	orr.w	r3, r3, #4
 800224e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002252:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <HAL_SPI_MspInit+0x160>)
 8002254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002260:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002266:	2302      	movs	r3, #2
 8002268:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226e:	2300      	movs	r3, #0
 8002270:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002272:	2306      	movs	r3, #6
 8002274:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800227a:	4619      	mov	r1, r3
 800227c:	4809      	ldr	r0, [pc, #36]	; (80022a4 <HAL_SPI_MspInit+0x174>)
 800227e:	f005 f91b 	bl	80074b8 <HAL_GPIO_Init>
}
 8002282:	bf00      	nop
 8002284:	3738      	adds	r7, #56	; 0x38
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40013000 	.word	0x40013000
 8002290:	58024400 	.word	0x58024400
 8002294:	58020000 	.word	0x58020000
 8002298:	40003800 	.word	0x40003800
 800229c:	58020400 	.word	0x58020400
 80022a0:	40003c00 	.word	0x40003c00
 80022a4:	58020800 	.word	0x58020800

080022a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08c      	sub	sp, #48	; 0x30
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b0:	f107 031c 	add.w	r3, r7, #28
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c8:	d15d      	bne.n	8002386 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022ca:	4b8e      	ldr	r3, [pc, #568]	; (8002504 <HAL_TIM_PWM_MspInit+0x25c>)
 80022cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022d0:	4a8c      	ldr	r2, [pc, #560]	; (8002504 <HAL_TIM_PWM_MspInit+0x25c>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022da:	4b8a      	ldr	r3, [pc, #552]	; (8002504 <HAL_TIM_PWM_MspInit+0x25c>)
 80022dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	61bb      	str	r3, [r7, #24]
 80022e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e8:	4b86      	ldr	r3, [pc, #536]	; (8002504 <HAL_TIM_PWM_MspInit+0x25c>)
 80022ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ee:	4a85      	ldr	r2, [pc, #532]	; (8002504 <HAL_TIM_PWM_MspInit+0x25c>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022f8:	4b82      	ldr	r3, [pc, #520]	; (8002504 <HAL_TIM_PWM_MspInit+0x25c>)
 80022fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002306:	2301      	movs	r3, #1
 8002308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230a:	2302      	movs	r3, #2
 800230c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002312:	2300      	movs	r3, #0
 8002314:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002316:	2301      	movs	r3, #1
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231a:	f107 031c 	add.w	r3, r7, #28
 800231e:	4619      	mov	r1, r3
 8002320:	4879      	ldr	r0, [pc, #484]	; (8002508 <HAL_TIM_PWM_MspInit+0x260>)
 8002322:	f005 f8c9 	bl	80074b8 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8002326:	4b79      	ldr	r3, [pc, #484]	; (800250c <HAL_TIM_PWM_MspInit+0x264>)
 8002328:	4a79      	ldr	r2, [pc, #484]	; (8002510 <HAL_TIM_PWM_MspInit+0x268>)
 800232a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 800232c:	4b77      	ldr	r3, [pc, #476]	; (800250c <HAL_TIM_PWM_MspInit+0x264>)
 800232e:	2214      	movs	r2, #20
 8002330:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002332:	4b76      	ldr	r3, [pc, #472]	; (800250c <HAL_TIM_PWM_MspInit+0x264>)
 8002334:	2240      	movs	r2, #64	; 0x40
 8002336:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002338:	4b74      	ldr	r3, [pc, #464]	; (800250c <HAL_TIM_PWM_MspInit+0x264>)
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800233e:	4b73      	ldr	r3, [pc, #460]	; (800250c <HAL_TIM_PWM_MspInit+0x264>)
 8002340:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002344:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002346:	4b71      	ldr	r3, [pc, #452]	; (800250c <HAL_TIM_PWM_MspInit+0x264>)
 8002348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800234c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800234e:	4b6f      	ldr	r3, [pc, #444]	; (800250c <HAL_TIM_PWM_MspInit+0x264>)
 8002350:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002354:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8002356:	4b6d      	ldr	r3, [pc, #436]	; (800250c <HAL_TIM_PWM_MspInit+0x264>)
 8002358:	2200      	movs	r2, #0
 800235a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800235c:	4b6b      	ldr	r3, [pc, #428]	; (800250c <HAL_TIM_PWM_MspInit+0x264>)
 800235e:	2200      	movs	r2, #0
 8002360:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002362:	4b6a      	ldr	r3, [pc, #424]	; (800250c <HAL_TIM_PWM_MspInit+0x264>)
 8002364:	2200      	movs	r2, #0
 8002366:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8002368:	4868      	ldr	r0, [pc, #416]	; (800250c <HAL_TIM_PWM_MspInit+0x264>)
 800236a:	f002 fa29 	bl	80047c0 <HAL_DMA_Init>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8002374:	f7ff fc2a 	bl	8001bcc <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a64      	ldr	r2, [pc, #400]	; (800250c <HAL_TIM_PWM_MspInit+0x264>)
 800237c:	62da      	str	r2, [r3, #44]	; 0x2c
 800237e:	4a63      	ldr	r2, [pc, #396]	; (800250c <HAL_TIM_PWM_MspInit+0x264>)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002384:	e119      	b.n	80025ba <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a62      	ldr	r2, [pc, #392]	; (8002514 <HAL_TIM_PWM_MspInit+0x26c>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d16d      	bne.n	800246c <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002390:	4b5c      	ldr	r3, [pc, #368]	; (8002504 <HAL_TIM_PWM_MspInit+0x25c>)
 8002392:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002396:	4a5b      	ldr	r2, [pc, #364]	; (8002504 <HAL_TIM_PWM_MspInit+0x25c>)
 8002398:	f043 0302 	orr.w	r3, r3, #2
 800239c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023a0:	4b58      	ldr	r3, [pc, #352]	; (8002504 <HAL_TIM_PWM_MspInit+0x25c>)
 80023a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 80023ae:	4b5a      	ldr	r3, [pc, #360]	; (8002518 <HAL_TIM_PWM_MspInit+0x270>)
 80023b0:	4a5a      	ldr	r2, [pc, #360]	; (800251c <HAL_TIM_PWM_MspInit+0x274>)
 80023b2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 80023b4:	4b58      	ldr	r3, [pc, #352]	; (8002518 <HAL_TIM_PWM_MspInit+0x270>)
 80023b6:	2218      	movs	r2, #24
 80023b8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023ba:	4b57      	ldr	r3, [pc, #348]	; (8002518 <HAL_TIM_PWM_MspInit+0x270>)
 80023bc:	2240      	movs	r2, #64	; 0x40
 80023be:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80023c0:	4b55      	ldr	r3, [pc, #340]	; (8002518 <HAL_TIM_PWM_MspInit+0x270>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80023c6:	4b54      	ldr	r3, [pc, #336]	; (8002518 <HAL_TIM_PWM_MspInit+0x270>)
 80023c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023cc:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80023ce:	4b52      	ldr	r3, [pc, #328]	; (8002518 <HAL_TIM_PWM_MspInit+0x270>)
 80023d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023d4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80023d6:	4b50      	ldr	r3, [pc, #320]	; (8002518 <HAL_TIM_PWM_MspInit+0x270>)
 80023d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023dc:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 80023de:	4b4e      	ldr	r3, [pc, #312]	; (8002518 <HAL_TIM_PWM_MspInit+0x270>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80023e4:	4b4c      	ldr	r3, [pc, #304]	; (8002518 <HAL_TIM_PWM_MspInit+0x270>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023ea:	4b4b      	ldr	r3, [pc, #300]	; (8002518 <HAL_TIM_PWM_MspInit+0x270>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80023f0:	4849      	ldr	r0, [pc, #292]	; (8002518 <HAL_TIM_PWM_MspInit+0x270>)
 80023f2:	f002 f9e5 	bl	80047c0 <HAL_DMA_Init>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 80023fc:	f7ff fbe6 	bl	8001bcc <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a45      	ldr	r2, [pc, #276]	; (8002518 <HAL_TIM_PWM_MspInit+0x270>)
 8002404:	629a      	str	r2, [r3, #40]	; 0x28
 8002406:	4a44      	ldr	r2, [pc, #272]	; (8002518 <HAL_TIM_PWM_MspInit+0x270>)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 800240c:	4b44      	ldr	r3, [pc, #272]	; (8002520 <HAL_TIM_PWM_MspInit+0x278>)
 800240e:	4a45      	ldr	r2, [pc, #276]	; (8002524 <HAL_TIM_PWM_MspInit+0x27c>)
 8002410:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8002412:	4b43      	ldr	r3, [pc, #268]	; (8002520 <HAL_TIM_PWM_MspInit+0x278>)
 8002414:	2217      	movs	r2, #23
 8002416:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002418:	4b41      	ldr	r3, [pc, #260]	; (8002520 <HAL_TIM_PWM_MspInit+0x278>)
 800241a:	2240      	movs	r2, #64	; 0x40
 800241c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800241e:	4b40      	ldr	r3, [pc, #256]	; (8002520 <HAL_TIM_PWM_MspInit+0x278>)
 8002420:	2200      	movs	r2, #0
 8002422:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002424:	4b3e      	ldr	r3, [pc, #248]	; (8002520 <HAL_TIM_PWM_MspInit+0x278>)
 8002426:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800242a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800242c:	4b3c      	ldr	r3, [pc, #240]	; (8002520 <HAL_TIM_PWM_MspInit+0x278>)
 800242e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002432:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002434:	4b3a      	ldr	r3, [pc, #232]	; (8002520 <HAL_TIM_PWM_MspInit+0x278>)
 8002436:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800243a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 800243c:	4b38      	ldr	r3, [pc, #224]	; (8002520 <HAL_TIM_PWM_MspInit+0x278>)
 800243e:	2200      	movs	r2, #0
 8002440:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002442:	4b37      	ldr	r3, [pc, #220]	; (8002520 <HAL_TIM_PWM_MspInit+0x278>)
 8002444:	2200      	movs	r2, #0
 8002446:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002448:	4b35      	ldr	r3, [pc, #212]	; (8002520 <HAL_TIM_PWM_MspInit+0x278>)
 800244a:	2200      	movs	r2, #0
 800244c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 800244e:	4834      	ldr	r0, [pc, #208]	; (8002520 <HAL_TIM_PWM_MspInit+0x278>)
 8002450:	f002 f9b6 	bl	80047c0 <HAL_DMA_Init>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 800245a:	f7ff fbb7 	bl	8001bcc <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a2f      	ldr	r2, [pc, #188]	; (8002520 <HAL_TIM_PWM_MspInit+0x278>)
 8002462:	625a      	str	r2, [r3, #36]	; 0x24
 8002464:	4a2e      	ldr	r2, [pc, #184]	; (8002520 <HAL_TIM_PWM_MspInit+0x278>)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6393      	str	r3, [r2, #56]	; 0x38
}
 800246a:	e0a6      	b.n	80025ba <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a2d      	ldr	r2, [pc, #180]	; (8002528 <HAL_TIM_PWM_MspInit+0x280>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d15e      	bne.n	8002534 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002476:	4b23      	ldr	r3, [pc, #140]	; (8002504 <HAL_TIM_PWM_MspInit+0x25c>)
 8002478:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800247c:	4a21      	ldr	r2, [pc, #132]	; (8002504 <HAL_TIM_PWM_MspInit+0x25c>)
 800247e:	f043 0304 	orr.w	r3, r3, #4
 8002482:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002486:	4b1f      	ldr	r3, [pc, #124]	; (8002504 <HAL_TIM_PWM_MspInit+0x25c>)
 8002488:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8002494:	4b25      	ldr	r3, [pc, #148]	; (800252c <HAL_TIM_PWM_MspInit+0x284>)
 8002496:	4a26      	ldr	r2, [pc, #152]	; (8002530 <HAL_TIM_PWM_MspInit+0x288>)
 8002498:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 800249a:	4b24      	ldr	r3, [pc, #144]	; (800252c <HAL_TIM_PWM_MspInit+0x284>)
 800249c:	221f      	movs	r2, #31
 800249e:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024a0:	4b22      	ldr	r3, [pc, #136]	; (800252c <HAL_TIM_PWM_MspInit+0x284>)
 80024a2:	2240      	movs	r2, #64	; 0x40
 80024a4:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80024a6:	4b21      	ldr	r3, [pc, #132]	; (800252c <HAL_TIM_PWM_MspInit+0x284>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80024ac:	4b1f      	ldr	r3, [pc, #124]	; (800252c <HAL_TIM_PWM_MspInit+0x284>)
 80024ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024b2:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024b4:	4b1d      	ldr	r3, [pc, #116]	; (800252c <HAL_TIM_PWM_MspInit+0x284>)
 80024b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024ba:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024bc:	4b1b      	ldr	r3, [pc, #108]	; (800252c <HAL_TIM_PWM_MspInit+0x284>)
 80024be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024c2:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <HAL_TIM_PWM_MspInit+0x284>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80024ca:	4b18      	ldr	r3, [pc, #96]	; (800252c <HAL_TIM_PWM_MspInit+0x284>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024d0:	4b16      	ldr	r3, [pc, #88]	; (800252c <HAL_TIM_PWM_MspInit+0x284>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80024d6:	4815      	ldr	r0, [pc, #84]	; (800252c <HAL_TIM_PWM_MspInit+0x284>)
 80024d8:	f002 f972 	bl	80047c0 <HAL_DMA_Init>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 80024e2:	f7ff fb73 	bl	8001bcc <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a10      	ldr	r2, [pc, #64]	; (800252c <HAL_TIM_PWM_MspInit+0x284>)
 80024ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80024ec:	4a0f      	ldr	r2, [pc, #60]	; (800252c <HAL_TIM_PWM_MspInit+0x284>)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80024f2:	2200      	movs	r2, #0
 80024f4:	2100      	movs	r1, #0
 80024f6:	201e      	movs	r0, #30
 80024f8:	f002 f92d 	bl	8004756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80024fc:	201e      	movs	r0, #30
 80024fe:	f002 f944 	bl	800478a <HAL_NVIC_EnableIRQ>
}
 8002502:	e05a      	b.n	80025ba <HAL_TIM_PWM_MspInit+0x312>
 8002504:	58024400 	.word	0x58024400
 8002508:	58020000 	.word	0x58020000
 800250c:	24000938 	.word	0x24000938
 8002510:	40020028 	.word	0x40020028
 8002514:	40000400 	.word	0x40000400
 8002518:	240009b0 	.word	0x240009b0
 800251c:	40020058 	.word	0x40020058
 8002520:	24000a28 	.word	0x24000a28
 8002524:	40020070 	.word	0x40020070
 8002528:	40000800 	.word	0x40000800
 800252c:	24000aa0 	.word	0x24000aa0
 8002530:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a22      	ldr	r2, [pc, #136]	; (80025c4 <HAL_TIM_PWM_MspInit+0x31c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d13d      	bne.n	80025ba <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800253e:	4b22      	ldr	r3, [pc, #136]	; (80025c8 <HAL_TIM_PWM_MspInit+0x320>)
 8002540:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002544:	4a20      	ldr	r2, [pc, #128]	; (80025c8 <HAL_TIM_PWM_MspInit+0x320>)
 8002546:	f043 0308 	orr.w	r3, r3, #8
 800254a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800254e:	4b1e      	ldr	r3, [pc, #120]	; (80025c8 <HAL_TIM_PWM_MspInit+0x320>)
 8002550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 800255c:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <HAL_TIM_PWM_MspInit+0x324>)
 800255e:	4a1c      	ldr	r2, [pc, #112]	; (80025d0 <HAL_TIM_PWM_MspInit+0x328>)
 8002560:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8002562:	4b1a      	ldr	r3, [pc, #104]	; (80025cc <HAL_TIM_PWM_MspInit+0x324>)
 8002564:	223a      	movs	r2, #58	; 0x3a
 8002566:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002568:	4b18      	ldr	r3, [pc, #96]	; (80025cc <HAL_TIM_PWM_MspInit+0x324>)
 800256a:	2240      	movs	r2, #64	; 0x40
 800256c:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800256e:	4b17      	ldr	r3, [pc, #92]	; (80025cc <HAL_TIM_PWM_MspInit+0x324>)
 8002570:	2200      	movs	r2, #0
 8002572:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002574:	4b15      	ldr	r3, [pc, #84]	; (80025cc <HAL_TIM_PWM_MspInit+0x324>)
 8002576:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800257a:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800257c:	4b13      	ldr	r3, [pc, #76]	; (80025cc <HAL_TIM_PWM_MspInit+0x324>)
 800257e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002582:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002584:	4b11      	ldr	r3, [pc, #68]	; (80025cc <HAL_TIM_PWM_MspInit+0x324>)
 8002586:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800258a:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 800258c:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <HAL_TIM_PWM_MspInit+0x324>)
 800258e:	2200      	movs	r2, #0
 8002590:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002592:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <HAL_TIM_PWM_MspInit+0x324>)
 8002594:	2200      	movs	r2, #0
 8002596:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002598:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <HAL_TIM_PWM_MspInit+0x324>)
 800259a:	2200      	movs	r2, #0
 800259c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 800259e:	480b      	ldr	r0, [pc, #44]	; (80025cc <HAL_TIM_PWM_MspInit+0x324>)
 80025a0:	f002 f90e 	bl	80047c0 <HAL_DMA_Init>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 80025aa:	f7ff fb0f 	bl	8001bcc <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a06      	ldr	r2, [pc, #24]	; (80025cc <HAL_TIM_PWM_MspInit+0x324>)
 80025b2:	631a      	str	r2, [r3, #48]	; 0x30
 80025b4:	4a05      	ldr	r2, [pc, #20]	; (80025cc <HAL_TIM_PWM_MspInit+0x324>)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80025ba:	bf00      	nop
 80025bc:	3730      	adds	r7, #48	; 0x30
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40000c00 	.word	0x40000c00
 80025c8:	58024400 	.word	0x58024400
 80025cc:	24000b18 	.word	0x24000b18
 80025d0:	40020040 	.word	0x40020040

080025d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a0b      	ldr	r2, [pc, #44]	; (8002610 <HAL_TIM_Base_MspInit+0x3c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d10e      	bne.n	8002604 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80025e6:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_TIM_Base_MspInit+0x40>)
 80025e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025ec:	4a09      	ldr	r2, [pc, #36]	; (8002614 <HAL_TIM_Base_MspInit+0x40>)
 80025ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025f6:	4b07      	ldr	r3, [pc, #28]	; (8002614 <HAL_TIM_Base_MspInit+0x40>)
 80025f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8002604:	bf00      	nop
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	40001c00 	.word	0x40001c00
 8002614:	58024400 	.word	0x58024400

08002618 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08c      	sub	sp, #48	; 0x30
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	f107 031c 	add.w	r3, r7, #28
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002638:	d120      	bne.n	800267c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800263a:	4b52      	ldr	r3, [pc, #328]	; (8002784 <HAL_TIM_MspPostInit+0x16c>)
 800263c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002640:	4a50      	ldr	r2, [pc, #320]	; (8002784 <HAL_TIM_MspPostInit+0x16c>)
 8002642:	f043 0302 	orr.w	r3, r3, #2
 8002646:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800264a:	4b4e      	ldr	r3, [pc, #312]	; (8002784 <HAL_TIM_MspPostInit+0x16c>)
 800264c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	61bb      	str	r3, [r7, #24]
 8002656:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002658:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800265c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	2302      	movs	r3, #2
 8002660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002662:	2302      	movs	r3, #2
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002666:	2300      	movs	r3, #0
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800266a:	2301      	movs	r3, #1
 800266c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800266e:	f107 031c 	add.w	r3, r7, #28
 8002672:	4619      	mov	r1, r3
 8002674:	4844      	ldr	r0, [pc, #272]	; (8002788 <HAL_TIM_MspPostInit+0x170>)
 8002676:	f004 ff1f 	bl	80074b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800267a:	e07f      	b.n	800277c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a42      	ldr	r2, [pc, #264]	; (800278c <HAL_TIM_MspPostInit+0x174>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d11f      	bne.n	80026c6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002686:	4b3f      	ldr	r3, [pc, #252]	; (8002784 <HAL_TIM_MspPostInit+0x16c>)
 8002688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800268c:	4a3d      	ldr	r2, [pc, #244]	; (8002784 <HAL_TIM_MspPostInit+0x16c>)
 800268e:	f043 0302 	orr.w	r3, r3, #2
 8002692:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002696:	4b3b      	ldr	r3, [pc, #236]	; (8002784 <HAL_TIM_MspPostInit+0x16c>)
 8002698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80026a4:	2330      	movs	r3, #48	; 0x30
 80026a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	2302      	movs	r3, #2
 80026aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026ac:	2302      	movs	r3, #2
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b0:	2300      	movs	r3, #0
 80026b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026b4:	2302      	movs	r3, #2
 80026b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b8:	f107 031c 	add.w	r3, r7, #28
 80026bc:	4619      	mov	r1, r3
 80026be:	4832      	ldr	r0, [pc, #200]	; (8002788 <HAL_TIM_MspPostInit+0x170>)
 80026c0:	f004 fefa 	bl	80074b8 <HAL_GPIO_Init>
}
 80026c4:	e05a      	b.n	800277c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a31      	ldr	r2, [pc, #196]	; (8002790 <HAL_TIM_MspPostInit+0x178>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d131      	bne.n	8002734 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026d0:	4b2c      	ldr	r3, [pc, #176]	; (8002784 <HAL_TIM_MspPostInit+0x16c>)
 80026d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026d6:	4a2b      	ldr	r2, [pc, #172]	; (8002784 <HAL_TIM_MspPostInit+0x16c>)
 80026d8:	f043 0308 	orr.w	r3, r3, #8
 80026dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026e0:	4b28      	ldr	r3, [pc, #160]	; (8002784 <HAL_TIM_MspPostInit+0x16c>)
 80026e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80026ee:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80026f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f4:	2302      	movs	r3, #2
 80026f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fc:	2300      	movs	r3, #0
 80026fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002700:	2302      	movs	r3, #2
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002704:	f107 031c 	add.w	r3, r7, #28
 8002708:	4619      	mov	r1, r3
 800270a:	4822      	ldr	r0, [pc, #136]	; (8002794 <HAL_TIM_MspPostInit+0x17c>)
 800270c:	f004 fed4 	bl	80074b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002710:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002716:	2302      	movs	r3, #2
 8002718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800271a:	2302      	movs	r3, #2
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271e:	2300      	movs	r3, #0
 8002720:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002722:	2302      	movs	r3, #2
 8002724:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002726:	f107 031c 	add.w	r3, r7, #28
 800272a:	4619      	mov	r1, r3
 800272c:	4819      	ldr	r0, [pc, #100]	; (8002794 <HAL_TIM_MspPostInit+0x17c>)
 800272e:	f004 fec3 	bl	80074b8 <HAL_GPIO_Init>
}
 8002732:	e023      	b.n	800277c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a17      	ldr	r2, [pc, #92]	; (8002798 <HAL_TIM_MspPostInit+0x180>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d11e      	bne.n	800277c <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273e:	4b11      	ldr	r3, [pc, #68]	; (8002784 <HAL_TIM_MspPostInit+0x16c>)
 8002740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002744:	4a0f      	ldr	r2, [pc, #60]	; (8002784 <HAL_TIM_MspPostInit+0x16c>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800274e:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <HAL_TIM_MspPostInit+0x16c>)
 8002750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800275c:	2308      	movs	r3, #8
 800275e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002760:	2302      	movs	r3, #2
 8002762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002764:	2302      	movs	r3, #2
 8002766:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002768:	2300      	movs	r3, #0
 800276a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800276c:	2302      	movs	r3, #2
 800276e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002770:	f107 031c 	add.w	r3, r7, #28
 8002774:	4619      	mov	r1, r3
 8002776:	4809      	ldr	r0, [pc, #36]	; (800279c <HAL_TIM_MspPostInit+0x184>)
 8002778:	f004 fe9e 	bl	80074b8 <HAL_GPIO_Init>
}
 800277c:	bf00      	nop
 800277e:	3730      	adds	r7, #48	; 0x30
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	58024400 	.word	0x58024400
 8002788:	58020400 	.word	0x58020400
 800278c:	40000400 	.word	0x40000400
 8002790:	40000800 	.word	0x40000800
 8002794:	58020c00 	.word	0x58020c00
 8002798:	40000c00 	.word	0x40000c00
 800279c:	58020000 	.word	0x58020000

080027a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b0ba      	sub	sp, #232	; 0xe8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027b8:	f107 0318 	add.w	r3, r7, #24
 80027bc:	22b8      	movs	r2, #184	; 0xb8
 80027be:	2100      	movs	r1, #0
 80027c0:	4618      	mov	r0, r3
 80027c2:	f013 ff18 	bl	80165f6 <memset>
  if(huart->Instance==UART4)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a4d      	ldr	r2, [pc, #308]	; (8002900 <HAL_UART_MspInit+0x160>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d147      	bne.n	8002860 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80027d0:	f04f 0202 	mov.w	r2, #2
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80027dc:	2300      	movs	r3, #0
 80027de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027e2:	f107 0318 	add.w	r3, r7, #24
 80027e6:	4618      	mov	r0, r3
 80027e8:	f007 fc54 	bl	800a094 <HAL_RCCEx_PeriphCLKConfig>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80027f2:	f7ff f9eb 	bl	8001bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80027f6:	4b43      	ldr	r3, [pc, #268]	; (8002904 <HAL_UART_MspInit+0x164>)
 80027f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027fc:	4a41      	ldr	r2, [pc, #260]	; (8002904 <HAL_UART_MspInit+0x164>)
 80027fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002802:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002806:	4b3f      	ldr	r3, [pc, #252]	; (8002904 <HAL_UART_MspInit+0x164>)
 8002808:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800280c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002814:	4b3b      	ldr	r3, [pc, #236]	; (8002904 <HAL_UART_MspInit+0x164>)
 8002816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800281a:	4a3a      	ldr	r2, [pc, #232]	; (8002904 <HAL_UART_MspInit+0x164>)
 800281c:	f043 0302 	orr.w	r3, r3, #2
 8002820:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002824:	4b37      	ldr	r3, [pc, #220]	; (8002904 <HAL_UART_MspInit+0x164>)
 8002826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002832:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002836:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283a:	2302      	movs	r3, #2
 800283c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002846:	2300      	movs	r3, #0
 8002848:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800284c:	2308      	movs	r3, #8
 800284e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002852:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002856:	4619      	mov	r1, r3
 8002858:	482b      	ldr	r0, [pc, #172]	; (8002908 <HAL_UART_MspInit+0x168>)
 800285a:	f004 fe2d 	bl	80074b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800285e:	e04a      	b.n	80028f6 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a29      	ldr	r2, [pc, #164]	; (800290c <HAL_UART_MspInit+0x16c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d145      	bne.n	80028f6 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800286a:	f04f 0201 	mov.w	r2, #1
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002876:	2300      	movs	r3, #0
 8002878:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800287c:	f107 0318 	add.w	r3, r7, #24
 8002880:	4618      	mov	r0, r3
 8002882:	f007 fc07 	bl	800a094 <HAL_RCCEx_PeriphCLKConfig>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 800288c:	f7ff f99e 	bl	8001bcc <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002890:	4b1c      	ldr	r3, [pc, #112]	; (8002904 <HAL_UART_MspInit+0x164>)
 8002892:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002896:	4a1b      	ldr	r2, [pc, #108]	; (8002904 <HAL_UART_MspInit+0x164>)
 8002898:	f043 0320 	orr.w	r3, r3, #32
 800289c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80028a0:	4b18      	ldr	r3, [pc, #96]	; (8002904 <HAL_UART_MspInit+0x164>)
 80028a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028a6:	f003 0320 	and.w	r3, r3, #32
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ae:	4b15      	ldr	r3, [pc, #84]	; (8002904 <HAL_UART_MspInit+0x164>)
 80028b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028b4:	4a13      	ldr	r2, [pc, #76]	; (8002904 <HAL_UART_MspInit+0x164>)
 80028b6:	f043 0304 	orr.w	r3, r3, #4
 80028ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028be:	4b11      	ldr	r3, [pc, #68]	; (8002904 <HAL_UART_MspInit+0x164>)
 80028c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028cc:	23c0      	movs	r3, #192	; 0xc0
 80028ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d2:	2302      	movs	r3, #2
 80028d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028de:	2300      	movs	r3, #0
 80028e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80028e4:	2307      	movs	r3, #7
 80028e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80028ee:	4619      	mov	r1, r3
 80028f0:	4807      	ldr	r0, [pc, #28]	; (8002910 <HAL_UART_MspInit+0x170>)
 80028f2:	f004 fde1 	bl	80074b8 <HAL_GPIO_Init>
}
 80028f6:	bf00      	nop
 80028f8:	37e8      	adds	r7, #232	; 0xe8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40004c00 	.word	0x40004c00
 8002904:	58024400 	.word	0x58024400
 8002908:	58020400 	.word	0x58020400
 800290c:	40011400 	.word	0x40011400
 8002910:	58020800 	.word	0x58020800

08002914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002918:	e7fe      	b.n	8002918 <NMI_Handler+0x4>

0800291a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800291a:	b480      	push	{r7}
 800291c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800291e:	e7fe      	b.n	800291e <HardFault_Handler+0x4>

08002920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002924:	e7fe      	b.n	8002924 <MemManage_Handler+0x4>

08002926 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002926:	b480      	push	{r7}
 8002928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800292a:	e7fe      	b.n	800292a <BusFault_Handler+0x4>

0800292c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002930:	e7fe      	b.n	8002930 <UsageFault_Handler+0x4>

08002932 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002932:	b480      	push	{r7}
 8002934:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800294e:	b480      	push	{r7}
 8002950:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002960:	f000 fa54 	bl	8002e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002964:	bf00      	nop
 8002966:	bd80      	pop	{r7, pc}

08002968 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 800296c:	4802      	ldr	r0, [pc, #8]	; (8002978 <DMA1_Stream0_IRQHandler+0x10>)
 800296e:	f002 fa7f 	bl	8004e70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	24000aa0 	.word	0x24000aa0

0800297c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8002980:	4802      	ldr	r0, [pc, #8]	; (800298c <DMA1_Stream1_IRQHandler+0x10>)
 8002982:	f002 fa75 	bl	8004e70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	24000938 	.word	0x24000938

08002990 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8002994:	4802      	ldr	r0, [pc, #8]	; (80029a0 <DMA1_Stream2_IRQHandler+0x10>)
 8002996:	f002 fa6b 	bl	8004e70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	24000b18 	.word	0x24000b18

080029a4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80029a8:	4802      	ldr	r0, [pc, #8]	; (80029b4 <DMA1_Stream3_IRQHandler+0x10>)
 80029aa:	f002 fa61 	bl	8004e70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	240009b0 	.word	0x240009b0

080029b8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 80029bc:	4802      	ldr	r0, [pc, #8]	; (80029c8 <DMA1_Stream4_IRQHandler+0x10>)
 80029be:	f002 fa57 	bl	8004e70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	24000a28 	.word	0x24000a28

080029cc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80029d0:	4802      	ldr	r0, [pc, #8]	; (80029dc <DMA1_Stream5_IRQHandler+0x10>)
 80029d2:	f002 fa4d 	bl	8004e70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	240003c4 	.word	0x240003c4

080029e0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80029e4:	4802      	ldr	r0, [pc, #8]	; (80029f0 <TIM4_IRQHandler+0x10>)
 80029e6:	f00b fd8c 	bl	800e502 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	24000854 	.word	0x24000854

080029f4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80029f8:	4802      	ldr	r0, [pc, #8]	; (8002a04 <I2C2_EV_IRQHandler+0x10>)
 80029fa:	f004 ffc7 	bl	800798c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	24000554 	.word	0x24000554

08002a08 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002a0c:	4802      	ldr	r0, [pc, #8]	; (8002a18 <DMA2_Stream7_IRQHandler+0x10>)
 8002a0e:	f002 fa2f 	bl	8004e70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	2400043c 	.word	0x2400043c

08002a1c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002a20:	4802      	ldr	r0, [pc, #8]	; (8002a2c <OTG_HS_IRQHandler+0x10>)
 8002a22:	f005 f9bd 	bl	8007da0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	24002220 	.word	0x24002220

08002a30 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8002a34:	4802      	ldr	r0, [pc, #8]	; (8002a40 <SDMMC2_IRQHandler+0x10>)
 8002a36:	f00a f983 	bl	800cd40 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	240005a8 	.word	0x240005a8

08002a44 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8002a48:	4802      	ldr	r0, [pc, #8]	; (8002a54 <FDCAN3_IT0_IRQHandler+0x10>)
 8002a4a:	f004 f839 	bl	8006ac0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	240004b4 	.word	0x240004b4

08002a58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  return 1;
 8002a5c:	2301      	movs	r3, #1
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <_kill>:

int _kill(int pid, int sig)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a72:	f013 fe13 	bl	801669c <__errno>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2216      	movs	r2, #22
 8002a7a:	601a      	str	r2, [r3, #0]
  return -1;
 8002a7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <_exit>:

void _exit (int status)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a90:	f04f 31ff 	mov.w	r1, #4294967295
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff ffe7 	bl	8002a68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a9a:	e7fe      	b.n	8002a9a <_exit+0x12>

08002a9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	e00a      	b.n	8002ac4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002aae:	f3af 8000 	nop.w
 8002ab2:	4601      	mov	r1, r0
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	60ba      	str	r2, [r7, #8]
 8002aba:	b2ca      	uxtb	r2, r1
 8002abc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	dbf0      	blt.n	8002aae <_read+0x12>
  }

  return len;
 8002acc:	687b      	ldr	r3, [r7, #4]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b086      	sub	sp, #24
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	60f8      	str	r0, [r7, #12]
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	e009      	b.n	8002afc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	60ba      	str	r2, [r7, #8]
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	3301      	adds	r3, #1
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	dbf1      	blt.n	8002ae8 <_write+0x12>
  }
  return len;
 8002b04:	687b      	ldr	r3, [r7, #4]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <_close>:

int _close(int file)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b36:	605a      	str	r2, [r3, #4]
  return 0;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <_isatty>:

int _isatty(int file)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b4e:	2301      	movs	r3, #1
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
	...

08002b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b80:	4a14      	ldr	r2, [pc, #80]	; (8002bd4 <_sbrk+0x5c>)
 8002b82:	4b15      	ldr	r3, [pc, #84]	; (8002bd8 <_sbrk+0x60>)
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b8c:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <_sbrk+0x64>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d102      	bne.n	8002b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b94:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <_sbrk+0x64>)
 8002b96:	4a12      	ldr	r2, [pc, #72]	; (8002be0 <_sbrk+0x68>)
 8002b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b9a:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <_sbrk+0x64>)
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d207      	bcs.n	8002bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ba8:	f013 fd78 	bl	801669c <__errno>
 8002bac:	4603      	mov	r3, r0
 8002bae:	220c      	movs	r2, #12
 8002bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb6:	e009      	b.n	8002bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bb8:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <_sbrk+0x64>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bbe:	4b07      	ldr	r3, [pc, #28]	; (8002bdc <_sbrk+0x64>)
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	4a05      	ldr	r2, [pc, #20]	; (8002bdc <_sbrk+0x64>)
 8002bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bca:	68fb      	ldr	r3, [r7, #12]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	24050000 	.word	0x24050000
 8002bd8:	00000800 	.word	0x00000800
 8002bdc:	24000d1c 	.word	0x24000d1c
 8002be0:	24002a98 	.word	0x24002a98

08002be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002be8:	4b32      	ldr	r3, [pc, #200]	; (8002cb4 <SystemInit+0xd0>)
 8002bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bee:	4a31      	ldr	r2, [pc, #196]	; (8002cb4 <SystemInit+0xd0>)
 8002bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002bf8:	4b2f      	ldr	r3, [pc, #188]	; (8002cb8 <SystemInit+0xd4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 030f 	and.w	r3, r3, #15
 8002c00:	2b06      	cmp	r3, #6
 8002c02:	d807      	bhi.n	8002c14 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002c04:	4b2c      	ldr	r3, [pc, #176]	; (8002cb8 <SystemInit+0xd4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f023 030f 	bic.w	r3, r3, #15
 8002c0c:	4a2a      	ldr	r2, [pc, #168]	; (8002cb8 <SystemInit+0xd4>)
 8002c0e:	f043 0307 	orr.w	r3, r3, #7
 8002c12:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002c14:	4b29      	ldr	r3, [pc, #164]	; (8002cbc <SystemInit+0xd8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a28      	ldr	r2, [pc, #160]	; (8002cbc <SystemInit+0xd8>)
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002c20:	4b26      	ldr	r3, [pc, #152]	; (8002cbc <SystemInit+0xd8>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002c26:	4b25      	ldr	r3, [pc, #148]	; (8002cbc <SystemInit+0xd8>)
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	4924      	ldr	r1, [pc, #144]	; (8002cbc <SystemInit+0xd8>)
 8002c2c:	4b24      	ldr	r3, [pc, #144]	; (8002cc0 <SystemInit+0xdc>)
 8002c2e:	4013      	ands	r3, r2
 8002c30:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002c32:	4b21      	ldr	r3, [pc, #132]	; (8002cb8 <SystemInit+0xd4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d007      	beq.n	8002c4e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002c3e:	4b1e      	ldr	r3, [pc, #120]	; (8002cb8 <SystemInit+0xd4>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 030f 	bic.w	r3, r3, #15
 8002c46:	4a1c      	ldr	r2, [pc, #112]	; (8002cb8 <SystemInit+0xd4>)
 8002c48:	f043 0307 	orr.w	r3, r3, #7
 8002c4c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002c4e:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <SystemInit+0xd8>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002c54:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <SystemInit+0xd8>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002c5a:	4b18      	ldr	r3, [pc, #96]	; (8002cbc <SystemInit+0xd8>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002c60:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <SystemInit+0xd8>)
 8002c62:	4a18      	ldr	r2, [pc, #96]	; (8002cc4 <SystemInit+0xe0>)
 8002c64:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002c66:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <SystemInit+0xd8>)
 8002c68:	4a17      	ldr	r2, [pc, #92]	; (8002cc8 <SystemInit+0xe4>)
 8002c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002c6c:	4b13      	ldr	r3, [pc, #76]	; (8002cbc <SystemInit+0xd8>)
 8002c6e:	4a17      	ldr	r2, [pc, #92]	; (8002ccc <SystemInit+0xe8>)
 8002c70:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002c72:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <SystemInit+0xd8>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002c78:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <SystemInit+0xd8>)
 8002c7a:	4a14      	ldr	r2, [pc, #80]	; (8002ccc <SystemInit+0xe8>)
 8002c7c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002c7e:	4b0f      	ldr	r3, [pc, #60]	; (8002cbc <SystemInit+0xd8>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002c84:	4b0d      	ldr	r3, [pc, #52]	; (8002cbc <SystemInit+0xd8>)
 8002c86:	4a11      	ldr	r2, [pc, #68]	; (8002ccc <SystemInit+0xe8>)
 8002c88:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002c8a:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <SystemInit+0xd8>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c90:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <SystemInit+0xd8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a09      	ldr	r2, [pc, #36]	; (8002cbc <SystemInit+0xd8>)
 8002c96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c9a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002c9c:	4b07      	ldr	r3, [pc, #28]	; (8002cbc <SystemInit+0xd8>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002ca2:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <SystemInit+0xec>)
 8002ca4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002ca8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002caa:	bf00      	nop
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	e000ed00 	.word	0xe000ed00
 8002cb8:	52002000 	.word	0x52002000
 8002cbc:	58024400 	.word	0x58024400
 8002cc0:	eaf6ed7f 	.word	0xeaf6ed7f
 8002cc4:	02020200 	.word	0x02020200
 8002cc8:	01ff0000 	.word	0x01ff0000
 8002ccc:	01010280 	.word	0x01010280
 8002cd0:	52004000 	.word	0x52004000

08002cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002cd8:	f7ff ff84 	bl	8002be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cdc:	480c      	ldr	r0, [pc, #48]	; (8002d10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002cde:	490d      	ldr	r1, [pc, #52]	; (8002d14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ce0:	4a0d      	ldr	r2, [pc, #52]	; (8002d18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ce4:	e002      	b.n	8002cec <LoopCopyDataInit>

08002ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cea:	3304      	adds	r3, #4

08002cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cf0:	d3f9      	bcc.n	8002ce6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002cf4:	4c0a      	ldr	r4, [pc, #40]	; (8002d20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cf8:	e001      	b.n	8002cfe <LoopFillZerobss>

08002cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cfc:	3204      	adds	r2, #4

08002cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d00:	d3fb      	bcc.n	8002cfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d02:	f013 fcd1 	bl	80166a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d06:	f7fd ff0b 	bl	8000b20 <main>
  bx  lr
 8002d0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d0c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002d10:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002d14:	240002c8 	.word	0x240002c8
  ldr r2, =_sidata
 8002d18:	0801a258 	.word	0x0801a258
  ldr r2, =_sbss
 8002d1c:	240002c8 	.word	0x240002c8
  ldr r4, =_ebss
 8002d20:	24002a98 	.word	0x24002a98

08002d24 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d24:	e7fe      	b.n	8002d24 <ADC3_IRQHandler>
	...

08002d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d2e:	2003      	movs	r0, #3
 8002d30:	f001 fd06 	bl	8004740 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d34:	f006 ffd8 	bl	8009ce8 <HAL_RCC_GetSysClockFreq>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4b15      	ldr	r3, [pc, #84]	; (8002d90 <HAL_Init+0x68>)
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	0a1b      	lsrs	r3, r3, #8
 8002d40:	f003 030f 	and.w	r3, r3, #15
 8002d44:	4913      	ldr	r1, [pc, #76]	; (8002d94 <HAL_Init+0x6c>)
 8002d46:	5ccb      	ldrb	r3, [r1, r3]
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d50:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d52:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <HAL_Init+0x68>)
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	4a0e      	ldr	r2, [pc, #56]	; (8002d94 <HAL_Init+0x6c>)
 8002d5c:	5cd3      	ldrb	r3, [r2, r3]
 8002d5e:	f003 031f 	and.w	r3, r3, #31
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	fa22 f303 	lsr.w	r3, r2, r3
 8002d68:	4a0b      	ldr	r2, [pc, #44]	; (8002d98 <HAL_Init+0x70>)
 8002d6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d6c:	4a0b      	ldr	r2, [pc, #44]	; (8002d9c <HAL_Init+0x74>)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d72:	200f      	movs	r0, #15
 8002d74:	f000 f814 	bl	8002da0 <HAL_InitTick>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e002      	b.n	8002d88 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002d82:	f7fe ff29 	bl	8001bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	58024400 	.word	0x58024400
 8002d94:	08019db8 	.word	0x08019db8
 8002d98:	24000004 	.word	0x24000004
 8002d9c:	24000000 	.word	0x24000000

08002da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002da8:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <HAL_InitTick+0x60>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e021      	b.n	8002df8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002db4:	4b13      	ldr	r3, [pc, #76]	; (8002e04 <HAL_InitTick+0x64>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <HAL_InitTick+0x60>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f001 fceb 	bl	80047a6 <HAL_SYSTICK_Config>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e00e      	b.n	8002df8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b0f      	cmp	r3, #15
 8002dde:	d80a      	bhi.n	8002df6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002de0:	2200      	movs	r2, #0
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	f04f 30ff 	mov.w	r0, #4294967295
 8002de8:	f001 fcb5 	bl	8004756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dec:	4a06      	ldr	r2, [pc, #24]	; (8002e08 <HAL_InitTick+0x68>)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	e000      	b.n	8002df8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	2400000c 	.word	0x2400000c
 8002e04:	24000000 	.word	0x24000000
 8002e08:	24000008 	.word	0x24000008

08002e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e10:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <HAL_IncTick+0x20>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	461a      	mov	r2, r3
 8002e16:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <HAL_IncTick+0x24>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	4a04      	ldr	r2, [pc, #16]	; (8002e30 <HAL_IncTick+0x24>)
 8002e1e:	6013      	str	r3, [r2, #0]
}
 8002e20:	bf00      	nop
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	2400000c 	.word	0x2400000c
 8002e30:	24000d20 	.word	0x24000d20

08002e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return uwTick;
 8002e38:	4b03      	ldr	r3, [pc, #12]	; (8002e48 <HAL_GetTick+0x14>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	24000d20 	.word	0x24000d20

08002e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e54:	f7ff ffee 	bl	8002e34 <HAL_GetTick>
 8002e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e64:	d005      	beq.n	8002e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e66:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <HAL_Delay+0x44>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4413      	add	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e72:	bf00      	nop
 8002e74:	f7ff ffde 	bl	8002e34 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d8f7      	bhi.n	8002e74 <HAL_Delay+0x28>
  {
  }
}
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	2400000c 	.word	0x2400000c

08002e94 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002e9e:	4b07      	ldr	r3, [pc, #28]	; (8002ebc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	401a      	ands	r2, r3
 8002ea8:	4904      	ldr	r1, [pc, #16]	; (8002ebc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	604b      	str	r3, [r1, #4]
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	58000400 	.word	0x58000400

08002ec0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	609a      	str	r2, [r3, #8]
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	609a      	str	r2, [r3, #8]
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	3360      	adds	r3, #96	; 0x60
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4a10      	ldr	r2, [pc, #64]	; (8002f88 <LL_ADC_SetOffset+0x60>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d10b      	bne.n	8002f64 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002f62:	e00b      	b.n	8002f7c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	430b      	orrs	r3, r1
 8002f76:	431a      	orrs	r2, r3
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	601a      	str	r2, [r3, #0]
}
 8002f7c:	bf00      	nop
 8002f7e:	371c      	adds	r7, #28
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	58026000 	.word	0x58026000

08002f8c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3360      	adds	r3, #96	; 0x60
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f003 031f 	and.w	r3, r3, #31
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	611a      	str	r2, [r3, #16]
}
 8002fde:	bf00      	nop
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
	...

08002fec <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4a0c      	ldr	r2, [pc, #48]	; (800302c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00e      	beq.n	800301e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	3360      	adds	r3, #96	; 0x60
 8003004:	461a      	mov	r2, r3
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	431a      	orrs	r2, r3
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	601a      	str	r2, [r3, #0]
  }
}
 800301e:	bf00      	nop
 8003020:	371c      	adds	r7, #28
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	58026000 	.word	0x58026000

08003030 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4a0c      	ldr	r2, [pc, #48]	; (8003070 <LL_ADC_SetOffsetSaturation+0x40>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d10e      	bne.n	8003062 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	3360      	adds	r3, #96	; 0x60
 8003048:	461a      	mov	r2, r3
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	431a      	orrs	r2, r3
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003062:	bf00      	nop
 8003064:	371c      	adds	r7, #28
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	58026000 	.word	0x58026000

08003074 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003074:	b480      	push	{r7}
 8003076:	b087      	sub	sp, #28
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4a0c      	ldr	r2, [pc, #48]	; (80030b4 <LL_ADC_SetOffsetSign+0x40>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d10e      	bne.n	80030a6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	3360      	adds	r3, #96	; 0x60
 800308c:	461a      	mov	r2, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	431a      	orrs	r2, r3
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80030a6:	bf00      	nop
 80030a8:	371c      	adds	r7, #28
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	58026000 	.word	0x58026000

080030b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	3360      	adds	r3, #96	; 0x60
 80030c8:	461a      	mov	r2, r3
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4a0c      	ldr	r2, [pc, #48]	; (8003108 <LL_ADC_SetOffsetState+0x50>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d108      	bne.n	80030ec <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	431a      	orrs	r2, r3
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80030ea:	e007      	b.n	80030fc <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	601a      	str	r2, [r3, #0]
}
 80030fc:	bf00      	nop
 80030fe:	371c      	adds	r7, #28
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	58026000 	.word	0x58026000

0800310c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800310c:	b480      	push	{r7}
 800310e:	b087      	sub	sp, #28
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	3330      	adds	r3, #48	; 0x30
 800311c:	461a      	mov	r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	0a1b      	lsrs	r3, r3, #8
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	f003 030c 	and.w	r3, r3, #12
 8003128:	4413      	add	r3, r2
 800312a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f003 031f 	and.w	r3, r3, #31
 8003136:	211f      	movs	r1, #31
 8003138:	fa01 f303 	lsl.w	r3, r1, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	401a      	ands	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	0e9b      	lsrs	r3, r3, #26
 8003144:	f003 011f 	and.w	r1, r3, #31
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f003 031f 	and.w	r3, r3, #31
 800314e:	fa01 f303 	lsl.w	r3, r1, r3
 8003152:	431a      	orrs	r2, r3
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003158:	bf00      	nop
 800315a:	371c      	adds	r7, #28
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	3314      	adds	r3, #20
 8003174:	461a      	mov	r2, r3
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	0e5b      	lsrs	r3, r3, #25
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	4413      	add	r3, r2
 8003182:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	0d1b      	lsrs	r3, r3, #20
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	2107      	movs	r1, #7
 8003192:	fa01 f303 	lsl.w	r3, r1, r3
 8003196:	43db      	mvns	r3, r3
 8003198:	401a      	ands	r2, r3
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	0d1b      	lsrs	r3, r3, #20
 800319e:	f003 031f 	and.w	r3, r3, #31
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	fa01 f303 	lsl.w	r3, r1, r3
 80031a8:	431a      	orrs	r2, r3
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80031ae:	bf00      	nop
 80031b0:	371c      	adds	r7, #28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
	...

080031bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4a1a      	ldr	r2, [pc, #104]	; (8003234 <LL_ADC_SetChannelSingleDiff+0x78>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d115      	bne.n	80031fc <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031dc:	43db      	mvns	r3, r3
 80031de:	401a      	ands	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f003 0318 	and.w	r3, r3, #24
 80031e6:	4914      	ldr	r1, [pc, #80]	; (8003238 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80031e8:	40d9      	lsrs	r1, r3
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	400b      	ands	r3, r1
 80031ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031f2:	431a      	orrs	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80031fa:	e014      	b.n	8003226 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003208:	43db      	mvns	r3, r3
 800320a:	401a      	ands	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f003 0318 	and.w	r3, r3, #24
 8003212:	4909      	ldr	r1, [pc, #36]	; (8003238 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003214:	40d9      	lsrs	r1, r3
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	400b      	ands	r3, r1
 800321a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800321e:	431a      	orrs	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003226:	bf00      	nop
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	58026000 	.word	0x58026000
 8003238:	000fffff 	.word	0x000fffff

0800323c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	4b04      	ldr	r3, [pc, #16]	; (800325c <LL_ADC_DisableDeepPowerDown+0x20>)
 800324a:	4013      	ands	r3, r2
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6093      	str	r3, [r2, #8]
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	5fffffc0 	.word	0x5fffffc0

08003260 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003270:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003274:	d101      	bne.n	800327a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <LL_ADC_EnableInternalRegulator+0x24>)
 8003296:	4013      	ands	r3, r2
 8003298:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	6fffffc0 	.word	0x6fffffc0

080032b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032c4:	d101      	bne.n	80032ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80032c6:	2301      	movs	r3, #1
 80032c8:	e000      	b.n	80032cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d101      	bne.n	80032f0 <LL_ADC_IsEnabled+0x18>
 80032ec:	2301      	movs	r3, #1
 80032ee:	e000      	b.n	80032f2 <LL_ADC_IsEnabled+0x1a>
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	2b04      	cmp	r3, #4
 8003310:	d101      	bne.n	8003316 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	2b08      	cmp	r3, #8
 8003336:	d101      	bne.n	800333c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003338:	2301      	movs	r3, #1
 800333a:	e000      	b.n	800333e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800334c:	b590      	push	{r4, r7, lr}
 800334e:	b089      	sub	sp, #36	; 0x24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003354:	2300      	movs	r3, #0
 8003356:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003358:	2300      	movs	r3, #0
 800335a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e1ee      	b.n	8003744 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003370:	2b00      	cmp	r3, #0
 8003372:	d109      	bne.n	8003388 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7fe fc49 	bl	8001c0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff ff67 	bl	8003260 <LL_ADC_IsDeepPowerDownEnabled>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d004      	beq.n	80033a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff ff4d 	bl	800323c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff ff82 	bl	80032b0 <LL_ADC_IsInternalRegulatorEnabled>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d114      	bne.n	80033dc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff ff66 	bl	8003288 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033bc:	4b8e      	ldr	r3, [pc, #568]	; (80035f8 <HAL_ADC_Init+0x2ac>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	099b      	lsrs	r3, r3, #6
 80033c2:	4a8e      	ldr	r2, [pc, #568]	; (80035fc <HAL_ADC_Init+0x2b0>)
 80033c4:	fba2 2303 	umull	r2, r3, r2, r3
 80033c8:	099b      	lsrs	r3, r3, #6
 80033ca:	3301      	adds	r3, #1
 80033cc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80033ce:	e002      	b.n	80033d6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	3b01      	subs	r3, #1
 80033d4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1f9      	bne.n	80033d0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff ff65 	bl	80032b0 <LL_ADC_IsInternalRegulatorEnabled>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10d      	bne.n	8003408 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f0:	f043 0210 	orr.w	r2, r3, #16
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033fc:	f043 0201 	orr.w	r2, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff ff76 	bl	80032fe <LL_ADC_REG_IsConversionOngoing>
 8003412:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	2b00      	cmp	r3, #0
 800341e:	f040 8188 	bne.w	8003732 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2b00      	cmp	r3, #0
 8003426:	f040 8184 	bne.w	8003732 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800342e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003432:	f043 0202 	orr.w	r2, r3, #2
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff ff4a 	bl	80032d8 <LL_ADC_IsEnabled>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d136      	bne.n	80034b8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a6c      	ldr	r2, [pc, #432]	; (8003600 <HAL_ADC_Init+0x2b4>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d004      	beq.n	800345e <HAL_ADC_Init+0x112>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a6a      	ldr	r2, [pc, #424]	; (8003604 <HAL_ADC_Init+0x2b8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d10e      	bne.n	800347c <HAL_ADC_Init+0x130>
 800345e:	4868      	ldr	r0, [pc, #416]	; (8003600 <HAL_ADC_Init+0x2b4>)
 8003460:	f7ff ff3a 	bl	80032d8 <LL_ADC_IsEnabled>
 8003464:	4604      	mov	r4, r0
 8003466:	4867      	ldr	r0, [pc, #412]	; (8003604 <HAL_ADC_Init+0x2b8>)
 8003468:	f7ff ff36 	bl	80032d8 <LL_ADC_IsEnabled>
 800346c:	4603      	mov	r3, r0
 800346e:	4323      	orrs	r3, r4
 8003470:	2b00      	cmp	r3, #0
 8003472:	bf0c      	ite	eq
 8003474:	2301      	moveq	r3, #1
 8003476:	2300      	movne	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	e008      	b.n	800348e <HAL_ADC_Init+0x142>
 800347c:	4862      	ldr	r0, [pc, #392]	; (8003608 <HAL_ADC_Init+0x2bc>)
 800347e:	f7ff ff2b 	bl	80032d8 <LL_ADC_IsEnabled>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	bf0c      	ite	eq
 8003488:	2301      	moveq	r3, #1
 800348a:	2300      	movne	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d012      	beq.n	80034b8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a5a      	ldr	r2, [pc, #360]	; (8003600 <HAL_ADC_Init+0x2b4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d004      	beq.n	80034a6 <HAL_ADC_Init+0x15a>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a58      	ldr	r2, [pc, #352]	; (8003604 <HAL_ADC_Init+0x2b8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d101      	bne.n	80034aa <HAL_ADC_Init+0x15e>
 80034a6:	4a59      	ldr	r2, [pc, #356]	; (800360c <HAL_ADC_Init+0x2c0>)
 80034a8:	e000      	b.n	80034ac <HAL_ADC_Init+0x160>
 80034aa:	4a59      	ldr	r2, [pc, #356]	; (8003610 <HAL_ADC_Init+0x2c4>)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	4619      	mov	r1, r3
 80034b2:	4610      	mov	r0, r2
 80034b4:	f7ff fd04 	bl	8002ec0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a52      	ldr	r2, [pc, #328]	; (8003608 <HAL_ADC_Init+0x2bc>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d129      	bne.n	8003516 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	7e5b      	ldrb	r3, [r3, #25]
 80034c6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80034cc:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80034d2:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d013      	beq.n	8003504 <HAL_ADC_Init+0x1b8>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2b0c      	cmp	r3, #12
 80034e2:	d00d      	beq.n	8003500 <HAL_ADC_Init+0x1b4>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	2b1c      	cmp	r3, #28
 80034ea:	d007      	beq.n	80034fc <HAL_ADC_Init+0x1b0>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2b18      	cmp	r3, #24
 80034f2:	d101      	bne.n	80034f8 <HAL_ADC_Init+0x1ac>
 80034f4:	2318      	movs	r3, #24
 80034f6:	e006      	b.n	8003506 <HAL_ADC_Init+0x1ba>
 80034f8:	2300      	movs	r3, #0
 80034fa:	e004      	b.n	8003506 <HAL_ADC_Init+0x1ba>
 80034fc:	2310      	movs	r3, #16
 80034fe:	e002      	b.n	8003506 <HAL_ADC_Init+0x1ba>
 8003500:	2308      	movs	r3, #8
 8003502:	e000      	b.n	8003506 <HAL_ADC_Init+0x1ba>
 8003504:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003506:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800350e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003510:	4313      	orrs	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
 8003514:	e00e      	b.n	8003534 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	7e5b      	ldrb	r3, [r3, #25]
 800351a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003520:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003526:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800352e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003530:	4313      	orrs	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 3020 	ldrb.w	r3, [r3, #32]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d106      	bne.n	800354c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	3b01      	subs	r3, #1
 8003544:	045b      	lsls	r3, r3, #17
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4313      	orrs	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003550:	2b00      	cmp	r3, #0
 8003552:	d009      	beq.n	8003568 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003558:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003560:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4313      	orrs	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a26      	ldr	r2, [pc, #152]	; (8003608 <HAL_ADC_Init+0x2bc>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d115      	bne.n	800359e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	4b26      	ldr	r3, [pc, #152]	; (8003614 <HAL_ADC_Init+0x2c8>)
 800357a:	4013      	ands	r3, r2
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6812      	ldr	r2, [r2, #0]
 8003580:	69b9      	ldr	r1, [r7, #24]
 8003582:	430b      	orrs	r3, r1
 8003584:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	611a      	str	r2, [r3, #16]
 800359c:	e009      	b.n	80035b2 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68da      	ldr	r2, [r3, #12]
 80035a4:	4b1c      	ldr	r3, [pc, #112]	; (8003618 <HAL_ADC_Init+0x2cc>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	6812      	ldr	r2, [r2, #0]
 80035ac:	69b9      	ldr	r1, [r7, #24]
 80035ae:	430b      	orrs	r3, r1
 80035b0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff fea1 	bl	80032fe <LL_ADC_REG_IsConversionOngoing>
 80035bc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff feae 	bl	8003324 <LL_ADC_INJ_IsConversionOngoing>
 80035c8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f040 808e 	bne.w	80036ee <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f040 808a 	bne.w	80036ee <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a0a      	ldr	r2, [pc, #40]	; (8003608 <HAL_ADC_Init+0x2bc>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d11b      	bne.n	800361c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	7e1b      	ldrb	r3, [r3, #24]
 80035e8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035f0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80035f2:	4313      	orrs	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
 80035f6:	e018      	b.n	800362a <HAL_ADC_Init+0x2de>
 80035f8:	24000000 	.word	0x24000000
 80035fc:	053e2d63 	.word	0x053e2d63
 8003600:	40022000 	.word	0x40022000
 8003604:	40022100 	.word	0x40022100
 8003608:	58026000 	.word	0x58026000
 800360c:	40022300 	.word	0x40022300
 8003610:	58026300 	.word	0x58026300
 8003614:	fff04007 	.word	0xfff04007
 8003618:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	7e1b      	ldrb	r3, [r3, #24]
 8003620:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8003626:	4313      	orrs	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	4b46      	ldr	r3, [pc, #280]	; (800374c <HAL_ADC_Init+0x400>)
 8003632:	4013      	ands	r3, r2
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	69b9      	ldr	r1, [r7, #24]
 800363a:	430b      	orrs	r3, r1
 800363c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003644:	2b01      	cmp	r3, #1
 8003646:	d137      	bne.n	80036b8 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a3f      	ldr	r2, [pc, #252]	; (8003750 <HAL_ADC_Init+0x404>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d116      	bne.n	8003686 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	691a      	ldr	r2, [r3, #16]
 800365e:	4b3d      	ldr	r3, [pc, #244]	; (8003754 <HAL_ADC_Init+0x408>)
 8003660:	4013      	ands	r3, r2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800366a:	4311      	orrs	r1, r2
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003670:	4311      	orrs	r1, r2
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003676:	430a      	orrs	r2, r1
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	611a      	str	r2, [r3, #16]
 8003684:	e020      	b.n	80036c8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691a      	ldr	r2, [r3, #16]
 800368c:	4b32      	ldr	r3, [pc, #200]	; (8003758 <HAL_ADC_Init+0x40c>)
 800368e:	4013      	ands	r3, r2
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003694:	3a01      	subs	r2, #1
 8003696:	0411      	lsls	r1, r2, #16
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800369c:	4311      	orrs	r1, r2
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036a2:	4311      	orrs	r1, r2
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80036a8:	430a      	orrs	r2, r1
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f042 0201 	orr.w	r2, r2, #1
 80036b4:	611a      	str	r2, [r3, #16]
 80036b6:	e007      	b.n	80036c8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691a      	ldr	r2, [r3, #16]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0201 	bic.w	r2, r2, #1
 80036c6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a1b      	ldr	r2, [pc, #108]	; (8003750 <HAL_ADC_Init+0x404>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d002      	beq.n	80036ee <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 fd63 	bl	80041b4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d10c      	bne.n	8003710 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	f023 010f 	bic.w	r1, r3, #15
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	1e5a      	subs	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	631a      	str	r2, [r3, #48]	; 0x30
 800370e:	e007      	b.n	8003720 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 020f 	bic.w	r2, r2, #15
 800371e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003724:	f023 0303 	bic.w	r3, r3, #3
 8003728:	f043 0201 	orr.w	r2, r3, #1
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	661a      	str	r2, [r3, #96]	; 0x60
 8003730:	e007      	b.n	8003742 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003736:	f043 0210 	orr.w	r2, r3, #16
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003742:	7ffb      	ldrb	r3, [r7, #31]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3724      	adds	r7, #36	; 0x24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd90      	pop	{r4, r7, pc}
 800374c:	ffffbffc 	.word	0xffffbffc
 8003750:	58026000 	.word	0x58026000
 8003754:	fc00f81f 	.word	0xfc00f81f
 8003758:	fc00f81e 	.word	0xfc00f81e

0800375c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800375c:	b590      	push	{r4, r7, lr}
 800375e:	b0b9      	sub	sp, #228	; 0xe4
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800376c:	2300      	movs	r3, #0
 800376e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003776:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	4aa9      	ldr	r2, [pc, #676]	; (8003a24 <HAL_ADC_ConfigChannel+0x2c8>)
 800377e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003786:	2b01      	cmp	r3, #1
 8003788:	d102      	bne.n	8003790 <HAL_ADC_ConfigChannel+0x34>
 800378a:	2302      	movs	r3, #2
 800378c:	f000 bcfa 	b.w	8004184 <HAL_ADC_ConfigChannel+0xa28>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff fdae 	bl	80032fe <LL_ADC_REG_IsConversionOngoing>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f040 84de 	bne.w	8004166 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a9e      	ldr	r2, [pc, #632]	; (8003a28 <HAL_ADC_ConfigChannel+0x2cc>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d033      	beq.n	800381c <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d108      	bne.n	80037d2 <HAL_ADC_ConfigChannel+0x76>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	0e9b      	lsrs	r3, r3, #26
 80037c6:	f003 031f 	and.w	r3, r3, #31
 80037ca:	2201      	movs	r2, #1
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	e01d      	b.n	800380e <HAL_ADC_ConfigChannel+0xb2>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037de:	fa93 f3a3 	rbit	r3, r3
 80037e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80037e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80037ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80037f6:	2320      	movs	r3, #32
 80037f8:	e004      	b.n	8003804 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80037fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80037fe:	fab3 f383 	clz	r3, r3
 8003802:	b2db      	uxtb	r3, r3
 8003804:	f003 031f 	and.w	r3, r3, #31
 8003808:	2201      	movs	r2, #1
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6812      	ldr	r2, [r2, #0]
 8003812:	69d1      	ldr	r1, [r2, #28]
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	430b      	orrs	r3, r1
 800381a:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	6859      	ldr	r1, [r3, #4]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	461a      	mov	r2, r3
 800382a:	f7ff fc6f 	bl	800310c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff fd63 	bl	80032fe <LL_ADC_REG_IsConversionOngoing>
 8003838:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff fd6f 	bl	8003324 <LL_ADC_INJ_IsConversionOngoing>
 8003846:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800384a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800384e:	2b00      	cmp	r3, #0
 8003850:	f040 8270 	bne.w	8003d34 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003854:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003858:	2b00      	cmp	r3, #0
 800385a:	f040 826b 	bne.w	8003d34 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6818      	ldr	r0, [r3, #0]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	6819      	ldr	r1, [r3, #0]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	461a      	mov	r2, r3
 800386c:	f7ff fc7a 	bl	8003164 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a6c      	ldr	r2, [pc, #432]	; (8003a28 <HAL_ADC_ConfigChannel+0x2cc>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d10d      	bne.n	8003896 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	695a      	ldr	r2, [r3, #20]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	08db      	lsrs	r3, r3, #3
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003894:	e032      	b.n	80038fc <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003896:	4b65      	ldr	r3, [pc, #404]	; (8003a2c <HAL_ADC_ConfigChannel+0x2d0>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800389e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038a2:	d10b      	bne.n	80038bc <HAL_ADC_ConfigChannel+0x160>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	695a      	ldr	r2, [r3, #20]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	089b      	lsrs	r3, r3, #2
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	e01d      	b.n	80038f8 <HAL_ADC_ConfigChannel+0x19c>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f003 0310 	and.w	r3, r3, #16
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10b      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x186>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	695a      	ldr	r2, [r3, #20]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	089b      	lsrs	r3, r3, #2
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	e00a      	b.n	80038f8 <HAL_ADC_ConfigChannel+0x19c>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	695a      	ldr	r2, [r3, #20]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	089b      	lsrs	r3, r3, #2
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	2b04      	cmp	r3, #4
 8003902:	d048      	beq.n	8003996 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6818      	ldr	r0, [r3, #0]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	6919      	ldr	r1, [r3, #16]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003914:	f7ff fb08 	bl	8002f28 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a42      	ldr	r2, [pc, #264]	; (8003a28 <HAL_ADC_ConfigChannel+0x2cc>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d119      	bne.n	8003956 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6818      	ldr	r0, [r3, #0]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	6919      	ldr	r1, [r3, #16]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	461a      	mov	r2, r3
 8003930:	f7ff fba0 	bl	8003074 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6818      	ldr	r0, [r3, #0]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	6919      	ldr	r1, [r3, #16]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d102      	bne.n	800394c <HAL_ADC_ConfigChannel+0x1f0>
 8003946:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800394a:	e000      	b.n	800394e <HAL_ADC_ConfigChannel+0x1f2>
 800394c:	2300      	movs	r3, #0
 800394e:	461a      	mov	r2, r3
 8003950:	f7ff fb6e 	bl	8003030 <LL_ADC_SetOffsetSaturation>
 8003954:	e1ee      	b.n	8003d34 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	6919      	ldr	r1, [r3, #16]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003964:	2b01      	cmp	r3, #1
 8003966:	d102      	bne.n	800396e <HAL_ADC_ConfigChannel+0x212>
 8003968:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800396c:	e000      	b.n	8003970 <HAL_ADC_ConfigChannel+0x214>
 800396e:	2300      	movs	r3, #0
 8003970:	461a      	mov	r2, r3
 8003972:	f7ff fb3b 	bl	8002fec <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6818      	ldr	r0, [r3, #0]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	6919      	ldr	r1, [r3, #16]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	7e1b      	ldrb	r3, [r3, #24]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d102      	bne.n	800398c <HAL_ADC_ConfigChannel+0x230>
 8003986:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800398a:	e000      	b.n	800398e <HAL_ADC_ConfigChannel+0x232>
 800398c:	2300      	movs	r3, #0
 800398e:	461a      	mov	r2, r3
 8003990:	f7ff fb12 	bl	8002fb8 <LL_ADC_SetDataRightShift>
 8003994:	e1ce      	b.n	8003d34 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a23      	ldr	r2, [pc, #140]	; (8003a28 <HAL_ADC_ConfigChannel+0x2cc>)
 800399c:	4293      	cmp	r3, r2
 800399e:	f040 8181 	bne.w	8003ca4 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2100      	movs	r1, #0
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff faef 	bl	8002f8c <LL_ADC_GetOffsetChannel>
 80039ae:	4603      	mov	r3, r0
 80039b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10a      	bne.n	80039ce <HAL_ADC_ConfigChannel+0x272>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2100      	movs	r1, #0
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff fae4 	bl	8002f8c <LL_ADC_GetOffsetChannel>
 80039c4:	4603      	mov	r3, r0
 80039c6:	0e9b      	lsrs	r3, r3, #26
 80039c8:	f003 021f 	and.w	r2, r3, #31
 80039cc:	e01e      	b.n	8003a0c <HAL_ADC_ConfigChannel+0x2b0>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2100      	movs	r1, #0
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff fad9 	bl	8002f8c <LL_ADC_GetOffsetChannel>
 80039da:	4603      	mov	r3, r0
 80039dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80039e4:	fa93 f3a3 	rbit	r3, r3
 80039e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80039ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80039f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80039f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80039fc:	2320      	movs	r3, #32
 80039fe:	e004      	b.n	8003a0a <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8003a00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003a04:	fab3 f383 	clz	r3, r3
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10b      	bne.n	8003a30 <HAL_ADC_ConfigChannel+0x2d4>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	0e9b      	lsrs	r3, r3, #26
 8003a1e:	f003 031f 	and.w	r3, r3, #31
 8003a22:	e01e      	b.n	8003a62 <HAL_ADC_ConfigChannel+0x306>
 8003a24:	47ff0000 	.word	0x47ff0000
 8003a28:	58026000 	.word	0x58026000
 8003a2c:	5c001000 	.word	0x5c001000
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a3c:	fa93 f3a3 	rbit	r3, r3
 8003a40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003a44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003a48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003a4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003a54:	2320      	movs	r3, #32
 8003a56:	e004      	b.n	8003a62 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8003a58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003a5c:	fab3 f383 	clz	r3, r3
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d106      	bne.n	8003a74 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff fb22 	bl	80030b8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2101      	movs	r1, #1
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff fa86 	bl	8002f8c <LL_ADC_GetOffsetChannel>
 8003a80:	4603      	mov	r3, r0
 8003a82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10a      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x344>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2101      	movs	r1, #1
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff fa7b 	bl	8002f8c <LL_ADC_GetOffsetChannel>
 8003a96:	4603      	mov	r3, r0
 8003a98:	0e9b      	lsrs	r3, r3, #26
 8003a9a:	f003 021f 	and.w	r2, r3, #31
 8003a9e:	e01e      	b.n	8003ade <HAL_ADC_ConfigChannel+0x382>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff fa70 	bl	8002f8c <LL_ADC_GetOffsetChannel>
 8003aac:	4603      	mov	r3, r0
 8003aae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ab6:	fa93 f3a3 	rbit	r3, r3
 8003aba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003abe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ac2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003ac6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8003ace:	2320      	movs	r3, #32
 8003ad0:	e004      	b.n	8003adc <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8003ad2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003ad6:	fab3 f383 	clz	r3, r3
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	461a      	mov	r2, r3
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d105      	bne.n	8003af6 <HAL_ADC_ConfigChannel+0x39a>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	0e9b      	lsrs	r3, r3, #26
 8003af0:	f003 031f 	and.w	r3, r3, #31
 8003af4:	e018      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x3cc>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003b02:	fa93 f3a3 	rbit	r3, r3
 8003b06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003b0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003b12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8003b1a:	2320      	movs	r3, #32
 8003b1c:	e004      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8003b1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b22:	fab3 f383 	clz	r3, r3
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d106      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2200      	movs	r2, #0
 8003b32:	2101      	movs	r1, #1
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff fabf 	bl	80030b8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2102      	movs	r1, #2
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff fa23 	bl	8002f8c <LL_ADC_GetOffsetChannel>
 8003b46:	4603      	mov	r3, r0
 8003b48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10a      	bne.n	8003b66 <HAL_ADC_ConfigChannel+0x40a>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2102      	movs	r1, #2
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff fa18 	bl	8002f8c <LL_ADC_GetOffsetChannel>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	0e9b      	lsrs	r3, r3, #26
 8003b60:	f003 021f 	and.w	r2, r3, #31
 8003b64:	e01e      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x448>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2102      	movs	r1, #2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff fa0d 	bl	8002f8c <LL_ADC_GetOffsetChannel>
 8003b72:	4603      	mov	r3, r0
 8003b74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b7c:	fa93 f3a3 	rbit	r3, r3
 8003b80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003b84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003b8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8003b94:	2320      	movs	r3, #32
 8003b96:	e004      	b.n	8003ba2 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8003b98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b9c:	fab3 f383 	clz	r3, r3
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d105      	bne.n	8003bbc <HAL_ADC_ConfigChannel+0x460>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	0e9b      	lsrs	r3, r3, #26
 8003bb6:	f003 031f 	and.w	r3, r3, #31
 8003bba:	e014      	b.n	8003be6 <HAL_ADC_ConfigChannel+0x48a>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003bc4:	fa93 f3a3 	rbit	r3, r3
 8003bc8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003bca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003bd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8003bd8:	2320      	movs	r3, #32
 8003bda:	e004      	b.n	8003be6 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8003bdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003be0:	fab3 f383 	clz	r3, r3
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d106      	bne.n	8003bf8 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	2102      	movs	r1, #2
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff fa60 	bl	80030b8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2103      	movs	r1, #3
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff f9c4 	bl	8002f8c <LL_ADC_GetOffsetChannel>
 8003c04:	4603      	mov	r3, r0
 8003c06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10a      	bne.n	8003c24 <HAL_ADC_ConfigChannel+0x4c8>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2103      	movs	r1, #3
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff f9b9 	bl	8002f8c <LL_ADC_GetOffsetChannel>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	0e9b      	lsrs	r3, r3, #26
 8003c1e:	f003 021f 	and.w	r2, r3, #31
 8003c22:	e017      	b.n	8003c54 <HAL_ADC_ConfigChannel+0x4f8>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2103      	movs	r1, #3
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff f9ae 	bl	8002f8c <LL_ADC_GetOffsetChannel>
 8003c30:	4603      	mov	r3, r0
 8003c32:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c36:	fa93 f3a3 	rbit	r3, r3
 8003c3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c3e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003c40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003c46:	2320      	movs	r3, #32
 8003c48:	e003      	b.n	8003c52 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003c4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c4c:	fab3 f383 	clz	r3, r3
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	461a      	mov	r2, r3
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d105      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x510>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	0e9b      	lsrs	r3, r3, #26
 8003c66:	f003 031f 	and.w	r3, r3, #31
 8003c6a:	e011      	b.n	8003c90 <HAL_ADC_ConfigChannel+0x534>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c74:	fa93 f3a3 	rbit	r3, r3
 8003c78:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003c7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c7c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003c7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8003c84:	2320      	movs	r3, #32
 8003c86:	e003      	b.n	8003c90 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8003c88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c8a:	fab3 f383 	clz	r3, r3
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d14f      	bne.n	8003d34 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2103      	movs	r1, #3
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff fa0b 	bl	80030b8 <LL_ADC_SetOffsetState>
 8003ca2:	e047      	b.n	8003d34 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003caa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	069b      	lsls	r3, r3, #26
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d107      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003cc6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	069b      	lsls	r3, r3, #26
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d107      	bne.n	8003cec <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003cea:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cf2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	069b      	lsls	r3, r3, #26
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d107      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003d0e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	069b      	lsls	r3, r3, #26
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d107      	bne.n	8003d34 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003d32:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff facd 	bl	80032d8 <LL_ADC_IsEnabled>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f040 8219 	bne.w	8004178 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6818      	ldr	r0, [r3, #0]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	6819      	ldr	r1, [r3, #0]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	461a      	mov	r2, r3
 8003d54:	f7ff fa32 	bl	80031bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	4aa1      	ldr	r2, [pc, #644]	; (8003fe4 <HAL_ADC_ConfigChannel+0x888>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	f040 812e 	bne.w	8003fc0 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10b      	bne.n	8003d8c <HAL_ADC_ConfigChannel+0x630>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	0e9b      	lsrs	r3, r3, #26
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	f003 031f 	and.w	r3, r3, #31
 8003d80:	2b09      	cmp	r3, #9
 8003d82:	bf94      	ite	ls
 8003d84:	2301      	movls	r3, #1
 8003d86:	2300      	movhi	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	e019      	b.n	8003dc0 <HAL_ADC_ConfigChannel+0x664>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d94:	fa93 f3a3 	rbit	r3, r3
 8003d98:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003d9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8003da4:	2320      	movs	r3, #32
 8003da6:	e003      	b.n	8003db0 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8003da8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003daa:	fab3 f383 	clz	r3, r3
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	3301      	adds	r3, #1
 8003db2:	f003 031f 	and.w	r3, r3, #31
 8003db6:	2b09      	cmp	r3, #9
 8003db8:	bf94      	ite	ls
 8003dba:	2301      	movls	r3, #1
 8003dbc:	2300      	movhi	r3, #0
 8003dbe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d079      	beq.n	8003eb8 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d107      	bne.n	8003de0 <HAL_ADC_ConfigChannel+0x684>
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	0e9b      	lsrs	r3, r3, #26
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	069b      	lsls	r3, r3, #26
 8003dda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003dde:	e015      	b.n	8003e0c <HAL_ADC_ConfigChannel+0x6b0>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003de8:	fa93 f3a3 	rbit	r3, r3
 8003dec:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8003df8:	2320      	movs	r3, #32
 8003dfa:	e003      	b.n	8003e04 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8003dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dfe:	fab3 f383 	clz	r3, r3
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	3301      	adds	r3, #1
 8003e06:	069b      	lsls	r3, r3, #26
 8003e08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d109      	bne.n	8003e2c <HAL_ADC_ConfigChannel+0x6d0>
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	0e9b      	lsrs	r3, r3, #26
 8003e1e:	3301      	adds	r3, #1
 8003e20:	f003 031f 	and.w	r3, r3, #31
 8003e24:	2101      	movs	r1, #1
 8003e26:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2a:	e017      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x700>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e34:	fa93 f3a3 	rbit	r3, r3
 8003e38:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e3c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003e3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8003e44:	2320      	movs	r3, #32
 8003e46:	e003      	b.n	8003e50 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8003e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e4a:	fab3 f383 	clz	r3, r3
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	3301      	adds	r3, #1
 8003e52:	f003 031f 	and.w	r3, r3, #31
 8003e56:	2101      	movs	r1, #1
 8003e58:	fa01 f303 	lsl.w	r3, r1, r3
 8003e5c:	ea42 0103 	orr.w	r1, r2, r3
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10a      	bne.n	8003e82 <HAL_ADC_ConfigChannel+0x726>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	0e9b      	lsrs	r3, r3, #26
 8003e72:	3301      	adds	r3, #1
 8003e74:	f003 021f 	and.w	r2, r3, #31
 8003e78:	4613      	mov	r3, r2
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	4413      	add	r3, r2
 8003e7e:	051b      	lsls	r3, r3, #20
 8003e80:	e018      	b.n	8003eb4 <HAL_ADC_ConfigChannel+0x758>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8a:	fa93 f3a3 	rbit	r3, r3
 8003e8e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e92:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8003e9a:	2320      	movs	r3, #32
 8003e9c:	e003      	b.n	8003ea6 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea0:	fab3 f383 	clz	r3, r3
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	f003 021f 	and.w	r2, r3, #31
 8003eac:	4613      	mov	r3, r2
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	4413      	add	r3, r2
 8003eb2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	e07e      	b.n	8003fb6 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d107      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x778>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	0e9b      	lsrs	r3, r3, #26
 8003eca:	3301      	adds	r3, #1
 8003ecc:	069b      	lsls	r3, r3, #26
 8003ece:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ed2:	e015      	b.n	8003f00 <HAL_ADC_ConfigChannel+0x7a4>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003edc:	fa93 f3a3 	rbit	r3, r3
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8003eec:	2320      	movs	r3, #32
 8003eee:	e003      	b.n	8003ef8 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8003ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef2:	fab3 f383 	clz	r3, r3
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	3301      	adds	r3, #1
 8003efa:	069b      	lsls	r3, r3, #26
 8003efc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d109      	bne.n	8003f20 <HAL_ADC_ConfigChannel+0x7c4>
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	0e9b      	lsrs	r3, r3, #26
 8003f12:	3301      	adds	r3, #1
 8003f14:	f003 031f 	and.w	r3, r3, #31
 8003f18:	2101      	movs	r1, #1
 8003f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1e:	e017      	b.n	8003f50 <HAL_ADC_ConfigChannel+0x7f4>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	fa93 f3a3 	rbit	r3, r3
 8003f2c:	61bb      	str	r3, [r7, #24]
  return result;
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8003f38:	2320      	movs	r3, #32
 8003f3a:	e003      	b.n	8003f44 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	fab3 f383 	clz	r3, r3
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	3301      	adds	r3, #1
 8003f46:	f003 031f 	and.w	r3, r3, #31
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f50:	ea42 0103 	orr.w	r1, r2, r3
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10d      	bne.n	8003f7c <HAL_ADC_ConfigChannel+0x820>
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	0e9b      	lsrs	r3, r3, #26
 8003f66:	3301      	adds	r3, #1
 8003f68:	f003 021f 	and.w	r2, r3, #31
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	4413      	add	r3, r2
 8003f72:	3b1e      	subs	r3, #30
 8003f74:	051b      	lsls	r3, r3, #20
 8003f76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f7a:	e01b      	b.n	8003fb4 <HAL_ADC_ConfigChannel+0x858>
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	fa93 f3a3 	rbit	r3, r3
 8003f88:	60fb      	str	r3, [r7, #12]
  return result;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8003f94:	2320      	movs	r3, #32
 8003f96:	e003      	b.n	8003fa0 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	fab3 f383 	clz	r3, r3
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	f003 021f 	and.w	r2, r3, #31
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	4413      	add	r3, r2
 8003fac:	3b1e      	subs	r3, #30
 8003fae:	051b      	lsls	r3, r3, #20
 8003fb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	6892      	ldr	r2, [r2, #8]
 8003fba:	4619      	mov	r1, r3
 8003fbc:	f7ff f8d2 	bl	8003164 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f280 80d7 	bge.w	8004178 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a06      	ldr	r2, [pc, #24]	; (8003fe8 <HAL_ADC_ConfigChannel+0x88c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d004      	beq.n	8003fde <HAL_ADC_ConfigChannel+0x882>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a04      	ldr	r2, [pc, #16]	; (8003fec <HAL_ADC_ConfigChannel+0x890>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d10a      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x898>
 8003fde:	4b04      	ldr	r3, [pc, #16]	; (8003ff0 <HAL_ADC_ConfigChannel+0x894>)
 8003fe0:	e009      	b.n	8003ff6 <HAL_ADC_ConfigChannel+0x89a>
 8003fe2:	bf00      	nop
 8003fe4:	47ff0000 	.word	0x47ff0000
 8003fe8:	40022000 	.word	0x40022000
 8003fec:	40022100 	.word	0x40022100
 8003ff0:	40022300 	.word	0x40022300
 8003ff4:	4b65      	ldr	r3, [pc, #404]	; (800418c <HAL_ADC_ConfigChannel+0xa30>)
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fe ff88 	bl	8002f0c <LL_ADC_GetCommonPathInternalCh>
 8003ffc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a62      	ldr	r2, [pc, #392]	; (8004190 <HAL_ADC_ConfigChannel+0xa34>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d004      	beq.n	8004014 <HAL_ADC_ConfigChannel+0x8b8>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a61      	ldr	r2, [pc, #388]	; (8004194 <HAL_ADC_ConfigChannel+0xa38>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d10e      	bne.n	8004032 <HAL_ADC_ConfigChannel+0x8d6>
 8004014:	485e      	ldr	r0, [pc, #376]	; (8004190 <HAL_ADC_ConfigChannel+0xa34>)
 8004016:	f7ff f95f 	bl	80032d8 <LL_ADC_IsEnabled>
 800401a:	4604      	mov	r4, r0
 800401c:	485d      	ldr	r0, [pc, #372]	; (8004194 <HAL_ADC_ConfigChannel+0xa38>)
 800401e:	f7ff f95b 	bl	80032d8 <LL_ADC_IsEnabled>
 8004022:	4603      	mov	r3, r0
 8004024:	4323      	orrs	r3, r4
 8004026:	2b00      	cmp	r3, #0
 8004028:	bf0c      	ite	eq
 800402a:	2301      	moveq	r3, #1
 800402c:	2300      	movne	r3, #0
 800402e:	b2db      	uxtb	r3, r3
 8004030:	e008      	b.n	8004044 <HAL_ADC_ConfigChannel+0x8e8>
 8004032:	4859      	ldr	r0, [pc, #356]	; (8004198 <HAL_ADC_ConfigChannel+0xa3c>)
 8004034:	f7ff f950 	bl	80032d8 <LL_ADC_IsEnabled>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	bf0c      	ite	eq
 800403e:	2301      	moveq	r3, #1
 8004040:	2300      	movne	r3, #0
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 8084 	beq.w	8004152 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a53      	ldr	r2, [pc, #332]	; (800419c <HAL_ADC_ConfigChannel+0xa40>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d132      	bne.n	80040ba <HAL_ADC_ConfigChannel+0x95e>
 8004054:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004058:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d12c      	bne.n	80040ba <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a4c      	ldr	r2, [pc, #304]	; (8004198 <HAL_ADC_ConfigChannel+0xa3c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	f040 8086 	bne.w	8004178 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a47      	ldr	r2, [pc, #284]	; (8004190 <HAL_ADC_ConfigChannel+0xa34>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d004      	beq.n	8004080 <HAL_ADC_ConfigChannel+0x924>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a46      	ldr	r2, [pc, #280]	; (8004194 <HAL_ADC_ConfigChannel+0xa38>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d101      	bne.n	8004084 <HAL_ADC_ConfigChannel+0x928>
 8004080:	4a47      	ldr	r2, [pc, #284]	; (80041a0 <HAL_ADC_ConfigChannel+0xa44>)
 8004082:	e000      	b.n	8004086 <HAL_ADC_ConfigChannel+0x92a>
 8004084:	4a41      	ldr	r2, [pc, #260]	; (800418c <HAL_ADC_ConfigChannel+0xa30>)
 8004086:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800408a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800408e:	4619      	mov	r1, r3
 8004090:	4610      	mov	r0, r2
 8004092:	f7fe ff28 	bl	8002ee6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004096:	4b43      	ldr	r3, [pc, #268]	; (80041a4 <HAL_ADC_ConfigChannel+0xa48>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	099b      	lsrs	r3, r3, #6
 800409c:	4a42      	ldr	r2, [pc, #264]	; (80041a8 <HAL_ADC_ConfigChannel+0xa4c>)
 800409e:	fba2 2303 	umull	r2, r3, r2, r3
 80040a2:	099b      	lsrs	r3, r3, #6
 80040a4:	3301      	adds	r3, #1
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80040aa:	e002      	b.n	80040b2 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1f9      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040b8:	e05e      	b.n	8004178 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a3b      	ldr	r2, [pc, #236]	; (80041ac <HAL_ADC_ConfigChannel+0xa50>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d120      	bne.n	8004106 <HAL_ADC_ConfigChannel+0x9aa>
 80040c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80040c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d11a      	bne.n	8004106 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a30      	ldr	r2, [pc, #192]	; (8004198 <HAL_ADC_ConfigChannel+0xa3c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d14e      	bne.n	8004178 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a2c      	ldr	r2, [pc, #176]	; (8004190 <HAL_ADC_ConfigChannel+0xa34>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d004      	beq.n	80040ee <HAL_ADC_ConfigChannel+0x992>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a2a      	ldr	r2, [pc, #168]	; (8004194 <HAL_ADC_ConfigChannel+0xa38>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d101      	bne.n	80040f2 <HAL_ADC_ConfigChannel+0x996>
 80040ee:	4a2c      	ldr	r2, [pc, #176]	; (80041a0 <HAL_ADC_ConfigChannel+0xa44>)
 80040f0:	e000      	b.n	80040f4 <HAL_ADC_ConfigChannel+0x998>
 80040f2:	4a26      	ldr	r2, [pc, #152]	; (800418c <HAL_ADC_ConfigChannel+0xa30>)
 80040f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80040f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040fc:	4619      	mov	r1, r3
 80040fe:	4610      	mov	r0, r2
 8004100:	f7fe fef1 	bl	8002ee6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004104:	e038      	b.n	8004178 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a29      	ldr	r2, [pc, #164]	; (80041b0 <HAL_ADC_ConfigChannel+0xa54>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d133      	bne.n	8004178 <HAL_ADC_ConfigChannel+0xa1c>
 8004110:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004114:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d12d      	bne.n	8004178 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a1d      	ldr	r2, [pc, #116]	; (8004198 <HAL_ADC_ConfigChannel+0xa3c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d128      	bne.n	8004178 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a19      	ldr	r2, [pc, #100]	; (8004190 <HAL_ADC_ConfigChannel+0xa34>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d004      	beq.n	800413a <HAL_ADC_ConfigChannel+0x9de>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a17      	ldr	r2, [pc, #92]	; (8004194 <HAL_ADC_ConfigChannel+0xa38>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d101      	bne.n	800413e <HAL_ADC_ConfigChannel+0x9e2>
 800413a:	4a19      	ldr	r2, [pc, #100]	; (80041a0 <HAL_ADC_ConfigChannel+0xa44>)
 800413c:	e000      	b.n	8004140 <HAL_ADC_ConfigChannel+0x9e4>
 800413e:	4a13      	ldr	r2, [pc, #76]	; (800418c <HAL_ADC_ConfigChannel+0xa30>)
 8004140:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004144:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004148:	4619      	mov	r1, r3
 800414a:	4610      	mov	r0, r2
 800414c:	f7fe fecb 	bl	8002ee6 <LL_ADC_SetCommonPathInternalCh>
 8004150:	e012      	b.n	8004178 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004156:	f043 0220 	orr.w	r2, r3, #32
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004164:	e008      	b.n	8004178 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800416a:	f043 0220 	orr.w	r2, r3, #32
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004180:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004184:	4618      	mov	r0, r3
 8004186:	37e4      	adds	r7, #228	; 0xe4
 8004188:	46bd      	mov	sp, r7
 800418a:	bd90      	pop	{r4, r7, pc}
 800418c:	58026300 	.word	0x58026300
 8004190:	40022000 	.word	0x40022000
 8004194:	40022100 	.word	0x40022100
 8004198:	58026000 	.word	0x58026000
 800419c:	c7520000 	.word	0xc7520000
 80041a0:	40022300 	.word	0x40022300
 80041a4:	24000000 	.word	0x24000000
 80041a8:	053e2d63 	.word	0x053e2d63
 80041ac:	c3210000 	.word	0xc3210000
 80041b0:	cb840000 	.word	0xcb840000

080041b4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a6c      	ldr	r2, [pc, #432]	; (8004374 <ADC_ConfigureBoostMode+0x1c0>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d004      	beq.n	80041d0 <ADC_ConfigureBoostMode+0x1c>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a6b      	ldr	r2, [pc, #428]	; (8004378 <ADC_ConfigureBoostMode+0x1c4>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d109      	bne.n	80041e4 <ADC_ConfigureBoostMode+0x30>
 80041d0:	4b6a      	ldr	r3, [pc, #424]	; (800437c <ADC_ConfigureBoostMode+0x1c8>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	bf14      	ite	ne
 80041dc:	2301      	movne	r3, #1
 80041de:	2300      	moveq	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	e008      	b.n	80041f6 <ADC_ConfigureBoostMode+0x42>
 80041e4:	4b66      	ldr	r3, [pc, #408]	; (8004380 <ADC_ConfigureBoostMode+0x1cc>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	bf14      	ite	ne
 80041f0:	2301      	movne	r3, #1
 80041f2:	2300      	moveq	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d01c      	beq.n	8004234 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80041fa:	f005 feef 	bl	8009fdc <HAL_RCC_GetHCLKFreq>
 80041fe:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004208:	d010      	beq.n	800422c <ADC_ConfigureBoostMode+0x78>
 800420a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800420e:	d873      	bhi.n	80042f8 <ADC_ConfigureBoostMode+0x144>
 8004210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004214:	d002      	beq.n	800421c <ADC_ConfigureBoostMode+0x68>
 8004216:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800421a:	d16d      	bne.n	80042f8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	0c1b      	lsrs	r3, r3, #16
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	fbb2 f3f3 	udiv	r3, r2, r3
 8004228:	60fb      	str	r3, [r7, #12]
        break;
 800422a:	e068      	b.n	80042fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	089b      	lsrs	r3, r3, #2
 8004230:	60fb      	str	r3, [r7, #12]
        break;
 8004232:	e064      	b.n	80042fe <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004234:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004238:	f04f 0100 	mov.w	r1, #0
 800423c:	f007 f8ca 	bl	800b3d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004240:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800424a:	d051      	beq.n	80042f0 <ADC_ConfigureBoostMode+0x13c>
 800424c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004250:	d854      	bhi.n	80042fc <ADC_ConfigureBoostMode+0x148>
 8004252:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004256:	d047      	beq.n	80042e8 <ADC_ConfigureBoostMode+0x134>
 8004258:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800425c:	d84e      	bhi.n	80042fc <ADC_ConfigureBoostMode+0x148>
 800425e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004262:	d03d      	beq.n	80042e0 <ADC_ConfigureBoostMode+0x12c>
 8004264:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004268:	d848      	bhi.n	80042fc <ADC_ConfigureBoostMode+0x148>
 800426a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800426e:	d033      	beq.n	80042d8 <ADC_ConfigureBoostMode+0x124>
 8004270:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004274:	d842      	bhi.n	80042fc <ADC_ConfigureBoostMode+0x148>
 8004276:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800427a:	d029      	beq.n	80042d0 <ADC_ConfigureBoostMode+0x11c>
 800427c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004280:	d83c      	bhi.n	80042fc <ADC_ConfigureBoostMode+0x148>
 8004282:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004286:	d01a      	beq.n	80042be <ADC_ConfigureBoostMode+0x10a>
 8004288:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800428c:	d836      	bhi.n	80042fc <ADC_ConfigureBoostMode+0x148>
 800428e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004292:	d014      	beq.n	80042be <ADC_ConfigureBoostMode+0x10a>
 8004294:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004298:	d830      	bhi.n	80042fc <ADC_ConfigureBoostMode+0x148>
 800429a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800429e:	d00e      	beq.n	80042be <ADC_ConfigureBoostMode+0x10a>
 80042a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042a4:	d82a      	bhi.n	80042fc <ADC_ConfigureBoostMode+0x148>
 80042a6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80042aa:	d008      	beq.n	80042be <ADC_ConfigureBoostMode+0x10a>
 80042ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80042b0:	d824      	bhi.n	80042fc <ADC_ConfigureBoostMode+0x148>
 80042b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042b6:	d002      	beq.n	80042be <ADC_ConfigureBoostMode+0x10a>
 80042b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80042bc:	d11e      	bne.n	80042fc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	0c9b      	lsrs	r3, r3, #18
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042cc:	60fb      	str	r3, [r7, #12]
        break;
 80042ce:	e016      	b.n	80042fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	091b      	lsrs	r3, r3, #4
 80042d4:	60fb      	str	r3, [r7, #12]
        break;
 80042d6:	e012      	b.n	80042fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	095b      	lsrs	r3, r3, #5
 80042dc:	60fb      	str	r3, [r7, #12]
        break;
 80042de:	e00e      	b.n	80042fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	099b      	lsrs	r3, r3, #6
 80042e4:	60fb      	str	r3, [r7, #12]
        break;
 80042e6:	e00a      	b.n	80042fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	09db      	lsrs	r3, r3, #7
 80042ec:	60fb      	str	r3, [r7, #12]
        break;
 80042ee:	e006      	b.n	80042fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	0a1b      	lsrs	r3, r3, #8
 80042f4:	60fb      	str	r3, [r7, #12]
        break;
 80042f6:	e002      	b.n	80042fe <ADC_ConfigureBoostMode+0x14a>
        break;
 80042f8:	bf00      	nop
 80042fa:	e000      	b.n	80042fe <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80042fc:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	085b      	lsrs	r3, r3, #1
 8004302:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4a1f      	ldr	r2, [pc, #124]	; (8004384 <ADC_ConfigureBoostMode+0x1d0>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d808      	bhi.n	800431e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800431a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800431c:	e025      	b.n	800436a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4a19      	ldr	r2, [pc, #100]	; (8004388 <ADC_ConfigureBoostMode+0x1d4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d80a      	bhi.n	800433c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004338:	609a      	str	r2, [r3, #8]
}
 800433a:	e016      	b.n	800436a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4a13      	ldr	r2, [pc, #76]	; (800438c <ADC_ConfigureBoostMode+0x1d8>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d80a      	bhi.n	800435a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004356:	609a      	str	r2, [r3, #8]
}
 8004358:	e007      	b.n	800436a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004368:	609a      	str	r2, [r3, #8]
}
 800436a:	bf00      	nop
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	40022000 	.word	0x40022000
 8004378:	40022100 	.word	0x40022100
 800437c:	40022300 	.word	0x40022300
 8004380:	58026300 	.word	0x58026300
 8004384:	005f5e10 	.word	0x005f5e10
 8004388:	00bebc20 	.word	0x00bebc20
 800438c:	017d7840 	.word	0x017d7840

08004390 <LL_ADC_IsEnabled>:
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <LL_ADC_IsEnabled+0x18>
 80043a4:	2301      	movs	r3, #1
 80043a6:	e000      	b.n	80043aa <LL_ADC_IsEnabled+0x1a>
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <LL_ADC_REG_IsConversionOngoing>:
{
 80043b6:	b480      	push	{r7}
 80043b8:	b083      	sub	sp, #12
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 0304 	and.w	r3, r3, #4
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d101      	bne.n	80043ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80043dc:	b590      	push	{r4, r7, lr}
 80043de:	b0a3      	sub	sp, #140	; 0x8c
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043e6:	2300      	movs	r3, #0
 80043e8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d101      	bne.n	80043fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80043f6:	2302      	movs	r3, #2
 80043f8:	e0c1      	b.n	800457e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004402:	2300      	movs	r3, #0
 8004404:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004406:	2300      	movs	r3, #0
 8004408:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a5e      	ldr	r2, [pc, #376]	; (8004588 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d102      	bne.n	800441a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004414:	4b5d      	ldr	r3, [pc, #372]	; (800458c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	e001      	b.n	800441e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800441a:	2300      	movs	r3, #0
 800441c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10b      	bne.n	800443c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004428:	f043 0220 	orr.w	r2, r3, #32
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e0a0      	b.n	800457e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff ffb9 	bl	80043b6 <LL_ADC_REG_IsConversionOngoing>
 8004444:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff ffb2 	bl	80043b6 <LL_ADC_REG_IsConversionOngoing>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	f040 8081 	bne.w	800455c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800445a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800445e:	2b00      	cmp	r3, #0
 8004460:	d17c      	bne.n	800455c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a48      	ldr	r2, [pc, #288]	; (8004588 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d004      	beq.n	8004476 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a46      	ldr	r2, [pc, #280]	; (800458c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d101      	bne.n	800447a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004476:	4b46      	ldr	r3, [pc, #280]	; (8004590 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004478:	e000      	b.n	800447c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800447a:	4b46      	ldr	r3, [pc, #280]	; (8004594 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800447c:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d039      	beq.n	80044fa <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004486:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	431a      	orrs	r2, r3
 8004494:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004496:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a3a      	ldr	r2, [pc, #232]	; (8004588 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d004      	beq.n	80044ac <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a39      	ldr	r2, [pc, #228]	; (800458c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d10e      	bne.n	80044ca <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80044ac:	4836      	ldr	r0, [pc, #216]	; (8004588 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80044ae:	f7ff ff6f 	bl	8004390 <LL_ADC_IsEnabled>
 80044b2:	4604      	mov	r4, r0
 80044b4:	4835      	ldr	r0, [pc, #212]	; (800458c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80044b6:	f7ff ff6b 	bl	8004390 <LL_ADC_IsEnabled>
 80044ba:	4603      	mov	r3, r0
 80044bc:	4323      	orrs	r3, r4
 80044be:	2b00      	cmp	r3, #0
 80044c0:	bf0c      	ite	eq
 80044c2:	2301      	moveq	r3, #1
 80044c4:	2300      	movne	r3, #0
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	e008      	b.n	80044dc <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80044ca:	4833      	ldr	r0, [pc, #204]	; (8004598 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80044cc:	f7ff ff60 	bl	8004390 <LL_ADC_IsEnabled>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	bf0c      	ite	eq
 80044d6:	2301      	moveq	r3, #1
 80044d8:	2300      	movne	r3, #0
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d047      	beq.n	8004570 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80044e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	4b2d      	ldr	r3, [pc, #180]	; (800459c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80044e6:	4013      	ands	r3, r2
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	6811      	ldr	r1, [r2, #0]
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	6892      	ldr	r2, [r2, #8]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	431a      	orrs	r2, r3
 80044f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044f6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044f8:	e03a      	b.n	8004570 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80044fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004502:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004504:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a1f      	ldr	r2, [pc, #124]	; (8004588 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d004      	beq.n	800451a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a1d      	ldr	r2, [pc, #116]	; (800458c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d10e      	bne.n	8004538 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800451a:	481b      	ldr	r0, [pc, #108]	; (8004588 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800451c:	f7ff ff38 	bl	8004390 <LL_ADC_IsEnabled>
 8004520:	4604      	mov	r4, r0
 8004522:	481a      	ldr	r0, [pc, #104]	; (800458c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004524:	f7ff ff34 	bl	8004390 <LL_ADC_IsEnabled>
 8004528:	4603      	mov	r3, r0
 800452a:	4323      	orrs	r3, r4
 800452c:	2b00      	cmp	r3, #0
 800452e:	bf0c      	ite	eq
 8004530:	2301      	moveq	r3, #1
 8004532:	2300      	movne	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	e008      	b.n	800454a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004538:	4817      	ldr	r0, [pc, #92]	; (8004598 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800453a:	f7ff ff29 	bl	8004390 <LL_ADC_IsEnabled>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	bf0c      	ite	eq
 8004544:	2301      	moveq	r3, #1
 8004546:	2300      	movne	r3, #0
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d010      	beq.n	8004570 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800454e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004550:	689a      	ldr	r2, [r3, #8]
 8004552:	4b12      	ldr	r3, [pc, #72]	; (800459c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004554:	4013      	ands	r3, r2
 8004556:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004558:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800455a:	e009      	b.n	8004570 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004560:	f043 0220 	orr.w	r2, r3, #32
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800456e:	e000      	b.n	8004572 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004570:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800457a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800457e:	4618      	mov	r0, r3
 8004580:	378c      	adds	r7, #140	; 0x8c
 8004582:	46bd      	mov	sp, r7
 8004584:	bd90      	pop	{r4, r7, pc}
 8004586:	bf00      	nop
 8004588:	40022000 	.word	0x40022000
 800458c:	40022100 	.word	0x40022100
 8004590:	40022300 	.word	0x40022300
 8004594:	58026300 	.word	0x58026300
 8004598:	58026000 	.word	0x58026000
 800459c:	fffff0e0 	.word	0xfffff0e0

080045a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045b0:	4b0b      	ldr	r3, [pc, #44]	; (80045e0 <__NVIC_SetPriorityGrouping+0x40>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045bc:	4013      	ands	r3, r2
 80045be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80045c8:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <__NVIC_SetPriorityGrouping+0x44>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045ce:	4a04      	ldr	r2, [pc, #16]	; (80045e0 <__NVIC_SetPriorityGrouping+0x40>)
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	60d3      	str	r3, [r2, #12]
}
 80045d4:	bf00      	nop
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	e000ed00 	.word	0xe000ed00
 80045e4:	05fa0000 	.word	0x05fa0000

080045e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045ec:	4b04      	ldr	r3, [pc, #16]	; (8004600 <__NVIC_GetPriorityGrouping+0x18>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	0a1b      	lsrs	r3, r3, #8
 80045f2:	f003 0307 	and.w	r3, r3, #7
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	e000ed00 	.word	0xe000ed00

08004604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	4603      	mov	r3, r0
 800460c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800460e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004612:	2b00      	cmp	r3, #0
 8004614:	db0b      	blt.n	800462e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004616:	88fb      	ldrh	r3, [r7, #6]
 8004618:	f003 021f 	and.w	r2, r3, #31
 800461c:	4907      	ldr	r1, [pc, #28]	; (800463c <__NVIC_EnableIRQ+0x38>)
 800461e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004622:	095b      	lsrs	r3, r3, #5
 8004624:	2001      	movs	r0, #1
 8004626:	fa00 f202 	lsl.w	r2, r0, r2
 800462a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	e000e100 	.word	0xe000e100

08004640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	6039      	str	r1, [r7, #0]
 800464a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800464c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004650:	2b00      	cmp	r3, #0
 8004652:	db0a      	blt.n	800466a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	b2da      	uxtb	r2, r3
 8004658:	490c      	ldr	r1, [pc, #48]	; (800468c <__NVIC_SetPriority+0x4c>)
 800465a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800465e:	0112      	lsls	r2, r2, #4
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	440b      	add	r3, r1
 8004664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004668:	e00a      	b.n	8004680 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	b2da      	uxtb	r2, r3
 800466e:	4908      	ldr	r1, [pc, #32]	; (8004690 <__NVIC_SetPriority+0x50>)
 8004670:	88fb      	ldrh	r3, [r7, #6]
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	3b04      	subs	r3, #4
 8004678:	0112      	lsls	r2, r2, #4
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	440b      	add	r3, r1
 800467e:	761a      	strb	r2, [r3, #24]
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	e000e100 	.word	0xe000e100
 8004690:	e000ed00 	.word	0xe000ed00

08004694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004694:	b480      	push	{r7}
 8004696:	b089      	sub	sp, #36	; 0x24
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	f1c3 0307 	rsb	r3, r3, #7
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	bf28      	it	cs
 80046b2:	2304      	movcs	r3, #4
 80046b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	3304      	adds	r3, #4
 80046ba:	2b06      	cmp	r3, #6
 80046bc:	d902      	bls.n	80046c4 <NVIC_EncodePriority+0x30>
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	3b03      	subs	r3, #3
 80046c2:	e000      	b.n	80046c6 <NVIC_EncodePriority+0x32>
 80046c4:	2300      	movs	r3, #0
 80046c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046c8:	f04f 32ff 	mov.w	r2, #4294967295
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	fa02 f303 	lsl.w	r3, r2, r3
 80046d2:	43da      	mvns	r2, r3
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	401a      	ands	r2, r3
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046dc:	f04f 31ff 	mov.w	r1, #4294967295
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	fa01 f303 	lsl.w	r3, r1, r3
 80046e6:	43d9      	mvns	r1, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046ec:	4313      	orrs	r3, r2
         );
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3724      	adds	r7, #36	; 0x24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
	...

080046fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3b01      	subs	r3, #1
 8004708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800470c:	d301      	bcc.n	8004712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800470e:	2301      	movs	r3, #1
 8004710:	e00f      	b.n	8004732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004712:	4a0a      	ldr	r2, [pc, #40]	; (800473c <SysTick_Config+0x40>)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3b01      	subs	r3, #1
 8004718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800471a:	210f      	movs	r1, #15
 800471c:	f04f 30ff 	mov.w	r0, #4294967295
 8004720:	f7ff ff8e 	bl	8004640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004724:	4b05      	ldr	r3, [pc, #20]	; (800473c <SysTick_Config+0x40>)
 8004726:	2200      	movs	r2, #0
 8004728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800472a:	4b04      	ldr	r3, [pc, #16]	; (800473c <SysTick_Config+0x40>)
 800472c:	2207      	movs	r2, #7
 800472e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	e000e010 	.word	0xe000e010

08004740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7ff ff29 	bl	80045a0 <__NVIC_SetPriorityGrouping>
}
 800474e:	bf00      	nop
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b086      	sub	sp, #24
 800475a:	af00      	add	r7, sp, #0
 800475c:	4603      	mov	r3, r0
 800475e:	60b9      	str	r1, [r7, #8]
 8004760:	607a      	str	r2, [r7, #4]
 8004762:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004764:	f7ff ff40 	bl	80045e8 <__NVIC_GetPriorityGrouping>
 8004768:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	68b9      	ldr	r1, [r7, #8]
 800476e:	6978      	ldr	r0, [r7, #20]
 8004770:	f7ff ff90 	bl	8004694 <NVIC_EncodePriority>
 8004774:	4602      	mov	r2, r0
 8004776:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800477a:	4611      	mov	r1, r2
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff ff5f 	bl	8004640 <__NVIC_SetPriority>
}
 8004782:	bf00      	nop
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b082      	sub	sp, #8
 800478e:	af00      	add	r7, sp, #0
 8004790:	4603      	mov	r3, r0
 8004792:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004794:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff ff33 	bl	8004604 <__NVIC_EnableIRQ>
}
 800479e:	bf00      	nop
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b082      	sub	sp, #8
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7ff ffa4 	bl	80046fc <SysTick_Config>
 80047b4:	4603      	mov	r3, r0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80047c8:	f7fe fb34 	bl	8002e34 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e312      	b.n	8004dfe <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a66      	ldr	r2, [pc, #408]	; (8004978 <HAL_DMA_Init+0x1b8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d04a      	beq.n	8004878 <HAL_DMA_Init+0xb8>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a65      	ldr	r2, [pc, #404]	; (800497c <HAL_DMA_Init+0x1bc>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d045      	beq.n	8004878 <HAL_DMA_Init+0xb8>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a63      	ldr	r2, [pc, #396]	; (8004980 <HAL_DMA_Init+0x1c0>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d040      	beq.n	8004878 <HAL_DMA_Init+0xb8>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a62      	ldr	r2, [pc, #392]	; (8004984 <HAL_DMA_Init+0x1c4>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d03b      	beq.n	8004878 <HAL_DMA_Init+0xb8>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a60      	ldr	r2, [pc, #384]	; (8004988 <HAL_DMA_Init+0x1c8>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d036      	beq.n	8004878 <HAL_DMA_Init+0xb8>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a5f      	ldr	r2, [pc, #380]	; (800498c <HAL_DMA_Init+0x1cc>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d031      	beq.n	8004878 <HAL_DMA_Init+0xb8>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a5d      	ldr	r2, [pc, #372]	; (8004990 <HAL_DMA_Init+0x1d0>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d02c      	beq.n	8004878 <HAL_DMA_Init+0xb8>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a5c      	ldr	r2, [pc, #368]	; (8004994 <HAL_DMA_Init+0x1d4>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d027      	beq.n	8004878 <HAL_DMA_Init+0xb8>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a5a      	ldr	r2, [pc, #360]	; (8004998 <HAL_DMA_Init+0x1d8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d022      	beq.n	8004878 <HAL_DMA_Init+0xb8>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a59      	ldr	r2, [pc, #356]	; (800499c <HAL_DMA_Init+0x1dc>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d01d      	beq.n	8004878 <HAL_DMA_Init+0xb8>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a57      	ldr	r2, [pc, #348]	; (80049a0 <HAL_DMA_Init+0x1e0>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d018      	beq.n	8004878 <HAL_DMA_Init+0xb8>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a56      	ldr	r2, [pc, #344]	; (80049a4 <HAL_DMA_Init+0x1e4>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d013      	beq.n	8004878 <HAL_DMA_Init+0xb8>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a54      	ldr	r2, [pc, #336]	; (80049a8 <HAL_DMA_Init+0x1e8>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00e      	beq.n	8004878 <HAL_DMA_Init+0xb8>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a53      	ldr	r2, [pc, #332]	; (80049ac <HAL_DMA_Init+0x1ec>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d009      	beq.n	8004878 <HAL_DMA_Init+0xb8>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a51      	ldr	r2, [pc, #324]	; (80049b0 <HAL_DMA_Init+0x1f0>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d004      	beq.n	8004878 <HAL_DMA_Init+0xb8>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a50      	ldr	r2, [pc, #320]	; (80049b4 <HAL_DMA_Init+0x1f4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d101      	bne.n	800487c <HAL_DMA_Init+0xbc>
 8004878:	2301      	movs	r3, #1
 800487a:	e000      	b.n	800487e <HAL_DMA_Init+0xbe>
 800487c:	2300      	movs	r3, #0
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 813c 	beq.w	8004afc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a37      	ldr	r2, [pc, #220]	; (8004978 <HAL_DMA_Init+0x1b8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d04a      	beq.n	8004934 <HAL_DMA_Init+0x174>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a36      	ldr	r2, [pc, #216]	; (800497c <HAL_DMA_Init+0x1bc>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d045      	beq.n	8004934 <HAL_DMA_Init+0x174>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a34      	ldr	r2, [pc, #208]	; (8004980 <HAL_DMA_Init+0x1c0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d040      	beq.n	8004934 <HAL_DMA_Init+0x174>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a33      	ldr	r2, [pc, #204]	; (8004984 <HAL_DMA_Init+0x1c4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d03b      	beq.n	8004934 <HAL_DMA_Init+0x174>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a31      	ldr	r2, [pc, #196]	; (8004988 <HAL_DMA_Init+0x1c8>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d036      	beq.n	8004934 <HAL_DMA_Init+0x174>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a30      	ldr	r2, [pc, #192]	; (800498c <HAL_DMA_Init+0x1cc>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d031      	beq.n	8004934 <HAL_DMA_Init+0x174>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a2e      	ldr	r2, [pc, #184]	; (8004990 <HAL_DMA_Init+0x1d0>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d02c      	beq.n	8004934 <HAL_DMA_Init+0x174>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a2d      	ldr	r2, [pc, #180]	; (8004994 <HAL_DMA_Init+0x1d4>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d027      	beq.n	8004934 <HAL_DMA_Init+0x174>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a2b      	ldr	r2, [pc, #172]	; (8004998 <HAL_DMA_Init+0x1d8>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d022      	beq.n	8004934 <HAL_DMA_Init+0x174>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a2a      	ldr	r2, [pc, #168]	; (800499c <HAL_DMA_Init+0x1dc>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d01d      	beq.n	8004934 <HAL_DMA_Init+0x174>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a28      	ldr	r2, [pc, #160]	; (80049a0 <HAL_DMA_Init+0x1e0>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d018      	beq.n	8004934 <HAL_DMA_Init+0x174>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a27      	ldr	r2, [pc, #156]	; (80049a4 <HAL_DMA_Init+0x1e4>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d013      	beq.n	8004934 <HAL_DMA_Init+0x174>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a25      	ldr	r2, [pc, #148]	; (80049a8 <HAL_DMA_Init+0x1e8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00e      	beq.n	8004934 <HAL_DMA_Init+0x174>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a24      	ldr	r2, [pc, #144]	; (80049ac <HAL_DMA_Init+0x1ec>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d009      	beq.n	8004934 <HAL_DMA_Init+0x174>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a22      	ldr	r2, [pc, #136]	; (80049b0 <HAL_DMA_Init+0x1f0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d004      	beq.n	8004934 <HAL_DMA_Init+0x174>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a21      	ldr	r2, [pc, #132]	; (80049b4 <HAL_DMA_Init+0x1f4>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d108      	bne.n	8004946 <HAL_DMA_Init+0x186>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 0201 	bic.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	e007      	b.n	8004956 <HAL_DMA_Init+0x196>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0201 	bic.w	r2, r2, #1
 8004954:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004956:	e02f      	b.n	80049b8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004958:	f7fe fa6c 	bl	8002e34 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b05      	cmp	r3, #5
 8004964:	d928      	bls.n	80049b8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2220      	movs	r2, #32
 800496a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2203      	movs	r2, #3
 8004970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e242      	b.n	8004dfe <HAL_DMA_Init+0x63e>
 8004978:	40020010 	.word	0x40020010
 800497c:	40020028 	.word	0x40020028
 8004980:	40020040 	.word	0x40020040
 8004984:	40020058 	.word	0x40020058
 8004988:	40020070 	.word	0x40020070
 800498c:	40020088 	.word	0x40020088
 8004990:	400200a0 	.word	0x400200a0
 8004994:	400200b8 	.word	0x400200b8
 8004998:	40020410 	.word	0x40020410
 800499c:	40020428 	.word	0x40020428
 80049a0:	40020440 	.word	0x40020440
 80049a4:	40020458 	.word	0x40020458
 80049a8:	40020470 	.word	0x40020470
 80049ac:	40020488 	.word	0x40020488
 80049b0:	400204a0 	.word	0x400204a0
 80049b4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1c8      	bne.n	8004958 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	4b83      	ldr	r3, [pc, #524]	; (8004be0 <HAL_DMA_Init+0x420>)
 80049d2:	4013      	ands	r3, r2
 80049d4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80049de:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049f6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	2b04      	cmp	r3, #4
 8004a0a:	d107      	bne.n	8004a1c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a14:	4313      	orrs	r3, r2
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2b28      	cmp	r3, #40	; 0x28
 8004a22:	d903      	bls.n	8004a2c <HAL_DMA_Init+0x26c>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b2e      	cmp	r3, #46	; 0x2e
 8004a2a:	d91f      	bls.n	8004a6c <HAL_DMA_Init+0x2ac>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	2b3e      	cmp	r3, #62	; 0x3e
 8004a32:	d903      	bls.n	8004a3c <HAL_DMA_Init+0x27c>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b42      	cmp	r3, #66	; 0x42
 8004a3a:	d917      	bls.n	8004a6c <HAL_DMA_Init+0x2ac>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2b46      	cmp	r3, #70	; 0x46
 8004a42:	d903      	bls.n	8004a4c <HAL_DMA_Init+0x28c>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2b48      	cmp	r3, #72	; 0x48
 8004a4a:	d90f      	bls.n	8004a6c <HAL_DMA_Init+0x2ac>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2b4e      	cmp	r3, #78	; 0x4e
 8004a52:	d903      	bls.n	8004a5c <HAL_DMA_Init+0x29c>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	2b52      	cmp	r3, #82	; 0x52
 8004a5a:	d907      	bls.n	8004a6c <HAL_DMA_Init+0x2ac>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2b73      	cmp	r3, #115	; 0x73
 8004a62:	d905      	bls.n	8004a70 <HAL_DMA_Init+0x2b0>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2b77      	cmp	r3, #119	; 0x77
 8004a6a:	d801      	bhi.n	8004a70 <HAL_DMA_Init+0x2b0>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e000      	b.n	8004a72 <HAL_DMA_Init+0x2b2>
 8004a70:	2300      	movs	r3, #0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a7c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f023 0307 	bic.w	r3, r3, #7
 8004a94:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	2b04      	cmp	r3, #4
 8004aa6:	d117      	bne.n	8004ad8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00e      	beq.n	8004ad8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f001 f9b4 	bl	8005e28 <DMA_CheckFifoParam>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d008      	beq.n	8004ad8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2240      	movs	r2, #64	; 0x40
 8004aca:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e192      	b.n	8004dfe <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f001 f8ef 	bl	8005cc4 <DMA_CalcBaseAndBitshift>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aee:	f003 031f 	and.w	r3, r3, #31
 8004af2:	223f      	movs	r2, #63	; 0x3f
 8004af4:	409a      	lsls	r2, r3
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	609a      	str	r2, [r3, #8]
 8004afa:	e0c8      	b.n	8004c8e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a38      	ldr	r2, [pc, #224]	; (8004be4 <HAL_DMA_Init+0x424>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d022      	beq.n	8004b4c <HAL_DMA_Init+0x38c>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a37      	ldr	r2, [pc, #220]	; (8004be8 <HAL_DMA_Init+0x428>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d01d      	beq.n	8004b4c <HAL_DMA_Init+0x38c>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a35      	ldr	r2, [pc, #212]	; (8004bec <HAL_DMA_Init+0x42c>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d018      	beq.n	8004b4c <HAL_DMA_Init+0x38c>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a34      	ldr	r2, [pc, #208]	; (8004bf0 <HAL_DMA_Init+0x430>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d013      	beq.n	8004b4c <HAL_DMA_Init+0x38c>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a32      	ldr	r2, [pc, #200]	; (8004bf4 <HAL_DMA_Init+0x434>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d00e      	beq.n	8004b4c <HAL_DMA_Init+0x38c>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a31      	ldr	r2, [pc, #196]	; (8004bf8 <HAL_DMA_Init+0x438>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d009      	beq.n	8004b4c <HAL_DMA_Init+0x38c>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a2f      	ldr	r2, [pc, #188]	; (8004bfc <HAL_DMA_Init+0x43c>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d004      	beq.n	8004b4c <HAL_DMA_Init+0x38c>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a2e      	ldr	r2, [pc, #184]	; (8004c00 <HAL_DMA_Init+0x440>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d101      	bne.n	8004b50 <HAL_DMA_Init+0x390>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e000      	b.n	8004b52 <HAL_DMA_Init+0x392>
 8004b50:	2300      	movs	r3, #0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f000 8092 	beq.w	8004c7c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a21      	ldr	r2, [pc, #132]	; (8004be4 <HAL_DMA_Init+0x424>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d021      	beq.n	8004ba6 <HAL_DMA_Init+0x3e6>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a20      	ldr	r2, [pc, #128]	; (8004be8 <HAL_DMA_Init+0x428>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d01c      	beq.n	8004ba6 <HAL_DMA_Init+0x3e6>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a1e      	ldr	r2, [pc, #120]	; (8004bec <HAL_DMA_Init+0x42c>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d017      	beq.n	8004ba6 <HAL_DMA_Init+0x3e6>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a1d      	ldr	r2, [pc, #116]	; (8004bf0 <HAL_DMA_Init+0x430>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d012      	beq.n	8004ba6 <HAL_DMA_Init+0x3e6>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a1b      	ldr	r2, [pc, #108]	; (8004bf4 <HAL_DMA_Init+0x434>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d00d      	beq.n	8004ba6 <HAL_DMA_Init+0x3e6>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a1a      	ldr	r2, [pc, #104]	; (8004bf8 <HAL_DMA_Init+0x438>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d008      	beq.n	8004ba6 <HAL_DMA_Init+0x3e6>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a18      	ldr	r2, [pc, #96]	; (8004bfc <HAL_DMA_Init+0x43c>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d003      	beq.n	8004ba6 <HAL_DMA_Init+0x3e6>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a17      	ldr	r2, [pc, #92]	; (8004c00 <HAL_DMA_Init+0x440>)
 8004ba4:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2202      	movs	r2, #2
 8004baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	4b10      	ldr	r3, [pc, #64]	; (8004c04 <HAL_DMA_Init+0x444>)
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	2b40      	cmp	r3, #64	; 0x40
 8004bcc:	d01c      	beq.n	8004c08 <HAL_DMA_Init+0x448>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	2b80      	cmp	r3, #128	; 0x80
 8004bd4:	d102      	bne.n	8004bdc <HAL_DMA_Init+0x41c>
 8004bd6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004bda:	e016      	b.n	8004c0a <HAL_DMA_Init+0x44a>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	e014      	b.n	8004c0a <HAL_DMA_Init+0x44a>
 8004be0:	fe10803f 	.word	0xfe10803f
 8004be4:	58025408 	.word	0x58025408
 8004be8:	5802541c 	.word	0x5802541c
 8004bec:	58025430 	.word	0x58025430
 8004bf0:	58025444 	.word	0x58025444
 8004bf4:	58025458 	.word	0x58025458
 8004bf8:	5802546c 	.word	0x5802546c
 8004bfc:	58025480 	.word	0x58025480
 8004c00:	58025494 	.word	0x58025494
 8004c04:	fffe000f 	.word	0xfffe000f
 8004c08:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	68d2      	ldr	r2, [r2, #12]
 8004c0e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004c18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004c20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004c28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004c30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004c38:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	4b6e      	ldr	r3, [pc, #440]	; (8004e08 <HAL_DMA_Init+0x648>)
 8004c50:	4413      	add	r3, r2
 8004c52:	4a6e      	ldr	r2, [pc, #440]	; (8004e0c <HAL_DMA_Init+0x64c>)
 8004c54:	fba2 2303 	umull	r2, r3, r2, r3
 8004c58:	091b      	lsrs	r3, r3, #4
 8004c5a:	009a      	lsls	r2, r3, #2
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f001 f82f 	bl	8005cc4 <DMA_CalcBaseAndBitshift>
 8004c66:	4603      	mov	r3, r0
 8004c68:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c6e:	f003 031f 	and.w	r3, r3, #31
 8004c72:	2201      	movs	r2, #1
 8004c74:	409a      	lsls	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	605a      	str	r2, [r3, #4]
 8004c7a:	e008      	b.n	8004c8e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2240      	movs	r2, #64	; 0x40
 8004c80:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2203      	movs	r2, #3
 8004c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e0b7      	b.n	8004dfe <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a5f      	ldr	r2, [pc, #380]	; (8004e10 <HAL_DMA_Init+0x650>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d072      	beq.n	8004d7e <HAL_DMA_Init+0x5be>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a5d      	ldr	r2, [pc, #372]	; (8004e14 <HAL_DMA_Init+0x654>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d06d      	beq.n	8004d7e <HAL_DMA_Init+0x5be>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a5c      	ldr	r2, [pc, #368]	; (8004e18 <HAL_DMA_Init+0x658>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d068      	beq.n	8004d7e <HAL_DMA_Init+0x5be>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a5a      	ldr	r2, [pc, #360]	; (8004e1c <HAL_DMA_Init+0x65c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d063      	beq.n	8004d7e <HAL_DMA_Init+0x5be>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a59      	ldr	r2, [pc, #356]	; (8004e20 <HAL_DMA_Init+0x660>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d05e      	beq.n	8004d7e <HAL_DMA_Init+0x5be>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a57      	ldr	r2, [pc, #348]	; (8004e24 <HAL_DMA_Init+0x664>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d059      	beq.n	8004d7e <HAL_DMA_Init+0x5be>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a56      	ldr	r2, [pc, #344]	; (8004e28 <HAL_DMA_Init+0x668>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d054      	beq.n	8004d7e <HAL_DMA_Init+0x5be>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a54      	ldr	r2, [pc, #336]	; (8004e2c <HAL_DMA_Init+0x66c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d04f      	beq.n	8004d7e <HAL_DMA_Init+0x5be>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a53      	ldr	r2, [pc, #332]	; (8004e30 <HAL_DMA_Init+0x670>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d04a      	beq.n	8004d7e <HAL_DMA_Init+0x5be>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a51      	ldr	r2, [pc, #324]	; (8004e34 <HAL_DMA_Init+0x674>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d045      	beq.n	8004d7e <HAL_DMA_Init+0x5be>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a50      	ldr	r2, [pc, #320]	; (8004e38 <HAL_DMA_Init+0x678>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d040      	beq.n	8004d7e <HAL_DMA_Init+0x5be>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a4e      	ldr	r2, [pc, #312]	; (8004e3c <HAL_DMA_Init+0x67c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d03b      	beq.n	8004d7e <HAL_DMA_Init+0x5be>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a4d      	ldr	r2, [pc, #308]	; (8004e40 <HAL_DMA_Init+0x680>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d036      	beq.n	8004d7e <HAL_DMA_Init+0x5be>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a4b      	ldr	r2, [pc, #300]	; (8004e44 <HAL_DMA_Init+0x684>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d031      	beq.n	8004d7e <HAL_DMA_Init+0x5be>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a4a      	ldr	r2, [pc, #296]	; (8004e48 <HAL_DMA_Init+0x688>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d02c      	beq.n	8004d7e <HAL_DMA_Init+0x5be>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a48      	ldr	r2, [pc, #288]	; (8004e4c <HAL_DMA_Init+0x68c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d027      	beq.n	8004d7e <HAL_DMA_Init+0x5be>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a47      	ldr	r2, [pc, #284]	; (8004e50 <HAL_DMA_Init+0x690>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d022      	beq.n	8004d7e <HAL_DMA_Init+0x5be>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a45      	ldr	r2, [pc, #276]	; (8004e54 <HAL_DMA_Init+0x694>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d01d      	beq.n	8004d7e <HAL_DMA_Init+0x5be>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a44      	ldr	r2, [pc, #272]	; (8004e58 <HAL_DMA_Init+0x698>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d018      	beq.n	8004d7e <HAL_DMA_Init+0x5be>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a42      	ldr	r2, [pc, #264]	; (8004e5c <HAL_DMA_Init+0x69c>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d013      	beq.n	8004d7e <HAL_DMA_Init+0x5be>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a41      	ldr	r2, [pc, #260]	; (8004e60 <HAL_DMA_Init+0x6a0>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00e      	beq.n	8004d7e <HAL_DMA_Init+0x5be>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a3f      	ldr	r2, [pc, #252]	; (8004e64 <HAL_DMA_Init+0x6a4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d009      	beq.n	8004d7e <HAL_DMA_Init+0x5be>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a3e      	ldr	r2, [pc, #248]	; (8004e68 <HAL_DMA_Init+0x6a8>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d004      	beq.n	8004d7e <HAL_DMA_Init+0x5be>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a3c      	ldr	r2, [pc, #240]	; (8004e6c <HAL_DMA_Init+0x6ac>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d101      	bne.n	8004d82 <HAL_DMA_Init+0x5c2>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e000      	b.n	8004d84 <HAL_DMA_Init+0x5c4>
 8004d82:	2300      	movs	r3, #0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d032      	beq.n	8004dee <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f001 f8c9 	bl	8005f20 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	2b80      	cmp	r3, #128	; 0x80
 8004d94:	d102      	bne.n	8004d9c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da4:	b2d2      	uxtb	r2, r2
 8004da6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004db0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d010      	beq.n	8004ddc <HAL_DMA_Init+0x61c>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b08      	cmp	r3, #8
 8004dc0:	d80c      	bhi.n	8004ddc <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f001 f946 	bl	8006054 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004dd8:	605a      	str	r2, [r3, #4]
 8004dda:	e008      	b.n	8004dee <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3718      	adds	r7, #24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	a7fdabf8 	.word	0xa7fdabf8
 8004e0c:	cccccccd 	.word	0xcccccccd
 8004e10:	40020010 	.word	0x40020010
 8004e14:	40020028 	.word	0x40020028
 8004e18:	40020040 	.word	0x40020040
 8004e1c:	40020058 	.word	0x40020058
 8004e20:	40020070 	.word	0x40020070
 8004e24:	40020088 	.word	0x40020088
 8004e28:	400200a0 	.word	0x400200a0
 8004e2c:	400200b8 	.word	0x400200b8
 8004e30:	40020410 	.word	0x40020410
 8004e34:	40020428 	.word	0x40020428
 8004e38:	40020440 	.word	0x40020440
 8004e3c:	40020458 	.word	0x40020458
 8004e40:	40020470 	.word	0x40020470
 8004e44:	40020488 	.word	0x40020488
 8004e48:	400204a0 	.word	0x400204a0
 8004e4c:	400204b8 	.word	0x400204b8
 8004e50:	58025408 	.word	0x58025408
 8004e54:	5802541c 	.word	0x5802541c
 8004e58:	58025430 	.word	0x58025430
 8004e5c:	58025444 	.word	0x58025444
 8004e60:	58025458 	.word	0x58025458
 8004e64:	5802546c 	.word	0x5802546c
 8004e68:	58025480 	.word	0x58025480
 8004e6c:	58025494 	.word	0x58025494

08004e70 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b08a      	sub	sp, #40	; 0x28
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e7c:	4b67      	ldr	r3, [pc, #412]	; (800501c <HAL_DMA_IRQHandler+0x1ac>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a67      	ldr	r2, [pc, #412]	; (8005020 <HAL_DMA_IRQHandler+0x1b0>)
 8004e82:	fba2 2303 	umull	r2, r3, r2, r3
 8004e86:	0a9b      	lsrs	r3, r3, #10
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e94:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a5f      	ldr	r2, [pc, #380]	; (8005024 <HAL_DMA_IRQHandler+0x1b4>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d04a      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xd2>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a5d      	ldr	r2, [pc, #372]	; (8005028 <HAL_DMA_IRQHandler+0x1b8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d045      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xd2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a5c      	ldr	r2, [pc, #368]	; (800502c <HAL_DMA_IRQHandler+0x1bc>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d040      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xd2>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a5a      	ldr	r2, [pc, #360]	; (8005030 <HAL_DMA_IRQHandler+0x1c0>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d03b      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xd2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a59      	ldr	r2, [pc, #356]	; (8005034 <HAL_DMA_IRQHandler+0x1c4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d036      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xd2>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a57      	ldr	r2, [pc, #348]	; (8005038 <HAL_DMA_IRQHandler+0x1c8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d031      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xd2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a56      	ldr	r2, [pc, #344]	; (800503c <HAL_DMA_IRQHandler+0x1cc>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d02c      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xd2>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a54      	ldr	r2, [pc, #336]	; (8005040 <HAL_DMA_IRQHandler+0x1d0>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d027      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xd2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a53      	ldr	r2, [pc, #332]	; (8005044 <HAL_DMA_IRQHandler+0x1d4>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d022      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xd2>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a51      	ldr	r2, [pc, #324]	; (8005048 <HAL_DMA_IRQHandler+0x1d8>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d01d      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xd2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a50      	ldr	r2, [pc, #320]	; (800504c <HAL_DMA_IRQHandler+0x1dc>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d018      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xd2>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a4e      	ldr	r2, [pc, #312]	; (8005050 <HAL_DMA_IRQHandler+0x1e0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d013      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xd2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a4d      	ldr	r2, [pc, #308]	; (8005054 <HAL_DMA_IRQHandler+0x1e4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d00e      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xd2>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a4b      	ldr	r2, [pc, #300]	; (8005058 <HAL_DMA_IRQHandler+0x1e8>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d009      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xd2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a4a      	ldr	r2, [pc, #296]	; (800505c <HAL_DMA_IRQHandler+0x1ec>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d004      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xd2>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a48      	ldr	r2, [pc, #288]	; (8005060 <HAL_DMA_IRQHandler+0x1f0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d101      	bne.n	8004f46 <HAL_DMA_IRQHandler+0xd6>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <HAL_DMA_IRQHandler+0xd8>
 8004f46:	2300      	movs	r3, #0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 842b 	beq.w	80057a4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f52:	f003 031f 	and.w	r3, r3, #31
 8004f56:	2208      	movs	r2, #8
 8004f58:	409a      	lsls	r2, r3
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 80a2 	beq.w	80050a8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a2e      	ldr	r2, [pc, #184]	; (8005024 <HAL_DMA_IRQHandler+0x1b4>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d04a      	beq.n	8005004 <HAL_DMA_IRQHandler+0x194>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a2d      	ldr	r2, [pc, #180]	; (8005028 <HAL_DMA_IRQHandler+0x1b8>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d045      	beq.n	8005004 <HAL_DMA_IRQHandler+0x194>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a2b      	ldr	r2, [pc, #172]	; (800502c <HAL_DMA_IRQHandler+0x1bc>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d040      	beq.n	8005004 <HAL_DMA_IRQHandler+0x194>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a2a      	ldr	r2, [pc, #168]	; (8005030 <HAL_DMA_IRQHandler+0x1c0>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d03b      	beq.n	8005004 <HAL_DMA_IRQHandler+0x194>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a28      	ldr	r2, [pc, #160]	; (8005034 <HAL_DMA_IRQHandler+0x1c4>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d036      	beq.n	8005004 <HAL_DMA_IRQHandler+0x194>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a27      	ldr	r2, [pc, #156]	; (8005038 <HAL_DMA_IRQHandler+0x1c8>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d031      	beq.n	8005004 <HAL_DMA_IRQHandler+0x194>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a25      	ldr	r2, [pc, #148]	; (800503c <HAL_DMA_IRQHandler+0x1cc>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d02c      	beq.n	8005004 <HAL_DMA_IRQHandler+0x194>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a24      	ldr	r2, [pc, #144]	; (8005040 <HAL_DMA_IRQHandler+0x1d0>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d027      	beq.n	8005004 <HAL_DMA_IRQHandler+0x194>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a22      	ldr	r2, [pc, #136]	; (8005044 <HAL_DMA_IRQHandler+0x1d4>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d022      	beq.n	8005004 <HAL_DMA_IRQHandler+0x194>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a21      	ldr	r2, [pc, #132]	; (8005048 <HAL_DMA_IRQHandler+0x1d8>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d01d      	beq.n	8005004 <HAL_DMA_IRQHandler+0x194>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a1f      	ldr	r2, [pc, #124]	; (800504c <HAL_DMA_IRQHandler+0x1dc>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d018      	beq.n	8005004 <HAL_DMA_IRQHandler+0x194>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a1e      	ldr	r2, [pc, #120]	; (8005050 <HAL_DMA_IRQHandler+0x1e0>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d013      	beq.n	8005004 <HAL_DMA_IRQHandler+0x194>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a1c      	ldr	r2, [pc, #112]	; (8005054 <HAL_DMA_IRQHandler+0x1e4>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00e      	beq.n	8005004 <HAL_DMA_IRQHandler+0x194>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a1b      	ldr	r2, [pc, #108]	; (8005058 <HAL_DMA_IRQHandler+0x1e8>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d009      	beq.n	8005004 <HAL_DMA_IRQHandler+0x194>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a19      	ldr	r2, [pc, #100]	; (800505c <HAL_DMA_IRQHandler+0x1ec>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d004      	beq.n	8005004 <HAL_DMA_IRQHandler+0x194>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a18      	ldr	r2, [pc, #96]	; (8005060 <HAL_DMA_IRQHandler+0x1f0>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d12f      	bne.n	8005064 <HAL_DMA_IRQHandler+0x1f4>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	2b00      	cmp	r3, #0
 8005010:	bf14      	ite	ne
 8005012:	2301      	movne	r3, #1
 8005014:	2300      	moveq	r3, #0
 8005016:	b2db      	uxtb	r3, r3
 8005018:	e02e      	b.n	8005078 <HAL_DMA_IRQHandler+0x208>
 800501a:	bf00      	nop
 800501c:	24000000 	.word	0x24000000
 8005020:	1b4e81b5 	.word	0x1b4e81b5
 8005024:	40020010 	.word	0x40020010
 8005028:	40020028 	.word	0x40020028
 800502c:	40020040 	.word	0x40020040
 8005030:	40020058 	.word	0x40020058
 8005034:	40020070 	.word	0x40020070
 8005038:	40020088 	.word	0x40020088
 800503c:	400200a0 	.word	0x400200a0
 8005040:	400200b8 	.word	0x400200b8
 8005044:	40020410 	.word	0x40020410
 8005048:	40020428 	.word	0x40020428
 800504c:	40020440 	.word	0x40020440
 8005050:	40020458 	.word	0x40020458
 8005054:	40020470 	.word	0x40020470
 8005058:	40020488 	.word	0x40020488
 800505c:	400204a0 	.word	0x400204a0
 8005060:	400204b8 	.word	0x400204b8
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0308 	and.w	r3, r3, #8
 800506e:	2b00      	cmp	r3, #0
 8005070:	bf14      	ite	ne
 8005072:	2301      	movne	r3, #1
 8005074:	2300      	moveq	r3, #0
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	d015      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0204 	bic.w	r2, r2, #4
 800508a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005090:	f003 031f 	and.w	r3, r3, #31
 8005094:	2208      	movs	r2, #8
 8005096:	409a      	lsls	r2, r3
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a0:	f043 0201 	orr.w	r2, r3, #1
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ac:	f003 031f 	and.w	r3, r3, #31
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	fa22 f303 	lsr.w	r3, r2, r3
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d06e      	beq.n	800519c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a69      	ldr	r2, [pc, #420]	; (8005268 <HAL_DMA_IRQHandler+0x3f8>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d04a      	beq.n	800515e <HAL_DMA_IRQHandler+0x2ee>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a67      	ldr	r2, [pc, #412]	; (800526c <HAL_DMA_IRQHandler+0x3fc>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d045      	beq.n	800515e <HAL_DMA_IRQHandler+0x2ee>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a66      	ldr	r2, [pc, #408]	; (8005270 <HAL_DMA_IRQHandler+0x400>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d040      	beq.n	800515e <HAL_DMA_IRQHandler+0x2ee>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a64      	ldr	r2, [pc, #400]	; (8005274 <HAL_DMA_IRQHandler+0x404>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d03b      	beq.n	800515e <HAL_DMA_IRQHandler+0x2ee>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a63      	ldr	r2, [pc, #396]	; (8005278 <HAL_DMA_IRQHandler+0x408>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d036      	beq.n	800515e <HAL_DMA_IRQHandler+0x2ee>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a61      	ldr	r2, [pc, #388]	; (800527c <HAL_DMA_IRQHandler+0x40c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d031      	beq.n	800515e <HAL_DMA_IRQHandler+0x2ee>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a60      	ldr	r2, [pc, #384]	; (8005280 <HAL_DMA_IRQHandler+0x410>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d02c      	beq.n	800515e <HAL_DMA_IRQHandler+0x2ee>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a5e      	ldr	r2, [pc, #376]	; (8005284 <HAL_DMA_IRQHandler+0x414>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d027      	beq.n	800515e <HAL_DMA_IRQHandler+0x2ee>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a5d      	ldr	r2, [pc, #372]	; (8005288 <HAL_DMA_IRQHandler+0x418>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d022      	beq.n	800515e <HAL_DMA_IRQHandler+0x2ee>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a5b      	ldr	r2, [pc, #364]	; (800528c <HAL_DMA_IRQHandler+0x41c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d01d      	beq.n	800515e <HAL_DMA_IRQHandler+0x2ee>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a5a      	ldr	r2, [pc, #360]	; (8005290 <HAL_DMA_IRQHandler+0x420>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d018      	beq.n	800515e <HAL_DMA_IRQHandler+0x2ee>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a58      	ldr	r2, [pc, #352]	; (8005294 <HAL_DMA_IRQHandler+0x424>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d013      	beq.n	800515e <HAL_DMA_IRQHandler+0x2ee>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a57      	ldr	r2, [pc, #348]	; (8005298 <HAL_DMA_IRQHandler+0x428>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d00e      	beq.n	800515e <HAL_DMA_IRQHandler+0x2ee>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a55      	ldr	r2, [pc, #340]	; (800529c <HAL_DMA_IRQHandler+0x42c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d009      	beq.n	800515e <HAL_DMA_IRQHandler+0x2ee>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a54      	ldr	r2, [pc, #336]	; (80052a0 <HAL_DMA_IRQHandler+0x430>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d004      	beq.n	800515e <HAL_DMA_IRQHandler+0x2ee>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a52      	ldr	r2, [pc, #328]	; (80052a4 <HAL_DMA_IRQHandler+0x434>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d10a      	bne.n	8005174 <HAL_DMA_IRQHandler+0x304>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005168:	2b00      	cmp	r3, #0
 800516a:	bf14      	ite	ne
 800516c:	2301      	movne	r3, #1
 800516e:	2300      	moveq	r3, #0
 8005170:	b2db      	uxtb	r3, r3
 8005172:	e003      	b.n	800517c <HAL_DMA_IRQHandler+0x30c>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2300      	movs	r3, #0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00d      	beq.n	800519c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005184:	f003 031f 	and.w	r3, r3, #31
 8005188:	2201      	movs	r2, #1
 800518a:	409a      	lsls	r2, r3
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005194:	f043 0202 	orr.w	r2, r3, #2
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a0:	f003 031f 	and.w	r3, r3, #31
 80051a4:	2204      	movs	r2, #4
 80051a6:	409a      	lsls	r2, r3
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	4013      	ands	r3, r2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 808f 	beq.w	80052d0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a2c      	ldr	r2, [pc, #176]	; (8005268 <HAL_DMA_IRQHandler+0x3f8>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d04a      	beq.n	8005252 <HAL_DMA_IRQHandler+0x3e2>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a2a      	ldr	r2, [pc, #168]	; (800526c <HAL_DMA_IRQHandler+0x3fc>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d045      	beq.n	8005252 <HAL_DMA_IRQHandler+0x3e2>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a29      	ldr	r2, [pc, #164]	; (8005270 <HAL_DMA_IRQHandler+0x400>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d040      	beq.n	8005252 <HAL_DMA_IRQHandler+0x3e2>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a27      	ldr	r2, [pc, #156]	; (8005274 <HAL_DMA_IRQHandler+0x404>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d03b      	beq.n	8005252 <HAL_DMA_IRQHandler+0x3e2>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a26      	ldr	r2, [pc, #152]	; (8005278 <HAL_DMA_IRQHandler+0x408>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d036      	beq.n	8005252 <HAL_DMA_IRQHandler+0x3e2>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a24      	ldr	r2, [pc, #144]	; (800527c <HAL_DMA_IRQHandler+0x40c>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d031      	beq.n	8005252 <HAL_DMA_IRQHandler+0x3e2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a23      	ldr	r2, [pc, #140]	; (8005280 <HAL_DMA_IRQHandler+0x410>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d02c      	beq.n	8005252 <HAL_DMA_IRQHandler+0x3e2>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a21      	ldr	r2, [pc, #132]	; (8005284 <HAL_DMA_IRQHandler+0x414>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d027      	beq.n	8005252 <HAL_DMA_IRQHandler+0x3e2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a20      	ldr	r2, [pc, #128]	; (8005288 <HAL_DMA_IRQHandler+0x418>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d022      	beq.n	8005252 <HAL_DMA_IRQHandler+0x3e2>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a1e      	ldr	r2, [pc, #120]	; (800528c <HAL_DMA_IRQHandler+0x41c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d01d      	beq.n	8005252 <HAL_DMA_IRQHandler+0x3e2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a1d      	ldr	r2, [pc, #116]	; (8005290 <HAL_DMA_IRQHandler+0x420>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d018      	beq.n	8005252 <HAL_DMA_IRQHandler+0x3e2>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a1b      	ldr	r2, [pc, #108]	; (8005294 <HAL_DMA_IRQHandler+0x424>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d013      	beq.n	8005252 <HAL_DMA_IRQHandler+0x3e2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a1a      	ldr	r2, [pc, #104]	; (8005298 <HAL_DMA_IRQHandler+0x428>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00e      	beq.n	8005252 <HAL_DMA_IRQHandler+0x3e2>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a18      	ldr	r2, [pc, #96]	; (800529c <HAL_DMA_IRQHandler+0x42c>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d009      	beq.n	8005252 <HAL_DMA_IRQHandler+0x3e2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a17      	ldr	r2, [pc, #92]	; (80052a0 <HAL_DMA_IRQHandler+0x430>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d004      	beq.n	8005252 <HAL_DMA_IRQHandler+0x3e2>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a15      	ldr	r2, [pc, #84]	; (80052a4 <HAL_DMA_IRQHandler+0x434>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d12a      	bne.n	80052a8 <HAL_DMA_IRQHandler+0x438>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b00      	cmp	r3, #0
 800525e:	bf14      	ite	ne
 8005260:	2301      	movne	r3, #1
 8005262:	2300      	moveq	r3, #0
 8005264:	b2db      	uxtb	r3, r3
 8005266:	e023      	b.n	80052b0 <HAL_DMA_IRQHandler+0x440>
 8005268:	40020010 	.word	0x40020010
 800526c:	40020028 	.word	0x40020028
 8005270:	40020040 	.word	0x40020040
 8005274:	40020058 	.word	0x40020058
 8005278:	40020070 	.word	0x40020070
 800527c:	40020088 	.word	0x40020088
 8005280:	400200a0 	.word	0x400200a0
 8005284:	400200b8 	.word	0x400200b8
 8005288:	40020410 	.word	0x40020410
 800528c:	40020428 	.word	0x40020428
 8005290:	40020440 	.word	0x40020440
 8005294:	40020458 	.word	0x40020458
 8005298:	40020470 	.word	0x40020470
 800529c:	40020488 	.word	0x40020488
 80052a0:	400204a0 	.word	0x400204a0
 80052a4:	400204b8 	.word	0x400204b8
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2300      	movs	r3, #0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00d      	beq.n	80052d0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b8:	f003 031f 	and.w	r3, r3, #31
 80052bc:	2204      	movs	r2, #4
 80052be:	409a      	lsls	r2, r3
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c8:	f043 0204 	orr.w	r2, r3, #4
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d4:	f003 031f 	and.w	r3, r3, #31
 80052d8:	2210      	movs	r2, #16
 80052da:	409a      	lsls	r2, r3
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	4013      	ands	r3, r2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 80a6 	beq.w	8005432 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a85      	ldr	r2, [pc, #532]	; (8005500 <HAL_DMA_IRQHandler+0x690>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d04a      	beq.n	8005386 <HAL_DMA_IRQHandler+0x516>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a83      	ldr	r2, [pc, #524]	; (8005504 <HAL_DMA_IRQHandler+0x694>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d045      	beq.n	8005386 <HAL_DMA_IRQHandler+0x516>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a82      	ldr	r2, [pc, #520]	; (8005508 <HAL_DMA_IRQHandler+0x698>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d040      	beq.n	8005386 <HAL_DMA_IRQHandler+0x516>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a80      	ldr	r2, [pc, #512]	; (800550c <HAL_DMA_IRQHandler+0x69c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d03b      	beq.n	8005386 <HAL_DMA_IRQHandler+0x516>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a7f      	ldr	r2, [pc, #508]	; (8005510 <HAL_DMA_IRQHandler+0x6a0>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d036      	beq.n	8005386 <HAL_DMA_IRQHandler+0x516>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a7d      	ldr	r2, [pc, #500]	; (8005514 <HAL_DMA_IRQHandler+0x6a4>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d031      	beq.n	8005386 <HAL_DMA_IRQHandler+0x516>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a7c      	ldr	r2, [pc, #496]	; (8005518 <HAL_DMA_IRQHandler+0x6a8>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d02c      	beq.n	8005386 <HAL_DMA_IRQHandler+0x516>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a7a      	ldr	r2, [pc, #488]	; (800551c <HAL_DMA_IRQHandler+0x6ac>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d027      	beq.n	8005386 <HAL_DMA_IRQHandler+0x516>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a79      	ldr	r2, [pc, #484]	; (8005520 <HAL_DMA_IRQHandler+0x6b0>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d022      	beq.n	8005386 <HAL_DMA_IRQHandler+0x516>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a77      	ldr	r2, [pc, #476]	; (8005524 <HAL_DMA_IRQHandler+0x6b4>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d01d      	beq.n	8005386 <HAL_DMA_IRQHandler+0x516>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a76      	ldr	r2, [pc, #472]	; (8005528 <HAL_DMA_IRQHandler+0x6b8>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d018      	beq.n	8005386 <HAL_DMA_IRQHandler+0x516>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a74      	ldr	r2, [pc, #464]	; (800552c <HAL_DMA_IRQHandler+0x6bc>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d013      	beq.n	8005386 <HAL_DMA_IRQHandler+0x516>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a73      	ldr	r2, [pc, #460]	; (8005530 <HAL_DMA_IRQHandler+0x6c0>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d00e      	beq.n	8005386 <HAL_DMA_IRQHandler+0x516>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a71      	ldr	r2, [pc, #452]	; (8005534 <HAL_DMA_IRQHandler+0x6c4>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d009      	beq.n	8005386 <HAL_DMA_IRQHandler+0x516>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a70      	ldr	r2, [pc, #448]	; (8005538 <HAL_DMA_IRQHandler+0x6c8>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d004      	beq.n	8005386 <HAL_DMA_IRQHandler+0x516>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a6e      	ldr	r2, [pc, #440]	; (800553c <HAL_DMA_IRQHandler+0x6cc>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d10a      	bne.n	800539c <HAL_DMA_IRQHandler+0x52c>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0308 	and.w	r3, r3, #8
 8005390:	2b00      	cmp	r3, #0
 8005392:	bf14      	ite	ne
 8005394:	2301      	movne	r3, #1
 8005396:	2300      	moveq	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	e009      	b.n	80053b0 <HAL_DMA_IRQHandler+0x540>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0304 	and.w	r3, r3, #4
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	bf14      	ite	ne
 80053aa:	2301      	movne	r3, #1
 80053ac:	2300      	moveq	r3, #0
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d03e      	beq.n	8005432 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053b8:	f003 031f 	and.w	r3, r3, #31
 80053bc:	2210      	movs	r2, #16
 80053be:	409a      	lsls	r2, r3
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d018      	beq.n	8005404 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d108      	bne.n	80053f2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d024      	beq.n	8005432 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	4798      	blx	r3
 80053f0:	e01f      	b.n	8005432 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d01b      	beq.n	8005432 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	4798      	blx	r3
 8005402:	e016      	b.n	8005432 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800540e:	2b00      	cmp	r3, #0
 8005410:	d107      	bne.n	8005422 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0208 	bic.w	r2, r2, #8
 8005420:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005436:	f003 031f 	and.w	r3, r3, #31
 800543a:	2220      	movs	r2, #32
 800543c:	409a      	lsls	r2, r3
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	4013      	ands	r3, r2
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 8110 	beq.w	8005668 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a2c      	ldr	r2, [pc, #176]	; (8005500 <HAL_DMA_IRQHandler+0x690>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d04a      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x678>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a2b      	ldr	r2, [pc, #172]	; (8005504 <HAL_DMA_IRQHandler+0x694>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d045      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x678>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a29      	ldr	r2, [pc, #164]	; (8005508 <HAL_DMA_IRQHandler+0x698>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d040      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x678>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a28      	ldr	r2, [pc, #160]	; (800550c <HAL_DMA_IRQHandler+0x69c>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d03b      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x678>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a26      	ldr	r2, [pc, #152]	; (8005510 <HAL_DMA_IRQHandler+0x6a0>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d036      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x678>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a25      	ldr	r2, [pc, #148]	; (8005514 <HAL_DMA_IRQHandler+0x6a4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d031      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x678>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a23      	ldr	r2, [pc, #140]	; (8005518 <HAL_DMA_IRQHandler+0x6a8>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d02c      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x678>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a22      	ldr	r2, [pc, #136]	; (800551c <HAL_DMA_IRQHandler+0x6ac>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d027      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x678>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a20      	ldr	r2, [pc, #128]	; (8005520 <HAL_DMA_IRQHandler+0x6b0>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d022      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x678>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a1f      	ldr	r2, [pc, #124]	; (8005524 <HAL_DMA_IRQHandler+0x6b4>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d01d      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x678>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a1d      	ldr	r2, [pc, #116]	; (8005528 <HAL_DMA_IRQHandler+0x6b8>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d018      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x678>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a1c      	ldr	r2, [pc, #112]	; (800552c <HAL_DMA_IRQHandler+0x6bc>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d013      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x678>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a1a      	ldr	r2, [pc, #104]	; (8005530 <HAL_DMA_IRQHandler+0x6c0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d00e      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x678>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a19      	ldr	r2, [pc, #100]	; (8005534 <HAL_DMA_IRQHandler+0x6c4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d009      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x678>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a17      	ldr	r2, [pc, #92]	; (8005538 <HAL_DMA_IRQHandler+0x6c8>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d004      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x678>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a16      	ldr	r2, [pc, #88]	; (800553c <HAL_DMA_IRQHandler+0x6cc>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d12b      	bne.n	8005540 <HAL_DMA_IRQHandler+0x6d0>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0310 	and.w	r3, r3, #16
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	bf14      	ite	ne
 80054f6:	2301      	movne	r3, #1
 80054f8:	2300      	moveq	r3, #0
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	e02a      	b.n	8005554 <HAL_DMA_IRQHandler+0x6e4>
 80054fe:	bf00      	nop
 8005500:	40020010 	.word	0x40020010
 8005504:	40020028 	.word	0x40020028
 8005508:	40020040 	.word	0x40020040
 800550c:	40020058 	.word	0x40020058
 8005510:	40020070 	.word	0x40020070
 8005514:	40020088 	.word	0x40020088
 8005518:	400200a0 	.word	0x400200a0
 800551c:	400200b8 	.word	0x400200b8
 8005520:	40020410 	.word	0x40020410
 8005524:	40020428 	.word	0x40020428
 8005528:	40020440 	.word	0x40020440
 800552c:	40020458 	.word	0x40020458
 8005530:	40020470 	.word	0x40020470
 8005534:	40020488 	.word	0x40020488
 8005538:	400204a0 	.word	0x400204a0
 800553c:	400204b8 	.word	0x400204b8
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	bf14      	ite	ne
 800554e:	2301      	movne	r3, #1
 8005550:	2300      	moveq	r3, #0
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 8087 	beq.w	8005668 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800555e:	f003 031f 	and.w	r3, r3, #31
 8005562:	2220      	movs	r2, #32
 8005564:	409a      	lsls	r2, r3
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b04      	cmp	r3, #4
 8005574:	d139      	bne.n	80055ea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0216 	bic.w	r2, r2, #22
 8005584:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	695a      	ldr	r2, [r3, #20]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005594:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	2b00      	cmp	r3, #0
 800559c:	d103      	bne.n	80055a6 <HAL_DMA_IRQHandler+0x736>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d007      	beq.n	80055b6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 0208 	bic.w	r2, r2, #8
 80055b4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ba:	f003 031f 	and.w	r3, r3, #31
 80055be:	223f      	movs	r2, #63	; 0x3f
 80055c0:	409a      	lsls	r2, r3
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 834a 	beq.w	8005c74 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	4798      	blx	r3
          }
          return;
 80055e8:	e344      	b.n	8005c74 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d018      	beq.n	800562a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d108      	bne.n	8005618 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560a:	2b00      	cmp	r3, #0
 800560c:	d02c      	beq.n	8005668 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	4798      	blx	r3
 8005616:	e027      	b.n	8005668 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561c:	2b00      	cmp	r3, #0
 800561e:	d023      	beq.n	8005668 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	4798      	blx	r3
 8005628:	e01e      	b.n	8005668 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10f      	bne.n	8005658 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 0210 	bic.w	r2, r2, #16
 8005646:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 8306 	beq.w	8005c7e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 8088 	beq.w	8005790 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2204      	movs	r2, #4
 8005684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a7a      	ldr	r2, [pc, #488]	; (8005878 <HAL_DMA_IRQHandler+0xa08>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d04a      	beq.n	8005728 <HAL_DMA_IRQHandler+0x8b8>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a79      	ldr	r2, [pc, #484]	; (800587c <HAL_DMA_IRQHandler+0xa0c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d045      	beq.n	8005728 <HAL_DMA_IRQHandler+0x8b8>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a77      	ldr	r2, [pc, #476]	; (8005880 <HAL_DMA_IRQHandler+0xa10>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d040      	beq.n	8005728 <HAL_DMA_IRQHandler+0x8b8>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a76      	ldr	r2, [pc, #472]	; (8005884 <HAL_DMA_IRQHandler+0xa14>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d03b      	beq.n	8005728 <HAL_DMA_IRQHandler+0x8b8>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a74      	ldr	r2, [pc, #464]	; (8005888 <HAL_DMA_IRQHandler+0xa18>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d036      	beq.n	8005728 <HAL_DMA_IRQHandler+0x8b8>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a73      	ldr	r2, [pc, #460]	; (800588c <HAL_DMA_IRQHandler+0xa1c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d031      	beq.n	8005728 <HAL_DMA_IRQHandler+0x8b8>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a71      	ldr	r2, [pc, #452]	; (8005890 <HAL_DMA_IRQHandler+0xa20>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d02c      	beq.n	8005728 <HAL_DMA_IRQHandler+0x8b8>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a70      	ldr	r2, [pc, #448]	; (8005894 <HAL_DMA_IRQHandler+0xa24>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d027      	beq.n	8005728 <HAL_DMA_IRQHandler+0x8b8>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a6e      	ldr	r2, [pc, #440]	; (8005898 <HAL_DMA_IRQHandler+0xa28>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d022      	beq.n	8005728 <HAL_DMA_IRQHandler+0x8b8>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a6d      	ldr	r2, [pc, #436]	; (800589c <HAL_DMA_IRQHandler+0xa2c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d01d      	beq.n	8005728 <HAL_DMA_IRQHandler+0x8b8>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a6b      	ldr	r2, [pc, #428]	; (80058a0 <HAL_DMA_IRQHandler+0xa30>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d018      	beq.n	8005728 <HAL_DMA_IRQHandler+0x8b8>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a6a      	ldr	r2, [pc, #424]	; (80058a4 <HAL_DMA_IRQHandler+0xa34>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d013      	beq.n	8005728 <HAL_DMA_IRQHandler+0x8b8>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a68      	ldr	r2, [pc, #416]	; (80058a8 <HAL_DMA_IRQHandler+0xa38>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d00e      	beq.n	8005728 <HAL_DMA_IRQHandler+0x8b8>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a67      	ldr	r2, [pc, #412]	; (80058ac <HAL_DMA_IRQHandler+0xa3c>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d009      	beq.n	8005728 <HAL_DMA_IRQHandler+0x8b8>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a65      	ldr	r2, [pc, #404]	; (80058b0 <HAL_DMA_IRQHandler+0xa40>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d004      	beq.n	8005728 <HAL_DMA_IRQHandler+0x8b8>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a64      	ldr	r2, [pc, #400]	; (80058b4 <HAL_DMA_IRQHandler+0xa44>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d108      	bne.n	800573a <HAL_DMA_IRQHandler+0x8ca>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0201 	bic.w	r2, r2, #1
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	e007      	b.n	800574a <HAL_DMA_IRQHandler+0x8da>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 0201 	bic.w	r2, r2, #1
 8005748:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	3301      	adds	r3, #1
 800574e:	60fb      	str	r3, [r7, #12]
 8005750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005752:	429a      	cmp	r2, r3
 8005754:	d307      	bcc.n	8005766 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1f2      	bne.n	800574a <HAL_DMA_IRQHandler+0x8da>
 8005764:	e000      	b.n	8005768 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005766:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d004      	beq.n	8005780 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2203      	movs	r2, #3
 800577a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800577e:	e003      	b.n	8005788 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 8272 	beq.w	8005c7e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	4798      	blx	r3
 80057a2:	e26c      	b.n	8005c7e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a43      	ldr	r2, [pc, #268]	; (80058b8 <HAL_DMA_IRQHandler+0xa48>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d022      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x984>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a42      	ldr	r2, [pc, #264]	; (80058bc <HAL_DMA_IRQHandler+0xa4c>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d01d      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x984>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a40      	ldr	r2, [pc, #256]	; (80058c0 <HAL_DMA_IRQHandler+0xa50>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d018      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x984>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a3f      	ldr	r2, [pc, #252]	; (80058c4 <HAL_DMA_IRQHandler+0xa54>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d013      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x984>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a3d      	ldr	r2, [pc, #244]	; (80058c8 <HAL_DMA_IRQHandler+0xa58>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d00e      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x984>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a3c      	ldr	r2, [pc, #240]	; (80058cc <HAL_DMA_IRQHandler+0xa5c>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d009      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x984>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a3a      	ldr	r2, [pc, #232]	; (80058d0 <HAL_DMA_IRQHandler+0xa60>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d004      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x984>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a39      	ldr	r2, [pc, #228]	; (80058d4 <HAL_DMA_IRQHandler+0xa64>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d101      	bne.n	80057f8 <HAL_DMA_IRQHandler+0x988>
 80057f4:	2301      	movs	r3, #1
 80057f6:	e000      	b.n	80057fa <HAL_DMA_IRQHandler+0x98a>
 80057f8:	2300      	movs	r3, #0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 823f 	beq.w	8005c7e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800580c:	f003 031f 	and.w	r3, r3, #31
 8005810:	2204      	movs	r2, #4
 8005812:	409a      	lsls	r2, r3
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	4013      	ands	r3, r2
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 80cd 	beq.w	80059b8 <HAL_DMA_IRQHandler+0xb48>
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 80c7 	beq.w	80059b8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800582e:	f003 031f 	and.w	r3, r3, #31
 8005832:	2204      	movs	r2, #4
 8005834:	409a      	lsls	r2, r3
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d049      	beq.n	80058d8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d109      	bne.n	8005862 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 8210 	beq.w	8005c78 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005860:	e20a      	b.n	8005c78 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 8206 	beq.w	8005c78 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005874:	e200      	b.n	8005c78 <HAL_DMA_IRQHandler+0xe08>
 8005876:	bf00      	nop
 8005878:	40020010 	.word	0x40020010
 800587c:	40020028 	.word	0x40020028
 8005880:	40020040 	.word	0x40020040
 8005884:	40020058 	.word	0x40020058
 8005888:	40020070 	.word	0x40020070
 800588c:	40020088 	.word	0x40020088
 8005890:	400200a0 	.word	0x400200a0
 8005894:	400200b8 	.word	0x400200b8
 8005898:	40020410 	.word	0x40020410
 800589c:	40020428 	.word	0x40020428
 80058a0:	40020440 	.word	0x40020440
 80058a4:	40020458 	.word	0x40020458
 80058a8:	40020470 	.word	0x40020470
 80058ac:	40020488 	.word	0x40020488
 80058b0:	400204a0 	.word	0x400204a0
 80058b4:	400204b8 	.word	0x400204b8
 80058b8:	58025408 	.word	0x58025408
 80058bc:	5802541c 	.word	0x5802541c
 80058c0:	58025430 	.word	0x58025430
 80058c4:	58025444 	.word	0x58025444
 80058c8:	58025458 	.word	0x58025458
 80058cc:	5802546c 	.word	0x5802546c
 80058d0:	58025480 	.word	0x58025480
 80058d4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f003 0320 	and.w	r3, r3, #32
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d160      	bne.n	80059a4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a7f      	ldr	r2, [pc, #508]	; (8005ae4 <HAL_DMA_IRQHandler+0xc74>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d04a      	beq.n	8005982 <HAL_DMA_IRQHandler+0xb12>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a7d      	ldr	r2, [pc, #500]	; (8005ae8 <HAL_DMA_IRQHandler+0xc78>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d045      	beq.n	8005982 <HAL_DMA_IRQHandler+0xb12>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a7c      	ldr	r2, [pc, #496]	; (8005aec <HAL_DMA_IRQHandler+0xc7c>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d040      	beq.n	8005982 <HAL_DMA_IRQHandler+0xb12>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a7a      	ldr	r2, [pc, #488]	; (8005af0 <HAL_DMA_IRQHandler+0xc80>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d03b      	beq.n	8005982 <HAL_DMA_IRQHandler+0xb12>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a79      	ldr	r2, [pc, #484]	; (8005af4 <HAL_DMA_IRQHandler+0xc84>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d036      	beq.n	8005982 <HAL_DMA_IRQHandler+0xb12>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a77      	ldr	r2, [pc, #476]	; (8005af8 <HAL_DMA_IRQHandler+0xc88>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d031      	beq.n	8005982 <HAL_DMA_IRQHandler+0xb12>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a76      	ldr	r2, [pc, #472]	; (8005afc <HAL_DMA_IRQHandler+0xc8c>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d02c      	beq.n	8005982 <HAL_DMA_IRQHandler+0xb12>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a74      	ldr	r2, [pc, #464]	; (8005b00 <HAL_DMA_IRQHandler+0xc90>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d027      	beq.n	8005982 <HAL_DMA_IRQHandler+0xb12>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a73      	ldr	r2, [pc, #460]	; (8005b04 <HAL_DMA_IRQHandler+0xc94>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d022      	beq.n	8005982 <HAL_DMA_IRQHandler+0xb12>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a71      	ldr	r2, [pc, #452]	; (8005b08 <HAL_DMA_IRQHandler+0xc98>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d01d      	beq.n	8005982 <HAL_DMA_IRQHandler+0xb12>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a70      	ldr	r2, [pc, #448]	; (8005b0c <HAL_DMA_IRQHandler+0xc9c>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d018      	beq.n	8005982 <HAL_DMA_IRQHandler+0xb12>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a6e      	ldr	r2, [pc, #440]	; (8005b10 <HAL_DMA_IRQHandler+0xca0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d013      	beq.n	8005982 <HAL_DMA_IRQHandler+0xb12>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a6d      	ldr	r2, [pc, #436]	; (8005b14 <HAL_DMA_IRQHandler+0xca4>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d00e      	beq.n	8005982 <HAL_DMA_IRQHandler+0xb12>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a6b      	ldr	r2, [pc, #428]	; (8005b18 <HAL_DMA_IRQHandler+0xca8>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d009      	beq.n	8005982 <HAL_DMA_IRQHandler+0xb12>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a6a      	ldr	r2, [pc, #424]	; (8005b1c <HAL_DMA_IRQHandler+0xcac>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d004      	beq.n	8005982 <HAL_DMA_IRQHandler+0xb12>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a68      	ldr	r2, [pc, #416]	; (8005b20 <HAL_DMA_IRQHandler+0xcb0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d108      	bne.n	8005994 <HAL_DMA_IRQHandler+0xb24>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0208 	bic.w	r2, r2, #8
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	e007      	b.n	80059a4 <HAL_DMA_IRQHandler+0xb34>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 0204 	bic.w	r2, r2, #4
 80059a2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 8165 	beq.w	8005c78 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059b6:	e15f      	b.n	8005c78 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059bc:	f003 031f 	and.w	r3, r3, #31
 80059c0:	2202      	movs	r2, #2
 80059c2:	409a      	lsls	r2, r3
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	4013      	ands	r3, r2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 80c5 	beq.w	8005b58 <HAL_DMA_IRQHandler+0xce8>
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 80bf 	beq.w	8005b58 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059de:	f003 031f 	and.w	r3, r3, #31
 80059e2:	2202      	movs	r2, #2
 80059e4:	409a      	lsls	r2, r3
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d018      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d109      	bne.n	8005a12 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 813a 	beq.w	8005c7c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a10:	e134      	b.n	8005c7c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f000 8130 	beq.w	8005c7c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a24:	e12a      	b.n	8005c7c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f003 0320 	and.w	r3, r3, #32
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f040 8089 	bne.w	8005b44 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a2b      	ldr	r2, [pc, #172]	; (8005ae4 <HAL_DMA_IRQHandler+0xc74>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d04a      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xc62>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a29      	ldr	r2, [pc, #164]	; (8005ae8 <HAL_DMA_IRQHandler+0xc78>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d045      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xc62>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a28      	ldr	r2, [pc, #160]	; (8005aec <HAL_DMA_IRQHandler+0xc7c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d040      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xc62>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a26      	ldr	r2, [pc, #152]	; (8005af0 <HAL_DMA_IRQHandler+0xc80>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d03b      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xc62>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a25      	ldr	r2, [pc, #148]	; (8005af4 <HAL_DMA_IRQHandler+0xc84>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d036      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xc62>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a23      	ldr	r2, [pc, #140]	; (8005af8 <HAL_DMA_IRQHandler+0xc88>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d031      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xc62>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a22      	ldr	r2, [pc, #136]	; (8005afc <HAL_DMA_IRQHandler+0xc8c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d02c      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xc62>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a20      	ldr	r2, [pc, #128]	; (8005b00 <HAL_DMA_IRQHandler+0xc90>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d027      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xc62>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a1f      	ldr	r2, [pc, #124]	; (8005b04 <HAL_DMA_IRQHandler+0xc94>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d022      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xc62>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a1d      	ldr	r2, [pc, #116]	; (8005b08 <HAL_DMA_IRQHandler+0xc98>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d01d      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xc62>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a1c      	ldr	r2, [pc, #112]	; (8005b0c <HAL_DMA_IRQHandler+0xc9c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d018      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xc62>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a1a      	ldr	r2, [pc, #104]	; (8005b10 <HAL_DMA_IRQHandler+0xca0>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d013      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xc62>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a19      	ldr	r2, [pc, #100]	; (8005b14 <HAL_DMA_IRQHandler+0xca4>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d00e      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xc62>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a17      	ldr	r2, [pc, #92]	; (8005b18 <HAL_DMA_IRQHandler+0xca8>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d009      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xc62>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a16      	ldr	r2, [pc, #88]	; (8005b1c <HAL_DMA_IRQHandler+0xcac>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d004      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xc62>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a14      	ldr	r2, [pc, #80]	; (8005b20 <HAL_DMA_IRQHandler+0xcb0>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d128      	bne.n	8005b24 <HAL_DMA_IRQHandler+0xcb4>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 0214 	bic.w	r2, r2, #20
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	e027      	b.n	8005b34 <HAL_DMA_IRQHandler+0xcc4>
 8005ae4:	40020010 	.word	0x40020010
 8005ae8:	40020028 	.word	0x40020028
 8005aec:	40020040 	.word	0x40020040
 8005af0:	40020058 	.word	0x40020058
 8005af4:	40020070 	.word	0x40020070
 8005af8:	40020088 	.word	0x40020088
 8005afc:	400200a0 	.word	0x400200a0
 8005b00:	400200b8 	.word	0x400200b8
 8005b04:	40020410 	.word	0x40020410
 8005b08:	40020428 	.word	0x40020428
 8005b0c:	40020440 	.word	0x40020440
 8005b10:	40020458 	.word	0x40020458
 8005b14:	40020470 	.word	0x40020470
 8005b18:	40020488 	.word	0x40020488
 8005b1c:	400204a0 	.word	0x400204a0
 8005b20:	400204b8 	.word	0x400204b8
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f022 020a 	bic.w	r2, r2, #10
 8005b32:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 8097 	beq.w	8005c7c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b56:	e091      	b.n	8005c7c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b5c:	f003 031f 	and.w	r3, r3, #31
 8005b60:	2208      	movs	r2, #8
 8005b62:	409a      	lsls	r2, r3
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	4013      	ands	r3, r2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 8088 	beq.w	8005c7e <HAL_DMA_IRQHandler+0xe0e>
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f003 0308 	and.w	r3, r3, #8
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 8082 	beq.w	8005c7e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a41      	ldr	r2, [pc, #260]	; (8005c84 <HAL_DMA_IRQHandler+0xe14>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d04a      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xdaa>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a3f      	ldr	r2, [pc, #252]	; (8005c88 <HAL_DMA_IRQHandler+0xe18>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d045      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xdaa>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a3e      	ldr	r2, [pc, #248]	; (8005c8c <HAL_DMA_IRQHandler+0xe1c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d040      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xdaa>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a3c      	ldr	r2, [pc, #240]	; (8005c90 <HAL_DMA_IRQHandler+0xe20>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d03b      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xdaa>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a3b      	ldr	r2, [pc, #236]	; (8005c94 <HAL_DMA_IRQHandler+0xe24>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d036      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xdaa>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a39      	ldr	r2, [pc, #228]	; (8005c98 <HAL_DMA_IRQHandler+0xe28>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d031      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xdaa>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a38      	ldr	r2, [pc, #224]	; (8005c9c <HAL_DMA_IRQHandler+0xe2c>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d02c      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xdaa>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a36      	ldr	r2, [pc, #216]	; (8005ca0 <HAL_DMA_IRQHandler+0xe30>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d027      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xdaa>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a35      	ldr	r2, [pc, #212]	; (8005ca4 <HAL_DMA_IRQHandler+0xe34>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d022      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xdaa>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a33      	ldr	r2, [pc, #204]	; (8005ca8 <HAL_DMA_IRQHandler+0xe38>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d01d      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xdaa>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a32      	ldr	r2, [pc, #200]	; (8005cac <HAL_DMA_IRQHandler+0xe3c>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d018      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xdaa>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a30      	ldr	r2, [pc, #192]	; (8005cb0 <HAL_DMA_IRQHandler+0xe40>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d013      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xdaa>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a2f      	ldr	r2, [pc, #188]	; (8005cb4 <HAL_DMA_IRQHandler+0xe44>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d00e      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xdaa>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a2d      	ldr	r2, [pc, #180]	; (8005cb8 <HAL_DMA_IRQHandler+0xe48>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d009      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xdaa>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a2c      	ldr	r2, [pc, #176]	; (8005cbc <HAL_DMA_IRQHandler+0xe4c>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d004      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xdaa>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a2a      	ldr	r2, [pc, #168]	; (8005cc0 <HAL_DMA_IRQHandler+0xe50>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d108      	bne.n	8005c2c <HAL_DMA_IRQHandler+0xdbc>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f022 021c 	bic.w	r2, r2, #28
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	e007      	b.n	8005c3c <HAL_DMA_IRQHandler+0xdcc>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 020e 	bic.w	r2, r2, #14
 8005c3a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c40:	f003 031f 	and.w	r3, r3, #31
 8005c44:	2201      	movs	r2, #1
 8005c46:	409a      	lsls	r2, r3
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d009      	beq.n	8005c7e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	4798      	blx	r3
 8005c72:	e004      	b.n	8005c7e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005c74:	bf00      	nop
 8005c76:	e002      	b.n	8005c7e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c78:	bf00      	nop
 8005c7a:	e000      	b.n	8005c7e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c7c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005c7e:	3728      	adds	r7, #40	; 0x28
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	40020010 	.word	0x40020010
 8005c88:	40020028 	.word	0x40020028
 8005c8c:	40020040 	.word	0x40020040
 8005c90:	40020058 	.word	0x40020058
 8005c94:	40020070 	.word	0x40020070
 8005c98:	40020088 	.word	0x40020088
 8005c9c:	400200a0 	.word	0x400200a0
 8005ca0:	400200b8 	.word	0x400200b8
 8005ca4:	40020410 	.word	0x40020410
 8005ca8:	40020428 	.word	0x40020428
 8005cac:	40020440 	.word	0x40020440
 8005cb0:	40020458 	.word	0x40020458
 8005cb4:	40020470 	.word	0x40020470
 8005cb8:	40020488 	.word	0x40020488
 8005cbc:	400204a0 	.word	0x400204a0
 8005cc0:	400204b8 	.word	0x400204b8

08005cc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a42      	ldr	r2, [pc, #264]	; (8005ddc <DMA_CalcBaseAndBitshift+0x118>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d04a      	beq.n	8005d6c <DMA_CalcBaseAndBitshift+0xa8>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a41      	ldr	r2, [pc, #260]	; (8005de0 <DMA_CalcBaseAndBitshift+0x11c>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d045      	beq.n	8005d6c <DMA_CalcBaseAndBitshift+0xa8>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a3f      	ldr	r2, [pc, #252]	; (8005de4 <DMA_CalcBaseAndBitshift+0x120>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d040      	beq.n	8005d6c <DMA_CalcBaseAndBitshift+0xa8>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a3e      	ldr	r2, [pc, #248]	; (8005de8 <DMA_CalcBaseAndBitshift+0x124>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d03b      	beq.n	8005d6c <DMA_CalcBaseAndBitshift+0xa8>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a3c      	ldr	r2, [pc, #240]	; (8005dec <DMA_CalcBaseAndBitshift+0x128>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d036      	beq.n	8005d6c <DMA_CalcBaseAndBitshift+0xa8>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a3b      	ldr	r2, [pc, #236]	; (8005df0 <DMA_CalcBaseAndBitshift+0x12c>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d031      	beq.n	8005d6c <DMA_CalcBaseAndBitshift+0xa8>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a39      	ldr	r2, [pc, #228]	; (8005df4 <DMA_CalcBaseAndBitshift+0x130>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d02c      	beq.n	8005d6c <DMA_CalcBaseAndBitshift+0xa8>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a38      	ldr	r2, [pc, #224]	; (8005df8 <DMA_CalcBaseAndBitshift+0x134>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d027      	beq.n	8005d6c <DMA_CalcBaseAndBitshift+0xa8>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a36      	ldr	r2, [pc, #216]	; (8005dfc <DMA_CalcBaseAndBitshift+0x138>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d022      	beq.n	8005d6c <DMA_CalcBaseAndBitshift+0xa8>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a35      	ldr	r2, [pc, #212]	; (8005e00 <DMA_CalcBaseAndBitshift+0x13c>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d01d      	beq.n	8005d6c <DMA_CalcBaseAndBitshift+0xa8>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a33      	ldr	r2, [pc, #204]	; (8005e04 <DMA_CalcBaseAndBitshift+0x140>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d018      	beq.n	8005d6c <DMA_CalcBaseAndBitshift+0xa8>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a32      	ldr	r2, [pc, #200]	; (8005e08 <DMA_CalcBaseAndBitshift+0x144>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d013      	beq.n	8005d6c <DMA_CalcBaseAndBitshift+0xa8>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a30      	ldr	r2, [pc, #192]	; (8005e0c <DMA_CalcBaseAndBitshift+0x148>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00e      	beq.n	8005d6c <DMA_CalcBaseAndBitshift+0xa8>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a2f      	ldr	r2, [pc, #188]	; (8005e10 <DMA_CalcBaseAndBitshift+0x14c>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d009      	beq.n	8005d6c <DMA_CalcBaseAndBitshift+0xa8>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a2d      	ldr	r2, [pc, #180]	; (8005e14 <DMA_CalcBaseAndBitshift+0x150>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d004      	beq.n	8005d6c <DMA_CalcBaseAndBitshift+0xa8>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a2c      	ldr	r2, [pc, #176]	; (8005e18 <DMA_CalcBaseAndBitshift+0x154>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d101      	bne.n	8005d70 <DMA_CalcBaseAndBitshift+0xac>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e000      	b.n	8005d72 <DMA_CalcBaseAndBitshift+0xae>
 8005d70:	2300      	movs	r3, #0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d024      	beq.n	8005dc0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	3b10      	subs	r3, #16
 8005d7e:	4a27      	ldr	r2, [pc, #156]	; (8005e1c <DMA_CalcBaseAndBitshift+0x158>)
 8005d80:	fba2 2303 	umull	r2, r3, r2, r3
 8005d84:	091b      	lsrs	r3, r3, #4
 8005d86:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f003 0307 	and.w	r3, r3, #7
 8005d8e:	4a24      	ldr	r2, [pc, #144]	; (8005e20 <DMA_CalcBaseAndBitshift+0x15c>)
 8005d90:	5cd3      	ldrb	r3, [r2, r3]
 8005d92:	461a      	mov	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b03      	cmp	r3, #3
 8005d9c:	d908      	bls.n	8005db0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	461a      	mov	r2, r3
 8005da4:	4b1f      	ldr	r3, [pc, #124]	; (8005e24 <DMA_CalcBaseAndBitshift+0x160>)
 8005da6:	4013      	ands	r3, r2
 8005da8:	1d1a      	adds	r2, r3, #4
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	659a      	str	r2, [r3, #88]	; 0x58
 8005dae:	e00d      	b.n	8005dcc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	461a      	mov	r2, r3
 8005db6:	4b1b      	ldr	r3, [pc, #108]	; (8005e24 <DMA_CalcBaseAndBitshift+0x160>)
 8005db8:	4013      	ands	r3, r2
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6593      	str	r3, [r2, #88]	; 0x58
 8005dbe:	e005      	b.n	8005dcc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	40020010 	.word	0x40020010
 8005de0:	40020028 	.word	0x40020028
 8005de4:	40020040 	.word	0x40020040
 8005de8:	40020058 	.word	0x40020058
 8005dec:	40020070 	.word	0x40020070
 8005df0:	40020088 	.word	0x40020088
 8005df4:	400200a0 	.word	0x400200a0
 8005df8:	400200b8 	.word	0x400200b8
 8005dfc:	40020410 	.word	0x40020410
 8005e00:	40020428 	.word	0x40020428
 8005e04:	40020440 	.word	0x40020440
 8005e08:	40020458 	.word	0x40020458
 8005e0c:	40020470 	.word	0x40020470
 8005e10:	40020488 	.word	0x40020488
 8005e14:	400204a0 	.word	0x400204a0
 8005e18:	400204b8 	.word	0x400204b8
 8005e1c:	aaaaaaab 	.word	0xaaaaaaab
 8005e20:	08019dc8 	.word	0x08019dc8
 8005e24:	fffffc00 	.word	0xfffffc00

08005e28 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e30:	2300      	movs	r3, #0
 8005e32:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d120      	bne.n	8005e7e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e40:	2b03      	cmp	r3, #3
 8005e42:	d858      	bhi.n	8005ef6 <DMA_CheckFifoParam+0xce>
 8005e44:	a201      	add	r2, pc, #4	; (adr r2, 8005e4c <DMA_CheckFifoParam+0x24>)
 8005e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4a:	bf00      	nop
 8005e4c:	08005e5d 	.word	0x08005e5d
 8005e50:	08005e6f 	.word	0x08005e6f
 8005e54:	08005e5d 	.word	0x08005e5d
 8005e58:	08005ef7 	.word	0x08005ef7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d048      	beq.n	8005efa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e6c:	e045      	b.n	8005efa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e76:	d142      	bne.n	8005efe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e7c:	e03f      	b.n	8005efe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e86:	d123      	bne.n	8005ed0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8c:	2b03      	cmp	r3, #3
 8005e8e:	d838      	bhi.n	8005f02 <DMA_CheckFifoParam+0xda>
 8005e90:	a201      	add	r2, pc, #4	; (adr r2, 8005e98 <DMA_CheckFifoParam+0x70>)
 8005e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e96:	bf00      	nop
 8005e98:	08005ea9 	.word	0x08005ea9
 8005e9c:	08005eaf 	.word	0x08005eaf
 8005ea0:	08005ea9 	.word	0x08005ea9
 8005ea4:	08005ec1 	.word	0x08005ec1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	73fb      	strb	r3, [r7, #15]
        break;
 8005eac:	e030      	b.n	8005f10 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d025      	beq.n	8005f06 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ebe:	e022      	b.n	8005f06 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ec8:	d11f      	bne.n	8005f0a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ece:	e01c      	b.n	8005f0a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d902      	bls.n	8005ede <DMA_CheckFifoParam+0xb6>
 8005ed8:	2b03      	cmp	r3, #3
 8005eda:	d003      	beq.n	8005ee4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005edc:	e018      	b.n	8005f10 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	73fb      	strb	r3, [r7, #15]
        break;
 8005ee2:	e015      	b.n	8005f10 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00e      	beq.n	8005f0e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	73fb      	strb	r3, [r7, #15]
    break;
 8005ef4:	e00b      	b.n	8005f0e <DMA_CheckFifoParam+0xe6>
        break;
 8005ef6:	bf00      	nop
 8005ef8:	e00a      	b.n	8005f10 <DMA_CheckFifoParam+0xe8>
        break;
 8005efa:	bf00      	nop
 8005efc:	e008      	b.n	8005f10 <DMA_CheckFifoParam+0xe8>
        break;
 8005efe:	bf00      	nop
 8005f00:	e006      	b.n	8005f10 <DMA_CheckFifoParam+0xe8>
        break;
 8005f02:	bf00      	nop
 8005f04:	e004      	b.n	8005f10 <DMA_CheckFifoParam+0xe8>
        break;
 8005f06:	bf00      	nop
 8005f08:	e002      	b.n	8005f10 <DMA_CheckFifoParam+0xe8>
        break;
 8005f0a:	bf00      	nop
 8005f0c:	e000      	b.n	8005f10 <DMA_CheckFifoParam+0xe8>
    break;
 8005f0e:	bf00      	nop
    }
  }

  return status;
 8005f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop

08005f20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a38      	ldr	r2, [pc, #224]	; (8006014 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d022      	beq.n	8005f7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a36      	ldr	r2, [pc, #216]	; (8006018 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d01d      	beq.n	8005f7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a35      	ldr	r2, [pc, #212]	; (800601c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d018      	beq.n	8005f7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a33      	ldr	r2, [pc, #204]	; (8006020 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d013      	beq.n	8005f7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a32      	ldr	r2, [pc, #200]	; (8006024 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d00e      	beq.n	8005f7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a30      	ldr	r2, [pc, #192]	; (8006028 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d009      	beq.n	8005f7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a2f      	ldr	r2, [pc, #188]	; (800602c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d004      	beq.n	8005f7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a2d      	ldr	r2, [pc, #180]	; (8006030 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d101      	bne.n	8005f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e000      	b.n	8005f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005f82:	2300      	movs	r3, #0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d01a      	beq.n	8005fbe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	3b08      	subs	r3, #8
 8005f90:	4a28      	ldr	r2, [pc, #160]	; (8006034 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005f92:	fba2 2303 	umull	r2, r3, r2, r3
 8005f96:	091b      	lsrs	r3, r3, #4
 8005f98:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	4b26      	ldr	r3, [pc, #152]	; (8006038 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005f9e:	4413      	add	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a24      	ldr	r2, [pc, #144]	; (800603c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005fac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f003 031f 	and.w	r3, r3, #31
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	409a      	lsls	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005fbc:	e024      	b.n	8006008 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	3b10      	subs	r3, #16
 8005fc6:	4a1e      	ldr	r2, [pc, #120]	; (8006040 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fcc:	091b      	lsrs	r3, r3, #4
 8005fce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	4a1c      	ldr	r2, [pc, #112]	; (8006044 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d806      	bhi.n	8005fe6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	4a1b      	ldr	r2, [pc, #108]	; (8006048 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d902      	bls.n	8005fe6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	3308      	adds	r3, #8
 8005fe4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	4b18      	ldr	r3, [pc, #96]	; (800604c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005fea:	4413      	add	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	461a      	mov	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a16      	ldr	r2, [pc, #88]	; (8006050 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005ff8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f003 031f 	and.w	r3, r3, #31
 8006000:	2201      	movs	r2, #1
 8006002:	409a      	lsls	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006008:	bf00      	nop
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	58025408 	.word	0x58025408
 8006018:	5802541c 	.word	0x5802541c
 800601c:	58025430 	.word	0x58025430
 8006020:	58025444 	.word	0x58025444
 8006024:	58025458 	.word	0x58025458
 8006028:	5802546c 	.word	0x5802546c
 800602c:	58025480 	.word	0x58025480
 8006030:	58025494 	.word	0x58025494
 8006034:	cccccccd 	.word	0xcccccccd
 8006038:	16009600 	.word	0x16009600
 800603c:	58025880 	.word	0x58025880
 8006040:	aaaaaaab 	.word	0xaaaaaaab
 8006044:	400204b8 	.word	0x400204b8
 8006048:	4002040f 	.word	0x4002040f
 800604c:	10008200 	.word	0x10008200
 8006050:	40020880 	.word	0x40020880

08006054 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	b2db      	uxtb	r3, r3
 8006062:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d04a      	beq.n	8006100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2b08      	cmp	r3, #8
 800606e:	d847      	bhi.n	8006100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a25      	ldr	r2, [pc, #148]	; (800610c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d022      	beq.n	80060c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a24      	ldr	r2, [pc, #144]	; (8006110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d01d      	beq.n	80060c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a22      	ldr	r2, [pc, #136]	; (8006114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d018      	beq.n	80060c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a21      	ldr	r2, [pc, #132]	; (8006118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d013      	beq.n	80060c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a1f      	ldr	r2, [pc, #124]	; (800611c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d00e      	beq.n	80060c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a1e      	ldr	r2, [pc, #120]	; (8006120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d009      	beq.n	80060c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a1c      	ldr	r2, [pc, #112]	; (8006124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d004      	beq.n	80060c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a1b      	ldr	r2, [pc, #108]	; (8006128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d101      	bne.n	80060c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80060c0:	2301      	movs	r3, #1
 80060c2:	e000      	b.n	80060c6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80060c4:	2300      	movs	r3, #0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00a      	beq.n	80060e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	4b17      	ldr	r3, [pc, #92]	; (800612c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80060ce:	4413      	add	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	461a      	mov	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a15      	ldr	r2, [pc, #84]	; (8006130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80060dc:	671a      	str	r2, [r3, #112]	; 0x70
 80060de:	e009      	b.n	80060f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	4b14      	ldr	r3, [pc, #80]	; (8006134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80060e4:	4413      	add	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	461a      	mov	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a11      	ldr	r2, [pc, #68]	; (8006138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80060f2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	2201      	movs	r2, #1
 80060fa:	409a      	lsls	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006100:	bf00      	nop
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr
 800610c:	58025408 	.word	0x58025408
 8006110:	5802541c 	.word	0x5802541c
 8006114:	58025430 	.word	0x58025430
 8006118:	58025444 	.word	0x58025444
 800611c:	58025458 	.word	0x58025458
 8006120:	5802546c 	.word	0x5802546c
 8006124:	58025480 	.word	0x58025480
 8006128:	58025494 	.word	0x58025494
 800612c:	1600963f 	.word	0x1600963f
 8006130:	58025940 	.word	0x58025940
 8006134:	1000823f 	.word	0x1000823f
 8006138:	40020940 	.word	0x40020940

0800613c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b098      	sub	sp, #96	; 0x60
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006144:	4a84      	ldr	r2, [pc, #528]	; (8006358 <HAL_FDCAN_Init+0x21c>)
 8006146:	f107 030c 	add.w	r3, r7, #12
 800614a:	4611      	mov	r1, r2
 800614c:	224c      	movs	r2, #76	; 0x4c
 800614e:	4618      	mov	r0, r3
 8006150:	f010 fad1 	bl	80166f6 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e1c6      	b.n	80064ec <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a7e      	ldr	r2, [pc, #504]	; (800635c <HAL_FDCAN_Init+0x220>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d106      	bne.n	8006176 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006170:	461a      	mov	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	d106      	bne.n	8006190 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7fb fe18 	bl	8001dc0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	699a      	ldr	r2, [r3, #24]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0210 	bic.w	r2, r2, #16
 800619e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80061a0:	f7fc fe48 	bl	8002e34 <HAL_GetTick>
 80061a4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80061a6:	e014      	b.n	80061d2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80061a8:	f7fc fe44 	bl	8002e34 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	2b0a      	cmp	r3, #10
 80061b4:	d90d      	bls.n	80061d2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061bc:	f043 0201 	orr.w	r2, r3, #1
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2203      	movs	r2, #3
 80061ca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e18c      	b.n	80064ec <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	f003 0308 	and.w	r3, r3, #8
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d0e3      	beq.n	80061a8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699a      	ldr	r2, [r3, #24]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f042 0201 	orr.w	r2, r2, #1
 80061ee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80061f0:	f7fc fe20 	bl	8002e34 <HAL_GetTick>
 80061f4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80061f6:	e014      	b.n	8006222 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80061f8:	f7fc fe1c 	bl	8002e34 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	2b0a      	cmp	r3, #10
 8006204:	d90d      	bls.n	8006222 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800620c:	f043 0201 	orr.w	r2, r3, #1
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2203      	movs	r2, #3
 800621a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e164      	b.n	80064ec <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d0e3      	beq.n	80061f8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	699a      	ldr	r2, [r3, #24]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0202 	orr.w	r2, r2, #2
 800623e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	7c1b      	ldrb	r3, [r3, #16]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d108      	bne.n	800625a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	699a      	ldr	r2, [r3, #24]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006256:	619a      	str	r2, [r3, #24]
 8006258:	e007      	b.n	800626a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	699a      	ldr	r2, [r3, #24]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006268:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	7c5b      	ldrb	r3, [r3, #17]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d108      	bne.n	8006284 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	699a      	ldr	r2, [r3, #24]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006280:	619a      	str	r2, [r3, #24]
 8006282:	e007      	b.n	8006294 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	699a      	ldr	r2, [r3, #24]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006292:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	7c9b      	ldrb	r3, [r3, #18]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d108      	bne.n	80062ae <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	699a      	ldr	r2, [r3, #24]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062aa:	619a      	str	r2, [r3, #24]
 80062ac:	e007      	b.n	80062be <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	699a      	ldr	r2, [r3, #24]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062bc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	699a      	ldr	r2, [r3, #24]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80062e2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	691a      	ldr	r2, [r3, #16]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f022 0210 	bic.w	r2, r2, #16
 80062f2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d108      	bne.n	800630e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	699a      	ldr	r2, [r3, #24]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f042 0204 	orr.w	r2, r2, #4
 800630a:	619a      	str	r2, [r3, #24]
 800630c:	e030      	b.n	8006370 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d02c      	beq.n	8006370 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	2b02      	cmp	r3, #2
 800631c:	d020      	beq.n	8006360 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	699a      	ldr	r2, [r3, #24]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800632c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	691a      	ldr	r2, [r3, #16]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f042 0210 	orr.w	r2, r2, #16
 800633c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	2b03      	cmp	r3, #3
 8006344:	d114      	bne.n	8006370 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	699a      	ldr	r2, [r3, #24]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f042 0220 	orr.w	r2, r2, #32
 8006354:	619a      	str	r2, [r3, #24]
 8006356:	e00b      	b.n	8006370 <HAL_FDCAN_Init+0x234>
 8006358:	08019d30 	.word	0x08019d30
 800635c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	699a      	ldr	r2, [r3, #24]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f042 0220 	orr.w	r2, r2, #32
 800636e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	3b01      	subs	r3, #1
 8006376:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	69db      	ldr	r3, [r3, #28]
 800637c:	3b01      	subs	r3, #1
 800637e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006380:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006388:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	3b01      	subs	r3, #1
 8006392:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006398:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800639a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063a4:	d115      	bne.n	80063d2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063aa:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b0:	3b01      	subs	r3, #1
 80063b2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80063b4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ba:	3b01      	subs	r3, #1
 80063bc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80063be:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c6:	3b01      	subs	r3, #1
 80063c8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80063ce:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80063d0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	430a      	orrs	r2, r1
 80063ec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063f8:	4413      	add	r3, r2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d011      	beq.n	8006422 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006406:	f023 0107 	bic.w	r1, r3, #7
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	3360      	adds	r3, #96	; 0x60
 8006412:	443b      	add	r3, r7
 8006414:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	430a      	orrs	r2, r1
 800641e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006426:	2b00      	cmp	r3, #0
 8006428:	d011      	beq.n	800644e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006432:	f023 0107 	bic.w	r1, r3, #7
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	3360      	adds	r3, #96	; 0x60
 800643e:	443b      	add	r3, r7
 8006440:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	430a      	orrs	r2, r1
 800644a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006452:	2b00      	cmp	r3, #0
 8006454:	d012      	beq.n	800647c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800645e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	3360      	adds	r3, #96	; 0x60
 800646a:	443b      	add	r3, r7
 800646c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006470:	011a      	lsls	r2, r3, #4
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006480:	2b00      	cmp	r3, #0
 8006482:	d012      	beq.n	80064aa <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800648c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	3360      	adds	r3, #96	; 0x60
 8006498:	443b      	add	r3, r7
 800649a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800649e:	021a      	lsls	r2, r3, #8
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	430a      	orrs	r2, r1
 80064a6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a11      	ldr	r2, [pc, #68]	; (80064f4 <HAL_FDCAN_Init+0x3b8>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d107      	bne.n	80064c4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	689a      	ldr	r2, [r3, #8]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f022 0203 	bic.w	r2, r2, #3
 80064c2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 fde7 	bl	80070b0 <FDCAN_CalcultateRamBlockAddresses>
 80064e2:	4603      	mov	r3, r0
 80064e4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80064e8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3760      	adds	r7, #96	; 0x60
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	4000a000 	.word	0x4000a000

080064f8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006508:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800650a:	7bfb      	ldrb	r3, [r7, #15]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d002      	beq.n	8006516 <HAL_FDCAN_ConfigFilter+0x1e>
 8006510:	7bfb      	ldrb	r3, [r7, #15]
 8006512:	2b02      	cmp	r3, #2
 8006514:	d157      	bne.n	80065c6 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d12b      	bne.n	8006576 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	2b07      	cmp	r3, #7
 8006524:	d10d      	bne.n	8006542 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	69db      	ldr	r3, [r3, #28]
 8006530:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8006532:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8006538:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800653a:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800653e:	617b      	str	r3, [r7, #20]
 8006540:	e00e      	b.n	8006560 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800654e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8006556:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800655c:	4313      	orrs	r3, r2
 800655e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4413      	add	r3, r2
 800656c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	e025      	b.n	80065c2 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	075a      	lsls	r2, r3, #29
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	4313      	orrs	r3, r2
 8006582:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	2b07      	cmp	r3, #7
 800658a:	d103      	bne.n	8006594 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	613b      	str	r3, [r7, #16]
 8006592:	e006      	b.n	80065a2 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	079a      	lsls	r2, r3, #30
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	4313      	orrs	r3, r2
 80065a0:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	00db      	lsls	r3, r3, #3
 80065ac:	4413      	add	r3, r2
 80065ae:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	3304      	adds	r3, #4
 80065ba:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	e008      	b.n	80065d8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065cc:	f043 0202 	orr.w	r2, r3, #2
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
  }
}
 80065d8:	4618      	mov	r0, r3
 80065da:	371c      	adds	r7, #28
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d111      	bne.n	800661c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	699a      	ldr	r2, [r3, #24]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 0201 	bic.w	r2, r2, #1
 800660e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8006618:	2300      	movs	r3, #0
 800661a:	e008      	b.n	800662e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006622:	f043 0204 	orr.w	r2, r3, #4
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
  }
}
 800662e:	4618      	mov	r0, r3
 8006630:	370c      	adds	r7, #12
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b086      	sub	sp, #24
 800663e:	af00      	add	r7, sp, #0
 8006640:	60f8      	str	r0, [r7, #12]
 8006642:	60b9      	str	r1, [r7, #8]
 8006644:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b02      	cmp	r3, #2
 8006650:	d141      	bne.n	80066d6 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800665a:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d109      	bne.n	8006676 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006668:	f043 0220 	orr.w	r2, r3, #32
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e038      	b.n	80066e8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800667e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d009      	beq.n	800669a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800668c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e026      	b.n	80066e8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80066a2:	0c1b      	lsrs	r3, r3, #16
 80066a4:	f003 031f 	and.w	r3, r3, #31
 80066a8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	68b9      	ldr	r1, [r7, #8]
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f000 fe83 	bl	80073bc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2101      	movs	r1, #1
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	fa01 f202 	lsl.w	r2, r1, r2
 80066c2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80066c6:	2201      	movs	r2, #1
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	409a      	lsls	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 80066d2:	2300      	movs	r3, #0
 80066d4:	e008      	b.n	80066e8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066dc:	f043 0208 	orr.w	r2, r3, #8
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
  }
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3718      	adds	r7, #24
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b08b      	sub	sp, #44	; 0x2c
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
 80066fc:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80066fe:	2300      	movs	r3, #0
 8006700:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006708:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800670a:	7efb      	ldrb	r3, [r7, #27]
 800670c:	2b02      	cmp	r3, #2
 800670e:	f040 814b 	bne.w	80069a8 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	2b40      	cmp	r3, #64	; 0x40
 8006716:	d14d      	bne.n	80067b4 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006720:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d109      	bne.n	800673c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800672e:	f043 0220 	orr.w	r2, r3, #32
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e13e      	b.n	80069ba <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006748:	2b00      	cmp	r3, #0
 800674a:	d109      	bne.n	8006760 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006752:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e12c      	b.n	80069ba <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006768:	0e1b      	lsrs	r3, r3, #24
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	2b01      	cmp	r3, #1
 8006770:	d10b      	bne.n	800678a <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800677a:	0fdb      	lsrs	r3, r3, #31
 800677c:	f003 0301 	and.w	r3, r3, #1
 8006780:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006784:	d101      	bne.n	800678a <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006786:	2301      	movs	r3, #1
 8006788:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006792:	0a1b      	lsrs	r3, r3, #8
 8006794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006798:	69fa      	ldr	r2, [r7, #28]
 800679a:	4413      	add	r3, r2
 800679c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a6:	69f9      	ldr	r1, [r7, #28]
 80067a8:	fb01 f303 	mul.w	r3, r1, r3
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4413      	add	r3, r2
 80067b0:	627b      	str	r3, [r7, #36]	; 0x24
 80067b2:	e069      	b.n	8006888 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	2b41      	cmp	r3, #65	; 0x41
 80067b8:	d14d      	bne.n	8006856 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d109      	bne.n	80067de <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067d0:	f043 0220 	orr.w	r2, r3, #32
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e0ed      	b.n	80069ba <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80067e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d109      	bne.n	8006802 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e0db      	b.n	80069ba <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800680a:	0e1b      	lsrs	r3, r3, #24
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b01      	cmp	r3, #1
 8006812:	d10b      	bne.n	800682c <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800681c:	0fdb      	lsrs	r3, r3, #31
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006826:	d101      	bne.n	800682c <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006828:	2301      	movs	r3, #1
 800682a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006834:	0a1b      	lsrs	r3, r3, #8
 8006836:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800683a:	69fa      	ldr	r2, [r7, #28]
 800683c:	4413      	add	r3, r2
 800683e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006848:	69f9      	ldr	r1, [r7, #28]
 800684a:	fb01 f303 	mul.w	r3, r1, r3
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	627b      	str	r3, [r7, #36]	; 0x24
 8006854:	e018      	b.n	8006888 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	429a      	cmp	r2, r3
 800685e:	d309      	bcc.n	8006874 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006866:	f043 0220 	orr.w	r2, r3, #32
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e0a2      	b.n	80069ba <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800687c:	68b9      	ldr	r1, [r7, #8]
 800687e:	fb01 f303 	mul.w	r3, r1, r3
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d107      	bne.n	80068ac <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 800689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	0c9b      	lsrs	r3, r3, #18
 80068a2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	601a      	str	r2, [r3, #0]
 80068aa:	e005      	b.n	80068b8 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80068ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	3304      	adds	r3, #4
 80068d4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80068d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	b29a      	uxth	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	0e1b      	lsrs	r3, r3, #24
 800690a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	0fda      	lsrs	r2, r3, #31
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	3304      	adds	r3, #4
 8006920:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8006922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006924:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8006926:	2300      	movs	r3, #0
 8006928:	623b      	str	r3, [r7, #32]
 800692a:	e00a      	b.n	8006942 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	6a3b      	ldr	r3, [r7, #32]
 8006930:	441a      	add	r2, r3
 8006932:	6839      	ldr	r1, [r7, #0]
 8006934:	6a3b      	ldr	r3, [r7, #32]
 8006936:	440b      	add	r3, r1
 8006938:	7812      	ldrb	r2, [r2, #0]
 800693a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800693c:	6a3b      	ldr	r3, [r7, #32]
 800693e:	3301      	adds	r3, #1
 8006940:	623b      	str	r3, [r7, #32]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	0c1b      	lsrs	r3, r3, #16
 8006948:	4a1f      	ldr	r2, [pc, #124]	; (80069c8 <HAL_FDCAN_GetRxMessage+0x2d8>)
 800694a:	5cd3      	ldrb	r3, [r2, r3]
 800694c:	461a      	mov	r2, r3
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	4293      	cmp	r3, r2
 8006952:	d3eb      	bcc.n	800692c <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	2b40      	cmp	r3, #64	; 0x40
 8006958:	d105      	bne.n	8006966 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	69fa      	ldr	r2, [r7, #28]
 8006960:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8006964:	e01e      	b.n	80069a4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	2b41      	cmp	r3, #65	; 0x41
 800696a:	d105      	bne.n	8006978 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	69fa      	ldr	r2, [r7, #28]
 8006972:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8006976:	e015      	b.n	80069a4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	2b1f      	cmp	r3, #31
 800697c:	d808      	bhi.n	8006990 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2101      	movs	r1, #1
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	fa01 f202 	lsl.w	r2, r1, r2
 800698a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800698e:	e009      	b.n	80069a4 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	f003 021f 	and.w	r2, r3, #31
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2101      	movs	r1, #1
 800699c:	fa01 f202 	lsl.w	r2, r1, r2
 80069a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80069a4:	2300      	movs	r3, #0
 80069a6:	e008      	b.n	80069ba <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069ae:	f043 0208 	orr.w	r2, r3, #8
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
  }
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	372c      	adds	r7, #44	; 0x2c
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	08019dd0 	.word	0x08019dd0

080069cc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b087      	sub	sp, #28
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80069de:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80069e0:	7dfb      	ldrb	r3, [r7, #23]
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d002      	beq.n	80069ec <HAL_FDCAN_ActivateNotification+0x20>
 80069e6:	7dfb      	ldrb	r3, [r7, #23]
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d155      	bne.n	8006a98 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	4013      	ands	r3, r2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d108      	bne.n	8006a0c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f042 0201 	orr.w	r2, r2, #1
 8006a08:	65da      	str	r2, [r3, #92]	; 0x5c
 8006a0a:	e014      	b.n	8006a36 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	4013      	ands	r3, r2
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d108      	bne.n	8006a2e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f042 0202 	orr.w	r2, r2, #2
 8006a2a:	65da      	str	r2, [r3, #92]	; 0x5c
 8006a2c:	e003      	b.n	8006a36 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2203      	movs	r2, #3
 8006a34:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d009      	beq.n	8006a54 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d009      	beq.n	8006a72 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a78:	68ba      	ldr	r2, [r7, #8]
 8006a7a:	4b0f      	ldr	r3, [pc, #60]	; (8006ab8 <HAL_FDCAN_ActivateNotification+0xec>)
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	6812      	ldr	r2, [r2, #0]
 8006a82:	430b      	orrs	r3, r1
 8006a84:	6553      	str	r3, [r2, #84]	; 0x54
 8006a86:	4b0d      	ldr	r3, [pc, #52]	; (8006abc <HAL_FDCAN_ActivateNotification+0xf0>)
 8006a88:	695a      	ldr	r2, [r3, #20]
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	0f9b      	lsrs	r3, r3, #30
 8006a8e:	490b      	ldr	r1, [pc, #44]	; (8006abc <HAL_FDCAN_ActivateNotification+0xf0>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	e008      	b.n	8006aaa <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a9e:	f043 0202 	orr.w	r2, r3, #2
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
  }
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	371c      	adds	r7, #28
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	3fcfffff 	.word	0x3fcfffff
 8006abc:	4000a800 	.word	0x4000a800

08006ac0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b096      	sub	sp, #88	; 0x58
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8006ac8:	4b95      	ldr	r3, [pc, #596]	; (8006d20 <HAL_FDCAN_IRQHandler+0x260>)
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	079b      	lsls	r3, r3, #30
 8006ace:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8006ad0:	4b93      	ldr	r3, [pc, #588]	; (8006d20 <HAL_FDCAN_IRQHandler+0x260>)
 8006ad2:	695b      	ldr	r3, [r3, #20]
 8006ad4:	079b      	lsls	r3, r3, #30
 8006ad6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ad8:	4013      	ands	r3, r2
 8006ada:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ae2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006ae6:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006af0:	4013      	ands	r3, r2
 8006af2:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006afa:	f003 030f 	and.w	r3, r3, #15
 8006afe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b08:	4013      	ands	r3, r2
 8006b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b16:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b20:	4013      	ands	r3, r2
 8006b22:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b2a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8006b2e:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b38:	4013      	ands	r3, r2
 8006b3a:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b42:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8006b46:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b50:	4013      	ands	r3, r2
 8006b52:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b62:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8006b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00f      	beq.n	8006b8e <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00a      	beq.n	8006b8e <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b80:	651a      	str	r2, [r3, #80]	; 0x50
 8006b82:	4b67      	ldr	r3, [pc, #412]	; (8006d20 <HAL_FDCAN_IRQHandler+0x260>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 fa44 	bl	8007016 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8006b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d01c      	beq.n	8006bd2 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8006b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d017      	beq.n	8006bd2 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006baa:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006bb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006bc2:	651a      	str	r2, [r3, #80]	; 0x50
 8006bc4:	4b56      	ldr	r3, [pc, #344]	; (8006d20 <HAL_FDCAN_IRQHandler+0x260>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006bca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f9f9 	bl	8006fc4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8006bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00d      	beq.n	8006bf4 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006bde:	4b51      	ldr	r3, [pc, #324]	; (8006d24 <HAL_FDCAN_IRQHandler+0x264>)
 8006be0:	400b      	ands	r3, r1
 8006be2:	6513      	str	r3, [r2, #80]	; 0x50
 8006be4:	4a4e      	ldr	r2, [pc, #312]	; (8006d20 <HAL_FDCAN_IRQHandler+0x260>)
 8006be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006be8:	0f9b      	lsrs	r3, r3, #30
 8006bea:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8006bec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f9b2 	bl	8006f58 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00d      	beq.n	8006c16 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006c00:	4b48      	ldr	r3, [pc, #288]	; (8006d24 <HAL_FDCAN_IRQHandler+0x264>)
 8006c02:	400b      	ands	r3, r1
 8006c04:	6513      	str	r3, [r2, #80]	; 0x50
 8006c06:	4a46      	ldr	r2, [pc, #280]	; (8006d20 <HAL_FDCAN_IRQHandler+0x260>)
 8006c08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c0a:	0f9b      	lsrs	r3, r3, #30
 8006c0c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006c0e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f9ac 	bl	8006f6e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8006c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00d      	beq.n	8006c38 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006c22:	4b40      	ldr	r3, [pc, #256]	; (8006d24 <HAL_FDCAN_IRQHandler+0x264>)
 8006c24:	400b      	ands	r3, r1
 8006c26:	6513      	str	r3, [r2, #80]	; 0x50
 8006c28:	4a3d      	ldr	r2, [pc, #244]	; (8006d20 <HAL_FDCAN_IRQHandler+0x260>)
 8006c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c2c:	0f9b      	lsrs	r3, r3, #30
 8006c2e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006c30:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7f9 ff36 	bl	8000aa4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00d      	beq.n	8006c5a <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006c44:	4b37      	ldr	r3, [pc, #220]	; (8006d24 <HAL_FDCAN_IRQHandler+0x264>)
 8006c46:	400b      	ands	r3, r1
 8006c48:	6513      	str	r3, [r2, #80]	; 0x50
 8006c4a:	4a35      	ldr	r2, [pc, #212]	; (8006d20 <HAL_FDCAN_IRQHandler+0x260>)
 8006c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c4e:	0f9b      	lsrs	r3, r3, #30
 8006c50:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006c52:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f995 	bl	8006f84 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8006c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00f      	beq.n	8006c84 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8006c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00a      	beq.n	8006c84 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c76:	651a      	str	r2, [r3, #80]	; 0x50
 8006c78:	4b29      	ldr	r3, [pc, #164]	; (8006d20 <HAL_FDCAN_IRQHandler+0x260>)
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f98b 	bl	8006f9a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8006c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d01c      	beq.n	8006cc8 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8006c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d017      	beq.n	8006cc8 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006ca0:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cac:	4013      	ands	r3, r2
 8006cae:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cb8:	651a      	str	r2, [r3, #80]	; 0x50
 8006cba:	4b19      	ldr	r3, [pc, #100]	; (8006d20 <HAL_FDCAN_IRQHandler+0x260>)
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006cc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f973 	bl	8006fae <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8006cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00f      	beq.n	8006cf2 <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8006cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00a      	beq.n	8006cf2 <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006ce4:	651a      	str	r2, [r3, #80]	; 0x50
 8006ce6:	4b0e      	ldr	r3, [pc, #56]	; (8006d20 <HAL_FDCAN_IRQHandler+0x260>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f974 	bl	8006fda <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8006cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d015      	beq.n	8006d28 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8006cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d010      	beq.n	8006d28 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006d0e:	651a      	str	r2, [r3, #80]	; 0x50
 8006d10:	4b03      	ldr	r3, [pc, #12]	; (8006d20 <HAL_FDCAN_IRQHandler+0x260>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f969 	bl	8006fee <HAL_FDCAN_TimestampWraparoundCallback>
 8006d1c:	e004      	b.n	8006d28 <HAL_FDCAN_IRQHandler+0x268>
 8006d1e:	bf00      	nop
 8006d20:	4000a800 	.word	0x4000a800
 8006d24:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8006d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00f      	beq.n	8006d52 <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8006d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00a      	beq.n	8006d52 <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006d44:	651a      	str	r2, [r3, #80]	; 0x50
 8006d46:	4b81      	ldr	r3, [pc, #516]	; (8006f4c <HAL_FDCAN_IRQHandler+0x48c>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f958 	bl	8007002 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8006d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d014      	beq.n	8006d86 <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8006d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00f      	beq.n	8006d86 <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006d6e:	651a      	str	r2, [r3, #80]	; 0x50
 8006d70:	4b76      	ldr	r3, [pc, #472]	; (8006f4c <HAL_FDCAN_IRQHandler+0x48c>)
 8006d72:	2200      	movs	r2, #0
 8006d74:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00d      	beq.n	8006da8 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d92:	4b6f      	ldr	r3, [pc, #444]	; (8006f50 <HAL_FDCAN_IRQHandler+0x490>)
 8006d94:	400b      	ands	r3, r1
 8006d96:	6513      	str	r3, [r2, #80]	; 0x50
 8006d98:	4a6c      	ldr	r2, [pc, #432]	; (8006f4c <HAL_FDCAN_IRQHandler+0x48c>)
 8006d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d9c:	0f9b      	lsrs	r3, r3, #30
 8006d9e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006da0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f94b 	bl	800703e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d011      	beq.n	8006dd2 <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006db4:	4b66      	ldr	r3, [pc, #408]	; (8006f50 <HAL_FDCAN_IRQHandler+0x490>)
 8006db6:	400b      	ands	r3, r1
 8006db8:	6513      	str	r3, [r2, #80]	; 0x50
 8006dba:	4a64      	ldr	r2, [pc, #400]	; (8006f4c <HAL_FDCAN_IRQHandler+0x48c>)
 8006dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dbe:	0f9b      	lsrs	r3, r3, #30
 8006dc0:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dca:	431a      	orrs	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a5f      	ldr	r2, [pc, #380]	; (8006f54 <HAL_FDCAN_IRQHandler+0x494>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	f040 80aa 	bne.w	8006f32 <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f003 0303 	and.w	r3, r3, #3
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 80a2 	beq.w	8006f32 <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	f003 030f 	and.w	r3, r3, #15
 8006df8:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e02:	4013      	ands	r3, r2
 8006e04:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e10:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	6a1b      	ldr	r3, [r3, #32]
 8006e24:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006e28:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e32:	4013      	ands	r3, r2
 8006e34:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8006e40:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e48:	6a3a      	ldr	r2, [r7, #32]
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	6a1b      	ldr	r3, [r3, #32]
 8006e54:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8006e58:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e60:	69fa      	ldr	r2, [r7, #28]
 8006e62:	4013      	ands	r3, r2
 8006e64:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6c:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	6a1b      	ldr	r3, [r3, #32]
 8006e74:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8006e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d007      	beq.n	8006e8c <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e82:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8006e84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f8e4 	bl	8007054 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8006e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d007      	beq.n	8006ea2 <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e98:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8006e9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 f8e4 	bl	800706a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d019      	beq.n	8006ee0 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d014      	beq.n	8006ee0 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ebc:	0c1b      	lsrs	r3, r3, #16
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ecc:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	2240      	movs	r2, #64	; 0x40
 8006ed4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	6939      	ldr	r1, [r7, #16]
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f8d0 	bl	8007080 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d007      	beq.n	8006ef6 <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eec:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8006eee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f8d1 	bl	8007098 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8006ef6:	6a3b      	ldr	r3, [r7, #32]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00b      	beq.n	8006f14 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	6a3a      	ldr	r2, [r7, #32]
 8006f02:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006f0a:	6a3b      	ldr	r3, [r7, #32]
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00b      	beq.n	8006f32 <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	69fa      	ldr	r2, [r7, #28]
 8006f20:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	431a      	orrs	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f874 	bl	800702a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006f42:	bf00      	nop
 8006f44:	3758      	adds	r7, #88	; 0x58
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	4000a800 	.word	0x4000a800
 8006f50:	3fcfffff 	.word	0x3fcfffff
 8006f54:	4000a000 	.word	0x4000a000

08006f58 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8006f62:	bf00      	nop
 8006f64:	370c      	adds	r7, #12
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b083      	sub	sp, #12
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006f8e:	bf00      	nop
 8006f90:	370c      	adds	r7, #12
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b083      	sub	sp, #12
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006fa2:	bf00      	nop
 8006fa4:	370c      	adds	r7, #12
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b083      	sub	sp, #12
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006fce:	bf00      	nop
 8006fd0:	370c      	adds	r7, #12
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b083      	sub	sp, #12
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8006fe2:	bf00      	nop
 8006fe4:	370c      	adds	r7, #12
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr

08006fee <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006fee:	b480      	push	{r7}
 8006ff0:	b083      	sub	sp, #12
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006ff6:	bf00      	nop
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007002:	b480      	push	{r7}
 8007004:	b083      	sub	sp, #12
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800700a:	bf00      	nop
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007016:	b480      	push	{r7}
 8007018:	b083      	sub	sp, #12
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800701e:	bf00      	nop
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800702a:	b480      	push	{r7}
 800702c:	b083      	sub	sp, #12
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8007032:	bf00      	nop
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800703e:	b480      	push	{r7}
 8007040:	b083      	sub	sp, #12
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800705e:	bf00      	nop
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800706a:	b480      	push	{r7}
 800706c:	b083      	sub	sp, #12
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
 8007072:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8007074:	bf00      	nop
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800708c:	bf00      	nop
 800708e:	3714      	adds	r7, #20
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80070a2:	bf00      	nop
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
	...

080070b0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070bc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80070c6:	4ba7      	ldr	r3, [pc, #668]	; (8007364 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80070c8:	4013      	ands	r3, r2
 80070ca:	68ba      	ldr	r2, [r7, #8]
 80070cc:	0091      	lsls	r1, r2, #2
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	6812      	ldr	r2, [r2, #0]
 80070d2:	430b      	orrs	r3, r1
 80070d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070e0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e8:	041a      	lsls	r2, r3, #16
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	430a      	orrs	r2, r1
 80070f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f8:	68ba      	ldr	r2, [r7, #8]
 80070fa:	4413      	add	r3, r2
 80070fc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007106:	4b97      	ldr	r3, [pc, #604]	; (8007364 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007108:	4013      	ands	r3, r2
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	0091      	lsls	r1, r2, #2
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	6812      	ldr	r2, [r2, #0]
 8007112:	430b      	orrs	r3, r1
 8007114:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007120:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007128:	041a      	lsls	r2, r3, #16
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	430a      	orrs	r2, r1
 8007130:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007138:	005b      	lsls	r3, r3, #1
 800713a:	68ba      	ldr	r2, [r7, #8]
 800713c:	4413      	add	r3, r2
 800713e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007148:	4b86      	ldr	r3, [pc, #536]	; (8007364 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800714a:	4013      	ands	r3, r2
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	0091      	lsls	r1, r2, #2
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	6812      	ldr	r2, [r2, #0]
 8007154:	430b      	orrs	r3, r1
 8007156:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007162:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716a:	041a      	lsls	r2, r3, #16
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	430a      	orrs	r2, r1
 8007172:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800717e:	fb02 f303 	mul.w	r3, r2, r3
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	4413      	add	r3, r2
 8007186:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007190:	4b74      	ldr	r3, [pc, #464]	; (8007364 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007192:	4013      	ands	r3, r2
 8007194:	68ba      	ldr	r2, [r7, #8]
 8007196:	0091      	lsls	r1, r2, #2
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	6812      	ldr	r2, [r2, #0]
 800719c:	430b      	orrs	r3, r1
 800719e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071aa:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071b2:	041a      	lsls	r2, r3, #16
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	430a      	orrs	r2, r1
 80071ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80071c6:	fb02 f303 	mul.w	r3, r2, r3
 80071ca:	68ba      	ldr	r2, [r7, #8]
 80071cc:	4413      	add	r3, r2
 80071ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80071d8:	4b62      	ldr	r3, [pc, #392]	; (8007364 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80071da:	4013      	ands	r3, r2
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	0091      	lsls	r1, r2, #2
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	6812      	ldr	r2, [r2, #0]
 80071e4:	430b      	orrs	r3, r1
 80071e6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80071f2:	fb02 f303 	mul.w	r3, r2, r3
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	4413      	add	r3, r2
 80071fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007204:	4b57      	ldr	r3, [pc, #348]	; (8007364 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007206:	4013      	ands	r3, r2
 8007208:	68ba      	ldr	r2, [r7, #8]
 800720a:	0091      	lsls	r1, r2, #2
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	6812      	ldr	r2, [r2, #0]
 8007210:	430b      	orrs	r3, r1
 8007212:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800721e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007226:	041a      	lsls	r2, r3, #16
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	430a      	orrs	r2, r1
 800722e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007236:	005b      	lsls	r3, r3, #1
 8007238:	68ba      	ldr	r2, [r7, #8]
 800723a:	4413      	add	r3, r2
 800723c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007246:	4b47      	ldr	r3, [pc, #284]	; (8007364 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007248:	4013      	ands	r3, r2
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	0091      	lsls	r1, r2, #2
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	6812      	ldr	r2, [r2, #0]
 8007252:	430b      	orrs	r3, r1
 8007254:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007260:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007268:	041a      	lsls	r2, r3, #16
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	430a      	orrs	r2, r1
 8007270:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800727c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007284:	061a      	lsls	r2, r3, #24
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	430a      	orrs	r2, r1
 800728c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007294:	4b34      	ldr	r3, [pc, #208]	; (8007368 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007296:	4413      	add	r3, r2
 8007298:	009a      	lsls	r2, r3, #2
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	441a      	add	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b6:	00db      	lsls	r3, r3, #3
 80072b8:	441a      	add	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c6:	6879      	ldr	r1, [r7, #4]
 80072c8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80072ca:	fb01 f303 	mul.w	r3, r1, r3
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	441a      	add	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072de:	6879      	ldr	r1, [r7, #4]
 80072e0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80072e2:	fb01 f303 	mul.w	r3, r1, r3
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	441a      	add	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f6:	6879      	ldr	r1, [r7, #4]
 80072f8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80072fa:	fb01 f303 	mul.w	r3, r1, r3
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	441a      	add	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007312:	00db      	lsls	r3, r3, #3
 8007314:	441a      	add	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007326:	6879      	ldr	r1, [r7, #4]
 8007328:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800732a:	fb01 f303 	mul.w	r3, r1, r3
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	441a      	add	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007342:	6879      	ldr	r1, [r7, #4]
 8007344:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007346:	fb01 f303 	mul.w	r3, r1, r3
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	441a      	add	r2, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800735a:	4a04      	ldr	r2, [pc, #16]	; (800736c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d915      	bls.n	800738c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007360:	e006      	b.n	8007370 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007362:	bf00      	nop
 8007364:	ffff0003 	.word	0xffff0003
 8007368:	10002b00 	.word	0x10002b00
 800736c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007376:	f043 0220 	orr.w	r2, r3, #32
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2203      	movs	r2, #3
 8007384:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	e010      	b.n	80073ae <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007390:	60fb      	str	r3, [r7, #12]
 8007392:	e005      	b.n	80073a0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3304      	adds	r3, #4
 800739e:	60fb      	str	r3, [r7, #12]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d3f3      	bcc.n	8007394 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop

080073bc <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 80073bc:	b480      	push	{r7}
 80073be:	b089      	sub	sp, #36	; 0x24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	607a      	str	r2, [r7, #4]
 80073c8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10a      	bne.n	80073e8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80073da:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80073e2:	4313      	orrs	r3, r2
 80073e4:	61fb      	str	r3, [r7, #28]
 80073e6:	e00a      	b.n	80073fe <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80073f0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80073f6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80073f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073fc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8007408:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800740e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8007414:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800741a:	4313      	orrs	r3, r2
 800741c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007428:	6839      	ldr	r1, [r7, #0]
 800742a:	fb01 f303 	mul.w	r3, r1, r3
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	69fa      	ldr	r2, [r7, #28]
 8007438:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	3304      	adds	r3, #4
 800743e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	693a      	ldr	r2, [r7, #16]
 8007444:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	3304      	adds	r3, #4
 800744a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800744c:	2300      	movs	r3, #0
 800744e:	617b      	str	r3, [r7, #20]
 8007450:	e020      	b.n	8007494 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	3303      	adds	r3, #3
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	4413      	add	r3, r2
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	3302      	adds	r3, #2
 8007462:	6879      	ldr	r1, [r7, #4]
 8007464:	440b      	add	r3, r1
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800746a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	3301      	adds	r3, #1
 8007470:	6879      	ldr	r1, [r7, #4]
 8007472:	440b      	add	r3, r1
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8007478:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800747a:	6879      	ldr	r1, [r7, #4]
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	440a      	add	r2, r1
 8007480:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8007482:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	3304      	adds	r3, #4
 800748c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	3304      	adds	r3, #4
 8007492:	617b      	str	r3, [r7, #20]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	0c1b      	lsrs	r3, r3, #16
 800749a:	4a06      	ldr	r2, [pc, #24]	; (80074b4 <FDCAN_CopyMessageToRAM+0xf8>)
 800749c:	5cd3      	ldrb	r3, [r2, r3]
 800749e:	461a      	mov	r2, r3
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d3d5      	bcc.n	8007452 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80074a6:	bf00      	nop
 80074a8:	bf00      	nop
 80074aa:	3724      	adds	r7, #36	; 0x24
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr
 80074b4:	08019dd0 	.word	0x08019dd0

080074b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b089      	sub	sp, #36	; 0x24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80074c2:	2300      	movs	r3, #0
 80074c4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80074c6:	4b86      	ldr	r3, [pc, #536]	; (80076e0 <HAL_GPIO_Init+0x228>)
 80074c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80074ca:	e18c      	b.n	80077e6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	2101      	movs	r1, #1
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	fa01 f303 	lsl.w	r3, r1, r3
 80074d8:	4013      	ands	r3, r2
 80074da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f000 817e 	beq.w	80077e0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	f003 0303 	and.w	r3, r3, #3
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d005      	beq.n	80074fc <HAL_GPIO_Init+0x44>
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	f003 0303 	and.w	r3, r3, #3
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d130      	bne.n	800755e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	2203      	movs	r2, #3
 8007508:	fa02 f303 	lsl.w	r3, r2, r3
 800750c:	43db      	mvns	r3, r3
 800750e:	69ba      	ldr	r2, [r7, #24]
 8007510:	4013      	ands	r3, r2
 8007512:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	68da      	ldr	r2, [r3, #12]
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	005b      	lsls	r3, r3, #1
 800751c:	fa02 f303 	lsl.w	r3, r2, r3
 8007520:	69ba      	ldr	r2, [r7, #24]
 8007522:	4313      	orrs	r3, r2
 8007524:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007532:	2201      	movs	r2, #1
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	fa02 f303 	lsl.w	r3, r2, r3
 800753a:	43db      	mvns	r3, r3
 800753c:	69ba      	ldr	r2, [r7, #24]
 800753e:	4013      	ands	r3, r2
 8007540:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	091b      	lsrs	r3, r3, #4
 8007548:	f003 0201 	and.w	r2, r3, #1
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	fa02 f303 	lsl.w	r3, r2, r3
 8007552:	69ba      	ldr	r2, [r7, #24]
 8007554:	4313      	orrs	r3, r2
 8007556:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	69ba      	ldr	r2, [r7, #24]
 800755c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	f003 0303 	and.w	r3, r3, #3
 8007566:	2b03      	cmp	r3, #3
 8007568:	d017      	beq.n	800759a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	005b      	lsls	r3, r3, #1
 8007574:	2203      	movs	r2, #3
 8007576:	fa02 f303 	lsl.w	r3, r2, r3
 800757a:	43db      	mvns	r3, r3
 800757c:	69ba      	ldr	r2, [r7, #24]
 800757e:	4013      	ands	r3, r2
 8007580:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	689a      	ldr	r2, [r3, #8]
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	fa02 f303 	lsl.w	r3, r2, r3
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	4313      	orrs	r3, r2
 8007592:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	69ba      	ldr	r2, [r7, #24]
 8007598:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	f003 0303 	and.w	r3, r3, #3
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d123      	bne.n	80075ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	08da      	lsrs	r2, r3, #3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	3208      	adds	r2, #8
 80075ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	f003 0307 	and.w	r3, r3, #7
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	220f      	movs	r2, #15
 80075be:	fa02 f303 	lsl.w	r3, r2, r3
 80075c2:	43db      	mvns	r3, r3
 80075c4:	69ba      	ldr	r2, [r7, #24]
 80075c6:	4013      	ands	r3, r2
 80075c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	691a      	ldr	r2, [r3, #16]
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	f003 0307 	and.w	r3, r3, #7
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	fa02 f303 	lsl.w	r3, r2, r3
 80075da:	69ba      	ldr	r2, [r7, #24]
 80075dc:	4313      	orrs	r3, r2
 80075de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	08da      	lsrs	r2, r3, #3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	3208      	adds	r2, #8
 80075e8:	69b9      	ldr	r1, [r7, #24]
 80075ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	005b      	lsls	r3, r3, #1
 80075f8:	2203      	movs	r2, #3
 80075fa:	fa02 f303 	lsl.w	r3, r2, r3
 80075fe:	43db      	mvns	r3, r3
 8007600:	69ba      	ldr	r2, [r7, #24]
 8007602:	4013      	ands	r3, r2
 8007604:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	f003 0203 	and.w	r2, r3, #3
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	005b      	lsls	r3, r3, #1
 8007612:	fa02 f303 	lsl.w	r3, r2, r3
 8007616:	69ba      	ldr	r2, [r7, #24]
 8007618:	4313      	orrs	r3, r2
 800761a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	69ba      	ldr	r2, [r7, #24]
 8007620:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 80d8 	beq.w	80077e0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007630:	4b2c      	ldr	r3, [pc, #176]	; (80076e4 <HAL_GPIO_Init+0x22c>)
 8007632:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007636:	4a2b      	ldr	r2, [pc, #172]	; (80076e4 <HAL_GPIO_Init+0x22c>)
 8007638:	f043 0302 	orr.w	r3, r3, #2
 800763c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007640:	4b28      	ldr	r3, [pc, #160]	; (80076e4 <HAL_GPIO_Init+0x22c>)
 8007642:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007646:	f003 0302 	and.w	r3, r3, #2
 800764a:	60fb      	str	r3, [r7, #12]
 800764c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800764e:	4a26      	ldr	r2, [pc, #152]	; (80076e8 <HAL_GPIO_Init+0x230>)
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	089b      	lsrs	r3, r3, #2
 8007654:	3302      	adds	r3, #2
 8007656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800765a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	f003 0303 	and.w	r3, r3, #3
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	220f      	movs	r2, #15
 8007666:	fa02 f303 	lsl.w	r3, r2, r3
 800766a:	43db      	mvns	r3, r3
 800766c:	69ba      	ldr	r2, [r7, #24]
 800766e:	4013      	ands	r3, r2
 8007670:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a1d      	ldr	r2, [pc, #116]	; (80076ec <HAL_GPIO_Init+0x234>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d04a      	beq.n	8007710 <HAL_GPIO_Init+0x258>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a1c      	ldr	r2, [pc, #112]	; (80076f0 <HAL_GPIO_Init+0x238>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d02b      	beq.n	80076da <HAL_GPIO_Init+0x222>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a1b      	ldr	r2, [pc, #108]	; (80076f4 <HAL_GPIO_Init+0x23c>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d025      	beq.n	80076d6 <HAL_GPIO_Init+0x21e>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a1a      	ldr	r2, [pc, #104]	; (80076f8 <HAL_GPIO_Init+0x240>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d01f      	beq.n	80076d2 <HAL_GPIO_Init+0x21a>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a19      	ldr	r2, [pc, #100]	; (80076fc <HAL_GPIO_Init+0x244>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d019      	beq.n	80076ce <HAL_GPIO_Init+0x216>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a18      	ldr	r2, [pc, #96]	; (8007700 <HAL_GPIO_Init+0x248>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d013      	beq.n	80076ca <HAL_GPIO_Init+0x212>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a17      	ldr	r2, [pc, #92]	; (8007704 <HAL_GPIO_Init+0x24c>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d00d      	beq.n	80076c6 <HAL_GPIO_Init+0x20e>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a16      	ldr	r2, [pc, #88]	; (8007708 <HAL_GPIO_Init+0x250>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d007      	beq.n	80076c2 <HAL_GPIO_Init+0x20a>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a15      	ldr	r2, [pc, #84]	; (800770c <HAL_GPIO_Init+0x254>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d101      	bne.n	80076be <HAL_GPIO_Init+0x206>
 80076ba:	2309      	movs	r3, #9
 80076bc:	e029      	b.n	8007712 <HAL_GPIO_Init+0x25a>
 80076be:	230a      	movs	r3, #10
 80076c0:	e027      	b.n	8007712 <HAL_GPIO_Init+0x25a>
 80076c2:	2307      	movs	r3, #7
 80076c4:	e025      	b.n	8007712 <HAL_GPIO_Init+0x25a>
 80076c6:	2306      	movs	r3, #6
 80076c8:	e023      	b.n	8007712 <HAL_GPIO_Init+0x25a>
 80076ca:	2305      	movs	r3, #5
 80076cc:	e021      	b.n	8007712 <HAL_GPIO_Init+0x25a>
 80076ce:	2304      	movs	r3, #4
 80076d0:	e01f      	b.n	8007712 <HAL_GPIO_Init+0x25a>
 80076d2:	2303      	movs	r3, #3
 80076d4:	e01d      	b.n	8007712 <HAL_GPIO_Init+0x25a>
 80076d6:	2302      	movs	r3, #2
 80076d8:	e01b      	b.n	8007712 <HAL_GPIO_Init+0x25a>
 80076da:	2301      	movs	r3, #1
 80076dc:	e019      	b.n	8007712 <HAL_GPIO_Init+0x25a>
 80076de:	bf00      	nop
 80076e0:	58000080 	.word	0x58000080
 80076e4:	58024400 	.word	0x58024400
 80076e8:	58000400 	.word	0x58000400
 80076ec:	58020000 	.word	0x58020000
 80076f0:	58020400 	.word	0x58020400
 80076f4:	58020800 	.word	0x58020800
 80076f8:	58020c00 	.word	0x58020c00
 80076fc:	58021000 	.word	0x58021000
 8007700:	58021400 	.word	0x58021400
 8007704:	58021800 	.word	0x58021800
 8007708:	58021c00 	.word	0x58021c00
 800770c:	58022400 	.word	0x58022400
 8007710:	2300      	movs	r3, #0
 8007712:	69fa      	ldr	r2, [r7, #28]
 8007714:	f002 0203 	and.w	r2, r2, #3
 8007718:	0092      	lsls	r2, r2, #2
 800771a:	4093      	lsls	r3, r2
 800771c:	69ba      	ldr	r2, [r7, #24]
 800771e:	4313      	orrs	r3, r2
 8007720:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007722:	4938      	ldr	r1, [pc, #224]	; (8007804 <HAL_GPIO_Init+0x34c>)
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	089b      	lsrs	r3, r3, #2
 8007728:	3302      	adds	r3, #2
 800772a:	69ba      	ldr	r2, [r7, #24]
 800772c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	43db      	mvns	r3, r3
 800773c:	69ba      	ldr	r2, [r7, #24]
 800773e:	4013      	ands	r3, r2
 8007740:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d003      	beq.n	8007756 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800774e:	69ba      	ldr	r2, [r7, #24]
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	4313      	orrs	r3, r2
 8007754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007756:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800775e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	43db      	mvns	r3, r3
 800776a:	69ba      	ldr	r2, [r7, #24]
 800776c:	4013      	ands	r3, r2
 800776e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007778:	2b00      	cmp	r3, #0
 800777a:	d003      	beq.n	8007784 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800777c:	69ba      	ldr	r2, [r7, #24]
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	4313      	orrs	r3, r2
 8007782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007784:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	43db      	mvns	r3, r3
 8007796:	69ba      	ldr	r2, [r7, #24]
 8007798:	4013      	ands	r3, r2
 800779a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d003      	beq.n	80077b0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80077a8:	69ba      	ldr	r2, [r7, #24]
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	69ba      	ldr	r2, [r7, #24]
 80077b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	43db      	mvns	r3, r3
 80077c0:	69ba      	ldr	r2, [r7, #24]
 80077c2:	4013      	ands	r3, r2
 80077c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d003      	beq.n	80077da <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80077d2:	69ba      	ldr	r2, [r7, #24]
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	69ba      	ldr	r2, [r7, #24]
 80077de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	3301      	adds	r3, #1
 80077e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	fa22 f303 	lsr.w	r3, r2, r3
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f47f ae6b 	bne.w	80074cc <HAL_GPIO_Init+0x14>
  }
}
 80077f6:	bf00      	nop
 80077f8:	bf00      	nop
 80077fa:	3724      	adds	r7, #36	; 0x24
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr
 8007804:	58000400 	.word	0x58000400

08007808 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	460b      	mov	r3, r1
 8007812:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	691a      	ldr	r2, [r3, #16]
 8007818:	887b      	ldrh	r3, [r7, #2]
 800781a:	4013      	ands	r3, r2
 800781c:	2b00      	cmp	r3, #0
 800781e:	d002      	beq.n	8007826 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007820:	2301      	movs	r3, #1
 8007822:	73fb      	strb	r3, [r7, #15]
 8007824:	e001      	b.n	800782a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007826:	2300      	movs	r3, #0
 8007828:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800782a:	7bfb      	ldrb	r3, [r7, #15]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3714      	adds	r7, #20
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	460b      	mov	r3, r1
 8007842:	807b      	strh	r3, [r7, #2]
 8007844:	4613      	mov	r3, r2
 8007846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007848:	787b      	ldrb	r3, [r7, #1]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d003      	beq.n	8007856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800784e:	887a      	ldrh	r2, [r7, #2]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007854:	e003      	b.n	800785e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007856:	887b      	ldrh	r3, [r7, #2]
 8007858:	041a      	lsls	r2, r3, #16
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	619a      	str	r2, [r3, #24]
}
 800785e:	bf00      	nop
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
	...

0800786c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d101      	bne.n	800787e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e07f      	b.n	800797e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b00      	cmp	r3, #0
 8007888:	d106      	bne.n	8007898 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f7fa fb04 	bl	8001ea0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2224      	movs	r2, #36	; 0x24
 800789c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f022 0201 	bic.w	r2, r2, #1
 80078ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685a      	ldr	r2, [r3, #4]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80078bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	689a      	ldr	r2, [r3, #8]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80078cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d107      	bne.n	80078e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	689a      	ldr	r2, [r3, #8]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078e2:	609a      	str	r2, [r3, #8]
 80078e4:	e006      	b.n	80078f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	689a      	ldr	r2, [r3, #8]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80078f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d104      	bne.n	8007906 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007904:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6859      	ldr	r1, [r3, #4]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	4b1d      	ldr	r3, [pc, #116]	; (8007988 <HAL_I2C_Init+0x11c>)
 8007912:	430b      	orrs	r3, r1
 8007914:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68da      	ldr	r2, [r3, #12]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007924:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	691a      	ldr	r2, [r3, #16]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	695b      	ldr	r3, [r3, #20]
 800792e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	699b      	ldr	r3, [r3, #24]
 8007936:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	430a      	orrs	r2, r1
 800793e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	69d9      	ldr	r1, [r3, #28]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a1a      	ldr	r2, [r3, #32]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	430a      	orrs	r2, r1
 800794e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f042 0201 	orr.w	r2, r2, #1
 800795e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2220      	movs	r2, #32
 800796a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	02008000 	.word	0x02008000

0800798c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d005      	beq.n	80079b8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	68f9      	ldr	r1, [r7, #12]
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	4798      	blx	r3
  }
}
 80079b8:	bf00      	nop
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b20      	cmp	r3, #32
 80079d4:	d138      	bne.n	8007a48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d101      	bne.n	80079e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80079e0:	2302      	movs	r3, #2
 80079e2:	e032      	b.n	8007a4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2224      	movs	r2, #36	; 0x24
 80079f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f022 0201 	bic.w	r2, r2, #1
 8007a02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007a12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	6819      	ldr	r1, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	683a      	ldr	r2, [r7, #0]
 8007a20:	430a      	orrs	r2, r1
 8007a22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f042 0201 	orr.w	r2, r2, #1
 8007a32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2220      	movs	r2, #32
 8007a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a44:	2300      	movs	r3, #0
 8007a46:	e000      	b.n	8007a4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007a48:	2302      	movs	r3, #2
  }
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b085      	sub	sp, #20
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	2b20      	cmp	r3, #32
 8007a6a:	d139      	bne.n	8007ae0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d101      	bne.n	8007a7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007a76:	2302      	movs	r3, #2
 8007a78:	e033      	b.n	8007ae2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2224      	movs	r2, #36	; 0x24
 8007a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f022 0201 	bic.w	r2, r2, #1
 8007a98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007aa8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	021b      	lsls	r3, r3, #8
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f042 0201 	orr.w	r2, r2, #1
 8007aca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2220      	movs	r2, #32
 8007ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007adc:	2300      	movs	r3, #0
 8007ade:	e000      	b.n	8007ae2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007ae0:	2302      	movs	r3, #2
  }
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3714      	adds	r7, #20
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007aee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007af0:	b08f      	sub	sp, #60	; 0x3c
 8007af2:	af0a      	add	r7, sp, #40	; 0x28
 8007af4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d101      	bne.n	8007b00 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e116      	b.n	8007d2e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d106      	bne.n	8007b20 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f00d fafa 	bl	8015114 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2203      	movs	r2, #3
 8007b24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d102      	bne.n	8007b3a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f009 fc3f 	bl	80113c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	603b      	str	r3, [r7, #0]
 8007b4a:	687e      	ldr	r6, [r7, #4]
 8007b4c:	466d      	mov	r5, sp
 8007b4e:	f106 0410 	add.w	r4, r6, #16
 8007b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007b5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8007b62:	1d33      	adds	r3, r6, #4
 8007b64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b66:	6838      	ldr	r0, [r7, #0]
 8007b68:	f009 fb0a 	bl	8011180 <USB_CoreInit>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d005      	beq.n	8007b7e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2202      	movs	r2, #2
 8007b76:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e0d7      	b.n	8007d2e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2100      	movs	r1, #0
 8007b84:	4618      	mov	r0, r3
 8007b86:	f009 fc2d 	bl	80113e4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	73fb      	strb	r3, [r7, #15]
 8007b8e:	e04a      	b.n	8007c26 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007b90:	7bfa      	ldrb	r2, [r7, #15]
 8007b92:	6879      	ldr	r1, [r7, #4]
 8007b94:	4613      	mov	r3, r2
 8007b96:	00db      	lsls	r3, r3, #3
 8007b98:	4413      	add	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	440b      	add	r3, r1
 8007b9e:	333d      	adds	r3, #61	; 0x3d
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007ba4:	7bfa      	ldrb	r2, [r7, #15]
 8007ba6:	6879      	ldr	r1, [r7, #4]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	00db      	lsls	r3, r3, #3
 8007bac:	4413      	add	r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	440b      	add	r3, r1
 8007bb2:	333c      	adds	r3, #60	; 0x3c
 8007bb4:	7bfa      	ldrb	r2, [r7, #15]
 8007bb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007bb8:	7bfa      	ldrb	r2, [r7, #15]
 8007bba:	7bfb      	ldrb	r3, [r7, #15]
 8007bbc:	b298      	uxth	r0, r3
 8007bbe:	6879      	ldr	r1, [r7, #4]
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	00db      	lsls	r3, r3, #3
 8007bc4:	4413      	add	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	440b      	add	r3, r1
 8007bca:	3356      	adds	r3, #86	; 0x56
 8007bcc:	4602      	mov	r2, r0
 8007bce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007bd0:	7bfa      	ldrb	r2, [r7, #15]
 8007bd2:	6879      	ldr	r1, [r7, #4]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	00db      	lsls	r3, r3, #3
 8007bd8:	4413      	add	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	440b      	add	r3, r1
 8007bde:	3340      	adds	r3, #64	; 0x40
 8007be0:	2200      	movs	r2, #0
 8007be2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007be4:	7bfa      	ldrb	r2, [r7, #15]
 8007be6:	6879      	ldr	r1, [r7, #4]
 8007be8:	4613      	mov	r3, r2
 8007bea:	00db      	lsls	r3, r3, #3
 8007bec:	4413      	add	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	440b      	add	r3, r1
 8007bf2:	3344      	adds	r3, #68	; 0x44
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007bf8:	7bfa      	ldrb	r2, [r7, #15]
 8007bfa:	6879      	ldr	r1, [r7, #4]
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	00db      	lsls	r3, r3, #3
 8007c00:	4413      	add	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	440b      	add	r3, r1
 8007c06:	3348      	adds	r3, #72	; 0x48
 8007c08:	2200      	movs	r2, #0
 8007c0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007c0c:	7bfa      	ldrb	r2, [r7, #15]
 8007c0e:	6879      	ldr	r1, [r7, #4]
 8007c10:	4613      	mov	r3, r2
 8007c12:	00db      	lsls	r3, r3, #3
 8007c14:	4413      	add	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	440b      	add	r3, r1
 8007c1a:	334c      	adds	r3, #76	; 0x4c
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
 8007c22:	3301      	adds	r3, #1
 8007c24:	73fb      	strb	r3, [r7, #15]
 8007c26:	7bfa      	ldrb	r2, [r7, #15]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d3af      	bcc.n	8007b90 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c30:	2300      	movs	r3, #0
 8007c32:	73fb      	strb	r3, [r7, #15]
 8007c34:	e044      	b.n	8007cc0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007c36:	7bfa      	ldrb	r2, [r7, #15]
 8007c38:	6879      	ldr	r1, [r7, #4]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	00db      	lsls	r3, r3, #3
 8007c3e:	4413      	add	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	440b      	add	r3, r1
 8007c44:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007c48:	2200      	movs	r2, #0
 8007c4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007c4c:	7bfa      	ldrb	r2, [r7, #15]
 8007c4e:	6879      	ldr	r1, [r7, #4]
 8007c50:	4613      	mov	r3, r2
 8007c52:	00db      	lsls	r3, r3, #3
 8007c54:	4413      	add	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	440b      	add	r3, r1
 8007c5a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007c5e:	7bfa      	ldrb	r2, [r7, #15]
 8007c60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007c62:	7bfa      	ldrb	r2, [r7, #15]
 8007c64:	6879      	ldr	r1, [r7, #4]
 8007c66:	4613      	mov	r3, r2
 8007c68:	00db      	lsls	r3, r3, #3
 8007c6a:	4413      	add	r3, r2
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	440b      	add	r3, r1
 8007c70:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007c74:	2200      	movs	r2, #0
 8007c76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007c78:	7bfa      	ldrb	r2, [r7, #15]
 8007c7a:	6879      	ldr	r1, [r7, #4]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	00db      	lsls	r3, r3, #3
 8007c80:	4413      	add	r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	440b      	add	r3, r1
 8007c86:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007c8e:	7bfa      	ldrb	r2, [r7, #15]
 8007c90:	6879      	ldr	r1, [r7, #4]
 8007c92:	4613      	mov	r3, r2
 8007c94:	00db      	lsls	r3, r3, #3
 8007c96:	4413      	add	r3, r2
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	440b      	add	r3, r1
 8007c9c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007ca4:	7bfa      	ldrb	r2, [r7, #15]
 8007ca6:	6879      	ldr	r1, [r7, #4]
 8007ca8:	4613      	mov	r3, r2
 8007caa:	00db      	lsls	r3, r3, #3
 8007cac:	4413      	add	r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	440b      	add	r3, r1
 8007cb2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007cba:	7bfb      	ldrb	r3, [r7, #15]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	73fb      	strb	r3, [r7, #15]
 8007cc0:	7bfa      	ldrb	r2, [r7, #15]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d3b5      	bcc.n	8007c36 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	603b      	str	r3, [r7, #0]
 8007cd0:	687e      	ldr	r6, [r7, #4]
 8007cd2:	466d      	mov	r5, sp
 8007cd4:	f106 0410 	add.w	r4, r6, #16
 8007cd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007cda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007cde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007ce0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007ce4:	e885 0003 	stmia.w	r5, {r0, r1}
 8007ce8:	1d33      	adds	r3, r6, #4
 8007cea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007cec:	6838      	ldr	r0, [r7, #0]
 8007cee:	f009 fbc5 	bl	801147c <USB_DevInit>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d005      	beq.n	8007d04 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e014      	b.n	8007d2e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d102      	bne.n	8007d22 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f001 f96f 	bl	8009000 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4618      	mov	r0, r3
 8007d28:	f00a fc07 	bl	801253a <USB_DevDisconnect>

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3714      	adds	r7, #20
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d36 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b084      	sub	sp, #16
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d101      	bne.n	8007d52 <HAL_PCD_Start+0x1c>
 8007d4e:	2302      	movs	r3, #2
 8007d50:	e022      	b.n	8007d98 <HAL_PCD_Start+0x62>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2201      	movs	r2, #1
 8007d56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d109      	bne.n	8007d7a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d105      	bne.n	8007d7a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f009 fb0e 	bl	80113a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f00a fbb5 	bl	80124f8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007da0:	b590      	push	{r4, r7, lr}
 8007da2:	b08d      	sub	sp, #52	; 0x34
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dae:	6a3b      	ldr	r3, [r7, #32]
 8007db0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4618      	mov	r0, r3
 8007db8:	f00a fc73 	bl	80126a2 <USB_GetMode>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f040 84b7 	bne.w	8008732 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f00a fbd7 	bl	801257c <USB_ReadInterrupts>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f000 84ad 	beq.w	8008730 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	0a1b      	lsrs	r3, r3, #8
 8007de0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4618      	mov	r0, r3
 8007df0:	f00a fbc4 	bl	801257c <USB_ReadInterrupts>
 8007df4:	4603      	mov	r3, r0
 8007df6:	f003 0302 	and.w	r3, r3, #2
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	d107      	bne.n	8007e0e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	695a      	ldr	r2, [r3, #20]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f002 0202 	and.w	r2, r2, #2
 8007e0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f00a fbb2 	bl	801257c <USB_ReadInterrupts>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	f003 0310 	and.w	r3, r3, #16
 8007e1e:	2b10      	cmp	r3, #16
 8007e20:	d161      	bne.n	8007ee6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	699a      	ldr	r2, [r3, #24]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f022 0210 	bic.w	r2, r2, #16
 8007e30:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007e32:	6a3b      	ldr	r3, [r7, #32]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	f003 020f 	and.w	r2, r3, #15
 8007e3e:	4613      	mov	r3, r2
 8007e40:	00db      	lsls	r3, r3, #3
 8007e42:	4413      	add	r3, r2
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	3304      	adds	r3, #4
 8007e50:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	0c5b      	lsrs	r3, r3, #17
 8007e56:	f003 030f 	and.w	r3, r3, #15
 8007e5a:	2b02      	cmp	r3, #2
 8007e5c:	d124      	bne.n	8007ea8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007e5e:	69ba      	ldr	r2, [r7, #24]
 8007e60:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007e64:	4013      	ands	r3, r2
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d035      	beq.n	8007ed6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	091b      	lsrs	r3, r3, #4
 8007e72:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007e74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	6a38      	ldr	r0, [r7, #32]
 8007e7e:	f00a f9e9 	bl	8012254 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	68da      	ldr	r2, [r3, #12]
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	091b      	lsrs	r3, r3, #4
 8007e8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e8e:	441a      	add	r2, r3
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	695a      	ldr	r2, [r3, #20]
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	091b      	lsrs	r3, r3, #4
 8007e9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ea0:	441a      	add	r2, r3
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	615a      	str	r2, [r3, #20]
 8007ea6:	e016      	b.n	8007ed6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	0c5b      	lsrs	r3, r3, #17
 8007eac:	f003 030f 	and.w	r3, r3, #15
 8007eb0:	2b06      	cmp	r3, #6
 8007eb2:	d110      	bne.n	8007ed6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007eba:	2208      	movs	r2, #8
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	6a38      	ldr	r0, [r7, #32]
 8007ec0:	f00a f9c8 	bl	8012254 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	695a      	ldr	r2, [r3, #20]
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	091b      	lsrs	r3, r3, #4
 8007ecc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ed0:	441a      	add	r2, r3
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	699a      	ldr	r2, [r3, #24]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f042 0210 	orr.w	r2, r2, #16
 8007ee4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f00a fb46 	bl	801257c <USB_ReadInterrupts>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ef6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007efa:	f040 80a7 	bne.w	800804c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007efe:	2300      	movs	r3, #0
 8007f00:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4618      	mov	r0, r3
 8007f08:	f00a fb4b 	bl	80125a2 <USB_ReadDevAllOutEpInterrupt>
 8007f0c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007f0e:	e099      	b.n	8008044 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	f000 808e 	beq.w	8008038 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f22:	b2d2      	uxtb	r2, r2
 8007f24:	4611      	mov	r1, r2
 8007f26:	4618      	mov	r0, r3
 8007f28:	f00a fb6f 	bl	801260a <USB_ReadDevOutEPInterrupt>
 8007f2c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	f003 0301 	and.w	r3, r3, #1
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00c      	beq.n	8007f52 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3a:	015a      	lsls	r2, r3, #5
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	4413      	add	r3, r2
 8007f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f44:	461a      	mov	r2, r3
 8007f46:	2301      	movs	r3, #1
 8007f48:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007f4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 fed1 	bl	8008cf4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	f003 0308 	and.w	r3, r3, #8
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00c      	beq.n	8007f76 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5e:	015a      	lsls	r2, r3, #5
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	4413      	add	r3, r2
 8007f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f68:	461a      	mov	r2, r3
 8007f6a:	2308      	movs	r3, #8
 8007f6c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007f6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 ffa7 	bl	8008ec4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	f003 0310 	and.w	r3, r3, #16
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d008      	beq.n	8007f92 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	2310      	movs	r3, #16
 8007f90:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	f003 0302 	and.w	r3, r3, #2
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d030      	beq.n	8007ffe <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007f9c:	6a3b      	ldr	r3, [r7, #32]
 8007f9e:	695b      	ldr	r3, [r3, #20]
 8007fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fa4:	2b80      	cmp	r3, #128	; 0x80
 8007fa6:	d109      	bne.n	8007fbc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	69fa      	ldr	r2, [r7, #28]
 8007fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007fba:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	00db      	lsls	r3, r3, #3
 8007fc2:	4413      	add	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	4413      	add	r3, r2
 8007fce:	3304      	adds	r3, #4
 8007fd0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	78db      	ldrb	r3, [r3, #3]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d108      	bne.n	8007fec <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f00d f98c 	bl	8015304 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fee:	015a      	lsls	r2, r3, #5
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	2302      	movs	r3, #2
 8007ffc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	f003 0320 	and.w	r3, r3, #32
 8008004:	2b00      	cmp	r3, #0
 8008006:	d008      	beq.n	800801a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	4413      	add	r3, r2
 8008010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008014:	461a      	mov	r2, r3
 8008016:	2320      	movs	r3, #32
 8008018:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008020:	2b00      	cmp	r3, #0
 8008022:	d009      	beq.n	8008038 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008026:	015a      	lsls	r2, r3, #5
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	4413      	add	r3, r2
 800802c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008030:	461a      	mov	r2, r3
 8008032:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008036:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803a:	3301      	adds	r3, #1
 800803c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800803e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008040:	085b      	lsrs	r3, r3, #1
 8008042:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008046:	2b00      	cmp	r3, #0
 8008048:	f47f af62 	bne.w	8007f10 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4618      	mov	r0, r3
 8008052:	f00a fa93 	bl	801257c <USB_ReadInterrupts>
 8008056:	4603      	mov	r3, r0
 8008058:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800805c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008060:	f040 80db 	bne.w	800821a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4618      	mov	r0, r3
 800806a:	f00a fab4 	bl	80125d6 <USB_ReadDevAllInEpInterrupt>
 800806e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008070:	2300      	movs	r3, #0
 8008072:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008074:	e0cd      	b.n	8008212 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008078:	f003 0301 	and.w	r3, r3, #1
 800807c:	2b00      	cmp	r3, #0
 800807e:	f000 80c2 	beq.w	8008206 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008088:	b2d2      	uxtb	r2, r2
 800808a:	4611      	mov	r1, r2
 800808c:	4618      	mov	r0, r3
 800808e:	f00a fada 	bl	8012646 <USB_ReadDevInEPInterrupt>
 8008092:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	f003 0301 	and.w	r3, r3, #1
 800809a:	2b00      	cmp	r3, #0
 800809c:	d057      	beq.n	800814e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a0:	f003 030f 	and.w	r3, r3, #15
 80080a4:	2201      	movs	r2, #1
 80080a6:	fa02 f303 	lsl.w	r3, r2, r3
 80080aa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	43db      	mvns	r3, r3
 80080b8:	69f9      	ldr	r1, [r7, #28]
 80080ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080be:	4013      	ands	r3, r2
 80080c0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80080c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c4:	015a      	lsls	r2, r3, #5
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	4413      	add	r3, r2
 80080ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ce:	461a      	mov	r2, r3
 80080d0:	2301      	movs	r3, #1
 80080d2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d132      	bne.n	8008142 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80080dc:	6879      	ldr	r1, [r7, #4]
 80080de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080e0:	4613      	mov	r3, r2
 80080e2:	00db      	lsls	r3, r3, #3
 80080e4:	4413      	add	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	440b      	add	r3, r1
 80080ea:	3348      	adds	r3, #72	; 0x48
 80080ec:	6819      	ldr	r1, [r3, #0]
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080f2:	4613      	mov	r3, r2
 80080f4:	00db      	lsls	r3, r3, #3
 80080f6:	4413      	add	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4403      	add	r3, r0
 80080fc:	3344      	adds	r3, #68	; 0x44
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4419      	add	r1, r3
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008106:	4613      	mov	r3, r2
 8008108:	00db      	lsls	r3, r3, #3
 800810a:	4413      	add	r3, r2
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	4403      	add	r3, r0
 8008110:	3348      	adds	r3, #72	; 0x48
 8008112:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008116:	2b00      	cmp	r3, #0
 8008118:	d113      	bne.n	8008142 <HAL_PCD_IRQHandler+0x3a2>
 800811a:	6879      	ldr	r1, [r7, #4]
 800811c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800811e:	4613      	mov	r3, r2
 8008120:	00db      	lsls	r3, r3, #3
 8008122:	4413      	add	r3, r2
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	440b      	add	r3, r1
 8008128:	334c      	adds	r3, #76	; 0x4c
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d108      	bne.n	8008142 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6818      	ldr	r0, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800813a:	461a      	mov	r2, r3
 800813c:	2101      	movs	r1, #1
 800813e:	f00a fae3 	bl	8012708 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008144:	b2db      	uxtb	r3, r3
 8008146:	4619      	mov	r1, r3
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f00d f856 	bl	80151fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	f003 0308 	and.w	r3, r3, #8
 8008154:	2b00      	cmp	r3, #0
 8008156:	d008      	beq.n	800816a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815a:	015a      	lsls	r2, r3, #5
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	4413      	add	r3, r2
 8008160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008164:	461a      	mov	r2, r3
 8008166:	2308      	movs	r3, #8
 8008168:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	f003 0310 	and.w	r3, r3, #16
 8008170:	2b00      	cmp	r3, #0
 8008172:	d008      	beq.n	8008186 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008176:	015a      	lsls	r2, r3, #5
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	4413      	add	r3, r2
 800817c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008180:	461a      	mov	r2, r3
 8008182:	2310      	movs	r3, #16
 8008184:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800818c:	2b00      	cmp	r3, #0
 800818e:	d008      	beq.n	80081a2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008192:	015a      	lsls	r2, r3, #5
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	4413      	add	r3, r2
 8008198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800819c:	461a      	mov	r2, r3
 800819e:	2340      	movs	r3, #64	; 0x40
 80081a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	f003 0302 	and.w	r3, r3, #2
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d023      	beq.n	80081f4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80081ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081ae:	6a38      	ldr	r0, [r7, #32]
 80081b0:	f009 fac2 	bl	8011738 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80081b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081b6:	4613      	mov	r3, r2
 80081b8:	00db      	lsls	r3, r3, #3
 80081ba:	4413      	add	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	3338      	adds	r3, #56	; 0x38
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	4413      	add	r3, r2
 80081c4:	3304      	adds	r3, #4
 80081c6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	78db      	ldrb	r3, [r3, #3]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d108      	bne.n	80081e2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	2200      	movs	r2, #0
 80081d4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	4619      	mov	r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f00d f8a3 	bl	8015328 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80081e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e4:	015a      	lsls	r2, r3, #5
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	4413      	add	r3, r2
 80081ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081ee:	461a      	mov	r2, r3
 80081f0:	2302      	movs	r3, #2
 80081f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d003      	beq.n	8008206 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80081fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 fcea 	bl	8008bda <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008208:	3301      	adds	r3, #1
 800820a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800820c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820e:	085b      	lsrs	r3, r3, #1
 8008210:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008214:	2b00      	cmp	r3, #0
 8008216:	f47f af2e 	bne.w	8008076 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4618      	mov	r0, r3
 8008220:	f00a f9ac 	bl	801257c <USB_ReadInterrupts>
 8008224:	4603      	mov	r3, r0
 8008226:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800822a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800822e:	d122      	bne.n	8008276 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	69fa      	ldr	r2, [r7, #28]
 800823a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800823e:	f023 0301 	bic.w	r3, r3, #1
 8008242:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800824a:	2b01      	cmp	r3, #1
 800824c:	d108      	bne.n	8008260 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008256:	2100      	movs	r1, #0
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 fef5 	bl	8009048 <HAL_PCDEx_LPM_Callback>
 800825e:	e002      	b.n	8008266 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f00d f841 	bl	80152e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	695a      	ldr	r2, [r3, #20]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008274:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4618      	mov	r0, r3
 800827c:	f00a f97e 	bl	801257c <USB_ReadInterrupts>
 8008280:	4603      	mov	r3, r0
 8008282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800828a:	d112      	bne.n	80082b2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	f003 0301 	and.w	r3, r3, #1
 8008298:	2b01      	cmp	r3, #1
 800829a:	d102      	bne.n	80082a2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f00c fffd 	bl	801529c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	695a      	ldr	r2, [r3, #20]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80082b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4618      	mov	r0, r3
 80082b8:	f00a f960 	bl	801257c <USB_ReadInterrupts>
 80082bc:	4603      	mov	r3, r0
 80082be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082c6:	d121      	bne.n	800830c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	695a      	ldr	r2, [r3, #20]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80082d6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d111      	bne.n	8008306 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082f0:	089b      	lsrs	r3, r3, #2
 80082f2:	f003 020f 	and.w	r2, r3, #15
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80082fc:	2101      	movs	r1, #1
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 fea2 	bl	8009048 <HAL_PCDEx_LPM_Callback>
 8008304:	e002      	b.n	800830c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f00c ffc8 	bl	801529c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4618      	mov	r0, r3
 8008312:	f00a f933 	bl	801257c <USB_ReadInterrupts>
 8008316:	4603      	mov	r3, r0
 8008318:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800831c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008320:	f040 80b7 	bne.w	8008492 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	69fa      	ldr	r2, [r7, #28]
 800832e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008332:	f023 0301 	bic.w	r3, r3, #1
 8008336:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2110      	movs	r1, #16
 800833e:	4618      	mov	r0, r3
 8008340:	f009 f9fa 	bl	8011738 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008344:	2300      	movs	r3, #0
 8008346:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008348:	e046      	b.n	80083d8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800834a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834c:	015a      	lsls	r2, r3, #5
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	4413      	add	r3, r2
 8008352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008356:	461a      	mov	r2, r3
 8008358:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800835c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800835e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008360:	015a      	lsls	r2, r3, #5
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	4413      	add	r3, r2
 8008366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800836e:	0151      	lsls	r1, r2, #5
 8008370:	69fa      	ldr	r2, [r7, #28]
 8008372:	440a      	add	r2, r1
 8008374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008378:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800837c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800837e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008380:	015a      	lsls	r2, r3, #5
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	4413      	add	r3, r2
 8008386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800838a:	461a      	mov	r2, r3
 800838c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008390:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008394:	015a      	lsls	r2, r3, #5
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	4413      	add	r3, r2
 800839a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083a2:	0151      	lsls	r1, r2, #5
 80083a4:	69fa      	ldr	r2, [r7, #28]
 80083a6:	440a      	add	r2, r1
 80083a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80083b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80083b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b4:	015a      	lsls	r2, r3, #5
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	4413      	add	r3, r2
 80083ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083c2:	0151      	lsls	r1, r2, #5
 80083c4:	69fa      	ldr	r2, [r7, #28]
 80083c6:	440a      	add	r2, r1
 80083c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80083d0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80083d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d4:	3301      	adds	r3, #1
 80083d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083de:	429a      	cmp	r2, r3
 80083e0:	d3b3      	bcc.n	800834a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083e8:	69db      	ldr	r3, [r3, #28]
 80083ea:	69fa      	ldr	r2, [r7, #28]
 80083ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083f0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80083f4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d016      	beq.n	800842c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008408:	69fa      	ldr	r2, [r7, #28]
 800840a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800840e:	f043 030b 	orr.w	r3, r3, #11
 8008412:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800841c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800841e:	69fa      	ldr	r2, [r7, #28]
 8008420:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008424:	f043 030b 	orr.w	r3, r3, #11
 8008428:	6453      	str	r3, [r2, #68]	; 0x44
 800842a:	e015      	b.n	8008458 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008432:	695a      	ldr	r2, [r3, #20]
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800843a:	4619      	mov	r1, r3
 800843c:	f242 032b 	movw	r3, #8235	; 0x202b
 8008440:	4313      	orrs	r3, r2
 8008442:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	69fa      	ldr	r2, [r7, #28]
 800844e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008452:	f043 030b 	orr.w	r3, r3, #11
 8008456:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	69fa      	ldr	r2, [r7, #28]
 8008462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008466:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800846a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6818      	ldr	r0, [r3, #0]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800847c:	461a      	mov	r2, r3
 800847e:	f00a f943 	bl	8012708 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	695a      	ldr	r2, [r3, #20]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008490:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4618      	mov	r0, r3
 8008498:	f00a f870 	bl	801257c <USB_ReadInterrupts>
 800849c:	4603      	mov	r3, r0
 800849e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084a6:	d124      	bne.n	80084f2 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4618      	mov	r0, r3
 80084ae:	f00a f907 	bl	80126c0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4618      	mov	r0, r3
 80084b8:	f009 f9bb 	bl	8011832 <USB_GetDevSpeed>
 80084bc:	4603      	mov	r3, r0
 80084be:	461a      	mov	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681c      	ldr	r4, [r3, #0]
 80084c8:	f001 fd88 	bl	8009fdc <HAL_RCC_GetHCLKFreq>
 80084cc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	461a      	mov	r2, r3
 80084d6:	4620      	mov	r0, r4
 80084d8:	f008 fec0 	bl	801125c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f00c feb4 	bl	801524a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	695a      	ldr	r2, [r3, #20]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80084f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4618      	mov	r0, r3
 80084f8:	f00a f840 	bl	801257c <USB_ReadInterrupts>
 80084fc:	4603      	mov	r3, r0
 80084fe:	f003 0308 	and.w	r3, r3, #8
 8008502:	2b08      	cmp	r3, #8
 8008504:	d10a      	bne.n	800851c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f00c fe91 	bl	801522e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	695a      	ldr	r2, [r3, #20]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f002 0208 	and.w	r2, r2, #8
 800851a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4618      	mov	r0, r3
 8008522:	f00a f82b 	bl	801257c <USB_ReadInterrupts>
 8008526:	4603      	mov	r3, r0
 8008528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800852c:	2b80      	cmp	r3, #128	; 0x80
 800852e:	d122      	bne.n	8008576 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008530:	6a3b      	ldr	r3, [r7, #32]
 8008532:	699b      	ldr	r3, [r3, #24]
 8008534:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008538:	6a3b      	ldr	r3, [r7, #32]
 800853a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800853c:	2301      	movs	r3, #1
 800853e:	627b      	str	r3, [r7, #36]	; 0x24
 8008540:	e014      	b.n	800856c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008542:	6879      	ldr	r1, [r7, #4]
 8008544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008546:	4613      	mov	r3, r2
 8008548:	00db      	lsls	r3, r3, #3
 800854a:	4413      	add	r3, r2
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	440b      	add	r3, r1
 8008550:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	2b01      	cmp	r3, #1
 8008558:	d105      	bne.n	8008566 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855c:	b2db      	uxtb	r3, r3
 800855e:	4619      	mov	r1, r3
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 fb09 	bl	8008b78 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008568:	3301      	adds	r3, #1
 800856a:	627b      	str	r3, [r7, #36]	; 0x24
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008572:	429a      	cmp	r2, r3
 8008574:	d3e5      	bcc.n	8008542 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4618      	mov	r0, r3
 800857c:	f009 fffe 	bl	801257c <USB_ReadInterrupts>
 8008580:	4603      	mov	r3, r0
 8008582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800858a:	d13b      	bne.n	8008604 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800858c:	2301      	movs	r3, #1
 800858e:	627b      	str	r3, [r7, #36]	; 0x24
 8008590:	e02b      	b.n	80085ea <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008594:	015a      	lsls	r2, r3, #5
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	4413      	add	r3, r2
 800859a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80085a2:	6879      	ldr	r1, [r7, #4]
 80085a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085a6:	4613      	mov	r3, r2
 80085a8:	00db      	lsls	r3, r3, #3
 80085aa:	4413      	add	r3, r2
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	440b      	add	r3, r1
 80085b0:	3340      	adds	r3, #64	; 0x40
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d115      	bne.n	80085e4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80085b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	da12      	bge.n	80085e4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80085be:	6879      	ldr	r1, [r7, #4]
 80085c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085c2:	4613      	mov	r3, r2
 80085c4:	00db      	lsls	r3, r3, #3
 80085c6:	4413      	add	r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	440b      	add	r3, r1
 80085cc:	333f      	adds	r3, #63	; 0x3f
 80085ce:	2201      	movs	r2, #1
 80085d0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80085d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	4619      	mov	r1, r3
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 faca 	bl	8008b78 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	3301      	adds	r3, #1
 80085e8:	627b      	str	r3, [r7, #36]	; 0x24
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d3ce      	bcc.n	8008592 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	695a      	ldr	r2, [r3, #20]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008602:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4618      	mov	r0, r3
 800860a:	f009 ffb7 	bl	801257c <USB_ReadInterrupts>
 800860e:	4603      	mov	r3, r0
 8008610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008614:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008618:	d155      	bne.n	80086c6 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800861a:	2301      	movs	r3, #1
 800861c:	627b      	str	r3, [r7, #36]	; 0x24
 800861e:	e045      	b.n	80086ac <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008622:	015a      	lsls	r2, r3, #5
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	4413      	add	r3, r2
 8008628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008630:	6879      	ldr	r1, [r7, #4]
 8008632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008634:	4613      	mov	r3, r2
 8008636:	00db      	lsls	r3, r3, #3
 8008638:	4413      	add	r3, r2
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	440b      	add	r3, r1
 800863e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d12e      	bne.n	80086a6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008648:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800864a:	2b00      	cmp	r3, #0
 800864c:	da2b      	bge.n	80086a6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800865a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800865e:	429a      	cmp	r2, r3
 8008660:	d121      	bne.n	80086a6 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008662:	6879      	ldr	r1, [r7, #4]
 8008664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008666:	4613      	mov	r3, r2
 8008668:	00db      	lsls	r3, r3, #3
 800866a:	4413      	add	r3, r2
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	440b      	add	r3, r1
 8008670:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008674:	2201      	movs	r2, #1
 8008676:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008678:	6a3b      	ldr	r3, [r7, #32]
 800867a:	699b      	ldr	r3, [r3, #24]
 800867c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008680:	6a3b      	ldr	r3, [r7, #32]
 8008682:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008684:	6a3b      	ldr	r3, [r7, #32]
 8008686:	695b      	ldr	r3, [r3, #20]
 8008688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800868c:	2b00      	cmp	r3, #0
 800868e:	d10a      	bne.n	80086a6 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	69fa      	ldr	r2, [r7, #28]
 800869a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800869e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80086a2:	6053      	str	r3, [r2, #4]
            break;
 80086a4:	e007      	b.n	80086b6 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80086a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a8:	3301      	adds	r3, #1
 80086aa:	627b      	str	r3, [r7, #36]	; 0x24
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d3b4      	bcc.n	8008620 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	695a      	ldr	r2, [r3, #20]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80086c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4618      	mov	r0, r3
 80086cc:	f009 ff56 	bl	801257c <USB_ReadInterrupts>
 80086d0:	4603      	mov	r3, r0
 80086d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80086d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086da:	d10a      	bne.n	80086f2 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f00c fe35 	bl	801534c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	695a      	ldr	r2, [r3, #20]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80086f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4618      	mov	r0, r3
 80086f8:	f009 ff40 	bl	801257c <USB_ReadInterrupts>
 80086fc:	4603      	mov	r3, r0
 80086fe:	f003 0304 	and.w	r3, r3, #4
 8008702:	2b04      	cmp	r3, #4
 8008704:	d115      	bne.n	8008732 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	f003 0304 	and.w	r3, r3, #4
 8008714:	2b00      	cmp	r3, #0
 8008716:	d002      	beq.n	800871e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f00c fe25 	bl	8015368 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	6859      	ldr	r1, [r3, #4]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	69ba      	ldr	r2, [r7, #24]
 800872a:	430a      	orrs	r2, r1
 800872c:	605a      	str	r2, [r3, #4]
 800872e:	e000      	b.n	8008732 <HAL_PCD_IRQHandler+0x992>
      return;
 8008730:	bf00      	nop
    }
  }
}
 8008732:	3734      	adds	r7, #52	; 0x34
 8008734:	46bd      	mov	sp, r7
 8008736:	bd90      	pop	{r4, r7, pc}

08008738 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	460b      	mov	r3, r1
 8008742:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800874a:	2b01      	cmp	r3, #1
 800874c:	d101      	bne.n	8008752 <HAL_PCD_SetAddress+0x1a>
 800874e:	2302      	movs	r3, #2
 8008750:	e013      	b.n	800877a <HAL_PCD_SetAddress+0x42>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	78fa      	ldrb	r2, [r7, #3]
 800875e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	78fa      	ldrb	r2, [r7, #3]
 8008768:	4611      	mov	r1, r2
 800876a:	4618      	mov	r0, r3
 800876c:	f009 fe9e 	bl	80124ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008778:	2300      	movs	r3, #0
}
 800877a:	4618      	mov	r0, r3
 800877c:	3708      	adds	r7, #8
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b084      	sub	sp, #16
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
 800878a:	4608      	mov	r0, r1
 800878c:	4611      	mov	r1, r2
 800878e:	461a      	mov	r2, r3
 8008790:	4603      	mov	r3, r0
 8008792:	70fb      	strb	r3, [r7, #3]
 8008794:	460b      	mov	r3, r1
 8008796:	803b      	strh	r3, [r7, #0]
 8008798:	4613      	mov	r3, r2
 800879a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800879c:	2300      	movs	r3, #0
 800879e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80087a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	da0f      	bge.n	80087c8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80087a8:	78fb      	ldrb	r3, [r7, #3]
 80087aa:	f003 020f 	and.w	r2, r3, #15
 80087ae:	4613      	mov	r3, r2
 80087b0:	00db      	lsls	r3, r3, #3
 80087b2:	4413      	add	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	3338      	adds	r3, #56	; 0x38
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	4413      	add	r3, r2
 80087bc:	3304      	adds	r3, #4
 80087be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2201      	movs	r2, #1
 80087c4:	705a      	strb	r2, [r3, #1]
 80087c6:	e00f      	b.n	80087e8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80087c8:	78fb      	ldrb	r3, [r7, #3]
 80087ca:	f003 020f 	and.w	r2, r3, #15
 80087ce:	4613      	mov	r3, r2
 80087d0:	00db      	lsls	r3, r3, #3
 80087d2:	4413      	add	r3, r2
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	4413      	add	r3, r2
 80087de:	3304      	adds	r3, #4
 80087e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80087e8:	78fb      	ldrb	r3, [r7, #3]
 80087ea:	f003 030f 	and.w	r3, r3, #15
 80087ee:	b2da      	uxtb	r2, r3
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80087f4:	883a      	ldrh	r2, [r7, #0]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	78ba      	ldrb	r2, [r7, #2]
 80087fe:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	785b      	ldrb	r3, [r3, #1]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d004      	beq.n	8008812 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	b29a      	uxth	r2, r3
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008812:	78bb      	ldrb	r3, [r7, #2]
 8008814:	2b02      	cmp	r3, #2
 8008816:	d102      	bne.n	800881e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2200      	movs	r2, #0
 800881c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008824:	2b01      	cmp	r3, #1
 8008826:	d101      	bne.n	800882c <HAL_PCD_EP_Open+0xaa>
 8008828:	2302      	movs	r3, #2
 800882a:	e00e      	b.n	800884a <HAL_PCD_EP_Open+0xc8>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	68f9      	ldr	r1, [r7, #12]
 800883a:	4618      	mov	r0, r3
 800883c:	f009 f81e 	bl	801187c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008848:	7afb      	ldrb	r3, [r7, #11]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b084      	sub	sp, #16
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	460b      	mov	r3, r1
 800885c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800885e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008862:	2b00      	cmp	r3, #0
 8008864:	da0f      	bge.n	8008886 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008866:	78fb      	ldrb	r3, [r7, #3]
 8008868:	f003 020f 	and.w	r2, r3, #15
 800886c:	4613      	mov	r3, r2
 800886e:	00db      	lsls	r3, r3, #3
 8008870:	4413      	add	r3, r2
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	3338      	adds	r3, #56	; 0x38
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	4413      	add	r3, r2
 800887a:	3304      	adds	r3, #4
 800887c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2201      	movs	r2, #1
 8008882:	705a      	strb	r2, [r3, #1]
 8008884:	e00f      	b.n	80088a6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008886:	78fb      	ldrb	r3, [r7, #3]
 8008888:	f003 020f 	and.w	r2, r3, #15
 800888c:	4613      	mov	r3, r2
 800888e:	00db      	lsls	r3, r3, #3
 8008890:	4413      	add	r3, r2
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	4413      	add	r3, r2
 800889c:	3304      	adds	r3, #4
 800889e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2200      	movs	r2, #0
 80088a4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80088a6:	78fb      	ldrb	r3, [r7, #3]
 80088a8:	f003 030f 	and.w	r3, r3, #15
 80088ac:	b2da      	uxtb	r2, r3
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d101      	bne.n	80088c0 <HAL_PCD_EP_Close+0x6e>
 80088bc:	2302      	movs	r3, #2
 80088be:	e00e      	b.n	80088de <HAL_PCD_EP_Close+0x8c>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68f9      	ldr	r1, [r7, #12]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f009 f85c 	bl	801198c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b086      	sub	sp, #24
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	60f8      	str	r0, [r7, #12]
 80088ee:	607a      	str	r2, [r7, #4]
 80088f0:	603b      	str	r3, [r7, #0]
 80088f2:	460b      	mov	r3, r1
 80088f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80088f6:	7afb      	ldrb	r3, [r7, #11]
 80088f8:	f003 020f 	and.w	r2, r3, #15
 80088fc:	4613      	mov	r3, r2
 80088fe:	00db      	lsls	r3, r3, #3
 8008900:	4413      	add	r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	4413      	add	r3, r2
 800890c:	3304      	adds	r3, #4
 800890e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	683a      	ldr	r2, [r7, #0]
 800891a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	2200      	movs	r2, #0
 8008920:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	2200      	movs	r2, #0
 8008926:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008928:	7afb      	ldrb	r3, [r7, #11]
 800892a:	f003 030f 	and.w	r3, r3, #15
 800892e:	b2da      	uxtb	r2, r3
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	2b01      	cmp	r3, #1
 800893a:	d102      	bne.n	8008942 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	6818      	ldr	r0, [r3, #0]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	b2db      	uxtb	r3, r3
 800894c:	461a      	mov	r2, r3
 800894e:	6979      	ldr	r1, [r7, #20]
 8008950:	f009 f8f8 	bl	8011b44 <USB_EPStartXfer>

  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3718      	adds	r7, #24
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800895e:	b480      	push	{r7}
 8008960:	b083      	sub	sp, #12
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
 8008966:	460b      	mov	r3, r1
 8008968:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800896a:	78fb      	ldrb	r3, [r7, #3]
 800896c:	f003 020f 	and.w	r2, r3, #15
 8008970:	6879      	ldr	r1, [r7, #4]
 8008972:	4613      	mov	r3, r2
 8008974:	00db      	lsls	r3, r3, #3
 8008976:	4413      	add	r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	440b      	add	r3, r1
 800897c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8008980:	681b      	ldr	r3, [r3, #0]
}
 8008982:	4618      	mov	r0, r3
 8008984:	370c      	adds	r7, #12
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr

0800898e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b086      	sub	sp, #24
 8008992:	af00      	add	r7, sp, #0
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	607a      	str	r2, [r7, #4]
 8008998:	603b      	str	r3, [r7, #0]
 800899a:	460b      	mov	r3, r1
 800899c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800899e:	7afb      	ldrb	r3, [r7, #11]
 80089a0:	f003 020f 	and.w	r2, r3, #15
 80089a4:	4613      	mov	r3, r2
 80089a6:	00db      	lsls	r3, r3, #3
 80089a8:	4413      	add	r3, r2
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	3338      	adds	r3, #56	; 0x38
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	4413      	add	r3, r2
 80089b2:	3304      	adds	r3, #4
 80089b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	683a      	ldr	r2, [r7, #0]
 80089c0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	2200      	movs	r2, #0
 80089c6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	2201      	movs	r2, #1
 80089cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80089ce:	7afb      	ldrb	r3, [r7, #11]
 80089d0:	f003 030f 	and.w	r3, r3, #15
 80089d4:	b2da      	uxtb	r2, r3
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d102      	bne.n	80089e8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6818      	ldr	r0, [r3, #0]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	461a      	mov	r2, r3
 80089f4:	6979      	ldr	r1, [r7, #20]
 80089f6:	f009 f8a5 	bl	8011b44 <USB_EPStartXfer>

  return HAL_OK;
 80089fa:	2300      	movs	r3, #0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3718      	adds	r7, #24
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008a10:	78fb      	ldrb	r3, [r7, #3]
 8008a12:	f003 020f 	and.w	r2, r3, #15
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d901      	bls.n	8008a22 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e050      	b.n	8008ac4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008a22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	da0f      	bge.n	8008a4a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008a2a:	78fb      	ldrb	r3, [r7, #3]
 8008a2c:	f003 020f 	and.w	r2, r3, #15
 8008a30:	4613      	mov	r3, r2
 8008a32:	00db      	lsls	r3, r3, #3
 8008a34:	4413      	add	r3, r2
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	3338      	adds	r3, #56	; 0x38
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	3304      	adds	r3, #4
 8008a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2201      	movs	r2, #1
 8008a46:	705a      	strb	r2, [r3, #1]
 8008a48:	e00d      	b.n	8008a66 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008a4a:	78fa      	ldrb	r2, [r7, #3]
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	00db      	lsls	r3, r3, #3
 8008a50:	4413      	add	r3, r2
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	4413      	add	r3, r2
 8008a5c:	3304      	adds	r3, #4
 8008a5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2200      	movs	r2, #0
 8008a64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008a6c:	78fb      	ldrb	r3, [r7, #3]
 8008a6e:	f003 030f 	and.w	r3, r3, #15
 8008a72:	b2da      	uxtb	r2, r3
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d101      	bne.n	8008a86 <HAL_PCD_EP_SetStall+0x82>
 8008a82:	2302      	movs	r3, #2
 8008a84:	e01e      	b.n	8008ac4 <HAL_PCD_EP_SetStall+0xc0>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2201      	movs	r2, #1
 8008a8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68f9      	ldr	r1, [r7, #12]
 8008a94:	4618      	mov	r0, r3
 8008a96:	f009 fc35 	bl	8012304 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008a9a:	78fb      	ldrb	r3, [r7, #3]
 8008a9c:	f003 030f 	and.w	r3, r3, #15
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d10a      	bne.n	8008aba <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6818      	ldr	r0, [r3, #0]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	68db      	ldr	r3, [r3, #12]
 8008aac:	b2d9      	uxtb	r1, r3
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	f009 fe27 	bl	8012708 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008ad8:	78fb      	ldrb	r3, [r7, #3]
 8008ada:	f003 020f 	and.w	r2, r3, #15
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d901      	bls.n	8008aea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e042      	b.n	8008b70 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008aea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	da0f      	bge.n	8008b12 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008af2:	78fb      	ldrb	r3, [r7, #3]
 8008af4:	f003 020f 	and.w	r2, r3, #15
 8008af8:	4613      	mov	r3, r2
 8008afa:	00db      	lsls	r3, r3, #3
 8008afc:	4413      	add	r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	3338      	adds	r3, #56	; 0x38
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	4413      	add	r3, r2
 8008b06:	3304      	adds	r3, #4
 8008b08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	705a      	strb	r2, [r3, #1]
 8008b10:	e00f      	b.n	8008b32 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b12:	78fb      	ldrb	r3, [r7, #3]
 8008b14:	f003 020f 	and.w	r2, r3, #15
 8008b18:	4613      	mov	r3, r2
 8008b1a:	00db      	lsls	r3, r3, #3
 8008b1c:	4413      	add	r3, r2
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	4413      	add	r3, r2
 8008b28:	3304      	adds	r3, #4
 8008b2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b38:	78fb      	ldrb	r3, [r7, #3]
 8008b3a:	f003 030f 	and.w	r3, r3, #15
 8008b3e:	b2da      	uxtb	r2, r3
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d101      	bne.n	8008b52 <HAL_PCD_EP_ClrStall+0x86>
 8008b4e:	2302      	movs	r3, #2
 8008b50:	e00e      	b.n	8008b70 <HAL_PCD_EP_ClrStall+0xa4>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2201      	movs	r2, #1
 8008b56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	68f9      	ldr	r1, [r7, #12]
 8008b60:	4618      	mov	r0, r3
 8008b62:	f009 fc3d 	bl	80123e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	460b      	mov	r3, r1
 8008b82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008b84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	da0c      	bge.n	8008ba6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b8c:	78fb      	ldrb	r3, [r7, #3]
 8008b8e:	f003 020f 	and.w	r2, r3, #15
 8008b92:	4613      	mov	r3, r2
 8008b94:	00db      	lsls	r3, r3, #3
 8008b96:	4413      	add	r3, r2
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	3338      	adds	r3, #56	; 0x38
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	3304      	adds	r3, #4
 8008ba2:	60fb      	str	r3, [r7, #12]
 8008ba4:	e00c      	b.n	8008bc0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ba6:	78fb      	ldrb	r3, [r7, #3]
 8008ba8:	f003 020f 	and.w	r2, r3, #15
 8008bac:	4613      	mov	r3, r2
 8008bae:	00db      	lsls	r3, r3, #3
 8008bb0:	4413      	add	r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	4413      	add	r3, r2
 8008bbc:	3304      	adds	r3, #4
 8008bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	68f9      	ldr	r1, [r7, #12]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f009 fa5c 	bl	8012084 <USB_EPStopXfer>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008bd0:	7afb      	ldrb	r3, [r7, #11]
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b08a      	sub	sp, #40	; 0x28
 8008bde:	af02      	add	r7, sp, #8
 8008be0:	6078      	str	r0, [r7, #4]
 8008be2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008bee:	683a      	ldr	r2, [r7, #0]
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	00db      	lsls	r3, r3, #3
 8008bf4:	4413      	add	r3, r2
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	3338      	adds	r3, #56	; 0x38
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	3304      	adds	r3, #4
 8008c00:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	695a      	ldr	r2, [r3, #20]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d901      	bls.n	8008c12 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e06c      	b.n	8008cec <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	691a      	ldr	r2, [r3, #16]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	695b      	ldr	r3, [r3, #20]
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	69fa      	ldr	r2, [r7, #28]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d902      	bls.n	8008c2e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	3303      	adds	r3, #3
 8008c32:	089b      	lsrs	r3, r3, #2
 8008c34:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008c36:	e02b      	b.n	8008c90 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	691a      	ldr	r2, [r3, #16]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	695b      	ldr	r3, [r3, #20]
 8008c40:	1ad3      	subs	r3, r2, r3
 8008c42:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	69fa      	ldr	r2, [r7, #28]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d902      	bls.n	8008c54 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	3303      	adds	r3, #3
 8008c58:	089b      	lsrs	r3, r3, #2
 8008c5a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	68d9      	ldr	r1, [r3, #12]
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	b2da      	uxtb	r2, r3
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	9300      	str	r3, [sp, #0]
 8008c70:	4603      	mov	r3, r0
 8008c72:	6978      	ldr	r0, [r7, #20]
 8008c74:	f009 fab0 	bl	80121d8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	68da      	ldr	r2, [r3, #12]
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	441a      	add	r2, r3
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	695a      	ldr	r2, [r3, #20]
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	441a      	add	r2, r3
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	015a      	lsls	r2, r3, #5
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	4413      	add	r3, r2
 8008c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c9c:	699b      	ldr	r3, [r3, #24]
 8008c9e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008ca0:	69ba      	ldr	r2, [r7, #24]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d809      	bhi.n	8008cba <PCD_WriteEmptyTxFifo+0xe0>
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	695a      	ldr	r2, [r3, #20]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d203      	bcs.n	8008cba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d1be      	bne.n	8008c38 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	691a      	ldr	r2, [r3, #16]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	695b      	ldr	r3, [r3, #20]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d811      	bhi.n	8008cea <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	f003 030f 	and.w	r3, r3, #15
 8008ccc:	2201      	movs	r2, #1
 8008cce:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	43db      	mvns	r3, r3
 8008ce0:	6939      	ldr	r1, [r7, #16]
 8008ce2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3720      	adds	r7, #32
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b088      	sub	sp, #32
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	333c      	adds	r3, #60	; 0x3c
 8008d0c:	3304      	adds	r3, #4
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	015a      	lsls	r2, r3, #5
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	4413      	add	r3, r2
 8008d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d17b      	bne.n	8008e22 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	f003 0308 	and.w	r3, r3, #8
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d015      	beq.n	8008d60 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	4a61      	ldr	r2, [pc, #388]	; (8008ebc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	f240 80b9 	bls.w	8008eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f000 80b3 	beq.w	8008eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	015a      	lsls	r2, r3, #5
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	4413      	add	r3, r2
 8008d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d56:	461a      	mov	r2, r3
 8008d58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d5c:	6093      	str	r3, [r2, #8]
 8008d5e:	e0a7      	b.n	8008eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	f003 0320 	and.w	r3, r3, #32
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d009      	beq.n	8008d7e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	015a      	lsls	r2, r3, #5
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	4413      	add	r3, r2
 8008d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d76:	461a      	mov	r2, r3
 8008d78:	2320      	movs	r3, #32
 8008d7a:	6093      	str	r3, [r2, #8]
 8008d7c:	e098      	b.n	8008eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f040 8093 	bne.w	8008eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	4a4b      	ldr	r2, [pc, #300]	; (8008ebc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d90f      	bls.n	8008db2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d00a      	beq.n	8008db2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	015a      	lsls	r2, r3, #5
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	4413      	add	r3, r2
 8008da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da8:	461a      	mov	r2, r3
 8008daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dae:	6093      	str	r3, [r2, #8]
 8008db0:	e07e      	b.n	8008eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008db2:	683a      	ldr	r2, [r7, #0]
 8008db4:	4613      	mov	r3, r2
 8008db6:	00db      	lsls	r3, r3, #3
 8008db8:	4413      	add	r3, r2
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	3304      	adds	r3, #4
 8008dc6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6a1a      	ldr	r2, [r3, #32]
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	0159      	lsls	r1, r3, #5
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	440b      	add	r3, r1
 8008dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd8:	691b      	ldr	r3, [r3, #16]
 8008dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dde:	1ad2      	subs	r2, r2, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d114      	bne.n	8008e14 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d109      	bne.n	8008e06 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6818      	ldr	r0, [r3, #0]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	2101      	movs	r1, #1
 8008e00:	f009 fc82 	bl	8012708 <USB_EP0_OutStart>
 8008e04:	e006      	b.n	8008e14 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	68da      	ldr	r2, [r3, #12]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	695b      	ldr	r3, [r3, #20]
 8008e0e:	441a      	add	r2, r3
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	4619      	mov	r1, r3
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f00c f9d2 	bl	80151c4 <HAL_PCD_DataOutStageCallback>
 8008e20:	e046      	b.n	8008eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	4a26      	ldr	r2, [pc, #152]	; (8008ec0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d124      	bne.n	8008e74 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00a      	beq.n	8008e4a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	015a      	lsls	r2, r3, #5
 8008e38:	69bb      	ldr	r3, [r7, #24]
 8008e3a:	4413      	add	r3, r2
 8008e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e40:	461a      	mov	r2, r3
 8008e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e46:	6093      	str	r3, [r2, #8]
 8008e48:	e032      	b.n	8008eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	f003 0320 	and.w	r3, r3, #32
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d008      	beq.n	8008e66 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	015a      	lsls	r2, r3, #5
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	4413      	add	r3, r2
 8008e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e60:	461a      	mov	r2, r3
 8008e62:	2320      	movs	r3, #32
 8008e64:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f00c f9a9 	bl	80151c4 <HAL_PCD_DataOutStageCallback>
 8008e72:	e01d      	b.n	8008eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d114      	bne.n	8008ea4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008e7a:	6879      	ldr	r1, [r7, #4]
 8008e7c:	683a      	ldr	r2, [r7, #0]
 8008e7e:	4613      	mov	r3, r2
 8008e80:	00db      	lsls	r3, r3, #3
 8008e82:	4413      	add	r3, r2
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	440b      	add	r3, r1
 8008e88:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d108      	bne.n	8008ea4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6818      	ldr	r0, [r3, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	2100      	movs	r1, #0
 8008ea0:	f009 fc32 	bl	8012708 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f00c f98a 	bl	80151c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3720      	adds	r7, #32
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	4f54300a 	.word	0x4f54300a
 8008ec0:	4f54310a 	.word	0x4f54310a

08008ec4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	333c      	adds	r3, #60	; 0x3c
 8008edc:	3304      	adds	r3, #4
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	015a      	lsls	r2, r3, #5
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	4413      	add	r3, r2
 8008eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	4a15      	ldr	r2, [pc, #84]	; (8008f4c <PCD_EP_OutSetupPacket_int+0x88>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d90e      	bls.n	8008f18 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d009      	beq.n	8008f18 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	015a      	lsls	r2, r3, #5
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f10:	461a      	mov	r2, r3
 8008f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f16:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f00c f941 	bl	80151a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	4a0a      	ldr	r2, [pc, #40]	; (8008f4c <PCD_EP_OutSetupPacket_int+0x88>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d90c      	bls.n	8008f40 <PCD_EP_OutSetupPacket_int+0x7c>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d108      	bne.n	8008f40 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6818      	ldr	r0, [r3, #0]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008f38:	461a      	mov	r2, r3
 8008f3a:	2101      	movs	r1, #1
 8008f3c:	f009 fbe4 	bl	8012708 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3718      	adds	r7, #24
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	4f54300a 	.word	0x4f54300a

08008f50 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	460b      	mov	r3, r1
 8008f5a:	70fb      	strb	r3, [r7, #3]
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f66:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008f68:	78fb      	ldrb	r3, [r7, #3]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d107      	bne.n	8008f7e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008f6e:	883b      	ldrh	r3, [r7, #0]
 8008f70:	0419      	lsls	r1, r3, #16
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	68ba      	ldr	r2, [r7, #8]
 8008f78:	430a      	orrs	r2, r1
 8008f7a:	629a      	str	r2, [r3, #40]	; 0x28
 8008f7c:	e028      	b.n	8008fd0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f84:	0c1b      	lsrs	r3, r3, #16
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	4413      	add	r3, r2
 8008f8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	73fb      	strb	r3, [r7, #15]
 8008f90:	e00d      	b.n	8008fae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	7bfb      	ldrb	r3, [r7, #15]
 8008f98:	3340      	adds	r3, #64	; 0x40
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	4413      	add	r3, r2
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	0c1b      	lsrs	r3, r3, #16
 8008fa2:	68ba      	ldr	r2, [r7, #8]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008fa8:	7bfb      	ldrb	r3, [r7, #15]
 8008faa:	3301      	adds	r3, #1
 8008fac:	73fb      	strb	r3, [r7, #15]
 8008fae:	7bfa      	ldrb	r2, [r7, #15]
 8008fb0:	78fb      	ldrb	r3, [r7, #3]
 8008fb2:	3b01      	subs	r3, #1
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d3ec      	bcc.n	8008f92 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008fb8:	883b      	ldrh	r3, [r7, #0]
 8008fba:	0418      	lsls	r0, r3, #16
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6819      	ldr	r1, [r3, #0]
 8008fc0:	78fb      	ldrb	r3, [r7, #3]
 8008fc2:	3b01      	subs	r3, #1
 8008fc4:	68ba      	ldr	r2, [r7, #8]
 8008fc6:	4302      	orrs	r2, r0
 8008fc8:	3340      	adds	r3, #64	; 0x40
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	440b      	add	r3, r1
 8008fce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3714      	adds	r7, #20
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr

08008fde <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008fde:	b480      	push	{r7}
 8008fe0:	b083      	sub	sp, #12
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	887a      	ldrh	r2, [r7, #2]
 8008ff0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	370c      	adds	r7, #12
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009000:	b480      	push	{r7}
 8009002:	b085      	sub	sp, #20
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2201      	movs	r2, #1
 8009012:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	699b      	ldr	r3, [r3, #24]
 8009022:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800902e:	4b05      	ldr	r3, [pc, #20]	; (8009044 <HAL_PCDEx_ActivateLPM+0x44>)
 8009030:	4313      	orrs	r3, r2
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	3714      	adds	r7, #20
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr
 8009044:	10000003 	.word	0x10000003

08009048 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	460b      	mov	r3, r1
 8009052:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009054:	bf00      	nop
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009068:	4b19      	ldr	r3, [pc, #100]	; (80090d0 <HAL_PWREx_ConfigSupply+0x70>)
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	f003 0304 	and.w	r3, r3, #4
 8009070:	2b04      	cmp	r3, #4
 8009072:	d00a      	beq.n	800908a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009074:	4b16      	ldr	r3, [pc, #88]	; (80090d0 <HAL_PWREx_ConfigSupply+0x70>)
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	f003 0307 	and.w	r3, r3, #7
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	429a      	cmp	r2, r3
 8009080:	d001      	beq.n	8009086 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	e01f      	b.n	80090c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009086:	2300      	movs	r3, #0
 8009088:	e01d      	b.n	80090c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800908a:	4b11      	ldr	r3, [pc, #68]	; (80090d0 <HAL_PWREx_ConfigSupply+0x70>)
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	f023 0207 	bic.w	r2, r3, #7
 8009092:	490f      	ldr	r1, [pc, #60]	; (80090d0 <HAL_PWREx_ConfigSupply+0x70>)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	4313      	orrs	r3, r2
 8009098:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800909a:	f7f9 fecb 	bl	8002e34 <HAL_GetTick>
 800909e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80090a0:	e009      	b.n	80090b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80090a2:	f7f9 fec7 	bl	8002e34 <HAL_GetTick>
 80090a6:	4602      	mov	r2, r0
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	1ad3      	subs	r3, r2, r3
 80090ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090b0:	d901      	bls.n	80090b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	e007      	b.n	80090c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80090b6:	4b06      	ldr	r3, [pc, #24]	; (80090d0 <HAL_PWREx_ConfigSupply+0x70>)
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090c2:	d1ee      	bne.n	80090a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	58024800 	.word	0x58024800

080090d4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80090d4:	b480      	push	{r7}
 80090d6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80090d8:	4b05      	ldr	r3, [pc, #20]	; (80090f0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	4a04      	ldr	r2, [pc, #16]	; (80090f0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80090de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80090e2:	60d3      	str	r3, [r2, #12]
}
 80090e4:	bf00      	nop
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop
 80090f0:	58024800 	.word	0x58024800

080090f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b08c      	sub	sp, #48	; 0x30
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d101      	bne.n	8009106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	e3c8      	b.n	8009898 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f003 0301 	and.w	r3, r3, #1
 800910e:	2b00      	cmp	r3, #0
 8009110:	f000 8087 	beq.w	8009222 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009114:	4b88      	ldr	r3, [pc, #544]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 8009116:	691b      	ldr	r3, [r3, #16]
 8009118:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800911c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800911e:	4b86      	ldr	r3, [pc, #536]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 8009120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009122:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009126:	2b10      	cmp	r3, #16
 8009128:	d007      	beq.n	800913a <HAL_RCC_OscConfig+0x46>
 800912a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912c:	2b18      	cmp	r3, #24
 800912e:	d110      	bne.n	8009152 <HAL_RCC_OscConfig+0x5e>
 8009130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009132:	f003 0303 	and.w	r3, r3, #3
 8009136:	2b02      	cmp	r3, #2
 8009138:	d10b      	bne.n	8009152 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800913a:	4b7f      	ldr	r3, [pc, #508]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009142:	2b00      	cmp	r3, #0
 8009144:	d06c      	beq.n	8009220 <HAL_RCC_OscConfig+0x12c>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d168      	bne.n	8009220 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	e3a2      	b.n	8009898 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800915a:	d106      	bne.n	800916a <HAL_RCC_OscConfig+0x76>
 800915c:	4b76      	ldr	r3, [pc, #472]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a75      	ldr	r2, [pc, #468]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 8009162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009166:	6013      	str	r3, [r2, #0]
 8009168:	e02e      	b.n	80091c8 <HAL_RCC_OscConfig+0xd4>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d10c      	bne.n	800918c <HAL_RCC_OscConfig+0x98>
 8009172:	4b71      	ldr	r3, [pc, #452]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a70      	ldr	r2, [pc, #448]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 8009178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800917c:	6013      	str	r3, [r2, #0]
 800917e:	4b6e      	ldr	r3, [pc, #440]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a6d      	ldr	r2, [pc, #436]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 8009184:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009188:	6013      	str	r3, [r2, #0]
 800918a:	e01d      	b.n	80091c8 <HAL_RCC_OscConfig+0xd4>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009194:	d10c      	bne.n	80091b0 <HAL_RCC_OscConfig+0xbc>
 8009196:	4b68      	ldr	r3, [pc, #416]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a67      	ldr	r2, [pc, #412]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 800919c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80091a0:	6013      	str	r3, [r2, #0]
 80091a2:	4b65      	ldr	r3, [pc, #404]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a64      	ldr	r2, [pc, #400]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 80091a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091ac:	6013      	str	r3, [r2, #0]
 80091ae:	e00b      	b.n	80091c8 <HAL_RCC_OscConfig+0xd4>
 80091b0:	4b61      	ldr	r3, [pc, #388]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a60      	ldr	r2, [pc, #384]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 80091b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091ba:	6013      	str	r3, [r2, #0]
 80091bc:	4b5e      	ldr	r3, [pc, #376]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a5d      	ldr	r2, [pc, #372]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 80091c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80091c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d013      	beq.n	80091f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091d0:	f7f9 fe30 	bl	8002e34 <HAL_GetTick>
 80091d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80091d6:	e008      	b.n	80091ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80091d8:	f7f9 fe2c 	bl	8002e34 <HAL_GetTick>
 80091dc:	4602      	mov	r2, r0
 80091de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	2b64      	cmp	r3, #100	; 0x64
 80091e4:	d901      	bls.n	80091ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80091e6:	2303      	movs	r3, #3
 80091e8:	e356      	b.n	8009898 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80091ea:	4b53      	ldr	r3, [pc, #332]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d0f0      	beq.n	80091d8 <HAL_RCC_OscConfig+0xe4>
 80091f6:	e014      	b.n	8009222 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091f8:	f7f9 fe1c 	bl	8002e34 <HAL_GetTick>
 80091fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80091fe:	e008      	b.n	8009212 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009200:	f7f9 fe18 	bl	8002e34 <HAL_GetTick>
 8009204:	4602      	mov	r2, r0
 8009206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009208:	1ad3      	subs	r3, r2, r3
 800920a:	2b64      	cmp	r3, #100	; 0x64
 800920c:	d901      	bls.n	8009212 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800920e:	2303      	movs	r3, #3
 8009210:	e342      	b.n	8009898 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009212:	4b49      	ldr	r3, [pc, #292]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1f0      	bne.n	8009200 <HAL_RCC_OscConfig+0x10c>
 800921e:	e000      	b.n	8009222 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 0302 	and.w	r3, r3, #2
 800922a:	2b00      	cmp	r3, #0
 800922c:	f000 808c 	beq.w	8009348 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009230:	4b41      	ldr	r3, [pc, #260]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009238:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800923a:	4b3f      	ldr	r3, [pc, #252]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 800923c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009240:	6a3b      	ldr	r3, [r7, #32]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d007      	beq.n	8009256 <HAL_RCC_OscConfig+0x162>
 8009246:	6a3b      	ldr	r3, [r7, #32]
 8009248:	2b18      	cmp	r3, #24
 800924a:	d137      	bne.n	80092bc <HAL_RCC_OscConfig+0x1c8>
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	f003 0303 	and.w	r3, r3, #3
 8009252:	2b00      	cmp	r3, #0
 8009254:	d132      	bne.n	80092bc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009256:	4b38      	ldr	r3, [pc, #224]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f003 0304 	and.w	r3, r3, #4
 800925e:	2b00      	cmp	r3, #0
 8009260:	d005      	beq.n	800926e <HAL_RCC_OscConfig+0x17a>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d101      	bne.n	800926e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800926a:	2301      	movs	r3, #1
 800926c:	e314      	b.n	8009898 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800926e:	4b32      	ldr	r3, [pc, #200]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f023 0219 	bic.w	r2, r3, #25
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	68db      	ldr	r3, [r3, #12]
 800927a:	492f      	ldr	r1, [pc, #188]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 800927c:	4313      	orrs	r3, r2
 800927e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009280:	f7f9 fdd8 	bl	8002e34 <HAL_GetTick>
 8009284:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009286:	e008      	b.n	800929a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009288:	f7f9 fdd4 	bl	8002e34 <HAL_GetTick>
 800928c:	4602      	mov	r2, r0
 800928e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009290:	1ad3      	subs	r3, r2, r3
 8009292:	2b02      	cmp	r3, #2
 8009294:	d901      	bls.n	800929a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009296:	2303      	movs	r3, #3
 8009298:	e2fe      	b.n	8009898 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800929a:	4b27      	ldr	r3, [pc, #156]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f003 0304 	and.w	r3, r3, #4
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d0f0      	beq.n	8009288 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092a6:	4b24      	ldr	r3, [pc, #144]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	061b      	lsls	r3, r3, #24
 80092b4:	4920      	ldr	r1, [pc, #128]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 80092b6:	4313      	orrs	r3, r2
 80092b8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80092ba:	e045      	b.n	8009348 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d026      	beq.n	8009312 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80092c4:	4b1c      	ldr	r3, [pc, #112]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f023 0219 	bic.w	r2, r3, #25
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	4919      	ldr	r1, [pc, #100]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 80092d2:	4313      	orrs	r3, r2
 80092d4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092d6:	f7f9 fdad 	bl	8002e34 <HAL_GetTick>
 80092da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80092dc:	e008      	b.n	80092f0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80092de:	f7f9 fda9 	bl	8002e34 <HAL_GetTick>
 80092e2:	4602      	mov	r2, r0
 80092e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e6:	1ad3      	subs	r3, r2, r3
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	d901      	bls.n	80092f0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80092ec:	2303      	movs	r3, #3
 80092ee:	e2d3      	b.n	8009898 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80092f0:	4b11      	ldr	r3, [pc, #68]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 0304 	and.w	r3, r3, #4
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d0f0      	beq.n	80092de <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092fc:	4b0e      	ldr	r3, [pc, #56]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	691b      	ldr	r3, [r3, #16]
 8009308:	061b      	lsls	r3, r3, #24
 800930a:	490b      	ldr	r1, [pc, #44]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 800930c:	4313      	orrs	r3, r2
 800930e:	604b      	str	r3, [r1, #4]
 8009310:	e01a      	b.n	8009348 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009312:	4b09      	ldr	r3, [pc, #36]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a08      	ldr	r2, [pc, #32]	; (8009338 <HAL_RCC_OscConfig+0x244>)
 8009318:	f023 0301 	bic.w	r3, r3, #1
 800931c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800931e:	f7f9 fd89 	bl	8002e34 <HAL_GetTick>
 8009322:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009324:	e00a      	b.n	800933c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009326:	f7f9 fd85 	bl	8002e34 <HAL_GetTick>
 800932a:	4602      	mov	r2, r0
 800932c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932e:	1ad3      	subs	r3, r2, r3
 8009330:	2b02      	cmp	r3, #2
 8009332:	d903      	bls.n	800933c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009334:	2303      	movs	r3, #3
 8009336:	e2af      	b.n	8009898 <HAL_RCC_OscConfig+0x7a4>
 8009338:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800933c:	4b96      	ldr	r3, [pc, #600]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f003 0304 	and.w	r3, r3, #4
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1ee      	bne.n	8009326 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f003 0310 	and.w	r3, r3, #16
 8009350:	2b00      	cmp	r3, #0
 8009352:	d06a      	beq.n	800942a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009354:	4b90      	ldr	r3, [pc, #576]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800935c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800935e:	4b8e      	ldr	r3, [pc, #568]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 8009360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009362:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	2b08      	cmp	r3, #8
 8009368:	d007      	beq.n	800937a <HAL_RCC_OscConfig+0x286>
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	2b18      	cmp	r3, #24
 800936e:	d11b      	bne.n	80093a8 <HAL_RCC_OscConfig+0x2b4>
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	f003 0303 	and.w	r3, r3, #3
 8009376:	2b01      	cmp	r3, #1
 8009378:	d116      	bne.n	80093a8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800937a:	4b87      	ldr	r3, [pc, #540]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009382:	2b00      	cmp	r3, #0
 8009384:	d005      	beq.n	8009392 <HAL_RCC_OscConfig+0x29e>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	69db      	ldr	r3, [r3, #28]
 800938a:	2b80      	cmp	r3, #128	; 0x80
 800938c:	d001      	beq.n	8009392 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	e282      	b.n	8009898 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009392:	4b81      	ldr	r3, [pc, #516]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a1b      	ldr	r3, [r3, #32]
 800939e:	061b      	lsls	r3, r3, #24
 80093a0:	497d      	ldr	r1, [pc, #500]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 80093a2:	4313      	orrs	r3, r2
 80093a4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80093a6:	e040      	b.n	800942a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	69db      	ldr	r3, [r3, #28]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d023      	beq.n	80093f8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80093b0:	4b79      	ldr	r3, [pc, #484]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a78      	ldr	r2, [pc, #480]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 80093b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093bc:	f7f9 fd3a 	bl	8002e34 <HAL_GetTick>
 80093c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80093c2:	e008      	b.n	80093d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80093c4:	f7f9 fd36 	bl	8002e34 <HAL_GetTick>
 80093c8:	4602      	mov	r2, r0
 80093ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093cc:	1ad3      	subs	r3, r2, r3
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d901      	bls.n	80093d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80093d2:	2303      	movs	r3, #3
 80093d4:	e260      	b.n	8009898 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80093d6:	4b70      	ldr	r3, [pc, #448]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d0f0      	beq.n	80093c4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80093e2:	4b6d      	ldr	r3, [pc, #436]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6a1b      	ldr	r3, [r3, #32]
 80093ee:	061b      	lsls	r3, r3, #24
 80093f0:	4969      	ldr	r1, [pc, #420]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 80093f2:	4313      	orrs	r3, r2
 80093f4:	60cb      	str	r3, [r1, #12]
 80093f6:	e018      	b.n	800942a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80093f8:	4b67      	ldr	r3, [pc, #412]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a66      	ldr	r2, [pc, #408]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 80093fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009404:	f7f9 fd16 	bl	8002e34 <HAL_GetTick>
 8009408:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800940a:	e008      	b.n	800941e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800940c:	f7f9 fd12 	bl	8002e34 <HAL_GetTick>
 8009410:	4602      	mov	r2, r0
 8009412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009414:	1ad3      	subs	r3, r2, r3
 8009416:	2b02      	cmp	r3, #2
 8009418:	d901      	bls.n	800941e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800941a:	2303      	movs	r3, #3
 800941c:	e23c      	b.n	8009898 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800941e:	4b5e      	ldr	r3, [pc, #376]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1f0      	bne.n	800940c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f003 0308 	and.w	r3, r3, #8
 8009432:	2b00      	cmp	r3, #0
 8009434:	d036      	beq.n	80094a4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	695b      	ldr	r3, [r3, #20]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d019      	beq.n	8009472 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800943e:	4b56      	ldr	r3, [pc, #344]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 8009440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009442:	4a55      	ldr	r2, [pc, #340]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 8009444:	f043 0301 	orr.w	r3, r3, #1
 8009448:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800944a:	f7f9 fcf3 	bl	8002e34 <HAL_GetTick>
 800944e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009450:	e008      	b.n	8009464 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009452:	f7f9 fcef 	bl	8002e34 <HAL_GetTick>
 8009456:	4602      	mov	r2, r0
 8009458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945a:	1ad3      	subs	r3, r2, r3
 800945c:	2b02      	cmp	r3, #2
 800945e:	d901      	bls.n	8009464 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009460:	2303      	movs	r3, #3
 8009462:	e219      	b.n	8009898 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009464:	4b4c      	ldr	r3, [pc, #304]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 8009466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009468:	f003 0302 	and.w	r3, r3, #2
 800946c:	2b00      	cmp	r3, #0
 800946e:	d0f0      	beq.n	8009452 <HAL_RCC_OscConfig+0x35e>
 8009470:	e018      	b.n	80094a4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009472:	4b49      	ldr	r3, [pc, #292]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 8009474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009476:	4a48      	ldr	r2, [pc, #288]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 8009478:	f023 0301 	bic.w	r3, r3, #1
 800947c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800947e:	f7f9 fcd9 	bl	8002e34 <HAL_GetTick>
 8009482:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009484:	e008      	b.n	8009498 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009486:	f7f9 fcd5 	bl	8002e34 <HAL_GetTick>
 800948a:	4602      	mov	r2, r0
 800948c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948e:	1ad3      	subs	r3, r2, r3
 8009490:	2b02      	cmp	r3, #2
 8009492:	d901      	bls.n	8009498 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009494:	2303      	movs	r3, #3
 8009496:	e1ff      	b.n	8009898 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009498:	4b3f      	ldr	r3, [pc, #252]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 800949a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800949c:	f003 0302 	and.w	r3, r3, #2
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d1f0      	bne.n	8009486 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f003 0320 	and.w	r3, r3, #32
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d036      	beq.n	800951e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	699b      	ldr	r3, [r3, #24]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d019      	beq.n	80094ec <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80094b8:	4b37      	ldr	r3, [pc, #220]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a36      	ldr	r2, [pc, #216]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 80094be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80094c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80094c4:	f7f9 fcb6 	bl	8002e34 <HAL_GetTick>
 80094c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80094ca:	e008      	b.n	80094de <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80094cc:	f7f9 fcb2 	bl	8002e34 <HAL_GetTick>
 80094d0:	4602      	mov	r2, r0
 80094d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d4:	1ad3      	subs	r3, r2, r3
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d901      	bls.n	80094de <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80094da:	2303      	movs	r3, #3
 80094dc:	e1dc      	b.n	8009898 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80094de:	4b2e      	ldr	r3, [pc, #184]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d0f0      	beq.n	80094cc <HAL_RCC_OscConfig+0x3d8>
 80094ea:	e018      	b.n	800951e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80094ec:	4b2a      	ldr	r3, [pc, #168]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a29      	ldr	r2, [pc, #164]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 80094f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094f6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80094f8:	f7f9 fc9c 	bl	8002e34 <HAL_GetTick>
 80094fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80094fe:	e008      	b.n	8009512 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009500:	f7f9 fc98 	bl	8002e34 <HAL_GetTick>
 8009504:	4602      	mov	r2, r0
 8009506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009508:	1ad3      	subs	r3, r2, r3
 800950a:	2b02      	cmp	r3, #2
 800950c:	d901      	bls.n	8009512 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800950e:	2303      	movs	r3, #3
 8009510:	e1c2      	b.n	8009898 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009512:	4b21      	ldr	r3, [pc, #132]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1f0      	bne.n	8009500 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f003 0304 	and.w	r3, r3, #4
 8009526:	2b00      	cmp	r3, #0
 8009528:	f000 8086 	beq.w	8009638 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800952c:	4b1b      	ldr	r3, [pc, #108]	; (800959c <HAL_RCC_OscConfig+0x4a8>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a1a      	ldr	r2, [pc, #104]	; (800959c <HAL_RCC_OscConfig+0x4a8>)
 8009532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009536:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009538:	f7f9 fc7c 	bl	8002e34 <HAL_GetTick>
 800953c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800953e:	e008      	b.n	8009552 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009540:	f7f9 fc78 	bl	8002e34 <HAL_GetTick>
 8009544:	4602      	mov	r2, r0
 8009546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009548:	1ad3      	subs	r3, r2, r3
 800954a:	2b64      	cmp	r3, #100	; 0x64
 800954c:	d901      	bls.n	8009552 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800954e:	2303      	movs	r3, #3
 8009550:	e1a2      	b.n	8009898 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009552:	4b12      	ldr	r3, [pc, #72]	; (800959c <HAL_RCC_OscConfig+0x4a8>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800955a:	2b00      	cmp	r3, #0
 800955c:	d0f0      	beq.n	8009540 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	2b01      	cmp	r3, #1
 8009564:	d106      	bne.n	8009574 <HAL_RCC_OscConfig+0x480>
 8009566:	4b0c      	ldr	r3, [pc, #48]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 8009568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800956a:	4a0b      	ldr	r2, [pc, #44]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 800956c:	f043 0301 	orr.w	r3, r3, #1
 8009570:	6713      	str	r3, [r2, #112]	; 0x70
 8009572:	e032      	b.n	80095da <HAL_RCC_OscConfig+0x4e6>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d111      	bne.n	80095a0 <HAL_RCC_OscConfig+0x4ac>
 800957c:	4b06      	ldr	r3, [pc, #24]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 800957e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009580:	4a05      	ldr	r2, [pc, #20]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 8009582:	f023 0301 	bic.w	r3, r3, #1
 8009586:	6713      	str	r3, [r2, #112]	; 0x70
 8009588:	4b03      	ldr	r3, [pc, #12]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 800958a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800958c:	4a02      	ldr	r2, [pc, #8]	; (8009598 <HAL_RCC_OscConfig+0x4a4>)
 800958e:	f023 0304 	bic.w	r3, r3, #4
 8009592:	6713      	str	r3, [r2, #112]	; 0x70
 8009594:	e021      	b.n	80095da <HAL_RCC_OscConfig+0x4e6>
 8009596:	bf00      	nop
 8009598:	58024400 	.word	0x58024400
 800959c:	58024800 	.word	0x58024800
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	2b05      	cmp	r3, #5
 80095a6:	d10c      	bne.n	80095c2 <HAL_RCC_OscConfig+0x4ce>
 80095a8:	4b83      	ldr	r3, [pc, #524]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 80095aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ac:	4a82      	ldr	r2, [pc, #520]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 80095ae:	f043 0304 	orr.w	r3, r3, #4
 80095b2:	6713      	str	r3, [r2, #112]	; 0x70
 80095b4:	4b80      	ldr	r3, [pc, #512]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 80095b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095b8:	4a7f      	ldr	r2, [pc, #508]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 80095ba:	f043 0301 	orr.w	r3, r3, #1
 80095be:	6713      	str	r3, [r2, #112]	; 0x70
 80095c0:	e00b      	b.n	80095da <HAL_RCC_OscConfig+0x4e6>
 80095c2:	4b7d      	ldr	r3, [pc, #500]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 80095c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095c6:	4a7c      	ldr	r2, [pc, #496]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 80095c8:	f023 0301 	bic.w	r3, r3, #1
 80095cc:	6713      	str	r3, [r2, #112]	; 0x70
 80095ce:	4b7a      	ldr	r3, [pc, #488]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 80095d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095d2:	4a79      	ldr	r2, [pc, #484]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 80095d4:	f023 0304 	bic.w	r3, r3, #4
 80095d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d015      	beq.n	800960e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095e2:	f7f9 fc27 	bl	8002e34 <HAL_GetTick>
 80095e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80095e8:	e00a      	b.n	8009600 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095ea:	f7f9 fc23 	bl	8002e34 <HAL_GetTick>
 80095ee:	4602      	mov	r2, r0
 80095f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f2:	1ad3      	subs	r3, r2, r3
 80095f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d901      	bls.n	8009600 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80095fc:	2303      	movs	r3, #3
 80095fe:	e14b      	b.n	8009898 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009600:	4b6d      	ldr	r3, [pc, #436]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 8009602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009604:	f003 0302 	and.w	r3, r3, #2
 8009608:	2b00      	cmp	r3, #0
 800960a:	d0ee      	beq.n	80095ea <HAL_RCC_OscConfig+0x4f6>
 800960c:	e014      	b.n	8009638 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800960e:	f7f9 fc11 	bl	8002e34 <HAL_GetTick>
 8009612:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009614:	e00a      	b.n	800962c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009616:	f7f9 fc0d 	bl	8002e34 <HAL_GetTick>
 800961a:	4602      	mov	r2, r0
 800961c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961e:	1ad3      	subs	r3, r2, r3
 8009620:	f241 3288 	movw	r2, #5000	; 0x1388
 8009624:	4293      	cmp	r3, r2
 8009626:	d901      	bls.n	800962c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009628:	2303      	movs	r3, #3
 800962a:	e135      	b.n	8009898 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800962c:	4b62      	ldr	r3, [pc, #392]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 800962e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009630:	f003 0302 	and.w	r3, r3, #2
 8009634:	2b00      	cmp	r3, #0
 8009636:	d1ee      	bne.n	8009616 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800963c:	2b00      	cmp	r3, #0
 800963e:	f000 812a 	beq.w	8009896 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009642:	4b5d      	ldr	r3, [pc, #372]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 8009644:	691b      	ldr	r3, [r3, #16]
 8009646:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800964a:	2b18      	cmp	r3, #24
 800964c:	f000 80ba 	beq.w	80097c4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009654:	2b02      	cmp	r3, #2
 8009656:	f040 8095 	bne.w	8009784 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800965a:	4b57      	ldr	r3, [pc, #348]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a56      	ldr	r2, [pc, #344]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 8009660:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009666:	f7f9 fbe5 	bl	8002e34 <HAL_GetTick>
 800966a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800966c:	e008      	b.n	8009680 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800966e:	f7f9 fbe1 	bl	8002e34 <HAL_GetTick>
 8009672:	4602      	mov	r2, r0
 8009674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009676:	1ad3      	subs	r3, r2, r3
 8009678:	2b02      	cmp	r3, #2
 800967a:	d901      	bls.n	8009680 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800967c:	2303      	movs	r3, #3
 800967e:	e10b      	b.n	8009898 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009680:	4b4d      	ldr	r3, [pc, #308]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009688:	2b00      	cmp	r3, #0
 800968a:	d1f0      	bne.n	800966e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800968c:	4b4a      	ldr	r3, [pc, #296]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 800968e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009690:	4b4a      	ldr	r3, [pc, #296]	; (80097bc <HAL_RCC_OscConfig+0x6c8>)
 8009692:	4013      	ands	r3, r2
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800969c:	0112      	lsls	r2, r2, #4
 800969e:	430a      	orrs	r2, r1
 80096a0:	4945      	ldr	r1, [pc, #276]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 80096a2:	4313      	orrs	r3, r2
 80096a4:	628b      	str	r3, [r1, #40]	; 0x28
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096aa:	3b01      	subs	r3, #1
 80096ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b4:	3b01      	subs	r3, #1
 80096b6:	025b      	lsls	r3, r3, #9
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	431a      	orrs	r2, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c0:	3b01      	subs	r3, #1
 80096c2:	041b      	lsls	r3, r3, #16
 80096c4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80096c8:	431a      	orrs	r2, r3
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ce:	3b01      	subs	r3, #1
 80096d0:	061b      	lsls	r3, r3, #24
 80096d2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80096d6:	4938      	ldr	r1, [pc, #224]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 80096d8:	4313      	orrs	r3, r2
 80096da:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80096dc:	4b36      	ldr	r3, [pc, #216]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 80096de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e0:	4a35      	ldr	r2, [pc, #212]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 80096e2:	f023 0301 	bic.w	r3, r3, #1
 80096e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80096e8:	4b33      	ldr	r3, [pc, #204]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 80096ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096ec:	4b34      	ldr	r3, [pc, #208]	; (80097c0 <HAL_RCC_OscConfig+0x6cc>)
 80096ee:	4013      	ands	r3, r2
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80096f4:	00d2      	lsls	r2, r2, #3
 80096f6:	4930      	ldr	r1, [pc, #192]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 80096f8:	4313      	orrs	r3, r2
 80096fa:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80096fc:	4b2e      	ldr	r3, [pc, #184]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 80096fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009700:	f023 020c 	bic.w	r2, r3, #12
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009708:	492b      	ldr	r1, [pc, #172]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 800970a:	4313      	orrs	r3, r2
 800970c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800970e:	4b2a      	ldr	r3, [pc, #168]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 8009710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009712:	f023 0202 	bic.w	r2, r3, #2
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800971a:	4927      	ldr	r1, [pc, #156]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 800971c:	4313      	orrs	r3, r2
 800971e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009720:	4b25      	ldr	r3, [pc, #148]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 8009722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009724:	4a24      	ldr	r2, [pc, #144]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 8009726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800972a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800972c:	4b22      	ldr	r3, [pc, #136]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 800972e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009730:	4a21      	ldr	r2, [pc, #132]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 8009732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009736:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009738:	4b1f      	ldr	r3, [pc, #124]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 800973a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800973c:	4a1e      	ldr	r2, [pc, #120]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 800973e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009742:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009744:	4b1c      	ldr	r3, [pc, #112]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 8009746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009748:	4a1b      	ldr	r2, [pc, #108]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 800974a:	f043 0301 	orr.w	r3, r3, #1
 800974e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009750:	4b19      	ldr	r3, [pc, #100]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a18      	ldr	r2, [pc, #96]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 8009756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800975a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800975c:	f7f9 fb6a 	bl	8002e34 <HAL_GetTick>
 8009760:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009762:	e008      	b.n	8009776 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009764:	f7f9 fb66 	bl	8002e34 <HAL_GetTick>
 8009768:	4602      	mov	r2, r0
 800976a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976c:	1ad3      	subs	r3, r2, r3
 800976e:	2b02      	cmp	r3, #2
 8009770:	d901      	bls.n	8009776 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009772:	2303      	movs	r3, #3
 8009774:	e090      	b.n	8009898 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009776:	4b10      	ldr	r3, [pc, #64]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800977e:	2b00      	cmp	r3, #0
 8009780:	d0f0      	beq.n	8009764 <HAL_RCC_OscConfig+0x670>
 8009782:	e088      	b.n	8009896 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009784:	4b0c      	ldr	r3, [pc, #48]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a0b      	ldr	r2, [pc, #44]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 800978a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800978e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009790:	f7f9 fb50 	bl	8002e34 <HAL_GetTick>
 8009794:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009796:	e008      	b.n	80097aa <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009798:	f7f9 fb4c 	bl	8002e34 <HAL_GetTick>
 800979c:	4602      	mov	r2, r0
 800979e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a0:	1ad3      	subs	r3, r2, r3
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	d901      	bls.n	80097aa <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80097a6:	2303      	movs	r3, #3
 80097a8:	e076      	b.n	8009898 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80097aa:	4b03      	ldr	r3, [pc, #12]	; (80097b8 <HAL_RCC_OscConfig+0x6c4>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1f0      	bne.n	8009798 <HAL_RCC_OscConfig+0x6a4>
 80097b6:	e06e      	b.n	8009896 <HAL_RCC_OscConfig+0x7a2>
 80097b8:	58024400 	.word	0x58024400
 80097bc:	fffffc0c 	.word	0xfffffc0c
 80097c0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80097c4:	4b36      	ldr	r3, [pc, #216]	; (80098a0 <HAL_RCC_OscConfig+0x7ac>)
 80097c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80097ca:	4b35      	ldr	r3, [pc, #212]	; (80098a0 <HAL_RCC_OscConfig+0x7ac>)
 80097cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ce:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d031      	beq.n	800983c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	f003 0203 	and.w	r2, r3, #3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d12a      	bne.n	800983c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	091b      	lsrs	r3, r3, #4
 80097ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d122      	bne.n	800983c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009800:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009802:	429a      	cmp	r2, r3
 8009804:	d11a      	bne.n	800983c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	0a5b      	lsrs	r3, r3, #9
 800980a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009812:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009814:	429a      	cmp	r2, r3
 8009816:	d111      	bne.n	800983c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	0c1b      	lsrs	r3, r3, #16
 800981c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009824:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009826:	429a      	cmp	r2, r3
 8009828:	d108      	bne.n	800983c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	0e1b      	lsrs	r3, r3, #24
 800982e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009836:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009838:	429a      	cmp	r2, r3
 800983a:	d001      	beq.n	8009840 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	e02b      	b.n	8009898 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009840:	4b17      	ldr	r3, [pc, #92]	; (80098a0 <HAL_RCC_OscConfig+0x7ac>)
 8009842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009844:	08db      	lsrs	r3, r3, #3
 8009846:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800984a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009850:	693a      	ldr	r2, [r7, #16]
 8009852:	429a      	cmp	r2, r3
 8009854:	d01f      	beq.n	8009896 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009856:	4b12      	ldr	r3, [pc, #72]	; (80098a0 <HAL_RCC_OscConfig+0x7ac>)
 8009858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985a:	4a11      	ldr	r2, [pc, #68]	; (80098a0 <HAL_RCC_OscConfig+0x7ac>)
 800985c:	f023 0301 	bic.w	r3, r3, #1
 8009860:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009862:	f7f9 fae7 	bl	8002e34 <HAL_GetTick>
 8009866:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009868:	bf00      	nop
 800986a:	f7f9 fae3 	bl	8002e34 <HAL_GetTick>
 800986e:	4602      	mov	r2, r0
 8009870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009872:	4293      	cmp	r3, r2
 8009874:	d0f9      	beq.n	800986a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009876:	4b0a      	ldr	r3, [pc, #40]	; (80098a0 <HAL_RCC_OscConfig+0x7ac>)
 8009878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800987a:	4b0a      	ldr	r3, [pc, #40]	; (80098a4 <HAL_RCC_OscConfig+0x7b0>)
 800987c:	4013      	ands	r3, r2
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009882:	00d2      	lsls	r2, r2, #3
 8009884:	4906      	ldr	r1, [pc, #24]	; (80098a0 <HAL_RCC_OscConfig+0x7ac>)
 8009886:	4313      	orrs	r3, r2
 8009888:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800988a:	4b05      	ldr	r3, [pc, #20]	; (80098a0 <HAL_RCC_OscConfig+0x7ac>)
 800988c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988e:	4a04      	ldr	r2, [pc, #16]	; (80098a0 <HAL_RCC_OscConfig+0x7ac>)
 8009890:	f043 0301 	orr.w	r3, r3, #1
 8009894:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009896:	2300      	movs	r3, #0
}
 8009898:	4618      	mov	r0, r3
 800989a:	3730      	adds	r7, #48	; 0x30
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	58024400 	.word	0x58024400
 80098a4:	ffff0007 	.word	0xffff0007

080098a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b086      	sub	sp, #24
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d101      	bne.n	80098bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	e19c      	b.n	8009bf6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80098bc:	4b8a      	ldr	r3, [pc, #552]	; (8009ae8 <HAL_RCC_ClockConfig+0x240>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f003 030f 	and.w	r3, r3, #15
 80098c4:	683a      	ldr	r2, [r7, #0]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d910      	bls.n	80098ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098ca:	4b87      	ldr	r3, [pc, #540]	; (8009ae8 <HAL_RCC_ClockConfig+0x240>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f023 020f 	bic.w	r2, r3, #15
 80098d2:	4985      	ldr	r1, [pc, #532]	; (8009ae8 <HAL_RCC_ClockConfig+0x240>)
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80098da:	4b83      	ldr	r3, [pc, #524]	; (8009ae8 <HAL_RCC_ClockConfig+0x240>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f003 030f 	and.w	r3, r3, #15
 80098e2:	683a      	ldr	r2, [r7, #0]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d001      	beq.n	80098ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	e184      	b.n	8009bf6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f003 0304 	and.w	r3, r3, #4
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d010      	beq.n	800991a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	691a      	ldr	r2, [r3, #16]
 80098fc:	4b7b      	ldr	r3, [pc, #492]	; (8009aec <HAL_RCC_ClockConfig+0x244>)
 80098fe:	699b      	ldr	r3, [r3, #24]
 8009900:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009904:	429a      	cmp	r2, r3
 8009906:	d908      	bls.n	800991a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009908:	4b78      	ldr	r3, [pc, #480]	; (8009aec <HAL_RCC_ClockConfig+0x244>)
 800990a:	699b      	ldr	r3, [r3, #24]
 800990c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	691b      	ldr	r3, [r3, #16]
 8009914:	4975      	ldr	r1, [pc, #468]	; (8009aec <HAL_RCC_ClockConfig+0x244>)
 8009916:	4313      	orrs	r3, r2
 8009918:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f003 0308 	and.w	r3, r3, #8
 8009922:	2b00      	cmp	r3, #0
 8009924:	d010      	beq.n	8009948 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	695a      	ldr	r2, [r3, #20]
 800992a:	4b70      	ldr	r3, [pc, #448]	; (8009aec <HAL_RCC_ClockConfig+0x244>)
 800992c:	69db      	ldr	r3, [r3, #28]
 800992e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009932:	429a      	cmp	r2, r3
 8009934:	d908      	bls.n	8009948 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009936:	4b6d      	ldr	r3, [pc, #436]	; (8009aec <HAL_RCC_ClockConfig+0x244>)
 8009938:	69db      	ldr	r3, [r3, #28]
 800993a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	695b      	ldr	r3, [r3, #20]
 8009942:	496a      	ldr	r1, [pc, #424]	; (8009aec <HAL_RCC_ClockConfig+0x244>)
 8009944:	4313      	orrs	r3, r2
 8009946:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 0310 	and.w	r3, r3, #16
 8009950:	2b00      	cmp	r3, #0
 8009952:	d010      	beq.n	8009976 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	699a      	ldr	r2, [r3, #24]
 8009958:	4b64      	ldr	r3, [pc, #400]	; (8009aec <HAL_RCC_ClockConfig+0x244>)
 800995a:	69db      	ldr	r3, [r3, #28]
 800995c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009960:	429a      	cmp	r2, r3
 8009962:	d908      	bls.n	8009976 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009964:	4b61      	ldr	r3, [pc, #388]	; (8009aec <HAL_RCC_ClockConfig+0x244>)
 8009966:	69db      	ldr	r3, [r3, #28]
 8009968:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	699b      	ldr	r3, [r3, #24]
 8009970:	495e      	ldr	r1, [pc, #376]	; (8009aec <HAL_RCC_ClockConfig+0x244>)
 8009972:	4313      	orrs	r3, r2
 8009974:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f003 0320 	and.w	r3, r3, #32
 800997e:	2b00      	cmp	r3, #0
 8009980:	d010      	beq.n	80099a4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	69da      	ldr	r2, [r3, #28]
 8009986:	4b59      	ldr	r3, [pc, #356]	; (8009aec <HAL_RCC_ClockConfig+0x244>)
 8009988:	6a1b      	ldr	r3, [r3, #32]
 800998a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800998e:	429a      	cmp	r2, r3
 8009990:	d908      	bls.n	80099a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009992:	4b56      	ldr	r3, [pc, #344]	; (8009aec <HAL_RCC_ClockConfig+0x244>)
 8009994:	6a1b      	ldr	r3, [r3, #32]
 8009996:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	69db      	ldr	r3, [r3, #28]
 800999e:	4953      	ldr	r1, [pc, #332]	; (8009aec <HAL_RCC_ClockConfig+0x244>)
 80099a0:	4313      	orrs	r3, r2
 80099a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f003 0302 	and.w	r3, r3, #2
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d010      	beq.n	80099d2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	68da      	ldr	r2, [r3, #12]
 80099b4:	4b4d      	ldr	r3, [pc, #308]	; (8009aec <HAL_RCC_ClockConfig+0x244>)
 80099b6:	699b      	ldr	r3, [r3, #24]
 80099b8:	f003 030f 	and.w	r3, r3, #15
 80099bc:	429a      	cmp	r2, r3
 80099be:	d908      	bls.n	80099d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80099c0:	4b4a      	ldr	r3, [pc, #296]	; (8009aec <HAL_RCC_ClockConfig+0x244>)
 80099c2:	699b      	ldr	r3, [r3, #24]
 80099c4:	f023 020f 	bic.w	r2, r3, #15
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	4947      	ldr	r1, [pc, #284]	; (8009aec <HAL_RCC_ClockConfig+0x244>)
 80099ce:	4313      	orrs	r3, r2
 80099d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f003 0301 	and.w	r3, r3, #1
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d055      	beq.n	8009a8a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80099de:	4b43      	ldr	r3, [pc, #268]	; (8009aec <HAL_RCC_ClockConfig+0x244>)
 80099e0:	699b      	ldr	r3, [r3, #24]
 80099e2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	4940      	ldr	r1, [pc, #256]	; (8009aec <HAL_RCC_ClockConfig+0x244>)
 80099ec:	4313      	orrs	r3, r2
 80099ee:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d107      	bne.n	8009a08 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80099f8:	4b3c      	ldr	r3, [pc, #240]	; (8009aec <HAL_RCC_ClockConfig+0x244>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d121      	bne.n	8009a48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009a04:	2301      	movs	r3, #1
 8009a06:	e0f6      	b.n	8009bf6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	2b03      	cmp	r3, #3
 8009a0e:	d107      	bne.n	8009a20 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009a10:	4b36      	ldr	r3, [pc, #216]	; (8009aec <HAL_RCC_ClockConfig+0x244>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d115      	bne.n	8009a48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	e0ea      	b.n	8009bf6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d107      	bne.n	8009a38 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009a28:	4b30      	ldr	r3, [pc, #192]	; (8009aec <HAL_RCC_ClockConfig+0x244>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d109      	bne.n	8009a48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	e0de      	b.n	8009bf6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a38:	4b2c      	ldr	r3, [pc, #176]	; (8009aec <HAL_RCC_ClockConfig+0x244>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f003 0304 	and.w	r3, r3, #4
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d101      	bne.n	8009a48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	e0d6      	b.n	8009bf6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009a48:	4b28      	ldr	r3, [pc, #160]	; (8009aec <HAL_RCC_ClockConfig+0x244>)
 8009a4a:	691b      	ldr	r3, [r3, #16]
 8009a4c:	f023 0207 	bic.w	r2, r3, #7
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	4925      	ldr	r1, [pc, #148]	; (8009aec <HAL_RCC_ClockConfig+0x244>)
 8009a56:	4313      	orrs	r3, r2
 8009a58:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a5a:	f7f9 f9eb 	bl	8002e34 <HAL_GetTick>
 8009a5e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a60:	e00a      	b.n	8009a78 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a62:	f7f9 f9e7 	bl	8002e34 <HAL_GetTick>
 8009a66:	4602      	mov	r2, r0
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	1ad3      	subs	r3, r2, r3
 8009a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d901      	bls.n	8009a78 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009a74:	2303      	movs	r3, #3
 8009a76:	e0be      	b.n	8009bf6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a78:	4b1c      	ldr	r3, [pc, #112]	; (8009aec <HAL_RCC_ClockConfig+0x244>)
 8009a7a:	691b      	ldr	r3, [r3, #16]
 8009a7c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	00db      	lsls	r3, r3, #3
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d1eb      	bne.n	8009a62 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f003 0302 	and.w	r3, r3, #2
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d010      	beq.n	8009ab8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	68da      	ldr	r2, [r3, #12]
 8009a9a:	4b14      	ldr	r3, [pc, #80]	; (8009aec <HAL_RCC_ClockConfig+0x244>)
 8009a9c:	699b      	ldr	r3, [r3, #24]
 8009a9e:	f003 030f 	and.w	r3, r3, #15
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d208      	bcs.n	8009ab8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009aa6:	4b11      	ldr	r3, [pc, #68]	; (8009aec <HAL_RCC_ClockConfig+0x244>)
 8009aa8:	699b      	ldr	r3, [r3, #24]
 8009aaa:	f023 020f 	bic.w	r2, r3, #15
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	490e      	ldr	r1, [pc, #56]	; (8009aec <HAL_RCC_ClockConfig+0x244>)
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009ab8:	4b0b      	ldr	r3, [pc, #44]	; (8009ae8 <HAL_RCC_ClockConfig+0x240>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f003 030f 	and.w	r3, r3, #15
 8009ac0:	683a      	ldr	r2, [r7, #0]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d214      	bcs.n	8009af0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ac6:	4b08      	ldr	r3, [pc, #32]	; (8009ae8 <HAL_RCC_ClockConfig+0x240>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f023 020f 	bic.w	r2, r3, #15
 8009ace:	4906      	ldr	r1, [pc, #24]	; (8009ae8 <HAL_RCC_ClockConfig+0x240>)
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ad6:	4b04      	ldr	r3, [pc, #16]	; (8009ae8 <HAL_RCC_ClockConfig+0x240>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f003 030f 	and.w	r3, r3, #15
 8009ade:	683a      	ldr	r2, [r7, #0]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d005      	beq.n	8009af0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	e086      	b.n	8009bf6 <HAL_RCC_ClockConfig+0x34e>
 8009ae8:	52002000 	.word	0x52002000
 8009aec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f003 0304 	and.w	r3, r3, #4
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d010      	beq.n	8009b1e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	691a      	ldr	r2, [r3, #16]
 8009b00:	4b3f      	ldr	r3, [pc, #252]	; (8009c00 <HAL_RCC_ClockConfig+0x358>)
 8009b02:	699b      	ldr	r3, [r3, #24]
 8009b04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d208      	bcs.n	8009b1e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009b0c:	4b3c      	ldr	r3, [pc, #240]	; (8009c00 <HAL_RCC_ClockConfig+0x358>)
 8009b0e:	699b      	ldr	r3, [r3, #24]
 8009b10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	4939      	ldr	r1, [pc, #228]	; (8009c00 <HAL_RCC_ClockConfig+0x358>)
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f003 0308 	and.w	r3, r3, #8
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d010      	beq.n	8009b4c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	695a      	ldr	r2, [r3, #20]
 8009b2e:	4b34      	ldr	r3, [pc, #208]	; (8009c00 <HAL_RCC_ClockConfig+0x358>)
 8009b30:	69db      	ldr	r3, [r3, #28]
 8009b32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d208      	bcs.n	8009b4c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009b3a:	4b31      	ldr	r3, [pc, #196]	; (8009c00 <HAL_RCC_ClockConfig+0x358>)
 8009b3c:	69db      	ldr	r3, [r3, #28]
 8009b3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	695b      	ldr	r3, [r3, #20]
 8009b46:	492e      	ldr	r1, [pc, #184]	; (8009c00 <HAL_RCC_ClockConfig+0x358>)
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 0310 	and.w	r3, r3, #16
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d010      	beq.n	8009b7a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	699a      	ldr	r2, [r3, #24]
 8009b5c:	4b28      	ldr	r3, [pc, #160]	; (8009c00 <HAL_RCC_ClockConfig+0x358>)
 8009b5e:	69db      	ldr	r3, [r3, #28]
 8009b60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d208      	bcs.n	8009b7a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009b68:	4b25      	ldr	r3, [pc, #148]	; (8009c00 <HAL_RCC_ClockConfig+0x358>)
 8009b6a:	69db      	ldr	r3, [r3, #28]
 8009b6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	699b      	ldr	r3, [r3, #24]
 8009b74:	4922      	ldr	r1, [pc, #136]	; (8009c00 <HAL_RCC_ClockConfig+0x358>)
 8009b76:	4313      	orrs	r3, r2
 8009b78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f003 0320 	and.w	r3, r3, #32
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d010      	beq.n	8009ba8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	69da      	ldr	r2, [r3, #28]
 8009b8a:	4b1d      	ldr	r3, [pc, #116]	; (8009c00 <HAL_RCC_ClockConfig+0x358>)
 8009b8c:	6a1b      	ldr	r3, [r3, #32]
 8009b8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d208      	bcs.n	8009ba8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009b96:	4b1a      	ldr	r3, [pc, #104]	; (8009c00 <HAL_RCC_ClockConfig+0x358>)
 8009b98:	6a1b      	ldr	r3, [r3, #32]
 8009b9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	69db      	ldr	r3, [r3, #28]
 8009ba2:	4917      	ldr	r1, [pc, #92]	; (8009c00 <HAL_RCC_ClockConfig+0x358>)
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009ba8:	f000 f89e 	bl	8009ce8 <HAL_RCC_GetSysClockFreq>
 8009bac:	4602      	mov	r2, r0
 8009bae:	4b14      	ldr	r3, [pc, #80]	; (8009c00 <HAL_RCC_ClockConfig+0x358>)
 8009bb0:	699b      	ldr	r3, [r3, #24]
 8009bb2:	0a1b      	lsrs	r3, r3, #8
 8009bb4:	f003 030f 	and.w	r3, r3, #15
 8009bb8:	4912      	ldr	r1, [pc, #72]	; (8009c04 <HAL_RCC_ClockConfig+0x35c>)
 8009bba:	5ccb      	ldrb	r3, [r1, r3]
 8009bbc:	f003 031f 	and.w	r3, r3, #31
 8009bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8009bc4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009bc6:	4b0e      	ldr	r3, [pc, #56]	; (8009c00 <HAL_RCC_ClockConfig+0x358>)
 8009bc8:	699b      	ldr	r3, [r3, #24]
 8009bca:	f003 030f 	and.w	r3, r3, #15
 8009bce:	4a0d      	ldr	r2, [pc, #52]	; (8009c04 <HAL_RCC_ClockConfig+0x35c>)
 8009bd0:	5cd3      	ldrb	r3, [r2, r3]
 8009bd2:	f003 031f 	and.w	r3, r3, #31
 8009bd6:	693a      	ldr	r2, [r7, #16]
 8009bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8009bdc:	4a0a      	ldr	r2, [pc, #40]	; (8009c08 <HAL_RCC_ClockConfig+0x360>)
 8009bde:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009be0:	4a0a      	ldr	r2, [pc, #40]	; (8009c0c <HAL_RCC_ClockConfig+0x364>)
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009be6:	4b0a      	ldr	r3, [pc, #40]	; (8009c10 <HAL_RCC_ClockConfig+0x368>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7f9 f8d8 	bl	8002da0 <HAL_InitTick>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3718      	adds	r7, #24
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	58024400 	.word	0x58024400
 8009c04:	08019db8 	.word	0x08019db8
 8009c08:	24000004 	.word	0x24000004
 8009c0c:	24000000 	.word	0x24000000
 8009c10:	24000008 	.word	0x24000008

08009c14 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b08c      	sub	sp, #48	; 0x30
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d12a      	bne.n	8009c7c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8009c26:	4b2d      	ldr	r3, [pc, #180]	; (8009cdc <HAL_RCC_MCOConfig+0xc8>)
 8009c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c2c:	4a2b      	ldr	r2, [pc, #172]	; (8009cdc <HAL_RCC_MCOConfig+0xc8>)
 8009c2e:	f043 0301 	orr.w	r3, r3, #1
 8009c32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009c36:	4b29      	ldr	r3, [pc, #164]	; (8009cdc <HAL_RCC_MCOConfig+0xc8>)
 8009c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c3c:	f003 0301 	and.w	r3, r3, #1
 8009c40:	61bb      	str	r3, [r7, #24]
 8009c42:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8009c44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c4a:	2302      	movs	r3, #2
 8009c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c4e:	2303      	movs	r3, #3
 8009c50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c52:	2300      	movs	r3, #0
 8009c54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009c56:	2300      	movs	r3, #0
 8009c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8009c5a:	f107 031c 	add.w	r3, r7, #28
 8009c5e:	4619      	mov	r1, r3
 8009c60:	481f      	ldr	r0, [pc, #124]	; (8009ce0 <HAL_RCC_MCOConfig+0xcc>)
 8009c62:	f7fd fc29 	bl	80074b8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8009c66:	4b1d      	ldr	r3, [pc, #116]	; (8009cdc <HAL_RCC_MCOConfig+0xc8>)
 8009c68:	691b      	ldr	r3, [r3, #16]
 8009c6a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8009c6e:	68b9      	ldr	r1, [r7, #8]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	430b      	orrs	r3, r1
 8009c74:	4919      	ldr	r1, [pc, #100]	; (8009cdc <HAL_RCC_MCOConfig+0xc8>)
 8009c76:	4313      	orrs	r3, r2
 8009c78:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8009c7a:	e02a      	b.n	8009cd2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8009c7c:	4b17      	ldr	r3, [pc, #92]	; (8009cdc <HAL_RCC_MCOConfig+0xc8>)
 8009c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c82:	4a16      	ldr	r2, [pc, #88]	; (8009cdc <HAL_RCC_MCOConfig+0xc8>)
 8009c84:	f043 0304 	orr.w	r3, r3, #4
 8009c88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009c8c:	4b13      	ldr	r3, [pc, #76]	; (8009cdc <HAL_RCC_MCOConfig+0xc8>)
 8009c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c92:	f003 0304 	and.w	r3, r3, #4
 8009c96:	617b      	str	r3, [r7, #20]
 8009c98:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8009c9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ca0:	2302      	movs	r3, #2
 8009ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ca4:	2303      	movs	r3, #3
 8009ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009cac:	2300      	movs	r3, #0
 8009cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009cb0:	f107 031c 	add.w	r3, r7, #28
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	480b      	ldr	r0, [pc, #44]	; (8009ce4 <HAL_RCC_MCOConfig+0xd0>)
 8009cb8:	f7fd fbfe 	bl	80074b8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8009cbc:	4b07      	ldr	r3, [pc, #28]	; (8009cdc <HAL_RCC_MCOConfig+0xc8>)
 8009cbe:	691b      	ldr	r3, [r3, #16]
 8009cc0:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	01d9      	lsls	r1, r3, #7
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	430b      	orrs	r3, r1
 8009ccc:	4903      	ldr	r1, [pc, #12]	; (8009cdc <HAL_RCC_MCOConfig+0xc8>)
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	610b      	str	r3, [r1, #16]
}
 8009cd2:	bf00      	nop
 8009cd4:	3730      	adds	r7, #48	; 0x30
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	58024400 	.word	0x58024400
 8009ce0:	58020000 	.word	0x58020000
 8009ce4:	58020800 	.word	0x58020800

08009ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b089      	sub	sp, #36	; 0x24
 8009cec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009cee:	4bb3      	ldr	r3, [pc, #716]	; (8009fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009cf6:	2b18      	cmp	r3, #24
 8009cf8:	f200 8155 	bhi.w	8009fa6 <HAL_RCC_GetSysClockFreq+0x2be>
 8009cfc:	a201      	add	r2, pc, #4	; (adr r2, 8009d04 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d02:	bf00      	nop
 8009d04:	08009d69 	.word	0x08009d69
 8009d08:	08009fa7 	.word	0x08009fa7
 8009d0c:	08009fa7 	.word	0x08009fa7
 8009d10:	08009fa7 	.word	0x08009fa7
 8009d14:	08009fa7 	.word	0x08009fa7
 8009d18:	08009fa7 	.word	0x08009fa7
 8009d1c:	08009fa7 	.word	0x08009fa7
 8009d20:	08009fa7 	.word	0x08009fa7
 8009d24:	08009d8f 	.word	0x08009d8f
 8009d28:	08009fa7 	.word	0x08009fa7
 8009d2c:	08009fa7 	.word	0x08009fa7
 8009d30:	08009fa7 	.word	0x08009fa7
 8009d34:	08009fa7 	.word	0x08009fa7
 8009d38:	08009fa7 	.word	0x08009fa7
 8009d3c:	08009fa7 	.word	0x08009fa7
 8009d40:	08009fa7 	.word	0x08009fa7
 8009d44:	08009d95 	.word	0x08009d95
 8009d48:	08009fa7 	.word	0x08009fa7
 8009d4c:	08009fa7 	.word	0x08009fa7
 8009d50:	08009fa7 	.word	0x08009fa7
 8009d54:	08009fa7 	.word	0x08009fa7
 8009d58:	08009fa7 	.word	0x08009fa7
 8009d5c:	08009fa7 	.word	0x08009fa7
 8009d60:	08009fa7 	.word	0x08009fa7
 8009d64:	08009d9b 	.word	0x08009d9b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d68:	4b94      	ldr	r3, [pc, #592]	; (8009fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f003 0320 	and.w	r3, r3, #32
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d009      	beq.n	8009d88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d74:	4b91      	ldr	r3, [pc, #580]	; (8009fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	08db      	lsrs	r3, r3, #3
 8009d7a:	f003 0303 	and.w	r3, r3, #3
 8009d7e:	4a90      	ldr	r2, [pc, #576]	; (8009fc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009d80:	fa22 f303 	lsr.w	r3, r2, r3
 8009d84:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009d86:	e111      	b.n	8009fac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009d88:	4b8d      	ldr	r3, [pc, #564]	; (8009fc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009d8a:	61bb      	str	r3, [r7, #24]
      break;
 8009d8c:	e10e      	b.n	8009fac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009d8e:	4b8d      	ldr	r3, [pc, #564]	; (8009fc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009d90:	61bb      	str	r3, [r7, #24]
      break;
 8009d92:	e10b      	b.n	8009fac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009d94:	4b8c      	ldr	r3, [pc, #560]	; (8009fc8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009d96:	61bb      	str	r3, [r7, #24]
      break;
 8009d98:	e108      	b.n	8009fac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d9a:	4b88      	ldr	r3, [pc, #544]	; (8009fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d9e:	f003 0303 	and.w	r3, r3, #3
 8009da2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009da4:	4b85      	ldr	r3, [pc, #532]	; (8009fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009da8:	091b      	lsrs	r3, r3, #4
 8009daa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009dae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009db0:	4b82      	ldr	r3, [pc, #520]	; (8009fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db4:	f003 0301 	and.w	r3, r3, #1
 8009db8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009dba:	4b80      	ldr	r3, [pc, #512]	; (8009fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dbe:	08db      	lsrs	r3, r3, #3
 8009dc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	fb02 f303 	mul.w	r3, r2, r3
 8009dca:	ee07 3a90 	vmov	s15, r3
 8009dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dd2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	f000 80e1 	beq.w	8009fa0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	2b02      	cmp	r3, #2
 8009de2:	f000 8083 	beq.w	8009eec <HAL_RCC_GetSysClockFreq+0x204>
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	2b02      	cmp	r3, #2
 8009dea:	f200 80a1 	bhi.w	8009f30 <HAL_RCC_GetSysClockFreq+0x248>
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d003      	beq.n	8009dfc <HAL_RCC_GetSysClockFreq+0x114>
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d056      	beq.n	8009ea8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009dfa:	e099      	b.n	8009f30 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dfc:	4b6f      	ldr	r3, [pc, #444]	; (8009fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f003 0320 	and.w	r3, r3, #32
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d02d      	beq.n	8009e64 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e08:	4b6c      	ldr	r3, [pc, #432]	; (8009fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	08db      	lsrs	r3, r3, #3
 8009e0e:	f003 0303 	and.w	r3, r3, #3
 8009e12:	4a6b      	ldr	r2, [pc, #428]	; (8009fc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009e14:	fa22 f303 	lsr.w	r3, r2, r3
 8009e18:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	ee07 3a90 	vmov	s15, r3
 8009e20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	ee07 3a90 	vmov	s15, r3
 8009e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e32:	4b62      	ldr	r3, [pc, #392]	; (8009fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e3a:	ee07 3a90 	vmov	s15, r3
 8009e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e42:	ed97 6a02 	vldr	s12, [r7, #8]
 8009e46:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009fcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e5e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009e62:	e087      	b.n	8009f74 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	ee07 3a90 	vmov	s15, r3
 8009e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e6e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009fd0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e76:	4b51      	ldr	r3, [pc, #324]	; (8009fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e7e:	ee07 3a90 	vmov	s15, r3
 8009e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e86:	ed97 6a02 	vldr	s12, [r7, #8]
 8009e8a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009fcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ea2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009ea6:	e065      	b.n	8009f74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	ee07 3a90 	vmov	s15, r3
 8009eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eb2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009fd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eba:	4b40      	ldr	r3, [pc, #256]	; (8009fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ec2:	ee07 3a90 	vmov	s15, r3
 8009ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eca:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ece:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009fcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ee6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009eea:	e043      	b.n	8009f74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	ee07 3a90 	vmov	s15, r3
 8009ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ef6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009fd8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009efe:	4b2f      	ldr	r3, [pc, #188]	; (8009fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f06:	ee07 3a90 	vmov	s15, r3
 8009f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f12:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009fcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009f2e:	e021      	b.n	8009f74 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	ee07 3a90 	vmov	s15, r3
 8009f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f3a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009fd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f42:	4b1e      	ldr	r3, [pc, #120]	; (8009fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f4a:	ee07 3a90 	vmov	s15, r3
 8009f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f52:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f56:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009fcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009f72:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009f74:	4b11      	ldr	r3, [pc, #68]	; (8009fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f78:	0a5b      	lsrs	r3, r3, #9
 8009f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f7e:	3301      	adds	r3, #1
 8009f80:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	ee07 3a90 	vmov	s15, r3
 8009f88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009f8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f98:	ee17 3a90 	vmov	r3, s15
 8009f9c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009f9e:	e005      	b.n	8009fac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	61bb      	str	r3, [r7, #24]
      break;
 8009fa4:	e002      	b.n	8009fac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009fa6:	4b07      	ldr	r3, [pc, #28]	; (8009fc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009fa8:	61bb      	str	r3, [r7, #24]
      break;
 8009faa:	bf00      	nop
  }

  return sysclockfreq;
 8009fac:	69bb      	ldr	r3, [r7, #24]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3724      	adds	r7, #36	; 0x24
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr
 8009fba:	bf00      	nop
 8009fbc:	58024400 	.word	0x58024400
 8009fc0:	03d09000 	.word	0x03d09000
 8009fc4:	003d0900 	.word	0x003d0900
 8009fc8:	02faf080 	.word	0x02faf080
 8009fcc:	46000000 	.word	0x46000000
 8009fd0:	4c742400 	.word	0x4c742400
 8009fd4:	4a742400 	.word	0x4a742400
 8009fd8:	4c3ebc20 	.word	0x4c3ebc20

08009fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009fe2:	f7ff fe81 	bl	8009ce8 <HAL_RCC_GetSysClockFreq>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	4b10      	ldr	r3, [pc, #64]	; (800a02c <HAL_RCC_GetHCLKFreq+0x50>)
 8009fea:	699b      	ldr	r3, [r3, #24]
 8009fec:	0a1b      	lsrs	r3, r3, #8
 8009fee:	f003 030f 	and.w	r3, r3, #15
 8009ff2:	490f      	ldr	r1, [pc, #60]	; (800a030 <HAL_RCC_GetHCLKFreq+0x54>)
 8009ff4:	5ccb      	ldrb	r3, [r1, r3]
 8009ff6:	f003 031f 	and.w	r3, r3, #31
 8009ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8009ffe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a000:	4b0a      	ldr	r3, [pc, #40]	; (800a02c <HAL_RCC_GetHCLKFreq+0x50>)
 800a002:	699b      	ldr	r3, [r3, #24]
 800a004:	f003 030f 	and.w	r3, r3, #15
 800a008:	4a09      	ldr	r2, [pc, #36]	; (800a030 <HAL_RCC_GetHCLKFreq+0x54>)
 800a00a:	5cd3      	ldrb	r3, [r2, r3]
 800a00c:	f003 031f 	and.w	r3, r3, #31
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	fa22 f303 	lsr.w	r3, r2, r3
 800a016:	4a07      	ldr	r2, [pc, #28]	; (800a034 <HAL_RCC_GetHCLKFreq+0x58>)
 800a018:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a01a:	4a07      	ldr	r2, [pc, #28]	; (800a038 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a020:	4b04      	ldr	r3, [pc, #16]	; (800a034 <HAL_RCC_GetHCLKFreq+0x58>)
 800a022:	681b      	ldr	r3, [r3, #0]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	58024400 	.word	0x58024400
 800a030:	08019db8 	.word	0x08019db8
 800a034:	24000004 	.word	0x24000004
 800a038:	24000000 	.word	0x24000000

0800a03c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a040:	f7ff ffcc 	bl	8009fdc <HAL_RCC_GetHCLKFreq>
 800a044:	4602      	mov	r2, r0
 800a046:	4b06      	ldr	r3, [pc, #24]	; (800a060 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a048:	69db      	ldr	r3, [r3, #28]
 800a04a:	091b      	lsrs	r3, r3, #4
 800a04c:	f003 0307 	and.w	r3, r3, #7
 800a050:	4904      	ldr	r1, [pc, #16]	; (800a064 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a052:	5ccb      	ldrb	r3, [r1, r3]
 800a054:	f003 031f 	and.w	r3, r3, #31
 800a058:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	58024400 	.word	0x58024400
 800a064:	08019db8 	.word	0x08019db8

0800a068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a06c:	f7ff ffb6 	bl	8009fdc <HAL_RCC_GetHCLKFreq>
 800a070:	4602      	mov	r2, r0
 800a072:	4b06      	ldr	r3, [pc, #24]	; (800a08c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a074:	69db      	ldr	r3, [r3, #28]
 800a076:	0a1b      	lsrs	r3, r3, #8
 800a078:	f003 0307 	and.w	r3, r3, #7
 800a07c:	4904      	ldr	r1, [pc, #16]	; (800a090 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a07e:	5ccb      	ldrb	r3, [r1, r3]
 800a080:	f003 031f 	and.w	r3, r3, #31
 800a084:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a088:	4618      	mov	r0, r3
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	58024400 	.word	0x58024400
 800a090:	08019db8 	.word	0x08019db8

0800a094 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a098:	b0c6      	sub	sp, #280	; 0x118
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a0ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a0b8:	2500      	movs	r5, #0
 800a0ba:	ea54 0305 	orrs.w	r3, r4, r5
 800a0be:	d049      	beq.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a0c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a0ca:	d02f      	beq.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a0cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a0d0:	d828      	bhi.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a0d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a0d6:	d01a      	beq.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a0d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a0dc:	d822      	bhi.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d003      	beq.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a0e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0e6:	d007      	beq.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a0e8:	e01c      	b.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0ea:	4bab      	ldr	r3, [pc, #684]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ee:	4aaa      	ldr	r2, [pc, #680]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a0f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a0f6:	e01a      	b.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a0f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0fc:	3308      	adds	r3, #8
 800a0fe:	2102      	movs	r1, #2
 800a100:	4618      	mov	r0, r3
 800a102:	f002 fa49 	bl	800c598 <RCCEx_PLL2_Config>
 800a106:	4603      	mov	r3, r0
 800a108:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a10c:	e00f      	b.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a10e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a112:	3328      	adds	r3, #40	; 0x28
 800a114:	2102      	movs	r1, #2
 800a116:	4618      	mov	r0, r3
 800a118:	f002 faf0 	bl	800c6fc <RCCEx_PLL3_Config>
 800a11c:	4603      	mov	r3, r0
 800a11e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a122:	e004      	b.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a124:	2301      	movs	r3, #1
 800a126:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a12a:	e000      	b.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a12c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a12e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a132:	2b00      	cmp	r3, #0
 800a134:	d10a      	bne.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a136:	4b98      	ldr	r3, [pc, #608]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a13a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a13e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a142:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a144:	4a94      	ldr	r2, [pc, #592]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a146:	430b      	orrs	r3, r1
 800a148:	6513      	str	r3, [r2, #80]	; 0x50
 800a14a:	e003      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a14c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a150:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a160:	f04f 0900 	mov.w	r9, #0
 800a164:	ea58 0309 	orrs.w	r3, r8, r9
 800a168:	d047      	beq.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a16a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a16e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a170:	2b04      	cmp	r3, #4
 800a172:	d82a      	bhi.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a174:	a201      	add	r2, pc, #4	; (adr r2, 800a17c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a17a:	bf00      	nop
 800a17c:	0800a191 	.word	0x0800a191
 800a180:	0800a19f 	.word	0x0800a19f
 800a184:	0800a1b5 	.word	0x0800a1b5
 800a188:	0800a1d3 	.word	0x0800a1d3
 800a18c:	0800a1d3 	.word	0x0800a1d3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a190:	4b81      	ldr	r3, [pc, #516]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a194:	4a80      	ldr	r2, [pc, #512]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a19a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a19c:	e01a      	b.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a19e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1a2:	3308      	adds	r3, #8
 800a1a4:	2100      	movs	r1, #0
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f002 f9f6 	bl	800c598 <RCCEx_PLL2_Config>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a1b2:	e00f      	b.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a1b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1b8:	3328      	adds	r3, #40	; 0x28
 800a1ba:	2100      	movs	r1, #0
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f002 fa9d 	bl	800c6fc <RCCEx_PLL3_Config>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a1c8:	e004      	b.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a1d0:	e000      	b.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a1d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d10a      	bne.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a1dc:	4b6e      	ldr	r3, [pc, #440]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a1de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1e0:	f023 0107 	bic.w	r1, r3, #7
 800a1e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1ea:	4a6b      	ldr	r2, [pc, #428]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a1ec:	430b      	orrs	r3, r1
 800a1ee:	6513      	str	r3, [r2, #80]	; 0x50
 800a1f0:	e003      	b.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a1f6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a1fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a202:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800a206:	f04f 0b00 	mov.w	fp, #0
 800a20a:	ea5a 030b 	orrs.w	r3, sl, fp
 800a20e:	d05b      	beq.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a214:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a218:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a21c:	d03b      	beq.n	800a296 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a21e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a222:	d834      	bhi.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a224:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a228:	d037      	beq.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a22a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a22e:	d82e      	bhi.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a230:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a234:	d033      	beq.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a236:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a23a:	d828      	bhi.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a23c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a240:	d01a      	beq.n	800a278 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a242:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a246:	d822      	bhi.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d003      	beq.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a24c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a250:	d007      	beq.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a252:	e01c      	b.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a254:	4b50      	ldr	r3, [pc, #320]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a258:	4a4f      	ldr	r2, [pc, #316]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a25a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a25e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a260:	e01e      	b.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a262:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a266:	3308      	adds	r3, #8
 800a268:	2100      	movs	r1, #0
 800a26a:	4618      	mov	r0, r3
 800a26c:	f002 f994 	bl	800c598 <RCCEx_PLL2_Config>
 800a270:	4603      	mov	r3, r0
 800a272:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a276:	e013      	b.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a27c:	3328      	adds	r3, #40	; 0x28
 800a27e:	2100      	movs	r1, #0
 800a280:	4618      	mov	r0, r3
 800a282:	f002 fa3b 	bl	800c6fc <RCCEx_PLL3_Config>
 800a286:	4603      	mov	r3, r0
 800a288:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a28c:	e008      	b.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a28e:	2301      	movs	r3, #1
 800a290:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a294:	e004      	b.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a296:	bf00      	nop
 800a298:	e002      	b.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a29a:	bf00      	nop
 800a29c:	e000      	b.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a29e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d10b      	bne.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a2a8:	4b3b      	ldr	r3, [pc, #236]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a2aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2ac:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a2b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a2b8:	4a37      	ldr	r2, [pc, #220]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a2ba:	430b      	orrs	r3, r1
 800a2bc:	6593      	str	r3, [r2, #88]	; 0x58
 800a2be:	e003      	b.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a2c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a2c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a2d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a2d8:	2300      	movs	r3, #0
 800a2da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a2de:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800a2e2:	460b      	mov	r3, r1
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	d05d      	beq.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a2e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a2f0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a2f4:	d03b      	beq.n	800a36e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a2f6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a2fa:	d834      	bhi.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a2fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a300:	d037      	beq.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a302:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a306:	d82e      	bhi.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a308:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a30c:	d033      	beq.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800a30e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a312:	d828      	bhi.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a314:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a318:	d01a      	beq.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a31a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a31e:	d822      	bhi.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a320:	2b00      	cmp	r3, #0
 800a322:	d003      	beq.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a324:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a328:	d007      	beq.n	800a33a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a32a:	e01c      	b.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a32c:	4b1a      	ldr	r3, [pc, #104]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a330:	4a19      	ldr	r2, [pc, #100]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a336:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a338:	e01e      	b.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a33a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a33e:	3308      	adds	r3, #8
 800a340:	2100      	movs	r1, #0
 800a342:	4618      	mov	r0, r3
 800a344:	f002 f928 	bl	800c598 <RCCEx_PLL2_Config>
 800a348:	4603      	mov	r3, r0
 800a34a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a34e:	e013      	b.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a354:	3328      	adds	r3, #40	; 0x28
 800a356:	2100      	movs	r1, #0
 800a358:	4618      	mov	r0, r3
 800a35a:	f002 f9cf 	bl	800c6fc <RCCEx_PLL3_Config>
 800a35e:	4603      	mov	r3, r0
 800a360:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a364:	e008      	b.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a36c:	e004      	b.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a36e:	bf00      	nop
 800a370:	e002      	b.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a372:	bf00      	nop
 800a374:	e000      	b.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a376:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a378:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d10d      	bne.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a380:	4b05      	ldr	r3, [pc, #20]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a384:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800a388:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a38c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a390:	4a01      	ldr	r2, [pc, #4]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a392:	430b      	orrs	r3, r1
 800a394:	6593      	str	r3, [r2, #88]	; 0x58
 800a396:	e005      	b.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a398:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a39c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a3a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a3a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ac:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a3b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a3ba:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800a3be:	460b      	mov	r3, r1
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	d03a      	beq.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a3c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3ca:	2b30      	cmp	r3, #48	; 0x30
 800a3cc:	d01f      	beq.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800a3ce:	2b30      	cmp	r3, #48	; 0x30
 800a3d0:	d819      	bhi.n	800a406 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a3d2:	2b20      	cmp	r3, #32
 800a3d4:	d00c      	beq.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a3d6:	2b20      	cmp	r3, #32
 800a3d8:	d815      	bhi.n	800a406 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d019      	beq.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a3de:	2b10      	cmp	r3, #16
 800a3e0:	d111      	bne.n	800a406 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3e2:	4baa      	ldr	r3, [pc, #680]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e6:	4aa9      	ldr	r2, [pc, #676]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a3e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a3ee:	e011      	b.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a3f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3f4:	3308      	adds	r3, #8
 800a3f6:	2102      	movs	r1, #2
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f002 f8cd 	bl	800c598 <RCCEx_PLL2_Config>
 800a3fe:	4603      	mov	r3, r0
 800a400:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a404:	e006      	b.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a40c:	e002      	b.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a40e:	bf00      	nop
 800a410:	e000      	b.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a412:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a414:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d10a      	bne.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a41c:	4b9b      	ldr	r3, [pc, #620]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a41e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a420:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800a424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a42a:	4a98      	ldr	r2, [pc, #608]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a42c:	430b      	orrs	r3, r1
 800a42e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a430:	e003      	b.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a432:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a436:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a43a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a442:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a446:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a44a:	2300      	movs	r3, #0
 800a44c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a450:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800a454:	460b      	mov	r3, r1
 800a456:	4313      	orrs	r3, r2
 800a458:	d051      	beq.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a45a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a45e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a460:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a464:	d035      	beq.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800a466:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a46a:	d82e      	bhi.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a46c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a470:	d031      	beq.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800a472:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a476:	d828      	bhi.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a47c:	d01a      	beq.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a47e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a482:	d822      	bhi.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a484:	2b00      	cmp	r3, #0
 800a486:	d003      	beq.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800a488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a48c:	d007      	beq.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a48e:	e01c      	b.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a490:	4b7e      	ldr	r3, [pc, #504]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a494:	4a7d      	ldr	r2, [pc, #500]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a49a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a49c:	e01c      	b.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a49e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4a2:	3308      	adds	r3, #8
 800a4a4:	2100      	movs	r1, #0
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f002 f876 	bl	800c598 <RCCEx_PLL2_Config>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a4b2:	e011      	b.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a4b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4b8:	3328      	adds	r3, #40	; 0x28
 800a4ba:	2100      	movs	r1, #0
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f002 f91d 	bl	800c6fc <RCCEx_PLL3_Config>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a4c8:	e006      	b.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a4d0:	e002      	b.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a4d2:	bf00      	nop
 800a4d4:	e000      	b.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a4d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d10a      	bne.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a4e0:	4b6a      	ldr	r3, [pc, #424]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a4e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4e4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a4e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4ee:	4a67      	ldr	r2, [pc, #412]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a4f0:	430b      	orrs	r3, r1
 800a4f2:	6513      	str	r3, [r2, #80]	; 0x50
 800a4f4:	e003      	b.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a4fa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a4fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a506:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a50a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a50e:	2300      	movs	r3, #0
 800a510:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a514:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a518:	460b      	mov	r3, r1
 800a51a:	4313      	orrs	r3, r2
 800a51c:	d053      	beq.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a51e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a524:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a528:	d033      	beq.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a52a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a52e:	d82c      	bhi.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a530:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a534:	d02f      	beq.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800a536:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a53a:	d826      	bhi.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a53c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a540:	d02b      	beq.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a542:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a546:	d820      	bhi.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a548:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a54c:	d012      	beq.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a54e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a552:	d81a      	bhi.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a554:	2b00      	cmp	r3, #0
 800a556:	d022      	beq.n	800a59e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800a558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a55c:	d115      	bne.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a55e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a562:	3308      	adds	r3, #8
 800a564:	2101      	movs	r1, #1
 800a566:	4618      	mov	r0, r3
 800a568:	f002 f816 	bl	800c598 <RCCEx_PLL2_Config>
 800a56c:	4603      	mov	r3, r0
 800a56e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a572:	e015      	b.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a578:	3328      	adds	r3, #40	; 0x28
 800a57a:	2101      	movs	r1, #1
 800a57c:	4618      	mov	r0, r3
 800a57e:	f002 f8bd 	bl	800c6fc <RCCEx_PLL3_Config>
 800a582:	4603      	mov	r3, r0
 800a584:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a588:	e00a      	b.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a58a:	2301      	movs	r3, #1
 800a58c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a590:	e006      	b.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a592:	bf00      	nop
 800a594:	e004      	b.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a596:	bf00      	nop
 800a598:	e002      	b.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a59a:	bf00      	nop
 800a59c:	e000      	b.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a59e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d10a      	bne.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a5a8:	4b38      	ldr	r3, [pc, #224]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a5aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5ac:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a5b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5b6:	4a35      	ldr	r2, [pc, #212]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a5b8:	430b      	orrs	r3, r1
 800a5ba:	6513      	str	r3, [r2, #80]	; 0x50
 800a5bc:	e003      	b.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a5c2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a5c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ce:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a5d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a5dc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	d058      	beq.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a5e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a5ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5f2:	d033      	beq.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a5f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5f8:	d82c      	bhi.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a5fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5fe:	d02f      	beq.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a604:	d826      	bhi.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a606:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a60a:	d02b      	beq.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a60c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a610:	d820      	bhi.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a612:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a616:	d012      	beq.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800a618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a61c:	d81a      	bhi.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d022      	beq.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a626:	d115      	bne.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a62c:	3308      	adds	r3, #8
 800a62e:	2101      	movs	r1, #1
 800a630:	4618      	mov	r0, r3
 800a632:	f001 ffb1 	bl	800c598 <RCCEx_PLL2_Config>
 800a636:	4603      	mov	r3, r0
 800a638:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a63c:	e015      	b.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a63e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a642:	3328      	adds	r3, #40	; 0x28
 800a644:	2101      	movs	r1, #1
 800a646:	4618      	mov	r0, r3
 800a648:	f002 f858 	bl	800c6fc <RCCEx_PLL3_Config>
 800a64c:	4603      	mov	r3, r0
 800a64e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a652:	e00a      	b.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a65a:	e006      	b.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a65c:	bf00      	nop
 800a65e:	e004      	b.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a660:	bf00      	nop
 800a662:	e002      	b.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a664:	bf00      	nop
 800a666:	e000      	b.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a66a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d10e      	bne.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a672:	4b06      	ldr	r3, [pc, #24]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a676:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a67a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a67e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a682:	4a02      	ldr	r2, [pc, #8]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a684:	430b      	orrs	r3, r1
 800a686:	6593      	str	r3, [r2, #88]	; 0x58
 800a688:	e006      	b.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a68a:	bf00      	nop
 800a68c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a690:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a694:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a6a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a6ae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800a6b2:	460b      	mov	r3, r1
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	d037      	beq.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a6b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6c2:	d00e      	beq.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a6c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6c8:	d816      	bhi.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d018      	beq.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a6ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a6d2:	d111      	bne.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6d4:	4bc4      	ldr	r3, [pc, #784]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d8:	4ac3      	ldr	r2, [pc, #780]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a6da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a6e0:	e00f      	b.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a6e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6e6:	3308      	adds	r3, #8
 800a6e8:	2101      	movs	r1, #1
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f001 ff54 	bl	800c598 <RCCEx_PLL2_Config>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a6f6:	e004      	b.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a6fe:	e000      	b.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a700:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a702:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a706:	2b00      	cmp	r3, #0
 800a708:	d10a      	bne.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a70a:	4bb7      	ldr	r3, [pc, #732]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a70c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a70e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a718:	4ab3      	ldr	r2, [pc, #716]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a71a:	430b      	orrs	r3, r1
 800a71c:	6513      	str	r3, [r2, #80]	; 0x50
 800a71e:	e003      	b.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a720:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a724:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a730:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a734:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a738:	2300      	movs	r3, #0
 800a73a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a73e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a742:	460b      	mov	r3, r1
 800a744:	4313      	orrs	r3, r2
 800a746:	d039      	beq.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a74c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a74e:	2b03      	cmp	r3, #3
 800a750:	d81c      	bhi.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a752:	a201      	add	r2, pc, #4	; (adr r2, 800a758 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a758:	0800a795 	.word	0x0800a795
 800a75c:	0800a769 	.word	0x0800a769
 800a760:	0800a777 	.word	0x0800a777
 800a764:	0800a795 	.word	0x0800a795
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a768:	4b9f      	ldr	r3, [pc, #636]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a76c:	4a9e      	ldr	r2, [pc, #632]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a76e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a772:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a774:	e00f      	b.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a776:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a77a:	3308      	adds	r3, #8
 800a77c:	2102      	movs	r1, #2
 800a77e:	4618      	mov	r0, r3
 800a780:	f001 ff0a 	bl	800c598 <RCCEx_PLL2_Config>
 800a784:	4603      	mov	r3, r0
 800a786:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a78a:	e004      	b.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a78c:	2301      	movs	r3, #1
 800a78e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a792:	e000      	b.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a794:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a796:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d10a      	bne.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a79e:	4b92      	ldr	r3, [pc, #584]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a7a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7a2:	f023 0103 	bic.w	r1, r3, #3
 800a7a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7ac:	4a8e      	ldr	r2, [pc, #568]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a7ae:	430b      	orrs	r3, r1
 800a7b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a7b2:	e003      	b.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a7bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a7c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a7d2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	f000 8099 	beq.w	800a910 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a7de:	4b83      	ldr	r3, [pc, #524]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a82      	ldr	r2, [pc, #520]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a7e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a7ea:	f7f8 fb23 	bl	8002e34 <HAL_GetTick>
 800a7ee:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a7f2:	e00b      	b.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a7f4:	f7f8 fb1e 	bl	8002e34 <HAL_GetTick>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a7fe:	1ad3      	subs	r3, r2, r3
 800a800:	2b64      	cmp	r3, #100	; 0x64
 800a802:	d903      	bls.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800a804:	2303      	movs	r3, #3
 800a806:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a80a:	e005      	b.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a80c:	4b77      	ldr	r3, [pc, #476]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a814:	2b00      	cmp	r3, #0
 800a816:	d0ed      	beq.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800a818:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d173      	bne.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a820:	4b71      	ldr	r3, [pc, #452]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a822:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a828:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a82c:	4053      	eors	r3, r2
 800a82e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a832:	2b00      	cmp	r3, #0
 800a834:	d015      	beq.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a836:	4b6c      	ldr	r3, [pc, #432]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a83a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a83e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a842:	4b69      	ldr	r3, [pc, #420]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a846:	4a68      	ldr	r2, [pc, #416]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a84c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a84e:	4b66      	ldr	r3, [pc, #408]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a852:	4a65      	ldr	r2, [pc, #404]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a858:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a85a:	4a63      	ldr	r2, [pc, #396]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a85c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a860:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a866:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a86a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a86e:	d118      	bne.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a870:	f7f8 fae0 	bl	8002e34 <HAL_GetTick>
 800a874:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a878:	e00d      	b.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a87a:	f7f8 fadb 	bl	8002e34 <HAL_GetTick>
 800a87e:	4602      	mov	r2, r0
 800a880:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a884:	1ad2      	subs	r2, r2, r3
 800a886:	f241 3388 	movw	r3, #5000	; 0x1388
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d903      	bls.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800a88e:	2303      	movs	r3, #3
 800a890:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800a894:	e005      	b.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a896:	4b54      	ldr	r3, [pc, #336]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a89a:	f003 0302 	and.w	r3, r3, #2
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d0eb      	beq.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800a8a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d129      	bne.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a8aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a8b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8ba:	d10e      	bne.n	800a8da <HAL_RCCEx_PeriphCLKConfig+0x846>
 800a8bc:	4b4a      	ldr	r3, [pc, #296]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8be:	691b      	ldr	r3, [r3, #16]
 800a8c0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a8cc:	091a      	lsrs	r2, r3, #4
 800a8ce:	4b48      	ldr	r3, [pc, #288]	; (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a8d0:	4013      	ands	r3, r2
 800a8d2:	4a45      	ldr	r2, [pc, #276]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8d4:	430b      	orrs	r3, r1
 800a8d6:	6113      	str	r3, [r2, #16]
 800a8d8:	e005      	b.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a8da:	4b43      	ldr	r3, [pc, #268]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8dc:	691b      	ldr	r3, [r3, #16]
 800a8de:	4a42      	ldr	r2, [pc, #264]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a8e4:	6113      	str	r3, [r2, #16]
 800a8e6:	4b40      	ldr	r3, [pc, #256]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8e8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a8f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a8f6:	4a3c      	ldr	r2, [pc, #240]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8f8:	430b      	orrs	r3, r1
 800a8fa:	6713      	str	r3, [r2, #112]	; 0x70
 800a8fc:	e008      	b.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a8fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a902:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800a906:	e003      	b.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a908:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a90c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a918:	f002 0301 	and.w	r3, r2, #1
 800a91c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a920:	2300      	movs	r3, #0
 800a922:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a926:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a92a:	460b      	mov	r3, r1
 800a92c:	4313      	orrs	r3, r2
 800a92e:	f000 808f 	beq.w	800aa50 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a936:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a938:	2b28      	cmp	r3, #40	; 0x28
 800a93a:	d871      	bhi.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a93c:	a201      	add	r2, pc, #4	; (adr r2, 800a944 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a93e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a942:	bf00      	nop
 800a944:	0800aa29 	.word	0x0800aa29
 800a948:	0800aa21 	.word	0x0800aa21
 800a94c:	0800aa21 	.word	0x0800aa21
 800a950:	0800aa21 	.word	0x0800aa21
 800a954:	0800aa21 	.word	0x0800aa21
 800a958:	0800aa21 	.word	0x0800aa21
 800a95c:	0800aa21 	.word	0x0800aa21
 800a960:	0800aa21 	.word	0x0800aa21
 800a964:	0800a9f5 	.word	0x0800a9f5
 800a968:	0800aa21 	.word	0x0800aa21
 800a96c:	0800aa21 	.word	0x0800aa21
 800a970:	0800aa21 	.word	0x0800aa21
 800a974:	0800aa21 	.word	0x0800aa21
 800a978:	0800aa21 	.word	0x0800aa21
 800a97c:	0800aa21 	.word	0x0800aa21
 800a980:	0800aa21 	.word	0x0800aa21
 800a984:	0800aa0b 	.word	0x0800aa0b
 800a988:	0800aa21 	.word	0x0800aa21
 800a98c:	0800aa21 	.word	0x0800aa21
 800a990:	0800aa21 	.word	0x0800aa21
 800a994:	0800aa21 	.word	0x0800aa21
 800a998:	0800aa21 	.word	0x0800aa21
 800a99c:	0800aa21 	.word	0x0800aa21
 800a9a0:	0800aa21 	.word	0x0800aa21
 800a9a4:	0800aa29 	.word	0x0800aa29
 800a9a8:	0800aa21 	.word	0x0800aa21
 800a9ac:	0800aa21 	.word	0x0800aa21
 800a9b0:	0800aa21 	.word	0x0800aa21
 800a9b4:	0800aa21 	.word	0x0800aa21
 800a9b8:	0800aa21 	.word	0x0800aa21
 800a9bc:	0800aa21 	.word	0x0800aa21
 800a9c0:	0800aa21 	.word	0x0800aa21
 800a9c4:	0800aa29 	.word	0x0800aa29
 800a9c8:	0800aa21 	.word	0x0800aa21
 800a9cc:	0800aa21 	.word	0x0800aa21
 800a9d0:	0800aa21 	.word	0x0800aa21
 800a9d4:	0800aa21 	.word	0x0800aa21
 800a9d8:	0800aa21 	.word	0x0800aa21
 800a9dc:	0800aa21 	.word	0x0800aa21
 800a9e0:	0800aa21 	.word	0x0800aa21
 800a9e4:	0800aa29 	.word	0x0800aa29
 800a9e8:	58024400 	.word	0x58024400
 800a9ec:	58024800 	.word	0x58024800
 800a9f0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a9f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9f8:	3308      	adds	r3, #8
 800a9fa:	2101      	movs	r1, #1
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f001 fdcb 	bl	800c598 <RCCEx_PLL2_Config>
 800aa02:	4603      	mov	r3, r0
 800aa04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800aa08:	e00f      	b.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa0e:	3328      	adds	r3, #40	; 0x28
 800aa10:	2101      	movs	r1, #1
 800aa12:	4618      	mov	r0, r3
 800aa14:	f001 fe72 	bl	800c6fc <RCCEx_PLL3_Config>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800aa1e:	e004      	b.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa20:	2301      	movs	r3, #1
 800aa22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa26:	e000      	b.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800aa28:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa2a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d10a      	bne.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800aa32:	4bbf      	ldr	r3, [pc, #764]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aa34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa36:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800aa3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa40:	4abb      	ldr	r2, [pc, #748]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aa42:	430b      	orrs	r3, r1
 800aa44:	6553      	str	r3, [r2, #84]	; 0x54
 800aa46:	e003      	b.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa4c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800aa50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa58:	f002 0302 	and.w	r3, r2, #2
 800aa5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aa60:	2300      	movs	r3, #0
 800aa62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa66:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800aa6a:	460b      	mov	r3, r1
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	d041      	beq.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800aa70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa76:	2b05      	cmp	r3, #5
 800aa78:	d824      	bhi.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800aa7a:	a201      	add	r2, pc, #4	; (adr r2, 800aa80 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800aa7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa80:	0800aacd 	.word	0x0800aacd
 800aa84:	0800aa99 	.word	0x0800aa99
 800aa88:	0800aaaf 	.word	0x0800aaaf
 800aa8c:	0800aacd 	.word	0x0800aacd
 800aa90:	0800aacd 	.word	0x0800aacd
 800aa94:	0800aacd 	.word	0x0800aacd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aa98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa9c:	3308      	adds	r3, #8
 800aa9e:	2101      	movs	r1, #1
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f001 fd79 	bl	800c598 <RCCEx_PLL2_Config>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800aaac:	e00f      	b.n	800aace <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aaae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aab2:	3328      	adds	r3, #40	; 0x28
 800aab4:	2101      	movs	r1, #1
 800aab6:	4618      	mov	r0, r3
 800aab8:	f001 fe20 	bl	800c6fc <RCCEx_PLL3_Config>
 800aabc:	4603      	mov	r3, r0
 800aabe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800aac2:	e004      	b.n	800aace <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aac4:	2301      	movs	r3, #1
 800aac6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aaca:	e000      	b.n	800aace <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800aacc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aace:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d10a      	bne.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800aad6:	4b96      	ldr	r3, [pc, #600]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aada:	f023 0107 	bic.w	r1, r3, #7
 800aade:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aae4:	4a92      	ldr	r2, [pc, #584]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aae6:	430b      	orrs	r3, r1
 800aae8:	6553      	str	r3, [r2, #84]	; 0x54
 800aaea:	e003      	b.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aaf0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800aaf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafc:	f002 0304 	and.w	r3, r2, #4
 800ab00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ab04:	2300      	movs	r3, #0
 800ab06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ab0a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ab0e:	460b      	mov	r3, r1
 800ab10:	4313      	orrs	r3, r2
 800ab12:	d044      	beq.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ab14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab1c:	2b05      	cmp	r3, #5
 800ab1e:	d825      	bhi.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800ab20:	a201      	add	r2, pc, #4	; (adr r2, 800ab28 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800ab22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab26:	bf00      	nop
 800ab28:	0800ab75 	.word	0x0800ab75
 800ab2c:	0800ab41 	.word	0x0800ab41
 800ab30:	0800ab57 	.word	0x0800ab57
 800ab34:	0800ab75 	.word	0x0800ab75
 800ab38:	0800ab75 	.word	0x0800ab75
 800ab3c:	0800ab75 	.word	0x0800ab75
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ab40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab44:	3308      	adds	r3, #8
 800ab46:	2101      	movs	r1, #1
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f001 fd25 	bl	800c598 <RCCEx_PLL2_Config>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ab54:	e00f      	b.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ab56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab5a:	3328      	adds	r3, #40	; 0x28
 800ab5c:	2101      	movs	r1, #1
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f001 fdcc 	bl	800c6fc <RCCEx_PLL3_Config>
 800ab64:	4603      	mov	r3, r0
 800ab66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ab6a:	e004      	b.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab72:	e000      	b.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800ab74:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab76:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d10b      	bne.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ab7e:	4b6c      	ldr	r3, [pc, #432]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ab80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab82:	f023 0107 	bic.w	r1, r3, #7
 800ab86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab8e:	4a68      	ldr	r2, [pc, #416]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ab90:	430b      	orrs	r3, r1
 800ab92:	6593      	str	r3, [r2, #88]	; 0x58
 800ab94:	e003      	b.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab96:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab9a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ab9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba6:	f002 0320 	and.w	r3, r2, #32
 800abaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800abae:	2300      	movs	r3, #0
 800abb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800abb4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800abb8:	460b      	mov	r3, r1
 800abba:	4313      	orrs	r3, r2
 800abbc:	d055      	beq.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800abbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800abca:	d033      	beq.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800abcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800abd0:	d82c      	bhi.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800abd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abd6:	d02f      	beq.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800abd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abdc:	d826      	bhi.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800abde:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800abe2:	d02b      	beq.n	800ac3c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800abe4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800abe8:	d820      	bhi.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800abea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abee:	d012      	beq.n	800ac16 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800abf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abf4:	d81a      	bhi.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d022      	beq.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800abfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abfe:	d115      	bne.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac04:	3308      	adds	r3, #8
 800ac06:	2100      	movs	r1, #0
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f001 fcc5 	bl	800c598 <RCCEx_PLL2_Config>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ac14:	e015      	b.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ac16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac1a:	3328      	adds	r3, #40	; 0x28
 800ac1c:	2102      	movs	r1, #2
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f001 fd6c 	bl	800c6fc <RCCEx_PLL3_Config>
 800ac24:	4603      	mov	r3, r0
 800ac26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ac2a:	e00a      	b.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac32:	e006      	b.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ac34:	bf00      	nop
 800ac36:	e004      	b.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ac38:	bf00      	nop
 800ac3a:	e002      	b.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ac3c:	bf00      	nop
 800ac3e:	e000      	b.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ac40:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac42:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d10b      	bne.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ac4a:	4b39      	ldr	r3, [pc, #228]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ac4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac4e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ac52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac5a:	4a35      	ldr	r2, [pc, #212]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ac5c:	430b      	orrs	r3, r1
 800ac5e:	6553      	str	r3, [r2, #84]	; 0x54
 800ac60:	e003      	b.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac66:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ac6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac72:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800ac76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ac80:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800ac84:	460b      	mov	r3, r1
 800ac86:	4313      	orrs	r3, r2
 800ac88:	d058      	beq.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ac8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ac92:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ac96:	d033      	beq.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800ac98:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ac9c:	d82c      	bhi.n	800acf8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ac9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aca2:	d02f      	beq.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800aca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aca8:	d826      	bhi.n	800acf8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800acaa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800acae:	d02b      	beq.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800acb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800acb4:	d820      	bhi.n	800acf8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800acb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800acba:	d012      	beq.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800acbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800acc0:	d81a      	bhi.n	800acf8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d022      	beq.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800acc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acca:	d115      	bne.n	800acf8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800accc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acd0:	3308      	adds	r3, #8
 800acd2:	2100      	movs	r1, #0
 800acd4:	4618      	mov	r0, r3
 800acd6:	f001 fc5f 	bl	800c598 <RCCEx_PLL2_Config>
 800acda:	4603      	mov	r3, r0
 800acdc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ace0:	e015      	b.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ace2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ace6:	3328      	adds	r3, #40	; 0x28
 800ace8:	2102      	movs	r1, #2
 800acea:	4618      	mov	r0, r3
 800acec:	f001 fd06 	bl	800c6fc <RCCEx_PLL3_Config>
 800acf0:	4603      	mov	r3, r0
 800acf2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800acf6:	e00a      	b.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800acf8:	2301      	movs	r3, #1
 800acfa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800acfe:	e006      	b.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ad00:	bf00      	nop
 800ad02:	e004      	b.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ad04:	bf00      	nop
 800ad06:	e002      	b.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ad08:	bf00      	nop
 800ad0a:	e000      	b.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ad0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad0e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d10e      	bne.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ad16:	4b06      	ldr	r3, [pc, #24]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ad18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad1a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800ad1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad26:	4a02      	ldr	r2, [pc, #8]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ad28:	430b      	orrs	r3, r1
 800ad2a:	6593      	str	r3, [r2, #88]	; 0x58
 800ad2c:	e006      	b.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800ad2e:	bf00      	nop
 800ad30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad38:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ad3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad44:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800ad48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ad52:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800ad56:	460b      	mov	r3, r1
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	d055      	beq.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ad5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ad64:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ad68:	d033      	beq.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800ad6a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ad6e:	d82c      	bhi.n	800adca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ad70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad74:	d02f      	beq.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800ad76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad7a:	d826      	bhi.n	800adca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ad7c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ad80:	d02b      	beq.n	800adda <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800ad82:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ad86:	d820      	bhi.n	800adca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ad88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad8c:	d012      	beq.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800ad8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad92:	d81a      	bhi.n	800adca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d022      	beq.n	800adde <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800ad98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad9c:	d115      	bne.n	800adca <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ada2:	3308      	adds	r3, #8
 800ada4:	2100      	movs	r1, #0
 800ada6:	4618      	mov	r0, r3
 800ada8:	f001 fbf6 	bl	800c598 <RCCEx_PLL2_Config>
 800adac:	4603      	mov	r3, r0
 800adae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800adb2:	e015      	b.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800adb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adb8:	3328      	adds	r3, #40	; 0x28
 800adba:	2102      	movs	r1, #2
 800adbc:	4618      	mov	r0, r3
 800adbe:	f001 fc9d 	bl	800c6fc <RCCEx_PLL3_Config>
 800adc2:	4603      	mov	r3, r0
 800adc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800adc8:	e00a      	b.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800adca:	2301      	movs	r3, #1
 800adcc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800add0:	e006      	b.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800add2:	bf00      	nop
 800add4:	e004      	b.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800add6:	bf00      	nop
 800add8:	e002      	b.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800adda:	bf00      	nop
 800addc:	e000      	b.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800adde:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ade0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d10b      	bne.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ade8:	4ba0      	ldr	r3, [pc, #640]	; (800b06c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800adea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adec:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800adf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800adf8:	4a9c      	ldr	r2, [pc, #624]	; (800b06c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800adfa:	430b      	orrs	r3, r1
 800adfc:	6593      	str	r3, [r2, #88]	; 0x58
 800adfe:	e003      	b.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae04:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800ae08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae10:	f002 0308 	and.w	r3, r2, #8
 800ae14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ae18:	2300      	movs	r3, #0
 800ae1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ae1e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800ae22:	460b      	mov	r3, r1
 800ae24:	4313      	orrs	r3, r2
 800ae26:	d01e      	beq.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800ae28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae34:	d10c      	bne.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ae36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae3a:	3328      	adds	r3, #40	; 0x28
 800ae3c:	2102      	movs	r1, #2
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f001 fc5c 	bl	800c6fc <RCCEx_PLL3_Config>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d002      	beq.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800ae50:	4b86      	ldr	r3, [pc, #536]	; (800b06c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ae52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae54:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ae58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae60:	4a82      	ldr	r2, [pc, #520]	; (800b06c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ae62:	430b      	orrs	r3, r1
 800ae64:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ae66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6e:	f002 0310 	and.w	r3, r2, #16
 800ae72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ae76:	2300      	movs	r3, #0
 800ae78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ae7c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800ae80:	460b      	mov	r3, r1
 800ae82:	4313      	orrs	r3, r2
 800ae84:	d01e      	beq.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ae86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae92:	d10c      	bne.n	800aeae <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ae94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae98:	3328      	adds	r3, #40	; 0x28
 800ae9a:	2102      	movs	r1, #2
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f001 fc2d 	bl	800c6fc <RCCEx_PLL3_Config>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d002      	beq.n	800aeae <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aeae:	4b6f      	ldr	r3, [pc, #444]	; (800b06c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aeb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aeb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800aeb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aebe:	4a6b      	ldr	r2, [pc, #428]	; (800b06c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aec0:	430b      	orrs	r3, r1
 800aec2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aecc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800aed0:	67bb      	str	r3, [r7, #120]	; 0x78
 800aed2:	2300      	movs	r3, #0
 800aed4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aed6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800aeda:	460b      	mov	r3, r1
 800aedc:	4313      	orrs	r3, r2
 800aede:	d03e      	beq.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800aee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aee4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aee8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aeec:	d022      	beq.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800aeee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aef2:	d81b      	bhi.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d003      	beq.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800aef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aefc:	d00b      	beq.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800aefe:	e015      	b.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af04:	3308      	adds	r3, #8
 800af06:	2100      	movs	r1, #0
 800af08:	4618      	mov	r0, r3
 800af0a:	f001 fb45 	bl	800c598 <RCCEx_PLL2_Config>
 800af0e:	4603      	mov	r3, r0
 800af10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800af14:	e00f      	b.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af1a:	3328      	adds	r3, #40	; 0x28
 800af1c:	2102      	movs	r1, #2
 800af1e:	4618      	mov	r0, r3
 800af20:	f001 fbec 	bl	800c6fc <RCCEx_PLL3_Config>
 800af24:	4603      	mov	r3, r0
 800af26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800af2a:	e004      	b.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af2c:	2301      	movs	r3, #1
 800af2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af32:	e000      	b.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800af34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af36:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d10b      	bne.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800af3e:	4b4b      	ldr	r3, [pc, #300]	; (800b06c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800af40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af42:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800af46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800af4e:	4a47      	ldr	r2, [pc, #284]	; (800b06c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800af50:	430b      	orrs	r3, r1
 800af52:	6593      	str	r3, [r2, #88]	; 0x58
 800af54:	e003      	b.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af56:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af5a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800af5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af66:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800af6a:	673b      	str	r3, [r7, #112]	; 0x70
 800af6c:	2300      	movs	r3, #0
 800af6e:	677b      	str	r3, [r7, #116]	; 0x74
 800af70:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800af74:	460b      	mov	r3, r1
 800af76:	4313      	orrs	r3, r2
 800af78:	d03b      	beq.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800af7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af86:	d01f      	beq.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800af88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af8c:	d818      	bhi.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800af8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af92:	d003      	beq.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800af94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af98:	d007      	beq.n	800afaa <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800af9a:	e011      	b.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af9c:	4b33      	ldr	r3, [pc, #204]	; (800b06c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800af9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa0:	4a32      	ldr	r2, [pc, #200]	; (800b06c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800afa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800afa8:	e00f      	b.n	800afca <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800afaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afae:	3328      	adds	r3, #40	; 0x28
 800afb0:	2101      	movs	r1, #1
 800afb2:	4618      	mov	r0, r3
 800afb4:	f001 fba2 	bl	800c6fc <RCCEx_PLL3_Config>
 800afb8:	4603      	mov	r3, r0
 800afba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800afbe:	e004      	b.n	800afca <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800afc0:	2301      	movs	r3, #1
 800afc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800afc6:	e000      	b.n	800afca <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800afc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d10b      	bne.n	800afea <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800afd2:	4b26      	ldr	r3, [pc, #152]	; (800b06c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800afd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afd6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800afda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afe2:	4a22      	ldr	r2, [pc, #136]	; (800b06c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800afe4:	430b      	orrs	r3, r1
 800afe6:	6553      	str	r3, [r2, #84]	; 0x54
 800afe8:	e003      	b.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800aff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800affe:	66bb      	str	r3, [r7, #104]	; 0x68
 800b000:	2300      	movs	r3, #0
 800b002:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b004:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b008:	460b      	mov	r3, r1
 800b00a:	4313      	orrs	r3, r2
 800b00c:	d034      	beq.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b00e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b014:	2b00      	cmp	r3, #0
 800b016:	d003      	beq.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b01c:	d007      	beq.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b01e:	e011      	b.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b020:	4b12      	ldr	r3, [pc, #72]	; (800b06c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b024:	4a11      	ldr	r2, [pc, #68]	; (800b06c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b02a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b02c:	e00e      	b.n	800b04c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b02e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b032:	3308      	adds	r3, #8
 800b034:	2102      	movs	r1, #2
 800b036:	4618      	mov	r0, r3
 800b038:	f001 faae 	bl	800c598 <RCCEx_PLL2_Config>
 800b03c:	4603      	mov	r3, r0
 800b03e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b042:	e003      	b.n	800b04c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b044:	2301      	movs	r3, #1
 800b046:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b04a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b04c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b050:	2b00      	cmp	r3, #0
 800b052:	d10d      	bne.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b054:	4b05      	ldr	r3, [pc, #20]	; (800b06c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b058:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b05c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b062:	4a02      	ldr	r2, [pc, #8]	; (800b06c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b064:	430b      	orrs	r3, r1
 800b066:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b068:	e006      	b.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b06a:	bf00      	nop
 800b06c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b070:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b074:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b080:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b084:	663b      	str	r3, [r7, #96]	; 0x60
 800b086:	2300      	movs	r3, #0
 800b088:	667b      	str	r3, [r7, #100]	; 0x64
 800b08a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b08e:	460b      	mov	r3, r1
 800b090:	4313      	orrs	r3, r2
 800b092:	d00c      	beq.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b094:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b098:	3328      	adds	r3, #40	; 0x28
 800b09a:	2102      	movs	r1, #2
 800b09c:	4618      	mov	r0, r3
 800b09e:	f001 fb2d 	bl	800c6fc <RCCEx_PLL3_Config>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d002      	beq.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b0ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b0ba:	65bb      	str	r3, [r7, #88]	; 0x58
 800b0bc:	2300      	movs	r3, #0
 800b0be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b0c0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b0c4:	460b      	mov	r3, r1
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	d036      	beq.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b0ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b0d4:	d018      	beq.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b0d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b0da:	d811      	bhi.n	800b100 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b0dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0e0:	d014      	beq.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b0e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0e6:	d80b      	bhi.n	800b100 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d011      	beq.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b0ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0f0:	d106      	bne.n	800b100 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0f2:	4bb7      	ldr	r3, [pc, #732]	; (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f6:	4ab6      	ldr	r2, [pc, #728]	; (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b0f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b0fe:	e008      	b.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b100:	2301      	movs	r3, #1
 800b102:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b106:	e004      	b.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b108:	bf00      	nop
 800b10a:	e002      	b.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b10c:	bf00      	nop
 800b10e:	e000      	b.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b110:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b112:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b116:	2b00      	cmp	r3, #0
 800b118:	d10a      	bne.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b11a:	4bad      	ldr	r3, [pc, #692]	; (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b11c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b11e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b126:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b128:	4aa9      	ldr	r2, [pc, #676]	; (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b12a:	430b      	orrs	r3, r1
 800b12c:	6553      	str	r3, [r2, #84]	; 0x54
 800b12e:	e003      	b.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b130:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b134:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b140:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b144:	653b      	str	r3, [r7, #80]	; 0x50
 800b146:	2300      	movs	r3, #0
 800b148:	657b      	str	r3, [r7, #84]	; 0x54
 800b14a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b14e:	460b      	mov	r3, r1
 800b150:	4313      	orrs	r3, r2
 800b152:	d009      	beq.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b154:	4b9e      	ldr	r3, [pc, #632]	; (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b158:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b15c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b162:	4a9b      	ldr	r2, [pc, #620]	; (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b164:	430b      	orrs	r3, r1
 800b166:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b170:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b174:	64bb      	str	r3, [r7, #72]	; 0x48
 800b176:	2300      	movs	r3, #0
 800b178:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b17a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b17e:	460b      	mov	r3, r1
 800b180:	4313      	orrs	r3, r2
 800b182:	d009      	beq.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b184:	4b92      	ldr	r3, [pc, #584]	; (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b188:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b18c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b190:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b192:	4a8f      	ldr	r2, [pc, #572]	; (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b194:	430b      	orrs	r3, r1
 800b196:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b198:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b1a4:	643b      	str	r3, [r7, #64]	; 0x40
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	647b      	str	r3, [r7, #68]	; 0x44
 800b1aa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	d00e      	beq.n	800b1d2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b1b4:	4b86      	ldr	r3, [pc, #536]	; (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b1b6:	691b      	ldr	r3, [r3, #16]
 800b1b8:	4a85      	ldr	r2, [pc, #532]	; (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b1ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b1be:	6113      	str	r3, [r2, #16]
 800b1c0:	4b83      	ldr	r3, [pc, #524]	; (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b1c2:	6919      	ldr	r1, [r3, #16]
 800b1c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b1cc:	4a80      	ldr	r2, [pc, #512]	; (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b1ce:	430b      	orrs	r3, r1
 800b1d0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b1d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1da:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b1de:	63bb      	str	r3, [r7, #56]	; 0x38
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1e4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b1e8:	460b      	mov	r3, r1
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	d009      	beq.n	800b202 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b1ee:	4b78      	ldr	r3, [pc, #480]	; (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b1f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1f2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b1f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1fc:	4a74      	ldr	r2, [pc, #464]	; (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b1fe:	430b      	orrs	r3, r1
 800b200:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b20e:	633b      	str	r3, [r7, #48]	; 0x30
 800b210:	2300      	movs	r3, #0
 800b212:	637b      	str	r3, [r7, #52]	; 0x34
 800b214:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b218:	460b      	mov	r3, r1
 800b21a:	4313      	orrs	r3, r2
 800b21c:	d00a      	beq.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b21e:	4b6c      	ldr	r3, [pc, #432]	; (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b222:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b22a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b22e:	4a68      	ldr	r2, [pc, #416]	; (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b230:	430b      	orrs	r3, r1
 800b232:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23c:	2100      	movs	r1, #0
 800b23e:	62b9      	str	r1, [r7, #40]	; 0x28
 800b240:	f003 0301 	and.w	r3, r3, #1
 800b244:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b246:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b24a:	460b      	mov	r3, r1
 800b24c:	4313      	orrs	r3, r2
 800b24e:	d011      	beq.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b254:	3308      	adds	r3, #8
 800b256:	2100      	movs	r1, #0
 800b258:	4618      	mov	r0, r3
 800b25a:	f001 f99d 	bl	800c598 <RCCEx_PLL2_Config>
 800b25e:	4603      	mov	r3, r0
 800b260:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b264:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d003      	beq.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b26c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b270:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27c:	2100      	movs	r1, #0
 800b27e:	6239      	str	r1, [r7, #32]
 800b280:	f003 0302 	and.w	r3, r3, #2
 800b284:	627b      	str	r3, [r7, #36]	; 0x24
 800b286:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b28a:	460b      	mov	r3, r1
 800b28c:	4313      	orrs	r3, r2
 800b28e:	d011      	beq.n	800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b294:	3308      	adds	r3, #8
 800b296:	2101      	movs	r1, #1
 800b298:	4618      	mov	r0, r3
 800b29a:	f001 f97d 	bl	800c598 <RCCEx_PLL2_Config>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b2a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d003      	beq.n	800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b2b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2bc:	2100      	movs	r1, #0
 800b2be:	61b9      	str	r1, [r7, #24]
 800b2c0:	f003 0304 	and.w	r3, r3, #4
 800b2c4:	61fb      	str	r3, [r7, #28]
 800b2c6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	d011      	beq.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b2d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2d4:	3308      	adds	r3, #8
 800b2d6:	2102      	movs	r1, #2
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f001 f95d 	bl	800c598 <RCCEx_PLL2_Config>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b2e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d003      	beq.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b2f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fc:	2100      	movs	r1, #0
 800b2fe:	6139      	str	r1, [r7, #16]
 800b300:	f003 0308 	and.w	r3, r3, #8
 800b304:	617b      	str	r3, [r7, #20]
 800b306:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b30a:	460b      	mov	r3, r1
 800b30c:	4313      	orrs	r3, r2
 800b30e:	d011      	beq.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b310:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b314:	3328      	adds	r3, #40	; 0x28
 800b316:	2100      	movs	r1, #0
 800b318:	4618      	mov	r0, r3
 800b31a:	f001 f9ef 	bl	800c6fc <RCCEx_PLL3_Config>
 800b31e:	4603      	mov	r3, r0
 800b320:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800b324:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d003      	beq.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b32c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b330:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33c:	2100      	movs	r1, #0
 800b33e:	60b9      	str	r1, [r7, #8]
 800b340:	f003 0310 	and.w	r3, r3, #16
 800b344:	60fb      	str	r3, [r7, #12]
 800b346:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b34a:	460b      	mov	r3, r1
 800b34c:	4313      	orrs	r3, r2
 800b34e:	d011      	beq.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b354:	3328      	adds	r3, #40	; 0x28
 800b356:	2101      	movs	r1, #1
 800b358:	4618      	mov	r0, r3
 800b35a:	f001 f9cf 	bl	800c6fc <RCCEx_PLL3_Config>
 800b35e:	4603      	mov	r3, r0
 800b360:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b364:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d003      	beq.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b36c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b370:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b374:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37c:	2100      	movs	r1, #0
 800b37e:	6039      	str	r1, [r7, #0]
 800b380:	f003 0320 	and.w	r3, r3, #32
 800b384:	607b      	str	r3, [r7, #4]
 800b386:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b38a:	460b      	mov	r3, r1
 800b38c:	4313      	orrs	r3, r2
 800b38e:	d011      	beq.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b394:	3328      	adds	r3, #40	; 0x28
 800b396:	2102      	movs	r1, #2
 800b398:	4618      	mov	r0, r3
 800b39a:	f001 f9af 	bl	800c6fc <RCCEx_PLL3_Config>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b3a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d003      	beq.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800b3b4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d101      	bne.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	e000      	b.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800b3c0:	2301      	movs	r3, #1
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b3ce:	bf00      	nop
 800b3d0:	58024400 	.word	0x58024400

0800b3d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b090      	sub	sp, #64	; 0x40
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b3de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3e2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800b3e6:	430b      	orrs	r3, r1
 800b3e8:	f040 8094 	bne.w	800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b3ec:	4b9b      	ldr	r3, [pc, #620]	; (800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b3ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3f0:	f003 0307 	and.w	r3, r3, #7
 800b3f4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f8:	2b04      	cmp	r3, #4
 800b3fa:	f200 8087 	bhi.w	800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b3fe:	a201      	add	r2, pc, #4	; (adr r2, 800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b404:	0800b419 	.word	0x0800b419
 800b408:	0800b441 	.word	0x0800b441
 800b40c:	0800b469 	.word	0x0800b469
 800b410:	0800b505 	.word	0x0800b505
 800b414:	0800b491 	.word	0x0800b491
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b418:	4b90      	ldr	r3, [pc, #576]	; (800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b420:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b424:	d108      	bne.n	800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b42a:	4618      	mov	r0, r3
 800b42c:	f000 ff62 	bl	800c2f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b432:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b434:	f000 bc93 	b.w	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b438:	2300      	movs	r3, #0
 800b43a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b43c:	f000 bc8f 	b.w	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b440:	4b86      	ldr	r3, [pc, #536]	; (800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b448:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b44c:	d108      	bne.n	800b460 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b44e:	f107 0318 	add.w	r3, r7, #24
 800b452:	4618      	mov	r0, r3
 800b454:	f000 fca6 	bl	800bda4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b458:	69bb      	ldr	r3, [r7, #24]
 800b45a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b45c:	f000 bc7f 	b.w	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b460:	2300      	movs	r3, #0
 800b462:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b464:	f000 bc7b 	b.w	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b468:	4b7c      	ldr	r3, [pc, #496]	; (800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b474:	d108      	bne.n	800b488 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b476:	f107 030c 	add.w	r3, r7, #12
 800b47a:	4618      	mov	r0, r3
 800b47c:	f000 fde6 	bl	800c04c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b484:	f000 bc6b 	b.w	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b488:	2300      	movs	r3, #0
 800b48a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b48c:	f000 bc67 	b.w	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b490:	4b72      	ldr	r3, [pc, #456]	; (800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b494:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b498:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b49a:	4b70      	ldr	r3, [pc, #448]	; (800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f003 0304 	and.w	r3, r3, #4
 800b4a2:	2b04      	cmp	r3, #4
 800b4a4:	d10c      	bne.n	800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d109      	bne.n	800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4ac:	4b6b      	ldr	r3, [pc, #428]	; (800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	08db      	lsrs	r3, r3, #3
 800b4b2:	f003 0303 	and.w	r3, r3, #3
 800b4b6:	4a6a      	ldr	r2, [pc, #424]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b4b8:	fa22 f303 	lsr.w	r3, r2, r3
 800b4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4be:	e01f      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b4c0:	4b66      	ldr	r3, [pc, #408]	; (800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4cc:	d106      	bne.n	800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b4ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4d4:	d102      	bne.n	800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b4d6:	4b63      	ldr	r3, [pc, #396]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b4d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4da:	e011      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b4dc:	4b5f      	ldr	r3, [pc, #380]	; (800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4e8:	d106      	bne.n	800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b4ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4f0:	d102      	bne.n	800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b4f2:	4b5d      	ldr	r3, [pc, #372]	; (800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4f6:	e003      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b4fc:	f000 bc2f 	b.w	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b500:	f000 bc2d 	b.w	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b504:	4b59      	ldr	r3, [pc, #356]	; (800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b506:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b508:	f000 bc29 	b.w	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b50c:	2300      	movs	r3, #0
 800b50e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b510:	f000 bc25 	b.w	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b514:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b518:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b51c:	430b      	orrs	r3, r1
 800b51e:	f040 80a7 	bne.w	800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b522:	4b4e      	ldr	r3, [pc, #312]	; (800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b526:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b52a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b52e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b532:	d054      	beq.n	800b5de <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800b534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b536:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b53a:	f200 808b 	bhi.w	800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b540:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b544:	f000 8083 	beq.w	800b64e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800b548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b54e:	f200 8081 	bhi.w	800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b554:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b558:	d02f      	beq.n	800b5ba <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b560:	d878      	bhi.n	800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b564:	2b00      	cmp	r3, #0
 800b566:	d004      	beq.n	800b572 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800b568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b56e:	d012      	beq.n	800b596 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800b570:	e070      	b.n	800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b572:	4b3a      	ldr	r3, [pc, #232]	; (800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b57a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b57e:	d107      	bne.n	800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b584:	4618      	mov	r0, r3
 800b586:	f000 feb5 	bl	800c2f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b58c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b58e:	e3e6      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b590:	2300      	movs	r3, #0
 800b592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b594:	e3e3      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b596:	4b31      	ldr	r3, [pc, #196]	; (800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b59e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5a2:	d107      	bne.n	800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5a4:	f107 0318 	add.w	r3, r7, #24
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f000 fbfb 	bl	800bda4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b5ae:	69bb      	ldr	r3, [r7, #24]
 800b5b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5b2:	e3d4      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5b8:	e3d1      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b5ba:	4b28      	ldr	r3, [pc, #160]	; (800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5c6:	d107      	bne.n	800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5c8:	f107 030c 	add.w	r3, r7, #12
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f000 fd3d 	bl	800c04c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5d6:	e3c2      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5dc:	e3bf      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b5de:	4b1f      	ldr	r3, [pc, #124]	; (800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b5e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b5e6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b5e8:	4b1c      	ldr	r3, [pc, #112]	; (800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f003 0304 	and.w	r3, r3, #4
 800b5f0:	2b04      	cmp	r3, #4
 800b5f2:	d10c      	bne.n	800b60e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800b5f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d109      	bne.n	800b60e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5fa:	4b18      	ldr	r3, [pc, #96]	; (800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	08db      	lsrs	r3, r3, #3
 800b600:	f003 0303 	and.w	r3, r3, #3
 800b604:	4a16      	ldr	r2, [pc, #88]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b606:	fa22 f303 	lsr.w	r3, r2, r3
 800b60a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b60c:	e01e      	b.n	800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b60e:	4b13      	ldr	r3, [pc, #76]	; (800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b61a:	d106      	bne.n	800b62a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800b61c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b61e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b622:	d102      	bne.n	800b62a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b624:	4b0f      	ldr	r3, [pc, #60]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b626:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b628:	e010      	b.n	800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b62a:	4b0c      	ldr	r3, [pc, #48]	; (800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b632:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b636:	d106      	bne.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800b638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b63a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b63e:	d102      	bne.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b640:	4b09      	ldr	r3, [pc, #36]	; (800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b642:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b644:	e002      	b.n	800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b646:	2300      	movs	r3, #0
 800b648:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b64a:	e388      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b64c:	e387      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b64e:	4b07      	ldr	r3, [pc, #28]	; (800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b650:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b652:	e384      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b654:	2300      	movs	r3, #0
 800b656:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b658:	e381      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b65a:	bf00      	nop
 800b65c:	58024400 	.word	0x58024400
 800b660:	03d09000 	.word	0x03d09000
 800b664:	003d0900 	.word	0x003d0900
 800b668:	02faf080 	.word	0x02faf080
 800b66c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b670:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b674:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b678:	430b      	orrs	r3, r1
 800b67a:	f040 809c 	bne.w	800b7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b67e:	4b9e      	ldr	r3, [pc, #632]	; (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b682:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b686:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b68e:	d054      	beq.n	800b73a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800b690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b692:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b696:	f200 808b 	bhi.w	800b7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b6a0:	f000 8083 	beq.w	800b7aa <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800b6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b6aa:	f200 8081 	bhi.w	800b7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6b4:	d02f      	beq.n	800b716 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800b6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6bc:	d878      	bhi.n	800b7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d004      	beq.n	800b6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b6ca:	d012      	beq.n	800b6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800b6cc:	e070      	b.n	800b7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b6ce:	4b8a      	ldr	r3, [pc, #552]	; (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6da:	d107      	bne.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b6dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f000 fe07 	bl	800c2f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6ea:	e338      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6f0:	e335      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b6f2:	4b81      	ldr	r3, [pc, #516]	; (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6fe:	d107      	bne.n	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b700:	f107 0318 	add.w	r3, r7, #24
 800b704:	4618      	mov	r0, r3
 800b706:	f000 fb4d 	bl	800bda4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b70a:	69bb      	ldr	r3, [r7, #24]
 800b70c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b70e:	e326      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b710:	2300      	movs	r3, #0
 800b712:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b714:	e323      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b716:	4b78      	ldr	r3, [pc, #480]	; (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b71e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b722:	d107      	bne.n	800b734 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b724:	f107 030c 	add.w	r3, r7, #12
 800b728:	4618      	mov	r0, r3
 800b72a:	f000 fc8f 	bl	800c04c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b732:	e314      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b734:	2300      	movs	r3, #0
 800b736:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b738:	e311      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b73a:	4b6f      	ldr	r3, [pc, #444]	; (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b73c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b73e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b742:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b744:	4b6c      	ldr	r3, [pc, #432]	; (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f003 0304 	and.w	r3, r3, #4
 800b74c:	2b04      	cmp	r3, #4
 800b74e:	d10c      	bne.n	800b76a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b752:	2b00      	cmp	r3, #0
 800b754:	d109      	bne.n	800b76a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b756:	4b68      	ldr	r3, [pc, #416]	; (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	08db      	lsrs	r3, r3, #3
 800b75c:	f003 0303 	and.w	r3, r3, #3
 800b760:	4a66      	ldr	r2, [pc, #408]	; (800b8fc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b762:	fa22 f303 	lsr.w	r3, r2, r3
 800b766:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b768:	e01e      	b.n	800b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b76a:	4b63      	ldr	r3, [pc, #396]	; (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b776:	d106      	bne.n	800b786 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b77a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b77e:	d102      	bne.n	800b786 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b780:	4b5f      	ldr	r3, [pc, #380]	; (800b900 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b782:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b784:	e010      	b.n	800b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b786:	4b5c      	ldr	r3, [pc, #368]	; (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b78e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b792:	d106      	bne.n	800b7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800b794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b79a:	d102      	bne.n	800b7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b79c:	4b59      	ldr	r3, [pc, #356]	; (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b79e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7a0:	e002      	b.n	800b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b7a6:	e2da      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b7a8:	e2d9      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b7aa:	4b57      	ldr	r3, [pc, #348]	; (800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7ae:	e2d6      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7b4:	e2d3      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b7b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7ba:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b7be:	430b      	orrs	r3, r1
 800b7c0:	f040 80a7 	bne.w	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b7c4:	4b4c      	ldr	r3, [pc, #304]	; (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b7c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7c8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b7cc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7d4:	d055      	beq.n	800b882 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800b7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7dc:	f200 8096 	bhi.w	800b90c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b7e6:	f000 8084 	beq.w	800b8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800b7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b7f0:	f200 808c 	bhi.w	800b90c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7fa:	d030      	beq.n	800b85e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b802:	f200 8083 	bhi.w	800b90c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d004      	beq.n	800b816 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800b80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b812:	d012      	beq.n	800b83a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800b814:	e07a      	b.n	800b90c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b816:	4b38      	ldr	r3, [pc, #224]	; (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b81e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b822:	d107      	bne.n	800b834 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b828:	4618      	mov	r0, r3
 800b82a:	f000 fd63 	bl	800c2f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b830:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b832:	e294      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b834:	2300      	movs	r3, #0
 800b836:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b838:	e291      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b83a:	4b2f      	ldr	r3, [pc, #188]	; (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b842:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b846:	d107      	bne.n	800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b848:	f107 0318 	add.w	r3, r7, #24
 800b84c:	4618      	mov	r0, r3
 800b84e:	f000 faa9 	bl	800bda4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b852:	69bb      	ldr	r3, [r7, #24]
 800b854:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b856:	e282      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b858:	2300      	movs	r3, #0
 800b85a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b85c:	e27f      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b85e:	4b26      	ldr	r3, [pc, #152]	; (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b866:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b86a:	d107      	bne.n	800b87c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b86c:	f107 030c 	add.w	r3, r7, #12
 800b870:	4618      	mov	r0, r3
 800b872:	f000 fbeb 	bl	800c04c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b87a:	e270      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b87c:	2300      	movs	r3, #0
 800b87e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b880:	e26d      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b882:	4b1d      	ldr	r3, [pc, #116]	; (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b886:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b88a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b88c:	4b1a      	ldr	r3, [pc, #104]	; (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f003 0304 	and.w	r3, r3, #4
 800b894:	2b04      	cmp	r3, #4
 800b896:	d10c      	bne.n	800b8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800b898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d109      	bne.n	800b8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b89e:	4b16      	ldr	r3, [pc, #88]	; (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	08db      	lsrs	r3, r3, #3
 800b8a4:	f003 0303 	and.w	r3, r3, #3
 800b8a8:	4a14      	ldr	r2, [pc, #80]	; (800b8fc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b8aa:	fa22 f303 	lsr.w	r3, r2, r3
 800b8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8b0:	e01e      	b.n	800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b8b2:	4b11      	ldr	r3, [pc, #68]	; (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8be:	d106      	bne.n	800b8ce <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b8c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8c6:	d102      	bne.n	800b8ce <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b8c8:	4b0d      	ldr	r3, [pc, #52]	; (800b900 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8cc:	e010      	b.n	800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b8ce:	4b0a      	ldr	r3, [pc, #40]	; (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8da:	d106      	bne.n	800b8ea <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800b8dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8e2:	d102      	bne.n	800b8ea <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b8e4:	4b07      	ldr	r3, [pc, #28]	; (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b8e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8e8:	e002      	b.n	800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b8ee:	e236      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b8f0:	e235      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b8f2:	4b05      	ldr	r3, [pc, #20]	; (800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8f6:	e232      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b8f8:	58024400 	.word	0x58024400
 800b8fc:	03d09000 	.word	0x03d09000
 800b900:	003d0900 	.word	0x003d0900
 800b904:	02faf080 	.word	0x02faf080
 800b908:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800b90c:	2300      	movs	r3, #0
 800b90e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b910:	e225      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b912:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b916:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b91a:	430b      	orrs	r3, r1
 800b91c:	f040 8085 	bne.w	800ba2a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b920:	4b9c      	ldr	r3, [pc, #624]	; (800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b924:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b928:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b930:	d06b      	beq.n	800ba0a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b938:	d874      	bhi.n	800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b93c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b940:	d056      	beq.n	800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800b942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b944:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b948:	d86c      	bhi.n	800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b950:	d03b      	beq.n	800b9ca <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b954:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b958:	d864      	bhi.n	800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b95c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b960:	d021      	beq.n	800b9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b964:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b968:	d85c      	bhi.n	800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d004      	beq.n	800b97a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b976:	d004      	beq.n	800b982 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800b978:	e054      	b.n	800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b97a:	f7fe fb5f 	bl	800a03c <HAL_RCC_GetPCLK1Freq>
 800b97e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b980:	e1ed      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b982:	4b84      	ldr	r3, [pc, #528]	; (800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b98a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b98e:	d107      	bne.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b990:	f107 0318 	add.w	r3, r7, #24
 800b994:	4618      	mov	r0, r3
 800b996:	f000 fa05 	bl	800bda4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b99a:	69fb      	ldr	r3, [r7, #28]
 800b99c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b99e:	e1de      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9a4:	e1db      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b9a6:	4b7b      	ldr	r3, [pc, #492]	; (800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9b2:	d107      	bne.n	800b9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9b4:	f107 030c 	add.w	r3, r7, #12
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f000 fb47 	bl	800c04c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9c2:	e1cc      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9c8:	e1c9      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b9ca:	4b72      	ldr	r3, [pc, #456]	; (800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f003 0304 	and.w	r3, r3, #4
 800b9d2:	2b04      	cmp	r3, #4
 800b9d4:	d109      	bne.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b9d6:	4b6f      	ldr	r3, [pc, #444]	; (800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	08db      	lsrs	r3, r3, #3
 800b9dc:	f003 0303 	and.w	r3, r3, #3
 800b9e0:	4a6d      	ldr	r2, [pc, #436]	; (800bb98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b9e2:	fa22 f303 	lsr.w	r3, r2, r3
 800b9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9e8:	e1b9      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9ee:	e1b6      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b9f0:	4b68      	ldr	r3, [pc, #416]	; (800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9fc:	d102      	bne.n	800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800b9fe:	4b67      	ldr	r3, [pc, #412]	; (800bb9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800ba00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba02:	e1ac      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba04:	2300      	movs	r3, #0
 800ba06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba08:	e1a9      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ba0a:	4b62      	ldr	r3, [pc, #392]	; (800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba16:	d102      	bne.n	800ba1e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800ba18:	4b61      	ldr	r3, [pc, #388]	; (800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800ba1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba1c:	e19f      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba22:	e19c      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ba24:	2300      	movs	r3, #0
 800ba26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba28:	e199      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ba2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba2e:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800ba32:	430b      	orrs	r3, r1
 800ba34:	d173      	bne.n	800bb1e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ba36:	4b57      	ldr	r3, [pc, #348]	; (800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ba38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ba3e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ba40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba46:	d02f      	beq.n	800baa8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800ba48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba4e:	d863      	bhi.n	800bb18 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800ba50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d004      	beq.n	800ba60 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800ba56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba5c:	d012      	beq.n	800ba84 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800ba5e:	e05b      	b.n	800bb18 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba60:	4b4c      	ldr	r3, [pc, #304]	; (800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba6c:	d107      	bne.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba6e:	f107 0318 	add.w	r3, r7, #24
 800ba72:	4618      	mov	r0, r3
 800ba74:	f000 f996 	bl	800bda4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ba78:	69bb      	ldr	r3, [r7, #24]
 800ba7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba7c:	e16f      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba82:	e16c      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ba84:	4b43      	ldr	r3, [pc, #268]	; (800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba90:	d107      	bne.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba92:	f107 030c 	add.w	r3, r7, #12
 800ba96:	4618      	mov	r0, r3
 800ba98:	f000 fad8 	bl	800c04c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800baa0:	e15d      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800baa2:	2300      	movs	r3, #0
 800baa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800baa6:	e15a      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800baa8:	4b3a      	ldr	r3, [pc, #232]	; (800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800baaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bab0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bab2:	4b38      	ldr	r3, [pc, #224]	; (800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f003 0304 	and.w	r3, r3, #4
 800baba:	2b04      	cmp	r3, #4
 800babc:	d10c      	bne.n	800bad8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800babe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d109      	bne.n	800bad8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bac4:	4b33      	ldr	r3, [pc, #204]	; (800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	08db      	lsrs	r3, r3, #3
 800baca:	f003 0303 	and.w	r3, r3, #3
 800bace:	4a32      	ldr	r2, [pc, #200]	; (800bb98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800bad0:	fa22 f303 	lsr.w	r3, r2, r3
 800bad4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bad6:	e01e      	b.n	800bb16 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bad8:	4b2e      	ldr	r3, [pc, #184]	; (800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bae4:	d106      	bne.n	800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800bae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bae8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800baec:	d102      	bne.n	800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800baee:	4b2b      	ldr	r3, [pc, #172]	; (800bb9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800baf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800baf2:	e010      	b.n	800bb16 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800baf4:	4b27      	ldr	r3, [pc, #156]	; (800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bafc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb00:	d106      	bne.n	800bb10 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800bb02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb08:	d102      	bne.n	800bb10 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bb0a:	4b25      	ldr	r3, [pc, #148]	; (800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800bb0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb0e:	e002      	b.n	800bb16 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bb10:	2300      	movs	r3, #0
 800bb12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bb14:	e123      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bb16:	e122      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb1c:	e11f      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800bb1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb22:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800bb26:	430b      	orrs	r3, r1
 800bb28:	d13c      	bne.n	800bba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800bb2a:	4b1a      	ldr	r3, [pc, #104]	; (800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bb2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb32:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d004      	beq.n	800bb44 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800bb3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb40:	d012      	beq.n	800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800bb42:	e023      	b.n	800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb44:	4b13      	ldr	r3, [pc, #76]	; (800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb50:	d107      	bne.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb56:	4618      	mov	r0, r3
 800bb58:	f000 fbcc 	bl	800c2f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb60:	e0fd      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb62:	2300      	movs	r3, #0
 800bb64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb66:	e0fa      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb68:	4b0a      	ldr	r3, [pc, #40]	; (800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb74:	d107      	bne.n	800bb86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb76:	f107 0318 	add.w	r3, r7, #24
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f000 f912 	bl	800bda4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bb80:	6a3b      	ldr	r3, [r7, #32]
 800bb82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb84:	e0eb      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb86:	2300      	movs	r3, #0
 800bb88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb8a:	e0e8      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb90:	e0e5      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bb92:	bf00      	nop
 800bb94:	58024400 	.word	0x58024400
 800bb98:	03d09000 	.word	0x03d09000
 800bb9c:	003d0900 	.word	0x003d0900
 800bba0:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bba4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bba8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800bbac:	430b      	orrs	r3, r1
 800bbae:	f040 8085 	bne.w	800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800bbb2:	4b6d      	ldr	r3, [pc, #436]	; (800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bbb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbb6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800bbba:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bbc2:	d06b      	beq.n	800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800bbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bbca:	d874      	bhi.n	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbd2:	d056      	beq.n	800bc82 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800bbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbda:	d86c      	bhi.n	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbde:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bbe2:	d03b      	beq.n	800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800bbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bbea:	d864      	bhi.n	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbf2:	d021      	beq.n	800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800bbf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbfa:	d85c      	bhi.n	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d004      	beq.n	800bc0c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800bc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc08:	d004      	beq.n	800bc14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800bc0a:	e054      	b.n	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bc0c:	f000 f8b4 	bl	800bd78 <HAL_RCCEx_GetD3PCLK1Freq>
 800bc10:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bc12:	e0a4      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc14:	4b54      	ldr	r3, [pc, #336]	; (800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc20:	d107      	bne.n	800bc32 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc22:	f107 0318 	add.w	r3, r7, #24
 800bc26:	4618      	mov	r0, r3
 800bc28:	f000 f8bc 	bl	800bda4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bc2c:	69fb      	ldr	r3, [r7, #28]
 800bc2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc30:	e095      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc32:	2300      	movs	r3, #0
 800bc34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc36:	e092      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc38:	4b4b      	ldr	r3, [pc, #300]	; (800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc44:	d107      	bne.n	800bc56 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc46:	f107 030c 	add.w	r3, r7, #12
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f000 f9fe 	bl	800c04c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc54:	e083      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc56:	2300      	movs	r3, #0
 800bc58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc5a:	e080      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bc5c:	4b42      	ldr	r3, [pc, #264]	; (800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f003 0304 	and.w	r3, r3, #4
 800bc64:	2b04      	cmp	r3, #4
 800bc66:	d109      	bne.n	800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc68:	4b3f      	ldr	r3, [pc, #252]	; (800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	08db      	lsrs	r3, r3, #3
 800bc6e:	f003 0303 	and.w	r3, r3, #3
 800bc72:	4a3e      	ldr	r2, [pc, #248]	; (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800bc74:	fa22 f303 	lsr.w	r3, r2, r3
 800bc78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc7a:	e070      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc80:	e06d      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bc82:	4b39      	ldr	r3, [pc, #228]	; (800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc8e:	d102      	bne.n	800bc96 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800bc90:	4b37      	ldr	r3, [pc, #220]	; (800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800bc92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc94:	e063      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc96:	2300      	movs	r3, #0
 800bc98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc9a:	e060      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bc9c:	4b32      	ldr	r3, [pc, #200]	; (800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bca4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bca8:	d102      	bne.n	800bcb0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800bcaa:	4b32      	ldr	r3, [pc, #200]	; (800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800bcac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcae:	e056      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcb4:	e053      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcba:	e050      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bcbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcc0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800bcc4:	430b      	orrs	r3, r1
 800bcc6:	d148      	bne.n	800bd5a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800bcc8:	4b27      	ldr	r3, [pc, #156]	; (800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bcca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bccc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bcd0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bcd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcd8:	d02a      	beq.n	800bd30 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800bcda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bce0:	d838      	bhi.n	800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800bce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d004      	beq.n	800bcf2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800bce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcee:	d00d      	beq.n	800bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800bcf0:	e030      	b.n	800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bcf2:	4b1d      	ldr	r3, [pc, #116]	; (800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcfe:	d102      	bne.n	800bd06 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800bd00:	4b1c      	ldr	r3, [pc, #112]	; (800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800bd02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd04:	e02b      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd06:	2300      	movs	r3, #0
 800bd08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd0a:	e028      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd0c:	4b16      	ldr	r3, [pc, #88]	; (800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd18:	d107      	bne.n	800bd2a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f000 fae8 	bl	800c2f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd28:	e019      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd2e:	e016      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd30:	4b0d      	ldr	r3, [pc, #52]	; (800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd3c:	d107      	bne.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd3e:	f107 0318 	add.w	r3, r7, #24
 800bd42:	4618      	mov	r0, r3
 800bd44:	f000 f82e 	bl	800bda4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bd48:	69fb      	ldr	r3, [r7, #28]
 800bd4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd4c:	e007      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd52:	e004      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bd54:	2300      	movs	r3, #0
 800bd56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd58:	e001      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800bd5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3740      	adds	r7, #64	; 0x40
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}
 800bd68:	58024400 	.word	0x58024400
 800bd6c:	03d09000 	.word	0x03d09000
 800bd70:	003d0900 	.word	0x003d0900
 800bd74:	02faf080 	.word	0x02faf080

0800bd78 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bd7c:	f7fe f92e 	bl	8009fdc <HAL_RCC_GetHCLKFreq>
 800bd80:	4602      	mov	r2, r0
 800bd82:	4b06      	ldr	r3, [pc, #24]	; (800bd9c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bd84:	6a1b      	ldr	r3, [r3, #32]
 800bd86:	091b      	lsrs	r3, r3, #4
 800bd88:	f003 0307 	and.w	r3, r3, #7
 800bd8c:	4904      	ldr	r1, [pc, #16]	; (800bda0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bd8e:	5ccb      	ldrb	r3, [r1, r3]
 800bd90:	f003 031f 	and.w	r3, r3, #31
 800bd94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	bd80      	pop	{r7, pc}
 800bd9c:	58024400 	.word	0x58024400
 800bda0:	08019db8 	.word	0x08019db8

0800bda4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b089      	sub	sp, #36	; 0x24
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bdac:	4ba1      	ldr	r3, [pc, #644]	; (800c034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdb0:	f003 0303 	and.w	r3, r3, #3
 800bdb4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bdb6:	4b9f      	ldr	r3, [pc, #636]	; (800c034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdba:	0b1b      	lsrs	r3, r3, #12
 800bdbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bdc0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bdc2:	4b9c      	ldr	r3, [pc, #624]	; (800c034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc6:	091b      	lsrs	r3, r3, #4
 800bdc8:	f003 0301 	and.w	r3, r3, #1
 800bdcc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bdce:	4b99      	ldr	r3, [pc, #612]	; (800c034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdd2:	08db      	lsrs	r3, r3, #3
 800bdd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bdd8:	693a      	ldr	r2, [r7, #16]
 800bdda:	fb02 f303 	mul.w	r3, r2, r3
 800bdde:	ee07 3a90 	vmov	s15, r3
 800bde2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bde6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	f000 8111 	beq.w	800c014 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bdf2:	69bb      	ldr	r3, [r7, #24]
 800bdf4:	2b02      	cmp	r3, #2
 800bdf6:	f000 8083 	beq.w	800bf00 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bdfa:	69bb      	ldr	r3, [r7, #24]
 800bdfc:	2b02      	cmp	r3, #2
 800bdfe:	f200 80a1 	bhi.w	800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800be02:	69bb      	ldr	r3, [r7, #24]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d003      	beq.n	800be10 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800be08:	69bb      	ldr	r3, [r7, #24]
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d056      	beq.n	800bebc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800be0e:	e099      	b.n	800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be10:	4b88      	ldr	r3, [pc, #544]	; (800c034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f003 0320 	and.w	r3, r3, #32
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d02d      	beq.n	800be78 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be1c:	4b85      	ldr	r3, [pc, #532]	; (800c034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	08db      	lsrs	r3, r3, #3
 800be22:	f003 0303 	and.w	r3, r3, #3
 800be26:	4a84      	ldr	r2, [pc, #528]	; (800c038 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800be28:	fa22 f303 	lsr.w	r3, r2, r3
 800be2c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	ee07 3a90 	vmov	s15, r3
 800be34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	ee07 3a90 	vmov	s15, r3
 800be3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be46:	4b7b      	ldr	r3, [pc, #492]	; (800c034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be4e:	ee07 3a90 	vmov	s15, r3
 800be52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be56:	ed97 6a03 	vldr	s12, [r7, #12]
 800be5a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c03c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800be76:	e087      	b.n	800bf88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	ee07 3a90 	vmov	s15, r3
 800be7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be82:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c040 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800be86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be8a:	4b6a      	ldr	r3, [pc, #424]	; (800c034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be92:	ee07 3a90 	vmov	s15, r3
 800be96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800be9e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c03c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800beaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800beae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800beb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800beba:	e065      	b.n	800bf88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	ee07 3a90 	vmov	s15, r3
 800bec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bec6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c044 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800beca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bece:	4b59      	ldr	r3, [pc, #356]	; (800c034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bed6:	ee07 3a90 	vmov	s15, r3
 800beda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bede:	ed97 6a03 	vldr	s12, [r7, #12]
 800bee2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c03c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800beea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800beee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800befa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800befe:	e043      	b.n	800bf88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	ee07 3a90 	vmov	s15, r3
 800bf06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf0a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c048 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bf0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf12:	4b48      	ldr	r3, [pc, #288]	; (800c034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf1a:	ee07 3a90 	vmov	s15, r3
 800bf1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf22:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf26:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c03c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bf2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf42:	e021      	b.n	800bf88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	ee07 3a90 	vmov	s15, r3
 800bf4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf4e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c044 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bf52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf56:	4b37      	ldr	r3, [pc, #220]	; (800c034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf5e:	ee07 3a90 	vmov	s15, r3
 800bf62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf66:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf6a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c03c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bf6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf86:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bf88:	4b2a      	ldr	r3, [pc, #168]	; (800c034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf8c:	0a5b      	lsrs	r3, r3, #9
 800bf8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf92:	ee07 3a90 	vmov	s15, r3
 800bf96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfa2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfae:	ee17 2a90 	vmov	r2, s15
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bfb6:	4b1f      	ldr	r3, [pc, #124]	; (800c034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bfb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfba:	0c1b      	lsrs	r3, r3, #16
 800bfbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfc0:	ee07 3a90 	vmov	s15, r3
 800bfc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bfcc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfd0:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfdc:	ee17 2a90 	vmov	r2, s15
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bfe4:	4b13      	ldr	r3, [pc, #76]	; (800c034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bfe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfe8:	0e1b      	lsrs	r3, r3, #24
 800bfea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfee:	ee07 3a90 	vmov	s15, r3
 800bff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bff6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bffa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bffe:	edd7 6a07 	vldr	s13, [r7, #28]
 800c002:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c006:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c00a:	ee17 2a90 	vmov	r2, s15
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c012:	e008      	b.n	800c026 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2200      	movs	r2, #0
 800c018:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2200      	movs	r2, #0
 800c01e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2200      	movs	r2, #0
 800c024:	609a      	str	r2, [r3, #8]
}
 800c026:	bf00      	nop
 800c028:	3724      	adds	r7, #36	; 0x24
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr
 800c032:	bf00      	nop
 800c034:	58024400 	.word	0x58024400
 800c038:	03d09000 	.word	0x03d09000
 800c03c:	46000000 	.word	0x46000000
 800c040:	4c742400 	.word	0x4c742400
 800c044:	4a742400 	.word	0x4a742400
 800c048:	4c3ebc20 	.word	0x4c3ebc20

0800c04c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b089      	sub	sp, #36	; 0x24
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c054:	4ba1      	ldr	r3, [pc, #644]	; (800c2dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c058:	f003 0303 	and.w	r3, r3, #3
 800c05c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c05e:	4b9f      	ldr	r3, [pc, #636]	; (800c2dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c062:	0d1b      	lsrs	r3, r3, #20
 800c064:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c068:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c06a:	4b9c      	ldr	r3, [pc, #624]	; (800c2dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c06e:	0a1b      	lsrs	r3, r3, #8
 800c070:	f003 0301 	and.w	r3, r3, #1
 800c074:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c076:	4b99      	ldr	r3, [pc, #612]	; (800c2dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c07a:	08db      	lsrs	r3, r3, #3
 800c07c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c080:	693a      	ldr	r2, [r7, #16]
 800c082:	fb02 f303 	mul.w	r3, r2, r3
 800c086:	ee07 3a90 	vmov	s15, r3
 800c08a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c08e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	2b00      	cmp	r3, #0
 800c096:	f000 8111 	beq.w	800c2bc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c09a:	69bb      	ldr	r3, [r7, #24]
 800c09c:	2b02      	cmp	r3, #2
 800c09e:	f000 8083 	beq.w	800c1a8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	2b02      	cmp	r3, #2
 800c0a6:	f200 80a1 	bhi.w	800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c0aa:	69bb      	ldr	r3, [r7, #24]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d003      	beq.n	800c0b8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c0b0:	69bb      	ldr	r3, [r7, #24]
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	d056      	beq.n	800c164 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c0b6:	e099      	b.n	800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0b8:	4b88      	ldr	r3, [pc, #544]	; (800c2dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f003 0320 	and.w	r3, r3, #32
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d02d      	beq.n	800c120 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0c4:	4b85      	ldr	r3, [pc, #532]	; (800c2dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	08db      	lsrs	r3, r3, #3
 800c0ca:	f003 0303 	and.w	r3, r3, #3
 800c0ce:	4a84      	ldr	r2, [pc, #528]	; (800c2e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c0d0:	fa22 f303 	lsr.w	r3, r2, r3
 800c0d4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	ee07 3a90 	vmov	s15, r3
 800c0dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	ee07 3a90 	vmov	s15, r3
 800c0e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0ee:	4b7b      	ldr	r3, [pc, #492]	; (800c2dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0f6:	ee07 3a90 	vmov	s15, r3
 800c0fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800c102:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c2e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c10a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c10e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c11a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c11e:	e087      	b.n	800c230 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	ee07 3a90 	vmov	s15, r3
 800c126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c12a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c12e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c132:	4b6a      	ldr	r3, [pc, #424]	; (800c2dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c13a:	ee07 3a90 	vmov	s15, r3
 800c13e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c142:	ed97 6a03 	vldr	s12, [r7, #12]
 800c146:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c2e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c14a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c14e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c15a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c15e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c162:	e065      	b.n	800c230 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	ee07 3a90 	vmov	s15, r3
 800c16a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c16e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c2ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c176:	4b59      	ldr	r3, [pc, #356]	; (800c2dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c17a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c17e:	ee07 3a90 	vmov	s15, r3
 800c182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c186:	ed97 6a03 	vldr	s12, [r7, #12]
 800c18a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c2e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c18e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c19a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c19e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1a6:	e043      	b.n	800c230 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	ee07 3a90 	vmov	s15, r3
 800c1ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c1b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1ba:	4b48      	ldr	r3, [pc, #288]	; (800c2dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c1bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1c2:	ee07 3a90 	vmov	s15, r3
 800c1c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c2e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c1d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1ea:	e021      	b.n	800c230 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	ee07 3a90 	vmov	s15, r3
 800c1f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c2ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c1fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1fe:	4b37      	ldr	r3, [pc, #220]	; (800c2dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c206:	ee07 3a90 	vmov	s15, r3
 800c20a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c20e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c212:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c2e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c21a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c21e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c22a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c22e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c230:	4b2a      	ldr	r3, [pc, #168]	; (800c2dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c234:	0a5b      	lsrs	r3, r3, #9
 800c236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c23a:	ee07 3a90 	vmov	s15, r3
 800c23e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c242:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c246:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c24a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c24e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c252:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c256:	ee17 2a90 	vmov	r2, s15
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c25e:	4b1f      	ldr	r3, [pc, #124]	; (800c2dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c262:	0c1b      	lsrs	r3, r3, #16
 800c264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c268:	ee07 3a90 	vmov	s15, r3
 800c26c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c270:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c274:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c278:	edd7 6a07 	vldr	s13, [r7, #28]
 800c27c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c284:	ee17 2a90 	vmov	r2, s15
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c28c:	4b13      	ldr	r3, [pc, #76]	; (800c2dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c28e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c290:	0e1b      	lsrs	r3, r3, #24
 800c292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c296:	ee07 3a90 	vmov	s15, r3
 800c29a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c29e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2b2:	ee17 2a90 	vmov	r2, s15
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c2ba:	e008      	b.n	800c2ce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	609a      	str	r2, [r3, #8]
}
 800c2ce:	bf00      	nop
 800c2d0:	3724      	adds	r7, #36	; 0x24
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d8:	4770      	bx	lr
 800c2da:	bf00      	nop
 800c2dc:	58024400 	.word	0x58024400
 800c2e0:	03d09000 	.word	0x03d09000
 800c2e4:	46000000 	.word	0x46000000
 800c2e8:	4c742400 	.word	0x4c742400
 800c2ec:	4a742400 	.word	0x4a742400
 800c2f0:	4c3ebc20 	.word	0x4c3ebc20

0800c2f4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b089      	sub	sp, #36	; 0x24
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c2fc:	4ba0      	ldr	r3, [pc, #640]	; (800c580 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c300:	f003 0303 	and.w	r3, r3, #3
 800c304:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c306:	4b9e      	ldr	r3, [pc, #632]	; (800c580 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c30a:	091b      	lsrs	r3, r3, #4
 800c30c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c310:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c312:	4b9b      	ldr	r3, [pc, #620]	; (800c580 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c316:	f003 0301 	and.w	r3, r3, #1
 800c31a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c31c:	4b98      	ldr	r3, [pc, #608]	; (800c580 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c31e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c320:	08db      	lsrs	r3, r3, #3
 800c322:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c326:	693a      	ldr	r2, [r7, #16]
 800c328:	fb02 f303 	mul.w	r3, r2, r3
 800c32c:	ee07 3a90 	vmov	s15, r3
 800c330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c334:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	f000 8111 	beq.w	800c562 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c340:	69bb      	ldr	r3, [r7, #24]
 800c342:	2b02      	cmp	r3, #2
 800c344:	f000 8083 	beq.w	800c44e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c348:	69bb      	ldr	r3, [r7, #24]
 800c34a:	2b02      	cmp	r3, #2
 800c34c:	f200 80a1 	bhi.w	800c492 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c350:	69bb      	ldr	r3, [r7, #24]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d003      	beq.n	800c35e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c356:	69bb      	ldr	r3, [r7, #24]
 800c358:	2b01      	cmp	r3, #1
 800c35a:	d056      	beq.n	800c40a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c35c:	e099      	b.n	800c492 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c35e:	4b88      	ldr	r3, [pc, #544]	; (800c580 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f003 0320 	and.w	r3, r3, #32
 800c366:	2b00      	cmp	r3, #0
 800c368:	d02d      	beq.n	800c3c6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c36a:	4b85      	ldr	r3, [pc, #532]	; (800c580 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	08db      	lsrs	r3, r3, #3
 800c370:	f003 0303 	and.w	r3, r3, #3
 800c374:	4a83      	ldr	r2, [pc, #524]	; (800c584 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c376:	fa22 f303 	lsr.w	r3, r2, r3
 800c37a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	ee07 3a90 	vmov	s15, r3
 800c382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	ee07 3a90 	vmov	s15, r3
 800c38c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c390:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c394:	4b7a      	ldr	r3, [pc, #488]	; (800c580 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c39c:	ee07 3a90 	vmov	s15, r3
 800c3a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3a8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c588 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c3ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3c0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c3c4:	e087      	b.n	800c4d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	ee07 3a90 	vmov	s15, r3
 800c3cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3d0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c58c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c3d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3d8:	4b69      	ldr	r3, [pc, #420]	; (800c580 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c3da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3e0:	ee07 3a90 	vmov	s15, r3
 800c3e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3ec:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c588 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c3f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c400:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c404:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c408:	e065      	b.n	800c4d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	ee07 3a90 	vmov	s15, r3
 800c410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c414:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c590 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c418:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c41c:	4b58      	ldr	r3, [pc, #352]	; (800c580 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c41e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c424:	ee07 3a90 	vmov	s15, r3
 800c428:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c42c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c430:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c588 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c434:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c438:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c43c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c440:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c444:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c448:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c44c:	e043      	b.n	800c4d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	ee07 3a90 	vmov	s15, r3
 800c454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c458:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c594 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c45c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c460:	4b47      	ldr	r3, [pc, #284]	; (800c580 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c468:	ee07 3a90 	vmov	s15, r3
 800c46c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c470:	ed97 6a03 	vldr	s12, [r7, #12]
 800c474:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c588 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c478:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c47c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c480:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c484:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c48c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c490:	e021      	b.n	800c4d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	ee07 3a90 	vmov	s15, r3
 800c498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c49c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c58c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c4a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4a4:	4b36      	ldr	r3, [pc, #216]	; (800c580 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4ac:	ee07 3a90 	vmov	s15, r3
 800c4b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4b8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c588 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c4bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c4d4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c4d6:	4b2a      	ldr	r3, [pc, #168]	; (800c580 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4da:	0a5b      	lsrs	r3, r3, #9
 800c4dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4e0:	ee07 3a90 	vmov	s15, r3
 800c4e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c4f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4fc:	ee17 2a90 	vmov	r2, s15
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c504:	4b1e      	ldr	r3, [pc, #120]	; (800c580 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c508:	0c1b      	lsrs	r3, r3, #16
 800c50a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c50e:	ee07 3a90 	vmov	s15, r3
 800c512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c516:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c51a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c51e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c52a:	ee17 2a90 	vmov	r2, s15
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c532:	4b13      	ldr	r3, [pc, #76]	; (800c580 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c536:	0e1b      	lsrs	r3, r3, #24
 800c538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c53c:	ee07 3a90 	vmov	s15, r3
 800c540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c544:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c548:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c54c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c550:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c558:	ee17 2a90 	vmov	r2, s15
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c560:	e008      	b.n	800c574 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2200      	movs	r2, #0
 800c566:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2200      	movs	r2, #0
 800c56c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2200      	movs	r2, #0
 800c572:	609a      	str	r2, [r3, #8]
}
 800c574:	bf00      	nop
 800c576:	3724      	adds	r7, #36	; 0x24
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr
 800c580:	58024400 	.word	0x58024400
 800c584:	03d09000 	.word	0x03d09000
 800c588:	46000000 	.word	0x46000000
 800c58c:	4c742400 	.word	0x4c742400
 800c590:	4a742400 	.word	0x4a742400
 800c594:	4c3ebc20 	.word	0x4c3ebc20

0800c598 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b084      	sub	sp, #16
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c5a6:	4b53      	ldr	r3, [pc, #332]	; (800c6f4 <RCCEx_PLL2_Config+0x15c>)
 800c5a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5aa:	f003 0303 	and.w	r3, r3, #3
 800c5ae:	2b03      	cmp	r3, #3
 800c5b0:	d101      	bne.n	800c5b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	e099      	b.n	800c6ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c5b6:	4b4f      	ldr	r3, [pc, #316]	; (800c6f4 <RCCEx_PLL2_Config+0x15c>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4a4e      	ldr	r2, [pc, #312]	; (800c6f4 <RCCEx_PLL2_Config+0x15c>)
 800c5bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c5c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c5c2:	f7f6 fc37 	bl	8002e34 <HAL_GetTick>
 800c5c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c5c8:	e008      	b.n	800c5dc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c5ca:	f7f6 fc33 	bl	8002e34 <HAL_GetTick>
 800c5ce:	4602      	mov	r2, r0
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	1ad3      	subs	r3, r2, r3
 800c5d4:	2b02      	cmp	r3, #2
 800c5d6:	d901      	bls.n	800c5dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c5d8:	2303      	movs	r3, #3
 800c5da:	e086      	b.n	800c6ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c5dc:	4b45      	ldr	r3, [pc, #276]	; (800c6f4 <RCCEx_PLL2_Config+0x15c>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d1f0      	bne.n	800c5ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c5e8:	4b42      	ldr	r3, [pc, #264]	; (800c6f4 <RCCEx_PLL2_Config+0x15c>)
 800c5ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	031b      	lsls	r3, r3, #12
 800c5f6:	493f      	ldr	r1, [pc, #252]	; (800c6f4 <RCCEx_PLL2_Config+0x15c>)
 800c5f8:	4313      	orrs	r3, r2
 800c5fa:	628b      	str	r3, [r1, #40]	; 0x28
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	3b01      	subs	r3, #1
 800c602:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	689b      	ldr	r3, [r3, #8]
 800c60a:	3b01      	subs	r3, #1
 800c60c:	025b      	lsls	r3, r3, #9
 800c60e:	b29b      	uxth	r3, r3
 800c610:	431a      	orrs	r2, r3
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	68db      	ldr	r3, [r3, #12]
 800c616:	3b01      	subs	r3, #1
 800c618:	041b      	lsls	r3, r3, #16
 800c61a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c61e:	431a      	orrs	r2, r3
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	691b      	ldr	r3, [r3, #16]
 800c624:	3b01      	subs	r3, #1
 800c626:	061b      	lsls	r3, r3, #24
 800c628:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c62c:	4931      	ldr	r1, [pc, #196]	; (800c6f4 <RCCEx_PLL2_Config+0x15c>)
 800c62e:	4313      	orrs	r3, r2
 800c630:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c632:	4b30      	ldr	r3, [pc, #192]	; (800c6f4 <RCCEx_PLL2_Config+0x15c>)
 800c634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c636:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	695b      	ldr	r3, [r3, #20]
 800c63e:	492d      	ldr	r1, [pc, #180]	; (800c6f4 <RCCEx_PLL2_Config+0x15c>)
 800c640:	4313      	orrs	r3, r2
 800c642:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c644:	4b2b      	ldr	r3, [pc, #172]	; (800c6f4 <RCCEx_PLL2_Config+0x15c>)
 800c646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c648:	f023 0220 	bic.w	r2, r3, #32
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	699b      	ldr	r3, [r3, #24]
 800c650:	4928      	ldr	r1, [pc, #160]	; (800c6f4 <RCCEx_PLL2_Config+0x15c>)
 800c652:	4313      	orrs	r3, r2
 800c654:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c656:	4b27      	ldr	r3, [pc, #156]	; (800c6f4 <RCCEx_PLL2_Config+0x15c>)
 800c658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c65a:	4a26      	ldr	r2, [pc, #152]	; (800c6f4 <RCCEx_PLL2_Config+0x15c>)
 800c65c:	f023 0310 	bic.w	r3, r3, #16
 800c660:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c662:	4b24      	ldr	r3, [pc, #144]	; (800c6f4 <RCCEx_PLL2_Config+0x15c>)
 800c664:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c666:	4b24      	ldr	r3, [pc, #144]	; (800c6f8 <RCCEx_PLL2_Config+0x160>)
 800c668:	4013      	ands	r3, r2
 800c66a:	687a      	ldr	r2, [r7, #4]
 800c66c:	69d2      	ldr	r2, [r2, #28]
 800c66e:	00d2      	lsls	r2, r2, #3
 800c670:	4920      	ldr	r1, [pc, #128]	; (800c6f4 <RCCEx_PLL2_Config+0x15c>)
 800c672:	4313      	orrs	r3, r2
 800c674:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c676:	4b1f      	ldr	r3, [pc, #124]	; (800c6f4 <RCCEx_PLL2_Config+0x15c>)
 800c678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c67a:	4a1e      	ldr	r2, [pc, #120]	; (800c6f4 <RCCEx_PLL2_Config+0x15c>)
 800c67c:	f043 0310 	orr.w	r3, r3, #16
 800c680:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d106      	bne.n	800c696 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c688:	4b1a      	ldr	r3, [pc, #104]	; (800c6f4 <RCCEx_PLL2_Config+0x15c>)
 800c68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c68c:	4a19      	ldr	r2, [pc, #100]	; (800c6f4 <RCCEx_PLL2_Config+0x15c>)
 800c68e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c692:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c694:	e00f      	b.n	800c6b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d106      	bne.n	800c6aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c69c:	4b15      	ldr	r3, [pc, #84]	; (800c6f4 <RCCEx_PLL2_Config+0x15c>)
 800c69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6a0:	4a14      	ldr	r2, [pc, #80]	; (800c6f4 <RCCEx_PLL2_Config+0x15c>)
 800c6a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c6a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c6a8:	e005      	b.n	800c6b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c6aa:	4b12      	ldr	r3, [pc, #72]	; (800c6f4 <RCCEx_PLL2_Config+0x15c>)
 800c6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ae:	4a11      	ldr	r2, [pc, #68]	; (800c6f4 <RCCEx_PLL2_Config+0x15c>)
 800c6b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c6b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c6b6:	4b0f      	ldr	r3, [pc, #60]	; (800c6f4 <RCCEx_PLL2_Config+0x15c>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	4a0e      	ldr	r2, [pc, #56]	; (800c6f4 <RCCEx_PLL2_Config+0x15c>)
 800c6bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c6c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c6c2:	f7f6 fbb7 	bl	8002e34 <HAL_GetTick>
 800c6c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c6c8:	e008      	b.n	800c6dc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c6ca:	f7f6 fbb3 	bl	8002e34 <HAL_GetTick>
 800c6ce:	4602      	mov	r2, r0
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	1ad3      	subs	r3, r2, r3
 800c6d4:	2b02      	cmp	r3, #2
 800c6d6:	d901      	bls.n	800c6dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c6d8:	2303      	movs	r3, #3
 800c6da:	e006      	b.n	800c6ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c6dc:	4b05      	ldr	r3, [pc, #20]	; (800c6f4 <RCCEx_PLL2_Config+0x15c>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d0f0      	beq.n	800c6ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c6e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3710      	adds	r7, #16
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	bf00      	nop
 800c6f4:	58024400 	.word	0x58024400
 800c6f8:	ffff0007 	.word	0xffff0007

0800c6fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b084      	sub	sp, #16
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c706:	2300      	movs	r3, #0
 800c708:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c70a:	4b53      	ldr	r3, [pc, #332]	; (800c858 <RCCEx_PLL3_Config+0x15c>)
 800c70c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c70e:	f003 0303 	and.w	r3, r3, #3
 800c712:	2b03      	cmp	r3, #3
 800c714:	d101      	bne.n	800c71a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c716:	2301      	movs	r3, #1
 800c718:	e099      	b.n	800c84e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c71a:	4b4f      	ldr	r3, [pc, #316]	; (800c858 <RCCEx_PLL3_Config+0x15c>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	4a4e      	ldr	r2, [pc, #312]	; (800c858 <RCCEx_PLL3_Config+0x15c>)
 800c720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c724:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c726:	f7f6 fb85 	bl	8002e34 <HAL_GetTick>
 800c72a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c72c:	e008      	b.n	800c740 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c72e:	f7f6 fb81 	bl	8002e34 <HAL_GetTick>
 800c732:	4602      	mov	r2, r0
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	1ad3      	subs	r3, r2, r3
 800c738:	2b02      	cmp	r3, #2
 800c73a:	d901      	bls.n	800c740 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c73c:	2303      	movs	r3, #3
 800c73e:	e086      	b.n	800c84e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c740:	4b45      	ldr	r3, [pc, #276]	; (800c858 <RCCEx_PLL3_Config+0x15c>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d1f0      	bne.n	800c72e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c74c:	4b42      	ldr	r3, [pc, #264]	; (800c858 <RCCEx_PLL3_Config+0x15c>)
 800c74e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c750:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	051b      	lsls	r3, r3, #20
 800c75a:	493f      	ldr	r1, [pc, #252]	; (800c858 <RCCEx_PLL3_Config+0x15c>)
 800c75c:	4313      	orrs	r3, r2
 800c75e:	628b      	str	r3, [r1, #40]	; 0x28
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	685b      	ldr	r3, [r3, #4]
 800c764:	3b01      	subs	r3, #1
 800c766:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	689b      	ldr	r3, [r3, #8]
 800c76e:	3b01      	subs	r3, #1
 800c770:	025b      	lsls	r3, r3, #9
 800c772:	b29b      	uxth	r3, r3
 800c774:	431a      	orrs	r2, r3
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	68db      	ldr	r3, [r3, #12]
 800c77a:	3b01      	subs	r3, #1
 800c77c:	041b      	lsls	r3, r3, #16
 800c77e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c782:	431a      	orrs	r2, r3
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	691b      	ldr	r3, [r3, #16]
 800c788:	3b01      	subs	r3, #1
 800c78a:	061b      	lsls	r3, r3, #24
 800c78c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c790:	4931      	ldr	r1, [pc, #196]	; (800c858 <RCCEx_PLL3_Config+0x15c>)
 800c792:	4313      	orrs	r3, r2
 800c794:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c796:	4b30      	ldr	r3, [pc, #192]	; (800c858 <RCCEx_PLL3_Config+0x15c>)
 800c798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c79a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	695b      	ldr	r3, [r3, #20]
 800c7a2:	492d      	ldr	r1, [pc, #180]	; (800c858 <RCCEx_PLL3_Config+0x15c>)
 800c7a4:	4313      	orrs	r3, r2
 800c7a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c7a8:	4b2b      	ldr	r3, [pc, #172]	; (800c858 <RCCEx_PLL3_Config+0x15c>)
 800c7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	699b      	ldr	r3, [r3, #24]
 800c7b4:	4928      	ldr	r1, [pc, #160]	; (800c858 <RCCEx_PLL3_Config+0x15c>)
 800c7b6:	4313      	orrs	r3, r2
 800c7b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c7ba:	4b27      	ldr	r3, [pc, #156]	; (800c858 <RCCEx_PLL3_Config+0x15c>)
 800c7bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7be:	4a26      	ldr	r2, [pc, #152]	; (800c858 <RCCEx_PLL3_Config+0x15c>)
 800c7c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c7c6:	4b24      	ldr	r3, [pc, #144]	; (800c858 <RCCEx_PLL3_Config+0x15c>)
 800c7c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c7ca:	4b24      	ldr	r3, [pc, #144]	; (800c85c <RCCEx_PLL3_Config+0x160>)
 800c7cc:	4013      	ands	r3, r2
 800c7ce:	687a      	ldr	r2, [r7, #4]
 800c7d0:	69d2      	ldr	r2, [r2, #28]
 800c7d2:	00d2      	lsls	r2, r2, #3
 800c7d4:	4920      	ldr	r1, [pc, #128]	; (800c858 <RCCEx_PLL3_Config+0x15c>)
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c7da:	4b1f      	ldr	r3, [pc, #124]	; (800c858 <RCCEx_PLL3_Config+0x15c>)
 800c7dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7de:	4a1e      	ldr	r2, [pc, #120]	; (800c858 <RCCEx_PLL3_Config+0x15c>)
 800c7e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d106      	bne.n	800c7fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c7ec:	4b1a      	ldr	r3, [pc, #104]	; (800c858 <RCCEx_PLL3_Config+0x15c>)
 800c7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7f0:	4a19      	ldr	r2, [pc, #100]	; (800c858 <RCCEx_PLL3_Config+0x15c>)
 800c7f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c7f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c7f8:	e00f      	b.n	800c81a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	2b01      	cmp	r3, #1
 800c7fe:	d106      	bne.n	800c80e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c800:	4b15      	ldr	r3, [pc, #84]	; (800c858 <RCCEx_PLL3_Config+0x15c>)
 800c802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c804:	4a14      	ldr	r2, [pc, #80]	; (800c858 <RCCEx_PLL3_Config+0x15c>)
 800c806:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c80a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c80c:	e005      	b.n	800c81a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c80e:	4b12      	ldr	r3, [pc, #72]	; (800c858 <RCCEx_PLL3_Config+0x15c>)
 800c810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c812:	4a11      	ldr	r2, [pc, #68]	; (800c858 <RCCEx_PLL3_Config+0x15c>)
 800c814:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c818:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c81a:	4b0f      	ldr	r3, [pc, #60]	; (800c858 <RCCEx_PLL3_Config+0x15c>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	4a0e      	ldr	r2, [pc, #56]	; (800c858 <RCCEx_PLL3_Config+0x15c>)
 800c820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c824:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c826:	f7f6 fb05 	bl	8002e34 <HAL_GetTick>
 800c82a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c82c:	e008      	b.n	800c840 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c82e:	f7f6 fb01 	bl	8002e34 <HAL_GetTick>
 800c832:	4602      	mov	r2, r0
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	1ad3      	subs	r3, r2, r3
 800c838:	2b02      	cmp	r3, #2
 800c83a:	d901      	bls.n	800c840 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c83c:	2303      	movs	r3, #3
 800c83e:	e006      	b.n	800c84e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c840:	4b05      	ldr	r3, [pc, #20]	; (800c858 <RCCEx_PLL3_Config+0x15c>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d0f0      	beq.n	800c82e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c84c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3710      	adds	r7, #16
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
 800c856:	bf00      	nop
 800c858:	58024400 	.word	0x58024400
 800c85c:	ffff0007 	.word	0xffff0007

0800c860 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b08a      	sub	sp, #40	; 0x28
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d101      	bne.n	800c872 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c86e:	2301      	movs	r3, #1
 800c870:	e075      	b.n	800c95e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c878:	b2db      	uxtb	r3, r3
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d105      	bne.n	800c88a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2200      	movs	r2, #0
 800c882:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f7f5 fb7b 	bl	8001f80 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2204      	movs	r2, #4
 800c88e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 f868 	bl	800c968 <HAL_SD_InitCard>
 800c898:	4603      	mov	r3, r0
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d001      	beq.n	800c8a2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c89e:	2301      	movs	r3, #1
 800c8a0:	e05d      	b.n	800c95e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800c8a2:	f107 0308 	add.w	r3, r7, #8
 800c8a6:	4619      	mov	r1, r3
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f000 fdaf 	bl	800d40c <HAL_SD_GetCardStatus>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d001      	beq.n	800c8b8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	e052      	b.n	800c95e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800c8b8:	7e3b      	ldrb	r3, [r7, #24]
 800c8ba:	b2db      	uxtb	r3, r3
 800c8bc:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c8be:	7e7b      	ldrb	r3, [r7, #25]
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	d10a      	bne.n	800c8e2 <HAL_SD_Init+0x82>
 800c8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d102      	bne.n	800c8d8 <HAL_SD_Init+0x78>
 800c8d2:	6a3b      	ldr	r3, [r7, #32]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d004      	beq.n	800c8e2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c8de:	659a      	str	r2, [r3, #88]	; 0x58
 800c8e0:	e00b      	b.n	800c8fa <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	d104      	bne.n	800c8f4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c8f0:	659a      	str	r2, [r3, #88]	; 0x58
 800c8f2:	e002      	b.n	800c8fa <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	68db      	ldr	r3, [r3, #12]
 800c8fe:	4619      	mov	r1, r3
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f000 fe6d 	bl	800d5e0 <HAL_SD_ConfigWideBusOperation>
 800c906:	4603      	mov	r3, r0
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d001      	beq.n	800c910 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800c90c:	2301      	movs	r3, #1
 800c90e:	e026      	b.n	800c95e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800c910:	f7f6 fa90 	bl	8002e34 <HAL_GetTick>
 800c914:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c916:	e011      	b.n	800c93c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c918:	f7f6 fa8c 	bl	8002e34 <HAL_GetTick>
 800c91c:	4602      	mov	r2, r0
 800c91e:	69fb      	ldr	r3, [r7, #28]
 800c920:	1ad3      	subs	r3, r2, r3
 800c922:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c926:	d109      	bne.n	800c93c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c92e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2201      	movs	r2, #1
 800c934:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800c938:	2303      	movs	r3, #3
 800c93a:	e010      	b.n	800c95e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f000 ff61 	bl	800d804 <HAL_SD_GetCardState>
 800c942:	4603      	mov	r3, r0
 800c944:	2b04      	cmp	r3, #4
 800c946:	d1e7      	bne.n	800c918 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2200      	movs	r2, #0
 800c94c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2200      	movs	r2, #0
 800c952:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2201      	movs	r2, #1
 800c958:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800c95c:	2300      	movs	r3, #0
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3728      	adds	r7, #40	; 0x28
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
	...

0800c968 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c968:	b590      	push	{r4, r7, lr}
 800c96a:	b08d      	sub	sp, #52	; 0x34
 800c96c:	af02      	add	r7, sp, #8
 800c96e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c970:	2300      	movs	r3, #0
 800c972:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c974:	2300      	movs	r3, #0
 800c976:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c978:	2300      	movs	r3, #0
 800c97a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c97c:	2300      	movs	r3, #0
 800c97e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c980:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800c984:	f04f 0100 	mov.w	r1, #0
 800c988:	f7fe fd24 	bl	800b3d4 <HAL_RCCEx_GetPeriphCLKFreq>
 800c98c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800c98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c990:	2b00      	cmp	r3, #0
 800c992:	d109      	bne.n	800c9a8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2201      	movs	r2, #1
 800c998:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c9a2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	e070      	b.n	800ca8a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800c9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9aa:	0a1b      	lsrs	r3, r3, #8
 800c9ac:	4a39      	ldr	r2, [pc, #228]	; (800ca94 <HAL_SD_InitCard+0x12c>)
 800c9ae:	fba2 2303 	umull	r2, r3, r2, r3
 800c9b2:	091b      	lsrs	r3, r3, #4
 800c9b4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681c      	ldr	r4, [r3, #0]
 800c9ba:	466a      	mov	r2, sp
 800c9bc:	f107 0318 	add.w	r3, r7, #24
 800c9c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c9c4:	e882 0003 	stmia.w	r2, {r0, r1}
 800c9c8:	f107 030c 	add.w	r3, r7, #12
 800c9cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c9ce:	4620      	mov	r0, r4
 800c9d0:	f003 fe0c 	bl	80105ec <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f003 fe4f 	bl	801067c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800c9de:	69fb      	ldr	r3, [r7, #28]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d005      	beq.n	800c9f0 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800c9e4:	69fb      	ldr	r3, [r7, #28]
 800c9e6:	005b      	lsls	r3, r3, #1
 800c9e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9ee:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800c9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d007      	beq.n	800ca06 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800c9f6:	4a28      	ldr	r2, [pc, #160]	; (800ca98 <HAL_SD_InitCard+0x130>)
 800c9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9fe:	3301      	adds	r3, #1
 800ca00:	4618      	mov	r0, r3
 800ca02:	f7f6 fa23 	bl	8002e4c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f000 ffea 	bl	800d9e0 <SD_PowerON>
 800ca0c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ca0e:	6a3b      	ldr	r3, [r7, #32]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d00b      	beq.n	800ca2c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2201      	movs	r2, #1
 800ca18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca20:	6a3b      	ldr	r3, [r7, #32]
 800ca22:	431a      	orrs	r2, r3
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ca28:	2301      	movs	r3, #1
 800ca2a:	e02e      	b.n	800ca8a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f000 ff09 	bl	800d844 <SD_InitCard>
 800ca32:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ca34:	6a3b      	ldr	r3, [r7, #32]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d00b      	beq.n	800ca52 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2201      	movs	r2, #1
 800ca3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca46:	6a3b      	ldr	r3, [r7, #32]
 800ca48:	431a      	orrs	r2, r3
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ca4e:	2301      	movs	r3, #1
 800ca50:	e01b      	b.n	800ca8a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f003 fea4 	bl	80107a8 <SDMMC_CmdBlockLength>
 800ca60:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ca62:	6a3b      	ldr	r3, [r7, #32]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d00f      	beq.n	800ca88 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	4a0b      	ldr	r2, [pc, #44]	; (800ca9c <HAL_SD_InitCard+0x134>)
 800ca6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca74:	6a3b      	ldr	r3, [r7, #32]
 800ca76:	431a      	orrs	r2, r3
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2201      	movs	r2, #1
 800ca80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800ca84:	2301      	movs	r3, #1
 800ca86:	e000      	b.n	800ca8a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800ca88:	2300      	movs	r3, #0
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	372c      	adds	r7, #44	; 0x2c
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd90      	pop	{r4, r7, pc}
 800ca92:	bf00      	nop
 800ca94:	014f8b59 	.word	0x014f8b59
 800ca98:	00012110 	.word	0x00012110
 800ca9c:	1fe00fff 	.word	0x1fe00fff

0800caa0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b08c      	sub	sp, #48	; 0x30
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	60f8      	str	r0, [r7, #12]
 800caa8:	60b9      	str	r1, [r7, #8]
 800caaa:	607a      	str	r2, [r7, #4]
 800caac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d107      	bne.n	800cac8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cabc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cac4:	2301      	movs	r3, #1
 800cac6:	e08d      	b.n	800cbe4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cace:	b2db      	uxtb	r3, r3
 800cad0:	2b01      	cmp	r3, #1
 800cad2:	f040 8086 	bne.w	800cbe2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2200      	movs	r2, #0
 800cada:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cadc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	441a      	add	r2, r3
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cae6:	429a      	cmp	r2, r3
 800cae8:	d907      	bls.n	800cafa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800caf6:	2301      	movs	r3, #1
 800caf8:	e074      	b.n	800cbe4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	2203      	movs	r2, #3
 800cafe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	2200      	movs	r2, #0
 800cb08:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	68ba      	ldr	r2, [r7, #8]
 800cb0e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	025a      	lsls	r2, r3, #9
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d002      	beq.n	800cb26 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800cb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb22:	025b      	lsls	r3, r3, #9
 800cb24:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cb26:	f04f 33ff 	mov.w	r3, #4294967295
 800cb2a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	025b      	lsls	r3, r3, #9
 800cb30:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cb32:	2390      	movs	r3, #144	; 0x90
 800cb34:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cb36:	2302      	movs	r3, #2
 800cb38:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f107 0210 	add.w	r2, r7, #16
 800cb4a:	4611      	mov	r1, r2
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f003 fdff 	bl	8010750 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	68da      	ldr	r2, [r3, #12]
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cb60:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	68ba      	ldr	r2, [r7, #8]
 800cb68:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	2201      	movs	r2, #1
 800cb70:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	2b01      	cmp	r3, #1
 800cb76:	d90a      	bls.n	800cb8e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2282      	movs	r2, #130	; 0x82
 800cb7c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb84:	4618      	mov	r0, r3
 800cb86:	f003 fe55 	bl	8010834 <SDMMC_CmdReadMultiBlock>
 800cb8a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cb8c:	e009      	b.n	800cba2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	2281      	movs	r2, #129	; 0x81
 800cb92:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f003 fe27 	bl	80107ee <SDMMC_CmdReadSingleBlock>
 800cba0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800cba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d012      	beq.n	800cbce <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	4a0f      	ldr	r2, [pc, #60]	; (800cbec <HAL_SD_ReadBlocks_DMA+0x14c>)
 800cbae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb6:	431a      	orrs	r2, r3
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	2201      	movs	r2, #1
 800cbc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800cbca:	2301      	movs	r3, #1
 800cbcc:	e00a      	b.n	800cbe4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800cbdc:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	e000      	b.n	800cbe4 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800cbe2:	2302      	movs	r3, #2
  }
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3730      	adds	r7, #48	; 0x30
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}
 800cbec:	1fe00fff 	.word	0x1fe00fff

0800cbf0 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b08c      	sub	sp, #48	; 0x30
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	60f8      	str	r0, [r7, #12]
 800cbf8:	60b9      	str	r1, [r7, #8]
 800cbfa:	607a      	str	r2, [r7, #4]
 800cbfc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d107      	bne.n	800cc18 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc0c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cc14:	2301      	movs	r3, #1
 800cc16:	e08d      	b.n	800cd34 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	f040 8086 	bne.w	800cd32 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cc2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	441a      	add	r2, r3
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d907      	bls.n	800cc4a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc3e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cc46:	2301      	movs	r3, #1
 800cc48:	e074      	b.n	800cd34 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2203      	movs	r2, #3
 800cc4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	2200      	movs	r2, #0
 800cc58:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	68ba      	ldr	r2, [r7, #8]
 800cc5e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	025a      	lsls	r2, r3, #9
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc6c:	2b01      	cmp	r3, #1
 800cc6e:	d002      	beq.n	800cc76 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800cc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc72:	025b      	lsls	r3, r3, #9
 800cc74:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cc76:	f04f 33ff 	mov.w	r3, #4294967295
 800cc7a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	025b      	lsls	r3, r3, #9
 800cc80:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cc82:	2390      	movs	r3, #144	; 0x90
 800cc84:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800cc86:	2300      	movs	r3, #0
 800cc88:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f107 0210 	add.w	r2, r7, #16
 800cc9a:	4611      	mov	r1, r2
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f003 fd57 	bl	8010750 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	68da      	ldr	r2, [r3, #12]
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ccb0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	68ba      	ldr	r2, [r7, #8]
 800ccb8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	2201      	movs	r2, #1
 800ccc0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	2b01      	cmp	r3, #1
 800ccc6:	d90a      	bls.n	800ccde <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	22a0      	movs	r2, #160	; 0xa0
 800cccc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f003 fdf3 	bl	80108c0 <SDMMC_CmdWriteMultiBlock>
 800ccda:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ccdc:	e009      	b.n	800ccf2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	2290      	movs	r2, #144	; 0x90
 800cce2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ccea:	4618      	mov	r0, r3
 800ccec:	f003 fdc5 	bl	801087a <SDMMC_CmdWriteSingleBlock>
 800ccf0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800ccf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d012      	beq.n	800cd1e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	4a0f      	ldr	r2, [pc, #60]	; (800cd3c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800ccfe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd06:	431a      	orrs	r2, r3
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2201      	movs	r2, #1
 800cd10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2200      	movs	r2, #0
 800cd18:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	e00a      	b.n	800cd34 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800cd2c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	e000      	b.n	800cd34 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800cd32:	2302      	movs	r3, #2
  }
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3730      	adds	r7, #48	; 0x30
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}
 800cd3c:	1fe00fff 	.word	0x1fe00fff

0800cd40 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd4c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d008      	beq.n	800cd6e <HAL_SD_IRQHandler+0x2e>
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f003 0308 	and.w	r3, r3, #8
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d003      	beq.n	800cd6e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f001 f926 	bl	800dfb8 <SD_Read_IT>
 800cd6c:	e19a      	b.n	800d0a4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	f000 80ac 	beq.w	800ced6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cd86:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681a      	ldr	r2, [r3, #0]
 800cd92:	4b59      	ldr	r3, [pc, #356]	; (800cef8 <HAL_SD_IRQHandler+0x1b8>)
 800cd94:	400b      	ands	r3, r1
 800cd96:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800cda6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	68da      	ldr	r2, [r3, #12]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cdb6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f003 0308 	and.w	r3, r3, #8
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d038      	beq.n	800ce34 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	f003 0302 	and.w	r3, r3, #2
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d104      	bne.n	800cdd6 <HAL_SD_IRQHandler+0x96>
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	f003 0320 	and.w	r3, r3, #32
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d011      	beq.n	800cdfa <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	4618      	mov	r0, r3
 800cddc:	f003 fd94 	bl	8010908 <SDMMC_CmdStopTransfer>
 800cde0:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d008      	beq.n	800cdfa <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	431a      	orrs	r2, r3
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f000 f95b 	bl	800d0b0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	4a3f      	ldr	r2, [pc, #252]	; (800cefc <HAL_SD_IRQHandler+0x1bc>)
 800ce00:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2201      	movs	r2, #1
 800ce06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	f003 0301 	and.w	r3, r3, #1
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d104      	bne.n	800ce24 <HAL_SD_IRQHandler+0xe4>
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	f003 0302 	and.w	r3, r3, #2
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d003      	beq.n	800ce2c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f005 fd95 	bl	8012954 <HAL_SD_RxCpltCallback>
 800ce2a:	e13b      	b.n	800d0a4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f005 fd87 	bl	8012940 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ce32:	e137      	b.n	800d0a4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	f000 8132 	beq.w	800d0a4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	2200      	movs	r2, #0
 800ce46:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	2200      	movs	r2, #0
 800ce56:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	f003 0302 	and.w	r3, r3, #2
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d104      	bne.n	800ce6c <HAL_SD_IRQHandler+0x12c>
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	f003 0320 	and.w	r3, r3, #32
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d011      	beq.n	800ce90 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	4618      	mov	r0, r3
 800ce72:	f003 fd49 	bl	8010908 <SDMMC_CmdStopTransfer>
 800ce76:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d008      	beq.n	800ce90 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	431a      	orrs	r2, r3
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f000 f910 	bl	800d0b0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2201      	movs	r2, #1
 800ce94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	f003 0310 	and.w	r3, r3, #16
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d104      	bne.n	800ceb2 <HAL_SD_IRQHandler+0x172>
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	f003 0320 	and.w	r3, r3, #32
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d002      	beq.n	800ceb8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f005 fd44 	bl	8012940 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	f003 0301 	and.w	r3, r3, #1
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d105      	bne.n	800cece <HAL_SD_IRQHandler+0x18e>
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	f003 0302 	and.w	r3, r3, #2
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	f000 80eb 	beq.w	800d0a4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f005 fd40 	bl	8012954 <HAL_SD_RxCpltCallback>
}
 800ced4:	e0e6      	b.n	800d0a4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cedc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d00d      	beq.n	800cf00 <HAL_SD_IRQHandler+0x1c0>
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	f003 0308 	and.w	r3, r3, #8
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d008      	beq.n	800cf00 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f001 f8a8 	bl	800e044 <SD_Write_IT>
 800cef4:	e0d6      	b.n	800d0a4 <HAL_SD_IRQHandler+0x364>
 800cef6:	bf00      	nop
 800cef8:	ffff3ec5 	.word	0xffff3ec5
 800cefc:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf06:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	f000 809d 	beq.w	800d04a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf16:	f003 0302 	and.w	r3, r3, #2
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d005      	beq.n	800cf2a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf22:	f043 0202 	orr.w	r2, r3, #2
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf30:	f003 0308 	and.w	r3, r3, #8
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d005      	beq.n	800cf44 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf3c:	f043 0208 	orr.w	r2, r3, #8
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf4a:	f003 0320 	and.w	r3, r3, #32
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d005      	beq.n	800cf5e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf56:	f043 0220 	orr.w	r2, r3, #32
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf64:	f003 0310 	and.w	r3, r3, #16
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d005      	beq.n	800cf78 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf70:	f043 0210 	orr.w	r2, r3, #16
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	4a4b      	ldr	r2, [pc, #300]	; (800d0ac <HAL_SD_IRQHandler+0x36c>)
 800cf7e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800cf8e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	68da      	ldr	r2, [r3, #12]
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cf9e:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cfae:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	68da      	ldr	r2, [r3, #12]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cfbe:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f003 fc9f 	bl	8010908 <SDMMC_CmdStopTransfer>
 800cfca:	4602      	mov	r2, r0
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfd0:	431a      	orrs	r2, r3
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	68da      	ldr	r2, [r3, #12]
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cfe4:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cfee:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	f003 0308 	and.w	r3, r3, #8
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d00a      	beq.n	800d010 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2201      	movs	r2, #1
 800cffe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2200      	movs	r2, #0
 800d006:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f000 f851 	bl	800d0b0 <HAL_SD_ErrorCallback>
}
 800d00e:	e049      	b.n	800d0a4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d016:	2b00      	cmp	r3, #0
 800d018:	d044      	beq.n	800d0a4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d040      	beq.n	800d0a4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d030:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	2200      	movs	r2, #0
 800d038:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2201      	movs	r2, #1
 800d03e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f000 f834 	bl	800d0b0 <HAL_SD_ErrorCallback>
}
 800d048:	e02c      	b.n	800d0a4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d054:	2b00      	cmp	r3, #0
 800d056:	d025      	beq.n	800d0a4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d060:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d068:	f003 0304 	and.w	r3, r3, #4
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d10c      	bne.n	800d08a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	f003 0320 	and.w	r3, r3, #32
 800d076:	2b00      	cmp	r3, #0
 800d078:	d003      	beq.n	800d082 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f001 f84a 	bl	800e114 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d080:	e010      	b.n	800d0a4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f001 f832 	bl	800e0ec <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d088:	e00c      	b.n	800d0a4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	f003 0320 	and.w	r3, r3, #32
 800d090:	2b00      	cmp	r3, #0
 800d092:	d003      	beq.n	800d09c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f001 f833 	bl	800e100 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d09a:	e003      	b.n	800d0a4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f001 f81b 	bl	800e0d8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d0a2:	e7ff      	b.n	800d0a4 <HAL_SD_IRQHandler+0x364>
 800d0a4:	bf00      	nop
 800d0a6:	3710      	adds	r7, #16
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}
 800d0ac:	18000f3a 	.word	0x18000f3a

0800d0b0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b083      	sub	sp, #12
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d0b8:	bf00      	nop
 800d0ba:	370c      	adds	r7, #12
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c2:	4770      	bx	lr

0800d0c4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	b083      	sub	sp, #12
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0d2:	0f9b      	lsrs	r3, r3, #30
 800d0d4:	b2da      	uxtb	r2, r3
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0de:	0e9b      	lsrs	r3, r3, #26
 800d0e0:	b2db      	uxtb	r3, r3
 800d0e2:	f003 030f 	and.w	r3, r3, #15
 800d0e6:	b2da      	uxtb	r2, r3
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0f0:	0e1b      	lsrs	r3, r3, #24
 800d0f2:	b2db      	uxtb	r3, r3
 800d0f4:	f003 0303 	and.w	r3, r3, #3
 800d0f8:	b2da      	uxtb	r2, r3
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d102:	0c1b      	lsrs	r3, r3, #16
 800d104:	b2da      	uxtb	r2, r3
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d10e:	0a1b      	lsrs	r3, r3, #8
 800d110:	b2da      	uxtb	r2, r3
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d11a:	b2da      	uxtb	r2, r3
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d124:	0d1b      	lsrs	r3, r3, #20
 800d126:	b29a      	uxth	r2, r3
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d130:	0c1b      	lsrs	r3, r3, #16
 800d132:	b2db      	uxtb	r3, r3
 800d134:	f003 030f 	and.w	r3, r3, #15
 800d138:	b2da      	uxtb	r2, r3
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d142:	0bdb      	lsrs	r3, r3, #15
 800d144:	b2db      	uxtb	r3, r3
 800d146:	f003 0301 	and.w	r3, r3, #1
 800d14a:	b2da      	uxtb	r2, r3
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d154:	0b9b      	lsrs	r3, r3, #14
 800d156:	b2db      	uxtb	r3, r3
 800d158:	f003 0301 	and.w	r3, r3, #1
 800d15c:	b2da      	uxtb	r2, r3
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d166:	0b5b      	lsrs	r3, r3, #13
 800d168:	b2db      	uxtb	r3, r3
 800d16a:	f003 0301 	and.w	r3, r3, #1
 800d16e:	b2da      	uxtb	r2, r3
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d178:	0b1b      	lsrs	r3, r3, #12
 800d17a:	b2db      	uxtb	r3, r3
 800d17c:	f003 0301 	and.w	r3, r3, #1
 800d180:	b2da      	uxtb	r2, r3
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	2200      	movs	r2, #0
 800d18a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d190:	2b00      	cmp	r3, #0
 800d192:	d163      	bne.n	800d25c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d198:	009a      	lsls	r2, r3, #2
 800d19a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d19e:	4013      	ands	r3, r2
 800d1a0:	687a      	ldr	r2, [r7, #4]
 800d1a2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800d1a4:	0f92      	lsrs	r2, r2, #30
 800d1a6:	431a      	orrs	r2, r3
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1b0:	0edb      	lsrs	r3, r3, #27
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	f003 0307 	and.w	r3, r3, #7
 800d1b8:	b2da      	uxtb	r2, r3
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1c2:	0e1b      	lsrs	r3, r3, #24
 800d1c4:	b2db      	uxtb	r3, r3
 800d1c6:	f003 0307 	and.w	r3, r3, #7
 800d1ca:	b2da      	uxtb	r2, r3
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1d4:	0d5b      	lsrs	r3, r3, #21
 800d1d6:	b2db      	uxtb	r3, r3
 800d1d8:	f003 0307 	and.w	r3, r3, #7
 800d1dc:	b2da      	uxtb	r2, r3
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1e6:	0c9b      	lsrs	r3, r3, #18
 800d1e8:	b2db      	uxtb	r3, r3
 800d1ea:	f003 0307 	and.w	r3, r3, #7
 800d1ee:	b2da      	uxtb	r2, r3
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1f8:	0bdb      	lsrs	r3, r3, #15
 800d1fa:	b2db      	uxtb	r3, r3
 800d1fc:	f003 0307 	and.w	r3, r3, #7
 800d200:	b2da      	uxtb	r2, r3
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	691b      	ldr	r3, [r3, #16]
 800d20a:	1c5a      	adds	r2, r3, #1
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	7e1b      	ldrb	r3, [r3, #24]
 800d214:	b2db      	uxtb	r3, r3
 800d216:	f003 0307 	and.w	r3, r3, #7
 800d21a:	3302      	adds	r3, #2
 800d21c:	2201      	movs	r2, #1
 800d21e:	fa02 f303 	lsl.w	r3, r2, r3
 800d222:	687a      	ldr	r2, [r7, #4]
 800d224:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d226:	fb03 f202 	mul.w	r2, r3, r2
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	7a1b      	ldrb	r3, [r3, #8]
 800d232:	b2db      	uxtb	r3, r3
 800d234:	f003 030f 	and.w	r3, r3, #15
 800d238:	2201      	movs	r2, #1
 800d23a:	409a      	lsls	r2, r3
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d244:	687a      	ldr	r2, [r7, #4]
 800d246:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d248:	0a52      	lsrs	r2, r2, #9
 800d24a:	fb03 f202 	mul.w	r2, r3, r2
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d258:	655a      	str	r2, [r3, #84]	; 0x54
 800d25a:	e031      	b.n	800d2c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d260:	2b01      	cmp	r3, #1
 800d262:	d11d      	bne.n	800d2a0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d268:	041b      	lsls	r3, r3, #16
 800d26a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d272:	0c1b      	lsrs	r3, r3, #16
 800d274:	431a      	orrs	r2, r3
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	691b      	ldr	r3, [r3, #16]
 800d27e:	3301      	adds	r3, #1
 800d280:	029a      	lsls	r2, r3, #10
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d294:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	655a      	str	r2, [r3, #84]	; 0x54
 800d29e:	e00f      	b.n	800d2c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	4a58      	ldr	r2, [pc, #352]	; (800d408 <HAL_SD_GetCardCSD+0x344>)
 800d2a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2201      	movs	r2, #1
 800d2b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d2bc:	2301      	movs	r3, #1
 800d2be:	e09d      	b.n	800d3fc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d2c4:	0b9b      	lsrs	r3, r3, #14
 800d2c6:	b2db      	uxtb	r3, r3
 800d2c8:	f003 0301 	and.w	r3, r3, #1
 800d2cc:	b2da      	uxtb	r2, r3
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d2d6:	09db      	lsrs	r3, r3, #7
 800d2d8:	b2db      	uxtb	r3, r3
 800d2da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2de:	b2da      	uxtb	r2, r3
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d2e8:	b2db      	uxtb	r3, r3
 800d2ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2ee:	b2da      	uxtb	r2, r3
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d2f8:	0fdb      	lsrs	r3, r3, #31
 800d2fa:	b2da      	uxtb	r2, r3
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d304:	0f5b      	lsrs	r3, r3, #29
 800d306:	b2db      	uxtb	r3, r3
 800d308:	f003 0303 	and.w	r3, r3, #3
 800d30c:	b2da      	uxtb	r2, r3
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d316:	0e9b      	lsrs	r3, r3, #26
 800d318:	b2db      	uxtb	r3, r3
 800d31a:	f003 0307 	and.w	r3, r3, #7
 800d31e:	b2da      	uxtb	r2, r3
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d328:	0d9b      	lsrs	r3, r3, #22
 800d32a:	b2db      	uxtb	r3, r3
 800d32c:	f003 030f 	and.w	r3, r3, #15
 800d330:	b2da      	uxtb	r2, r3
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d33a:	0d5b      	lsrs	r3, r3, #21
 800d33c:	b2db      	uxtb	r3, r3
 800d33e:	f003 0301 	and.w	r3, r3, #1
 800d342:	b2da      	uxtb	r2, r3
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	2200      	movs	r2, #0
 800d34e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d356:	0c1b      	lsrs	r3, r3, #16
 800d358:	b2db      	uxtb	r3, r3
 800d35a:	f003 0301 	and.w	r3, r3, #1
 800d35e:	b2da      	uxtb	r2, r3
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d36a:	0bdb      	lsrs	r3, r3, #15
 800d36c:	b2db      	uxtb	r3, r3
 800d36e:	f003 0301 	and.w	r3, r3, #1
 800d372:	b2da      	uxtb	r2, r3
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d37e:	0b9b      	lsrs	r3, r3, #14
 800d380:	b2db      	uxtb	r3, r3
 800d382:	f003 0301 	and.w	r3, r3, #1
 800d386:	b2da      	uxtb	r2, r3
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d392:	0b5b      	lsrs	r3, r3, #13
 800d394:	b2db      	uxtb	r3, r3
 800d396:	f003 0301 	and.w	r3, r3, #1
 800d39a:	b2da      	uxtb	r2, r3
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3a6:	0b1b      	lsrs	r3, r3, #12
 800d3a8:	b2db      	uxtb	r3, r3
 800d3aa:	f003 0301 	and.w	r3, r3, #1
 800d3ae:	b2da      	uxtb	r2, r3
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3ba:	0a9b      	lsrs	r3, r3, #10
 800d3bc:	b2db      	uxtb	r3, r3
 800d3be:	f003 0303 	and.w	r3, r3, #3
 800d3c2:	b2da      	uxtb	r2, r3
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3ce:	0a1b      	lsrs	r3, r3, #8
 800d3d0:	b2db      	uxtb	r3, r3
 800d3d2:	f003 0303 	and.w	r3, r3, #3
 800d3d6:	b2da      	uxtb	r2, r3
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3e2:	085b      	lsrs	r3, r3, #1
 800d3e4:	b2db      	uxtb	r3, r3
 800d3e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3ea:	b2da      	uxtb	r2, r3
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d3fa:	2300      	movs	r3, #0
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	370c      	adds	r7, #12
 800d400:	46bd      	mov	sp, r7
 800d402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d406:	4770      	bx	lr
 800d408:	1fe00fff 	.word	0x1fe00fff

0800d40c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b094      	sub	sp, #80	; 0x50
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d416:	2300      	movs	r3, #0
 800d418:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d422:	b2db      	uxtb	r3, r3
 800d424:	2b03      	cmp	r3, #3
 800d426:	d101      	bne.n	800d42c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800d428:	2301      	movs	r3, #1
 800d42a:	e0a7      	b.n	800d57c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800d42c:	f107 0308 	add.w	r3, r7, #8
 800d430:	4619      	mov	r1, r3
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f000 fb62 	bl	800dafc <SD_SendSDStatus>
 800d438:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d43a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d011      	beq.n	800d464 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	4a4f      	ldr	r2, [pc, #316]	; (800d584 <HAL_SD_GetCardStatus+0x178>)
 800d446:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d44c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d44e:	431a      	orrs	r2, r3
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2201      	movs	r2, #1
 800d458:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800d45c:	2301      	movs	r3, #1
 800d45e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d462:	e070      	b.n	800d546 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	099b      	lsrs	r3, r3, #6
 800d468:	b2db      	uxtb	r3, r3
 800d46a:	f003 0303 	and.w	r3, r3, #3
 800d46e:	b2da      	uxtb	r2, r3
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	095b      	lsrs	r3, r3, #5
 800d478:	b2db      	uxtb	r3, r3
 800d47a:	f003 0301 	and.w	r3, r3, #1
 800d47e:	b2da      	uxtb	r2, r3
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	0a1b      	lsrs	r3, r3, #8
 800d488:	b29b      	uxth	r3, r3
 800d48a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d48e:	b29a      	uxth	r2, r3
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	0e1b      	lsrs	r3, r3, #24
 800d494:	b29b      	uxth	r3, r3
 800d496:	4313      	orrs	r3, r2
 800d498:	b29a      	uxth	r2, r3
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	061a      	lsls	r2, r3, #24
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	021b      	lsls	r3, r3, #8
 800d4a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d4aa:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	0a1b      	lsrs	r3, r3, #8
 800d4b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d4b4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	0e1b      	lsrs	r3, r3, #24
 800d4ba:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	b2da      	uxtb	r2, r3
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800d4c8:	693b      	ldr	r3, [r7, #16]
 800d4ca:	0a1b      	lsrs	r3, r3, #8
 800d4cc:	b2da      	uxtb	r2, r3
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	0d1b      	lsrs	r3, r3, #20
 800d4d6:	b2db      	uxtb	r3, r3
 800d4d8:	f003 030f 	and.w	r3, r3, #15
 800d4dc:	b2da      	uxtb	r2, r3
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	0c1b      	lsrs	r3, r3, #16
 800d4e6:	b29b      	uxth	r3, r3
 800d4e8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d4ec:	b29a      	uxth	r2, r3
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	b29b      	uxth	r3, r3
 800d4f2:	b2db      	uxtb	r3, r3
 800d4f4:	b29b      	uxth	r3, r3
 800d4f6:	4313      	orrs	r3, r2
 800d4f8:	b29a      	uxth	r2, r3
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	0a9b      	lsrs	r3, r3, #10
 800d502:	b2db      	uxtb	r3, r3
 800d504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d508:	b2da      	uxtb	r2, r3
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	0a1b      	lsrs	r3, r3, #8
 800d512:	b2db      	uxtb	r3, r3
 800d514:	f003 0303 	and.w	r3, r3, #3
 800d518:	b2da      	uxtb	r2, r3
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	091b      	lsrs	r3, r3, #4
 800d522:	b2db      	uxtb	r3, r3
 800d524:	f003 030f 	and.w	r3, r3, #15
 800d528:	b2da      	uxtb	r2, r3
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	b2db      	uxtb	r3, r3
 800d532:	f003 030f 	and.w	r3, r3, #15
 800d536:	b2da      	uxtb	r2, r3
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800d53c:	69bb      	ldr	r3, [r7, #24]
 800d53e:	0e1b      	lsrs	r3, r3, #24
 800d540:	b2da      	uxtb	r2, r3
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d54e:	4618      	mov	r0, r3
 800d550:	f003 f92a 	bl	80107a8 <SDMMC_CmdBlockLength>
 800d554:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d00d      	beq.n	800d578 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	4a08      	ldr	r2, [pc, #32]	; (800d584 <HAL_SD_GetCardStatus+0x178>)
 800d562:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d568:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2201      	movs	r2, #1
 800d56e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800d572:	2301      	movs	r3, #1
 800d574:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800d578:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3750      	adds	r7, #80	; 0x50
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}
 800d584:	1fe00fff 	.word	0x1fe00fff

0800d588 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d588:	b480      	push	{r7}
 800d58a:	b083      	sub	sp, #12
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d5d2:	2300      	movs	r3, #0
}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	370c      	adds	r7, #12
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5de:	4770      	bx	lr

0800d5e0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d5e0:	b590      	push	{r4, r7, lr}
 800d5e2:	b08d      	sub	sp, #52	; 0x34
 800d5e4:	af02      	add	r7, sp, #8
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2203      	movs	r2, #3
 800d5f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5fc:	2b03      	cmp	r3, #3
 800d5fe:	d02e      	beq.n	800d65e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d606:	d106      	bne.n	800d616 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d60c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	635a      	str	r2, [r3, #52]	; 0x34
 800d614:	e029      	b.n	800d66a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d61c:	d10a      	bne.n	800d634 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f000 fb64 	bl	800dcec <SD_WideBus_Enable>
 800d624:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d62a:	6a3b      	ldr	r3, [r7, #32]
 800d62c:	431a      	orrs	r2, r3
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	635a      	str	r2, [r3, #52]	; 0x34
 800d632:	e01a      	b.n	800d66a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d10a      	bne.n	800d650 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f000 fba1 	bl	800dd82 <SD_WideBus_Disable>
 800d640:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d646:	6a3b      	ldr	r3, [r7, #32]
 800d648:	431a      	orrs	r2, r3
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	635a      	str	r2, [r3, #52]	; 0x34
 800d64e:	e00c      	b.n	800d66a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d654:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	635a      	str	r2, [r3, #52]	; 0x34
 800d65c:	e005      	b.n	800d66a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d662:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d007      	beq.n	800d682 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	4a5f      	ldr	r2, [pc, #380]	; (800d7f4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d678:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800d67a:	2301      	movs	r3, #1
 800d67c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d680:	e096      	b.n	800d7b0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d682:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d686:	f04f 0100 	mov.w	r1, #0
 800d68a:	f7fd fea3 	bl	800b3d4 <HAL_RCCEx_GetPeriphCLKFreq>
 800d68e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800d690:	69fb      	ldr	r3, [r7, #28]
 800d692:	2b00      	cmp	r3, #0
 800d694:	f000 8083 	beq.w	800d79e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	685b      	ldr	r3, [r3, #4]
 800d69c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	689b      	ldr	r3, [r3, #8]
 800d6a2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	691b      	ldr	r3, [r3, #16]
 800d6ac:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	695a      	ldr	r2, [r3, #20]
 800d6b2:	69fb      	ldr	r3, [r7, #28]
 800d6b4:	4950      	ldr	r1, [pc, #320]	; (800d7f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d6b6:	fba1 1303 	umull	r1, r3, r1, r3
 800d6ba:	0e1b      	lsrs	r3, r3, #24
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d303      	bcc.n	800d6c8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	695b      	ldr	r3, [r3, #20]
 800d6c4:	61bb      	str	r3, [r7, #24]
 800d6c6:	e05a      	b.n	800d77e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d6d0:	d103      	bne.n	800d6da <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	695b      	ldr	r3, [r3, #20]
 800d6d6:	61bb      	str	r3, [r7, #24]
 800d6d8:	e051      	b.n	800d77e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d6e2:	d126      	bne.n	800d732 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	695b      	ldr	r3, [r3, #20]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d10e      	bne.n	800d70a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800d6ec:	69fb      	ldr	r3, [r7, #28]
 800d6ee:	4a43      	ldr	r2, [pc, #268]	; (800d7fc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	d906      	bls.n	800d702 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d6f4:	69fb      	ldr	r3, [r7, #28]
 800d6f6:	4a40      	ldr	r2, [pc, #256]	; (800d7f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d6f8:	fba2 2303 	umull	r2, r3, r2, r3
 800d6fc:	0e5b      	lsrs	r3, r3, #25
 800d6fe:	61bb      	str	r3, [r7, #24]
 800d700:	e03d      	b.n	800d77e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	695b      	ldr	r3, [r3, #20]
 800d706:	61bb      	str	r3, [r7, #24]
 800d708:	e039      	b.n	800d77e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	695b      	ldr	r3, [r3, #20]
 800d70e:	005b      	lsls	r3, r3, #1
 800d710:	69fa      	ldr	r2, [r7, #28]
 800d712:	fbb2 f3f3 	udiv	r3, r2, r3
 800d716:	4a39      	ldr	r2, [pc, #228]	; (800d7fc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d718:	4293      	cmp	r3, r2
 800d71a:	d906      	bls.n	800d72a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d71c:	69fb      	ldr	r3, [r7, #28]
 800d71e:	4a36      	ldr	r2, [pc, #216]	; (800d7f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d720:	fba2 2303 	umull	r2, r3, r2, r3
 800d724:	0e5b      	lsrs	r3, r3, #25
 800d726:	61bb      	str	r3, [r7, #24]
 800d728:	e029      	b.n	800d77e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	695b      	ldr	r3, [r3, #20]
 800d72e:	61bb      	str	r3, [r7, #24]
 800d730:	e025      	b.n	800d77e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	695b      	ldr	r3, [r3, #20]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d10e      	bne.n	800d758 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800d73a:	69fb      	ldr	r3, [r7, #28]
 800d73c:	4a30      	ldr	r2, [pc, #192]	; (800d800 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	d906      	bls.n	800d750 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d742:	69fb      	ldr	r3, [r7, #28]
 800d744:	4a2c      	ldr	r2, [pc, #176]	; (800d7f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d746:	fba2 2303 	umull	r2, r3, r2, r3
 800d74a:	0e1b      	lsrs	r3, r3, #24
 800d74c:	61bb      	str	r3, [r7, #24]
 800d74e:	e016      	b.n	800d77e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	695b      	ldr	r3, [r3, #20]
 800d754:	61bb      	str	r3, [r7, #24]
 800d756:	e012      	b.n	800d77e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	695b      	ldr	r3, [r3, #20]
 800d75c:	005b      	lsls	r3, r3, #1
 800d75e:	69fa      	ldr	r2, [r7, #28]
 800d760:	fbb2 f3f3 	udiv	r3, r2, r3
 800d764:	4a26      	ldr	r2, [pc, #152]	; (800d800 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d766:	4293      	cmp	r3, r2
 800d768:	d906      	bls.n	800d778 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d76a:	69fb      	ldr	r3, [r7, #28]
 800d76c:	4a22      	ldr	r2, [pc, #136]	; (800d7f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d76e:	fba2 2303 	umull	r2, r3, r2, r3
 800d772:	0e1b      	lsrs	r3, r3, #24
 800d774:	61bb      	str	r3, [r7, #24]
 800d776:	e002      	b.n	800d77e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	695b      	ldr	r3, [r3, #20]
 800d77c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681c      	ldr	r4, [r3, #0]
 800d782:	466a      	mov	r2, sp
 800d784:	f107 0314 	add.w	r3, r7, #20
 800d788:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d78c:	e882 0003 	stmia.w	r2, {r0, r1}
 800d790:	f107 0308 	add.w	r3, r7, #8
 800d794:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d796:	4620      	mov	r0, r4
 800d798:	f002 ff28 	bl	80105ec <SDMMC_Init>
 800d79c:	e008      	b.n	800d7b0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f002 fff5 	bl	80107a8 <SDMMC_CmdBlockLength>
 800d7be:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d7c0:	6a3b      	ldr	r3, [r7, #32]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d00c      	beq.n	800d7e0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	4a0a      	ldr	r2, [pc, #40]	; (800d7f4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d7cc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d7d2:	6a3b      	ldr	r3, [r7, #32]
 800d7d4:	431a      	orrs	r2, r3
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800d7da:	2301      	movs	r3, #1
 800d7dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800d7e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	372c      	adds	r7, #44	; 0x2c
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd90      	pop	{r4, r7, pc}
 800d7f4:	1fe00fff 	.word	0x1fe00fff
 800d7f8:	55e63b89 	.word	0x55e63b89
 800d7fc:	02faf080 	.word	0x02faf080
 800d800:	017d7840 	.word	0x017d7840

0800d804 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b086      	sub	sp, #24
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d80c:	2300      	movs	r3, #0
 800d80e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d810:	f107 030c 	add.w	r3, r7, #12
 800d814:	4619      	mov	r1, r3
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f000 fa40 	bl	800dc9c <SD_SendStatus>
 800d81c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d005      	beq.n	800d830 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	431a      	orrs	r2, r3
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	0a5b      	lsrs	r3, r3, #9
 800d834:	f003 030f 	and.w	r3, r3, #15
 800d838:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d83a:	693b      	ldr	r3, [r7, #16]
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3718      	adds	r7, #24
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}

0800d844 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b090      	sub	sp, #64	; 0x40
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800d84c:	2300      	movs	r3, #0
 800d84e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800d850:	f7f5 faf0 	bl	8002e34 <HAL_GetTick>
 800d854:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	4618      	mov	r0, r3
 800d85c:	f002 ff1f 	bl	801069e <SDMMC_GetPowerState>
 800d860:	4603      	mov	r3, r0
 800d862:	2b00      	cmp	r3, #0
 800d864:	d102      	bne.n	800d86c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d866:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d86a:	e0b5      	b.n	800d9d8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d870:	2b03      	cmp	r3, #3
 800d872:	d02e      	beq.n	800d8d2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4618      	mov	r0, r3
 800d87a:	f003 f96a 	bl	8010b52 <SDMMC_CmdSendCID>
 800d87e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d882:	2b00      	cmp	r3, #0
 800d884:	d001      	beq.n	800d88a <SD_InitCard+0x46>
    {
      return errorstate;
 800d886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d888:	e0a6      	b.n	800d9d8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	2100      	movs	r1, #0
 800d890:	4618      	mov	r0, r3
 800d892:	f002 ff4a 	bl	801072a <SDMMC_GetResponse>
 800d896:	4602      	mov	r2, r0
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	2104      	movs	r1, #4
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f002 ff41 	bl	801072a <SDMMC_GetResponse>
 800d8a8:	4602      	mov	r2, r0
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	2108      	movs	r1, #8
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f002 ff38 	bl	801072a <SDMMC_GetResponse>
 800d8ba:	4602      	mov	r2, r0
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	210c      	movs	r1, #12
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f002 ff2f 	bl	801072a <SDMMC_GetResponse>
 800d8cc:	4602      	mov	r2, r0
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8d6:	2b03      	cmp	r3, #3
 800d8d8:	d01d      	beq.n	800d916 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800d8da:	e019      	b.n	800d910 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	f107 020a 	add.w	r2, r7, #10
 800d8e4:	4611      	mov	r1, r2
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f003 f972 	bl	8010bd0 <SDMMC_CmdSetRelAdd>
 800d8ec:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800d8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d001      	beq.n	800d8f8 <SD_InitCard+0xb4>
      {
        return errorstate;
 800d8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8f6:	e06f      	b.n	800d9d8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800d8f8:	f7f5 fa9c 	bl	8002e34 <HAL_GetTick>
 800d8fc:	4602      	mov	r2, r0
 800d8fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d900:	1ad3      	subs	r3, r2, r3
 800d902:	f241 3287 	movw	r2, #4999	; 0x1387
 800d906:	4293      	cmp	r3, r2
 800d908:	d902      	bls.n	800d910 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800d90a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d90e:	e063      	b.n	800d9d8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800d910:	897b      	ldrh	r3, [r7, #10]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d0e2      	beq.n	800d8dc <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d91a:	2b03      	cmp	r3, #3
 800d91c:	d036      	beq.n	800d98c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d91e:	897b      	ldrh	r3, [r7, #10]
 800d920:	461a      	mov	r2, r3
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681a      	ldr	r2, [r3, #0]
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d92e:	041b      	lsls	r3, r3, #16
 800d930:	4619      	mov	r1, r3
 800d932:	4610      	mov	r0, r2
 800d934:	f003 f92c 	bl	8010b90 <SDMMC_CmdSendCSD>
 800d938:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d001      	beq.n	800d944 <SD_InitCard+0x100>
    {
      return errorstate;
 800d940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d942:	e049      	b.n	800d9d8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	2100      	movs	r1, #0
 800d94a:	4618      	mov	r0, r3
 800d94c:	f002 feed 	bl	801072a <SDMMC_GetResponse>
 800d950:	4602      	mov	r2, r0
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	2104      	movs	r1, #4
 800d95c:	4618      	mov	r0, r3
 800d95e:	f002 fee4 	bl	801072a <SDMMC_GetResponse>
 800d962:	4602      	mov	r2, r0
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	2108      	movs	r1, #8
 800d96e:	4618      	mov	r0, r3
 800d970:	f002 fedb 	bl	801072a <SDMMC_GetResponse>
 800d974:	4602      	mov	r2, r0
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	210c      	movs	r1, #12
 800d980:	4618      	mov	r0, r3
 800d982:	f002 fed2 	bl	801072a <SDMMC_GetResponse>
 800d986:	4602      	mov	r2, r0
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	2104      	movs	r1, #4
 800d992:	4618      	mov	r0, r3
 800d994:	f002 fec9 	bl	801072a <SDMMC_GetResponse>
 800d998:	4603      	mov	r3, r0
 800d99a:	0d1a      	lsrs	r2, r3, #20
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d9a0:	f107 030c 	add.w	r3, r7, #12
 800d9a4:	4619      	mov	r1, r3
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f7ff fb8c 	bl	800d0c4 <HAL_SD_GetCardCSD>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d002      	beq.n	800d9b8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d9b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d9b6:	e00f      	b.n	800d9d8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681a      	ldr	r2, [r3, #0]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9c0:	041b      	lsls	r3, r3, #16
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	4610      	mov	r0, r2
 800d9c6:	f002 ffdb 	bl	8010980 <SDMMC_CmdSelDesel>
 800d9ca:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800d9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d001      	beq.n	800d9d6 <SD_InitCard+0x192>
  {
    return errorstate;
 800d9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d4:	e000      	b.n	800d9d8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d9d6:	2300      	movs	r3, #0
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3740      	adds	r7, #64	; 0x40
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}

0800d9e0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b086      	sub	sp, #24
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f002 ffe4 	bl	80109c6 <SDMMC_CmdGoIdleState>
 800d9fe:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d001      	beq.n	800da0a <SD_PowerON+0x2a>
  {
    return errorstate;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	e072      	b.n	800daf0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	4618      	mov	r0, r3
 800da10:	f002 fff7 	bl	8010a02 <SDMMC_CmdOperCond>
 800da14:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800da1c:	d10d      	bne.n	800da3a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2200      	movs	r2, #0
 800da22:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	4618      	mov	r0, r3
 800da2a:	f002 ffcc 	bl	80109c6 <SDMMC_CmdGoIdleState>
 800da2e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d004      	beq.n	800da40 <SD_PowerON+0x60>
    {
      return errorstate;
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	e05a      	b.n	800daf0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2201      	movs	r2, #1
 800da3e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da44:	2b01      	cmp	r3, #1
 800da46:	d137      	bne.n	800dab8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	2100      	movs	r1, #0
 800da4e:	4618      	mov	r0, r3
 800da50:	f002 fff7 	bl	8010a42 <SDMMC_CmdAppCommand>
 800da54:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d02d      	beq.n	800dab8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800da60:	e046      	b.n	800daf0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	2100      	movs	r1, #0
 800da68:	4618      	mov	r0, r3
 800da6a:	f002 ffea 	bl	8010a42 <SDMMC_CmdAppCommand>
 800da6e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d001      	beq.n	800da7a <SD_PowerON+0x9a>
    {
      return errorstate;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	e03a      	b.n	800daf0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	491e      	ldr	r1, [pc, #120]	; (800daf8 <SD_PowerON+0x118>)
 800da80:	4618      	mov	r0, r3
 800da82:	f003 f801 	bl	8010a88 <SDMMC_CmdAppOperCommand>
 800da86:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d002      	beq.n	800da94 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800da92:	e02d      	b.n	800daf0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	2100      	movs	r1, #0
 800da9a:	4618      	mov	r0, r3
 800da9c:	f002 fe45 	bl	801072a <SDMMC_GetResponse>
 800daa0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	0fdb      	lsrs	r3, r3, #31
 800daa6:	2b01      	cmp	r3, #1
 800daa8:	d101      	bne.n	800daae <SD_PowerON+0xce>
 800daaa:	2301      	movs	r3, #1
 800daac:	e000      	b.n	800dab0 <SD_PowerON+0xd0>
 800daae:	2300      	movs	r3, #0
 800dab0:	613b      	str	r3, [r7, #16]

    count++;
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	3301      	adds	r3, #1
 800dab6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d802      	bhi.n	800dac8 <SD_PowerON+0xe8>
 800dac2:	693b      	ldr	r3, [r7, #16]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d0cc      	beq.n	800da62 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dace:	4293      	cmp	r3, r2
 800dad0:	d902      	bls.n	800dad8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800dad2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dad6:	e00b      	b.n	800daf0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2200      	movs	r2, #0
 800dadc:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d002      	beq.n	800daee <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2201      	movs	r2, #1
 800daec:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800daee:	2300      	movs	r3, #0
}
 800daf0:	4618      	mov	r0, r3
 800daf2:	3718      	adds	r7, #24
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}
 800daf8:	c1100000 	.word	0xc1100000

0800dafc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b08c      	sub	sp, #48	; 0x30
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800db06:	f7f5 f995 	bl	8002e34 <HAL_GetTick>
 800db0a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	2100      	movs	r1, #0
 800db16:	4618      	mov	r0, r3
 800db18:	f002 fe07 	bl	801072a <SDMMC_GetResponse>
 800db1c:	4603      	mov	r3, r0
 800db1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800db26:	d102      	bne.n	800db2e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800db28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800db2c:	e0b0      	b.n	800dc90 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	2140      	movs	r1, #64	; 0x40
 800db34:	4618      	mov	r0, r3
 800db36:	f002 fe37 	bl	80107a8 <SDMMC_CmdBlockLength>
 800db3a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800db3c:	6a3b      	ldr	r3, [r7, #32]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d005      	beq.n	800db4e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800db4a:	6a3b      	ldr	r3, [r7, #32]
 800db4c:	e0a0      	b.n	800dc90 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681a      	ldr	r2, [r3, #0]
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db56:	041b      	lsls	r3, r3, #16
 800db58:	4619      	mov	r1, r3
 800db5a:	4610      	mov	r0, r2
 800db5c:	f002 ff71 	bl	8010a42 <SDMMC_CmdAppCommand>
 800db60:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800db62:	6a3b      	ldr	r3, [r7, #32]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d005      	beq.n	800db74 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800db70:	6a3b      	ldr	r3, [r7, #32]
 800db72:	e08d      	b.n	800dc90 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800db74:	f04f 33ff 	mov.w	r3, #4294967295
 800db78:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800db7a:	2340      	movs	r3, #64	; 0x40
 800db7c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800db7e:	2360      	movs	r3, #96	; 0x60
 800db80:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800db82:	2302      	movs	r3, #2
 800db84:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800db86:	2300      	movs	r3, #0
 800db88:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800db8a:	2301      	movs	r3, #1
 800db8c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	f107 0208 	add.w	r2, r7, #8
 800db96:	4611      	mov	r1, r2
 800db98:	4618      	mov	r0, r3
 800db9a:	f002 fdd9 	bl	8010750 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	4618      	mov	r0, r3
 800dba4:	f003 f859 	bl	8010c5a <SDMMC_CmdStatusRegister>
 800dba8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dbaa:	6a3b      	ldr	r3, [r7, #32]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d02b      	beq.n	800dc08 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800dbb8:	6a3b      	ldr	r3, [r7, #32]
 800dbba:	e069      	b.n	800dc90 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d013      	beq.n	800dbf2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800dbca:	2300      	movs	r3, #0
 800dbcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbce:	e00d      	b.n	800dbec <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f002 fd33 	bl	8010640 <SDMMC_ReadFIFO>
 800dbda:	4602      	mov	r2, r0
 800dbdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbde:	601a      	str	r2, [r3, #0]
        pData++;
 800dbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe2:	3304      	adds	r3, #4
 800dbe4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800dbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe8:	3301      	adds	r3, #1
 800dbea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbee:	2b07      	cmp	r3, #7
 800dbf0:	d9ee      	bls.n	800dbd0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800dbf2:	f7f5 f91f 	bl	8002e34 <HAL_GetTick>
 800dbf6:	4602      	mov	r2, r0
 800dbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbfa:	1ad3      	subs	r3, r2, r3
 800dbfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc00:	d102      	bne.n	800dc08 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dc02:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dc06:	e043      	b.n	800dc90 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc0e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d0d2      	beq.n	800dbbc <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc1c:	f003 0308 	and.w	r3, r3, #8
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d001      	beq.n	800dc28 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800dc24:	2308      	movs	r3, #8
 800dc26:	e033      	b.n	800dc90 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc2e:	f003 0302 	and.w	r3, r3, #2
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d001      	beq.n	800dc3a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800dc36:	2302      	movs	r3, #2
 800dc38:	e02a      	b.n	800dc90 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc40:	f003 0320 	and.w	r3, r3, #32
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d017      	beq.n	800dc78 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800dc48:	2320      	movs	r3, #32
 800dc4a:	e021      	b.n	800dc90 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	4618      	mov	r0, r3
 800dc52:	f002 fcf5 	bl	8010640 <SDMMC_ReadFIFO>
 800dc56:	4602      	mov	r2, r0
 800dc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc5a:	601a      	str	r2, [r3, #0]
    pData++;
 800dc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc5e:	3304      	adds	r3, #4
 800dc60:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800dc62:	f7f5 f8e7 	bl	8002e34 <HAL_GetTick>
 800dc66:	4602      	mov	r2, r0
 800dc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc6a:	1ad3      	subs	r3, r2, r3
 800dc6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc70:	d102      	bne.n	800dc78 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dc72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dc76:	e00b      	b.n	800dc90 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d1e2      	bne.n	800dc4c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	4a03      	ldr	r2, [pc, #12]	; (800dc98 <SD_SendSDStatus+0x19c>)
 800dc8c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800dc8e:	2300      	movs	r3, #0
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	3730      	adds	r7, #48	; 0x30
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}
 800dc98:	18000f3a 	.word	0x18000f3a

0800dc9c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b084      	sub	sp, #16
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
 800dca4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d102      	bne.n	800dcb2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800dcac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dcb0:	e018      	b.n	800dce4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681a      	ldr	r2, [r3, #0]
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcba:	041b      	lsls	r3, r3, #16
 800dcbc:	4619      	mov	r1, r3
 800dcbe:	4610      	mov	r0, r2
 800dcc0:	f002 ffa8 	bl	8010c14 <SDMMC_CmdSendStatus>
 800dcc4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d001      	beq.n	800dcd0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	e009      	b.n	800dce4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	2100      	movs	r1, #0
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f002 fd27 	bl	801072a <SDMMC_GetResponse>
 800dcdc:	4602      	mov	r2, r0
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800dce2:	2300      	movs	r3, #0
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3710      	adds	r7, #16
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b086      	sub	sp, #24
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	60fb      	str	r3, [r7, #12]
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	2100      	movs	r1, #0
 800dd02:	4618      	mov	r0, r3
 800dd04:	f002 fd11 	bl	801072a <SDMMC_GetResponse>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dd12:	d102      	bne.n	800dd1a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dd14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dd18:	e02f      	b.n	800dd7a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dd1a:	f107 030c 	add.w	r3, r7, #12
 800dd1e:	4619      	mov	r1, r3
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f000 f879 	bl	800de18 <SD_FindSCR>
 800dd26:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d001      	beq.n	800dd32 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	e023      	b.n	800dd7a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d01c      	beq.n	800dd76 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681a      	ldr	r2, [r3, #0]
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd44:	041b      	lsls	r3, r3, #16
 800dd46:	4619      	mov	r1, r3
 800dd48:	4610      	mov	r0, r2
 800dd4a:	f002 fe7a 	bl	8010a42 <SDMMC_CmdAppCommand>
 800dd4e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d001      	beq.n	800dd5a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	e00f      	b.n	800dd7a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	2102      	movs	r1, #2
 800dd60:	4618      	mov	r0, r3
 800dd62:	f002 feb1 	bl	8010ac8 <SDMMC_CmdBusWidth>
 800dd66:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d001      	beq.n	800dd72 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	e003      	b.n	800dd7a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dd72:	2300      	movs	r3, #0
 800dd74:	e001      	b.n	800dd7a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dd76:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3718      	adds	r7, #24
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}

0800dd82 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800dd82:	b580      	push	{r7, lr}
 800dd84:	b086      	sub	sp, #24
 800dd86:	af00      	add	r7, sp, #0
 800dd88:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	60fb      	str	r3, [r7, #12]
 800dd8e:	2300      	movs	r3, #0
 800dd90:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	2100      	movs	r1, #0
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f002 fcc6 	bl	801072a <SDMMC_GetResponse>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dda4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dda8:	d102      	bne.n	800ddb0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ddaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ddae:	e02f      	b.n	800de10 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ddb0:	f107 030c 	add.w	r3, r7, #12
 800ddb4:	4619      	mov	r1, r3
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f000 f82e 	bl	800de18 <SD_FindSCR>
 800ddbc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d001      	beq.n	800ddc8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	e023      	b.n	800de10 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d01c      	beq.n	800de0c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681a      	ldr	r2, [r3, #0]
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddda:	041b      	lsls	r3, r3, #16
 800dddc:	4619      	mov	r1, r3
 800ddde:	4610      	mov	r0, r2
 800dde0:	f002 fe2f 	bl	8010a42 <SDMMC_CmdAppCommand>
 800dde4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d001      	beq.n	800ddf0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	e00f      	b.n	800de10 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	2100      	movs	r1, #0
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f002 fe66 	bl	8010ac8 <SDMMC_CmdBusWidth>
 800ddfc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d001      	beq.n	800de08 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800de04:	697b      	ldr	r3, [r7, #20]
 800de06:	e003      	b.n	800de10 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800de08:	2300      	movs	r3, #0
 800de0a:	e001      	b.n	800de10 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800de0c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800de10:	4618      	mov	r0, r3
 800de12:	3718      	adds	r7, #24
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}

0800de18 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b08e      	sub	sp, #56	; 0x38
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800de22:	f7f5 f807 	bl	8002e34 <HAL_GetTick>
 800de26:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800de28:	2300      	movs	r3, #0
 800de2a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800de2c:	2300      	movs	r3, #0
 800de2e:	60bb      	str	r3, [r7, #8]
 800de30:	2300      	movs	r3, #0
 800de32:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	2108      	movs	r1, #8
 800de3e:	4618      	mov	r0, r3
 800de40:	f002 fcb2 	bl	80107a8 <SDMMC_CmdBlockLength>
 800de44:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800de46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d001      	beq.n	800de50 <SD_FindSCR+0x38>
  {
    return errorstate;
 800de4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de4e:	e0ad      	b.n	800dfac <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681a      	ldr	r2, [r3, #0]
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de58:	041b      	lsls	r3, r3, #16
 800de5a:	4619      	mov	r1, r3
 800de5c:	4610      	mov	r0, r2
 800de5e:	f002 fdf0 	bl	8010a42 <SDMMC_CmdAppCommand>
 800de62:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800de64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de66:	2b00      	cmp	r3, #0
 800de68:	d001      	beq.n	800de6e <SD_FindSCR+0x56>
  {
    return errorstate;
 800de6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6c:	e09e      	b.n	800dfac <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800de6e:	f04f 33ff 	mov.w	r3, #4294967295
 800de72:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800de74:	2308      	movs	r3, #8
 800de76:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800de78:	2330      	movs	r3, #48	; 0x30
 800de7a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800de7c:	2302      	movs	r3, #2
 800de7e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800de80:	2300      	movs	r3, #0
 800de82:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800de84:	2301      	movs	r3, #1
 800de86:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f107 0210 	add.w	r2, r7, #16
 800de90:	4611      	mov	r1, r2
 800de92:	4618      	mov	r0, r3
 800de94:	f002 fc5c 	bl	8010750 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	4618      	mov	r0, r3
 800de9e:	f002 fe36 	bl	8010b0e <SDMMC_CmdSendSCR>
 800dea2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800dea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d027      	beq.n	800defa <SD_FindSCR+0xe2>
  {
    return errorstate;
 800deaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deac:	e07e      	b.n	800dfac <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800deb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d113      	bne.n	800dee4 <SD_FindSCR+0xcc>
 800debc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d110      	bne.n	800dee4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	4618      	mov	r0, r3
 800dec8:	f002 fbba 	bl	8010640 <SDMMC_ReadFIFO>
 800decc:	4603      	mov	r3, r0
 800dece:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	4618      	mov	r0, r3
 800ded6:	f002 fbb3 	bl	8010640 <SDMMC_ReadFIFO>
 800deda:	4603      	mov	r3, r0
 800dedc:	60fb      	str	r3, [r7, #12]
      index++;
 800dede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dee0:	3301      	adds	r3, #1
 800dee2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800dee4:	f7f4 ffa6 	bl	8002e34 <HAL_GetTick>
 800dee8:	4602      	mov	r2, r0
 800deea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deec:	1ad3      	subs	r3, r2, r3
 800deee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800def2:	d102      	bne.n	800defa <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800def4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800def8:	e058      	b.n	800dfac <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df00:	f240 532a 	movw	r3, #1322	; 0x52a
 800df04:	4013      	ands	r3, r2
 800df06:	2b00      	cmp	r3, #0
 800df08:	d0d1      	beq.n	800deae <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df10:	f003 0308 	and.w	r3, r3, #8
 800df14:	2b00      	cmp	r3, #0
 800df16:	d005      	beq.n	800df24 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	2208      	movs	r2, #8
 800df1e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800df20:	2308      	movs	r3, #8
 800df22:	e043      	b.n	800dfac <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df2a:	f003 0302 	and.w	r3, r3, #2
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d005      	beq.n	800df3e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	2202      	movs	r2, #2
 800df38:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800df3a:	2302      	movs	r3, #2
 800df3c:	e036      	b.n	800dfac <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df44:	f003 0320 	and.w	r3, r3, #32
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d005      	beq.n	800df58 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	2220      	movs	r2, #32
 800df52:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800df54:	2320      	movs	r3, #32
 800df56:	e029      	b.n	800dfac <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	4a15      	ldr	r2, [pc, #84]	; (800dfb4 <SD_FindSCR+0x19c>)
 800df5e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	061a      	lsls	r2, r3, #24
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	021b      	lsls	r3, r3, #8
 800df68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800df6c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	0a1b      	lsrs	r3, r3, #8
 800df72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800df76:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	0e1b      	lsrs	r3, r3, #24
 800df7c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800df7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df80:	601a      	str	r2, [r3, #0]
    scr++;
 800df82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df84:	3304      	adds	r3, #4
 800df86:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	061a      	lsls	r2, r3, #24
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	021b      	lsls	r3, r3, #8
 800df90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800df94:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	0a1b      	lsrs	r3, r3, #8
 800df9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800df9e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	0e1b      	lsrs	r3, r3, #24
 800dfa4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800dfa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfa8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800dfaa:	2300      	movs	r3, #0
}
 800dfac:	4618      	mov	r0, r3
 800dfae:	3738      	adds	r7, #56	; 0x38
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}
 800dfb4:	18000f3a 	.word	0x18000f3a

0800dfb8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b086      	sub	sp, #24
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfc4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfca:	2b1f      	cmp	r3, #31
 800dfcc:	d936      	bls.n	800e03c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800dfce:	2300      	movs	r3, #0
 800dfd0:	617b      	str	r3, [r7, #20]
 800dfd2:	e027      	b.n	800e024 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f002 fb31 	bl	8010640 <SDMMC_ReadFIFO>
 800dfde:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	b2da      	uxtb	r2, r3
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	3301      	adds	r3, #1
 800dfec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	0a1b      	lsrs	r3, r3, #8
 800dff2:	b2da      	uxtb	r2, r3
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dff8:	693b      	ldr	r3, [r7, #16]
 800dffa:	3301      	adds	r3, #1
 800dffc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	0c1b      	lsrs	r3, r3, #16
 800e002:	b2da      	uxtb	r2, r3
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e008:	693b      	ldr	r3, [r7, #16]
 800e00a:	3301      	adds	r3, #1
 800e00c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	0e1b      	lsrs	r3, r3, #24
 800e012:	b2da      	uxtb	r2, r3
 800e014:	693b      	ldr	r3, [r7, #16]
 800e016:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e018:	693b      	ldr	r3, [r7, #16]
 800e01a:	3301      	adds	r3, #1
 800e01c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	3301      	adds	r3, #1
 800e022:	617b      	str	r3, [r7, #20]
 800e024:	697b      	ldr	r3, [r7, #20]
 800e026:	2b07      	cmp	r3, #7
 800e028:	d9d4      	bls.n	800dfd4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	693a      	ldr	r2, [r7, #16]
 800e02e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e034:	f1a3 0220 	sub.w	r2, r3, #32
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800e03c:	bf00      	nop
 800e03e:	3718      	adds	r7, #24
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}

0800e044 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b086      	sub	sp, #24
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	69db      	ldr	r3, [r3, #28]
 800e050:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6a1b      	ldr	r3, [r3, #32]
 800e056:	2b1f      	cmp	r3, #31
 800e058:	d93a      	bls.n	800e0d0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800e05a:	2300      	movs	r3, #0
 800e05c:	617b      	str	r3, [r7, #20]
 800e05e:	e02b      	b.n	800e0b8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e060:	693b      	ldr	r3, [r7, #16]
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e066:	693b      	ldr	r3, [r7, #16]
 800e068:	3301      	adds	r3, #1
 800e06a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	781b      	ldrb	r3, [r3, #0]
 800e070:	021a      	lsls	r2, r3, #8
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	4313      	orrs	r3, r2
 800e076:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	3301      	adds	r3, #1
 800e07c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	781b      	ldrb	r3, [r3, #0]
 800e082:	041a      	lsls	r2, r3, #16
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	4313      	orrs	r3, r2
 800e088:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	3301      	adds	r3, #1
 800e08e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e090:	693b      	ldr	r3, [r7, #16]
 800e092:	781b      	ldrb	r3, [r3, #0]
 800e094:	061a      	lsls	r2, r3, #24
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	4313      	orrs	r3, r2
 800e09a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	3301      	adds	r3, #1
 800e0a0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	f107 020c 	add.w	r2, r7, #12
 800e0aa:	4611      	mov	r1, r2
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f002 fad4 	bl	801065a <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	3301      	adds	r3, #1
 800e0b6:	617b      	str	r3, [r7, #20]
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	2b07      	cmp	r3, #7
 800e0bc:	d9d0      	bls.n	800e060 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	693a      	ldr	r2, [r7, #16]
 800e0c2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	6a1b      	ldr	r3, [r3, #32]
 800e0c8:	f1a3 0220 	sub.w	r2, r3, #32
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	621a      	str	r2, [r3, #32]
  }
}
 800e0d0:	bf00      	nop
 800e0d2:	3718      	adds	r7, #24
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}

0800e0d8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e0d8:	b480      	push	{r7}
 800e0da:	b083      	sub	sp, #12
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e0e0:	bf00      	nop
 800e0e2:	370c      	adds	r7, #12
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ea:	4770      	bx	lr

0800e0ec <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	b083      	sub	sp, #12
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e0f4:	bf00      	nop
 800e0f6:	370c      	adds	r7, #12
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fe:	4770      	bx	lr

0800e100 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e100:	b480      	push	{r7}
 800e102:	b083      	sub	sp, #12
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e108:	bf00      	nop
 800e10a:	370c      	adds	r7, #12
 800e10c:	46bd      	mov	sp, r7
 800e10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e112:	4770      	bx	lr

0800e114 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e114:	b480      	push	{r7}
 800e116:	b083      	sub	sp, #12
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e11c:	bf00      	nop
 800e11e:	370c      	adds	r7, #12
 800e120:	46bd      	mov	sp, r7
 800e122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e126:	4770      	bx	lr

0800e128 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b084      	sub	sp, #16
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d101      	bne.n	800e13a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e136:	2301      	movs	r3, #1
 800e138:	e10f      	b.n	800e35a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2200      	movs	r2, #0
 800e13e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	4a87      	ldr	r2, [pc, #540]	; (800e364 <HAL_SPI_Init+0x23c>)
 800e146:	4293      	cmp	r3, r2
 800e148:	d00f      	beq.n	800e16a <HAL_SPI_Init+0x42>
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	4a86      	ldr	r2, [pc, #536]	; (800e368 <HAL_SPI_Init+0x240>)
 800e150:	4293      	cmp	r3, r2
 800e152:	d00a      	beq.n	800e16a <HAL_SPI_Init+0x42>
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	4a84      	ldr	r2, [pc, #528]	; (800e36c <HAL_SPI_Init+0x244>)
 800e15a:	4293      	cmp	r3, r2
 800e15c:	d005      	beq.n	800e16a <HAL_SPI_Init+0x42>
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	68db      	ldr	r3, [r3, #12]
 800e162:	2b0f      	cmp	r3, #15
 800e164:	d901      	bls.n	800e16a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e166:	2301      	movs	r3, #1
 800e168:	e0f7      	b.n	800e35a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f000 f900 	bl	800e370 <SPI_GetPacketSize>
 800e170:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	4a7b      	ldr	r2, [pc, #492]	; (800e364 <HAL_SPI_Init+0x23c>)
 800e178:	4293      	cmp	r3, r2
 800e17a:	d00c      	beq.n	800e196 <HAL_SPI_Init+0x6e>
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	4a79      	ldr	r2, [pc, #484]	; (800e368 <HAL_SPI_Init+0x240>)
 800e182:	4293      	cmp	r3, r2
 800e184:	d007      	beq.n	800e196 <HAL_SPI_Init+0x6e>
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	4a78      	ldr	r2, [pc, #480]	; (800e36c <HAL_SPI_Init+0x244>)
 800e18c:	4293      	cmp	r3, r2
 800e18e:	d002      	beq.n	800e196 <HAL_SPI_Init+0x6e>
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	2b08      	cmp	r3, #8
 800e194:	d811      	bhi.n	800e1ba <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e19a:	4a72      	ldr	r2, [pc, #456]	; (800e364 <HAL_SPI_Init+0x23c>)
 800e19c:	4293      	cmp	r3, r2
 800e19e:	d009      	beq.n	800e1b4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	4a70      	ldr	r2, [pc, #448]	; (800e368 <HAL_SPI_Init+0x240>)
 800e1a6:	4293      	cmp	r3, r2
 800e1a8:	d004      	beq.n	800e1b4 <HAL_SPI_Init+0x8c>
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	4a6f      	ldr	r2, [pc, #444]	; (800e36c <HAL_SPI_Init+0x244>)
 800e1b0:	4293      	cmp	r3, r2
 800e1b2:	d104      	bne.n	800e1be <HAL_SPI_Init+0x96>
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2b10      	cmp	r3, #16
 800e1b8:	d901      	bls.n	800e1be <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	e0cd      	b.n	800e35a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e1c4:	b2db      	uxtb	r3, r3
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d106      	bne.n	800e1d8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f7f3 ffac 	bl	8002130 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2202      	movs	r2, #2
 800e1dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	681a      	ldr	r2, [r3, #0]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f022 0201 	bic.w	r2, r2, #1
 800e1ee:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	689b      	ldr	r3, [r3, #8]
 800e1f6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e1fa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	699b      	ldr	r3, [r3, #24]
 800e200:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e204:	d119      	bne.n	800e23a <HAL_SPI_Init+0x112>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	685b      	ldr	r3, [r3, #4]
 800e20a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e20e:	d103      	bne.n	800e218 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e214:	2b00      	cmp	r3, #0
 800e216:	d008      	beq.n	800e22a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d10c      	bne.n	800e23a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e224:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e228:	d107      	bne.n	800e23a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	681a      	ldr	r2, [r3, #0]
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e238:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	685b      	ldr	r3, [r3, #4]
 800e23e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e242:	2b00      	cmp	r3, #0
 800e244:	d00f      	beq.n	800e266 <HAL_SPI_Init+0x13e>
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	68db      	ldr	r3, [r3, #12]
 800e24a:	2b06      	cmp	r3, #6
 800e24c:	d90b      	bls.n	800e266 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	430a      	orrs	r2, r1
 800e262:	601a      	str	r2, [r3, #0]
 800e264:	e007      	b.n	800e276 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	681a      	ldr	r2, [r3, #0]
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e274:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	69da      	ldr	r2, [r3, #28]
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e27e:	431a      	orrs	r2, r3
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	431a      	orrs	r2, r3
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e288:	ea42 0103 	orr.w	r1, r2, r3
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	68da      	ldr	r2, [r3, #12]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	430a      	orrs	r2, r1
 800e296:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2a0:	431a      	orrs	r2, r3
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2a6:	431a      	orrs	r2, r3
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	699b      	ldr	r3, [r3, #24]
 800e2ac:	431a      	orrs	r2, r3
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	691b      	ldr	r3, [r3, #16]
 800e2b2:	431a      	orrs	r2, r3
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	695b      	ldr	r3, [r3, #20]
 800e2b8:	431a      	orrs	r2, r3
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6a1b      	ldr	r3, [r3, #32]
 800e2be:	431a      	orrs	r2, r3
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	685b      	ldr	r3, [r3, #4]
 800e2c4:	431a      	orrs	r2, r3
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2ca:	431a      	orrs	r2, r3
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	689b      	ldr	r3, [r3, #8]
 800e2d0:	431a      	orrs	r2, r3
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2d6:	ea42 0103 	orr.w	r1, r2, r3
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	430a      	orrs	r2, r1
 800e2e4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	685b      	ldr	r3, [r3, #4]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d113      	bne.n	800e316 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	689b      	ldr	r3, [r3, #8]
 800e2f4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e300:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	689b      	ldr	r3, [r3, #8]
 800e308:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e314:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	f022 0201 	bic.w	r2, r2, #1
 800e324:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	685b      	ldr	r3, [r3, #4]
 800e32a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d00a      	beq.n	800e348 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	68db      	ldr	r3, [r3, #12]
 800e338:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	430a      	orrs	r2, r1
 800e346:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2200      	movs	r2, #0
 800e34c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2201      	movs	r2, #1
 800e354:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e358:	2300      	movs	r3, #0
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3710      	adds	r7, #16
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}
 800e362:	bf00      	nop
 800e364:	40013000 	.word	0x40013000
 800e368:	40003800 	.word	0x40003800
 800e36c:	40003c00 	.word	0x40003c00

0800e370 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800e370:	b480      	push	{r7}
 800e372:	b085      	sub	sp, #20
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e37c:	095b      	lsrs	r3, r3, #5
 800e37e:	3301      	adds	r3, #1
 800e380:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	68db      	ldr	r3, [r3, #12]
 800e386:	3301      	adds	r3, #1
 800e388:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	3307      	adds	r3, #7
 800e38e:	08db      	lsrs	r3, r3, #3
 800e390:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	68fa      	ldr	r2, [r7, #12]
 800e396:	fb02 f303 	mul.w	r3, r2, r3
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3714      	adds	r7, #20
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a4:	4770      	bx	lr

0800e3a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e3a6:	b580      	push	{r7, lr}
 800e3a8:	b082      	sub	sp, #8
 800e3aa:	af00      	add	r7, sp, #0
 800e3ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d101      	bne.n	800e3b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	e049      	b.n	800e44c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e3be:	b2db      	uxtb	r3, r3
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d106      	bne.n	800e3d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f7f4 f901 	bl	80025d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2202      	movs	r2, #2
 800e3d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681a      	ldr	r2, [r3, #0]
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	3304      	adds	r3, #4
 800e3e2:	4619      	mov	r1, r3
 800e3e4:	4610      	mov	r0, r2
 800e3e6:	f000 faf1 	bl	800e9cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2201      	movs	r2, #1
 800e3ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2201      	movs	r2, #1
 800e3f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2201      	movs	r2, #1
 800e3fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2201      	movs	r2, #1
 800e406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2201      	movs	r2, #1
 800e40e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2201      	movs	r2, #1
 800e416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	2201      	movs	r2, #1
 800e41e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2201      	movs	r2, #1
 800e426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2201      	movs	r2, #1
 800e42e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2201      	movs	r2, #1
 800e436:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2201      	movs	r2, #1
 800e43e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2201      	movs	r2, #1
 800e446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e44a:	2300      	movs	r3, #0
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3708      	adds	r7, #8
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}

0800e454 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b082      	sub	sp, #8
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d101      	bne.n	800e466 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e462:	2301      	movs	r3, #1
 800e464:	e049      	b.n	800e4fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e46c:	b2db      	uxtb	r3, r3
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d106      	bne.n	800e480 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2200      	movs	r2, #0
 800e476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f7f3 ff14 	bl	80022a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2202      	movs	r2, #2
 800e484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681a      	ldr	r2, [r3, #0]
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	3304      	adds	r3, #4
 800e490:	4619      	mov	r1, r3
 800e492:	4610      	mov	r0, r2
 800e494:	f000 fa9a 	bl	800e9cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2201      	movs	r2, #1
 800e49c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2201      	movs	r2, #1
 800e4a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2201      	movs	r2, #1
 800e4b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2201      	movs	r2, #1
 800e4cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2201      	movs	r2, #1
 800e4d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2201      	movs	r2, #1
 800e4dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2201      	movs	r2, #1
 800e4e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2201      	movs	r2, #1
 800e4ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2201      	movs	r2, #1
 800e4f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e4f8:	2300      	movs	r3, #0
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	3708      	adds	r7, #8
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}

0800e502 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e502:	b580      	push	{r7, lr}
 800e504:	b082      	sub	sp, #8
 800e506:	af00      	add	r7, sp, #0
 800e508:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	691b      	ldr	r3, [r3, #16]
 800e510:	f003 0302 	and.w	r3, r3, #2
 800e514:	2b02      	cmp	r3, #2
 800e516:	d122      	bne.n	800e55e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	68db      	ldr	r3, [r3, #12]
 800e51e:	f003 0302 	and.w	r3, r3, #2
 800e522:	2b02      	cmp	r3, #2
 800e524:	d11b      	bne.n	800e55e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	f06f 0202 	mvn.w	r2, #2
 800e52e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2201      	movs	r2, #1
 800e534:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	699b      	ldr	r3, [r3, #24]
 800e53c:	f003 0303 	and.w	r3, r3, #3
 800e540:	2b00      	cmp	r3, #0
 800e542:	d003      	beq.n	800e54c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f000 fa23 	bl	800e990 <HAL_TIM_IC_CaptureCallback>
 800e54a:	e005      	b.n	800e558 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f000 fa15 	bl	800e97c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f000 fa26 	bl	800e9a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2200      	movs	r2, #0
 800e55c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	691b      	ldr	r3, [r3, #16]
 800e564:	f003 0304 	and.w	r3, r3, #4
 800e568:	2b04      	cmp	r3, #4
 800e56a:	d122      	bne.n	800e5b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	68db      	ldr	r3, [r3, #12]
 800e572:	f003 0304 	and.w	r3, r3, #4
 800e576:	2b04      	cmp	r3, #4
 800e578:	d11b      	bne.n	800e5b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f06f 0204 	mvn.w	r2, #4
 800e582:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2202      	movs	r2, #2
 800e588:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	699b      	ldr	r3, [r3, #24]
 800e590:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e594:	2b00      	cmp	r3, #0
 800e596:	d003      	beq.n	800e5a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	f000 f9f9 	bl	800e990 <HAL_TIM_IC_CaptureCallback>
 800e59e:	e005      	b.n	800e5ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f000 f9eb 	bl	800e97c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f000 f9fc 	bl	800e9a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	691b      	ldr	r3, [r3, #16]
 800e5b8:	f003 0308 	and.w	r3, r3, #8
 800e5bc:	2b08      	cmp	r3, #8
 800e5be:	d122      	bne.n	800e606 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	68db      	ldr	r3, [r3, #12]
 800e5c6:	f003 0308 	and.w	r3, r3, #8
 800e5ca:	2b08      	cmp	r3, #8
 800e5cc:	d11b      	bne.n	800e606 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f06f 0208 	mvn.w	r2, #8
 800e5d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2204      	movs	r2, #4
 800e5dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	69db      	ldr	r3, [r3, #28]
 800e5e4:	f003 0303 	and.w	r3, r3, #3
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d003      	beq.n	800e5f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f000 f9cf 	bl	800e990 <HAL_TIM_IC_CaptureCallback>
 800e5f2:	e005      	b.n	800e600 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f000 f9c1 	bl	800e97c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f000 f9d2 	bl	800e9a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2200      	movs	r2, #0
 800e604:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	691b      	ldr	r3, [r3, #16]
 800e60c:	f003 0310 	and.w	r3, r3, #16
 800e610:	2b10      	cmp	r3, #16
 800e612:	d122      	bne.n	800e65a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	68db      	ldr	r3, [r3, #12]
 800e61a:	f003 0310 	and.w	r3, r3, #16
 800e61e:	2b10      	cmp	r3, #16
 800e620:	d11b      	bne.n	800e65a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	f06f 0210 	mvn.w	r2, #16
 800e62a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2208      	movs	r2, #8
 800e630:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	69db      	ldr	r3, [r3, #28]
 800e638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d003      	beq.n	800e648 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f000 f9a5 	bl	800e990 <HAL_TIM_IC_CaptureCallback>
 800e646:	e005      	b.n	800e654 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f000 f997 	bl	800e97c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	f000 f9a8 	bl	800e9a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2200      	movs	r2, #0
 800e658:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	691b      	ldr	r3, [r3, #16]
 800e660:	f003 0301 	and.w	r3, r3, #1
 800e664:	2b01      	cmp	r3, #1
 800e666:	d10e      	bne.n	800e686 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	68db      	ldr	r3, [r3, #12]
 800e66e:	f003 0301 	and.w	r3, r3, #1
 800e672:	2b01      	cmp	r3, #1
 800e674:	d107      	bne.n	800e686 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	f06f 0201 	mvn.w	r2, #1
 800e67e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f000 f971 	bl	800e968 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	691b      	ldr	r3, [r3, #16]
 800e68c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e690:	2b80      	cmp	r3, #128	; 0x80
 800e692:	d10e      	bne.n	800e6b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	68db      	ldr	r3, [r3, #12]
 800e69a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e69e:	2b80      	cmp	r3, #128	; 0x80
 800e6a0:	d107      	bne.n	800e6b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e6aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f000 fdaf 	bl	800f210 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	691b      	ldr	r3, [r3, #16]
 800e6b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e6c0:	d10e      	bne.n	800e6e0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	68db      	ldr	r3, [r3, #12]
 800e6c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6cc:	2b80      	cmp	r3, #128	; 0x80
 800e6ce:	d107      	bne.n	800e6e0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e6d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f000 fda2 	bl	800f224 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	691b      	ldr	r3, [r3, #16]
 800e6e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6ea:	2b40      	cmp	r3, #64	; 0x40
 800e6ec:	d10e      	bne.n	800e70c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	68db      	ldr	r3, [r3, #12]
 800e6f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6f8:	2b40      	cmp	r3, #64	; 0x40
 800e6fa:	d107      	bne.n	800e70c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f000 f956 	bl	800e9b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	691b      	ldr	r3, [r3, #16]
 800e712:	f003 0320 	and.w	r3, r3, #32
 800e716:	2b20      	cmp	r3, #32
 800e718:	d10e      	bne.n	800e738 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	68db      	ldr	r3, [r3, #12]
 800e720:	f003 0320 	and.w	r3, r3, #32
 800e724:	2b20      	cmp	r3, #32
 800e726:	d107      	bne.n	800e738 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	f06f 0220 	mvn.w	r2, #32
 800e730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f000 fd62 	bl	800f1fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e738:	bf00      	nop
 800e73a:	3708      	adds	r7, #8
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}

0800e740 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b086      	sub	sp, #24
 800e744:	af00      	add	r7, sp, #0
 800e746:	60f8      	str	r0, [r7, #12]
 800e748:	60b9      	str	r1, [r7, #8]
 800e74a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e74c:	2300      	movs	r3, #0
 800e74e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e756:	2b01      	cmp	r3, #1
 800e758:	d101      	bne.n	800e75e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e75a:	2302      	movs	r3, #2
 800e75c:	e0ff      	b.n	800e95e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	2201      	movs	r2, #1
 800e762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2b14      	cmp	r3, #20
 800e76a:	f200 80f0 	bhi.w	800e94e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e76e:	a201      	add	r2, pc, #4	; (adr r2, 800e774 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e774:	0800e7c9 	.word	0x0800e7c9
 800e778:	0800e94f 	.word	0x0800e94f
 800e77c:	0800e94f 	.word	0x0800e94f
 800e780:	0800e94f 	.word	0x0800e94f
 800e784:	0800e809 	.word	0x0800e809
 800e788:	0800e94f 	.word	0x0800e94f
 800e78c:	0800e94f 	.word	0x0800e94f
 800e790:	0800e94f 	.word	0x0800e94f
 800e794:	0800e84b 	.word	0x0800e84b
 800e798:	0800e94f 	.word	0x0800e94f
 800e79c:	0800e94f 	.word	0x0800e94f
 800e7a0:	0800e94f 	.word	0x0800e94f
 800e7a4:	0800e88b 	.word	0x0800e88b
 800e7a8:	0800e94f 	.word	0x0800e94f
 800e7ac:	0800e94f 	.word	0x0800e94f
 800e7b0:	0800e94f 	.word	0x0800e94f
 800e7b4:	0800e8cd 	.word	0x0800e8cd
 800e7b8:	0800e94f 	.word	0x0800e94f
 800e7bc:	0800e94f 	.word	0x0800e94f
 800e7c0:	0800e94f 	.word	0x0800e94f
 800e7c4:	0800e90d 	.word	0x0800e90d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	68b9      	ldr	r1, [r7, #8]
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f000 f9a2 	bl	800eb18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	699a      	ldr	r2, [r3, #24]
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	f042 0208 	orr.w	r2, r2, #8
 800e7e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	699a      	ldr	r2, [r3, #24]
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f022 0204 	bic.w	r2, r2, #4
 800e7f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	6999      	ldr	r1, [r3, #24]
 800e7fa:	68bb      	ldr	r3, [r7, #8]
 800e7fc:	691a      	ldr	r2, [r3, #16]
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	430a      	orrs	r2, r1
 800e804:	619a      	str	r2, [r3, #24]
      break;
 800e806:	e0a5      	b.n	800e954 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	68b9      	ldr	r1, [r7, #8]
 800e80e:	4618      	mov	r0, r3
 800e810:	f000 fa12 	bl	800ec38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	699a      	ldr	r2, [r3, #24]
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e822:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	699a      	ldr	r2, [r3, #24]
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e832:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	6999      	ldr	r1, [r3, #24]
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	691b      	ldr	r3, [r3, #16]
 800e83e:	021a      	lsls	r2, r3, #8
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	430a      	orrs	r2, r1
 800e846:	619a      	str	r2, [r3, #24]
      break;
 800e848:	e084      	b.n	800e954 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	68b9      	ldr	r1, [r7, #8]
 800e850:	4618      	mov	r0, r3
 800e852:	f000 fa7b 	bl	800ed4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	69da      	ldr	r2, [r3, #28]
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	f042 0208 	orr.w	r2, r2, #8
 800e864:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	69da      	ldr	r2, [r3, #28]
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	f022 0204 	bic.w	r2, r2, #4
 800e874:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	69d9      	ldr	r1, [r3, #28]
 800e87c:	68bb      	ldr	r3, [r7, #8]
 800e87e:	691a      	ldr	r2, [r3, #16]
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	430a      	orrs	r2, r1
 800e886:	61da      	str	r2, [r3, #28]
      break;
 800e888:	e064      	b.n	800e954 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	68b9      	ldr	r1, [r7, #8]
 800e890:	4618      	mov	r0, r3
 800e892:	f000 fae3 	bl	800ee5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	69da      	ldr	r2, [r3, #28]
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e8a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	69da      	ldr	r2, [r3, #28]
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e8b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	69d9      	ldr	r1, [r3, #28]
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	691b      	ldr	r3, [r3, #16]
 800e8c0:	021a      	lsls	r2, r3, #8
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	430a      	orrs	r2, r1
 800e8c8:	61da      	str	r2, [r3, #28]
      break;
 800e8ca:	e043      	b.n	800e954 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	68b9      	ldr	r1, [r7, #8]
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f000 fb2c 	bl	800ef30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	f042 0208 	orr.w	r2, r2, #8
 800e8e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	f022 0204 	bic.w	r2, r2, #4
 800e8f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	691a      	ldr	r2, [r3, #16]
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	430a      	orrs	r2, r1
 800e908:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e90a:	e023      	b.n	800e954 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	68b9      	ldr	r1, [r7, #8]
 800e912:	4618      	mov	r0, r3
 800e914:	f000 fb70 	bl	800eff8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e926:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e936:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e93e:	68bb      	ldr	r3, [r7, #8]
 800e940:	691b      	ldr	r3, [r3, #16]
 800e942:	021a      	lsls	r2, r3, #8
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	430a      	orrs	r2, r1
 800e94a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e94c:	e002      	b.n	800e954 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e94e:	2301      	movs	r3, #1
 800e950:	75fb      	strb	r3, [r7, #23]
      break;
 800e952:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	2200      	movs	r2, #0
 800e958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e95c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e95e:	4618      	mov	r0, r3
 800e960:	3718      	adds	r7, #24
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}
 800e966:	bf00      	nop

0800e968 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e968:	b480      	push	{r7}
 800e96a:	b083      	sub	sp, #12
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800e970:	bf00      	nop
 800e972:	370c      	adds	r7, #12
 800e974:	46bd      	mov	sp, r7
 800e976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97a:	4770      	bx	lr

0800e97c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e97c:	b480      	push	{r7}
 800e97e:	b083      	sub	sp, #12
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e984:	bf00      	nop
 800e986:	370c      	adds	r7, #12
 800e988:	46bd      	mov	sp, r7
 800e98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98e:	4770      	bx	lr

0800e990 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e990:	b480      	push	{r7}
 800e992:	b083      	sub	sp, #12
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e998:	bf00      	nop
 800e99a:	370c      	adds	r7, #12
 800e99c:	46bd      	mov	sp, r7
 800e99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a2:	4770      	bx	lr

0800e9a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e9a4:	b480      	push	{r7}
 800e9a6:	b083      	sub	sp, #12
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e9ac:	bf00      	nop
 800e9ae:	370c      	adds	r7, #12
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b6:	4770      	bx	lr

0800e9b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e9b8:	b480      	push	{r7}
 800e9ba:	b083      	sub	sp, #12
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e9c0:	bf00      	nop
 800e9c2:	370c      	adds	r7, #12
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ca:	4770      	bx	lr

0800e9cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	b085      	sub	sp, #20
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	4a44      	ldr	r2, [pc, #272]	; (800eaf0 <TIM_Base_SetConfig+0x124>)
 800e9e0:	4293      	cmp	r3, r2
 800e9e2:	d013      	beq.n	800ea0c <TIM_Base_SetConfig+0x40>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9ea:	d00f      	beq.n	800ea0c <TIM_Base_SetConfig+0x40>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	4a41      	ldr	r2, [pc, #260]	; (800eaf4 <TIM_Base_SetConfig+0x128>)
 800e9f0:	4293      	cmp	r3, r2
 800e9f2:	d00b      	beq.n	800ea0c <TIM_Base_SetConfig+0x40>
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	4a40      	ldr	r2, [pc, #256]	; (800eaf8 <TIM_Base_SetConfig+0x12c>)
 800e9f8:	4293      	cmp	r3, r2
 800e9fa:	d007      	beq.n	800ea0c <TIM_Base_SetConfig+0x40>
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	4a3f      	ldr	r2, [pc, #252]	; (800eafc <TIM_Base_SetConfig+0x130>)
 800ea00:	4293      	cmp	r3, r2
 800ea02:	d003      	beq.n	800ea0c <TIM_Base_SetConfig+0x40>
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	4a3e      	ldr	r2, [pc, #248]	; (800eb00 <TIM_Base_SetConfig+0x134>)
 800ea08:	4293      	cmp	r3, r2
 800ea0a:	d108      	bne.n	800ea1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	685b      	ldr	r3, [r3, #4]
 800ea18:	68fa      	ldr	r2, [r7, #12]
 800ea1a:	4313      	orrs	r3, r2
 800ea1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	4a33      	ldr	r2, [pc, #204]	; (800eaf0 <TIM_Base_SetConfig+0x124>)
 800ea22:	4293      	cmp	r3, r2
 800ea24:	d027      	beq.n	800ea76 <TIM_Base_SetConfig+0xaa>
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea2c:	d023      	beq.n	800ea76 <TIM_Base_SetConfig+0xaa>
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	4a30      	ldr	r2, [pc, #192]	; (800eaf4 <TIM_Base_SetConfig+0x128>)
 800ea32:	4293      	cmp	r3, r2
 800ea34:	d01f      	beq.n	800ea76 <TIM_Base_SetConfig+0xaa>
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	4a2f      	ldr	r2, [pc, #188]	; (800eaf8 <TIM_Base_SetConfig+0x12c>)
 800ea3a:	4293      	cmp	r3, r2
 800ea3c:	d01b      	beq.n	800ea76 <TIM_Base_SetConfig+0xaa>
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	4a2e      	ldr	r2, [pc, #184]	; (800eafc <TIM_Base_SetConfig+0x130>)
 800ea42:	4293      	cmp	r3, r2
 800ea44:	d017      	beq.n	800ea76 <TIM_Base_SetConfig+0xaa>
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	4a2d      	ldr	r2, [pc, #180]	; (800eb00 <TIM_Base_SetConfig+0x134>)
 800ea4a:	4293      	cmp	r3, r2
 800ea4c:	d013      	beq.n	800ea76 <TIM_Base_SetConfig+0xaa>
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	4a2c      	ldr	r2, [pc, #176]	; (800eb04 <TIM_Base_SetConfig+0x138>)
 800ea52:	4293      	cmp	r3, r2
 800ea54:	d00f      	beq.n	800ea76 <TIM_Base_SetConfig+0xaa>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	4a2b      	ldr	r2, [pc, #172]	; (800eb08 <TIM_Base_SetConfig+0x13c>)
 800ea5a:	4293      	cmp	r3, r2
 800ea5c:	d00b      	beq.n	800ea76 <TIM_Base_SetConfig+0xaa>
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	4a2a      	ldr	r2, [pc, #168]	; (800eb0c <TIM_Base_SetConfig+0x140>)
 800ea62:	4293      	cmp	r3, r2
 800ea64:	d007      	beq.n	800ea76 <TIM_Base_SetConfig+0xaa>
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	4a29      	ldr	r2, [pc, #164]	; (800eb10 <TIM_Base_SetConfig+0x144>)
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	d003      	beq.n	800ea76 <TIM_Base_SetConfig+0xaa>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	4a28      	ldr	r2, [pc, #160]	; (800eb14 <TIM_Base_SetConfig+0x148>)
 800ea72:	4293      	cmp	r3, r2
 800ea74:	d108      	bne.n	800ea88 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ea7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	68db      	ldr	r3, [r3, #12]
 800ea82:	68fa      	ldr	r2, [r7, #12]
 800ea84:	4313      	orrs	r3, r2
 800ea86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	695b      	ldr	r3, [r3, #20]
 800ea92:	4313      	orrs	r3, r2
 800ea94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	68fa      	ldr	r2, [r7, #12]
 800ea9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	689a      	ldr	r2, [r3, #8]
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	681a      	ldr	r2, [r3, #0]
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	4a10      	ldr	r2, [pc, #64]	; (800eaf0 <TIM_Base_SetConfig+0x124>)
 800eab0:	4293      	cmp	r3, r2
 800eab2:	d00f      	beq.n	800ead4 <TIM_Base_SetConfig+0x108>
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	4a12      	ldr	r2, [pc, #72]	; (800eb00 <TIM_Base_SetConfig+0x134>)
 800eab8:	4293      	cmp	r3, r2
 800eaba:	d00b      	beq.n	800ead4 <TIM_Base_SetConfig+0x108>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	4a11      	ldr	r2, [pc, #68]	; (800eb04 <TIM_Base_SetConfig+0x138>)
 800eac0:	4293      	cmp	r3, r2
 800eac2:	d007      	beq.n	800ead4 <TIM_Base_SetConfig+0x108>
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	4a10      	ldr	r2, [pc, #64]	; (800eb08 <TIM_Base_SetConfig+0x13c>)
 800eac8:	4293      	cmp	r3, r2
 800eaca:	d003      	beq.n	800ead4 <TIM_Base_SetConfig+0x108>
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	4a0f      	ldr	r2, [pc, #60]	; (800eb0c <TIM_Base_SetConfig+0x140>)
 800ead0:	4293      	cmp	r3, r2
 800ead2:	d103      	bne.n	800eadc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	691a      	ldr	r2, [r3, #16]
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2201      	movs	r2, #1
 800eae0:	615a      	str	r2, [r3, #20]
}
 800eae2:	bf00      	nop
 800eae4:	3714      	adds	r7, #20
 800eae6:	46bd      	mov	sp, r7
 800eae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaec:	4770      	bx	lr
 800eaee:	bf00      	nop
 800eaf0:	40010000 	.word	0x40010000
 800eaf4:	40000400 	.word	0x40000400
 800eaf8:	40000800 	.word	0x40000800
 800eafc:	40000c00 	.word	0x40000c00
 800eb00:	40010400 	.word	0x40010400
 800eb04:	40014000 	.word	0x40014000
 800eb08:	40014400 	.word	0x40014400
 800eb0c:	40014800 	.word	0x40014800
 800eb10:	4000e000 	.word	0x4000e000
 800eb14:	4000e400 	.word	0x4000e400

0800eb18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b087      	sub	sp, #28
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
 800eb20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6a1b      	ldr	r3, [r3, #32]
 800eb26:	f023 0201 	bic.w	r2, r3, #1
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	6a1b      	ldr	r3, [r3, #32]
 800eb32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	685b      	ldr	r3, [r3, #4]
 800eb38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	699b      	ldr	r3, [r3, #24]
 800eb3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800eb40:	68fa      	ldr	r2, [r7, #12]
 800eb42:	4b37      	ldr	r3, [pc, #220]	; (800ec20 <TIM_OC1_SetConfig+0x108>)
 800eb44:	4013      	ands	r3, r2
 800eb46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	f023 0303 	bic.w	r3, r3, #3
 800eb4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	68fa      	ldr	r2, [r7, #12]
 800eb56:	4313      	orrs	r3, r2
 800eb58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800eb5a:	697b      	ldr	r3, [r7, #20]
 800eb5c:	f023 0302 	bic.w	r3, r3, #2
 800eb60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	689b      	ldr	r3, [r3, #8]
 800eb66:	697a      	ldr	r2, [r7, #20]
 800eb68:	4313      	orrs	r3, r2
 800eb6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	4a2d      	ldr	r2, [pc, #180]	; (800ec24 <TIM_OC1_SetConfig+0x10c>)
 800eb70:	4293      	cmp	r3, r2
 800eb72:	d00f      	beq.n	800eb94 <TIM_OC1_SetConfig+0x7c>
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	4a2c      	ldr	r2, [pc, #176]	; (800ec28 <TIM_OC1_SetConfig+0x110>)
 800eb78:	4293      	cmp	r3, r2
 800eb7a:	d00b      	beq.n	800eb94 <TIM_OC1_SetConfig+0x7c>
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	4a2b      	ldr	r2, [pc, #172]	; (800ec2c <TIM_OC1_SetConfig+0x114>)
 800eb80:	4293      	cmp	r3, r2
 800eb82:	d007      	beq.n	800eb94 <TIM_OC1_SetConfig+0x7c>
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	4a2a      	ldr	r2, [pc, #168]	; (800ec30 <TIM_OC1_SetConfig+0x118>)
 800eb88:	4293      	cmp	r3, r2
 800eb8a:	d003      	beq.n	800eb94 <TIM_OC1_SetConfig+0x7c>
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	4a29      	ldr	r2, [pc, #164]	; (800ec34 <TIM_OC1_SetConfig+0x11c>)
 800eb90:	4293      	cmp	r3, r2
 800eb92:	d10c      	bne.n	800ebae <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800eb94:	697b      	ldr	r3, [r7, #20]
 800eb96:	f023 0308 	bic.w	r3, r3, #8
 800eb9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	68db      	ldr	r3, [r3, #12]
 800eba0:	697a      	ldr	r2, [r7, #20]
 800eba2:	4313      	orrs	r3, r2
 800eba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800eba6:	697b      	ldr	r3, [r7, #20]
 800eba8:	f023 0304 	bic.w	r3, r3, #4
 800ebac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	4a1c      	ldr	r2, [pc, #112]	; (800ec24 <TIM_OC1_SetConfig+0x10c>)
 800ebb2:	4293      	cmp	r3, r2
 800ebb4:	d00f      	beq.n	800ebd6 <TIM_OC1_SetConfig+0xbe>
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	4a1b      	ldr	r2, [pc, #108]	; (800ec28 <TIM_OC1_SetConfig+0x110>)
 800ebba:	4293      	cmp	r3, r2
 800ebbc:	d00b      	beq.n	800ebd6 <TIM_OC1_SetConfig+0xbe>
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	4a1a      	ldr	r2, [pc, #104]	; (800ec2c <TIM_OC1_SetConfig+0x114>)
 800ebc2:	4293      	cmp	r3, r2
 800ebc4:	d007      	beq.n	800ebd6 <TIM_OC1_SetConfig+0xbe>
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	4a19      	ldr	r2, [pc, #100]	; (800ec30 <TIM_OC1_SetConfig+0x118>)
 800ebca:	4293      	cmp	r3, r2
 800ebcc:	d003      	beq.n	800ebd6 <TIM_OC1_SetConfig+0xbe>
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	4a18      	ldr	r2, [pc, #96]	; (800ec34 <TIM_OC1_SetConfig+0x11c>)
 800ebd2:	4293      	cmp	r3, r2
 800ebd4:	d111      	bne.n	800ebfa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ebd6:	693b      	ldr	r3, [r7, #16]
 800ebd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ebdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ebe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	695b      	ldr	r3, [r3, #20]
 800ebea:	693a      	ldr	r2, [r7, #16]
 800ebec:	4313      	orrs	r3, r2
 800ebee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	699b      	ldr	r3, [r3, #24]
 800ebf4:	693a      	ldr	r2, [r7, #16]
 800ebf6:	4313      	orrs	r3, r2
 800ebf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	693a      	ldr	r2, [r7, #16]
 800ebfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	68fa      	ldr	r2, [r7, #12]
 800ec04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	685a      	ldr	r2, [r3, #4]
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	697a      	ldr	r2, [r7, #20]
 800ec12:	621a      	str	r2, [r3, #32]
}
 800ec14:	bf00      	nop
 800ec16:	371c      	adds	r7, #28
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr
 800ec20:	fffeff8f 	.word	0xfffeff8f
 800ec24:	40010000 	.word	0x40010000
 800ec28:	40010400 	.word	0x40010400
 800ec2c:	40014000 	.word	0x40014000
 800ec30:	40014400 	.word	0x40014400
 800ec34:	40014800 	.word	0x40014800

0800ec38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ec38:	b480      	push	{r7}
 800ec3a:	b087      	sub	sp, #28
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
 800ec40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	6a1b      	ldr	r3, [r3, #32]
 800ec46:	f023 0210 	bic.w	r2, r3, #16
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	6a1b      	ldr	r3, [r3, #32]
 800ec52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	685b      	ldr	r3, [r3, #4]
 800ec58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	699b      	ldr	r3, [r3, #24]
 800ec5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ec60:	68fa      	ldr	r2, [r7, #12]
 800ec62:	4b34      	ldr	r3, [pc, #208]	; (800ed34 <TIM_OC2_SetConfig+0xfc>)
 800ec64:	4013      	ands	r3, r2
 800ec66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ec6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	021b      	lsls	r3, r3, #8
 800ec76:	68fa      	ldr	r2, [r7, #12]
 800ec78:	4313      	orrs	r3, r2
 800ec7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	f023 0320 	bic.w	r3, r3, #32
 800ec82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	689b      	ldr	r3, [r3, #8]
 800ec88:	011b      	lsls	r3, r3, #4
 800ec8a:	697a      	ldr	r2, [r7, #20]
 800ec8c:	4313      	orrs	r3, r2
 800ec8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	4a29      	ldr	r2, [pc, #164]	; (800ed38 <TIM_OC2_SetConfig+0x100>)
 800ec94:	4293      	cmp	r3, r2
 800ec96:	d003      	beq.n	800eca0 <TIM_OC2_SetConfig+0x68>
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	4a28      	ldr	r2, [pc, #160]	; (800ed3c <TIM_OC2_SetConfig+0x104>)
 800ec9c:	4293      	cmp	r3, r2
 800ec9e:	d10d      	bne.n	800ecbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eca6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	68db      	ldr	r3, [r3, #12]
 800ecac:	011b      	lsls	r3, r3, #4
 800ecae:	697a      	ldr	r2, [r7, #20]
 800ecb0:	4313      	orrs	r3, r2
 800ecb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ecb4:	697b      	ldr	r3, [r7, #20]
 800ecb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ecba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	4a1e      	ldr	r2, [pc, #120]	; (800ed38 <TIM_OC2_SetConfig+0x100>)
 800ecc0:	4293      	cmp	r3, r2
 800ecc2:	d00f      	beq.n	800ece4 <TIM_OC2_SetConfig+0xac>
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	4a1d      	ldr	r2, [pc, #116]	; (800ed3c <TIM_OC2_SetConfig+0x104>)
 800ecc8:	4293      	cmp	r3, r2
 800ecca:	d00b      	beq.n	800ece4 <TIM_OC2_SetConfig+0xac>
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	4a1c      	ldr	r2, [pc, #112]	; (800ed40 <TIM_OC2_SetConfig+0x108>)
 800ecd0:	4293      	cmp	r3, r2
 800ecd2:	d007      	beq.n	800ece4 <TIM_OC2_SetConfig+0xac>
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	4a1b      	ldr	r2, [pc, #108]	; (800ed44 <TIM_OC2_SetConfig+0x10c>)
 800ecd8:	4293      	cmp	r3, r2
 800ecda:	d003      	beq.n	800ece4 <TIM_OC2_SetConfig+0xac>
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	4a1a      	ldr	r2, [pc, #104]	; (800ed48 <TIM_OC2_SetConfig+0x110>)
 800ece0:	4293      	cmp	r3, r2
 800ece2:	d113      	bne.n	800ed0c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ece4:	693b      	ldr	r3, [r7, #16]
 800ece6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ecea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ecec:	693b      	ldr	r3, [r7, #16]
 800ecee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ecf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	695b      	ldr	r3, [r3, #20]
 800ecf8:	009b      	lsls	r3, r3, #2
 800ecfa:	693a      	ldr	r2, [r7, #16]
 800ecfc:	4313      	orrs	r3, r2
 800ecfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	699b      	ldr	r3, [r3, #24]
 800ed04:	009b      	lsls	r3, r3, #2
 800ed06:	693a      	ldr	r2, [r7, #16]
 800ed08:	4313      	orrs	r3, r2
 800ed0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	693a      	ldr	r2, [r7, #16]
 800ed10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	68fa      	ldr	r2, [r7, #12]
 800ed16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	685a      	ldr	r2, [r3, #4]
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	697a      	ldr	r2, [r7, #20]
 800ed24:	621a      	str	r2, [r3, #32]
}
 800ed26:	bf00      	nop
 800ed28:	371c      	adds	r7, #28
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed30:	4770      	bx	lr
 800ed32:	bf00      	nop
 800ed34:	feff8fff 	.word	0xfeff8fff
 800ed38:	40010000 	.word	0x40010000
 800ed3c:	40010400 	.word	0x40010400
 800ed40:	40014000 	.word	0x40014000
 800ed44:	40014400 	.word	0x40014400
 800ed48:	40014800 	.word	0x40014800

0800ed4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ed4c:	b480      	push	{r7}
 800ed4e:	b087      	sub	sp, #28
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
 800ed54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	6a1b      	ldr	r3, [r3, #32]
 800ed5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	6a1b      	ldr	r3, [r3, #32]
 800ed66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	685b      	ldr	r3, [r3, #4]
 800ed6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	69db      	ldr	r3, [r3, #28]
 800ed72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ed74:	68fa      	ldr	r2, [r7, #12]
 800ed76:	4b33      	ldr	r3, [pc, #204]	; (800ee44 <TIM_OC3_SetConfig+0xf8>)
 800ed78:	4013      	ands	r3, r2
 800ed7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	f023 0303 	bic.w	r3, r3, #3
 800ed82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	68fa      	ldr	r2, [r7, #12]
 800ed8a:	4313      	orrs	r3, r2
 800ed8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ed94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	689b      	ldr	r3, [r3, #8]
 800ed9a:	021b      	lsls	r3, r3, #8
 800ed9c:	697a      	ldr	r2, [r7, #20]
 800ed9e:	4313      	orrs	r3, r2
 800eda0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	4a28      	ldr	r2, [pc, #160]	; (800ee48 <TIM_OC3_SetConfig+0xfc>)
 800eda6:	4293      	cmp	r3, r2
 800eda8:	d003      	beq.n	800edb2 <TIM_OC3_SetConfig+0x66>
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	4a27      	ldr	r2, [pc, #156]	; (800ee4c <TIM_OC3_SetConfig+0x100>)
 800edae:	4293      	cmp	r3, r2
 800edb0:	d10d      	bne.n	800edce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800edb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	68db      	ldr	r3, [r3, #12]
 800edbe:	021b      	lsls	r3, r3, #8
 800edc0:	697a      	ldr	r2, [r7, #20]
 800edc2:	4313      	orrs	r3, r2
 800edc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800edcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	4a1d      	ldr	r2, [pc, #116]	; (800ee48 <TIM_OC3_SetConfig+0xfc>)
 800edd2:	4293      	cmp	r3, r2
 800edd4:	d00f      	beq.n	800edf6 <TIM_OC3_SetConfig+0xaa>
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	4a1c      	ldr	r2, [pc, #112]	; (800ee4c <TIM_OC3_SetConfig+0x100>)
 800edda:	4293      	cmp	r3, r2
 800eddc:	d00b      	beq.n	800edf6 <TIM_OC3_SetConfig+0xaa>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	4a1b      	ldr	r2, [pc, #108]	; (800ee50 <TIM_OC3_SetConfig+0x104>)
 800ede2:	4293      	cmp	r3, r2
 800ede4:	d007      	beq.n	800edf6 <TIM_OC3_SetConfig+0xaa>
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	4a1a      	ldr	r2, [pc, #104]	; (800ee54 <TIM_OC3_SetConfig+0x108>)
 800edea:	4293      	cmp	r3, r2
 800edec:	d003      	beq.n	800edf6 <TIM_OC3_SetConfig+0xaa>
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	4a19      	ldr	r2, [pc, #100]	; (800ee58 <TIM_OC3_SetConfig+0x10c>)
 800edf2:	4293      	cmp	r3, r2
 800edf4:	d113      	bne.n	800ee1e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800edf6:	693b      	ldr	r3, [r7, #16]
 800edf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800edfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800edfe:	693b      	ldr	r3, [r7, #16]
 800ee00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ee04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	695b      	ldr	r3, [r3, #20]
 800ee0a:	011b      	lsls	r3, r3, #4
 800ee0c:	693a      	ldr	r2, [r7, #16]
 800ee0e:	4313      	orrs	r3, r2
 800ee10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	699b      	ldr	r3, [r3, #24]
 800ee16:	011b      	lsls	r3, r3, #4
 800ee18:	693a      	ldr	r2, [r7, #16]
 800ee1a:	4313      	orrs	r3, r2
 800ee1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	693a      	ldr	r2, [r7, #16]
 800ee22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	68fa      	ldr	r2, [r7, #12]
 800ee28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	685a      	ldr	r2, [r3, #4]
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	697a      	ldr	r2, [r7, #20]
 800ee36:	621a      	str	r2, [r3, #32]
}
 800ee38:	bf00      	nop
 800ee3a:	371c      	adds	r7, #28
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee42:	4770      	bx	lr
 800ee44:	fffeff8f 	.word	0xfffeff8f
 800ee48:	40010000 	.word	0x40010000
 800ee4c:	40010400 	.word	0x40010400
 800ee50:	40014000 	.word	0x40014000
 800ee54:	40014400 	.word	0x40014400
 800ee58:	40014800 	.word	0x40014800

0800ee5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ee5c:	b480      	push	{r7}
 800ee5e:	b087      	sub	sp, #28
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6a1b      	ldr	r3, [r3, #32]
 800ee6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6a1b      	ldr	r3, [r3, #32]
 800ee76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	685b      	ldr	r3, [r3, #4]
 800ee7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	69db      	ldr	r3, [r3, #28]
 800ee82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ee84:	68fa      	ldr	r2, [r7, #12]
 800ee86:	4b24      	ldr	r3, [pc, #144]	; (800ef18 <TIM_OC4_SetConfig+0xbc>)
 800ee88:	4013      	ands	r3, r2
 800ee8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ee92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	021b      	lsls	r3, r3, #8
 800ee9a:	68fa      	ldr	r2, [r7, #12]
 800ee9c:	4313      	orrs	r3, r2
 800ee9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800eea0:	693b      	ldr	r3, [r7, #16]
 800eea2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eea6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	689b      	ldr	r3, [r3, #8]
 800eeac:	031b      	lsls	r3, r3, #12
 800eeae:	693a      	ldr	r2, [r7, #16]
 800eeb0:	4313      	orrs	r3, r2
 800eeb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	4a19      	ldr	r2, [pc, #100]	; (800ef1c <TIM_OC4_SetConfig+0xc0>)
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d00f      	beq.n	800eedc <TIM_OC4_SetConfig+0x80>
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	4a18      	ldr	r2, [pc, #96]	; (800ef20 <TIM_OC4_SetConfig+0xc4>)
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d00b      	beq.n	800eedc <TIM_OC4_SetConfig+0x80>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	4a17      	ldr	r2, [pc, #92]	; (800ef24 <TIM_OC4_SetConfig+0xc8>)
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d007      	beq.n	800eedc <TIM_OC4_SetConfig+0x80>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	4a16      	ldr	r2, [pc, #88]	; (800ef28 <TIM_OC4_SetConfig+0xcc>)
 800eed0:	4293      	cmp	r3, r2
 800eed2:	d003      	beq.n	800eedc <TIM_OC4_SetConfig+0x80>
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	4a15      	ldr	r2, [pc, #84]	; (800ef2c <TIM_OC4_SetConfig+0xd0>)
 800eed8:	4293      	cmp	r3, r2
 800eeda:	d109      	bne.n	800eef0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800eedc:	697b      	ldr	r3, [r7, #20]
 800eede:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eee2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	695b      	ldr	r3, [r3, #20]
 800eee8:	019b      	lsls	r3, r3, #6
 800eeea:	697a      	ldr	r2, [r7, #20]
 800eeec:	4313      	orrs	r3, r2
 800eeee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	697a      	ldr	r2, [r7, #20]
 800eef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	68fa      	ldr	r2, [r7, #12]
 800eefa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	685a      	ldr	r2, [r3, #4]
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	693a      	ldr	r2, [r7, #16]
 800ef08:	621a      	str	r2, [r3, #32]
}
 800ef0a:	bf00      	nop
 800ef0c:	371c      	adds	r7, #28
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef14:	4770      	bx	lr
 800ef16:	bf00      	nop
 800ef18:	feff8fff 	.word	0xfeff8fff
 800ef1c:	40010000 	.word	0x40010000
 800ef20:	40010400 	.word	0x40010400
 800ef24:	40014000 	.word	0x40014000
 800ef28:	40014400 	.word	0x40014400
 800ef2c:	40014800 	.word	0x40014800

0800ef30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ef30:	b480      	push	{r7}
 800ef32:	b087      	sub	sp, #28
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
 800ef38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	6a1b      	ldr	r3, [r3, #32]
 800ef3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6a1b      	ldr	r3, [r3, #32]
 800ef4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	685b      	ldr	r3, [r3, #4]
 800ef50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ef58:	68fa      	ldr	r2, [r7, #12]
 800ef5a:	4b21      	ldr	r3, [pc, #132]	; (800efe0 <TIM_OC5_SetConfig+0xb0>)
 800ef5c:	4013      	ands	r3, r2
 800ef5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	68fa      	ldr	r2, [r7, #12]
 800ef66:	4313      	orrs	r3, r2
 800ef68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ef6a:	693b      	ldr	r3, [r7, #16]
 800ef6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ef70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	689b      	ldr	r3, [r3, #8]
 800ef76:	041b      	lsls	r3, r3, #16
 800ef78:	693a      	ldr	r2, [r7, #16]
 800ef7a:	4313      	orrs	r3, r2
 800ef7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	4a18      	ldr	r2, [pc, #96]	; (800efe4 <TIM_OC5_SetConfig+0xb4>)
 800ef82:	4293      	cmp	r3, r2
 800ef84:	d00f      	beq.n	800efa6 <TIM_OC5_SetConfig+0x76>
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	4a17      	ldr	r2, [pc, #92]	; (800efe8 <TIM_OC5_SetConfig+0xb8>)
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	d00b      	beq.n	800efa6 <TIM_OC5_SetConfig+0x76>
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	4a16      	ldr	r2, [pc, #88]	; (800efec <TIM_OC5_SetConfig+0xbc>)
 800ef92:	4293      	cmp	r3, r2
 800ef94:	d007      	beq.n	800efa6 <TIM_OC5_SetConfig+0x76>
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	4a15      	ldr	r2, [pc, #84]	; (800eff0 <TIM_OC5_SetConfig+0xc0>)
 800ef9a:	4293      	cmp	r3, r2
 800ef9c:	d003      	beq.n	800efa6 <TIM_OC5_SetConfig+0x76>
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	4a14      	ldr	r2, [pc, #80]	; (800eff4 <TIM_OC5_SetConfig+0xc4>)
 800efa2:	4293      	cmp	r3, r2
 800efa4:	d109      	bne.n	800efba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800efac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	695b      	ldr	r3, [r3, #20]
 800efb2:	021b      	lsls	r3, r3, #8
 800efb4:	697a      	ldr	r2, [r7, #20]
 800efb6:	4313      	orrs	r3, r2
 800efb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	697a      	ldr	r2, [r7, #20]
 800efbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	68fa      	ldr	r2, [r7, #12]
 800efc4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	685a      	ldr	r2, [r3, #4]
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	693a      	ldr	r2, [r7, #16]
 800efd2:	621a      	str	r2, [r3, #32]
}
 800efd4:	bf00      	nop
 800efd6:	371c      	adds	r7, #28
 800efd8:	46bd      	mov	sp, r7
 800efda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efde:	4770      	bx	lr
 800efe0:	fffeff8f 	.word	0xfffeff8f
 800efe4:	40010000 	.word	0x40010000
 800efe8:	40010400 	.word	0x40010400
 800efec:	40014000 	.word	0x40014000
 800eff0:	40014400 	.word	0x40014400
 800eff4:	40014800 	.word	0x40014800

0800eff8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800eff8:	b480      	push	{r7}
 800effa:	b087      	sub	sp, #28
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
 800f000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	6a1b      	ldr	r3, [r3, #32]
 800f006:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6a1b      	ldr	r3, [r3, #32]
 800f012:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	685b      	ldr	r3, [r3, #4]
 800f018:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f01e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f020:	68fa      	ldr	r2, [r7, #12]
 800f022:	4b22      	ldr	r3, [pc, #136]	; (800f0ac <TIM_OC6_SetConfig+0xb4>)
 800f024:	4013      	ands	r3, r2
 800f026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	021b      	lsls	r3, r3, #8
 800f02e:	68fa      	ldr	r2, [r7, #12]
 800f030:	4313      	orrs	r3, r2
 800f032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f034:	693b      	ldr	r3, [r7, #16]
 800f036:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f03a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	689b      	ldr	r3, [r3, #8]
 800f040:	051b      	lsls	r3, r3, #20
 800f042:	693a      	ldr	r2, [r7, #16]
 800f044:	4313      	orrs	r3, r2
 800f046:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	4a19      	ldr	r2, [pc, #100]	; (800f0b0 <TIM_OC6_SetConfig+0xb8>)
 800f04c:	4293      	cmp	r3, r2
 800f04e:	d00f      	beq.n	800f070 <TIM_OC6_SetConfig+0x78>
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	4a18      	ldr	r2, [pc, #96]	; (800f0b4 <TIM_OC6_SetConfig+0xbc>)
 800f054:	4293      	cmp	r3, r2
 800f056:	d00b      	beq.n	800f070 <TIM_OC6_SetConfig+0x78>
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	4a17      	ldr	r2, [pc, #92]	; (800f0b8 <TIM_OC6_SetConfig+0xc0>)
 800f05c:	4293      	cmp	r3, r2
 800f05e:	d007      	beq.n	800f070 <TIM_OC6_SetConfig+0x78>
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	4a16      	ldr	r2, [pc, #88]	; (800f0bc <TIM_OC6_SetConfig+0xc4>)
 800f064:	4293      	cmp	r3, r2
 800f066:	d003      	beq.n	800f070 <TIM_OC6_SetConfig+0x78>
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	4a15      	ldr	r2, [pc, #84]	; (800f0c0 <TIM_OC6_SetConfig+0xc8>)
 800f06c:	4293      	cmp	r3, r2
 800f06e:	d109      	bne.n	800f084 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f070:	697b      	ldr	r3, [r7, #20]
 800f072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f076:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	695b      	ldr	r3, [r3, #20]
 800f07c:	029b      	lsls	r3, r3, #10
 800f07e:	697a      	ldr	r2, [r7, #20]
 800f080:	4313      	orrs	r3, r2
 800f082:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	697a      	ldr	r2, [r7, #20]
 800f088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	68fa      	ldr	r2, [r7, #12]
 800f08e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	685a      	ldr	r2, [r3, #4]
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	693a      	ldr	r2, [r7, #16]
 800f09c:	621a      	str	r2, [r3, #32]
}
 800f09e:	bf00      	nop
 800f0a0:	371c      	adds	r7, #28
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a8:	4770      	bx	lr
 800f0aa:	bf00      	nop
 800f0ac:	feff8fff 	.word	0xfeff8fff
 800f0b0:	40010000 	.word	0x40010000
 800f0b4:	40010400 	.word	0x40010400
 800f0b8:	40014000 	.word	0x40014000
 800f0bc:	40014400 	.word	0x40014400
 800f0c0:	40014800 	.word	0x40014800

0800f0c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f0c4:	b480      	push	{r7}
 800f0c6:	b085      	sub	sp, #20
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f0d4:	2b01      	cmp	r3, #1
 800f0d6:	d101      	bne.n	800f0dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f0d8:	2302      	movs	r3, #2
 800f0da:	e077      	b.n	800f1cc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2201      	movs	r2, #1
 800f0e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2202      	movs	r2, #2
 800f0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	685b      	ldr	r3, [r3, #4]
 800f0f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	689b      	ldr	r3, [r3, #8]
 800f0fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	4a35      	ldr	r2, [pc, #212]	; (800f1d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f102:	4293      	cmp	r3, r2
 800f104:	d004      	beq.n	800f110 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	4a34      	ldr	r2, [pc, #208]	; (800f1dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f10c:	4293      	cmp	r3, r2
 800f10e:	d108      	bne.n	800f122 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f116:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	685b      	ldr	r3, [r3, #4]
 800f11c:	68fa      	ldr	r2, [r7, #12]
 800f11e:	4313      	orrs	r3, r2
 800f120:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f128:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	68fa      	ldr	r2, [r7, #12]
 800f130:	4313      	orrs	r3, r2
 800f132:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	68fa      	ldr	r2, [r7, #12]
 800f13a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	4a25      	ldr	r2, [pc, #148]	; (800f1d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f142:	4293      	cmp	r3, r2
 800f144:	d02c      	beq.n	800f1a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f14e:	d027      	beq.n	800f1a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	4a22      	ldr	r2, [pc, #136]	; (800f1e0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f156:	4293      	cmp	r3, r2
 800f158:	d022      	beq.n	800f1a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	4a21      	ldr	r2, [pc, #132]	; (800f1e4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f160:	4293      	cmp	r3, r2
 800f162:	d01d      	beq.n	800f1a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	4a1f      	ldr	r2, [pc, #124]	; (800f1e8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f16a:	4293      	cmp	r3, r2
 800f16c:	d018      	beq.n	800f1a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	4a1a      	ldr	r2, [pc, #104]	; (800f1dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f174:	4293      	cmp	r3, r2
 800f176:	d013      	beq.n	800f1a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	4a1b      	ldr	r2, [pc, #108]	; (800f1ec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f17e:	4293      	cmp	r3, r2
 800f180:	d00e      	beq.n	800f1a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	4a1a      	ldr	r2, [pc, #104]	; (800f1f0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800f188:	4293      	cmp	r3, r2
 800f18a:	d009      	beq.n	800f1a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	4a18      	ldr	r2, [pc, #96]	; (800f1f4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800f192:	4293      	cmp	r3, r2
 800f194:	d004      	beq.n	800f1a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	4a17      	ldr	r2, [pc, #92]	; (800f1f8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800f19c:	4293      	cmp	r3, r2
 800f19e:	d10c      	bne.n	800f1ba <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f1a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	689b      	ldr	r3, [r3, #8]
 800f1ac:	68ba      	ldr	r2, [r7, #8]
 800f1ae:	4313      	orrs	r3, r2
 800f1b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	68ba      	ldr	r2, [r7, #8]
 800f1b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2201      	movs	r2, #1
 800f1be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f1ca:	2300      	movs	r3, #0
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	3714      	adds	r7, #20
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d6:	4770      	bx	lr
 800f1d8:	40010000 	.word	0x40010000
 800f1dc:	40010400 	.word	0x40010400
 800f1e0:	40000400 	.word	0x40000400
 800f1e4:	40000800 	.word	0x40000800
 800f1e8:	40000c00 	.word	0x40000c00
 800f1ec:	40001800 	.word	0x40001800
 800f1f0:	40014000 	.word	0x40014000
 800f1f4:	4000e000 	.word	0x4000e000
 800f1f8:	4000e400 	.word	0x4000e400

0800f1fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f1fc:	b480      	push	{r7}
 800f1fe:	b083      	sub	sp, #12
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f204:	bf00      	nop
 800f206:	370c      	adds	r7, #12
 800f208:	46bd      	mov	sp, r7
 800f20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20e:	4770      	bx	lr

0800f210 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f210:	b480      	push	{r7}
 800f212:	b083      	sub	sp, #12
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f218:	bf00      	nop
 800f21a:	370c      	adds	r7, #12
 800f21c:	46bd      	mov	sp, r7
 800f21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f222:	4770      	bx	lr

0800f224 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f224:	b480      	push	{r7}
 800f226:	b083      	sub	sp, #12
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f22c:	bf00      	nop
 800f22e:	370c      	adds	r7, #12
 800f230:	46bd      	mov	sp, r7
 800f232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f236:	4770      	bx	lr

0800f238 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b082      	sub	sp, #8
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d101      	bne.n	800f24a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f246:	2301      	movs	r3, #1
 800f248:	e042      	b.n	800f2d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f250:	2b00      	cmp	r3, #0
 800f252:	d106      	bne.n	800f262 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2200      	movs	r2, #0
 800f258:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f7f3 fa9f 	bl	80027a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2224      	movs	r2, #36	; 0x24
 800f266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	681a      	ldr	r2, [r3, #0]
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	f022 0201 	bic.w	r2, r2, #1
 800f278:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f000 f82c 	bl	800f2d8 <UART_SetConfig>
 800f280:	4603      	mov	r3, r0
 800f282:	2b01      	cmp	r3, #1
 800f284:	d101      	bne.n	800f28a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f286:	2301      	movs	r3, #1
 800f288:	e022      	b.n	800f2d0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d002      	beq.n	800f298 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f000 fe8c 	bl	800ffb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	685a      	ldr	r2, [r3, #4]
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f2a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	689a      	ldr	r2, [r3, #8]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f2b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	681a      	ldr	r2, [r3, #0]
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	f042 0201 	orr.w	r2, r2, #1
 800f2c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f000 ff13 	bl	80100f4 <UART_CheckIdleState>
 800f2ce:	4603      	mov	r3, r0
}
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	3708      	adds	r7, #8
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}

0800f2d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f2d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f2dc:	b092      	sub	sp, #72	; 0x48
 800f2de:	af00      	add	r7, sp, #0
 800f2e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f2e8:	697b      	ldr	r3, [r7, #20]
 800f2ea:	689a      	ldr	r2, [r3, #8]
 800f2ec:	697b      	ldr	r3, [r7, #20]
 800f2ee:	691b      	ldr	r3, [r3, #16]
 800f2f0:	431a      	orrs	r2, r3
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	695b      	ldr	r3, [r3, #20]
 800f2f6:	431a      	orrs	r2, r3
 800f2f8:	697b      	ldr	r3, [r7, #20]
 800f2fa:	69db      	ldr	r3, [r3, #28]
 800f2fc:	4313      	orrs	r3, r2
 800f2fe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f300:	697b      	ldr	r3, [r7, #20]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	681a      	ldr	r2, [r3, #0]
 800f306:	4bbe      	ldr	r3, [pc, #760]	; (800f600 <UART_SetConfig+0x328>)
 800f308:	4013      	ands	r3, r2
 800f30a:	697a      	ldr	r2, [r7, #20]
 800f30c:	6812      	ldr	r2, [r2, #0]
 800f30e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f310:	430b      	orrs	r3, r1
 800f312:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f314:	697b      	ldr	r3, [r7, #20]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	685b      	ldr	r3, [r3, #4]
 800f31a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	68da      	ldr	r2, [r3, #12]
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	430a      	orrs	r2, r1
 800f328:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f32a:	697b      	ldr	r3, [r7, #20]
 800f32c:	699b      	ldr	r3, [r3, #24]
 800f32e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f330:	697b      	ldr	r3, [r7, #20]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	4ab3      	ldr	r2, [pc, #716]	; (800f604 <UART_SetConfig+0x32c>)
 800f336:	4293      	cmp	r3, r2
 800f338:	d004      	beq.n	800f344 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	6a1b      	ldr	r3, [r3, #32]
 800f33e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f340:	4313      	orrs	r3, r2
 800f342:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	689a      	ldr	r2, [r3, #8]
 800f34a:	4baf      	ldr	r3, [pc, #700]	; (800f608 <UART_SetConfig+0x330>)
 800f34c:	4013      	ands	r3, r2
 800f34e:	697a      	ldr	r2, [r7, #20]
 800f350:	6812      	ldr	r2, [r2, #0]
 800f352:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f354:	430b      	orrs	r3, r1
 800f356:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f35e:	f023 010f 	bic.w	r1, r3, #15
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	430a      	orrs	r2, r1
 800f36c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f36e:	697b      	ldr	r3, [r7, #20]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	4aa6      	ldr	r2, [pc, #664]	; (800f60c <UART_SetConfig+0x334>)
 800f374:	4293      	cmp	r3, r2
 800f376:	d177      	bne.n	800f468 <UART_SetConfig+0x190>
 800f378:	4ba5      	ldr	r3, [pc, #660]	; (800f610 <UART_SetConfig+0x338>)
 800f37a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f37c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f380:	2b28      	cmp	r3, #40	; 0x28
 800f382:	d86d      	bhi.n	800f460 <UART_SetConfig+0x188>
 800f384:	a201      	add	r2, pc, #4	; (adr r2, 800f38c <UART_SetConfig+0xb4>)
 800f386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f38a:	bf00      	nop
 800f38c:	0800f431 	.word	0x0800f431
 800f390:	0800f461 	.word	0x0800f461
 800f394:	0800f461 	.word	0x0800f461
 800f398:	0800f461 	.word	0x0800f461
 800f39c:	0800f461 	.word	0x0800f461
 800f3a0:	0800f461 	.word	0x0800f461
 800f3a4:	0800f461 	.word	0x0800f461
 800f3a8:	0800f461 	.word	0x0800f461
 800f3ac:	0800f439 	.word	0x0800f439
 800f3b0:	0800f461 	.word	0x0800f461
 800f3b4:	0800f461 	.word	0x0800f461
 800f3b8:	0800f461 	.word	0x0800f461
 800f3bc:	0800f461 	.word	0x0800f461
 800f3c0:	0800f461 	.word	0x0800f461
 800f3c4:	0800f461 	.word	0x0800f461
 800f3c8:	0800f461 	.word	0x0800f461
 800f3cc:	0800f441 	.word	0x0800f441
 800f3d0:	0800f461 	.word	0x0800f461
 800f3d4:	0800f461 	.word	0x0800f461
 800f3d8:	0800f461 	.word	0x0800f461
 800f3dc:	0800f461 	.word	0x0800f461
 800f3e0:	0800f461 	.word	0x0800f461
 800f3e4:	0800f461 	.word	0x0800f461
 800f3e8:	0800f461 	.word	0x0800f461
 800f3ec:	0800f449 	.word	0x0800f449
 800f3f0:	0800f461 	.word	0x0800f461
 800f3f4:	0800f461 	.word	0x0800f461
 800f3f8:	0800f461 	.word	0x0800f461
 800f3fc:	0800f461 	.word	0x0800f461
 800f400:	0800f461 	.word	0x0800f461
 800f404:	0800f461 	.word	0x0800f461
 800f408:	0800f461 	.word	0x0800f461
 800f40c:	0800f451 	.word	0x0800f451
 800f410:	0800f461 	.word	0x0800f461
 800f414:	0800f461 	.word	0x0800f461
 800f418:	0800f461 	.word	0x0800f461
 800f41c:	0800f461 	.word	0x0800f461
 800f420:	0800f461 	.word	0x0800f461
 800f424:	0800f461 	.word	0x0800f461
 800f428:	0800f461 	.word	0x0800f461
 800f42c:	0800f459 	.word	0x0800f459
 800f430:	2301      	movs	r3, #1
 800f432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f436:	e326      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f438:	2304      	movs	r3, #4
 800f43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f43e:	e322      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f440:	2308      	movs	r3, #8
 800f442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f446:	e31e      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f448:	2310      	movs	r3, #16
 800f44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f44e:	e31a      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f450:	2320      	movs	r3, #32
 800f452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f456:	e316      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f458:	2340      	movs	r3, #64	; 0x40
 800f45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f45e:	e312      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f460:	2380      	movs	r3, #128	; 0x80
 800f462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f466:	e30e      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f468:	697b      	ldr	r3, [r7, #20]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	4a69      	ldr	r2, [pc, #420]	; (800f614 <UART_SetConfig+0x33c>)
 800f46e:	4293      	cmp	r3, r2
 800f470:	d130      	bne.n	800f4d4 <UART_SetConfig+0x1fc>
 800f472:	4b67      	ldr	r3, [pc, #412]	; (800f610 <UART_SetConfig+0x338>)
 800f474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f476:	f003 0307 	and.w	r3, r3, #7
 800f47a:	2b05      	cmp	r3, #5
 800f47c:	d826      	bhi.n	800f4cc <UART_SetConfig+0x1f4>
 800f47e:	a201      	add	r2, pc, #4	; (adr r2, 800f484 <UART_SetConfig+0x1ac>)
 800f480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f484:	0800f49d 	.word	0x0800f49d
 800f488:	0800f4a5 	.word	0x0800f4a5
 800f48c:	0800f4ad 	.word	0x0800f4ad
 800f490:	0800f4b5 	.word	0x0800f4b5
 800f494:	0800f4bd 	.word	0x0800f4bd
 800f498:	0800f4c5 	.word	0x0800f4c5
 800f49c:	2300      	movs	r3, #0
 800f49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4a2:	e2f0      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f4a4:	2304      	movs	r3, #4
 800f4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4aa:	e2ec      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f4ac:	2308      	movs	r3, #8
 800f4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4b2:	e2e8      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f4b4:	2310      	movs	r3, #16
 800f4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4ba:	e2e4      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f4bc:	2320      	movs	r3, #32
 800f4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4c2:	e2e0      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f4c4:	2340      	movs	r3, #64	; 0x40
 800f4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4ca:	e2dc      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f4cc:	2380      	movs	r3, #128	; 0x80
 800f4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4d2:	e2d8      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f4d4:	697b      	ldr	r3, [r7, #20]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	4a4f      	ldr	r2, [pc, #316]	; (800f618 <UART_SetConfig+0x340>)
 800f4da:	4293      	cmp	r3, r2
 800f4dc:	d130      	bne.n	800f540 <UART_SetConfig+0x268>
 800f4de:	4b4c      	ldr	r3, [pc, #304]	; (800f610 <UART_SetConfig+0x338>)
 800f4e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4e2:	f003 0307 	and.w	r3, r3, #7
 800f4e6:	2b05      	cmp	r3, #5
 800f4e8:	d826      	bhi.n	800f538 <UART_SetConfig+0x260>
 800f4ea:	a201      	add	r2, pc, #4	; (adr r2, 800f4f0 <UART_SetConfig+0x218>)
 800f4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4f0:	0800f509 	.word	0x0800f509
 800f4f4:	0800f511 	.word	0x0800f511
 800f4f8:	0800f519 	.word	0x0800f519
 800f4fc:	0800f521 	.word	0x0800f521
 800f500:	0800f529 	.word	0x0800f529
 800f504:	0800f531 	.word	0x0800f531
 800f508:	2300      	movs	r3, #0
 800f50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f50e:	e2ba      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f510:	2304      	movs	r3, #4
 800f512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f516:	e2b6      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f518:	2308      	movs	r3, #8
 800f51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f51e:	e2b2      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f520:	2310      	movs	r3, #16
 800f522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f526:	e2ae      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f528:	2320      	movs	r3, #32
 800f52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f52e:	e2aa      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f530:	2340      	movs	r3, #64	; 0x40
 800f532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f536:	e2a6      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f538:	2380      	movs	r3, #128	; 0x80
 800f53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f53e:	e2a2      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	4a35      	ldr	r2, [pc, #212]	; (800f61c <UART_SetConfig+0x344>)
 800f546:	4293      	cmp	r3, r2
 800f548:	d130      	bne.n	800f5ac <UART_SetConfig+0x2d4>
 800f54a:	4b31      	ldr	r3, [pc, #196]	; (800f610 <UART_SetConfig+0x338>)
 800f54c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f54e:	f003 0307 	and.w	r3, r3, #7
 800f552:	2b05      	cmp	r3, #5
 800f554:	d826      	bhi.n	800f5a4 <UART_SetConfig+0x2cc>
 800f556:	a201      	add	r2, pc, #4	; (adr r2, 800f55c <UART_SetConfig+0x284>)
 800f558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f55c:	0800f575 	.word	0x0800f575
 800f560:	0800f57d 	.word	0x0800f57d
 800f564:	0800f585 	.word	0x0800f585
 800f568:	0800f58d 	.word	0x0800f58d
 800f56c:	0800f595 	.word	0x0800f595
 800f570:	0800f59d 	.word	0x0800f59d
 800f574:	2300      	movs	r3, #0
 800f576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f57a:	e284      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f57c:	2304      	movs	r3, #4
 800f57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f582:	e280      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f584:	2308      	movs	r3, #8
 800f586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f58a:	e27c      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f58c:	2310      	movs	r3, #16
 800f58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f592:	e278      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f594:	2320      	movs	r3, #32
 800f596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f59a:	e274      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f59c:	2340      	movs	r3, #64	; 0x40
 800f59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5a2:	e270      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f5a4:	2380      	movs	r3, #128	; 0x80
 800f5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5aa:	e26c      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f5ac:	697b      	ldr	r3, [r7, #20]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	4a1b      	ldr	r2, [pc, #108]	; (800f620 <UART_SetConfig+0x348>)
 800f5b2:	4293      	cmp	r3, r2
 800f5b4:	d142      	bne.n	800f63c <UART_SetConfig+0x364>
 800f5b6:	4b16      	ldr	r3, [pc, #88]	; (800f610 <UART_SetConfig+0x338>)
 800f5b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5ba:	f003 0307 	and.w	r3, r3, #7
 800f5be:	2b05      	cmp	r3, #5
 800f5c0:	d838      	bhi.n	800f634 <UART_SetConfig+0x35c>
 800f5c2:	a201      	add	r2, pc, #4	; (adr r2, 800f5c8 <UART_SetConfig+0x2f0>)
 800f5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5c8:	0800f5e1 	.word	0x0800f5e1
 800f5cc:	0800f5e9 	.word	0x0800f5e9
 800f5d0:	0800f5f1 	.word	0x0800f5f1
 800f5d4:	0800f5f9 	.word	0x0800f5f9
 800f5d8:	0800f625 	.word	0x0800f625
 800f5dc:	0800f62d 	.word	0x0800f62d
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5e6:	e24e      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f5e8:	2304      	movs	r3, #4
 800f5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5ee:	e24a      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f5f0:	2308      	movs	r3, #8
 800f5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5f6:	e246      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f5f8:	2310      	movs	r3, #16
 800f5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5fe:	e242      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f600:	cfff69f3 	.word	0xcfff69f3
 800f604:	58000c00 	.word	0x58000c00
 800f608:	11fff4ff 	.word	0x11fff4ff
 800f60c:	40011000 	.word	0x40011000
 800f610:	58024400 	.word	0x58024400
 800f614:	40004400 	.word	0x40004400
 800f618:	40004800 	.word	0x40004800
 800f61c:	40004c00 	.word	0x40004c00
 800f620:	40005000 	.word	0x40005000
 800f624:	2320      	movs	r3, #32
 800f626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f62a:	e22c      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f62c:	2340      	movs	r3, #64	; 0x40
 800f62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f632:	e228      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f634:	2380      	movs	r3, #128	; 0x80
 800f636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f63a:	e224      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	4ab1      	ldr	r2, [pc, #708]	; (800f908 <UART_SetConfig+0x630>)
 800f642:	4293      	cmp	r3, r2
 800f644:	d176      	bne.n	800f734 <UART_SetConfig+0x45c>
 800f646:	4bb1      	ldr	r3, [pc, #708]	; (800f90c <UART_SetConfig+0x634>)
 800f648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f64a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f64e:	2b28      	cmp	r3, #40	; 0x28
 800f650:	d86c      	bhi.n	800f72c <UART_SetConfig+0x454>
 800f652:	a201      	add	r2, pc, #4	; (adr r2, 800f658 <UART_SetConfig+0x380>)
 800f654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f658:	0800f6fd 	.word	0x0800f6fd
 800f65c:	0800f72d 	.word	0x0800f72d
 800f660:	0800f72d 	.word	0x0800f72d
 800f664:	0800f72d 	.word	0x0800f72d
 800f668:	0800f72d 	.word	0x0800f72d
 800f66c:	0800f72d 	.word	0x0800f72d
 800f670:	0800f72d 	.word	0x0800f72d
 800f674:	0800f72d 	.word	0x0800f72d
 800f678:	0800f705 	.word	0x0800f705
 800f67c:	0800f72d 	.word	0x0800f72d
 800f680:	0800f72d 	.word	0x0800f72d
 800f684:	0800f72d 	.word	0x0800f72d
 800f688:	0800f72d 	.word	0x0800f72d
 800f68c:	0800f72d 	.word	0x0800f72d
 800f690:	0800f72d 	.word	0x0800f72d
 800f694:	0800f72d 	.word	0x0800f72d
 800f698:	0800f70d 	.word	0x0800f70d
 800f69c:	0800f72d 	.word	0x0800f72d
 800f6a0:	0800f72d 	.word	0x0800f72d
 800f6a4:	0800f72d 	.word	0x0800f72d
 800f6a8:	0800f72d 	.word	0x0800f72d
 800f6ac:	0800f72d 	.word	0x0800f72d
 800f6b0:	0800f72d 	.word	0x0800f72d
 800f6b4:	0800f72d 	.word	0x0800f72d
 800f6b8:	0800f715 	.word	0x0800f715
 800f6bc:	0800f72d 	.word	0x0800f72d
 800f6c0:	0800f72d 	.word	0x0800f72d
 800f6c4:	0800f72d 	.word	0x0800f72d
 800f6c8:	0800f72d 	.word	0x0800f72d
 800f6cc:	0800f72d 	.word	0x0800f72d
 800f6d0:	0800f72d 	.word	0x0800f72d
 800f6d4:	0800f72d 	.word	0x0800f72d
 800f6d8:	0800f71d 	.word	0x0800f71d
 800f6dc:	0800f72d 	.word	0x0800f72d
 800f6e0:	0800f72d 	.word	0x0800f72d
 800f6e4:	0800f72d 	.word	0x0800f72d
 800f6e8:	0800f72d 	.word	0x0800f72d
 800f6ec:	0800f72d 	.word	0x0800f72d
 800f6f0:	0800f72d 	.word	0x0800f72d
 800f6f4:	0800f72d 	.word	0x0800f72d
 800f6f8:	0800f725 	.word	0x0800f725
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f702:	e1c0      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f704:	2304      	movs	r3, #4
 800f706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f70a:	e1bc      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f70c:	2308      	movs	r3, #8
 800f70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f712:	e1b8      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f714:	2310      	movs	r3, #16
 800f716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f71a:	e1b4      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f71c:	2320      	movs	r3, #32
 800f71e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f722:	e1b0      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f724:	2340      	movs	r3, #64	; 0x40
 800f726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f72a:	e1ac      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f72c:	2380      	movs	r3, #128	; 0x80
 800f72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f732:	e1a8      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f734:	697b      	ldr	r3, [r7, #20]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	4a75      	ldr	r2, [pc, #468]	; (800f910 <UART_SetConfig+0x638>)
 800f73a:	4293      	cmp	r3, r2
 800f73c:	d130      	bne.n	800f7a0 <UART_SetConfig+0x4c8>
 800f73e:	4b73      	ldr	r3, [pc, #460]	; (800f90c <UART_SetConfig+0x634>)
 800f740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f742:	f003 0307 	and.w	r3, r3, #7
 800f746:	2b05      	cmp	r3, #5
 800f748:	d826      	bhi.n	800f798 <UART_SetConfig+0x4c0>
 800f74a:	a201      	add	r2, pc, #4	; (adr r2, 800f750 <UART_SetConfig+0x478>)
 800f74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f750:	0800f769 	.word	0x0800f769
 800f754:	0800f771 	.word	0x0800f771
 800f758:	0800f779 	.word	0x0800f779
 800f75c:	0800f781 	.word	0x0800f781
 800f760:	0800f789 	.word	0x0800f789
 800f764:	0800f791 	.word	0x0800f791
 800f768:	2300      	movs	r3, #0
 800f76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f76e:	e18a      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f770:	2304      	movs	r3, #4
 800f772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f776:	e186      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f778:	2308      	movs	r3, #8
 800f77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f77e:	e182      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f780:	2310      	movs	r3, #16
 800f782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f786:	e17e      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f788:	2320      	movs	r3, #32
 800f78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f78e:	e17a      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f790:	2340      	movs	r3, #64	; 0x40
 800f792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f796:	e176      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f798:	2380      	movs	r3, #128	; 0x80
 800f79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f79e:	e172      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	4a5b      	ldr	r2, [pc, #364]	; (800f914 <UART_SetConfig+0x63c>)
 800f7a6:	4293      	cmp	r3, r2
 800f7a8:	d130      	bne.n	800f80c <UART_SetConfig+0x534>
 800f7aa:	4b58      	ldr	r3, [pc, #352]	; (800f90c <UART_SetConfig+0x634>)
 800f7ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7ae:	f003 0307 	and.w	r3, r3, #7
 800f7b2:	2b05      	cmp	r3, #5
 800f7b4:	d826      	bhi.n	800f804 <UART_SetConfig+0x52c>
 800f7b6:	a201      	add	r2, pc, #4	; (adr r2, 800f7bc <UART_SetConfig+0x4e4>)
 800f7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7bc:	0800f7d5 	.word	0x0800f7d5
 800f7c0:	0800f7dd 	.word	0x0800f7dd
 800f7c4:	0800f7e5 	.word	0x0800f7e5
 800f7c8:	0800f7ed 	.word	0x0800f7ed
 800f7cc:	0800f7f5 	.word	0x0800f7f5
 800f7d0:	0800f7fd 	.word	0x0800f7fd
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7da:	e154      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f7dc:	2304      	movs	r3, #4
 800f7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7e2:	e150      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f7e4:	2308      	movs	r3, #8
 800f7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7ea:	e14c      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f7ec:	2310      	movs	r3, #16
 800f7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7f2:	e148      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f7f4:	2320      	movs	r3, #32
 800f7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7fa:	e144      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f7fc:	2340      	movs	r3, #64	; 0x40
 800f7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f802:	e140      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f804:	2380      	movs	r3, #128	; 0x80
 800f806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f80a:	e13c      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	4a41      	ldr	r2, [pc, #260]	; (800f918 <UART_SetConfig+0x640>)
 800f812:	4293      	cmp	r3, r2
 800f814:	f040 8082 	bne.w	800f91c <UART_SetConfig+0x644>
 800f818:	4b3c      	ldr	r3, [pc, #240]	; (800f90c <UART_SetConfig+0x634>)
 800f81a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f81c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f820:	2b28      	cmp	r3, #40	; 0x28
 800f822:	d86d      	bhi.n	800f900 <UART_SetConfig+0x628>
 800f824:	a201      	add	r2, pc, #4	; (adr r2, 800f82c <UART_SetConfig+0x554>)
 800f826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f82a:	bf00      	nop
 800f82c:	0800f8d1 	.word	0x0800f8d1
 800f830:	0800f901 	.word	0x0800f901
 800f834:	0800f901 	.word	0x0800f901
 800f838:	0800f901 	.word	0x0800f901
 800f83c:	0800f901 	.word	0x0800f901
 800f840:	0800f901 	.word	0x0800f901
 800f844:	0800f901 	.word	0x0800f901
 800f848:	0800f901 	.word	0x0800f901
 800f84c:	0800f8d9 	.word	0x0800f8d9
 800f850:	0800f901 	.word	0x0800f901
 800f854:	0800f901 	.word	0x0800f901
 800f858:	0800f901 	.word	0x0800f901
 800f85c:	0800f901 	.word	0x0800f901
 800f860:	0800f901 	.word	0x0800f901
 800f864:	0800f901 	.word	0x0800f901
 800f868:	0800f901 	.word	0x0800f901
 800f86c:	0800f8e1 	.word	0x0800f8e1
 800f870:	0800f901 	.word	0x0800f901
 800f874:	0800f901 	.word	0x0800f901
 800f878:	0800f901 	.word	0x0800f901
 800f87c:	0800f901 	.word	0x0800f901
 800f880:	0800f901 	.word	0x0800f901
 800f884:	0800f901 	.word	0x0800f901
 800f888:	0800f901 	.word	0x0800f901
 800f88c:	0800f8e9 	.word	0x0800f8e9
 800f890:	0800f901 	.word	0x0800f901
 800f894:	0800f901 	.word	0x0800f901
 800f898:	0800f901 	.word	0x0800f901
 800f89c:	0800f901 	.word	0x0800f901
 800f8a0:	0800f901 	.word	0x0800f901
 800f8a4:	0800f901 	.word	0x0800f901
 800f8a8:	0800f901 	.word	0x0800f901
 800f8ac:	0800f8f1 	.word	0x0800f8f1
 800f8b0:	0800f901 	.word	0x0800f901
 800f8b4:	0800f901 	.word	0x0800f901
 800f8b8:	0800f901 	.word	0x0800f901
 800f8bc:	0800f901 	.word	0x0800f901
 800f8c0:	0800f901 	.word	0x0800f901
 800f8c4:	0800f901 	.word	0x0800f901
 800f8c8:	0800f901 	.word	0x0800f901
 800f8cc:	0800f8f9 	.word	0x0800f8f9
 800f8d0:	2301      	movs	r3, #1
 800f8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8d6:	e0d6      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f8d8:	2304      	movs	r3, #4
 800f8da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8de:	e0d2      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f8e0:	2308      	movs	r3, #8
 800f8e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8e6:	e0ce      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f8e8:	2310      	movs	r3, #16
 800f8ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8ee:	e0ca      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f8f0:	2320      	movs	r3, #32
 800f8f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8f6:	e0c6      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f8f8:	2340      	movs	r3, #64	; 0x40
 800f8fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8fe:	e0c2      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f900:	2380      	movs	r3, #128	; 0x80
 800f902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f906:	e0be      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f908:	40011400 	.word	0x40011400
 800f90c:	58024400 	.word	0x58024400
 800f910:	40007800 	.word	0x40007800
 800f914:	40007c00 	.word	0x40007c00
 800f918:	40011800 	.word	0x40011800
 800f91c:	697b      	ldr	r3, [r7, #20]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	4aad      	ldr	r2, [pc, #692]	; (800fbd8 <UART_SetConfig+0x900>)
 800f922:	4293      	cmp	r3, r2
 800f924:	d176      	bne.n	800fa14 <UART_SetConfig+0x73c>
 800f926:	4bad      	ldr	r3, [pc, #692]	; (800fbdc <UART_SetConfig+0x904>)
 800f928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f92a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f92e:	2b28      	cmp	r3, #40	; 0x28
 800f930:	d86c      	bhi.n	800fa0c <UART_SetConfig+0x734>
 800f932:	a201      	add	r2, pc, #4	; (adr r2, 800f938 <UART_SetConfig+0x660>)
 800f934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f938:	0800f9dd 	.word	0x0800f9dd
 800f93c:	0800fa0d 	.word	0x0800fa0d
 800f940:	0800fa0d 	.word	0x0800fa0d
 800f944:	0800fa0d 	.word	0x0800fa0d
 800f948:	0800fa0d 	.word	0x0800fa0d
 800f94c:	0800fa0d 	.word	0x0800fa0d
 800f950:	0800fa0d 	.word	0x0800fa0d
 800f954:	0800fa0d 	.word	0x0800fa0d
 800f958:	0800f9e5 	.word	0x0800f9e5
 800f95c:	0800fa0d 	.word	0x0800fa0d
 800f960:	0800fa0d 	.word	0x0800fa0d
 800f964:	0800fa0d 	.word	0x0800fa0d
 800f968:	0800fa0d 	.word	0x0800fa0d
 800f96c:	0800fa0d 	.word	0x0800fa0d
 800f970:	0800fa0d 	.word	0x0800fa0d
 800f974:	0800fa0d 	.word	0x0800fa0d
 800f978:	0800f9ed 	.word	0x0800f9ed
 800f97c:	0800fa0d 	.word	0x0800fa0d
 800f980:	0800fa0d 	.word	0x0800fa0d
 800f984:	0800fa0d 	.word	0x0800fa0d
 800f988:	0800fa0d 	.word	0x0800fa0d
 800f98c:	0800fa0d 	.word	0x0800fa0d
 800f990:	0800fa0d 	.word	0x0800fa0d
 800f994:	0800fa0d 	.word	0x0800fa0d
 800f998:	0800f9f5 	.word	0x0800f9f5
 800f99c:	0800fa0d 	.word	0x0800fa0d
 800f9a0:	0800fa0d 	.word	0x0800fa0d
 800f9a4:	0800fa0d 	.word	0x0800fa0d
 800f9a8:	0800fa0d 	.word	0x0800fa0d
 800f9ac:	0800fa0d 	.word	0x0800fa0d
 800f9b0:	0800fa0d 	.word	0x0800fa0d
 800f9b4:	0800fa0d 	.word	0x0800fa0d
 800f9b8:	0800f9fd 	.word	0x0800f9fd
 800f9bc:	0800fa0d 	.word	0x0800fa0d
 800f9c0:	0800fa0d 	.word	0x0800fa0d
 800f9c4:	0800fa0d 	.word	0x0800fa0d
 800f9c8:	0800fa0d 	.word	0x0800fa0d
 800f9cc:	0800fa0d 	.word	0x0800fa0d
 800f9d0:	0800fa0d 	.word	0x0800fa0d
 800f9d4:	0800fa0d 	.word	0x0800fa0d
 800f9d8:	0800fa05 	.word	0x0800fa05
 800f9dc:	2301      	movs	r3, #1
 800f9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9e2:	e050      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f9e4:	2304      	movs	r3, #4
 800f9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9ea:	e04c      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f9ec:	2308      	movs	r3, #8
 800f9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9f2:	e048      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f9f4:	2310      	movs	r3, #16
 800f9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9fa:	e044      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800f9fc:	2320      	movs	r3, #32
 800f9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa02:	e040      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800fa04:	2340      	movs	r3, #64	; 0x40
 800fa06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa0a:	e03c      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800fa0c:	2380      	movs	r3, #128	; 0x80
 800fa0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa12:	e038      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800fa14:	697b      	ldr	r3, [r7, #20]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	4a71      	ldr	r2, [pc, #452]	; (800fbe0 <UART_SetConfig+0x908>)
 800fa1a:	4293      	cmp	r3, r2
 800fa1c:	d130      	bne.n	800fa80 <UART_SetConfig+0x7a8>
 800fa1e:	4b6f      	ldr	r3, [pc, #444]	; (800fbdc <UART_SetConfig+0x904>)
 800fa20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa22:	f003 0307 	and.w	r3, r3, #7
 800fa26:	2b05      	cmp	r3, #5
 800fa28:	d826      	bhi.n	800fa78 <UART_SetConfig+0x7a0>
 800fa2a:	a201      	add	r2, pc, #4	; (adr r2, 800fa30 <UART_SetConfig+0x758>)
 800fa2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa30:	0800fa49 	.word	0x0800fa49
 800fa34:	0800fa51 	.word	0x0800fa51
 800fa38:	0800fa59 	.word	0x0800fa59
 800fa3c:	0800fa61 	.word	0x0800fa61
 800fa40:	0800fa69 	.word	0x0800fa69
 800fa44:	0800fa71 	.word	0x0800fa71
 800fa48:	2302      	movs	r3, #2
 800fa4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa4e:	e01a      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800fa50:	2304      	movs	r3, #4
 800fa52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa56:	e016      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800fa58:	2308      	movs	r3, #8
 800fa5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa5e:	e012      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800fa60:	2310      	movs	r3, #16
 800fa62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa66:	e00e      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800fa68:	2320      	movs	r3, #32
 800fa6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa6e:	e00a      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800fa70:	2340      	movs	r3, #64	; 0x40
 800fa72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa76:	e006      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800fa78:	2380      	movs	r3, #128	; 0x80
 800fa7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa7e:	e002      	b.n	800fa86 <UART_SetConfig+0x7ae>
 800fa80:	2380      	movs	r3, #128	; 0x80
 800fa82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fa86:	697b      	ldr	r3, [r7, #20]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	4a55      	ldr	r2, [pc, #340]	; (800fbe0 <UART_SetConfig+0x908>)
 800fa8c:	4293      	cmp	r3, r2
 800fa8e:	f040 80f8 	bne.w	800fc82 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fa92:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fa96:	2b20      	cmp	r3, #32
 800fa98:	dc46      	bgt.n	800fb28 <UART_SetConfig+0x850>
 800fa9a:	2b02      	cmp	r3, #2
 800fa9c:	db75      	blt.n	800fb8a <UART_SetConfig+0x8b2>
 800fa9e:	3b02      	subs	r3, #2
 800faa0:	2b1e      	cmp	r3, #30
 800faa2:	d872      	bhi.n	800fb8a <UART_SetConfig+0x8b2>
 800faa4:	a201      	add	r2, pc, #4	; (adr r2, 800faac <UART_SetConfig+0x7d4>)
 800faa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faaa:	bf00      	nop
 800faac:	0800fb2f 	.word	0x0800fb2f
 800fab0:	0800fb8b 	.word	0x0800fb8b
 800fab4:	0800fb37 	.word	0x0800fb37
 800fab8:	0800fb8b 	.word	0x0800fb8b
 800fabc:	0800fb8b 	.word	0x0800fb8b
 800fac0:	0800fb8b 	.word	0x0800fb8b
 800fac4:	0800fb47 	.word	0x0800fb47
 800fac8:	0800fb8b 	.word	0x0800fb8b
 800facc:	0800fb8b 	.word	0x0800fb8b
 800fad0:	0800fb8b 	.word	0x0800fb8b
 800fad4:	0800fb8b 	.word	0x0800fb8b
 800fad8:	0800fb8b 	.word	0x0800fb8b
 800fadc:	0800fb8b 	.word	0x0800fb8b
 800fae0:	0800fb8b 	.word	0x0800fb8b
 800fae4:	0800fb57 	.word	0x0800fb57
 800fae8:	0800fb8b 	.word	0x0800fb8b
 800faec:	0800fb8b 	.word	0x0800fb8b
 800faf0:	0800fb8b 	.word	0x0800fb8b
 800faf4:	0800fb8b 	.word	0x0800fb8b
 800faf8:	0800fb8b 	.word	0x0800fb8b
 800fafc:	0800fb8b 	.word	0x0800fb8b
 800fb00:	0800fb8b 	.word	0x0800fb8b
 800fb04:	0800fb8b 	.word	0x0800fb8b
 800fb08:	0800fb8b 	.word	0x0800fb8b
 800fb0c:	0800fb8b 	.word	0x0800fb8b
 800fb10:	0800fb8b 	.word	0x0800fb8b
 800fb14:	0800fb8b 	.word	0x0800fb8b
 800fb18:	0800fb8b 	.word	0x0800fb8b
 800fb1c:	0800fb8b 	.word	0x0800fb8b
 800fb20:	0800fb8b 	.word	0x0800fb8b
 800fb24:	0800fb7d 	.word	0x0800fb7d
 800fb28:	2b40      	cmp	r3, #64	; 0x40
 800fb2a:	d02a      	beq.n	800fb82 <UART_SetConfig+0x8aa>
 800fb2c:	e02d      	b.n	800fb8a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fb2e:	f7fc f923 	bl	800bd78 <HAL_RCCEx_GetD3PCLK1Freq>
 800fb32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fb34:	e02f      	b.n	800fb96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fb36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f7fc f932 	bl	800bda4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb44:	e027      	b.n	800fb96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fb46:	f107 0318 	add.w	r3, r7, #24
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f7fc fa7e 	bl	800c04c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fb50:	69fb      	ldr	r3, [r7, #28]
 800fb52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb54:	e01f      	b.n	800fb96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fb56:	4b21      	ldr	r3, [pc, #132]	; (800fbdc <UART_SetConfig+0x904>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	f003 0320 	and.w	r3, r3, #32
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d009      	beq.n	800fb76 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fb62:	4b1e      	ldr	r3, [pc, #120]	; (800fbdc <UART_SetConfig+0x904>)
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	08db      	lsrs	r3, r3, #3
 800fb68:	f003 0303 	and.w	r3, r3, #3
 800fb6c:	4a1d      	ldr	r2, [pc, #116]	; (800fbe4 <UART_SetConfig+0x90c>)
 800fb6e:	fa22 f303 	lsr.w	r3, r2, r3
 800fb72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fb74:	e00f      	b.n	800fb96 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fb76:	4b1b      	ldr	r3, [pc, #108]	; (800fbe4 <UART_SetConfig+0x90c>)
 800fb78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb7a:	e00c      	b.n	800fb96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fb7c:	4b1a      	ldr	r3, [pc, #104]	; (800fbe8 <UART_SetConfig+0x910>)
 800fb7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb80:	e009      	b.n	800fb96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fb82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fb86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb88:	e005      	b.n	800fb96 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fb8e:	2301      	movs	r3, #1
 800fb90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fb94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fb96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	f000 81ee 	beq.w	800ff7a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fb9e:	697b      	ldr	r3, [r7, #20]
 800fba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fba2:	4a12      	ldr	r2, [pc, #72]	; (800fbec <UART_SetConfig+0x914>)
 800fba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fba8:	461a      	mov	r2, r3
 800fbaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbac:	fbb3 f3f2 	udiv	r3, r3, r2
 800fbb0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	685a      	ldr	r2, [r3, #4]
 800fbb6:	4613      	mov	r3, r2
 800fbb8:	005b      	lsls	r3, r3, #1
 800fbba:	4413      	add	r3, r2
 800fbbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbbe:	429a      	cmp	r2, r3
 800fbc0:	d305      	bcc.n	800fbce <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fbc2:	697b      	ldr	r3, [r7, #20]
 800fbc4:	685b      	ldr	r3, [r3, #4]
 800fbc6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fbc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbca:	429a      	cmp	r2, r3
 800fbcc:	d910      	bls.n	800fbf0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800fbce:	2301      	movs	r3, #1
 800fbd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fbd4:	e1d1      	b.n	800ff7a <UART_SetConfig+0xca2>
 800fbd6:	bf00      	nop
 800fbd8:	40011c00 	.word	0x40011c00
 800fbdc:	58024400 	.word	0x58024400
 800fbe0:	58000c00 	.word	0x58000c00
 800fbe4:	03d09000 	.word	0x03d09000
 800fbe8:	003d0900 	.word	0x003d0900
 800fbec:	08019de0 	.word	0x08019de0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fbf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	60bb      	str	r3, [r7, #8]
 800fbf6:	60fa      	str	r2, [r7, #12]
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbfc:	4ac0      	ldr	r2, [pc, #768]	; (800ff00 <UART_SetConfig+0xc28>)
 800fbfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc02:	b29b      	uxth	r3, r3
 800fc04:	2200      	movs	r2, #0
 800fc06:	603b      	str	r3, [r7, #0]
 800fc08:	607a      	str	r2, [r7, #4]
 800fc0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fc12:	f7f0 fd91 	bl	8000738 <__aeabi_uldivmod>
 800fc16:	4602      	mov	r2, r0
 800fc18:	460b      	mov	r3, r1
 800fc1a:	4610      	mov	r0, r2
 800fc1c:	4619      	mov	r1, r3
 800fc1e:	f04f 0200 	mov.w	r2, #0
 800fc22:	f04f 0300 	mov.w	r3, #0
 800fc26:	020b      	lsls	r3, r1, #8
 800fc28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fc2c:	0202      	lsls	r2, r0, #8
 800fc2e:	6979      	ldr	r1, [r7, #20]
 800fc30:	6849      	ldr	r1, [r1, #4]
 800fc32:	0849      	lsrs	r1, r1, #1
 800fc34:	2000      	movs	r0, #0
 800fc36:	460c      	mov	r4, r1
 800fc38:	4605      	mov	r5, r0
 800fc3a:	eb12 0804 	adds.w	r8, r2, r4
 800fc3e:	eb43 0905 	adc.w	r9, r3, r5
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	685b      	ldr	r3, [r3, #4]
 800fc46:	2200      	movs	r2, #0
 800fc48:	469a      	mov	sl, r3
 800fc4a:	4693      	mov	fp, r2
 800fc4c:	4652      	mov	r2, sl
 800fc4e:	465b      	mov	r3, fp
 800fc50:	4640      	mov	r0, r8
 800fc52:	4649      	mov	r1, r9
 800fc54:	f7f0 fd70 	bl	8000738 <__aeabi_uldivmod>
 800fc58:	4602      	mov	r2, r0
 800fc5a:	460b      	mov	r3, r1
 800fc5c:	4613      	mov	r3, r2
 800fc5e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fc60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fc66:	d308      	bcc.n	800fc7a <UART_SetConfig+0x9a2>
 800fc68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fc6e:	d204      	bcs.n	800fc7a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800fc70:	697b      	ldr	r3, [r7, #20]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc76:	60da      	str	r2, [r3, #12]
 800fc78:	e17f      	b.n	800ff7a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fc80:	e17b      	b.n	800ff7a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	69db      	ldr	r3, [r3, #28]
 800fc86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fc8a:	f040 80bd 	bne.w	800fe08 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800fc8e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fc92:	2b20      	cmp	r3, #32
 800fc94:	dc48      	bgt.n	800fd28 <UART_SetConfig+0xa50>
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	db7b      	blt.n	800fd92 <UART_SetConfig+0xaba>
 800fc9a:	2b20      	cmp	r3, #32
 800fc9c:	d879      	bhi.n	800fd92 <UART_SetConfig+0xaba>
 800fc9e:	a201      	add	r2, pc, #4	; (adr r2, 800fca4 <UART_SetConfig+0x9cc>)
 800fca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fca4:	0800fd2f 	.word	0x0800fd2f
 800fca8:	0800fd37 	.word	0x0800fd37
 800fcac:	0800fd93 	.word	0x0800fd93
 800fcb0:	0800fd93 	.word	0x0800fd93
 800fcb4:	0800fd3f 	.word	0x0800fd3f
 800fcb8:	0800fd93 	.word	0x0800fd93
 800fcbc:	0800fd93 	.word	0x0800fd93
 800fcc0:	0800fd93 	.word	0x0800fd93
 800fcc4:	0800fd4f 	.word	0x0800fd4f
 800fcc8:	0800fd93 	.word	0x0800fd93
 800fccc:	0800fd93 	.word	0x0800fd93
 800fcd0:	0800fd93 	.word	0x0800fd93
 800fcd4:	0800fd93 	.word	0x0800fd93
 800fcd8:	0800fd93 	.word	0x0800fd93
 800fcdc:	0800fd93 	.word	0x0800fd93
 800fce0:	0800fd93 	.word	0x0800fd93
 800fce4:	0800fd5f 	.word	0x0800fd5f
 800fce8:	0800fd93 	.word	0x0800fd93
 800fcec:	0800fd93 	.word	0x0800fd93
 800fcf0:	0800fd93 	.word	0x0800fd93
 800fcf4:	0800fd93 	.word	0x0800fd93
 800fcf8:	0800fd93 	.word	0x0800fd93
 800fcfc:	0800fd93 	.word	0x0800fd93
 800fd00:	0800fd93 	.word	0x0800fd93
 800fd04:	0800fd93 	.word	0x0800fd93
 800fd08:	0800fd93 	.word	0x0800fd93
 800fd0c:	0800fd93 	.word	0x0800fd93
 800fd10:	0800fd93 	.word	0x0800fd93
 800fd14:	0800fd93 	.word	0x0800fd93
 800fd18:	0800fd93 	.word	0x0800fd93
 800fd1c:	0800fd93 	.word	0x0800fd93
 800fd20:	0800fd93 	.word	0x0800fd93
 800fd24:	0800fd85 	.word	0x0800fd85
 800fd28:	2b40      	cmp	r3, #64	; 0x40
 800fd2a:	d02e      	beq.n	800fd8a <UART_SetConfig+0xab2>
 800fd2c:	e031      	b.n	800fd92 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fd2e:	f7fa f985 	bl	800a03c <HAL_RCC_GetPCLK1Freq>
 800fd32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fd34:	e033      	b.n	800fd9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fd36:	f7fa f997 	bl	800a068 <HAL_RCC_GetPCLK2Freq>
 800fd3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fd3c:	e02f      	b.n	800fd9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd42:	4618      	mov	r0, r3
 800fd44:	f7fc f82e 	bl	800bda4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fd48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd4c:	e027      	b.n	800fd9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fd4e:	f107 0318 	add.w	r3, r7, #24
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7fc f97a 	bl	800c04c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fd58:	69fb      	ldr	r3, [r7, #28]
 800fd5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd5c:	e01f      	b.n	800fd9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd5e:	4b69      	ldr	r3, [pc, #420]	; (800ff04 <UART_SetConfig+0xc2c>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	f003 0320 	and.w	r3, r3, #32
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d009      	beq.n	800fd7e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fd6a:	4b66      	ldr	r3, [pc, #408]	; (800ff04 <UART_SetConfig+0xc2c>)
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	08db      	lsrs	r3, r3, #3
 800fd70:	f003 0303 	and.w	r3, r3, #3
 800fd74:	4a64      	ldr	r2, [pc, #400]	; (800ff08 <UART_SetConfig+0xc30>)
 800fd76:	fa22 f303 	lsr.w	r3, r2, r3
 800fd7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fd7c:	e00f      	b.n	800fd9e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800fd7e:	4b62      	ldr	r3, [pc, #392]	; (800ff08 <UART_SetConfig+0xc30>)
 800fd80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd82:	e00c      	b.n	800fd9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fd84:	4b61      	ldr	r3, [pc, #388]	; (800ff0c <UART_SetConfig+0xc34>)
 800fd86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd88:	e009      	b.n	800fd9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fd8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fd8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd90:	e005      	b.n	800fd9e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800fd92:	2300      	movs	r3, #0
 800fd94:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fd96:	2301      	movs	r3, #1
 800fd98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fd9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fd9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	f000 80ea 	beq.w	800ff7a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fda6:	697b      	ldr	r3, [r7, #20]
 800fda8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdaa:	4a55      	ldr	r2, [pc, #340]	; (800ff00 <UART_SetConfig+0xc28>)
 800fdac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fdb0:	461a      	mov	r2, r3
 800fdb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdb4:	fbb3 f3f2 	udiv	r3, r3, r2
 800fdb8:	005a      	lsls	r2, r3, #1
 800fdba:	697b      	ldr	r3, [r7, #20]
 800fdbc:	685b      	ldr	r3, [r3, #4]
 800fdbe:	085b      	lsrs	r3, r3, #1
 800fdc0:	441a      	add	r2, r3
 800fdc2:	697b      	ldr	r3, [r7, #20]
 800fdc4:	685b      	ldr	r3, [r3, #4]
 800fdc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdce:	2b0f      	cmp	r3, #15
 800fdd0:	d916      	bls.n	800fe00 <UART_SetConfig+0xb28>
 800fdd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fdd8:	d212      	bcs.n	800fe00 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fdda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fddc:	b29b      	uxth	r3, r3
 800fdde:	f023 030f 	bic.w	r3, r3, #15
 800fde2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde6:	085b      	lsrs	r3, r3, #1
 800fde8:	b29b      	uxth	r3, r3
 800fdea:	f003 0307 	and.w	r3, r3, #7
 800fdee:	b29a      	uxth	r2, r3
 800fdf0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fdf2:	4313      	orrs	r3, r2
 800fdf4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fdfc:	60da      	str	r2, [r3, #12]
 800fdfe:	e0bc      	b.n	800ff7a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800fe00:	2301      	movs	r3, #1
 800fe02:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fe06:	e0b8      	b.n	800ff7a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fe08:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fe0c:	2b20      	cmp	r3, #32
 800fe0e:	dc4b      	bgt.n	800fea8 <UART_SetConfig+0xbd0>
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	f2c0 8087 	blt.w	800ff24 <UART_SetConfig+0xc4c>
 800fe16:	2b20      	cmp	r3, #32
 800fe18:	f200 8084 	bhi.w	800ff24 <UART_SetConfig+0xc4c>
 800fe1c:	a201      	add	r2, pc, #4	; (adr r2, 800fe24 <UART_SetConfig+0xb4c>)
 800fe1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe22:	bf00      	nop
 800fe24:	0800feaf 	.word	0x0800feaf
 800fe28:	0800feb7 	.word	0x0800feb7
 800fe2c:	0800ff25 	.word	0x0800ff25
 800fe30:	0800ff25 	.word	0x0800ff25
 800fe34:	0800febf 	.word	0x0800febf
 800fe38:	0800ff25 	.word	0x0800ff25
 800fe3c:	0800ff25 	.word	0x0800ff25
 800fe40:	0800ff25 	.word	0x0800ff25
 800fe44:	0800fecf 	.word	0x0800fecf
 800fe48:	0800ff25 	.word	0x0800ff25
 800fe4c:	0800ff25 	.word	0x0800ff25
 800fe50:	0800ff25 	.word	0x0800ff25
 800fe54:	0800ff25 	.word	0x0800ff25
 800fe58:	0800ff25 	.word	0x0800ff25
 800fe5c:	0800ff25 	.word	0x0800ff25
 800fe60:	0800ff25 	.word	0x0800ff25
 800fe64:	0800fedf 	.word	0x0800fedf
 800fe68:	0800ff25 	.word	0x0800ff25
 800fe6c:	0800ff25 	.word	0x0800ff25
 800fe70:	0800ff25 	.word	0x0800ff25
 800fe74:	0800ff25 	.word	0x0800ff25
 800fe78:	0800ff25 	.word	0x0800ff25
 800fe7c:	0800ff25 	.word	0x0800ff25
 800fe80:	0800ff25 	.word	0x0800ff25
 800fe84:	0800ff25 	.word	0x0800ff25
 800fe88:	0800ff25 	.word	0x0800ff25
 800fe8c:	0800ff25 	.word	0x0800ff25
 800fe90:	0800ff25 	.word	0x0800ff25
 800fe94:	0800ff25 	.word	0x0800ff25
 800fe98:	0800ff25 	.word	0x0800ff25
 800fe9c:	0800ff25 	.word	0x0800ff25
 800fea0:	0800ff25 	.word	0x0800ff25
 800fea4:	0800ff17 	.word	0x0800ff17
 800fea8:	2b40      	cmp	r3, #64	; 0x40
 800feaa:	d037      	beq.n	800ff1c <UART_SetConfig+0xc44>
 800feac:	e03a      	b.n	800ff24 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800feae:	f7fa f8c5 	bl	800a03c <HAL_RCC_GetPCLK1Freq>
 800feb2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800feb4:	e03c      	b.n	800ff30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800feb6:	f7fa f8d7 	bl	800a068 <HAL_RCC_GetPCLK2Freq>
 800feba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800febc:	e038      	b.n	800ff30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800febe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fec2:	4618      	mov	r0, r3
 800fec4:	f7fb ff6e 	bl	800bda4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fecc:	e030      	b.n	800ff30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fece:	f107 0318 	add.w	r3, r7, #24
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7fc f8ba 	bl	800c04c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fed8:	69fb      	ldr	r3, [r7, #28]
 800feda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fedc:	e028      	b.n	800ff30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fede:	4b09      	ldr	r3, [pc, #36]	; (800ff04 <UART_SetConfig+0xc2c>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	f003 0320 	and.w	r3, r3, #32
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d012      	beq.n	800ff10 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800feea:	4b06      	ldr	r3, [pc, #24]	; (800ff04 <UART_SetConfig+0xc2c>)
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	08db      	lsrs	r3, r3, #3
 800fef0:	f003 0303 	and.w	r3, r3, #3
 800fef4:	4a04      	ldr	r2, [pc, #16]	; (800ff08 <UART_SetConfig+0xc30>)
 800fef6:	fa22 f303 	lsr.w	r3, r2, r3
 800fefa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fefc:	e018      	b.n	800ff30 <UART_SetConfig+0xc58>
 800fefe:	bf00      	nop
 800ff00:	08019de0 	.word	0x08019de0
 800ff04:	58024400 	.word	0x58024400
 800ff08:	03d09000 	.word	0x03d09000
 800ff0c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ff10:	4b24      	ldr	r3, [pc, #144]	; (800ffa4 <UART_SetConfig+0xccc>)
 800ff12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff14:	e00c      	b.n	800ff30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ff16:	4b24      	ldr	r3, [pc, #144]	; (800ffa8 <UART_SetConfig+0xcd0>)
 800ff18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff1a:	e009      	b.n	800ff30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ff1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ff20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff22:	e005      	b.n	800ff30 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ff24:	2300      	movs	r3, #0
 800ff26:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ff28:	2301      	movs	r3, #1
 800ff2a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ff2e:	bf00      	nop
    }

    if (pclk != 0U)
 800ff30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d021      	beq.n	800ff7a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ff36:	697b      	ldr	r3, [r7, #20]
 800ff38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff3a:	4a1c      	ldr	r2, [pc, #112]	; (800ffac <UART_SetConfig+0xcd4>)
 800ff3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff40:	461a      	mov	r2, r3
 800ff42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff44:	fbb3 f2f2 	udiv	r2, r3, r2
 800ff48:	697b      	ldr	r3, [r7, #20]
 800ff4a:	685b      	ldr	r3, [r3, #4]
 800ff4c:	085b      	lsrs	r3, r3, #1
 800ff4e:	441a      	add	r2, r3
 800ff50:	697b      	ldr	r3, [r7, #20]
 800ff52:	685b      	ldr	r3, [r3, #4]
 800ff54:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff58:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ff5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff5c:	2b0f      	cmp	r3, #15
 800ff5e:	d909      	bls.n	800ff74 <UART_SetConfig+0xc9c>
 800ff60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff66:	d205      	bcs.n	800ff74 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ff68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff6a:	b29a      	uxth	r2, r3
 800ff6c:	697b      	ldr	r3, [r7, #20]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	60da      	str	r2, [r3, #12]
 800ff72:	e002      	b.n	800ff7a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ff74:	2301      	movs	r3, #1
 800ff76:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ff7a:	697b      	ldr	r3, [r7, #20]
 800ff7c:	2201      	movs	r2, #1
 800ff7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	2201      	movs	r2, #1
 800ff86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ff8a:	697b      	ldr	r3, [r7, #20]
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ff90:	697b      	ldr	r3, [r7, #20]
 800ff92:	2200      	movs	r2, #0
 800ff94:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ff96:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	3748      	adds	r7, #72	; 0x48
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ffa4:	03d09000 	.word	0x03d09000
 800ffa8:	003d0900 	.word	0x003d0900
 800ffac:	08019de0 	.word	0x08019de0

0800ffb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b083      	sub	sp, #12
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffbc:	f003 0301 	and.w	r3, r3, #1
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d00a      	beq.n	800ffda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	685b      	ldr	r3, [r3, #4]
 800ffca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	430a      	orrs	r2, r1
 800ffd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffde:	f003 0302 	and.w	r3, r3, #2
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d00a      	beq.n	800fffc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	685b      	ldr	r3, [r3, #4]
 800ffec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	430a      	orrs	r2, r1
 800fffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010000:	f003 0304 	and.w	r3, r3, #4
 8010004:	2b00      	cmp	r3, #0
 8010006:	d00a      	beq.n	801001e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	685b      	ldr	r3, [r3, #4]
 801000e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	430a      	orrs	r2, r1
 801001c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010022:	f003 0308 	and.w	r3, r3, #8
 8010026:	2b00      	cmp	r3, #0
 8010028:	d00a      	beq.n	8010040 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	685b      	ldr	r3, [r3, #4]
 8010030:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	430a      	orrs	r2, r1
 801003e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010044:	f003 0310 	and.w	r3, r3, #16
 8010048:	2b00      	cmp	r3, #0
 801004a:	d00a      	beq.n	8010062 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	689b      	ldr	r3, [r3, #8]
 8010052:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	430a      	orrs	r2, r1
 8010060:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010066:	f003 0320 	and.w	r3, r3, #32
 801006a:	2b00      	cmp	r3, #0
 801006c:	d00a      	beq.n	8010084 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	689b      	ldr	r3, [r3, #8]
 8010074:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	430a      	orrs	r2, r1
 8010082:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801008c:	2b00      	cmp	r3, #0
 801008e:	d01a      	beq.n	80100c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	685b      	ldr	r3, [r3, #4]
 8010096:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	430a      	orrs	r2, r1
 80100a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80100ae:	d10a      	bne.n	80100c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	685b      	ldr	r3, [r3, #4]
 80100b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	430a      	orrs	r2, r1
 80100c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d00a      	beq.n	80100e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	685b      	ldr	r3, [r3, #4]
 80100d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	430a      	orrs	r2, r1
 80100e6:	605a      	str	r2, [r3, #4]
  }
}
 80100e8:	bf00      	nop
 80100ea:	370c      	adds	r7, #12
 80100ec:	46bd      	mov	sp, r7
 80100ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f2:	4770      	bx	lr

080100f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b098      	sub	sp, #96	; 0x60
 80100f8:	af02      	add	r7, sp, #8
 80100fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2200      	movs	r2, #0
 8010100:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010104:	f7f2 fe96 	bl	8002e34 <HAL_GetTick>
 8010108:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	f003 0308 	and.w	r3, r3, #8
 8010114:	2b08      	cmp	r3, #8
 8010116:	d12f      	bne.n	8010178 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010118:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801011c:	9300      	str	r3, [sp, #0]
 801011e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010120:	2200      	movs	r2, #0
 8010122:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010126:	6878      	ldr	r0, [r7, #4]
 8010128:	f000 f88e 	bl	8010248 <UART_WaitOnFlagUntilTimeout>
 801012c:	4603      	mov	r3, r0
 801012e:	2b00      	cmp	r3, #0
 8010130:	d022      	beq.n	8010178 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801013a:	e853 3f00 	ldrex	r3, [r3]
 801013e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010142:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010146:	653b      	str	r3, [r7, #80]	; 0x50
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	461a      	mov	r2, r3
 801014e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010150:	647b      	str	r3, [r7, #68]	; 0x44
 8010152:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010154:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010156:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010158:	e841 2300 	strex	r3, r2, [r1]
 801015c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801015e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010160:	2b00      	cmp	r3, #0
 8010162:	d1e6      	bne.n	8010132 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	2220      	movs	r2, #32
 8010168:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	2200      	movs	r2, #0
 8010170:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010174:	2303      	movs	r3, #3
 8010176:	e063      	b.n	8010240 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	f003 0304 	and.w	r3, r3, #4
 8010182:	2b04      	cmp	r3, #4
 8010184:	d149      	bne.n	801021a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010186:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801018a:	9300      	str	r3, [sp, #0]
 801018c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801018e:	2200      	movs	r2, #0
 8010190:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	f000 f857 	bl	8010248 <UART_WaitOnFlagUntilTimeout>
 801019a:	4603      	mov	r3, r0
 801019c:	2b00      	cmp	r3, #0
 801019e:	d03c      	beq.n	801021a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a8:	e853 3f00 	ldrex	r3, [r3]
 80101ac:	623b      	str	r3, [r7, #32]
   return(result);
 80101ae:	6a3b      	ldr	r3, [r7, #32]
 80101b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80101b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	461a      	mov	r2, r3
 80101bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101be:	633b      	str	r3, [r7, #48]	; 0x30
 80101c0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80101c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101c6:	e841 2300 	strex	r3, r2, [r1]
 80101ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80101cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d1e6      	bne.n	80101a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	3308      	adds	r3, #8
 80101d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101da:	693b      	ldr	r3, [r7, #16]
 80101dc:	e853 3f00 	ldrex	r3, [r3]
 80101e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	f023 0301 	bic.w	r3, r3, #1
 80101e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	3308      	adds	r3, #8
 80101f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80101f2:	61fa      	str	r2, [r7, #28]
 80101f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101f6:	69b9      	ldr	r1, [r7, #24]
 80101f8:	69fa      	ldr	r2, [r7, #28]
 80101fa:	e841 2300 	strex	r3, r2, [r1]
 80101fe:	617b      	str	r3, [r7, #20]
   return(result);
 8010200:	697b      	ldr	r3, [r7, #20]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d1e5      	bne.n	80101d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	2220      	movs	r2, #32
 801020a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	2200      	movs	r2, #0
 8010212:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010216:	2303      	movs	r3, #3
 8010218:	e012      	b.n	8010240 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	2220      	movs	r2, #32
 801021e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	2220      	movs	r2, #32
 8010226:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	2200      	movs	r2, #0
 801022e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	2200      	movs	r2, #0
 8010234:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2200      	movs	r2, #0
 801023a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801023e:	2300      	movs	r3, #0
}
 8010240:	4618      	mov	r0, r3
 8010242:	3758      	adds	r7, #88	; 0x58
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}

08010248 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b084      	sub	sp, #16
 801024c:	af00      	add	r7, sp, #0
 801024e:	60f8      	str	r0, [r7, #12]
 8010250:	60b9      	str	r1, [r7, #8]
 8010252:	603b      	str	r3, [r7, #0]
 8010254:	4613      	mov	r3, r2
 8010256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010258:	e049      	b.n	80102ee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801025a:	69bb      	ldr	r3, [r7, #24]
 801025c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010260:	d045      	beq.n	80102ee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010262:	f7f2 fde7 	bl	8002e34 <HAL_GetTick>
 8010266:	4602      	mov	r2, r0
 8010268:	683b      	ldr	r3, [r7, #0]
 801026a:	1ad3      	subs	r3, r2, r3
 801026c:	69ba      	ldr	r2, [r7, #24]
 801026e:	429a      	cmp	r2, r3
 8010270:	d302      	bcc.n	8010278 <UART_WaitOnFlagUntilTimeout+0x30>
 8010272:	69bb      	ldr	r3, [r7, #24]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d101      	bne.n	801027c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010278:	2303      	movs	r3, #3
 801027a:	e048      	b.n	801030e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	f003 0304 	and.w	r3, r3, #4
 8010286:	2b00      	cmp	r3, #0
 8010288:	d031      	beq.n	80102ee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	69db      	ldr	r3, [r3, #28]
 8010290:	f003 0308 	and.w	r3, r3, #8
 8010294:	2b08      	cmp	r3, #8
 8010296:	d110      	bne.n	80102ba <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	2208      	movs	r2, #8
 801029e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80102a0:	68f8      	ldr	r0, [r7, #12]
 80102a2:	f000 f839 	bl	8010318 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	2208      	movs	r2, #8
 80102aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	2200      	movs	r2, #0
 80102b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80102b6:	2301      	movs	r3, #1
 80102b8:	e029      	b.n	801030e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	69db      	ldr	r3, [r3, #28]
 80102c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80102c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80102c8:	d111      	bne.n	80102ee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80102d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80102d4:	68f8      	ldr	r0, [r7, #12]
 80102d6:	f000 f81f 	bl	8010318 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	2220      	movs	r2, #32
 80102de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	2200      	movs	r2, #0
 80102e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80102ea:	2303      	movs	r3, #3
 80102ec:	e00f      	b.n	801030e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	69da      	ldr	r2, [r3, #28]
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	4013      	ands	r3, r2
 80102f8:	68ba      	ldr	r2, [r7, #8]
 80102fa:	429a      	cmp	r2, r3
 80102fc:	bf0c      	ite	eq
 80102fe:	2301      	moveq	r3, #1
 8010300:	2300      	movne	r3, #0
 8010302:	b2db      	uxtb	r3, r3
 8010304:	461a      	mov	r2, r3
 8010306:	79fb      	ldrb	r3, [r7, #7]
 8010308:	429a      	cmp	r2, r3
 801030a:	d0a6      	beq.n	801025a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801030c:	2300      	movs	r3, #0
}
 801030e:	4618      	mov	r0, r3
 8010310:	3710      	adds	r7, #16
 8010312:	46bd      	mov	sp, r7
 8010314:	bd80      	pop	{r7, pc}
	...

08010318 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010318:	b480      	push	{r7}
 801031a:	b095      	sub	sp, #84	; 0x54
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010328:	e853 3f00 	ldrex	r3, [r3]
 801032c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801032e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010330:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010334:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	461a      	mov	r2, r3
 801033c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801033e:	643b      	str	r3, [r7, #64]	; 0x40
 8010340:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010342:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010344:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010346:	e841 2300 	strex	r3, r2, [r1]
 801034a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801034c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801034e:	2b00      	cmp	r3, #0
 8010350:	d1e6      	bne.n	8010320 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	3308      	adds	r3, #8
 8010358:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801035a:	6a3b      	ldr	r3, [r7, #32]
 801035c:	e853 3f00 	ldrex	r3, [r3]
 8010360:	61fb      	str	r3, [r7, #28]
   return(result);
 8010362:	69fa      	ldr	r2, [r7, #28]
 8010364:	4b1e      	ldr	r3, [pc, #120]	; (80103e0 <UART_EndRxTransfer+0xc8>)
 8010366:	4013      	ands	r3, r2
 8010368:	64bb      	str	r3, [r7, #72]	; 0x48
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	3308      	adds	r3, #8
 8010370:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010372:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010374:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010376:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801037a:	e841 2300 	strex	r3, r2, [r1]
 801037e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010382:	2b00      	cmp	r3, #0
 8010384:	d1e5      	bne.n	8010352 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801038a:	2b01      	cmp	r3, #1
 801038c:	d118      	bne.n	80103c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	e853 3f00 	ldrex	r3, [r3]
 801039a:	60bb      	str	r3, [r7, #8]
   return(result);
 801039c:	68bb      	ldr	r3, [r7, #8]
 801039e:	f023 0310 	bic.w	r3, r3, #16
 80103a2:	647b      	str	r3, [r7, #68]	; 0x44
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	461a      	mov	r2, r3
 80103aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103ac:	61bb      	str	r3, [r7, #24]
 80103ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103b0:	6979      	ldr	r1, [r7, #20]
 80103b2:	69ba      	ldr	r2, [r7, #24]
 80103b4:	e841 2300 	strex	r3, r2, [r1]
 80103b8:	613b      	str	r3, [r7, #16]
   return(result);
 80103ba:	693b      	ldr	r3, [r7, #16]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d1e6      	bne.n	801038e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2220      	movs	r2, #32
 80103c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2200      	movs	r2, #0
 80103cc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	2200      	movs	r2, #0
 80103d2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80103d4:	bf00      	nop
 80103d6:	3754      	adds	r7, #84	; 0x54
 80103d8:	46bd      	mov	sp, r7
 80103da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103de:	4770      	bx	lr
 80103e0:	effffffe 	.word	0xeffffffe

080103e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80103e4:	b480      	push	{r7}
 80103e6:	b085      	sub	sp, #20
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80103f2:	2b01      	cmp	r3, #1
 80103f4:	d101      	bne.n	80103fa <HAL_UARTEx_DisableFifoMode+0x16>
 80103f6:	2302      	movs	r3, #2
 80103f8:	e027      	b.n	801044a <HAL_UARTEx_DisableFifoMode+0x66>
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	2201      	movs	r2, #1
 80103fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	2224      	movs	r2, #36	; 0x24
 8010406:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	681a      	ldr	r2, [r3, #0]
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	f022 0201 	bic.w	r2, r2, #1
 8010420:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010428:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	2200      	movs	r2, #0
 801042e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	68fa      	ldr	r2, [r7, #12]
 8010436:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	2220      	movs	r2, #32
 801043c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	2200      	movs	r2, #0
 8010444:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010448:	2300      	movs	r3, #0
}
 801044a:	4618      	mov	r0, r3
 801044c:	3714      	adds	r7, #20
 801044e:	46bd      	mov	sp, r7
 8010450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010454:	4770      	bx	lr

08010456 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010456:	b580      	push	{r7, lr}
 8010458:	b084      	sub	sp, #16
 801045a:	af00      	add	r7, sp, #0
 801045c:	6078      	str	r0, [r7, #4]
 801045e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010466:	2b01      	cmp	r3, #1
 8010468:	d101      	bne.n	801046e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801046a:	2302      	movs	r3, #2
 801046c:	e02d      	b.n	80104ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	2201      	movs	r2, #1
 8010472:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	2224      	movs	r2, #36	; 0x24
 801047a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	681a      	ldr	r2, [r3, #0]
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	f022 0201 	bic.w	r2, r2, #1
 8010494:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	689b      	ldr	r3, [r3, #8]
 801049c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	683a      	ldr	r2, [r7, #0]
 80104a6:	430a      	orrs	r2, r1
 80104a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80104aa:	6878      	ldr	r0, [r7, #4]
 80104ac:	f000 f850 	bl	8010550 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	68fa      	ldr	r2, [r7, #12]
 80104b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	2220      	movs	r2, #32
 80104bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	2200      	movs	r2, #0
 80104c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80104c8:	2300      	movs	r3, #0
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	3710      	adds	r7, #16
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}

080104d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80104d2:	b580      	push	{r7, lr}
 80104d4:	b084      	sub	sp, #16
 80104d6:	af00      	add	r7, sp, #0
 80104d8:	6078      	str	r0, [r7, #4]
 80104da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80104e2:	2b01      	cmp	r3, #1
 80104e4:	d101      	bne.n	80104ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80104e6:	2302      	movs	r3, #2
 80104e8:	e02d      	b.n	8010546 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	2201      	movs	r2, #1
 80104ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2224      	movs	r2, #36	; 0x24
 80104f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	681a      	ldr	r2, [r3, #0]
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	f022 0201 	bic.w	r2, r2, #1
 8010510:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	689b      	ldr	r3, [r3, #8]
 8010518:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	683a      	ldr	r2, [r7, #0]
 8010522:	430a      	orrs	r2, r1
 8010524:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f000 f812 	bl	8010550 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	68fa      	ldr	r2, [r7, #12]
 8010532:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2220      	movs	r2, #32
 8010538:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	2200      	movs	r2, #0
 8010540:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010544:	2300      	movs	r3, #0
}
 8010546:	4618      	mov	r0, r3
 8010548:	3710      	adds	r7, #16
 801054a:	46bd      	mov	sp, r7
 801054c:	bd80      	pop	{r7, pc}
	...

08010550 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010550:	b480      	push	{r7}
 8010552:	b085      	sub	sp, #20
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801055c:	2b00      	cmp	r3, #0
 801055e:	d108      	bne.n	8010572 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2201      	movs	r2, #1
 8010564:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	2201      	movs	r2, #1
 801056c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010570:	e031      	b.n	80105d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010572:	2310      	movs	r3, #16
 8010574:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010576:	2310      	movs	r3, #16
 8010578:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	689b      	ldr	r3, [r3, #8]
 8010580:	0e5b      	lsrs	r3, r3, #25
 8010582:	b2db      	uxtb	r3, r3
 8010584:	f003 0307 	and.w	r3, r3, #7
 8010588:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	689b      	ldr	r3, [r3, #8]
 8010590:	0f5b      	lsrs	r3, r3, #29
 8010592:	b2db      	uxtb	r3, r3
 8010594:	f003 0307 	and.w	r3, r3, #7
 8010598:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801059a:	7bbb      	ldrb	r3, [r7, #14]
 801059c:	7b3a      	ldrb	r2, [r7, #12]
 801059e:	4911      	ldr	r1, [pc, #68]	; (80105e4 <UARTEx_SetNbDataToProcess+0x94>)
 80105a0:	5c8a      	ldrb	r2, [r1, r2]
 80105a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80105a6:	7b3a      	ldrb	r2, [r7, #12]
 80105a8:	490f      	ldr	r1, [pc, #60]	; (80105e8 <UARTEx_SetNbDataToProcess+0x98>)
 80105aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80105ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80105b0:	b29a      	uxth	r2, r3
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80105b8:	7bfb      	ldrb	r3, [r7, #15]
 80105ba:	7b7a      	ldrb	r2, [r7, #13]
 80105bc:	4909      	ldr	r1, [pc, #36]	; (80105e4 <UARTEx_SetNbDataToProcess+0x94>)
 80105be:	5c8a      	ldrb	r2, [r1, r2]
 80105c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80105c4:	7b7a      	ldrb	r2, [r7, #13]
 80105c6:	4908      	ldr	r1, [pc, #32]	; (80105e8 <UARTEx_SetNbDataToProcess+0x98>)
 80105c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80105ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80105ce:	b29a      	uxth	r2, r3
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80105d6:	bf00      	nop
 80105d8:	3714      	adds	r7, #20
 80105da:	46bd      	mov	sp, r7
 80105dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e0:	4770      	bx	lr
 80105e2:	bf00      	nop
 80105e4:	08019df8 	.word	0x08019df8
 80105e8:	08019e00 	.word	0x08019e00

080105ec <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80105ec:	b084      	sub	sp, #16
 80105ee:	b480      	push	{r7}
 80105f0:	b085      	sub	sp, #20
 80105f2:	af00      	add	r7, sp, #0
 80105f4:	6078      	str	r0, [r7, #4]
 80105f6:	f107 001c 	add.w	r0, r7, #28
 80105fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80105fe:	2300      	movs	r3, #0
 8010600:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8010602:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8010604:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8010606:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8010608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 801060a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 801060c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 801060e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8010612:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8010614:	68fa      	ldr	r2, [r7, #12]
 8010616:	4313      	orrs	r3, r2
 8010618:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	685a      	ldr	r2, [r3, #4]
 801061e:	4b07      	ldr	r3, [pc, #28]	; (801063c <SDMMC_Init+0x50>)
 8010620:	4013      	ands	r3, r2
 8010622:	68fa      	ldr	r2, [r7, #12]
 8010624:	431a      	orrs	r2, r3
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801062a:	2300      	movs	r3, #0
}
 801062c:	4618      	mov	r0, r3
 801062e:	3714      	adds	r7, #20
 8010630:	46bd      	mov	sp, r7
 8010632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010636:	b004      	add	sp, #16
 8010638:	4770      	bx	lr
 801063a:	bf00      	nop
 801063c:	ffc02c00 	.word	0xffc02c00

08010640 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010640:	b480      	push	{r7}
 8010642:	b083      	sub	sp, #12
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801064e:	4618      	mov	r0, r3
 8010650:	370c      	adds	r7, #12
 8010652:	46bd      	mov	sp, r7
 8010654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010658:	4770      	bx	lr

0801065a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 801065a:	b480      	push	{r7}
 801065c:	b083      	sub	sp, #12
 801065e:	af00      	add	r7, sp, #0
 8010660:	6078      	str	r0, [r7, #4]
 8010662:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	681a      	ldr	r2, [r3, #0]
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801066e:	2300      	movs	r3, #0
}
 8010670:	4618      	mov	r0, r3
 8010672:	370c      	adds	r7, #12
 8010674:	46bd      	mov	sp, r7
 8010676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067a:	4770      	bx	lr

0801067c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 801067c:	b480      	push	{r7}
 801067e:	b083      	sub	sp, #12
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	f043 0203 	orr.w	r2, r3, #3
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010690:	2300      	movs	r3, #0
}
 8010692:	4618      	mov	r0, r3
 8010694:	370c      	adds	r7, #12
 8010696:	46bd      	mov	sp, r7
 8010698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069c:	4770      	bx	lr

0801069e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 801069e:	b480      	push	{r7}
 80106a0:	b083      	sub	sp, #12
 80106a2:	af00      	add	r7, sp, #0
 80106a4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	f003 0303 	and.w	r3, r3, #3
}
 80106ae:	4618      	mov	r0, r3
 80106b0:	370c      	adds	r7, #12
 80106b2:	46bd      	mov	sp, r7
 80106b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b8:	4770      	bx	lr
	...

080106bc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80106bc:	b480      	push	{r7}
 80106be:	b085      	sub	sp, #20
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
 80106c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80106c6:	2300      	movs	r3, #0
 80106c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80106ca:	683b      	ldr	r3, [r7, #0]
 80106cc:	681a      	ldr	r2, [r3, #0]
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80106d6:	683b      	ldr	r3, [r7, #0]
 80106d8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80106da:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80106dc:	683b      	ldr	r3, [r7, #0]
 80106de:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80106e0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80106e2:	683b      	ldr	r3, [r7, #0]
 80106e4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80106e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80106e8:	68fa      	ldr	r2, [r7, #12]
 80106ea:	4313      	orrs	r3, r2
 80106ec:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	68da      	ldr	r2, [r3, #12]
 80106f2:	4b06      	ldr	r3, [pc, #24]	; (801070c <SDMMC_SendCommand+0x50>)
 80106f4:	4013      	ands	r3, r2
 80106f6:	68fa      	ldr	r2, [r7, #12]
 80106f8:	431a      	orrs	r2, r3
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80106fe:	2300      	movs	r3, #0
}
 8010700:	4618      	mov	r0, r3
 8010702:	3714      	adds	r7, #20
 8010704:	46bd      	mov	sp, r7
 8010706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070a:	4770      	bx	lr
 801070c:	fffee0c0 	.word	0xfffee0c0

08010710 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010710:	b480      	push	{r7}
 8010712:	b083      	sub	sp, #12
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	691b      	ldr	r3, [r3, #16]
 801071c:	b2db      	uxtb	r3, r3
}
 801071e:	4618      	mov	r0, r3
 8010720:	370c      	adds	r7, #12
 8010722:	46bd      	mov	sp, r7
 8010724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010728:	4770      	bx	lr

0801072a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801072a:	b480      	push	{r7}
 801072c:	b085      	sub	sp, #20
 801072e:	af00      	add	r7, sp, #0
 8010730:	6078      	str	r0, [r7, #4]
 8010732:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	3314      	adds	r3, #20
 8010738:	461a      	mov	r2, r3
 801073a:	683b      	ldr	r3, [r7, #0]
 801073c:	4413      	add	r3, r2
 801073e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	681b      	ldr	r3, [r3, #0]
}
 8010744:	4618      	mov	r0, r3
 8010746:	3714      	adds	r7, #20
 8010748:	46bd      	mov	sp, r7
 801074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074e:	4770      	bx	lr

08010750 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8010750:	b480      	push	{r7}
 8010752:	b085      	sub	sp, #20
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
 8010758:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801075a:	2300      	movs	r3, #0
 801075c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	681a      	ldr	r2, [r3, #0]
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8010766:	683b      	ldr	r3, [r7, #0]
 8010768:	685a      	ldr	r2, [r3, #4]
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8010772:	683b      	ldr	r3, [r7, #0]
 8010774:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010776:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8010778:	683b      	ldr	r3, [r7, #0]
 801077a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 801077c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8010782:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010784:	68fa      	ldr	r2, [r7, #12]
 8010786:	4313      	orrs	r3, r2
 8010788:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801078e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	431a      	orrs	r2, r3
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801079a:	2300      	movs	r3, #0

}
 801079c:	4618      	mov	r0, r3
 801079e:	3714      	adds	r7, #20
 80107a0:	46bd      	mov	sp, r7
 80107a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a6:	4770      	bx	lr

080107a8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b088      	sub	sp, #32
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
 80107b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80107b6:	2310      	movs	r3, #16
 80107b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80107ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80107be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80107c0:	2300      	movs	r3, #0
 80107c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80107c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80107c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80107ca:	f107 0308 	add.w	r3, r7, #8
 80107ce:	4619      	mov	r1, r3
 80107d0:	6878      	ldr	r0, [r7, #4]
 80107d2:	f7ff ff73 	bl	80106bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80107d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80107da:	2110      	movs	r1, #16
 80107dc:	6878      	ldr	r0, [r7, #4]
 80107de:	f000 fa5f 	bl	8010ca0 <SDMMC_GetCmdResp1>
 80107e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107e4:	69fb      	ldr	r3, [r7, #28]
}
 80107e6:	4618      	mov	r0, r3
 80107e8:	3720      	adds	r7, #32
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd80      	pop	{r7, pc}

080107ee <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80107ee:	b580      	push	{r7, lr}
 80107f0:	b088      	sub	sp, #32
 80107f2:	af00      	add	r7, sp, #0
 80107f4:	6078      	str	r0, [r7, #4]
 80107f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80107fc:	2311      	movs	r3, #17
 80107fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010800:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010804:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010806:	2300      	movs	r3, #0
 8010808:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801080a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801080e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010810:	f107 0308 	add.w	r3, r7, #8
 8010814:	4619      	mov	r1, r3
 8010816:	6878      	ldr	r0, [r7, #4]
 8010818:	f7ff ff50 	bl	80106bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801081c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010820:	2111      	movs	r1, #17
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f000 fa3c 	bl	8010ca0 <SDMMC_GetCmdResp1>
 8010828:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801082a:	69fb      	ldr	r3, [r7, #28]
}
 801082c:	4618      	mov	r0, r3
 801082e:	3720      	adds	r7, #32
 8010830:	46bd      	mov	sp, r7
 8010832:	bd80      	pop	{r7, pc}

08010834 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010834:	b580      	push	{r7, lr}
 8010836:	b088      	sub	sp, #32
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
 801083c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010842:	2312      	movs	r3, #18
 8010844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010846:	f44f 7380 	mov.w	r3, #256	; 0x100
 801084a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801084c:	2300      	movs	r3, #0
 801084e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010854:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010856:	f107 0308 	add.w	r3, r7, #8
 801085a:	4619      	mov	r1, r3
 801085c:	6878      	ldr	r0, [r7, #4]
 801085e:	f7ff ff2d 	bl	80106bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010862:	f241 3288 	movw	r2, #5000	; 0x1388
 8010866:	2112      	movs	r1, #18
 8010868:	6878      	ldr	r0, [r7, #4]
 801086a:	f000 fa19 	bl	8010ca0 <SDMMC_GetCmdResp1>
 801086e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010870:	69fb      	ldr	r3, [r7, #28]
}
 8010872:	4618      	mov	r0, r3
 8010874:	3720      	adds	r7, #32
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}

0801087a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801087a:	b580      	push	{r7, lr}
 801087c:	b088      	sub	sp, #32
 801087e:	af00      	add	r7, sp, #0
 8010880:	6078      	str	r0, [r7, #4]
 8010882:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010884:	683b      	ldr	r3, [r7, #0]
 8010886:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010888:	2318      	movs	r3, #24
 801088a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801088c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010890:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010892:	2300      	movs	r3, #0
 8010894:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801089a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801089c:	f107 0308 	add.w	r3, r7, #8
 80108a0:	4619      	mov	r1, r3
 80108a2:	6878      	ldr	r0, [r7, #4]
 80108a4:	f7ff ff0a 	bl	80106bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80108a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80108ac:	2118      	movs	r1, #24
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f000 f9f6 	bl	8010ca0 <SDMMC_GetCmdResp1>
 80108b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108b6:	69fb      	ldr	r3, [r7, #28]
}
 80108b8:	4618      	mov	r0, r3
 80108ba:	3720      	adds	r7, #32
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}

080108c0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b088      	sub	sp, #32
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
 80108c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80108ca:	683b      	ldr	r3, [r7, #0]
 80108cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80108ce:	2319      	movs	r3, #25
 80108d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80108d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80108d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80108d8:	2300      	movs	r3, #0
 80108da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80108dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80108e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80108e2:	f107 0308 	add.w	r3, r7, #8
 80108e6:	4619      	mov	r1, r3
 80108e8:	6878      	ldr	r0, [r7, #4]
 80108ea:	f7ff fee7 	bl	80106bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80108ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80108f2:	2119      	movs	r1, #25
 80108f4:	6878      	ldr	r0, [r7, #4]
 80108f6:	f000 f9d3 	bl	8010ca0 <SDMMC_GetCmdResp1>
 80108fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108fc:	69fb      	ldr	r3, [r7, #28]
}
 80108fe:	4618      	mov	r0, r3
 8010900:	3720      	adds	r7, #32
 8010902:	46bd      	mov	sp, r7
 8010904:	bd80      	pop	{r7, pc}
	...

08010908 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b088      	sub	sp, #32
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010910:	2300      	movs	r3, #0
 8010912:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010914:	230c      	movs	r3, #12
 8010916:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010918:	f44f 7380 	mov.w	r3, #256	; 0x100
 801091c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801091e:	2300      	movs	r3, #0
 8010920:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010926:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	68db      	ldr	r3, [r3, #12]
 801092c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	68db      	ldr	r3, [r3, #12]
 8010938:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010940:	f107 0308 	add.w	r3, r7, #8
 8010944:	4619      	mov	r1, r3
 8010946:	6878      	ldr	r0, [r7, #4]
 8010948:	f7ff feb8 	bl	80106bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 801094c:	4a0b      	ldr	r2, [pc, #44]	; (801097c <SDMMC_CmdStopTransfer+0x74>)
 801094e:	210c      	movs	r1, #12
 8010950:	6878      	ldr	r0, [r7, #4]
 8010952:	f000 f9a5 	bl	8010ca0 <SDMMC_GetCmdResp1>
 8010956:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	68db      	ldr	r3, [r3, #12]
 801095c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010964:	69fb      	ldr	r3, [r7, #28]
 8010966:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801096a:	d101      	bne.n	8010970 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 801096c:	2300      	movs	r3, #0
 801096e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8010970:	69fb      	ldr	r3, [r7, #28]
}
 8010972:	4618      	mov	r0, r3
 8010974:	3720      	adds	r7, #32
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}
 801097a:	bf00      	nop
 801097c:	05f5e100 	.word	0x05f5e100

08010980 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b088      	sub	sp, #32
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
 8010988:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801098a:	683b      	ldr	r3, [r7, #0]
 801098c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 801098e:	2307      	movs	r3, #7
 8010990:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010992:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010996:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010998:	2300      	movs	r3, #0
 801099a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801099c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80109a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80109a2:	f107 0308 	add.w	r3, r7, #8
 80109a6:	4619      	mov	r1, r3
 80109a8:	6878      	ldr	r0, [r7, #4]
 80109aa:	f7ff fe87 	bl	80106bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80109ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80109b2:	2107      	movs	r1, #7
 80109b4:	6878      	ldr	r0, [r7, #4]
 80109b6:	f000 f973 	bl	8010ca0 <SDMMC_GetCmdResp1>
 80109ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109bc:	69fb      	ldr	r3, [r7, #28]
}
 80109be:	4618      	mov	r0, r3
 80109c0:	3720      	adds	r7, #32
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bd80      	pop	{r7, pc}

080109c6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80109c6:	b580      	push	{r7, lr}
 80109c8:	b088      	sub	sp, #32
 80109ca:	af00      	add	r7, sp, #0
 80109cc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80109ce:	2300      	movs	r3, #0
 80109d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80109d2:	2300      	movs	r3, #0
 80109d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80109d6:	2300      	movs	r3, #0
 80109d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80109da:	2300      	movs	r3, #0
 80109dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80109de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80109e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80109e4:	f107 0308 	add.w	r3, r7, #8
 80109e8:	4619      	mov	r1, r3
 80109ea:	6878      	ldr	r0, [r7, #4]
 80109ec:	f7ff fe66 	bl	80106bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80109f0:	6878      	ldr	r0, [r7, #4]
 80109f2:	f000 fb97 	bl	8011124 <SDMMC_GetCmdError>
 80109f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109f8:	69fb      	ldr	r3, [r7, #28]
}
 80109fa:	4618      	mov	r0, r3
 80109fc:	3720      	adds	r7, #32
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bd80      	pop	{r7, pc}

08010a02 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010a02:	b580      	push	{r7, lr}
 8010a04:	b088      	sub	sp, #32
 8010a06:	af00      	add	r7, sp, #0
 8010a08:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010a0a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010a0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010a10:	2308      	movs	r3, #8
 8010a12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010a22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a24:	f107 0308 	add.w	r3, r7, #8
 8010a28:	4619      	mov	r1, r3
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f7ff fe46 	bl	80106bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010a30:	6878      	ldr	r0, [r7, #4]
 8010a32:	f000 fb29 	bl	8011088 <SDMMC_GetCmdResp7>
 8010a36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a38:	69fb      	ldr	r3, [r7, #28]
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	3720      	adds	r7, #32
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}

08010a42 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010a42:	b580      	push	{r7, lr}
 8010a44:	b088      	sub	sp, #32
 8010a46:	af00      	add	r7, sp, #0
 8010a48:	6078      	str	r0, [r7, #4]
 8010a4a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010a4c:	683b      	ldr	r3, [r7, #0]
 8010a4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010a50:	2337      	movs	r3, #55	; 0x37
 8010a52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010a62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a64:	f107 0308 	add.w	r3, r7, #8
 8010a68:	4619      	mov	r1, r3
 8010a6a:	6878      	ldr	r0, [r7, #4]
 8010a6c:	f7ff fe26 	bl	80106bc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a74:	2137      	movs	r1, #55	; 0x37
 8010a76:	6878      	ldr	r0, [r7, #4]
 8010a78:	f000 f912 	bl	8010ca0 <SDMMC_GetCmdResp1>
 8010a7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a7e:	69fb      	ldr	r3, [r7, #28]
}
 8010a80:	4618      	mov	r0, r3
 8010a82:	3720      	adds	r7, #32
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}

08010a88 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b088      	sub	sp, #32
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
 8010a90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010a92:	683b      	ldr	r3, [r7, #0]
 8010a94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010a96:	2329      	movs	r3, #41	; 0x29
 8010a98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010aa8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010aaa:	f107 0308 	add.w	r3, r7, #8
 8010aae:	4619      	mov	r1, r3
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	f7ff fe03 	bl	80106bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010ab6:	6878      	ldr	r0, [r7, #4]
 8010ab8:	f000 fa2e 	bl	8010f18 <SDMMC_GetCmdResp3>
 8010abc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010abe:	69fb      	ldr	r3, [r7, #28]
}
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	3720      	adds	r7, #32
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd80      	pop	{r7, pc}

08010ac8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b088      	sub	sp, #32
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
 8010ad0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010ad2:	683b      	ldr	r3, [r7, #0]
 8010ad4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010ad6:	2306      	movs	r3, #6
 8010ad8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ada:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010ade:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ae8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010aea:	f107 0308 	add.w	r3, r7, #8
 8010aee:	4619      	mov	r1, r3
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f7ff fde3 	bl	80106bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8010afa:	2106      	movs	r1, #6
 8010afc:	6878      	ldr	r0, [r7, #4]
 8010afe:	f000 f8cf 	bl	8010ca0 <SDMMC_GetCmdResp1>
 8010b02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b04:	69fb      	ldr	r3, [r7, #28]
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	3720      	adds	r7, #32
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}

08010b0e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010b0e:	b580      	push	{r7, lr}
 8010b10:	b088      	sub	sp, #32
 8010b12:	af00      	add	r7, sp, #0
 8010b14:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010b16:	2300      	movs	r3, #0
 8010b18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010b1a:	2333      	movs	r3, #51	; 0x33
 8010b1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010b22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b24:	2300      	movs	r3, #0
 8010b26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b2e:	f107 0308 	add.w	r3, r7, #8
 8010b32:	4619      	mov	r1, r3
 8010b34:	6878      	ldr	r0, [r7, #4]
 8010b36:	f7ff fdc1 	bl	80106bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b3e:	2133      	movs	r1, #51	; 0x33
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	f000 f8ad 	bl	8010ca0 <SDMMC_GetCmdResp1>
 8010b46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b48:	69fb      	ldr	r3, [r7, #28]
}
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	3720      	adds	r7, #32
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	bd80      	pop	{r7, pc}

08010b52 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010b52:	b580      	push	{r7, lr}
 8010b54:	b088      	sub	sp, #32
 8010b56:	af00      	add	r7, sp, #0
 8010b58:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010b5e:	2302      	movs	r3, #2
 8010b60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010b62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010b66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b72:	f107 0308 	add.w	r3, r7, #8
 8010b76:	4619      	mov	r1, r3
 8010b78:	6878      	ldr	r0, [r7, #4]
 8010b7a:	f7ff fd9f 	bl	80106bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	f000 f980 	bl	8010e84 <SDMMC_GetCmdResp2>
 8010b84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b86:	69fb      	ldr	r3, [r7, #28]
}
 8010b88:	4618      	mov	r0, r3
 8010b8a:	3720      	adds	r7, #32
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bd80      	pop	{r7, pc}

08010b90 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b088      	sub	sp, #32
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
 8010b98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010b9a:	683b      	ldr	r3, [r7, #0]
 8010b9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010b9e:	2309      	movs	r3, #9
 8010ba0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010ba2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010ba6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ba8:	2300      	movs	r3, #0
 8010baa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010bb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010bb2:	f107 0308 	add.w	r3, r7, #8
 8010bb6:	4619      	mov	r1, r3
 8010bb8:	6878      	ldr	r0, [r7, #4]
 8010bba:	f7ff fd7f 	bl	80106bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010bbe:	6878      	ldr	r0, [r7, #4]
 8010bc0:	f000 f960 	bl	8010e84 <SDMMC_GetCmdResp2>
 8010bc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bc6:	69fb      	ldr	r3, [r7, #28]
}
 8010bc8:	4618      	mov	r0, r3
 8010bca:	3720      	adds	r7, #32
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	bd80      	pop	{r7, pc}

08010bd0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b088      	sub	sp, #32
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
 8010bd8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010bde:	2303      	movs	r3, #3
 8010be0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010be2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010be6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010be8:	2300      	movs	r3, #0
 8010bea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010bec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010bf0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010bf2:	f107 0308 	add.w	r3, r7, #8
 8010bf6:	4619      	mov	r1, r3
 8010bf8:	6878      	ldr	r0, [r7, #4]
 8010bfa:	f7ff fd5f 	bl	80106bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010bfe:	683a      	ldr	r2, [r7, #0]
 8010c00:	2103      	movs	r1, #3
 8010c02:	6878      	ldr	r0, [r7, #4]
 8010c04:	f000 f9c8 	bl	8010f98 <SDMMC_GetCmdResp6>
 8010c08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c0a:	69fb      	ldr	r3, [r7, #28]
}
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	3720      	adds	r7, #32
 8010c10:	46bd      	mov	sp, r7
 8010c12:	bd80      	pop	{r7, pc}

08010c14 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b088      	sub	sp, #32
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
 8010c1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010c1e:	683b      	ldr	r3, [r7, #0]
 8010c20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010c22:	230d      	movs	r3, #13
 8010c24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c36:	f107 0308 	add.w	r3, r7, #8
 8010c3a:	4619      	mov	r1, r3
 8010c3c:	6878      	ldr	r0, [r7, #4]
 8010c3e:	f7ff fd3d 	bl	80106bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c46:	210d      	movs	r1, #13
 8010c48:	6878      	ldr	r0, [r7, #4]
 8010c4a:	f000 f829 	bl	8010ca0 <SDMMC_GetCmdResp1>
 8010c4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c50:	69fb      	ldr	r3, [r7, #28]
}
 8010c52:	4618      	mov	r0, r3
 8010c54:	3720      	adds	r7, #32
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}

08010c5a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8010c5a:	b580      	push	{r7, lr}
 8010c5c:	b088      	sub	sp, #32
 8010c5e:	af00      	add	r7, sp, #0
 8010c60:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010c62:	2300      	movs	r3, #0
 8010c64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8010c66:	230d      	movs	r3, #13
 8010c68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c70:	2300      	movs	r3, #0
 8010c72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c7a:	f107 0308 	add.w	r3, r7, #8
 8010c7e:	4619      	mov	r1, r3
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f7ff fd1b 	bl	80106bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8010c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c8a:	210d      	movs	r1, #13
 8010c8c:	6878      	ldr	r0, [r7, #4]
 8010c8e:	f000 f807 	bl	8010ca0 <SDMMC_GetCmdResp1>
 8010c92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c94:	69fb      	ldr	r3, [r7, #28]
}
 8010c96:	4618      	mov	r0, r3
 8010c98:	3720      	adds	r7, #32
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	bd80      	pop	{r7, pc}
	...

08010ca0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b088      	sub	sp, #32
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	60f8      	str	r0, [r7, #12]
 8010ca8:	460b      	mov	r3, r1
 8010caa:	607a      	str	r2, [r7, #4]
 8010cac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010cae:	4b70      	ldr	r3, [pc, #448]	; (8010e70 <SDMMC_GetCmdResp1+0x1d0>)
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	4a70      	ldr	r2, [pc, #448]	; (8010e74 <SDMMC_GetCmdResp1+0x1d4>)
 8010cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8010cb8:	0a5a      	lsrs	r2, r3, #9
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	fb02 f303 	mul.w	r3, r2, r3
 8010cc0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010cc2:	69fb      	ldr	r3, [r7, #28]
 8010cc4:	1e5a      	subs	r2, r3, #1
 8010cc6:	61fa      	str	r2, [r7, #28]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d102      	bne.n	8010cd2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010ccc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010cd0:	e0c9      	b.n	8010e66 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cd6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010cd8:	69ba      	ldr	r2, [r7, #24]
 8010cda:	4b67      	ldr	r3, [pc, #412]	; (8010e78 <SDMMC_GetCmdResp1+0x1d8>)
 8010cdc:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d0ef      	beq.n	8010cc2 <SDMMC_GetCmdResp1+0x22>
 8010ce2:	69bb      	ldr	r3, [r7, #24]
 8010ce4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d1ea      	bne.n	8010cc2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cf0:	f003 0304 	and.w	r3, r3, #4
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d004      	beq.n	8010d02 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	2204      	movs	r2, #4
 8010cfc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010cfe:	2304      	movs	r3, #4
 8010d00:	e0b1      	b.n	8010e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d06:	f003 0301 	and.w	r3, r3, #1
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d004      	beq.n	8010d18 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	2201      	movs	r2, #1
 8010d12:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d14:	2301      	movs	r3, #1
 8010d16:	e0a6      	b.n	8010e66 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	4a58      	ldr	r2, [pc, #352]	; (8010e7c <SDMMC_GetCmdResp1+0x1dc>)
 8010d1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010d1e:	68f8      	ldr	r0, [r7, #12]
 8010d20:	f7ff fcf6 	bl	8010710 <SDMMC_GetCommandResponse>
 8010d24:	4603      	mov	r3, r0
 8010d26:	461a      	mov	r2, r3
 8010d28:	7afb      	ldrb	r3, [r7, #11]
 8010d2a:	4293      	cmp	r3, r2
 8010d2c:	d001      	beq.n	8010d32 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d2e:	2301      	movs	r3, #1
 8010d30:	e099      	b.n	8010e66 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010d32:	2100      	movs	r1, #0
 8010d34:	68f8      	ldr	r0, [r7, #12]
 8010d36:	f7ff fcf8 	bl	801072a <SDMMC_GetResponse>
 8010d3a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010d3c:	697a      	ldr	r2, [r7, #20]
 8010d3e:	4b50      	ldr	r3, [pc, #320]	; (8010e80 <SDMMC_GetCmdResp1+0x1e0>)
 8010d40:	4013      	ands	r3, r2
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d101      	bne.n	8010d4a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010d46:	2300      	movs	r3, #0
 8010d48:	e08d      	b.n	8010e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010d4a:	697b      	ldr	r3, [r7, #20]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	da02      	bge.n	8010d56 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010d50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010d54:	e087      	b.n	8010e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010d56:	697b      	ldr	r3, [r7, #20]
 8010d58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d001      	beq.n	8010d64 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010d60:	2340      	movs	r3, #64	; 0x40
 8010d62:	e080      	b.n	8010e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010d64:	697b      	ldr	r3, [r7, #20]
 8010d66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d001      	beq.n	8010d72 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010d6e:	2380      	movs	r3, #128	; 0x80
 8010d70:	e079      	b.n	8010e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010d72:	697b      	ldr	r3, [r7, #20]
 8010d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d002      	beq.n	8010d82 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010d7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010d80:	e071      	b.n	8010e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d002      	beq.n	8010d92 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010d8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010d90:	e069      	b.n	8010e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010d92:	697b      	ldr	r3, [r7, #20]
 8010d94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d002      	beq.n	8010da2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010d9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010da0:	e061      	b.n	8010e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010da2:	697b      	ldr	r3, [r7, #20]
 8010da4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d002      	beq.n	8010db2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010dac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010db0:	e059      	b.n	8010e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010db2:	697b      	ldr	r3, [r7, #20]
 8010db4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d002      	beq.n	8010dc2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010dc0:	e051      	b.n	8010e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010dc2:	697b      	ldr	r3, [r7, #20]
 8010dc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d002      	beq.n	8010dd2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010dcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010dd0:	e049      	b.n	8010e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010dd2:	697b      	ldr	r3, [r7, #20]
 8010dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d002      	beq.n	8010de2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010ddc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010de0:	e041      	b.n	8010e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010de2:	697b      	ldr	r3, [r7, #20]
 8010de4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d002      	beq.n	8010df2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010dec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010df0:	e039      	b.n	8010e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010df2:	697b      	ldr	r3, [r7, #20]
 8010df4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d002      	beq.n	8010e02 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010dfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010e00:	e031      	b.n	8010e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010e02:	697b      	ldr	r3, [r7, #20]
 8010e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d002      	beq.n	8010e12 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010e0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010e10:	e029      	b.n	8010e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010e12:	697b      	ldr	r3, [r7, #20]
 8010e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d002      	beq.n	8010e22 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010e1c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010e20:	e021      	b.n	8010e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010e22:	697b      	ldr	r3, [r7, #20]
 8010e24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d002      	beq.n	8010e32 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010e2c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010e30:	e019      	b.n	8010e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010e32:	697b      	ldr	r3, [r7, #20]
 8010e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d002      	beq.n	8010e42 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010e3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010e40:	e011      	b.n	8010e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d002      	beq.n	8010e52 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010e4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010e50:	e009      	b.n	8010e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010e52:	697b      	ldr	r3, [r7, #20]
 8010e54:	f003 0308 	and.w	r3, r3, #8
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d002      	beq.n	8010e62 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010e5c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010e60:	e001      	b.n	8010e66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010e62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010e66:	4618      	mov	r0, r3
 8010e68:	3720      	adds	r7, #32
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bd80      	pop	{r7, pc}
 8010e6e:	bf00      	nop
 8010e70:	24000000 	.word	0x24000000
 8010e74:	10624dd3 	.word	0x10624dd3
 8010e78:	00200045 	.word	0x00200045
 8010e7c:	002000c5 	.word	0x002000c5
 8010e80:	fdffe008 	.word	0xfdffe008

08010e84 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010e84:	b480      	push	{r7}
 8010e86:	b085      	sub	sp, #20
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010e8c:	4b1f      	ldr	r3, [pc, #124]	; (8010f0c <SDMMC_GetCmdResp2+0x88>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	4a1f      	ldr	r2, [pc, #124]	; (8010f10 <SDMMC_GetCmdResp2+0x8c>)
 8010e92:	fba2 2303 	umull	r2, r3, r2, r3
 8010e96:	0a5b      	lsrs	r3, r3, #9
 8010e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e9c:	fb02 f303 	mul.w	r3, r2, r3
 8010ea0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	1e5a      	subs	r2, r3, #1
 8010ea6:	60fa      	str	r2, [r7, #12]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d102      	bne.n	8010eb2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010eac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010eb0:	e026      	b.n	8010f00 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010eb6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010eb8:	68bb      	ldr	r3, [r7, #8]
 8010eba:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d0ef      	beq.n	8010ea2 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010ec2:	68bb      	ldr	r3, [r7, #8]
 8010ec4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d1ea      	bne.n	8010ea2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ed0:	f003 0304 	and.w	r3, r3, #4
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d004      	beq.n	8010ee2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	2204      	movs	r2, #4
 8010edc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010ede:	2304      	movs	r3, #4
 8010ee0:	e00e      	b.n	8010f00 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ee6:	f003 0301 	and.w	r3, r3, #1
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d004      	beq.n	8010ef8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	2201      	movs	r2, #1
 8010ef2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	e003      	b.n	8010f00 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	4a06      	ldr	r2, [pc, #24]	; (8010f14 <SDMMC_GetCmdResp2+0x90>)
 8010efc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010efe:	2300      	movs	r3, #0
}
 8010f00:	4618      	mov	r0, r3
 8010f02:	3714      	adds	r7, #20
 8010f04:	46bd      	mov	sp, r7
 8010f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0a:	4770      	bx	lr
 8010f0c:	24000000 	.word	0x24000000
 8010f10:	10624dd3 	.word	0x10624dd3
 8010f14:	002000c5 	.word	0x002000c5

08010f18 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010f18:	b480      	push	{r7}
 8010f1a:	b085      	sub	sp, #20
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010f20:	4b1a      	ldr	r3, [pc, #104]	; (8010f8c <SDMMC_GetCmdResp3+0x74>)
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	4a1a      	ldr	r2, [pc, #104]	; (8010f90 <SDMMC_GetCmdResp3+0x78>)
 8010f26:	fba2 2303 	umull	r2, r3, r2, r3
 8010f2a:	0a5b      	lsrs	r3, r3, #9
 8010f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f30:	fb02 f303 	mul.w	r3, r2, r3
 8010f34:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	1e5a      	subs	r2, r3, #1
 8010f3a:	60fa      	str	r2, [r7, #12]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d102      	bne.n	8010f46 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010f40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010f44:	e01b      	b.n	8010f7e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f4a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010f4c:	68bb      	ldr	r3, [r7, #8]
 8010f4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d0ef      	beq.n	8010f36 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d1ea      	bne.n	8010f36 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f64:	f003 0304 	and.w	r3, r3, #4
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d004      	beq.n	8010f76 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	2204      	movs	r2, #4
 8010f70:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f72:	2304      	movs	r3, #4
 8010f74:	e003      	b.n	8010f7e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	4a06      	ldr	r2, [pc, #24]	; (8010f94 <SDMMC_GetCmdResp3+0x7c>)
 8010f7a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010f7c:	2300      	movs	r3, #0
}
 8010f7e:	4618      	mov	r0, r3
 8010f80:	3714      	adds	r7, #20
 8010f82:	46bd      	mov	sp, r7
 8010f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f88:	4770      	bx	lr
 8010f8a:	bf00      	nop
 8010f8c:	24000000 	.word	0x24000000
 8010f90:	10624dd3 	.word	0x10624dd3
 8010f94:	002000c5 	.word	0x002000c5

08010f98 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b088      	sub	sp, #32
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	60f8      	str	r0, [r7, #12]
 8010fa0:	460b      	mov	r3, r1
 8010fa2:	607a      	str	r2, [r7, #4]
 8010fa4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010fa6:	4b35      	ldr	r3, [pc, #212]	; (801107c <SDMMC_GetCmdResp6+0xe4>)
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	4a35      	ldr	r2, [pc, #212]	; (8011080 <SDMMC_GetCmdResp6+0xe8>)
 8010fac:	fba2 2303 	umull	r2, r3, r2, r3
 8010fb0:	0a5b      	lsrs	r3, r3, #9
 8010fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8010fb6:	fb02 f303 	mul.w	r3, r2, r3
 8010fba:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010fbc:	69fb      	ldr	r3, [r7, #28]
 8010fbe:	1e5a      	subs	r2, r3, #1
 8010fc0:	61fa      	str	r2, [r7, #28]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d102      	bne.n	8010fcc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010fc6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010fca:	e052      	b.n	8011072 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fd0:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010fd2:	69bb      	ldr	r3, [r7, #24]
 8010fd4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d0ef      	beq.n	8010fbc <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010fdc:	69bb      	ldr	r3, [r7, #24]
 8010fde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d1ea      	bne.n	8010fbc <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fea:	f003 0304 	and.w	r3, r3, #4
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d004      	beq.n	8010ffc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	2204      	movs	r2, #4
 8010ff6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010ff8:	2304      	movs	r3, #4
 8010ffa:	e03a      	b.n	8011072 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011000:	f003 0301 	and.w	r3, r3, #1
 8011004:	2b00      	cmp	r3, #0
 8011006:	d004      	beq.n	8011012 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	2201      	movs	r2, #1
 801100c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801100e:	2301      	movs	r3, #1
 8011010:	e02f      	b.n	8011072 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011012:	68f8      	ldr	r0, [r7, #12]
 8011014:	f7ff fb7c 	bl	8010710 <SDMMC_GetCommandResponse>
 8011018:	4603      	mov	r3, r0
 801101a:	461a      	mov	r2, r3
 801101c:	7afb      	ldrb	r3, [r7, #11]
 801101e:	4293      	cmp	r3, r2
 8011020:	d001      	beq.n	8011026 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011022:	2301      	movs	r3, #1
 8011024:	e025      	b.n	8011072 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	4a16      	ldr	r2, [pc, #88]	; (8011084 <SDMMC_GetCmdResp6+0xec>)
 801102a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801102c:	2100      	movs	r1, #0
 801102e:	68f8      	ldr	r0, [r7, #12]
 8011030:	f7ff fb7b 	bl	801072a <SDMMC_GetResponse>
 8011034:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8011036:	697b      	ldr	r3, [r7, #20]
 8011038:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 801103c:	2b00      	cmp	r3, #0
 801103e:	d106      	bne.n	801104e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8011040:	697b      	ldr	r3, [r7, #20]
 8011042:	0c1b      	lsrs	r3, r3, #16
 8011044:	b29a      	uxth	r2, r3
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 801104a:	2300      	movs	r3, #0
 801104c:	e011      	b.n	8011072 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801104e:	697b      	ldr	r3, [r7, #20]
 8011050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011054:	2b00      	cmp	r3, #0
 8011056:	d002      	beq.n	801105e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011058:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801105c:	e009      	b.n	8011072 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801105e:	697b      	ldr	r3, [r7, #20]
 8011060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011064:	2b00      	cmp	r3, #0
 8011066:	d002      	beq.n	801106e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801106c:	e001      	b.n	8011072 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801106e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011072:	4618      	mov	r0, r3
 8011074:	3720      	adds	r7, #32
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}
 801107a:	bf00      	nop
 801107c:	24000000 	.word	0x24000000
 8011080:	10624dd3 	.word	0x10624dd3
 8011084:	002000c5 	.word	0x002000c5

08011088 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011088:	b480      	push	{r7}
 801108a:	b085      	sub	sp, #20
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011090:	4b22      	ldr	r3, [pc, #136]	; (801111c <SDMMC_GetCmdResp7+0x94>)
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	4a22      	ldr	r2, [pc, #136]	; (8011120 <SDMMC_GetCmdResp7+0x98>)
 8011096:	fba2 2303 	umull	r2, r3, r2, r3
 801109a:	0a5b      	lsrs	r3, r3, #9
 801109c:	f241 3288 	movw	r2, #5000	; 0x1388
 80110a0:	fb02 f303 	mul.w	r3, r2, r3
 80110a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	1e5a      	subs	r2, r3, #1
 80110aa:	60fa      	str	r2, [r7, #12]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d102      	bne.n	80110b6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80110b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80110b4:	e02c      	b.n	8011110 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110ba:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80110bc:	68bb      	ldr	r3, [r7, #8]
 80110be:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d0ef      	beq.n	80110a6 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80110c6:	68bb      	ldr	r3, [r7, #8]
 80110c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d1ea      	bne.n	80110a6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110d4:	f003 0304 	and.w	r3, r3, #4
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d004      	beq.n	80110e6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	2204      	movs	r2, #4
 80110e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80110e2:	2304      	movs	r3, #4
 80110e4:	e014      	b.n	8011110 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110ea:	f003 0301 	and.w	r3, r3, #1
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d004      	beq.n	80110fc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	2201      	movs	r2, #1
 80110f6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80110f8:	2301      	movs	r3, #1
 80110fa:	e009      	b.n	8011110 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011104:	2b00      	cmp	r3, #0
 8011106:	d002      	beq.n	801110e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	2240      	movs	r2, #64	; 0x40
 801110c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801110e:	2300      	movs	r3, #0

}
 8011110:	4618      	mov	r0, r3
 8011112:	3714      	adds	r7, #20
 8011114:	46bd      	mov	sp, r7
 8011116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111a:	4770      	bx	lr
 801111c:	24000000 	.word	0x24000000
 8011120:	10624dd3 	.word	0x10624dd3

08011124 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8011124:	b480      	push	{r7}
 8011126:	b085      	sub	sp, #20
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801112c:	4b11      	ldr	r3, [pc, #68]	; (8011174 <SDMMC_GetCmdError+0x50>)
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	4a11      	ldr	r2, [pc, #68]	; (8011178 <SDMMC_GetCmdError+0x54>)
 8011132:	fba2 2303 	umull	r2, r3, r2, r3
 8011136:	0a5b      	lsrs	r3, r3, #9
 8011138:	f241 3288 	movw	r2, #5000	; 0x1388
 801113c:	fb02 f303 	mul.w	r3, r2, r3
 8011140:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	1e5a      	subs	r2, r3, #1
 8011146:	60fa      	str	r2, [r7, #12]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d102      	bne.n	8011152 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801114c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011150:	e009      	b.n	8011166 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801115a:	2b00      	cmp	r3, #0
 801115c:	d0f1      	beq.n	8011142 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	4a06      	ldr	r2, [pc, #24]	; (801117c <SDMMC_GetCmdError+0x58>)
 8011162:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8011164:	2300      	movs	r3, #0
}
 8011166:	4618      	mov	r0, r3
 8011168:	3714      	adds	r7, #20
 801116a:	46bd      	mov	sp, r7
 801116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011170:	4770      	bx	lr
 8011172:	bf00      	nop
 8011174:	24000000 	.word	0x24000000
 8011178:	10624dd3 	.word	0x10624dd3
 801117c:	002000c5 	.word	0x002000c5

08011180 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011180:	b084      	sub	sp, #16
 8011182:	b580      	push	{r7, lr}
 8011184:	b084      	sub	sp, #16
 8011186:	af00      	add	r7, sp, #0
 8011188:	6078      	str	r0, [r7, #4]
 801118a:	f107 001c 	add.w	r0, r7, #28
 801118e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011194:	2b01      	cmp	r3, #1
 8011196:	d120      	bne.n	80111da <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801119c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	68da      	ldr	r2, [r3, #12]
 80111a8:	4b2a      	ldr	r3, [pc, #168]	; (8011254 <USB_CoreInit+0xd4>)
 80111aa:	4013      	ands	r3, r2
 80111ac:	687a      	ldr	r2, [r7, #4]
 80111ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	68db      	ldr	r3, [r3, #12]
 80111b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80111bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111be:	2b01      	cmp	r3, #1
 80111c0:	d105      	bne.n	80111ce <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	68db      	ldr	r3, [r3, #12]
 80111c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80111ce:	6878      	ldr	r0, [r7, #4]
 80111d0:	f001 faf8 	bl	80127c4 <USB_CoreReset>
 80111d4:	4603      	mov	r3, r0
 80111d6:	73fb      	strb	r3, [r7, #15]
 80111d8:	e01a      	b.n	8011210 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	68db      	ldr	r3, [r3, #12]
 80111de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	f001 faec 	bl	80127c4 <USB_CoreReset>
 80111ec:	4603      	mov	r3, r0
 80111ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80111f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d106      	bne.n	8011204 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	639a      	str	r2, [r3, #56]	; 0x38
 8011202:	e005      	b.n	8011210 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011208:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011212:	2b01      	cmp	r3, #1
 8011214:	d116      	bne.n	8011244 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801121a:	b29a      	uxth	r2, r3
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011224:	4b0c      	ldr	r3, [pc, #48]	; (8011258 <USB_CoreInit+0xd8>)
 8011226:	4313      	orrs	r3, r2
 8011228:	687a      	ldr	r2, [r7, #4]
 801122a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	689b      	ldr	r3, [r3, #8]
 8011230:	f043 0206 	orr.w	r2, r3, #6
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	689b      	ldr	r3, [r3, #8]
 801123c:	f043 0220 	orr.w	r2, r3, #32
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011244:	7bfb      	ldrb	r3, [r7, #15]
}
 8011246:	4618      	mov	r0, r3
 8011248:	3710      	adds	r7, #16
 801124a:	46bd      	mov	sp, r7
 801124c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011250:	b004      	add	sp, #16
 8011252:	4770      	bx	lr
 8011254:	ffbdffbf 	.word	0xffbdffbf
 8011258:	03ee0000 	.word	0x03ee0000

0801125c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801125c:	b480      	push	{r7}
 801125e:	b087      	sub	sp, #28
 8011260:	af00      	add	r7, sp, #0
 8011262:	60f8      	str	r0, [r7, #12]
 8011264:	60b9      	str	r1, [r7, #8]
 8011266:	4613      	mov	r3, r2
 8011268:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801126a:	79fb      	ldrb	r3, [r7, #7]
 801126c:	2b02      	cmp	r3, #2
 801126e:	d165      	bne.n	801133c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011270:	68bb      	ldr	r3, [r7, #8]
 8011272:	4a41      	ldr	r2, [pc, #260]	; (8011378 <USB_SetTurnaroundTime+0x11c>)
 8011274:	4293      	cmp	r3, r2
 8011276:	d906      	bls.n	8011286 <USB_SetTurnaroundTime+0x2a>
 8011278:	68bb      	ldr	r3, [r7, #8]
 801127a:	4a40      	ldr	r2, [pc, #256]	; (801137c <USB_SetTurnaroundTime+0x120>)
 801127c:	4293      	cmp	r3, r2
 801127e:	d202      	bcs.n	8011286 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011280:	230f      	movs	r3, #15
 8011282:	617b      	str	r3, [r7, #20]
 8011284:	e062      	b.n	801134c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8011286:	68bb      	ldr	r3, [r7, #8]
 8011288:	4a3c      	ldr	r2, [pc, #240]	; (801137c <USB_SetTurnaroundTime+0x120>)
 801128a:	4293      	cmp	r3, r2
 801128c:	d306      	bcc.n	801129c <USB_SetTurnaroundTime+0x40>
 801128e:	68bb      	ldr	r3, [r7, #8]
 8011290:	4a3b      	ldr	r2, [pc, #236]	; (8011380 <USB_SetTurnaroundTime+0x124>)
 8011292:	4293      	cmp	r3, r2
 8011294:	d202      	bcs.n	801129c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8011296:	230e      	movs	r3, #14
 8011298:	617b      	str	r3, [r7, #20]
 801129a:	e057      	b.n	801134c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801129c:	68bb      	ldr	r3, [r7, #8]
 801129e:	4a38      	ldr	r2, [pc, #224]	; (8011380 <USB_SetTurnaroundTime+0x124>)
 80112a0:	4293      	cmp	r3, r2
 80112a2:	d306      	bcc.n	80112b2 <USB_SetTurnaroundTime+0x56>
 80112a4:	68bb      	ldr	r3, [r7, #8]
 80112a6:	4a37      	ldr	r2, [pc, #220]	; (8011384 <USB_SetTurnaroundTime+0x128>)
 80112a8:	4293      	cmp	r3, r2
 80112aa:	d202      	bcs.n	80112b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80112ac:	230d      	movs	r3, #13
 80112ae:	617b      	str	r3, [r7, #20]
 80112b0:	e04c      	b.n	801134c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80112b2:	68bb      	ldr	r3, [r7, #8]
 80112b4:	4a33      	ldr	r2, [pc, #204]	; (8011384 <USB_SetTurnaroundTime+0x128>)
 80112b6:	4293      	cmp	r3, r2
 80112b8:	d306      	bcc.n	80112c8 <USB_SetTurnaroundTime+0x6c>
 80112ba:	68bb      	ldr	r3, [r7, #8]
 80112bc:	4a32      	ldr	r2, [pc, #200]	; (8011388 <USB_SetTurnaroundTime+0x12c>)
 80112be:	4293      	cmp	r3, r2
 80112c0:	d802      	bhi.n	80112c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80112c2:	230c      	movs	r3, #12
 80112c4:	617b      	str	r3, [r7, #20]
 80112c6:	e041      	b.n	801134c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80112c8:	68bb      	ldr	r3, [r7, #8]
 80112ca:	4a2f      	ldr	r2, [pc, #188]	; (8011388 <USB_SetTurnaroundTime+0x12c>)
 80112cc:	4293      	cmp	r3, r2
 80112ce:	d906      	bls.n	80112de <USB_SetTurnaroundTime+0x82>
 80112d0:	68bb      	ldr	r3, [r7, #8]
 80112d2:	4a2e      	ldr	r2, [pc, #184]	; (801138c <USB_SetTurnaroundTime+0x130>)
 80112d4:	4293      	cmp	r3, r2
 80112d6:	d802      	bhi.n	80112de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80112d8:	230b      	movs	r3, #11
 80112da:	617b      	str	r3, [r7, #20]
 80112dc:	e036      	b.n	801134c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80112de:	68bb      	ldr	r3, [r7, #8]
 80112e0:	4a2a      	ldr	r2, [pc, #168]	; (801138c <USB_SetTurnaroundTime+0x130>)
 80112e2:	4293      	cmp	r3, r2
 80112e4:	d906      	bls.n	80112f4 <USB_SetTurnaroundTime+0x98>
 80112e6:	68bb      	ldr	r3, [r7, #8]
 80112e8:	4a29      	ldr	r2, [pc, #164]	; (8011390 <USB_SetTurnaroundTime+0x134>)
 80112ea:	4293      	cmp	r3, r2
 80112ec:	d802      	bhi.n	80112f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80112ee:	230a      	movs	r3, #10
 80112f0:	617b      	str	r3, [r7, #20]
 80112f2:	e02b      	b.n	801134c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80112f4:	68bb      	ldr	r3, [r7, #8]
 80112f6:	4a26      	ldr	r2, [pc, #152]	; (8011390 <USB_SetTurnaroundTime+0x134>)
 80112f8:	4293      	cmp	r3, r2
 80112fa:	d906      	bls.n	801130a <USB_SetTurnaroundTime+0xae>
 80112fc:	68bb      	ldr	r3, [r7, #8]
 80112fe:	4a25      	ldr	r2, [pc, #148]	; (8011394 <USB_SetTurnaroundTime+0x138>)
 8011300:	4293      	cmp	r3, r2
 8011302:	d202      	bcs.n	801130a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8011304:	2309      	movs	r3, #9
 8011306:	617b      	str	r3, [r7, #20]
 8011308:	e020      	b.n	801134c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801130a:	68bb      	ldr	r3, [r7, #8]
 801130c:	4a21      	ldr	r2, [pc, #132]	; (8011394 <USB_SetTurnaroundTime+0x138>)
 801130e:	4293      	cmp	r3, r2
 8011310:	d306      	bcc.n	8011320 <USB_SetTurnaroundTime+0xc4>
 8011312:	68bb      	ldr	r3, [r7, #8]
 8011314:	4a20      	ldr	r2, [pc, #128]	; (8011398 <USB_SetTurnaroundTime+0x13c>)
 8011316:	4293      	cmp	r3, r2
 8011318:	d802      	bhi.n	8011320 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801131a:	2308      	movs	r3, #8
 801131c:	617b      	str	r3, [r7, #20]
 801131e:	e015      	b.n	801134c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011320:	68bb      	ldr	r3, [r7, #8]
 8011322:	4a1d      	ldr	r2, [pc, #116]	; (8011398 <USB_SetTurnaroundTime+0x13c>)
 8011324:	4293      	cmp	r3, r2
 8011326:	d906      	bls.n	8011336 <USB_SetTurnaroundTime+0xda>
 8011328:	68bb      	ldr	r3, [r7, #8]
 801132a:	4a1c      	ldr	r2, [pc, #112]	; (801139c <USB_SetTurnaroundTime+0x140>)
 801132c:	4293      	cmp	r3, r2
 801132e:	d202      	bcs.n	8011336 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011330:	2307      	movs	r3, #7
 8011332:	617b      	str	r3, [r7, #20]
 8011334:	e00a      	b.n	801134c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8011336:	2306      	movs	r3, #6
 8011338:	617b      	str	r3, [r7, #20]
 801133a:	e007      	b.n	801134c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801133c:	79fb      	ldrb	r3, [r7, #7]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d102      	bne.n	8011348 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8011342:	2309      	movs	r3, #9
 8011344:	617b      	str	r3, [r7, #20]
 8011346:	e001      	b.n	801134c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011348:	2309      	movs	r3, #9
 801134a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	68db      	ldr	r3, [r3, #12]
 8011350:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	68da      	ldr	r2, [r3, #12]
 801135c:	697b      	ldr	r3, [r7, #20]
 801135e:	029b      	lsls	r3, r3, #10
 8011360:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8011364:	431a      	orrs	r2, r3
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801136a:	2300      	movs	r3, #0
}
 801136c:	4618      	mov	r0, r3
 801136e:	371c      	adds	r7, #28
 8011370:	46bd      	mov	sp, r7
 8011372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011376:	4770      	bx	lr
 8011378:	00d8acbf 	.word	0x00d8acbf
 801137c:	00e4e1c0 	.word	0x00e4e1c0
 8011380:	00f42400 	.word	0x00f42400
 8011384:	01067380 	.word	0x01067380
 8011388:	011a499f 	.word	0x011a499f
 801138c:	01312cff 	.word	0x01312cff
 8011390:	014ca43f 	.word	0x014ca43f
 8011394:	016e3600 	.word	0x016e3600
 8011398:	01a6ab1f 	.word	0x01a6ab1f
 801139c:	01e84800 	.word	0x01e84800

080113a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80113a0:	b480      	push	{r7}
 80113a2:	b083      	sub	sp, #12
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	689b      	ldr	r3, [r3, #8]
 80113ac:	f043 0201 	orr.w	r2, r3, #1
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80113b4:	2300      	movs	r3, #0
}
 80113b6:	4618      	mov	r0, r3
 80113b8:	370c      	adds	r7, #12
 80113ba:	46bd      	mov	sp, r7
 80113bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c0:	4770      	bx	lr

080113c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80113c2:	b480      	push	{r7}
 80113c4:	b083      	sub	sp, #12
 80113c6:	af00      	add	r7, sp, #0
 80113c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	689b      	ldr	r3, [r3, #8]
 80113ce:	f023 0201 	bic.w	r2, r3, #1
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80113d6:	2300      	movs	r3, #0
}
 80113d8:	4618      	mov	r0, r3
 80113da:	370c      	adds	r7, #12
 80113dc:	46bd      	mov	sp, r7
 80113de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e2:	4770      	bx	lr

080113e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b084      	sub	sp, #16
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
 80113ec:	460b      	mov	r3, r1
 80113ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80113f0:	2300      	movs	r3, #0
 80113f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	68db      	ldr	r3, [r3, #12]
 80113f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011400:	78fb      	ldrb	r3, [r7, #3]
 8011402:	2b01      	cmp	r3, #1
 8011404:	d115      	bne.n	8011432 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	68db      	ldr	r3, [r3, #12]
 801140a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8011412:	2001      	movs	r0, #1
 8011414:	f7f1 fd1a 	bl	8002e4c <HAL_Delay>
      ms++;
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	3301      	adds	r3, #1
 801141c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801141e:	6878      	ldr	r0, [r7, #4]
 8011420:	f001 f93f 	bl	80126a2 <USB_GetMode>
 8011424:	4603      	mov	r3, r0
 8011426:	2b01      	cmp	r3, #1
 8011428:	d01e      	beq.n	8011468 <USB_SetCurrentMode+0x84>
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	2b31      	cmp	r3, #49	; 0x31
 801142e:	d9f0      	bls.n	8011412 <USB_SetCurrentMode+0x2e>
 8011430:	e01a      	b.n	8011468 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011432:	78fb      	ldrb	r3, [r7, #3]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d115      	bne.n	8011464 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	68db      	ldr	r3, [r3, #12]
 801143c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8011444:	2001      	movs	r0, #1
 8011446:	f7f1 fd01 	bl	8002e4c <HAL_Delay>
      ms++;
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	3301      	adds	r3, #1
 801144e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8011450:	6878      	ldr	r0, [r7, #4]
 8011452:	f001 f926 	bl	80126a2 <USB_GetMode>
 8011456:	4603      	mov	r3, r0
 8011458:	2b00      	cmp	r3, #0
 801145a:	d005      	beq.n	8011468 <USB_SetCurrentMode+0x84>
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	2b31      	cmp	r3, #49	; 0x31
 8011460:	d9f0      	bls.n	8011444 <USB_SetCurrentMode+0x60>
 8011462:	e001      	b.n	8011468 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011464:	2301      	movs	r3, #1
 8011466:	e005      	b.n	8011474 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	2b32      	cmp	r3, #50	; 0x32
 801146c:	d101      	bne.n	8011472 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801146e:	2301      	movs	r3, #1
 8011470:	e000      	b.n	8011474 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8011472:	2300      	movs	r3, #0
}
 8011474:	4618      	mov	r0, r3
 8011476:	3710      	adds	r7, #16
 8011478:	46bd      	mov	sp, r7
 801147a:	bd80      	pop	{r7, pc}

0801147c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801147c:	b084      	sub	sp, #16
 801147e:	b580      	push	{r7, lr}
 8011480:	b086      	sub	sp, #24
 8011482:	af00      	add	r7, sp, #0
 8011484:	6078      	str	r0, [r7, #4]
 8011486:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801148a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801148e:	2300      	movs	r3, #0
 8011490:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011496:	2300      	movs	r3, #0
 8011498:	613b      	str	r3, [r7, #16]
 801149a:	e009      	b.n	80114b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801149c:	687a      	ldr	r2, [r7, #4]
 801149e:	693b      	ldr	r3, [r7, #16]
 80114a0:	3340      	adds	r3, #64	; 0x40
 80114a2:	009b      	lsls	r3, r3, #2
 80114a4:	4413      	add	r3, r2
 80114a6:	2200      	movs	r2, #0
 80114a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80114aa:	693b      	ldr	r3, [r7, #16]
 80114ac:	3301      	adds	r3, #1
 80114ae:	613b      	str	r3, [r7, #16]
 80114b0:	693b      	ldr	r3, [r7, #16]
 80114b2:	2b0e      	cmp	r3, #14
 80114b4:	d9f2      	bls.n	801149c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80114b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d11c      	bne.n	80114f6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80114c2:	685b      	ldr	r3, [r3, #4]
 80114c4:	68fa      	ldr	r2, [r7, #12]
 80114c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80114ca:	f043 0302 	orr.w	r3, r3, #2
 80114ce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114d4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	601a      	str	r2, [r3, #0]
 80114f4:	e005      	b.n	8011502 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011508:	461a      	mov	r2, r3
 801150a:	2300      	movs	r3, #0
 801150c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011514:	4619      	mov	r1, r3
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801151c:	461a      	mov	r2, r3
 801151e:	680b      	ldr	r3, [r1, #0]
 8011520:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011524:	2b01      	cmp	r3, #1
 8011526:	d10c      	bne.n	8011542 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801152a:	2b00      	cmp	r3, #0
 801152c:	d104      	bne.n	8011538 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801152e:	2100      	movs	r1, #0
 8011530:	6878      	ldr	r0, [r7, #4]
 8011532:	f000 f965 	bl	8011800 <USB_SetDevSpeed>
 8011536:	e008      	b.n	801154a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8011538:	2101      	movs	r1, #1
 801153a:	6878      	ldr	r0, [r7, #4]
 801153c:	f000 f960 	bl	8011800 <USB_SetDevSpeed>
 8011540:	e003      	b.n	801154a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011542:	2103      	movs	r1, #3
 8011544:	6878      	ldr	r0, [r7, #4]
 8011546:	f000 f95b 	bl	8011800 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801154a:	2110      	movs	r1, #16
 801154c:	6878      	ldr	r0, [r7, #4]
 801154e:	f000 f8f3 	bl	8011738 <USB_FlushTxFifo>
 8011552:	4603      	mov	r3, r0
 8011554:	2b00      	cmp	r3, #0
 8011556:	d001      	beq.n	801155c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8011558:	2301      	movs	r3, #1
 801155a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801155c:	6878      	ldr	r0, [r7, #4]
 801155e:	f000 f91f 	bl	80117a0 <USB_FlushRxFifo>
 8011562:	4603      	mov	r3, r0
 8011564:	2b00      	cmp	r3, #0
 8011566:	d001      	beq.n	801156c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8011568:	2301      	movs	r3, #1
 801156a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011572:	461a      	mov	r2, r3
 8011574:	2300      	movs	r3, #0
 8011576:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801157e:	461a      	mov	r2, r3
 8011580:	2300      	movs	r3, #0
 8011582:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801158a:	461a      	mov	r2, r3
 801158c:	2300      	movs	r3, #0
 801158e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011590:	2300      	movs	r3, #0
 8011592:	613b      	str	r3, [r7, #16]
 8011594:	e043      	b.n	801161e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011596:	693b      	ldr	r3, [r7, #16]
 8011598:	015a      	lsls	r2, r3, #5
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	4413      	add	r3, r2
 801159e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80115a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80115ac:	d118      	bne.n	80115e0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80115ae:	693b      	ldr	r3, [r7, #16]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d10a      	bne.n	80115ca <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80115b4:	693b      	ldr	r3, [r7, #16]
 80115b6:	015a      	lsls	r2, r3, #5
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	4413      	add	r3, r2
 80115bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115c0:	461a      	mov	r2, r3
 80115c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80115c6:	6013      	str	r3, [r2, #0]
 80115c8:	e013      	b.n	80115f2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80115ca:	693b      	ldr	r3, [r7, #16]
 80115cc:	015a      	lsls	r2, r3, #5
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	4413      	add	r3, r2
 80115d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115d6:	461a      	mov	r2, r3
 80115d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80115dc:	6013      	str	r3, [r2, #0]
 80115de:	e008      	b.n	80115f2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80115e0:	693b      	ldr	r3, [r7, #16]
 80115e2:	015a      	lsls	r2, r3, #5
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	4413      	add	r3, r2
 80115e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115ec:	461a      	mov	r2, r3
 80115ee:	2300      	movs	r3, #0
 80115f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80115f2:	693b      	ldr	r3, [r7, #16]
 80115f4:	015a      	lsls	r2, r3, #5
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	4413      	add	r3, r2
 80115fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115fe:	461a      	mov	r2, r3
 8011600:	2300      	movs	r3, #0
 8011602:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011604:	693b      	ldr	r3, [r7, #16]
 8011606:	015a      	lsls	r2, r3, #5
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	4413      	add	r3, r2
 801160c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011610:	461a      	mov	r2, r3
 8011612:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011616:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011618:	693b      	ldr	r3, [r7, #16]
 801161a:	3301      	adds	r3, #1
 801161c:	613b      	str	r3, [r7, #16]
 801161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011620:	693a      	ldr	r2, [r7, #16]
 8011622:	429a      	cmp	r2, r3
 8011624:	d3b7      	bcc.n	8011596 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011626:	2300      	movs	r3, #0
 8011628:	613b      	str	r3, [r7, #16]
 801162a:	e043      	b.n	80116b4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801162c:	693b      	ldr	r3, [r7, #16]
 801162e:	015a      	lsls	r2, r3, #5
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	4413      	add	r3, r2
 8011634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801163e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011642:	d118      	bne.n	8011676 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8011644:	693b      	ldr	r3, [r7, #16]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d10a      	bne.n	8011660 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801164a:	693b      	ldr	r3, [r7, #16]
 801164c:	015a      	lsls	r2, r3, #5
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	4413      	add	r3, r2
 8011652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011656:	461a      	mov	r2, r3
 8011658:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801165c:	6013      	str	r3, [r2, #0]
 801165e:	e013      	b.n	8011688 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011660:	693b      	ldr	r3, [r7, #16]
 8011662:	015a      	lsls	r2, r3, #5
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	4413      	add	r3, r2
 8011668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801166c:	461a      	mov	r2, r3
 801166e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011672:	6013      	str	r3, [r2, #0]
 8011674:	e008      	b.n	8011688 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011676:	693b      	ldr	r3, [r7, #16]
 8011678:	015a      	lsls	r2, r3, #5
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	4413      	add	r3, r2
 801167e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011682:	461a      	mov	r2, r3
 8011684:	2300      	movs	r3, #0
 8011686:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011688:	693b      	ldr	r3, [r7, #16]
 801168a:	015a      	lsls	r2, r3, #5
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	4413      	add	r3, r2
 8011690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011694:	461a      	mov	r2, r3
 8011696:	2300      	movs	r3, #0
 8011698:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801169a:	693b      	ldr	r3, [r7, #16]
 801169c:	015a      	lsls	r2, r3, #5
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	4413      	add	r3, r2
 80116a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116a6:	461a      	mov	r2, r3
 80116a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80116ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80116ae:	693b      	ldr	r3, [r7, #16]
 80116b0:	3301      	adds	r3, #1
 80116b2:	613b      	str	r3, [r7, #16]
 80116b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116b6:	693a      	ldr	r2, [r7, #16]
 80116b8:	429a      	cmp	r2, r3
 80116ba:	d3b7      	bcc.n	801162c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80116c2:	691b      	ldr	r3, [r3, #16]
 80116c4:	68fa      	ldr	r2, [r7, #12]
 80116c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80116ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80116ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	2200      	movs	r2, #0
 80116d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80116dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80116de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d105      	bne.n	80116f0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	699b      	ldr	r3, [r3, #24]
 80116e8:	f043 0210 	orr.w	r2, r3, #16
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	699a      	ldr	r2, [r3, #24]
 80116f4:	4b0e      	ldr	r3, [pc, #56]	; (8011730 <USB_DevInit+0x2b4>)
 80116f6:	4313      	orrs	r3, r2
 80116f8:	687a      	ldr	r2, [r7, #4]
 80116fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80116fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d005      	beq.n	801170e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	699b      	ldr	r3, [r3, #24]
 8011706:	f043 0208 	orr.w	r2, r3, #8
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801170e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011710:	2b01      	cmp	r3, #1
 8011712:	d105      	bne.n	8011720 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	699a      	ldr	r2, [r3, #24]
 8011718:	4b06      	ldr	r3, [pc, #24]	; (8011734 <USB_DevInit+0x2b8>)
 801171a:	4313      	orrs	r3, r2
 801171c:	687a      	ldr	r2, [r7, #4]
 801171e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011720:	7dfb      	ldrb	r3, [r7, #23]
}
 8011722:	4618      	mov	r0, r3
 8011724:	3718      	adds	r7, #24
 8011726:	46bd      	mov	sp, r7
 8011728:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801172c:	b004      	add	sp, #16
 801172e:	4770      	bx	lr
 8011730:	803c3800 	.word	0x803c3800
 8011734:	40000004 	.word	0x40000004

08011738 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011738:	b480      	push	{r7}
 801173a:	b085      	sub	sp, #20
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
 8011740:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011742:	2300      	movs	r3, #0
 8011744:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	3301      	adds	r3, #1
 801174a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	4a13      	ldr	r2, [pc, #76]	; (801179c <USB_FlushTxFifo+0x64>)
 8011750:	4293      	cmp	r3, r2
 8011752:	d901      	bls.n	8011758 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8011754:	2303      	movs	r3, #3
 8011756:	e01b      	b.n	8011790 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	691b      	ldr	r3, [r3, #16]
 801175c:	2b00      	cmp	r3, #0
 801175e:	daf2      	bge.n	8011746 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011760:	2300      	movs	r3, #0
 8011762:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011764:	683b      	ldr	r3, [r7, #0]
 8011766:	019b      	lsls	r3, r3, #6
 8011768:	f043 0220 	orr.w	r2, r3, #32
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	3301      	adds	r3, #1
 8011774:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	4a08      	ldr	r2, [pc, #32]	; (801179c <USB_FlushTxFifo+0x64>)
 801177a:	4293      	cmp	r3, r2
 801177c:	d901      	bls.n	8011782 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801177e:	2303      	movs	r3, #3
 8011780:	e006      	b.n	8011790 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	691b      	ldr	r3, [r3, #16]
 8011786:	f003 0320 	and.w	r3, r3, #32
 801178a:	2b20      	cmp	r3, #32
 801178c:	d0f0      	beq.n	8011770 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801178e:	2300      	movs	r3, #0
}
 8011790:	4618      	mov	r0, r3
 8011792:	3714      	adds	r7, #20
 8011794:	46bd      	mov	sp, r7
 8011796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179a:	4770      	bx	lr
 801179c:	00030d40 	.word	0x00030d40

080117a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80117a0:	b480      	push	{r7}
 80117a2:	b085      	sub	sp, #20
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80117a8:	2300      	movs	r3, #0
 80117aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	3301      	adds	r3, #1
 80117b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	4a11      	ldr	r2, [pc, #68]	; (80117fc <USB_FlushRxFifo+0x5c>)
 80117b6:	4293      	cmp	r3, r2
 80117b8:	d901      	bls.n	80117be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80117ba:	2303      	movs	r3, #3
 80117bc:	e018      	b.n	80117f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	691b      	ldr	r3, [r3, #16]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	daf2      	bge.n	80117ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80117c6:	2300      	movs	r3, #0
 80117c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	2210      	movs	r2, #16
 80117ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	3301      	adds	r3, #1
 80117d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	4a08      	ldr	r2, [pc, #32]	; (80117fc <USB_FlushRxFifo+0x5c>)
 80117da:	4293      	cmp	r3, r2
 80117dc:	d901      	bls.n	80117e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80117de:	2303      	movs	r3, #3
 80117e0:	e006      	b.n	80117f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	691b      	ldr	r3, [r3, #16]
 80117e6:	f003 0310 	and.w	r3, r3, #16
 80117ea:	2b10      	cmp	r3, #16
 80117ec:	d0f0      	beq.n	80117d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80117ee:	2300      	movs	r3, #0
}
 80117f0:	4618      	mov	r0, r3
 80117f2:	3714      	adds	r7, #20
 80117f4:	46bd      	mov	sp, r7
 80117f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fa:	4770      	bx	lr
 80117fc:	00030d40 	.word	0x00030d40

08011800 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011800:	b480      	push	{r7}
 8011802:	b085      	sub	sp, #20
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
 8011808:	460b      	mov	r3, r1
 801180a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011816:	681a      	ldr	r2, [r3, #0]
 8011818:	78fb      	ldrb	r3, [r7, #3]
 801181a:	68f9      	ldr	r1, [r7, #12]
 801181c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011820:	4313      	orrs	r3, r2
 8011822:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011824:	2300      	movs	r3, #0
}
 8011826:	4618      	mov	r0, r3
 8011828:	3714      	adds	r7, #20
 801182a:	46bd      	mov	sp, r7
 801182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011830:	4770      	bx	lr

08011832 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8011832:	b480      	push	{r7}
 8011834:	b087      	sub	sp, #28
 8011836:	af00      	add	r7, sp, #0
 8011838:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801183e:	693b      	ldr	r3, [r7, #16]
 8011840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011844:	689b      	ldr	r3, [r3, #8]
 8011846:	f003 0306 	and.w	r3, r3, #6
 801184a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d102      	bne.n	8011858 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8011852:	2300      	movs	r3, #0
 8011854:	75fb      	strb	r3, [r7, #23]
 8011856:	e00a      	b.n	801186e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	2b02      	cmp	r3, #2
 801185c:	d002      	beq.n	8011864 <USB_GetDevSpeed+0x32>
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	2b06      	cmp	r3, #6
 8011862:	d102      	bne.n	801186a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8011864:	2302      	movs	r3, #2
 8011866:	75fb      	strb	r3, [r7, #23]
 8011868:	e001      	b.n	801186e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801186a:	230f      	movs	r3, #15
 801186c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801186e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011870:	4618      	mov	r0, r3
 8011872:	371c      	adds	r7, #28
 8011874:	46bd      	mov	sp, r7
 8011876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187a:	4770      	bx	lr

0801187c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801187c:	b480      	push	{r7}
 801187e:	b085      	sub	sp, #20
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
 8011884:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801188a:	683b      	ldr	r3, [r7, #0]
 801188c:	781b      	ldrb	r3, [r3, #0]
 801188e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011890:	683b      	ldr	r3, [r7, #0]
 8011892:	785b      	ldrb	r3, [r3, #1]
 8011894:	2b01      	cmp	r3, #1
 8011896:	d139      	bne.n	801190c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801189e:	69da      	ldr	r2, [r3, #28]
 80118a0:	683b      	ldr	r3, [r7, #0]
 80118a2:	781b      	ldrb	r3, [r3, #0]
 80118a4:	f003 030f 	and.w	r3, r3, #15
 80118a8:	2101      	movs	r1, #1
 80118aa:	fa01 f303 	lsl.w	r3, r1, r3
 80118ae:	b29b      	uxth	r3, r3
 80118b0:	68f9      	ldr	r1, [r7, #12]
 80118b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80118b6:	4313      	orrs	r3, r2
 80118b8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80118ba:	68bb      	ldr	r3, [r7, #8]
 80118bc:	015a      	lsls	r2, r3, #5
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	4413      	add	r3, r2
 80118c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d153      	bne.n	8011978 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80118d0:	68bb      	ldr	r3, [r7, #8]
 80118d2:	015a      	lsls	r2, r3, #5
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	4413      	add	r3, r2
 80118d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118dc:	681a      	ldr	r2, [r3, #0]
 80118de:	683b      	ldr	r3, [r7, #0]
 80118e0:	689b      	ldr	r3, [r3, #8]
 80118e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80118e6:	683b      	ldr	r3, [r7, #0]
 80118e8:	791b      	ldrb	r3, [r3, #4]
 80118ea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80118ec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80118ee:	68bb      	ldr	r3, [r7, #8]
 80118f0:	059b      	lsls	r3, r3, #22
 80118f2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80118f4:	431a      	orrs	r2, r3
 80118f6:	68bb      	ldr	r3, [r7, #8]
 80118f8:	0159      	lsls	r1, r3, #5
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	440b      	add	r3, r1
 80118fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011902:	4619      	mov	r1, r3
 8011904:	4b20      	ldr	r3, [pc, #128]	; (8011988 <USB_ActivateEndpoint+0x10c>)
 8011906:	4313      	orrs	r3, r2
 8011908:	600b      	str	r3, [r1, #0]
 801190a:	e035      	b.n	8011978 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011912:	69da      	ldr	r2, [r3, #28]
 8011914:	683b      	ldr	r3, [r7, #0]
 8011916:	781b      	ldrb	r3, [r3, #0]
 8011918:	f003 030f 	and.w	r3, r3, #15
 801191c:	2101      	movs	r1, #1
 801191e:	fa01 f303 	lsl.w	r3, r1, r3
 8011922:	041b      	lsls	r3, r3, #16
 8011924:	68f9      	ldr	r1, [r7, #12]
 8011926:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801192a:	4313      	orrs	r3, r2
 801192c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	015a      	lsls	r2, r3, #5
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	4413      	add	r3, r2
 8011936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011940:	2b00      	cmp	r3, #0
 8011942:	d119      	bne.n	8011978 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011944:	68bb      	ldr	r3, [r7, #8]
 8011946:	015a      	lsls	r2, r3, #5
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	4413      	add	r3, r2
 801194c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011950:	681a      	ldr	r2, [r3, #0]
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	689b      	ldr	r3, [r3, #8]
 8011956:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801195a:	683b      	ldr	r3, [r7, #0]
 801195c:	791b      	ldrb	r3, [r3, #4]
 801195e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011960:	430b      	orrs	r3, r1
 8011962:	431a      	orrs	r2, r3
 8011964:	68bb      	ldr	r3, [r7, #8]
 8011966:	0159      	lsls	r1, r3, #5
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	440b      	add	r3, r1
 801196c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011970:	4619      	mov	r1, r3
 8011972:	4b05      	ldr	r3, [pc, #20]	; (8011988 <USB_ActivateEndpoint+0x10c>)
 8011974:	4313      	orrs	r3, r2
 8011976:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8011978:	2300      	movs	r3, #0
}
 801197a:	4618      	mov	r0, r3
 801197c:	3714      	adds	r7, #20
 801197e:	46bd      	mov	sp, r7
 8011980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011984:	4770      	bx	lr
 8011986:	bf00      	nop
 8011988:	10008000 	.word	0x10008000

0801198c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801198c:	b480      	push	{r7}
 801198e:	b085      	sub	sp, #20
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
 8011994:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801199a:	683b      	ldr	r3, [r7, #0]
 801199c:	781b      	ldrb	r3, [r3, #0]
 801199e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80119a0:	683b      	ldr	r3, [r7, #0]
 80119a2:	785b      	ldrb	r3, [r3, #1]
 80119a4:	2b01      	cmp	r3, #1
 80119a6:	d161      	bne.n	8011a6c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80119a8:	68bb      	ldr	r3, [r7, #8]
 80119aa:	015a      	lsls	r2, r3, #5
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	4413      	add	r3, r2
 80119b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80119ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80119be:	d11f      	bne.n	8011a00 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80119c0:	68bb      	ldr	r3, [r7, #8]
 80119c2:	015a      	lsls	r2, r3, #5
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	4413      	add	r3, r2
 80119c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	68ba      	ldr	r2, [r7, #8]
 80119d0:	0151      	lsls	r1, r2, #5
 80119d2:	68fa      	ldr	r2, [r7, #12]
 80119d4:	440a      	add	r2, r1
 80119d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80119da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80119de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80119e0:	68bb      	ldr	r3, [r7, #8]
 80119e2:	015a      	lsls	r2, r3, #5
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	4413      	add	r3, r2
 80119e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	68ba      	ldr	r2, [r7, #8]
 80119f0:	0151      	lsls	r1, r2, #5
 80119f2:	68fa      	ldr	r2, [r7, #12]
 80119f4:	440a      	add	r2, r1
 80119f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80119fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80119fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011a06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011a08:	683b      	ldr	r3, [r7, #0]
 8011a0a:	781b      	ldrb	r3, [r3, #0]
 8011a0c:	f003 030f 	and.w	r3, r3, #15
 8011a10:	2101      	movs	r1, #1
 8011a12:	fa01 f303 	lsl.w	r3, r1, r3
 8011a16:	b29b      	uxth	r3, r3
 8011a18:	43db      	mvns	r3, r3
 8011a1a:	68f9      	ldr	r1, [r7, #12]
 8011a1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011a20:	4013      	ands	r3, r2
 8011a22:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011a2a:	69da      	ldr	r2, [r3, #28]
 8011a2c:	683b      	ldr	r3, [r7, #0]
 8011a2e:	781b      	ldrb	r3, [r3, #0]
 8011a30:	f003 030f 	and.w	r3, r3, #15
 8011a34:	2101      	movs	r1, #1
 8011a36:	fa01 f303 	lsl.w	r3, r1, r3
 8011a3a:	b29b      	uxth	r3, r3
 8011a3c:	43db      	mvns	r3, r3
 8011a3e:	68f9      	ldr	r1, [r7, #12]
 8011a40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011a44:	4013      	ands	r3, r2
 8011a46:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8011a48:	68bb      	ldr	r3, [r7, #8]
 8011a4a:	015a      	lsls	r2, r3, #5
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	4413      	add	r3, r2
 8011a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a54:	681a      	ldr	r2, [r3, #0]
 8011a56:	68bb      	ldr	r3, [r7, #8]
 8011a58:	0159      	lsls	r1, r3, #5
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	440b      	add	r3, r1
 8011a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a62:	4619      	mov	r1, r3
 8011a64:	4b35      	ldr	r3, [pc, #212]	; (8011b3c <USB_DeactivateEndpoint+0x1b0>)
 8011a66:	4013      	ands	r3, r2
 8011a68:	600b      	str	r3, [r1, #0]
 8011a6a:	e060      	b.n	8011b2e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011a6c:	68bb      	ldr	r3, [r7, #8]
 8011a6e:	015a      	lsls	r2, r3, #5
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	4413      	add	r3, r2
 8011a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011a7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011a82:	d11f      	bne.n	8011ac4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011a84:	68bb      	ldr	r3, [r7, #8]
 8011a86:	015a      	lsls	r2, r3, #5
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	4413      	add	r3, r2
 8011a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	68ba      	ldr	r2, [r7, #8]
 8011a94:	0151      	lsls	r1, r2, #5
 8011a96:	68fa      	ldr	r2, [r7, #12]
 8011a98:	440a      	add	r2, r1
 8011a9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011aa2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8011aa4:	68bb      	ldr	r3, [r7, #8]
 8011aa6:	015a      	lsls	r2, r3, #5
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	4413      	add	r3, r2
 8011aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	68ba      	ldr	r2, [r7, #8]
 8011ab4:	0151      	lsls	r1, r2, #5
 8011ab6:	68fa      	ldr	r2, [r7, #12]
 8011ab8:	440a      	add	r2, r1
 8011aba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011abe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011ac2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011aca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011acc:	683b      	ldr	r3, [r7, #0]
 8011ace:	781b      	ldrb	r3, [r3, #0]
 8011ad0:	f003 030f 	and.w	r3, r3, #15
 8011ad4:	2101      	movs	r1, #1
 8011ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8011ada:	041b      	lsls	r3, r3, #16
 8011adc:	43db      	mvns	r3, r3
 8011ade:	68f9      	ldr	r1, [r7, #12]
 8011ae0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011ae4:	4013      	ands	r3, r2
 8011ae6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011aee:	69da      	ldr	r2, [r3, #28]
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	781b      	ldrb	r3, [r3, #0]
 8011af4:	f003 030f 	and.w	r3, r3, #15
 8011af8:	2101      	movs	r1, #1
 8011afa:	fa01 f303 	lsl.w	r3, r1, r3
 8011afe:	041b      	lsls	r3, r3, #16
 8011b00:	43db      	mvns	r3, r3
 8011b02:	68f9      	ldr	r1, [r7, #12]
 8011b04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011b08:	4013      	ands	r3, r2
 8011b0a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8011b0c:	68bb      	ldr	r3, [r7, #8]
 8011b0e:	015a      	lsls	r2, r3, #5
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	4413      	add	r3, r2
 8011b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b18:	681a      	ldr	r2, [r3, #0]
 8011b1a:	68bb      	ldr	r3, [r7, #8]
 8011b1c:	0159      	lsls	r1, r3, #5
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	440b      	add	r3, r1
 8011b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b26:	4619      	mov	r1, r3
 8011b28:	4b05      	ldr	r3, [pc, #20]	; (8011b40 <USB_DeactivateEndpoint+0x1b4>)
 8011b2a:	4013      	ands	r3, r2
 8011b2c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8011b2e:	2300      	movs	r3, #0
}
 8011b30:	4618      	mov	r0, r3
 8011b32:	3714      	adds	r7, #20
 8011b34:	46bd      	mov	sp, r7
 8011b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3a:	4770      	bx	lr
 8011b3c:	ec337800 	.word	0xec337800
 8011b40:	eff37800 	.word	0xeff37800

08011b44 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b08a      	sub	sp, #40	; 0x28
 8011b48:	af02      	add	r7, sp, #8
 8011b4a:	60f8      	str	r0, [r7, #12]
 8011b4c:	60b9      	str	r1, [r7, #8]
 8011b4e:	4613      	mov	r3, r2
 8011b50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8011b56:	68bb      	ldr	r3, [r7, #8]
 8011b58:	781b      	ldrb	r3, [r3, #0]
 8011b5a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011b5c:	68bb      	ldr	r3, [r7, #8]
 8011b5e:	785b      	ldrb	r3, [r3, #1]
 8011b60:	2b01      	cmp	r3, #1
 8011b62:	f040 8181 	bne.w	8011e68 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011b66:	68bb      	ldr	r3, [r7, #8]
 8011b68:	691b      	ldr	r3, [r3, #16]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d132      	bne.n	8011bd4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011b6e:	69bb      	ldr	r3, [r7, #24]
 8011b70:	015a      	lsls	r2, r3, #5
 8011b72:	69fb      	ldr	r3, [r7, #28]
 8011b74:	4413      	add	r3, r2
 8011b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b7a:	691a      	ldr	r2, [r3, #16]
 8011b7c:	69bb      	ldr	r3, [r7, #24]
 8011b7e:	0159      	lsls	r1, r3, #5
 8011b80:	69fb      	ldr	r3, [r7, #28]
 8011b82:	440b      	add	r3, r1
 8011b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b88:	4619      	mov	r1, r3
 8011b8a:	4ba5      	ldr	r3, [pc, #660]	; (8011e20 <USB_EPStartXfer+0x2dc>)
 8011b8c:	4013      	ands	r3, r2
 8011b8e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011b90:	69bb      	ldr	r3, [r7, #24]
 8011b92:	015a      	lsls	r2, r3, #5
 8011b94:	69fb      	ldr	r3, [r7, #28]
 8011b96:	4413      	add	r3, r2
 8011b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b9c:	691b      	ldr	r3, [r3, #16]
 8011b9e:	69ba      	ldr	r2, [r7, #24]
 8011ba0:	0151      	lsls	r1, r2, #5
 8011ba2:	69fa      	ldr	r2, [r7, #28]
 8011ba4:	440a      	add	r2, r1
 8011ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011baa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011bae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011bb0:	69bb      	ldr	r3, [r7, #24]
 8011bb2:	015a      	lsls	r2, r3, #5
 8011bb4:	69fb      	ldr	r3, [r7, #28]
 8011bb6:	4413      	add	r3, r2
 8011bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bbc:	691a      	ldr	r2, [r3, #16]
 8011bbe:	69bb      	ldr	r3, [r7, #24]
 8011bc0:	0159      	lsls	r1, r3, #5
 8011bc2:	69fb      	ldr	r3, [r7, #28]
 8011bc4:	440b      	add	r3, r1
 8011bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bca:	4619      	mov	r1, r3
 8011bcc:	4b95      	ldr	r3, [pc, #596]	; (8011e24 <USB_EPStartXfer+0x2e0>)
 8011bce:	4013      	ands	r3, r2
 8011bd0:	610b      	str	r3, [r1, #16]
 8011bd2:	e092      	b.n	8011cfa <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011bd4:	69bb      	ldr	r3, [r7, #24]
 8011bd6:	015a      	lsls	r2, r3, #5
 8011bd8:	69fb      	ldr	r3, [r7, #28]
 8011bda:	4413      	add	r3, r2
 8011bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011be0:	691a      	ldr	r2, [r3, #16]
 8011be2:	69bb      	ldr	r3, [r7, #24]
 8011be4:	0159      	lsls	r1, r3, #5
 8011be6:	69fb      	ldr	r3, [r7, #28]
 8011be8:	440b      	add	r3, r1
 8011bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bee:	4619      	mov	r1, r3
 8011bf0:	4b8c      	ldr	r3, [pc, #560]	; (8011e24 <USB_EPStartXfer+0x2e0>)
 8011bf2:	4013      	ands	r3, r2
 8011bf4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011bf6:	69bb      	ldr	r3, [r7, #24]
 8011bf8:	015a      	lsls	r2, r3, #5
 8011bfa:	69fb      	ldr	r3, [r7, #28]
 8011bfc:	4413      	add	r3, r2
 8011bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c02:	691a      	ldr	r2, [r3, #16]
 8011c04:	69bb      	ldr	r3, [r7, #24]
 8011c06:	0159      	lsls	r1, r3, #5
 8011c08:	69fb      	ldr	r3, [r7, #28]
 8011c0a:	440b      	add	r3, r1
 8011c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c10:	4619      	mov	r1, r3
 8011c12:	4b83      	ldr	r3, [pc, #524]	; (8011e20 <USB_EPStartXfer+0x2dc>)
 8011c14:	4013      	ands	r3, r2
 8011c16:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8011c18:	69bb      	ldr	r3, [r7, #24]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d11a      	bne.n	8011c54 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8011c1e:	68bb      	ldr	r3, [r7, #8]
 8011c20:	691a      	ldr	r2, [r3, #16]
 8011c22:	68bb      	ldr	r3, [r7, #8]
 8011c24:	689b      	ldr	r3, [r3, #8]
 8011c26:	429a      	cmp	r2, r3
 8011c28:	d903      	bls.n	8011c32 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8011c2a:	68bb      	ldr	r3, [r7, #8]
 8011c2c:	689a      	ldr	r2, [r3, #8]
 8011c2e:	68bb      	ldr	r3, [r7, #8]
 8011c30:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011c32:	69bb      	ldr	r3, [r7, #24]
 8011c34:	015a      	lsls	r2, r3, #5
 8011c36:	69fb      	ldr	r3, [r7, #28]
 8011c38:	4413      	add	r3, r2
 8011c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c3e:	691b      	ldr	r3, [r3, #16]
 8011c40:	69ba      	ldr	r2, [r7, #24]
 8011c42:	0151      	lsls	r1, r2, #5
 8011c44:	69fa      	ldr	r2, [r7, #28]
 8011c46:	440a      	add	r2, r1
 8011c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011c50:	6113      	str	r3, [r2, #16]
 8011c52:	e01b      	b.n	8011c8c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8011c54:	69bb      	ldr	r3, [r7, #24]
 8011c56:	015a      	lsls	r2, r3, #5
 8011c58:	69fb      	ldr	r3, [r7, #28]
 8011c5a:	4413      	add	r3, r2
 8011c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c60:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8011c62:	68bb      	ldr	r3, [r7, #8]
 8011c64:	6919      	ldr	r1, [r3, #16]
 8011c66:	68bb      	ldr	r3, [r7, #8]
 8011c68:	689b      	ldr	r3, [r3, #8]
 8011c6a:	440b      	add	r3, r1
 8011c6c:	1e59      	subs	r1, r3, #1
 8011c6e:	68bb      	ldr	r3, [r7, #8]
 8011c70:	689b      	ldr	r3, [r3, #8]
 8011c72:	fbb1 f3f3 	udiv	r3, r1, r3
 8011c76:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8011c78:	4b6b      	ldr	r3, [pc, #428]	; (8011e28 <USB_EPStartXfer+0x2e4>)
 8011c7a:	400b      	ands	r3, r1
 8011c7c:	69b9      	ldr	r1, [r7, #24]
 8011c7e:	0148      	lsls	r0, r1, #5
 8011c80:	69f9      	ldr	r1, [r7, #28]
 8011c82:	4401      	add	r1, r0
 8011c84:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011c88:	4313      	orrs	r3, r2
 8011c8a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011c8c:	69bb      	ldr	r3, [r7, #24]
 8011c8e:	015a      	lsls	r2, r3, #5
 8011c90:	69fb      	ldr	r3, [r7, #28]
 8011c92:	4413      	add	r3, r2
 8011c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c98:	691a      	ldr	r2, [r3, #16]
 8011c9a:	68bb      	ldr	r3, [r7, #8]
 8011c9c:	691b      	ldr	r3, [r3, #16]
 8011c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011ca2:	69b9      	ldr	r1, [r7, #24]
 8011ca4:	0148      	lsls	r0, r1, #5
 8011ca6:	69f9      	ldr	r1, [r7, #28]
 8011ca8:	4401      	add	r1, r0
 8011caa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011cae:	4313      	orrs	r3, r2
 8011cb0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8011cb2:	68bb      	ldr	r3, [r7, #8]
 8011cb4:	791b      	ldrb	r3, [r3, #4]
 8011cb6:	2b01      	cmp	r3, #1
 8011cb8:	d11f      	bne.n	8011cfa <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8011cba:	69bb      	ldr	r3, [r7, #24]
 8011cbc:	015a      	lsls	r2, r3, #5
 8011cbe:	69fb      	ldr	r3, [r7, #28]
 8011cc0:	4413      	add	r3, r2
 8011cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011cc6:	691b      	ldr	r3, [r3, #16]
 8011cc8:	69ba      	ldr	r2, [r7, #24]
 8011cca:	0151      	lsls	r1, r2, #5
 8011ccc:	69fa      	ldr	r2, [r7, #28]
 8011cce:	440a      	add	r2, r1
 8011cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011cd4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8011cd8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8011cda:	69bb      	ldr	r3, [r7, #24]
 8011cdc:	015a      	lsls	r2, r3, #5
 8011cde:	69fb      	ldr	r3, [r7, #28]
 8011ce0:	4413      	add	r3, r2
 8011ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ce6:	691b      	ldr	r3, [r3, #16]
 8011ce8:	69ba      	ldr	r2, [r7, #24]
 8011cea:	0151      	lsls	r1, r2, #5
 8011cec:	69fa      	ldr	r2, [r7, #28]
 8011cee:	440a      	add	r2, r1
 8011cf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011cf4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011cf8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8011cfa:	79fb      	ldrb	r3, [r7, #7]
 8011cfc:	2b01      	cmp	r3, #1
 8011cfe:	d14b      	bne.n	8011d98 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011d00:	68bb      	ldr	r3, [r7, #8]
 8011d02:	69db      	ldr	r3, [r3, #28]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d009      	beq.n	8011d1c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011d08:	69bb      	ldr	r3, [r7, #24]
 8011d0a:	015a      	lsls	r2, r3, #5
 8011d0c:	69fb      	ldr	r3, [r7, #28]
 8011d0e:	4413      	add	r3, r2
 8011d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d14:	461a      	mov	r2, r3
 8011d16:	68bb      	ldr	r3, [r7, #8]
 8011d18:	69db      	ldr	r3, [r3, #28]
 8011d1a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8011d1c:	68bb      	ldr	r3, [r7, #8]
 8011d1e:	791b      	ldrb	r3, [r3, #4]
 8011d20:	2b01      	cmp	r3, #1
 8011d22:	d128      	bne.n	8011d76 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011d24:	69fb      	ldr	r3, [r7, #28]
 8011d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d2a:	689b      	ldr	r3, [r3, #8]
 8011d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d110      	bne.n	8011d56 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011d34:	69bb      	ldr	r3, [r7, #24]
 8011d36:	015a      	lsls	r2, r3, #5
 8011d38:	69fb      	ldr	r3, [r7, #28]
 8011d3a:	4413      	add	r3, r2
 8011d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	69ba      	ldr	r2, [r7, #24]
 8011d44:	0151      	lsls	r1, r2, #5
 8011d46:	69fa      	ldr	r2, [r7, #28]
 8011d48:	440a      	add	r2, r1
 8011d4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011d52:	6013      	str	r3, [r2, #0]
 8011d54:	e00f      	b.n	8011d76 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011d56:	69bb      	ldr	r3, [r7, #24]
 8011d58:	015a      	lsls	r2, r3, #5
 8011d5a:	69fb      	ldr	r3, [r7, #28]
 8011d5c:	4413      	add	r3, r2
 8011d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	69ba      	ldr	r2, [r7, #24]
 8011d66:	0151      	lsls	r1, r2, #5
 8011d68:	69fa      	ldr	r2, [r7, #28]
 8011d6a:	440a      	add	r2, r1
 8011d6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011d74:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011d76:	69bb      	ldr	r3, [r7, #24]
 8011d78:	015a      	lsls	r2, r3, #5
 8011d7a:	69fb      	ldr	r3, [r7, #28]
 8011d7c:	4413      	add	r3, r2
 8011d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	69ba      	ldr	r2, [r7, #24]
 8011d86:	0151      	lsls	r1, r2, #5
 8011d88:	69fa      	ldr	r2, [r7, #28]
 8011d8a:	440a      	add	r2, r1
 8011d8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011d94:	6013      	str	r3, [r2, #0]
 8011d96:	e16a      	b.n	801206e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011d98:	69bb      	ldr	r3, [r7, #24]
 8011d9a:	015a      	lsls	r2, r3, #5
 8011d9c:	69fb      	ldr	r3, [r7, #28]
 8011d9e:	4413      	add	r3, r2
 8011da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	69ba      	ldr	r2, [r7, #24]
 8011da8:	0151      	lsls	r1, r2, #5
 8011daa:	69fa      	ldr	r2, [r7, #28]
 8011dac:	440a      	add	r2, r1
 8011dae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011db2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011db6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011db8:	68bb      	ldr	r3, [r7, #8]
 8011dba:	791b      	ldrb	r3, [r3, #4]
 8011dbc:	2b01      	cmp	r3, #1
 8011dbe:	d015      	beq.n	8011dec <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8011dc0:	68bb      	ldr	r3, [r7, #8]
 8011dc2:	691b      	ldr	r3, [r3, #16]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	f000 8152 	beq.w	801206e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011dca:	69fb      	ldr	r3, [r7, #28]
 8011dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011dd2:	68bb      	ldr	r3, [r7, #8]
 8011dd4:	781b      	ldrb	r3, [r3, #0]
 8011dd6:	f003 030f 	and.w	r3, r3, #15
 8011dda:	2101      	movs	r1, #1
 8011ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8011de0:	69f9      	ldr	r1, [r7, #28]
 8011de2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011de6:	4313      	orrs	r3, r2
 8011de8:	634b      	str	r3, [r1, #52]	; 0x34
 8011dea:	e140      	b.n	801206e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011dec:	69fb      	ldr	r3, [r7, #28]
 8011dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011df2:	689b      	ldr	r3, [r3, #8]
 8011df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d117      	bne.n	8011e2c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011dfc:	69bb      	ldr	r3, [r7, #24]
 8011dfe:	015a      	lsls	r2, r3, #5
 8011e00:	69fb      	ldr	r3, [r7, #28]
 8011e02:	4413      	add	r3, r2
 8011e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	69ba      	ldr	r2, [r7, #24]
 8011e0c:	0151      	lsls	r1, r2, #5
 8011e0e:	69fa      	ldr	r2, [r7, #28]
 8011e10:	440a      	add	r2, r1
 8011e12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011e1a:	6013      	str	r3, [r2, #0]
 8011e1c:	e016      	b.n	8011e4c <USB_EPStartXfer+0x308>
 8011e1e:	bf00      	nop
 8011e20:	e007ffff 	.word	0xe007ffff
 8011e24:	fff80000 	.word	0xfff80000
 8011e28:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011e2c:	69bb      	ldr	r3, [r7, #24]
 8011e2e:	015a      	lsls	r2, r3, #5
 8011e30:	69fb      	ldr	r3, [r7, #28]
 8011e32:	4413      	add	r3, r2
 8011e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	69ba      	ldr	r2, [r7, #24]
 8011e3c:	0151      	lsls	r1, r2, #5
 8011e3e:	69fa      	ldr	r2, [r7, #28]
 8011e40:	440a      	add	r2, r1
 8011e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011e4a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8011e4c:	68bb      	ldr	r3, [r7, #8]
 8011e4e:	68d9      	ldr	r1, [r3, #12]
 8011e50:	68bb      	ldr	r3, [r7, #8]
 8011e52:	781a      	ldrb	r2, [r3, #0]
 8011e54:	68bb      	ldr	r3, [r7, #8]
 8011e56:	691b      	ldr	r3, [r3, #16]
 8011e58:	b298      	uxth	r0, r3
 8011e5a:	79fb      	ldrb	r3, [r7, #7]
 8011e5c:	9300      	str	r3, [sp, #0]
 8011e5e:	4603      	mov	r3, r0
 8011e60:	68f8      	ldr	r0, [r7, #12]
 8011e62:	f000 f9b9 	bl	80121d8 <USB_WritePacket>
 8011e66:	e102      	b.n	801206e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011e68:	69bb      	ldr	r3, [r7, #24]
 8011e6a:	015a      	lsls	r2, r3, #5
 8011e6c:	69fb      	ldr	r3, [r7, #28]
 8011e6e:	4413      	add	r3, r2
 8011e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e74:	691a      	ldr	r2, [r3, #16]
 8011e76:	69bb      	ldr	r3, [r7, #24]
 8011e78:	0159      	lsls	r1, r3, #5
 8011e7a:	69fb      	ldr	r3, [r7, #28]
 8011e7c:	440b      	add	r3, r1
 8011e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e82:	4619      	mov	r1, r3
 8011e84:	4b7c      	ldr	r3, [pc, #496]	; (8012078 <USB_EPStartXfer+0x534>)
 8011e86:	4013      	ands	r3, r2
 8011e88:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011e8a:	69bb      	ldr	r3, [r7, #24]
 8011e8c:	015a      	lsls	r2, r3, #5
 8011e8e:	69fb      	ldr	r3, [r7, #28]
 8011e90:	4413      	add	r3, r2
 8011e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e96:	691a      	ldr	r2, [r3, #16]
 8011e98:	69bb      	ldr	r3, [r7, #24]
 8011e9a:	0159      	lsls	r1, r3, #5
 8011e9c:	69fb      	ldr	r3, [r7, #28]
 8011e9e:	440b      	add	r3, r1
 8011ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ea4:	4619      	mov	r1, r3
 8011ea6:	4b75      	ldr	r3, [pc, #468]	; (801207c <USB_EPStartXfer+0x538>)
 8011ea8:	4013      	ands	r3, r2
 8011eaa:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8011eac:	69bb      	ldr	r3, [r7, #24]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d12f      	bne.n	8011f12 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8011eb2:	68bb      	ldr	r3, [r7, #8]
 8011eb4:	691b      	ldr	r3, [r3, #16]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d003      	beq.n	8011ec2 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8011eba:	68bb      	ldr	r3, [r7, #8]
 8011ebc:	689a      	ldr	r2, [r3, #8]
 8011ebe:	68bb      	ldr	r3, [r7, #8]
 8011ec0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8011ec2:	68bb      	ldr	r3, [r7, #8]
 8011ec4:	689a      	ldr	r2, [r3, #8]
 8011ec6:	68bb      	ldr	r3, [r7, #8]
 8011ec8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8011eca:	69bb      	ldr	r3, [r7, #24]
 8011ecc:	015a      	lsls	r2, r3, #5
 8011ece:	69fb      	ldr	r3, [r7, #28]
 8011ed0:	4413      	add	r3, r2
 8011ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ed6:	691a      	ldr	r2, [r3, #16]
 8011ed8:	68bb      	ldr	r3, [r7, #8]
 8011eda:	6a1b      	ldr	r3, [r3, #32]
 8011edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011ee0:	69b9      	ldr	r1, [r7, #24]
 8011ee2:	0148      	lsls	r0, r1, #5
 8011ee4:	69f9      	ldr	r1, [r7, #28]
 8011ee6:	4401      	add	r1, r0
 8011ee8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011eec:	4313      	orrs	r3, r2
 8011eee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011ef0:	69bb      	ldr	r3, [r7, #24]
 8011ef2:	015a      	lsls	r2, r3, #5
 8011ef4:	69fb      	ldr	r3, [r7, #28]
 8011ef6:	4413      	add	r3, r2
 8011ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011efc:	691b      	ldr	r3, [r3, #16]
 8011efe:	69ba      	ldr	r2, [r7, #24]
 8011f00:	0151      	lsls	r1, r2, #5
 8011f02:	69fa      	ldr	r2, [r7, #28]
 8011f04:	440a      	add	r2, r1
 8011f06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011f0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011f0e:	6113      	str	r3, [r2, #16]
 8011f10:	e05f      	b.n	8011fd2 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8011f12:	68bb      	ldr	r3, [r7, #8]
 8011f14:	691b      	ldr	r3, [r3, #16]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d123      	bne.n	8011f62 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011f1a:	69bb      	ldr	r3, [r7, #24]
 8011f1c:	015a      	lsls	r2, r3, #5
 8011f1e:	69fb      	ldr	r3, [r7, #28]
 8011f20:	4413      	add	r3, r2
 8011f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f26:	691a      	ldr	r2, [r3, #16]
 8011f28:	68bb      	ldr	r3, [r7, #8]
 8011f2a:	689b      	ldr	r3, [r3, #8]
 8011f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011f30:	69b9      	ldr	r1, [r7, #24]
 8011f32:	0148      	lsls	r0, r1, #5
 8011f34:	69f9      	ldr	r1, [r7, #28]
 8011f36:	4401      	add	r1, r0
 8011f38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011f3c:	4313      	orrs	r3, r2
 8011f3e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011f40:	69bb      	ldr	r3, [r7, #24]
 8011f42:	015a      	lsls	r2, r3, #5
 8011f44:	69fb      	ldr	r3, [r7, #28]
 8011f46:	4413      	add	r3, r2
 8011f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f4c:	691b      	ldr	r3, [r3, #16]
 8011f4e:	69ba      	ldr	r2, [r7, #24]
 8011f50:	0151      	lsls	r1, r2, #5
 8011f52:	69fa      	ldr	r2, [r7, #28]
 8011f54:	440a      	add	r2, r1
 8011f56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011f5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011f5e:	6113      	str	r3, [r2, #16]
 8011f60:	e037      	b.n	8011fd2 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011f62:	68bb      	ldr	r3, [r7, #8]
 8011f64:	691a      	ldr	r2, [r3, #16]
 8011f66:	68bb      	ldr	r3, [r7, #8]
 8011f68:	689b      	ldr	r3, [r3, #8]
 8011f6a:	4413      	add	r3, r2
 8011f6c:	1e5a      	subs	r2, r3, #1
 8011f6e:	68bb      	ldr	r3, [r7, #8]
 8011f70:	689b      	ldr	r3, [r3, #8]
 8011f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8011f76:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8011f78:	68bb      	ldr	r3, [r7, #8]
 8011f7a:	689b      	ldr	r3, [r3, #8]
 8011f7c:	8afa      	ldrh	r2, [r7, #22]
 8011f7e:	fb03 f202 	mul.w	r2, r3, r2
 8011f82:	68bb      	ldr	r3, [r7, #8]
 8011f84:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011f86:	69bb      	ldr	r3, [r7, #24]
 8011f88:	015a      	lsls	r2, r3, #5
 8011f8a:	69fb      	ldr	r3, [r7, #28]
 8011f8c:	4413      	add	r3, r2
 8011f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f92:	691a      	ldr	r2, [r3, #16]
 8011f94:	8afb      	ldrh	r3, [r7, #22]
 8011f96:	04d9      	lsls	r1, r3, #19
 8011f98:	4b39      	ldr	r3, [pc, #228]	; (8012080 <USB_EPStartXfer+0x53c>)
 8011f9a:	400b      	ands	r3, r1
 8011f9c:	69b9      	ldr	r1, [r7, #24]
 8011f9e:	0148      	lsls	r0, r1, #5
 8011fa0:	69f9      	ldr	r1, [r7, #28]
 8011fa2:	4401      	add	r1, r0
 8011fa4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011fa8:	4313      	orrs	r3, r2
 8011faa:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8011fac:	69bb      	ldr	r3, [r7, #24]
 8011fae:	015a      	lsls	r2, r3, #5
 8011fb0:	69fb      	ldr	r3, [r7, #28]
 8011fb2:	4413      	add	r3, r2
 8011fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fb8:	691a      	ldr	r2, [r3, #16]
 8011fba:	68bb      	ldr	r3, [r7, #8]
 8011fbc:	6a1b      	ldr	r3, [r3, #32]
 8011fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011fc2:	69b9      	ldr	r1, [r7, #24]
 8011fc4:	0148      	lsls	r0, r1, #5
 8011fc6:	69f9      	ldr	r1, [r7, #28]
 8011fc8:	4401      	add	r1, r0
 8011fca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011fce:	4313      	orrs	r3, r2
 8011fd0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8011fd2:	79fb      	ldrb	r3, [r7, #7]
 8011fd4:	2b01      	cmp	r3, #1
 8011fd6:	d10d      	bne.n	8011ff4 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011fd8:	68bb      	ldr	r3, [r7, #8]
 8011fda:	68db      	ldr	r3, [r3, #12]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d009      	beq.n	8011ff4 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011fe0:	68bb      	ldr	r3, [r7, #8]
 8011fe2:	68d9      	ldr	r1, [r3, #12]
 8011fe4:	69bb      	ldr	r3, [r7, #24]
 8011fe6:	015a      	lsls	r2, r3, #5
 8011fe8:	69fb      	ldr	r3, [r7, #28]
 8011fea:	4413      	add	r3, r2
 8011fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ff0:	460a      	mov	r2, r1
 8011ff2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8011ff4:	68bb      	ldr	r3, [r7, #8]
 8011ff6:	791b      	ldrb	r3, [r3, #4]
 8011ff8:	2b01      	cmp	r3, #1
 8011ffa:	d128      	bne.n	801204e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011ffc:	69fb      	ldr	r3, [r7, #28]
 8011ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012002:	689b      	ldr	r3, [r3, #8]
 8012004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012008:	2b00      	cmp	r3, #0
 801200a:	d110      	bne.n	801202e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801200c:	69bb      	ldr	r3, [r7, #24]
 801200e:	015a      	lsls	r2, r3, #5
 8012010:	69fb      	ldr	r3, [r7, #28]
 8012012:	4413      	add	r3, r2
 8012014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	69ba      	ldr	r2, [r7, #24]
 801201c:	0151      	lsls	r1, r2, #5
 801201e:	69fa      	ldr	r2, [r7, #28]
 8012020:	440a      	add	r2, r1
 8012022:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012026:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801202a:	6013      	str	r3, [r2, #0]
 801202c:	e00f      	b.n	801204e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801202e:	69bb      	ldr	r3, [r7, #24]
 8012030:	015a      	lsls	r2, r3, #5
 8012032:	69fb      	ldr	r3, [r7, #28]
 8012034:	4413      	add	r3, r2
 8012036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	69ba      	ldr	r2, [r7, #24]
 801203e:	0151      	lsls	r1, r2, #5
 8012040:	69fa      	ldr	r2, [r7, #28]
 8012042:	440a      	add	r2, r1
 8012044:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801204c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801204e:	69bb      	ldr	r3, [r7, #24]
 8012050:	015a      	lsls	r2, r3, #5
 8012052:	69fb      	ldr	r3, [r7, #28]
 8012054:	4413      	add	r3, r2
 8012056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	69ba      	ldr	r2, [r7, #24]
 801205e:	0151      	lsls	r1, r2, #5
 8012060:	69fa      	ldr	r2, [r7, #28]
 8012062:	440a      	add	r2, r1
 8012064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012068:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801206c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801206e:	2300      	movs	r3, #0
}
 8012070:	4618      	mov	r0, r3
 8012072:	3720      	adds	r7, #32
 8012074:	46bd      	mov	sp, r7
 8012076:	bd80      	pop	{r7, pc}
 8012078:	fff80000 	.word	0xfff80000
 801207c:	e007ffff 	.word	0xe007ffff
 8012080:	1ff80000 	.word	0x1ff80000

08012084 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012084:	b480      	push	{r7}
 8012086:	b087      	sub	sp, #28
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
 801208c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801208e:	2300      	movs	r3, #0
 8012090:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8012092:	2300      	movs	r3, #0
 8012094:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801209a:	683b      	ldr	r3, [r7, #0]
 801209c:	785b      	ldrb	r3, [r3, #1]
 801209e:	2b01      	cmp	r3, #1
 80120a0:	d14a      	bne.n	8012138 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80120a2:	683b      	ldr	r3, [r7, #0]
 80120a4:	781b      	ldrb	r3, [r3, #0]
 80120a6:	015a      	lsls	r2, r3, #5
 80120a8:	693b      	ldr	r3, [r7, #16]
 80120aa:	4413      	add	r3, r2
 80120ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80120b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80120ba:	f040 8086 	bne.w	80121ca <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80120be:	683b      	ldr	r3, [r7, #0]
 80120c0:	781b      	ldrb	r3, [r3, #0]
 80120c2:	015a      	lsls	r2, r3, #5
 80120c4:	693b      	ldr	r3, [r7, #16]
 80120c6:	4413      	add	r3, r2
 80120c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	683a      	ldr	r2, [r7, #0]
 80120d0:	7812      	ldrb	r2, [r2, #0]
 80120d2:	0151      	lsls	r1, r2, #5
 80120d4:	693a      	ldr	r2, [r7, #16]
 80120d6:	440a      	add	r2, r1
 80120d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80120dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80120e0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80120e2:	683b      	ldr	r3, [r7, #0]
 80120e4:	781b      	ldrb	r3, [r3, #0]
 80120e6:	015a      	lsls	r2, r3, #5
 80120e8:	693b      	ldr	r3, [r7, #16]
 80120ea:	4413      	add	r3, r2
 80120ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	683a      	ldr	r2, [r7, #0]
 80120f4:	7812      	ldrb	r2, [r2, #0]
 80120f6:	0151      	lsls	r1, r2, #5
 80120f8:	693a      	ldr	r2, [r7, #16]
 80120fa:	440a      	add	r2, r1
 80120fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012100:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012104:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	3301      	adds	r3, #1
 801210a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	f242 7210 	movw	r2, #10000	; 0x2710
 8012112:	4293      	cmp	r3, r2
 8012114:	d902      	bls.n	801211c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8012116:	2301      	movs	r3, #1
 8012118:	75fb      	strb	r3, [r7, #23]
          break;
 801211a:	e056      	b.n	80121ca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801211c:	683b      	ldr	r3, [r7, #0]
 801211e:	781b      	ldrb	r3, [r3, #0]
 8012120:	015a      	lsls	r2, r3, #5
 8012122:	693b      	ldr	r3, [r7, #16]
 8012124:	4413      	add	r3, r2
 8012126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012130:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012134:	d0e7      	beq.n	8012106 <USB_EPStopXfer+0x82>
 8012136:	e048      	b.n	80121ca <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012138:	683b      	ldr	r3, [r7, #0]
 801213a:	781b      	ldrb	r3, [r3, #0]
 801213c:	015a      	lsls	r2, r3, #5
 801213e:	693b      	ldr	r3, [r7, #16]
 8012140:	4413      	add	r3, r2
 8012142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801214c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012150:	d13b      	bne.n	80121ca <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8012152:	683b      	ldr	r3, [r7, #0]
 8012154:	781b      	ldrb	r3, [r3, #0]
 8012156:	015a      	lsls	r2, r3, #5
 8012158:	693b      	ldr	r3, [r7, #16]
 801215a:	4413      	add	r3, r2
 801215c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	683a      	ldr	r2, [r7, #0]
 8012164:	7812      	ldrb	r2, [r2, #0]
 8012166:	0151      	lsls	r1, r2, #5
 8012168:	693a      	ldr	r2, [r7, #16]
 801216a:	440a      	add	r2, r1
 801216c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012170:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012174:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	781b      	ldrb	r3, [r3, #0]
 801217a:	015a      	lsls	r2, r3, #5
 801217c:	693b      	ldr	r3, [r7, #16]
 801217e:	4413      	add	r3, r2
 8012180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	683a      	ldr	r2, [r7, #0]
 8012188:	7812      	ldrb	r2, [r2, #0]
 801218a:	0151      	lsls	r1, r2, #5
 801218c:	693a      	ldr	r2, [r7, #16]
 801218e:	440a      	add	r2, r1
 8012190:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012194:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012198:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	3301      	adds	r3, #1
 801219e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80121a6:	4293      	cmp	r3, r2
 80121a8:	d902      	bls.n	80121b0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80121aa:	2301      	movs	r3, #1
 80121ac:	75fb      	strb	r3, [r7, #23]
          break;
 80121ae:	e00c      	b.n	80121ca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80121b0:	683b      	ldr	r3, [r7, #0]
 80121b2:	781b      	ldrb	r3, [r3, #0]
 80121b4:	015a      	lsls	r2, r3, #5
 80121b6:	693b      	ldr	r3, [r7, #16]
 80121b8:	4413      	add	r3, r2
 80121ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80121c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80121c8:	d0e7      	beq.n	801219a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80121ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80121cc:	4618      	mov	r0, r3
 80121ce:	371c      	adds	r7, #28
 80121d0:	46bd      	mov	sp, r7
 80121d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d6:	4770      	bx	lr

080121d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80121d8:	b480      	push	{r7}
 80121da:	b089      	sub	sp, #36	; 0x24
 80121dc:	af00      	add	r7, sp, #0
 80121de:	60f8      	str	r0, [r7, #12]
 80121e0:	60b9      	str	r1, [r7, #8]
 80121e2:	4611      	mov	r1, r2
 80121e4:	461a      	mov	r2, r3
 80121e6:	460b      	mov	r3, r1
 80121e8:	71fb      	strb	r3, [r7, #7]
 80121ea:	4613      	mov	r3, r2
 80121ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80121f2:	68bb      	ldr	r3, [r7, #8]
 80121f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80121f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d123      	bne.n	8012246 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80121fe:	88bb      	ldrh	r3, [r7, #4]
 8012200:	3303      	adds	r3, #3
 8012202:	089b      	lsrs	r3, r3, #2
 8012204:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012206:	2300      	movs	r3, #0
 8012208:	61bb      	str	r3, [r7, #24]
 801220a:	e018      	b.n	801223e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801220c:	79fb      	ldrb	r3, [r7, #7]
 801220e:	031a      	lsls	r2, r3, #12
 8012210:	697b      	ldr	r3, [r7, #20]
 8012212:	4413      	add	r3, r2
 8012214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012218:	461a      	mov	r2, r3
 801221a:	69fb      	ldr	r3, [r7, #28]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012220:	69fb      	ldr	r3, [r7, #28]
 8012222:	3301      	adds	r3, #1
 8012224:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012226:	69fb      	ldr	r3, [r7, #28]
 8012228:	3301      	adds	r3, #1
 801222a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801222c:	69fb      	ldr	r3, [r7, #28]
 801222e:	3301      	adds	r3, #1
 8012230:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012232:	69fb      	ldr	r3, [r7, #28]
 8012234:	3301      	adds	r3, #1
 8012236:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012238:	69bb      	ldr	r3, [r7, #24]
 801223a:	3301      	adds	r3, #1
 801223c:	61bb      	str	r3, [r7, #24]
 801223e:	69ba      	ldr	r2, [r7, #24]
 8012240:	693b      	ldr	r3, [r7, #16]
 8012242:	429a      	cmp	r2, r3
 8012244:	d3e2      	bcc.n	801220c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012246:	2300      	movs	r3, #0
}
 8012248:	4618      	mov	r0, r3
 801224a:	3724      	adds	r7, #36	; 0x24
 801224c:	46bd      	mov	sp, r7
 801224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012252:	4770      	bx	lr

08012254 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012254:	b480      	push	{r7}
 8012256:	b08b      	sub	sp, #44	; 0x2c
 8012258:	af00      	add	r7, sp, #0
 801225a:	60f8      	str	r0, [r7, #12]
 801225c:	60b9      	str	r1, [r7, #8]
 801225e:	4613      	mov	r3, r2
 8012260:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8012266:	68bb      	ldr	r3, [r7, #8]
 8012268:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801226a:	88fb      	ldrh	r3, [r7, #6]
 801226c:	089b      	lsrs	r3, r3, #2
 801226e:	b29b      	uxth	r3, r3
 8012270:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8012272:	88fb      	ldrh	r3, [r7, #6]
 8012274:	f003 0303 	and.w	r3, r3, #3
 8012278:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801227a:	2300      	movs	r3, #0
 801227c:	623b      	str	r3, [r7, #32]
 801227e:	e014      	b.n	80122aa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012280:	69bb      	ldr	r3, [r7, #24]
 8012282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012286:	681a      	ldr	r2, [r3, #0]
 8012288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801228a:	601a      	str	r2, [r3, #0]
    pDest++;
 801228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801228e:	3301      	adds	r3, #1
 8012290:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012294:	3301      	adds	r3, #1
 8012296:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801229a:	3301      	adds	r3, #1
 801229c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122a0:	3301      	adds	r3, #1
 80122a2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80122a4:	6a3b      	ldr	r3, [r7, #32]
 80122a6:	3301      	adds	r3, #1
 80122a8:	623b      	str	r3, [r7, #32]
 80122aa:	6a3a      	ldr	r2, [r7, #32]
 80122ac:	697b      	ldr	r3, [r7, #20]
 80122ae:	429a      	cmp	r2, r3
 80122b0:	d3e6      	bcc.n	8012280 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80122b2:	8bfb      	ldrh	r3, [r7, #30]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d01e      	beq.n	80122f6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80122b8:	2300      	movs	r3, #0
 80122ba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80122bc:	69bb      	ldr	r3, [r7, #24]
 80122be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80122c2:	461a      	mov	r2, r3
 80122c4:	f107 0310 	add.w	r3, r7, #16
 80122c8:	6812      	ldr	r2, [r2, #0]
 80122ca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80122cc:	693a      	ldr	r2, [r7, #16]
 80122ce:	6a3b      	ldr	r3, [r7, #32]
 80122d0:	b2db      	uxtb	r3, r3
 80122d2:	00db      	lsls	r3, r3, #3
 80122d4:	fa22 f303 	lsr.w	r3, r2, r3
 80122d8:	b2da      	uxtb	r2, r3
 80122da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122dc:	701a      	strb	r2, [r3, #0]
      i++;
 80122de:	6a3b      	ldr	r3, [r7, #32]
 80122e0:	3301      	adds	r3, #1
 80122e2:	623b      	str	r3, [r7, #32]
      pDest++;
 80122e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122e6:	3301      	adds	r3, #1
 80122e8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80122ea:	8bfb      	ldrh	r3, [r7, #30]
 80122ec:	3b01      	subs	r3, #1
 80122ee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80122f0:	8bfb      	ldrh	r3, [r7, #30]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d1ea      	bne.n	80122cc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80122f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80122f8:	4618      	mov	r0, r3
 80122fa:	372c      	adds	r7, #44	; 0x2c
 80122fc:	46bd      	mov	sp, r7
 80122fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012302:	4770      	bx	lr

08012304 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012304:	b480      	push	{r7}
 8012306:	b085      	sub	sp, #20
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]
 801230c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012312:	683b      	ldr	r3, [r7, #0]
 8012314:	781b      	ldrb	r3, [r3, #0]
 8012316:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	785b      	ldrb	r3, [r3, #1]
 801231c:	2b01      	cmp	r3, #1
 801231e:	d12c      	bne.n	801237a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012320:	68bb      	ldr	r3, [r7, #8]
 8012322:	015a      	lsls	r2, r3, #5
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	4413      	add	r3, r2
 8012328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	2b00      	cmp	r3, #0
 8012330:	db12      	blt.n	8012358 <USB_EPSetStall+0x54>
 8012332:	68bb      	ldr	r3, [r7, #8]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d00f      	beq.n	8012358 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8012338:	68bb      	ldr	r3, [r7, #8]
 801233a:	015a      	lsls	r2, r3, #5
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	4413      	add	r3, r2
 8012340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	68ba      	ldr	r2, [r7, #8]
 8012348:	0151      	lsls	r1, r2, #5
 801234a:	68fa      	ldr	r2, [r7, #12]
 801234c:	440a      	add	r2, r1
 801234e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012352:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012356:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012358:	68bb      	ldr	r3, [r7, #8]
 801235a:	015a      	lsls	r2, r3, #5
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	4413      	add	r3, r2
 8012360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	68ba      	ldr	r2, [r7, #8]
 8012368:	0151      	lsls	r1, r2, #5
 801236a:	68fa      	ldr	r2, [r7, #12]
 801236c:	440a      	add	r2, r1
 801236e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012372:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012376:	6013      	str	r3, [r2, #0]
 8012378:	e02b      	b.n	80123d2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801237a:	68bb      	ldr	r3, [r7, #8]
 801237c:	015a      	lsls	r2, r3, #5
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	4413      	add	r3, r2
 8012382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	2b00      	cmp	r3, #0
 801238a:	db12      	blt.n	80123b2 <USB_EPSetStall+0xae>
 801238c:	68bb      	ldr	r3, [r7, #8]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d00f      	beq.n	80123b2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8012392:	68bb      	ldr	r3, [r7, #8]
 8012394:	015a      	lsls	r2, r3, #5
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	4413      	add	r3, r2
 801239a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	68ba      	ldr	r2, [r7, #8]
 80123a2:	0151      	lsls	r1, r2, #5
 80123a4:	68fa      	ldr	r2, [r7, #12]
 80123a6:	440a      	add	r2, r1
 80123a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80123ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80123b0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80123b2:	68bb      	ldr	r3, [r7, #8]
 80123b4:	015a      	lsls	r2, r3, #5
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	4413      	add	r3, r2
 80123ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	68ba      	ldr	r2, [r7, #8]
 80123c2:	0151      	lsls	r1, r2, #5
 80123c4:	68fa      	ldr	r2, [r7, #12]
 80123c6:	440a      	add	r2, r1
 80123c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80123cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80123d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80123d2:	2300      	movs	r3, #0
}
 80123d4:	4618      	mov	r0, r3
 80123d6:	3714      	adds	r7, #20
 80123d8:	46bd      	mov	sp, r7
 80123da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123de:	4770      	bx	lr

080123e0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80123e0:	b480      	push	{r7}
 80123e2:	b085      	sub	sp, #20
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	6078      	str	r0, [r7, #4]
 80123e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80123ee:	683b      	ldr	r3, [r7, #0]
 80123f0:	781b      	ldrb	r3, [r3, #0]
 80123f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80123f4:	683b      	ldr	r3, [r7, #0]
 80123f6:	785b      	ldrb	r3, [r3, #1]
 80123f8:	2b01      	cmp	r3, #1
 80123fa:	d128      	bne.n	801244e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80123fc:	68bb      	ldr	r3, [r7, #8]
 80123fe:	015a      	lsls	r2, r3, #5
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	4413      	add	r3, r2
 8012404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	68ba      	ldr	r2, [r7, #8]
 801240c:	0151      	lsls	r1, r2, #5
 801240e:	68fa      	ldr	r2, [r7, #12]
 8012410:	440a      	add	r2, r1
 8012412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012416:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801241a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801241c:	683b      	ldr	r3, [r7, #0]
 801241e:	791b      	ldrb	r3, [r3, #4]
 8012420:	2b03      	cmp	r3, #3
 8012422:	d003      	beq.n	801242c <USB_EPClearStall+0x4c>
 8012424:	683b      	ldr	r3, [r7, #0]
 8012426:	791b      	ldrb	r3, [r3, #4]
 8012428:	2b02      	cmp	r3, #2
 801242a:	d138      	bne.n	801249e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801242c:	68bb      	ldr	r3, [r7, #8]
 801242e:	015a      	lsls	r2, r3, #5
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	4413      	add	r3, r2
 8012434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	68ba      	ldr	r2, [r7, #8]
 801243c:	0151      	lsls	r1, r2, #5
 801243e:	68fa      	ldr	r2, [r7, #12]
 8012440:	440a      	add	r2, r1
 8012442:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801244a:	6013      	str	r3, [r2, #0]
 801244c:	e027      	b.n	801249e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801244e:	68bb      	ldr	r3, [r7, #8]
 8012450:	015a      	lsls	r2, r3, #5
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	4413      	add	r3, r2
 8012456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	68ba      	ldr	r2, [r7, #8]
 801245e:	0151      	lsls	r1, r2, #5
 8012460:	68fa      	ldr	r2, [r7, #12]
 8012462:	440a      	add	r2, r1
 8012464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012468:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801246c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	791b      	ldrb	r3, [r3, #4]
 8012472:	2b03      	cmp	r3, #3
 8012474:	d003      	beq.n	801247e <USB_EPClearStall+0x9e>
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	791b      	ldrb	r3, [r3, #4]
 801247a:	2b02      	cmp	r3, #2
 801247c:	d10f      	bne.n	801249e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801247e:	68bb      	ldr	r3, [r7, #8]
 8012480:	015a      	lsls	r2, r3, #5
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	4413      	add	r3, r2
 8012486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	68ba      	ldr	r2, [r7, #8]
 801248e:	0151      	lsls	r1, r2, #5
 8012490:	68fa      	ldr	r2, [r7, #12]
 8012492:	440a      	add	r2, r1
 8012494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801249c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801249e:	2300      	movs	r3, #0
}
 80124a0:	4618      	mov	r0, r3
 80124a2:	3714      	adds	r7, #20
 80124a4:	46bd      	mov	sp, r7
 80124a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124aa:	4770      	bx	lr

080124ac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80124ac:	b480      	push	{r7}
 80124ae:	b085      	sub	sp, #20
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
 80124b4:	460b      	mov	r3, r1
 80124b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	68fa      	ldr	r2, [r7, #12]
 80124c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80124ca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80124ce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80124d6:	681a      	ldr	r2, [r3, #0]
 80124d8:	78fb      	ldrb	r3, [r7, #3]
 80124da:	011b      	lsls	r3, r3, #4
 80124dc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80124e0:	68f9      	ldr	r1, [r7, #12]
 80124e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80124e6:	4313      	orrs	r3, r2
 80124e8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80124ea:	2300      	movs	r3, #0
}
 80124ec:	4618      	mov	r0, r3
 80124ee:	3714      	adds	r7, #20
 80124f0:	46bd      	mov	sp, r7
 80124f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f6:	4770      	bx	lr

080124f8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80124f8:	b480      	push	{r7}
 80124fa:	b085      	sub	sp, #20
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	68fa      	ldr	r2, [r7, #12]
 801250e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012512:	f023 0303 	bic.w	r3, r3, #3
 8012516:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801251e:	685b      	ldr	r3, [r3, #4]
 8012520:	68fa      	ldr	r2, [r7, #12]
 8012522:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012526:	f023 0302 	bic.w	r3, r3, #2
 801252a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801252c:	2300      	movs	r3, #0
}
 801252e:	4618      	mov	r0, r3
 8012530:	3714      	adds	r7, #20
 8012532:	46bd      	mov	sp, r7
 8012534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012538:	4770      	bx	lr

0801253a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801253a:	b480      	push	{r7}
 801253c:	b085      	sub	sp, #20
 801253e:	af00      	add	r7, sp, #0
 8012540:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	68fa      	ldr	r2, [r7, #12]
 8012550:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012554:	f023 0303 	bic.w	r3, r3, #3
 8012558:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012560:	685b      	ldr	r3, [r3, #4]
 8012562:	68fa      	ldr	r2, [r7, #12]
 8012564:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012568:	f043 0302 	orr.w	r3, r3, #2
 801256c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801256e:	2300      	movs	r3, #0
}
 8012570:	4618      	mov	r0, r3
 8012572:	3714      	adds	r7, #20
 8012574:	46bd      	mov	sp, r7
 8012576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801257a:	4770      	bx	lr

0801257c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801257c:	b480      	push	{r7}
 801257e:	b085      	sub	sp, #20
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	695b      	ldr	r3, [r3, #20]
 8012588:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	699b      	ldr	r3, [r3, #24]
 801258e:	68fa      	ldr	r2, [r7, #12]
 8012590:	4013      	ands	r3, r2
 8012592:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8012594:	68fb      	ldr	r3, [r7, #12]
}
 8012596:	4618      	mov	r0, r3
 8012598:	3714      	adds	r7, #20
 801259a:	46bd      	mov	sp, r7
 801259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a0:	4770      	bx	lr

080125a2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80125a2:	b480      	push	{r7}
 80125a4:	b085      	sub	sp, #20
 80125a6:	af00      	add	r7, sp, #0
 80125a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80125b4:	699b      	ldr	r3, [r3, #24]
 80125b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80125be:	69db      	ldr	r3, [r3, #28]
 80125c0:	68ba      	ldr	r2, [r7, #8]
 80125c2:	4013      	ands	r3, r2
 80125c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80125c6:	68bb      	ldr	r3, [r7, #8]
 80125c8:	0c1b      	lsrs	r3, r3, #16
}
 80125ca:	4618      	mov	r0, r3
 80125cc:	3714      	adds	r7, #20
 80125ce:	46bd      	mov	sp, r7
 80125d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d4:	4770      	bx	lr

080125d6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80125d6:	b480      	push	{r7}
 80125d8:	b085      	sub	sp, #20
 80125da:	af00      	add	r7, sp, #0
 80125dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80125e8:	699b      	ldr	r3, [r3, #24]
 80125ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80125f2:	69db      	ldr	r3, [r3, #28]
 80125f4:	68ba      	ldr	r2, [r7, #8]
 80125f6:	4013      	ands	r3, r2
 80125f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80125fa:	68bb      	ldr	r3, [r7, #8]
 80125fc:	b29b      	uxth	r3, r3
}
 80125fe:	4618      	mov	r0, r3
 8012600:	3714      	adds	r7, #20
 8012602:	46bd      	mov	sp, r7
 8012604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012608:	4770      	bx	lr

0801260a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801260a:	b480      	push	{r7}
 801260c:	b085      	sub	sp, #20
 801260e:	af00      	add	r7, sp, #0
 8012610:	6078      	str	r0, [r7, #4]
 8012612:	460b      	mov	r3, r1
 8012614:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801261a:	78fb      	ldrb	r3, [r7, #3]
 801261c:	015a      	lsls	r2, r3, #5
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	4413      	add	r3, r2
 8012622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012626:	689b      	ldr	r3, [r3, #8]
 8012628:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012630:	695b      	ldr	r3, [r3, #20]
 8012632:	68ba      	ldr	r2, [r7, #8]
 8012634:	4013      	ands	r3, r2
 8012636:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012638:	68bb      	ldr	r3, [r7, #8]
}
 801263a:	4618      	mov	r0, r3
 801263c:	3714      	adds	r7, #20
 801263e:	46bd      	mov	sp, r7
 8012640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012644:	4770      	bx	lr

08012646 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012646:	b480      	push	{r7}
 8012648:	b087      	sub	sp, #28
 801264a:	af00      	add	r7, sp, #0
 801264c:	6078      	str	r0, [r7, #4]
 801264e:	460b      	mov	r3, r1
 8012650:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8012656:	697b      	ldr	r3, [r7, #20]
 8012658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801265c:	691b      	ldr	r3, [r3, #16]
 801265e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8012660:	697b      	ldr	r3, [r7, #20]
 8012662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012668:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801266a:	78fb      	ldrb	r3, [r7, #3]
 801266c:	f003 030f 	and.w	r3, r3, #15
 8012670:	68fa      	ldr	r2, [r7, #12]
 8012672:	fa22 f303 	lsr.w	r3, r2, r3
 8012676:	01db      	lsls	r3, r3, #7
 8012678:	b2db      	uxtb	r3, r3
 801267a:	693a      	ldr	r2, [r7, #16]
 801267c:	4313      	orrs	r3, r2
 801267e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012680:	78fb      	ldrb	r3, [r7, #3]
 8012682:	015a      	lsls	r2, r3, #5
 8012684:	697b      	ldr	r3, [r7, #20]
 8012686:	4413      	add	r3, r2
 8012688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801268c:	689b      	ldr	r3, [r3, #8]
 801268e:	693a      	ldr	r2, [r7, #16]
 8012690:	4013      	ands	r3, r2
 8012692:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012694:	68bb      	ldr	r3, [r7, #8]
}
 8012696:	4618      	mov	r0, r3
 8012698:	371c      	adds	r7, #28
 801269a:	46bd      	mov	sp, r7
 801269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a0:	4770      	bx	lr

080126a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80126a2:	b480      	push	{r7}
 80126a4:	b083      	sub	sp, #12
 80126a6:	af00      	add	r7, sp, #0
 80126a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	695b      	ldr	r3, [r3, #20]
 80126ae:	f003 0301 	and.w	r3, r3, #1
}
 80126b2:	4618      	mov	r0, r3
 80126b4:	370c      	adds	r7, #12
 80126b6:	46bd      	mov	sp, r7
 80126b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126bc:	4770      	bx	lr
	...

080126c0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80126c0:	b480      	push	{r7}
 80126c2:	b085      	sub	sp, #20
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126d2:	681a      	ldr	r2, [r3, #0]
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126da:	4619      	mov	r1, r3
 80126dc:	4b09      	ldr	r3, [pc, #36]	; (8012704 <USB_ActivateSetup+0x44>)
 80126de:	4013      	ands	r3, r2
 80126e0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126e8:	685b      	ldr	r3, [r3, #4]
 80126ea:	68fa      	ldr	r2, [r7, #12]
 80126ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80126f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80126f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80126f6:	2300      	movs	r3, #0
}
 80126f8:	4618      	mov	r0, r3
 80126fa:	3714      	adds	r7, #20
 80126fc:	46bd      	mov	sp, r7
 80126fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012702:	4770      	bx	lr
 8012704:	fffff800 	.word	0xfffff800

08012708 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8012708:	b480      	push	{r7}
 801270a:	b087      	sub	sp, #28
 801270c:	af00      	add	r7, sp, #0
 801270e:	60f8      	str	r0, [r7, #12]
 8012710:	460b      	mov	r3, r1
 8012712:	607a      	str	r2, [r7, #4]
 8012714:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	333c      	adds	r3, #60	; 0x3c
 801271e:	3304      	adds	r3, #4
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012724:	693b      	ldr	r3, [r7, #16]
 8012726:	4a26      	ldr	r2, [pc, #152]	; (80127c0 <USB_EP0_OutStart+0xb8>)
 8012728:	4293      	cmp	r3, r2
 801272a:	d90a      	bls.n	8012742 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801272c:	697b      	ldr	r3, [r7, #20]
 801272e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012738:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801273c:	d101      	bne.n	8012742 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801273e:	2300      	movs	r3, #0
 8012740:	e037      	b.n	80127b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8012742:	697b      	ldr	r3, [r7, #20]
 8012744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012748:	461a      	mov	r2, r3
 801274a:	2300      	movs	r3, #0
 801274c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801274e:	697b      	ldr	r3, [r7, #20]
 8012750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012754:	691b      	ldr	r3, [r3, #16]
 8012756:	697a      	ldr	r2, [r7, #20]
 8012758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801275c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012760:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8012762:	697b      	ldr	r3, [r7, #20]
 8012764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012768:	691b      	ldr	r3, [r3, #16]
 801276a:	697a      	ldr	r2, [r7, #20]
 801276c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012770:	f043 0318 	orr.w	r3, r3, #24
 8012774:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8012776:	697b      	ldr	r3, [r7, #20]
 8012778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801277c:	691b      	ldr	r3, [r3, #16]
 801277e:	697a      	ldr	r2, [r7, #20]
 8012780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012784:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8012788:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801278a:	7afb      	ldrb	r3, [r7, #11]
 801278c:	2b01      	cmp	r3, #1
 801278e:	d10f      	bne.n	80127b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8012790:	697b      	ldr	r3, [r7, #20]
 8012792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012796:	461a      	mov	r2, r3
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801279c:	697b      	ldr	r3, [r7, #20]
 801279e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	697a      	ldr	r2, [r7, #20]
 80127a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80127aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80127ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80127b0:	2300      	movs	r3, #0
}
 80127b2:	4618      	mov	r0, r3
 80127b4:	371c      	adds	r7, #28
 80127b6:	46bd      	mov	sp, r7
 80127b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127bc:	4770      	bx	lr
 80127be:	bf00      	nop
 80127c0:	4f54300a 	.word	0x4f54300a

080127c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80127c4:	b480      	push	{r7}
 80127c6:	b085      	sub	sp, #20
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80127cc:	2300      	movs	r3, #0
 80127ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	3301      	adds	r3, #1
 80127d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	4a13      	ldr	r2, [pc, #76]	; (8012828 <USB_CoreReset+0x64>)
 80127da:	4293      	cmp	r3, r2
 80127dc:	d901      	bls.n	80127e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80127de:	2303      	movs	r3, #3
 80127e0:	e01b      	b.n	801281a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	691b      	ldr	r3, [r3, #16]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	daf2      	bge.n	80127d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80127ea:	2300      	movs	r3, #0
 80127ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	691b      	ldr	r3, [r3, #16]
 80127f2:	f043 0201 	orr.w	r2, r3, #1
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	3301      	adds	r3, #1
 80127fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	4a09      	ldr	r2, [pc, #36]	; (8012828 <USB_CoreReset+0x64>)
 8012804:	4293      	cmp	r3, r2
 8012806:	d901      	bls.n	801280c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012808:	2303      	movs	r3, #3
 801280a:	e006      	b.n	801281a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	691b      	ldr	r3, [r3, #16]
 8012810:	f003 0301 	and.w	r3, r3, #1
 8012814:	2b01      	cmp	r3, #1
 8012816:	d0f0      	beq.n	80127fa <USB_CoreReset+0x36>

  return HAL_OK;
 8012818:	2300      	movs	r3, #0
}
 801281a:	4618      	mov	r0, r3
 801281c:	3714      	adds	r7, #20
 801281e:	46bd      	mov	sp, r7
 8012820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012824:	4770      	bx	lr
 8012826:	bf00      	nop
 8012828:	00030d40 	.word	0x00030d40

0801282c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801282c:	b580      	push	{r7, lr}
 801282e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8012830:	4904      	ldr	r1, [pc, #16]	; (8012844 <MX_FATFS_Init+0x18>)
 8012832:	4805      	ldr	r0, [pc, #20]	; (8012848 <MX_FATFS_Init+0x1c>)
 8012834:	f002 fa56 	bl	8014ce4 <FATFS_LinkDriver>
 8012838:	4603      	mov	r3, r0
 801283a:	461a      	mov	r2, r3
 801283c:	4b03      	ldr	r3, [pc, #12]	; (801284c <MX_FATFS_Init+0x20>)
 801283e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012840:	bf00      	nop
 8012842:	bd80      	pop	{r7, pc}
 8012844:	24000d28 	.word	0x24000d28
 8012848:	08019e08 	.word	0x08019e08
 801284c:	24000d24 	.word	0x24000d24

08012850 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8012850:	b580      	push	{r7, lr}
 8012852:	b082      	sub	sp, #8
 8012854:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8012856:	2300      	movs	r3, #0
 8012858:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801285a:	f000 f885 	bl	8012968 <BSP_SD_IsDetected>
 801285e:	4603      	mov	r3, r0
 8012860:	2b01      	cmp	r3, #1
 8012862:	d001      	beq.n	8012868 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8012864:	2302      	movs	r3, #2
 8012866:	e012      	b.n	801288e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8012868:	480b      	ldr	r0, [pc, #44]	; (8012898 <BSP_SD_Init+0x48>)
 801286a:	f7f9 fff9 	bl	800c860 <HAL_SD_Init>
 801286e:	4603      	mov	r3, r0
 8012870:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8012872:	79fb      	ldrb	r3, [r7, #7]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d109      	bne.n	801288c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8012878:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801287c:	4806      	ldr	r0, [pc, #24]	; (8012898 <BSP_SD_Init+0x48>)
 801287e:	f7fa feaf 	bl	800d5e0 <HAL_SD_ConfigWideBusOperation>
 8012882:	4603      	mov	r3, r0
 8012884:	2b00      	cmp	r3, #0
 8012886:	d001      	beq.n	801288c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8012888:	2301      	movs	r3, #1
 801288a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 801288c:	79fb      	ldrb	r3, [r7, #7]
}
 801288e:	4618      	mov	r0, r3
 8012890:	3708      	adds	r7, #8
 8012892:	46bd      	mov	sp, r7
 8012894:	bd80      	pop	{r7, pc}
 8012896:	bf00      	nop
 8012898:	240005a8 	.word	0x240005a8

0801289c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 801289c:	b580      	push	{r7, lr}
 801289e:	b086      	sub	sp, #24
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	60f8      	str	r0, [r7, #12]
 80128a4:	60b9      	str	r1, [r7, #8]
 80128a6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80128a8:	2300      	movs	r3, #0
 80128aa:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	68ba      	ldr	r2, [r7, #8]
 80128b0:	68f9      	ldr	r1, [r7, #12]
 80128b2:	4806      	ldr	r0, [pc, #24]	; (80128cc <BSP_SD_ReadBlocks_DMA+0x30>)
 80128b4:	f7fa f8f4 	bl	800caa0 <HAL_SD_ReadBlocks_DMA>
 80128b8:	4603      	mov	r3, r0
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d001      	beq.n	80128c2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80128be:	2301      	movs	r3, #1
 80128c0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80128c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80128c4:	4618      	mov	r0, r3
 80128c6:	3718      	adds	r7, #24
 80128c8:	46bd      	mov	sp, r7
 80128ca:	bd80      	pop	{r7, pc}
 80128cc:	240005a8 	.word	0x240005a8

080128d0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b086      	sub	sp, #24
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	60f8      	str	r0, [r7, #12]
 80128d8:	60b9      	str	r1, [r7, #8]
 80128da:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80128dc:	2300      	movs	r3, #0
 80128de:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	68ba      	ldr	r2, [r7, #8]
 80128e4:	68f9      	ldr	r1, [r7, #12]
 80128e6:	4806      	ldr	r0, [pc, #24]	; (8012900 <BSP_SD_WriteBlocks_DMA+0x30>)
 80128e8:	f7fa f982 	bl	800cbf0 <HAL_SD_WriteBlocks_DMA>
 80128ec:	4603      	mov	r3, r0
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d001      	beq.n	80128f6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80128f2:	2301      	movs	r3, #1
 80128f4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80128f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80128f8:	4618      	mov	r0, r3
 80128fa:	3718      	adds	r7, #24
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd80      	pop	{r7, pc}
 8012900:	240005a8 	.word	0x240005a8

08012904 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8012904:	b580      	push	{r7, lr}
 8012906:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8012908:	4805      	ldr	r0, [pc, #20]	; (8012920 <BSP_SD_GetCardState+0x1c>)
 801290a:	f7fa ff7b 	bl	800d804 <HAL_SD_GetCardState>
 801290e:	4603      	mov	r3, r0
 8012910:	2b04      	cmp	r3, #4
 8012912:	bf14      	ite	ne
 8012914:	2301      	movne	r3, #1
 8012916:	2300      	moveq	r3, #0
 8012918:	b2db      	uxtb	r3, r3
}
 801291a:	4618      	mov	r0, r3
 801291c:	bd80      	pop	{r7, pc}
 801291e:	bf00      	nop
 8012920:	240005a8 	.word	0x240005a8

08012924 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b082      	sub	sp, #8
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 801292c:	6879      	ldr	r1, [r7, #4]
 801292e:	4803      	ldr	r0, [pc, #12]	; (801293c <BSP_SD_GetCardInfo+0x18>)
 8012930:	f7fa fe2a 	bl	800d588 <HAL_SD_GetCardInfo>
}
 8012934:	bf00      	nop
 8012936:	3708      	adds	r7, #8
 8012938:	46bd      	mov	sp, r7
 801293a:	bd80      	pop	{r7, pc}
 801293c:	240005a8 	.word	0x240005a8

08012940 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b082      	sub	sp, #8
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8012948:	f000 f9a0 	bl	8012c8c <BSP_SD_WriteCpltCallback>
}
 801294c:	bf00      	nop
 801294e:	3708      	adds	r7, #8
 8012950:	46bd      	mov	sp, r7
 8012952:	bd80      	pop	{r7, pc}

08012954 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b082      	sub	sp, #8
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801295c:	f000 f9a2 	bl	8012ca4 <BSP_SD_ReadCpltCallback>
}
 8012960:	bf00      	nop
 8012962:	3708      	adds	r7, #8
 8012964:	46bd      	mov	sp, r7
 8012966:	bd80      	pop	{r7, pc}

08012968 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b082      	sub	sp, #8
 801296c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801296e:	2301      	movs	r3, #1
 8012970:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8012972:	f000 f80b 	bl	801298c <BSP_PlatformIsDetected>
 8012976:	4603      	mov	r3, r0
 8012978:	2b00      	cmp	r3, #0
 801297a:	d101      	bne.n	8012980 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 801297c:	2300      	movs	r3, #0
 801297e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8012980:	79fb      	ldrb	r3, [r7, #7]
 8012982:	b2db      	uxtb	r3, r3
}
 8012984:	4618      	mov	r0, r3
 8012986:	3708      	adds	r7, #8
 8012988:	46bd      	mov	sp, r7
 801298a:	bd80      	pop	{r7, pc}

0801298c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 801298c:	b580      	push	{r7, lr}
 801298e:	b082      	sub	sp, #8
 8012990:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8012992:	2301      	movs	r3, #1
 8012994:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8012996:	2104      	movs	r1, #4
 8012998:	4806      	ldr	r0, [pc, #24]	; (80129b4 <BSP_PlatformIsDetected+0x28>)
 801299a:	f7f4 ff35 	bl	8007808 <HAL_GPIO_ReadPin>
 801299e:	4603      	mov	r3, r0
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d001      	beq.n	80129a8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80129a4:	2300      	movs	r3, #0
 80129a6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80129a8:	79fb      	ldrb	r3, [r7, #7]
}
 80129aa:	4618      	mov	r0, r3
 80129ac:	3708      	adds	r7, #8
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd80      	pop	{r7, pc}
 80129b2:	bf00      	nop
 80129b4:	58020400 	.word	0x58020400

080129b8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b084      	sub	sp, #16
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80129c0:	f7f0 fa38 	bl	8002e34 <HAL_GetTick>
 80129c4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80129c6:	e006      	b.n	80129d6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80129c8:	f7ff ff9c 	bl	8012904 <BSP_SD_GetCardState>
 80129cc:	4603      	mov	r3, r0
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d101      	bne.n	80129d6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80129d2:	2300      	movs	r3, #0
 80129d4:	e009      	b.n	80129ea <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80129d6:	f7f0 fa2d 	bl	8002e34 <HAL_GetTick>
 80129da:	4602      	mov	r2, r0
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	1ad3      	subs	r3, r2, r3
 80129e0:	687a      	ldr	r2, [r7, #4]
 80129e2:	429a      	cmp	r2, r3
 80129e4:	d8f0      	bhi.n	80129c8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80129e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80129ea:	4618      	mov	r0, r3
 80129ec:	3710      	adds	r7, #16
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd80      	pop	{r7, pc}
	...

080129f4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b082      	sub	sp, #8
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	4603      	mov	r3, r0
 80129fc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80129fe:	4b0b      	ldr	r3, [pc, #44]	; (8012a2c <SD_CheckStatus+0x38>)
 8012a00:	2201      	movs	r2, #1
 8012a02:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8012a04:	f7ff ff7e 	bl	8012904 <BSP_SD_GetCardState>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d107      	bne.n	8012a1e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8012a0e:	4b07      	ldr	r3, [pc, #28]	; (8012a2c <SD_CheckStatus+0x38>)
 8012a10:	781b      	ldrb	r3, [r3, #0]
 8012a12:	b2db      	uxtb	r3, r3
 8012a14:	f023 0301 	bic.w	r3, r3, #1
 8012a18:	b2da      	uxtb	r2, r3
 8012a1a:	4b04      	ldr	r3, [pc, #16]	; (8012a2c <SD_CheckStatus+0x38>)
 8012a1c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8012a1e:	4b03      	ldr	r3, [pc, #12]	; (8012a2c <SD_CheckStatus+0x38>)
 8012a20:	781b      	ldrb	r3, [r3, #0]
 8012a22:	b2db      	uxtb	r3, r3
}
 8012a24:	4618      	mov	r0, r3
 8012a26:	3708      	adds	r7, #8
 8012a28:	46bd      	mov	sp, r7
 8012a2a:	bd80      	pop	{r7, pc}
 8012a2c:	2400000d 	.word	0x2400000d

08012a30 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b082      	sub	sp, #8
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	4603      	mov	r3, r0
 8012a38:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8012a3a:	f7ff ff09 	bl	8012850 <BSP_SD_Init>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d107      	bne.n	8012a54 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8012a44:	79fb      	ldrb	r3, [r7, #7]
 8012a46:	4618      	mov	r0, r3
 8012a48:	f7ff ffd4 	bl	80129f4 <SD_CheckStatus>
 8012a4c:	4603      	mov	r3, r0
 8012a4e:	461a      	mov	r2, r3
 8012a50:	4b04      	ldr	r3, [pc, #16]	; (8012a64 <SD_initialize+0x34>)
 8012a52:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8012a54:	4b03      	ldr	r3, [pc, #12]	; (8012a64 <SD_initialize+0x34>)
 8012a56:	781b      	ldrb	r3, [r3, #0]
 8012a58:	b2db      	uxtb	r3, r3
}
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	3708      	adds	r7, #8
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	bd80      	pop	{r7, pc}
 8012a62:	bf00      	nop
 8012a64:	2400000d 	.word	0x2400000d

08012a68 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b082      	sub	sp, #8
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	4603      	mov	r3, r0
 8012a70:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012a72:	79fb      	ldrb	r3, [r7, #7]
 8012a74:	4618      	mov	r0, r3
 8012a76:	f7ff ffbd 	bl	80129f4 <SD_CheckStatus>
 8012a7a:	4603      	mov	r3, r0
}
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	3708      	adds	r7, #8
 8012a80:	46bd      	mov	sp, r7
 8012a82:	bd80      	pop	{r7, pc}

08012a84 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012a84:	b580      	push	{r7, lr}
 8012a86:	b086      	sub	sp, #24
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	60b9      	str	r1, [r7, #8]
 8012a8c:	607a      	str	r2, [r7, #4]
 8012a8e:	603b      	str	r3, [r7, #0]
 8012a90:	4603      	mov	r3, r0
 8012a92:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012a94:	2301      	movs	r3, #1
 8012a96:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012a98:	f247 5030 	movw	r0, #30000	; 0x7530
 8012a9c:	f7ff ff8c 	bl	80129b8 <SD_CheckStatusWithTimeout>
 8012aa0:	4603      	mov	r3, r0
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	da01      	bge.n	8012aaa <SD_read+0x26>
  {
    return res;
 8012aa6:	7dfb      	ldrb	r3, [r7, #23]
 8012aa8:	e03b      	b.n	8012b22 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8012aaa:	683a      	ldr	r2, [r7, #0]
 8012aac:	6879      	ldr	r1, [r7, #4]
 8012aae:	68b8      	ldr	r0, [r7, #8]
 8012ab0:	f7ff fef4 	bl	801289c <BSP_SD_ReadBlocks_DMA>
 8012ab4:	4603      	mov	r3, r0
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d132      	bne.n	8012b20 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8012aba:	4b1c      	ldr	r3, [pc, #112]	; (8012b2c <SD_read+0xa8>)
 8012abc:	2200      	movs	r2, #0
 8012abe:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8012ac0:	f7f0 f9b8 	bl	8002e34 <HAL_GetTick>
 8012ac4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012ac6:	bf00      	nop
 8012ac8:	4b18      	ldr	r3, [pc, #96]	; (8012b2c <SD_read+0xa8>)
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d108      	bne.n	8012ae2 <SD_read+0x5e>
 8012ad0:	f7f0 f9b0 	bl	8002e34 <HAL_GetTick>
 8012ad4:	4602      	mov	r2, r0
 8012ad6:	693b      	ldr	r3, [r7, #16]
 8012ad8:	1ad3      	subs	r3, r2, r3
 8012ada:	f247 522f 	movw	r2, #29999	; 0x752f
 8012ade:	4293      	cmp	r3, r2
 8012ae0:	d9f2      	bls.n	8012ac8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8012ae2:	4b12      	ldr	r3, [pc, #72]	; (8012b2c <SD_read+0xa8>)
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d102      	bne.n	8012af0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8012aea:	2301      	movs	r3, #1
 8012aec:	75fb      	strb	r3, [r7, #23]
 8012aee:	e017      	b.n	8012b20 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8012af0:	4b0e      	ldr	r3, [pc, #56]	; (8012b2c <SD_read+0xa8>)
 8012af2:	2200      	movs	r2, #0
 8012af4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8012af6:	f7f0 f99d 	bl	8002e34 <HAL_GetTick>
 8012afa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012afc:	e007      	b.n	8012b0e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012afe:	f7ff ff01 	bl	8012904 <BSP_SD_GetCardState>
 8012b02:	4603      	mov	r3, r0
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d102      	bne.n	8012b0e <SD_read+0x8a>
          {
            res = RES_OK;
 8012b08:	2300      	movs	r3, #0
 8012b0a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8012b0c:	e008      	b.n	8012b20 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012b0e:	f7f0 f991 	bl	8002e34 <HAL_GetTick>
 8012b12:	4602      	mov	r2, r0
 8012b14:	693b      	ldr	r3, [r7, #16]
 8012b16:	1ad3      	subs	r3, r2, r3
 8012b18:	f247 522f 	movw	r2, #29999	; 0x752f
 8012b1c:	4293      	cmp	r3, r2
 8012b1e:	d9ee      	bls.n	8012afe <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8012b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b22:	4618      	mov	r0, r3
 8012b24:	3718      	adds	r7, #24
 8012b26:	46bd      	mov	sp, r7
 8012b28:	bd80      	pop	{r7, pc}
 8012b2a:	bf00      	nop
 8012b2c:	24000d30 	.word	0x24000d30

08012b30 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b086      	sub	sp, #24
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	60b9      	str	r1, [r7, #8]
 8012b38:	607a      	str	r2, [r7, #4]
 8012b3a:	603b      	str	r3, [r7, #0]
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012b40:	2301      	movs	r3, #1
 8012b42:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8012b44:	4b24      	ldr	r3, [pc, #144]	; (8012bd8 <SD_write+0xa8>)
 8012b46:	2200      	movs	r2, #0
 8012b48:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012b4a:	f247 5030 	movw	r0, #30000	; 0x7530
 8012b4e:	f7ff ff33 	bl	80129b8 <SD_CheckStatusWithTimeout>
 8012b52:	4603      	mov	r3, r0
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	da01      	bge.n	8012b5c <SD_write+0x2c>
  {
    return res;
 8012b58:	7dfb      	ldrb	r3, [r7, #23]
 8012b5a:	e038      	b.n	8012bce <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8012b5c:	683a      	ldr	r2, [r7, #0]
 8012b5e:	6879      	ldr	r1, [r7, #4]
 8012b60:	68b8      	ldr	r0, [r7, #8]
 8012b62:	f7ff feb5 	bl	80128d0 <BSP_SD_WriteBlocks_DMA>
 8012b66:	4603      	mov	r3, r0
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d12f      	bne.n	8012bcc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8012b6c:	f7f0 f962 	bl	8002e34 <HAL_GetTick>
 8012b70:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012b72:	bf00      	nop
 8012b74:	4b18      	ldr	r3, [pc, #96]	; (8012bd8 <SD_write+0xa8>)
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d108      	bne.n	8012b8e <SD_write+0x5e>
 8012b7c:	f7f0 f95a 	bl	8002e34 <HAL_GetTick>
 8012b80:	4602      	mov	r2, r0
 8012b82:	693b      	ldr	r3, [r7, #16]
 8012b84:	1ad3      	subs	r3, r2, r3
 8012b86:	f247 522f 	movw	r2, #29999	; 0x752f
 8012b8a:	4293      	cmp	r3, r2
 8012b8c:	d9f2      	bls.n	8012b74 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8012b8e:	4b12      	ldr	r3, [pc, #72]	; (8012bd8 <SD_write+0xa8>)
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d102      	bne.n	8012b9c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8012b96:	2301      	movs	r3, #1
 8012b98:	75fb      	strb	r3, [r7, #23]
 8012b9a:	e017      	b.n	8012bcc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8012b9c:	4b0e      	ldr	r3, [pc, #56]	; (8012bd8 <SD_write+0xa8>)
 8012b9e:	2200      	movs	r2, #0
 8012ba0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8012ba2:	f7f0 f947 	bl	8002e34 <HAL_GetTick>
 8012ba6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012ba8:	e007      	b.n	8012bba <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012baa:	f7ff feab 	bl	8012904 <BSP_SD_GetCardState>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d102      	bne.n	8012bba <SD_write+0x8a>
          {
            res = RES_OK;
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	75fb      	strb	r3, [r7, #23]
            break;
 8012bb8:	e008      	b.n	8012bcc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012bba:	f7f0 f93b 	bl	8002e34 <HAL_GetTick>
 8012bbe:	4602      	mov	r2, r0
 8012bc0:	693b      	ldr	r3, [r7, #16]
 8012bc2:	1ad3      	subs	r3, r2, r3
 8012bc4:	f247 522f 	movw	r2, #29999	; 0x752f
 8012bc8:	4293      	cmp	r3, r2
 8012bca:	d9ee      	bls.n	8012baa <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8012bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8012bce:	4618      	mov	r0, r3
 8012bd0:	3718      	adds	r7, #24
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	bd80      	pop	{r7, pc}
 8012bd6:	bf00      	nop
 8012bd8:	24000d2c 	.word	0x24000d2c

08012bdc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012bdc:	b580      	push	{r7, lr}
 8012bde:	b08c      	sub	sp, #48	; 0x30
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	4603      	mov	r3, r0
 8012be4:	603a      	str	r2, [r7, #0]
 8012be6:	71fb      	strb	r3, [r7, #7]
 8012be8:	460b      	mov	r3, r1
 8012bea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012bec:	2301      	movs	r3, #1
 8012bee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012bf2:	4b25      	ldr	r3, [pc, #148]	; (8012c88 <SD_ioctl+0xac>)
 8012bf4:	781b      	ldrb	r3, [r3, #0]
 8012bf6:	b2db      	uxtb	r3, r3
 8012bf8:	f003 0301 	and.w	r3, r3, #1
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d001      	beq.n	8012c04 <SD_ioctl+0x28>
 8012c00:	2303      	movs	r3, #3
 8012c02:	e03c      	b.n	8012c7e <SD_ioctl+0xa2>

  switch (cmd)
 8012c04:	79bb      	ldrb	r3, [r7, #6]
 8012c06:	2b03      	cmp	r3, #3
 8012c08:	d834      	bhi.n	8012c74 <SD_ioctl+0x98>
 8012c0a:	a201      	add	r2, pc, #4	; (adr r2, 8012c10 <SD_ioctl+0x34>)
 8012c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c10:	08012c21 	.word	0x08012c21
 8012c14:	08012c29 	.word	0x08012c29
 8012c18:	08012c41 	.word	0x08012c41
 8012c1c:	08012c5b 	.word	0x08012c5b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012c20:	2300      	movs	r3, #0
 8012c22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012c26:	e028      	b.n	8012c7a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012c28:	f107 0308 	add.w	r3, r7, #8
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f7ff fe79 	bl	8012924 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8012c32:	6a3a      	ldr	r2, [r7, #32]
 8012c34:	683b      	ldr	r3, [r7, #0]
 8012c36:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012c38:	2300      	movs	r3, #0
 8012c3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012c3e:	e01c      	b.n	8012c7a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012c40:	f107 0308 	add.w	r3, r7, #8
 8012c44:	4618      	mov	r0, r3
 8012c46:	f7ff fe6d 	bl	8012924 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c4c:	b29a      	uxth	r2, r3
 8012c4e:	683b      	ldr	r3, [r7, #0]
 8012c50:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012c52:	2300      	movs	r3, #0
 8012c54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012c58:	e00f      	b.n	8012c7a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012c5a:	f107 0308 	add.w	r3, r7, #8
 8012c5e:	4618      	mov	r0, r3
 8012c60:	f7ff fe60 	bl	8012924 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c66:	0a5a      	lsrs	r2, r3, #9
 8012c68:	683b      	ldr	r3, [r7, #0]
 8012c6a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012c72:	e002      	b.n	8012c7a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012c74:	2304      	movs	r3, #4
 8012c76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8012c7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012c7e:	4618      	mov	r0, r3
 8012c80:	3730      	adds	r7, #48	; 0x30
 8012c82:	46bd      	mov	sp, r7
 8012c84:	bd80      	pop	{r7, pc}
 8012c86:	bf00      	nop
 8012c88:	2400000d 	.word	0x2400000d

08012c8c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8012c8c:	b480      	push	{r7}
 8012c8e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8012c90:	4b03      	ldr	r3, [pc, #12]	; (8012ca0 <BSP_SD_WriteCpltCallback+0x14>)
 8012c92:	2201      	movs	r2, #1
 8012c94:	601a      	str	r2, [r3, #0]
}
 8012c96:	bf00      	nop
 8012c98:	46bd      	mov	sp, r7
 8012c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c9e:	4770      	bx	lr
 8012ca0:	24000d2c 	.word	0x24000d2c

08012ca4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8012ca4:	b480      	push	{r7}
 8012ca6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8012ca8:	4b03      	ldr	r3, [pc, #12]	; (8012cb8 <BSP_SD_ReadCpltCallback+0x14>)
 8012caa:	2201      	movs	r2, #1
 8012cac:	601a      	str	r2, [r3, #0]
}
 8012cae:	bf00      	nop
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb6:	4770      	bx	lr
 8012cb8:	24000d30 	.word	0x24000d30

08012cbc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	b084      	sub	sp, #16
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	6078      	str	r0, [r7, #4]
 8012cc4:	460b      	mov	r3, r1
 8012cc6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012cc8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8012ccc:	f002 fcea 	bl	80156a4 <USBD_static_malloc>
 8012cd0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d109      	bne.n	8012cec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	32b0      	adds	r2, #176	; 0xb0
 8012ce2:	2100      	movs	r1, #0
 8012ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8012ce8:	2302      	movs	r3, #2
 8012cea:	e0d4      	b.n	8012e96 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8012cec:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8012cf0:	2100      	movs	r1, #0
 8012cf2:	68f8      	ldr	r0, [r7, #12]
 8012cf4:	f003 fc7f 	bl	80165f6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	32b0      	adds	r2, #176	; 0xb0
 8012d02:	68f9      	ldr	r1, [r7, #12]
 8012d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	32b0      	adds	r2, #176	; 0xb0
 8012d12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	7c1b      	ldrb	r3, [r3, #16]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d138      	bne.n	8012d96 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012d24:	4b5e      	ldr	r3, [pc, #376]	; (8012ea0 <USBD_CDC_Init+0x1e4>)
 8012d26:	7819      	ldrb	r1, [r3, #0]
 8012d28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012d2c:	2202      	movs	r2, #2
 8012d2e:	6878      	ldr	r0, [r7, #4]
 8012d30:	f002 fb95 	bl	801545e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012d34:	4b5a      	ldr	r3, [pc, #360]	; (8012ea0 <USBD_CDC_Init+0x1e4>)
 8012d36:	781b      	ldrb	r3, [r3, #0]
 8012d38:	f003 020f 	and.w	r2, r3, #15
 8012d3c:	6879      	ldr	r1, [r7, #4]
 8012d3e:	4613      	mov	r3, r2
 8012d40:	009b      	lsls	r3, r3, #2
 8012d42:	4413      	add	r3, r2
 8012d44:	009b      	lsls	r3, r3, #2
 8012d46:	440b      	add	r3, r1
 8012d48:	3324      	adds	r3, #36	; 0x24
 8012d4a:	2201      	movs	r2, #1
 8012d4c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012d4e:	4b55      	ldr	r3, [pc, #340]	; (8012ea4 <USBD_CDC_Init+0x1e8>)
 8012d50:	7819      	ldrb	r1, [r3, #0]
 8012d52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012d56:	2202      	movs	r2, #2
 8012d58:	6878      	ldr	r0, [r7, #4]
 8012d5a:	f002 fb80 	bl	801545e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012d5e:	4b51      	ldr	r3, [pc, #324]	; (8012ea4 <USBD_CDC_Init+0x1e8>)
 8012d60:	781b      	ldrb	r3, [r3, #0]
 8012d62:	f003 020f 	and.w	r2, r3, #15
 8012d66:	6879      	ldr	r1, [r7, #4]
 8012d68:	4613      	mov	r3, r2
 8012d6a:	009b      	lsls	r3, r3, #2
 8012d6c:	4413      	add	r3, r2
 8012d6e:	009b      	lsls	r3, r3, #2
 8012d70:	440b      	add	r3, r1
 8012d72:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012d76:	2201      	movs	r2, #1
 8012d78:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012d7a:	4b4b      	ldr	r3, [pc, #300]	; (8012ea8 <USBD_CDC_Init+0x1ec>)
 8012d7c:	781b      	ldrb	r3, [r3, #0]
 8012d7e:	f003 020f 	and.w	r2, r3, #15
 8012d82:	6879      	ldr	r1, [r7, #4]
 8012d84:	4613      	mov	r3, r2
 8012d86:	009b      	lsls	r3, r3, #2
 8012d88:	4413      	add	r3, r2
 8012d8a:	009b      	lsls	r3, r3, #2
 8012d8c:	440b      	add	r3, r1
 8012d8e:	3326      	adds	r3, #38	; 0x26
 8012d90:	2210      	movs	r2, #16
 8012d92:	801a      	strh	r2, [r3, #0]
 8012d94:	e035      	b.n	8012e02 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012d96:	4b42      	ldr	r3, [pc, #264]	; (8012ea0 <USBD_CDC_Init+0x1e4>)
 8012d98:	7819      	ldrb	r1, [r3, #0]
 8012d9a:	2340      	movs	r3, #64	; 0x40
 8012d9c:	2202      	movs	r2, #2
 8012d9e:	6878      	ldr	r0, [r7, #4]
 8012da0:	f002 fb5d 	bl	801545e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012da4:	4b3e      	ldr	r3, [pc, #248]	; (8012ea0 <USBD_CDC_Init+0x1e4>)
 8012da6:	781b      	ldrb	r3, [r3, #0]
 8012da8:	f003 020f 	and.w	r2, r3, #15
 8012dac:	6879      	ldr	r1, [r7, #4]
 8012dae:	4613      	mov	r3, r2
 8012db0:	009b      	lsls	r3, r3, #2
 8012db2:	4413      	add	r3, r2
 8012db4:	009b      	lsls	r3, r3, #2
 8012db6:	440b      	add	r3, r1
 8012db8:	3324      	adds	r3, #36	; 0x24
 8012dba:	2201      	movs	r2, #1
 8012dbc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012dbe:	4b39      	ldr	r3, [pc, #228]	; (8012ea4 <USBD_CDC_Init+0x1e8>)
 8012dc0:	7819      	ldrb	r1, [r3, #0]
 8012dc2:	2340      	movs	r3, #64	; 0x40
 8012dc4:	2202      	movs	r2, #2
 8012dc6:	6878      	ldr	r0, [r7, #4]
 8012dc8:	f002 fb49 	bl	801545e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012dcc:	4b35      	ldr	r3, [pc, #212]	; (8012ea4 <USBD_CDC_Init+0x1e8>)
 8012dce:	781b      	ldrb	r3, [r3, #0]
 8012dd0:	f003 020f 	and.w	r2, r3, #15
 8012dd4:	6879      	ldr	r1, [r7, #4]
 8012dd6:	4613      	mov	r3, r2
 8012dd8:	009b      	lsls	r3, r3, #2
 8012dda:	4413      	add	r3, r2
 8012ddc:	009b      	lsls	r3, r3, #2
 8012dde:	440b      	add	r3, r1
 8012de0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012de4:	2201      	movs	r2, #1
 8012de6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012de8:	4b2f      	ldr	r3, [pc, #188]	; (8012ea8 <USBD_CDC_Init+0x1ec>)
 8012dea:	781b      	ldrb	r3, [r3, #0]
 8012dec:	f003 020f 	and.w	r2, r3, #15
 8012df0:	6879      	ldr	r1, [r7, #4]
 8012df2:	4613      	mov	r3, r2
 8012df4:	009b      	lsls	r3, r3, #2
 8012df6:	4413      	add	r3, r2
 8012df8:	009b      	lsls	r3, r3, #2
 8012dfa:	440b      	add	r3, r1
 8012dfc:	3326      	adds	r3, #38	; 0x26
 8012dfe:	2210      	movs	r2, #16
 8012e00:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012e02:	4b29      	ldr	r3, [pc, #164]	; (8012ea8 <USBD_CDC_Init+0x1ec>)
 8012e04:	7819      	ldrb	r1, [r3, #0]
 8012e06:	2308      	movs	r3, #8
 8012e08:	2203      	movs	r2, #3
 8012e0a:	6878      	ldr	r0, [r7, #4]
 8012e0c:	f002 fb27 	bl	801545e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8012e10:	4b25      	ldr	r3, [pc, #148]	; (8012ea8 <USBD_CDC_Init+0x1ec>)
 8012e12:	781b      	ldrb	r3, [r3, #0]
 8012e14:	f003 020f 	and.w	r2, r3, #15
 8012e18:	6879      	ldr	r1, [r7, #4]
 8012e1a:	4613      	mov	r3, r2
 8012e1c:	009b      	lsls	r3, r3, #2
 8012e1e:	4413      	add	r3, r2
 8012e20:	009b      	lsls	r3, r3, #2
 8012e22:	440b      	add	r3, r1
 8012e24:	3324      	adds	r3, #36	; 0x24
 8012e26:	2201      	movs	r2, #1
 8012e28:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	2200      	movs	r2, #0
 8012e2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012e38:	687a      	ldr	r2, [r7, #4]
 8012e3a:	33b0      	adds	r3, #176	; 0xb0
 8012e3c:	009b      	lsls	r3, r3, #2
 8012e3e:	4413      	add	r3, r2
 8012e40:	685b      	ldr	r3, [r3, #4]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	2200      	movs	r2, #0
 8012e4a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	2200      	movs	r2, #0
 8012e52:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d101      	bne.n	8012e64 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8012e60:	2302      	movs	r3, #2
 8012e62:	e018      	b.n	8012e96 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	7c1b      	ldrb	r3, [r3, #16]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d10a      	bne.n	8012e82 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012e6c:	4b0d      	ldr	r3, [pc, #52]	; (8012ea4 <USBD_CDC_Init+0x1e8>)
 8012e6e:	7819      	ldrb	r1, [r3, #0]
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012e76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012e7a:	6878      	ldr	r0, [r7, #4]
 8012e7c:	f002 fbde 	bl	801563c <USBD_LL_PrepareReceive>
 8012e80:	e008      	b.n	8012e94 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012e82:	4b08      	ldr	r3, [pc, #32]	; (8012ea4 <USBD_CDC_Init+0x1e8>)
 8012e84:	7819      	ldrb	r1, [r3, #0]
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012e8c:	2340      	movs	r3, #64	; 0x40
 8012e8e:	6878      	ldr	r0, [r7, #4]
 8012e90:	f002 fbd4 	bl	801563c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012e94:	2300      	movs	r3, #0
}
 8012e96:	4618      	mov	r0, r3
 8012e98:	3710      	adds	r7, #16
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	bd80      	pop	{r7, pc}
 8012e9e:	bf00      	nop
 8012ea0:	24000097 	.word	0x24000097
 8012ea4:	24000098 	.word	0x24000098
 8012ea8:	24000099 	.word	0x24000099

08012eac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b082      	sub	sp, #8
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
 8012eb4:	460b      	mov	r3, r1
 8012eb6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8012eb8:	4b3a      	ldr	r3, [pc, #232]	; (8012fa4 <USBD_CDC_DeInit+0xf8>)
 8012eba:	781b      	ldrb	r3, [r3, #0]
 8012ebc:	4619      	mov	r1, r3
 8012ebe:	6878      	ldr	r0, [r7, #4]
 8012ec0:	f002 faf3 	bl	80154aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8012ec4:	4b37      	ldr	r3, [pc, #220]	; (8012fa4 <USBD_CDC_DeInit+0xf8>)
 8012ec6:	781b      	ldrb	r3, [r3, #0]
 8012ec8:	f003 020f 	and.w	r2, r3, #15
 8012ecc:	6879      	ldr	r1, [r7, #4]
 8012ece:	4613      	mov	r3, r2
 8012ed0:	009b      	lsls	r3, r3, #2
 8012ed2:	4413      	add	r3, r2
 8012ed4:	009b      	lsls	r3, r3, #2
 8012ed6:	440b      	add	r3, r1
 8012ed8:	3324      	adds	r3, #36	; 0x24
 8012eda:	2200      	movs	r2, #0
 8012edc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8012ede:	4b32      	ldr	r3, [pc, #200]	; (8012fa8 <USBD_CDC_DeInit+0xfc>)
 8012ee0:	781b      	ldrb	r3, [r3, #0]
 8012ee2:	4619      	mov	r1, r3
 8012ee4:	6878      	ldr	r0, [r7, #4]
 8012ee6:	f002 fae0 	bl	80154aa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8012eea:	4b2f      	ldr	r3, [pc, #188]	; (8012fa8 <USBD_CDC_DeInit+0xfc>)
 8012eec:	781b      	ldrb	r3, [r3, #0]
 8012eee:	f003 020f 	and.w	r2, r3, #15
 8012ef2:	6879      	ldr	r1, [r7, #4]
 8012ef4:	4613      	mov	r3, r2
 8012ef6:	009b      	lsls	r3, r3, #2
 8012ef8:	4413      	add	r3, r2
 8012efa:	009b      	lsls	r3, r3, #2
 8012efc:	440b      	add	r3, r1
 8012efe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012f02:	2200      	movs	r2, #0
 8012f04:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8012f06:	4b29      	ldr	r3, [pc, #164]	; (8012fac <USBD_CDC_DeInit+0x100>)
 8012f08:	781b      	ldrb	r3, [r3, #0]
 8012f0a:	4619      	mov	r1, r3
 8012f0c:	6878      	ldr	r0, [r7, #4]
 8012f0e:	f002 facc 	bl	80154aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8012f12:	4b26      	ldr	r3, [pc, #152]	; (8012fac <USBD_CDC_DeInit+0x100>)
 8012f14:	781b      	ldrb	r3, [r3, #0]
 8012f16:	f003 020f 	and.w	r2, r3, #15
 8012f1a:	6879      	ldr	r1, [r7, #4]
 8012f1c:	4613      	mov	r3, r2
 8012f1e:	009b      	lsls	r3, r3, #2
 8012f20:	4413      	add	r3, r2
 8012f22:	009b      	lsls	r3, r3, #2
 8012f24:	440b      	add	r3, r1
 8012f26:	3324      	adds	r3, #36	; 0x24
 8012f28:	2200      	movs	r2, #0
 8012f2a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8012f2c:	4b1f      	ldr	r3, [pc, #124]	; (8012fac <USBD_CDC_DeInit+0x100>)
 8012f2e:	781b      	ldrb	r3, [r3, #0]
 8012f30:	f003 020f 	and.w	r2, r3, #15
 8012f34:	6879      	ldr	r1, [r7, #4]
 8012f36:	4613      	mov	r3, r2
 8012f38:	009b      	lsls	r3, r3, #2
 8012f3a:	4413      	add	r3, r2
 8012f3c:	009b      	lsls	r3, r3, #2
 8012f3e:	440b      	add	r3, r1
 8012f40:	3326      	adds	r3, #38	; 0x26
 8012f42:	2200      	movs	r2, #0
 8012f44:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	32b0      	adds	r2, #176	; 0xb0
 8012f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d01f      	beq.n	8012f98 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012f5e:	687a      	ldr	r2, [r7, #4]
 8012f60:	33b0      	adds	r3, #176	; 0xb0
 8012f62:	009b      	lsls	r3, r3, #2
 8012f64:	4413      	add	r3, r2
 8012f66:	685b      	ldr	r3, [r3, #4]
 8012f68:	685b      	ldr	r3, [r3, #4]
 8012f6a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	32b0      	adds	r2, #176	; 0xb0
 8012f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	f002 fba0 	bl	80156c0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	32b0      	adds	r2, #176	; 0xb0
 8012f8a:	2100      	movs	r1, #0
 8012f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	2200      	movs	r2, #0
 8012f94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012f98:	2300      	movs	r3, #0
}
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	3708      	adds	r7, #8
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	bd80      	pop	{r7, pc}
 8012fa2:	bf00      	nop
 8012fa4:	24000097 	.word	0x24000097
 8012fa8:	24000098 	.word	0x24000098
 8012fac:	24000099 	.word	0x24000099

08012fb0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b086      	sub	sp, #24
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
 8012fb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	32b0      	adds	r2, #176	; 0xb0
 8012fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fc8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8012fca:	2300      	movs	r3, #0
 8012fcc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8012fce:	2300      	movs	r3, #0
 8012fd0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8012fd6:	693b      	ldr	r3, [r7, #16]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d101      	bne.n	8012fe0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8012fdc:	2303      	movs	r3, #3
 8012fde:	e0bf      	b.n	8013160 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012fe0:	683b      	ldr	r3, [r7, #0]
 8012fe2:	781b      	ldrb	r3, [r3, #0]
 8012fe4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d050      	beq.n	801308e <USBD_CDC_Setup+0xde>
 8012fec:	2b20      	cmp	r3, #32
 8012fee:	f040 80af 	bne.w	8013150 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8012ff2:	683b      	ldr	r3, [r7, #0]
 8012ff4:	88db      	ldrh	r3, [r3, #6]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d03a      	beq.n	8013070 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012ffa:	683b      	ldr	r3, [r7, #0]
 8012ffc:	781b      	ldrb	r3, [r3, #0]
 8012ffe:	b25b      	sxtb	r3, r3
 8013000:	2b00      	cmp	r3, #0
 8013002:	da1b      	bge.n	801303c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801300a:	687a      	ldr	r2, [r7, #4]
 801300c:	33b0      	adds	r3, #176	; 0xb0
 801300e:	009b      	lsls	r3, r3, #2
 8013010:	4413      	add	r3, r2
 8013012:	685b      	ldr	r3, [r3, #4]
 8013014:	689b      	ldr	r3, [r3, #8]
 8013016:	683a      	ldr	r2, [r7, #0]
 8013018:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801301a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801301c:	683a      	ldr	r2, [r7, #0]
 801301e:	88d2      	ldrh	r2, [r2, #6]
 8013020:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8013022:	683b      	ldr	r3, [r7, #0]
 8013024:	88db      	ldrh	r3, [r3, #6]
 8013026:	2b07      	cmp	r3, #7
 8013028:	bf28      	it	cs
 801302a:	2307      	movcs	r3, #7
 801302c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801302e:	693b      	ldr	r3, [r7, #16]
 8013030:	89fa      	ldrh	r2, [r7, #14]
 8013032:	4619      	mov	r1, r3
 8013034:	6878      	ldr	r0, [r7, #4]
 8013036:	f001 fd89 	bl	8014b4c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801303a:	e090      	b.n	801315e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801303c:	683b      	ldr	r3, [r7, #0]
 801303e:	785a      	ldrb	r2, [r3, #1]
 8013040:	693b      	ldr	r3, [r7, #16]
 8013042:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8013046:	683b      	ldr	r3, [r7, #0]
 8013048:	88db      	ldrh	r3, [r3, #6]
 801304a:	2b3f      	cmp	r3, #63	; 0x3f
 801304c:	d803      	bhi.n	8013056 <USBD_CDC_Setup+0xa6>
 801304e:	683b      	ldr	r3, [r7, #0]
 8013050:	88db      	ldrh	r3, [r3, #6]
 8013052:	b2da      	uxtb	r2, r3
 8013054:	e000      	b.n	8013058 <USBD_CDC_Setup+0xa8>
 8013056:	2240      	movs	r2, #64	; 0x40
 8013058:	693b      	ldr	r3, [r7, #16]
 801305a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801305e:	6939      	ldr	r1, [r7, #16]
 8013060:	693b      	ldr	r3, [r7, #16]
 8013062:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8013066:	461a      	mov	r2, r3
 8013068:	6878      	ldr	r0, [r7, #4]
 801306a:	f001 fd9b 	bl	8014ba4 <USBD_CtlPrepareRx>
      break;
 801306e:	e076      	b.n	801315e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013076:	687a      	ldr	r2, [r7, #4]
 8013078:	33b0      	adds	r3, #176	; 0xb0
 801307a:	009b      	lsls	r3, r3, #2
 801307c:	4413      	add	r3, r2
 801307e:	685b      	ldr	r3, [r3, #4]
 8013080:	689b      	ldr	r3, [r3, #8]
 8013082:	683a      	ldr	r2, [r7, #0]
 8013084:	7850      	ldrb	r0, [r2, #1]
 8013086:	2200      	movs	r2, #0
 8013088:	6839      	ldr	r1, [r7, #0]
 801308a:	4798      	blx	r3
      break;
 801308c:	e067      	b.n	801315e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801308e:	683b      	ldr	r3, [r7, #0]
 8013090:	785b      	ldrb	r3, [r3, #1]
 8013092:	2b0b      	cmp	r3, #11
 8013094:	d851      	bhi.n	801313a <USBD_CDC_Setup+0x18a>
 8013096:	a201      	add	r2, pc, #4	; (adr r2, 801309c <USBD_CDC_Setup+0xec>)
 8013098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801309c:	080130cd 	.word	0x080130cd
 80130a0:	08013149 	.word	0x08013149
 80130a4:	0801313b 	.word	0x0801313b
 80130a8:	0801313b 	.word	0x0801313b
 80130ac:	0801313b 	.word	0x0801313b
 80130b0:	0801313b 	.word	0x0801313b
 80130b4:	0801313b 	.word	0x0801313b
 80130b8:	0801313b 	.word	0x0801313b
 80130bc:	0801313b 	.word	0x0801313b
 80130c0:	0801313b 	.word	0x0801313b
 80130c4:	080130f7 	.word	0x080130f7
 80130c8:	08013121 	.word	0x08013121
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80130d2:	b2db      	uxtb	r3, r3
 80130d4:	2b03      	cmp	r3, #3
 80130d6:	d107      	bne.n	80130e8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80130d8:	f107 030a 	add.w	r3, r7, #10
 80130dc:	2202      	movs	r2, #2
 80130de:	4619      	mov	r1, r3
 80130e0:	6878      	ldr	r0, [r7, #4]
 80130e2:	f001 fd33 	bl	8014b4c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80130e6:	e032      	b.n	801314e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80130e8:	6839      	ldr	r1, [r7, #0]
 80130ea:	6878      	ldr	r0, [r7, #4]
 80130ec:	f001 fcbd 	bl	8014a6a <USBD_CtlError>
            ret = USBD_FAIL;
 80130f0:	2303      	movs	r3, #3
 80130f2:	75fb      	strb	r3, [r7, #23]
          break;
 80130f4:	e02b      	b.n	801314e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80130fc:	b2db      	uxtb	r3, r3
 80130fe:	2b03      	cmp	r3, #3
 8013100:	d107      	bne.n	8013112 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8013102:	f107 030d 	add.w	r3, r7, #13
 8013106:	2201      	movs	r2, #1
 8013108:	4619      	mov	r1, r3
 801310a:	6878      	ldr	r0, [r7, #4]
 801310c:	f001 fd1e 	bl	8014b4c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013110:	e01d      	b.n	801314e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013112:	6839      	ldr	r1, [r7, #0]
 8013114:	6878      	ldr	r0, [r7, #4]
 8013116:	f001 fca8 	bl	8014a6a <USBD_CtlError>
            ret = USBD_FAIL;
 801311a:	2303      	movs	r3, #3
 801311c:	75fb      	strb	r3, [r7, #23]
          break;
 801311e:	e016      	b.n	801314e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013126:	b2db      	uxtb	r3, r3
 8013128:	2b03      	cmp	r3, #3
 801312a:	d00f      	beq.n	801314c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801312c:	6839      	ldr	r1, [r7, #0]
 801312e:	6878      	ldr	r0, [r7, #4]
 8013130:	f001 fc9b 	bl	8014a6a <USBD_CtlError>
            ret = USBD_FAIL;
 8013134:	2303      	movs	r3, #3
 8013136:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8013138:	e008      	b.n	801314c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801313a:	6839      	ldr	r1, [r7, #0]
 801313c:	6878      	ldr	r0, [r7, #4]
 801313e:	f001 fc94 	bl	8014a6a <USBD_CtlError>
          ret = USBD_FAIL;
 8013142:	2303      	movs	r3, #3
 8013144:	75fb      	strb	r3, [r7, #23]
          break;
 8013146:	e002      	b.n	801314e <USBD_CDC_Setup+0x19e>
          break;
 8013148:	bf00      	nop
 801314a:	e008      	b.n	801315e <USBD_CDC_Setup+0x1ae>
          break;
 801314c:	bf00      	nop
      }
      break;
 801314e:	e006      	b.n	801315e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8013150:	6839      	ldr	r1, [r7, #0]
 8013152:	6878      	ldr	r0, [r7, #4]
 8013154:	f001 fc89 	bl	8014a6a <USBD_CtlError>
      ret = USBD_FAIL;
 8013158:	2303      	movs	r3, #3
 801315a:	75fb      	strb	r3, [r7, #23]
      break;
 801315c:	bf00      	nop
  }

  return (uint8_t)ret;
 801315e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013160:	4618      	mov	r0, r3
 8013162:	3718      	adds	r7, #24
 8013164:	46bd      	mov	sp, r7
 8013166:	bd80      	pop	{r7, pc}

08013168 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013168:	b580      	push	{r7, lr}
 801316a:	b084      	sub	sp, #16
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
 8013170:	460b      	mov	r3, r1
 8013172:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801317a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	32b0      	adds	r2, #176	; 0xb0
 8013186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d101      	bne.n	8013192 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801318e:	2303      	movs	r3, #3
 8013190:	e065      	b.n	801325e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	32b0      	adds	r2, #176	; 0xb0
 801319c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131a0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80131a2:	78fb      	ldrb	r3, [r7, #3]
 80131a4:	f003 020f 	and.w	r2, r3, #15
 80131a8:	6879      	ldr	r1, [r7, #4]
 80131aa:	4613      	mov	r3, r2
 80131ac:	009b      	lsls	r3, r3, #2
 80131ae:	4413      	add	r3, r2
 80131b0:	009b      	lsls	r3, r3, #2
 80131b2:	440b      	add	r3, r1
 80131b4:	3318      	adds	r3, #24
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d02f      	beq.n	801321c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80131bc:	78fb      	ldrb	r3, [r7, #3]
 80131be:	f003 020f 	and.w	r2, r3, #15
 80131c2:	6879      	ldr	r1, [r7, #4]
 80131c4:	4613      	mov	r3, r2
 80131c6:	009b      	lsls	r3, r3, #2
 80131c8:	4413      	add	r3, r2
 80131ca:	009b      	lsls	r3, r3, #2
 80131cc:	440b      	add	r3, r1
 80131ce:	3318      	adds	r3, #24
 80131d0:	681a      	ldr	r2, [r3, #0]
 80131d2:	78fb      	ldrb	r3, [r7, #3]
 80131d4:	f003 010f 	and.w	r1, r3, #15
 80131d8:	68f8      	ldr	r0, [r7, #12]
 80131da:	460b      	mov	r3, r1
 80131dc:	00db      	lsls	r3, r3, #3
 80131de:	440b      	add	r3, r1
 80131e0:	009b      	lsls	r3, r3, #2
 80131e2:	4403      	add	r3, r0
 80131e4:	3344      	adds	r3, #68	; 0x44
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80131ec:	fb01 f303 	mul.w	r3, r1, r3
 80131f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d112      	bne.n	801321c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80131f6:	78fb      	ldrb	r3, [r7, #3]
 80131f8:	f003 020f 	and.w	r2, r3, #15
 80131fc:	6879      	ldr	r1, [r7, #4]
 80131fe:	4613      	mov	r3, r2
 8013200:	009b      	lsls	r3, r3, #2
 8013202:	4413      	add	r3, r2
 8013204:	009b      	lsls	r3, r3, #2
 8013206:	440b      	add	r3, r1
 8013208:	3318      	adds	r3, #24
 801320a:	2200      	movs	r2, #0
 801320c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801320e:	78f9      	ldrb	r1, [r7, #3]
 8013210:	2300      	movs	r3, #0
 8013212:	2200      	movs	r2, #0
 8013214:	6878      	ldr	r0, [r7, #4]
 8013216:	f002 f9f0 	bl	80155fa <USBD_LL_Transmit>
 801321a:	e01f      	b.n	801325c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801321c:	68bb      	ldr	r3, [r7, #8]
 801321e:	2200      	movs	r2, #0
 8013220:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801322a:	687a      	ldr	r2, [r7, #4]
 801322c:	33b0      	adds	r3, #176	; 0xb0
 801322e:	009b      	lsls	r3, r3, #2
 8013230:	4413      	add	r3, r2
 8013232:	685b      	ldr	r3, [r3, #4]
 8013234:	691b      	ldr	r3, [r3, #16]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d010      	beq.n	801325c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013240:	687a      	ldr	r2, [r7, #4]
 8013242:	33b0      	adds	r3, #176	; 0xb0
 8013244:	009b      	lsls	r3, r3, #2
 8013246:	4413      	add	r3, r2
 8013248:	685b      	ldr	r3, [r3, #4]
 801324a:	691b      	ldr	r3, [r3, #16]
 801324c:	68ba      	ldr	r2, [r7, #8]
 801324e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8013252:	68ba      	ldr	r2, [r7, #8]
 8013254:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8013258:	78fa      	ldrb	r2, [r7, #3]
 801325a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801325c:	2300      	movs	r3, #0
}
 801325e:	4618      	mov	r0, r3
 8013260:	3710      	adds	r7, #16
 8013262:	46bd      	mov	sp, r7
 8013264:	bd80      	pop	{r7, pc}

08013266 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013266:	b580      	push	{r7, lr}
 8013268:	b084      	sub	sp, #16
 801326a:	af00      	add	r7, sp, #0
 801326c:	6078      	str	r0, [r7, #4]
 801326e:	460b      	mov	r3, r1
 8013270:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	32b0      	adds	r2, #176	; 0xb0
 801327c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013280:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	32b0      	adds	r2, #176	; 0xb0
 801328c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d101      	bne.n	8013298 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8013294:	2303      	movs	r3, #3
 8013296:	e01a      	b.n	80132ce <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013298:	78fb      	ldrb	r3, [r7, #3]
 801329a:	4619      	mov	r1, r3
 801329c:	6878      	ldr	r0, [r7, #4]
 801329e:	f002 f9ee 	bl	801567e <USBD_LL_GetRxDataSize>
 80132a2:	4602      	mov	r2, r0
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80132b0:	687a      	ldr	r2, [r7, #4]
 80132b2:	33b0      	adds	r3, #176	; 0xb0
 80132b4:	009b      	lsls	r3, r3, #2
 80132b6:	4413      	add	r3, r2
 80132b8:	685b      	ldr	r3, [r3, #4]
 80132ba:	68db      	ldr	r3, [r3, #12]
 80132bc:	68fa      	ldr	r2, [r7, #12]
 80132be:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80132c2:	68fa      	ldr	r2, [r7, #12]
 80132c4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80132c8:	4611      	mov	r1, r2
 80132ca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80132cc:	2300      	movs	r3, #0
}
 80132ce:	4618      	mov	r0, r3
 80132d0:	3710      	adds	r7, #16
 80132d2:	46bd      	mov	sp, r7
 80132d4:	bd80      	pop	{r7, pc}

080132d6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80132d6:	b580      	push	{r7, lr}
 80132d8:	b084      	sub	sp, #16
 80132da:	af00      	add	r7, sp, #0
 80132dc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	32b0      	adds	r2, #176	; 0xb0
 80132e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d101      	bne.n	80132f8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80132f4:	2303      	movs	r3, #3
 80132f6:	e025      	b.n	8013344 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80132fe:	687a      	ldr	r2, [r7, #4]
 8013300:	33b0      	adds	r3, #176	; 0xb0
 8013302:	009b      	lsls	r3, r3, #2
 8013304:	4413      	add	r3, r2
 8013306:	685b      	ldr	r3, [r3, #4]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d01a      	beq.n	8013342 <USBD_CDC_EP0_RxReady+0x6c>
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8013312:	2bff      	cmp	r3, #255	; 0xff
 8013314:	d015      	beq.n	8013342 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801331c:	687a      	ldr	r2, [r7, #4]
 801331e:	33b0      	adds	r3, #176	; 0xb0
 8013320:	009b      	lsls	r3, r3, #2
 8013322:	4413      	add	r3, r2
 8013324:	685b      	ldr	r3, [r3, #4]
 8013326:	689b      	ldr	r3, [r3, #8]
 8013328:	68fa      	ldr	r2, [r7, #12]
 801332a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 801332e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8013330:	68fa      	ldr	r2, [r7, #12]
 8013332:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013336:	b292      	uxth	r2, r2
 8013338:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	22ff      	movs	r2, #255	; 0xff
 801333e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8013342:	2300      	movs	r3, #0
}
 8013344:	4618      	mov	r0, r3
 8013346:	3710      	adds	r7, #16
 8013348:	46bd      	mov	sp, r7
 801334a:	bd80      	pop	{r7, pc}

0801334c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801334c:	b580      	push	{r7, lr}
 801334e:	b086      	sub	sp, #24
 8013350:	af00      	add	r7, sp, #0
 8013352:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013354:	2182      	movs	r1, #130	; 0x82
 8013356:	4818      	ldr	r0, [pc, #96]	; (80133b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013358:	f000 fd4f 	bl	8013dfa <USBD_GetEpDesc>
 801335c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801335e:	2101      	movs	r1, #1
 8013360:	4815      	ldr	r0, [pc, #84]	; (80133b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013362:	f000 fd4a 	bl	8013dfa <USBD_GetEpDesc>
 8013366:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013368:	2181      	movs	r1, #129	; 0x81
 801336a:	4813      	ldr	r0, [pc, #76]	; (80133b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801336c:	f000 fd45 	bl	8013dfa <USBD_GetEpDesc>
 8013370:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013372:	697b      	ldr	r3, [r7, #20]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d002      	beq.n	801337e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013378:	697b      	ldr	r3, [r7, #20]
 801337a:	2210      	movs	r2, #16
 801337c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801337e:	693b      	ldr	r3, [r7, #16]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d006      	beq.n	8013392 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013384:	693b      	ldr	r3, [r7, #16]
 8013386:	2200      	movs	r2, #0
 8013388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801338c:	711a      	strb	r2, [r3, #4]
 801338e:	2200      	movs	r2, #0
 8013390:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d006      	beq.n	80133a6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	2200      	movs	r2, #0
 801339c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80133a0:	711a      	strb	r2, [r3, #4]
 80133a2:	2200      	movs	r2, #0
 80133a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	2243      	movs	r2, #67	; 0x43
 80133aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80133ac:	4b02      	ldr	r3, [pc, #8]	; (80133b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80133ae:	4618      	mov	r0, r3
 80133b0:	3718      	adds	r7, #24
 80133b2:	46bd      	mov	sp, r7
 80133b4:	bd80      	pop	{r7, pc}
 80133b6:	bf00      	nop
 80133b8:	24000054 	.word	0x24000054

080133bc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80133bc:	b580      	push	{r7, lr}
 80133be:	b086      	sub	sp, #24
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80133c4:	2182      	movs	r1, #130	; 0x82
 80133c6:	4818      	ldr	r0, [pc, #96]	; (8013428 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80133c8:	f000 fd17 	bl	8013dfa <USBD_GetEpDesc>
 80133cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80133ce:	2101      	movs	r1, #1
 80133d0:	4815      	ldr	r0, [pc, #84]	; (8013428 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80133d2:	f000 fd12 	bl	8013dfa <USBD_GetEpDesc>
 80133d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80133d8:	2181      	movs	r1, #129	; 0x81
 80133da:	4813      	ldr	r0, [pc, #76]	; (8013428 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80133dc:	f000 fd0d 	bl	8013dfa <USBD_GetEpDesc>
 80133e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80133e2:	697b      	ldr	r3, [r7, #20]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d002      	beq.n	80133ee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80133e8:	697b      	ldr	r3, [r7, #20]
 80133ea:	2210      	movs	r2, #16
 80133ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80133ee:	693b      	ldr	r3, [r7, #16]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d006      	beq.n	8013402 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80133f4:	693b      	ldr	r3, [r7, #16]
 80133f6:	2200      	movs	r2, #0
 80133f8:	711a      	strb	r2, [r3, #4]
 80133fa:	2200      	movs	r2, #0
 80133fc:	f042 0202 	orr.w	r2, r2, #2
 8013400:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d006      	beq.n	8013416 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	2200      	movs	r2, #0
 801340c:	711a      	strb	r2, [r3, #4]
 801340e:	2200      	movs	r2, #0
 8013410:	f042 0202 	orr.w	r2, r2, #2
 8013414:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	2243      	movs	r2, #67	; 0x43
 801341a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801341c:	4b02      	ldr	r3, [pc, #8]	; (8013428 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801341e:	4618      	mov	r0, r3
 8013420:	3718      	adds	r7, #24
 8013422:	46bd      	mov	sp, r7
 8013424:	bd80      	pop	{r7, pc}
 8013426:	bf00      	nop
 8013428:	24000054 	.word	0x24000054

0801342c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801342c:	b580      	push	{r7, lr}
 801342e:	b086      	sub	sp, #24
 8013430:	af00      	add	r7, sp, #0
 8013432:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013434:	2182      	movs	r1, #130	; 0x82
 8013436:	4818      	ldr	r0, [pc, #96]	; (8013498 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013438:	f000 fcdf 	bl	8013dfa <USBD_GetEpDesc>
 801343c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801343e:	2101      	movs	r1, #1
 8013440:	4815      	ldr	r0, [pc, #84]	; (8013498 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013442:	f000 fcda 	bl	8013dfa <USBD_GetEpDesc>
 8013446:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013448:	2181      	movs	r1, #129	; 0x81
 801344a:	4813      	ldr	r0, [pc, #76]	; (8013498 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801344c:	f000 fcd5 	bl	8013dfa <USBD_GetEpDesc>
 8013450:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013452:	697b      	ldr	r3, [r7, #20]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d002      	beq.n	801345e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013458:	697b      	ldr	r3, [r7, #20]
 801345a:	2210      	movs	r2, #16
 801345c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801345e:	693b      	ldr	r3, [r7, #16]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d006      	beq.n	8013472 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013464:	693b      	ldr	r3, [r7, #16]
 8013466:	2200      	movs	r2, #0
 8013468:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801346c:	711a      	strb	r2, [r3, #4]
 801346e:	2200      	movs	r2, #0
 8013470:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d006      	beq.n	8013486 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	2200      	movs	r2, #0
 801347c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013480:	711a      	strb	r2, [r3, #4]
 8013482:	2200      	movs	r2, #0
 8013484:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	2243      	movs	r2, #67	; 0x43
 801348a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801348c:	4b02      	ldr	r3, [pc, #8]	; (8013498 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801348e:	4618      	mov	r0, r3
 8013490:	3718      	adds	r7, #24
 8013492:	46bd      	mov	sp, r7
 8013494:	bd80      	pop	{r7, pc}
 8013496:	bf00      	nop
 8013498:	24000054 	.word	0x24000054

0801349c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801349c:	b480      	push	{r7}
 801349e:	b083      	sub	sp, #12
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	220a      	movs	r2, #10
 80134a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80134aa:	4b03      	ldr	r3, [pc, #12]	; (80134b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80134ac:	4618      	mov	r0, r3
 80134ae:	370c      	adds	r7, #12
 80134b0:	46bd      	mov	sp, r7
 80134b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b6:	4770      	bx	lr
 80134b8:	24000010 	.word	0x24000010

080134bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80134bc:	b480      	push	{r7}
 80134be:	b083      	sub	sp, #12
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	6078      	str	r0, [r7, #4]
 80134c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80134c6:	683b      	ldr	r3, [r7, #0]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d101      	bne.n	80134d0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80134cc:	2303      	movs	r3, #3
 80134ce:	e009      	b.n	80134e4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80134d6:	687a      	ldr	r2, [r7, #4]
 80134d8:	33b0      	adds	r3, #176	; 0xb0
 80134da:	009b      	lsls	r3, r3, #2
 80134dc:	4413      	add	r3, r2
 80134de:	683a      	ldr	r2, [r7, #0]
 80134e0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80134e2:	2300      	movs	r3, #0
}
 80134e4:	4618      	mov	r0, r3
 80134e6:	370c      	adds	r7, #12
 80134e8:	46bd      	mov	sp, r7
 80134ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ee:	4770      	bx	lr

080134f0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80134f0:	b480      	push	{r7}
 80134f2:	b087      	sub	sp, #28
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	60f8      	str	r0, [r7, #12]
 80134f8:	60b9      	str	r1, [r7, #8]
 80134fa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	32b0      	adds	r2, #176	; 0xb0
 8013506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801350a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801350c:	697b      	ldr	r3, [r7, #20]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d101      	bne.n	8013516 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013512:	2303      	movs	r3, #3
 8013514:	e008      	b.n	8013528 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8013516:	697b      	ldr	r3, [r7, #20]
 8013518:	68ba      	ldr	r2, [r7, #8]
 801351a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801351e:	697b      	ldr	r3, [r7, #20]
 8013520:	687a      	ldr	r2, [r7, #4]
 8013522:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8013526:	2300      	movs	r3, #0
}
 8013528:	4618      	mov	r0, r3
 801352a:	371c      	adds	r7, #28
 801352c:	46bd      	mov	sp, r7
 801352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013532:	4770      	bx	lr

08013534 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013534:	b480      	push	{r7}
 8013536:	b085      	sub	sp, #20
 8013538:	af00      	add	r7, sp, #0
 801353a:	6078      	str	r0, [r7, #4]
 801353c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	32b0      	adds	r2, #176	; 0xb0
 8013548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801354c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d101      	bne.n	8013558 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8013554:	2303      	movs	r3, #3
 8013556:	e004      	b.n	8013562 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	683a      	ldr	r2, [r7, #0]
 801355c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8013560:	2300      	movs	r3, #0
}
 8013562:	4618      	mov	r0, r3
 8013564:	3714      	adds	r7, #20
 8013566:	46bd      	mov	sp, r7
 8013568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801356c:	4770      	bx	lr
	...

08013570 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8013570:	b580      	push	{r7, lr}
 8013572:	b084      	sub	sp, #16
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	32b0      	adds	r2, #176	; 0xb0
 8013582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013586:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8013588:	2301      	movs	r3, #1
 801358a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801358c:	68bb      	ldr	r3, [r7, #8]
 801358e:	2b00      	cmp	r3, #0
 8013590:	d101      	bne.n	8013596 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013592:	2303      	movs	r3, #3
 8013594:	e025      	b.n	80135e2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8013596:	68bb      	ldr	r3, [r7, #8]
 8013598:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801359c:	2b00      	cmp	r3, #0
 801359e:	d11f      	bne.n	80135e0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80135a0:	68bb      	ldr	r3, [r7, #8]
 80135a2:	2201      	movs	r2, #1
 80135a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80135a8:	4b10      	ldr	r3, [pc, #64]	; (80135ec <USBD_CDC_TransmitPacket+0x7c>)
 80135aa:	781b      	ldrb	r3, [r3, #0]
 80135ac:	f003 020f 	and.w	r2, r3, #15
 80135b0:	68bb      	ldr	r3, [r7, #8]
 80135b2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80135b6:	6878      	ldr	r0, [r7, #4]
 80135b8:	4613      	mov	r3, r2
 80135ba:	009b      	lsls	r3, r3, #2
 80135bc:	4413      	add	r3, r2
 80135be:	009b      	lsls	r3, r3, #2
 80135c0:	4403      	add	r3, r0
 80135c2:	3318      	adds	r3, #24
 80135c4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80135c6:	4b09      	ldr	r3, [pc, #36]	; (80135ec <USBD_CDC_TransmitPacket+0x7c>)
 80135c8:	7819      	ldrb	r1, [r3, #0]
 80135ca:	68bb      	ldr	r3, [r7, #8]
 80135cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80135d0:	68bb      	ldr	r3, [r7, #8]
 80135d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80135d6:	6878      	ldr	r0, [r7, #4]
 80135d8:	f002 f80f 	bl	80155fa <USBD_LL_Transmit>

    ret = USBD_OK;
 80135dc:	2300      	movs	r3, #0
 80135de:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80135e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80135e2:	4618      	mov	r0, r3
 80135e4:	3710      	adds	r7, #16
 80135e6:	46bd      	mov	sp, r7
 80135e8:	bd80      	pop	{r7, pc}
 80135ea:	bf00      	nop
 80135ec:	24000097 	.word	0x24000097

080135f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b084      	sub	sp, #16
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	32b0      	adds	r2, #176	; 0xb0
 8013602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013606:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	32b0      	adds	r2, #176	; 0xb0
 8013612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d101      	bne.n	801361e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801361a:	2303      	movs	r3, #3
 801361c:	e018      	b.n	8013650 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	7c1b      	ldrb	r3, [r3, #16]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d10a      	bne.n	801363c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013626:	4b0c      	ldr	r3, [pc, #48]	; (8013658 <USBD_CDC_ReceivePacket+0x68>)
 8013628:	7819      	ldrb	r1, [r3, #0]
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013630:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013634:	6878      	ldr	r0, [r7, #4]
 8013636:	f002 f801 	bl	801563c <USBD_LL_PrepareReceive>
 801363a:	e008      	b.n	801364e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801363c:	4b06      	ldr	r3, [pc, #24]	; (8013658 <USBD_CDC_ReceivePacket+0x68>)
 801363e:	7819      	ldrb	r1, [r3, #0]
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013646:	2340      	movs	r3, #64	; 0x40
 8013648:	6878      	ldr	r0, [r7, #4]
 801364a:	f001 fff7 	bl	801563c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801364e:	2300      	movs	r3, #0
}
 8013650:	4618      	mov	r0, r3
 8013652:	3710      	adds	r7, #16
 8013654:	46bd      	mov	sp, r7
 8013656:	bd80      	pop	{r7, pc}
 8013658:	24000098 	.word	0x24000098

0801365c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801365c:	b580      	push	{r7, lr}
 801365e:	b086      	sub	sp, #24
 8013660:	af00      	add	r7, sp, #0
 8013662:	60f8      	str	r0, [r7, #12]
 8013664:	60b9      	str	r1, [r7, #8]
 8013666:	4613      	mov	r3, r2
 8013668:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d101      	bne.n	8013674 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013670:	2303      	movs	r3, #3
 8013672:	e01f      	b.n	80136b4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	2200      	movs	r2, #0
 8013678:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	2200      	movs	r2, #0
 8013680:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	2200      	movs	r2, #0
 8013688:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801368c:	68bb      	ldr	r3, [r7, #8]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d003      	beq.n	801369a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	68ba      	ldr	r2, [r7, #8]
 8013696:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	2201      	movs	r2, #1
 801369e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	79fa      	ldrb	r2, [r7, #7]
 80136a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80136a8:	68f8      	ldr	r0, [r7, #12]
 80136aa:	f001 fe6b 	bl	8015384 <USBD_LL_Init>
 80136ae:	4603      	mov	r3, r0
 80136b0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80136b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80136b4:	4618      	mov	r0, r3
 80136b6:	3718      	adds	r7, #24
 80136b8:	46bd      	mov	sp, r7
 80136ba:	bd80      	pop	{r7, pc}

080136bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b084      	sub	sp, #16
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	6078      	str	r0, [r7, #4]
 80136c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80136c6:	2300      	movs	r3, #0
 80136c8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80136ca:	683b      	ldr	r3, [r7, #0]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d101      	bne.n	80136d4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80136d0:	2303      	movs	r3, #3
 80136d2:	e025      	b.n	8013720 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	683a      	ldr	r2, [r7, #0]
 80136d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	32ae      	adds	r2, #174	; 0xae
 80136e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d00f      	beq.n	8013710 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	32ae      	adds	r2, #174	; 0xae
 80136fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013700:	f107 020e 	add.w	r2, r7, #14
 8013704:	4610      	mov	r0, r2
 8013706:	4798      	blx	r3
 8013708:	4602      	mov	r2, r0
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8013716:	1c5a      	adds	r2, r3, #1
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 801371e:	2300      	movs	r3, #0
}
 8013720:	4618      	mov	r0, r3
 8013722:	3710      	adds	r7, #16
 8013724:	46bd      	mov	sp, r7
 8013726:	bd80      	pop	{r7, pc}

08013728 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013728:	b580      	push	{r7, lr}
 801372a:	b082      	sub	sp, #8
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013730:	6878      	ldr	r0, [r7, #4]
 8013732:	f001 fe79 	bl	8015428 <USBD_LL_Start>
 8013736:	4603      	mov	r3, r0
}
 8013738:	4618      	mov	r0, r3
 801373a:	3708      	adds	r7, #8
 801373c:	46bd      	mov	sp, r7
 801373e:	bd80      	pop	{r7, pc}

08013740 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8013740:	b480      	push	{r7}
 8013742:	b083      	sub	sp, #12
 8013744:	af00      	add	r7, sp, #0
 8013746:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013748:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801374a:	4618      	mov	r0, r3
 801374c:	370c      	adds	r7, #12
 801374e:	46bd      	mov	sp, r7
 8013750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013754:	4770      	bx	lr

08013756 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013756:	b580      	push	{r7, lr}
 8013758:	b084      	sub	sp, #16
 801375a:	af00      	add	r7, sp, #0
 801375c:	6078      	str	r0, [r7, #4]
 801375e:	460b      	mov	r3, r1
 8013760:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013762:	2300      	movs	r3, #0
 8013764:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801376c:	2b00      	cmp	r3, #0
 801376e:	d009      	beq.n	8013784 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	78fa      	ldrb	r2, [r7, #3]
 801377a:	4611      	mov	r1, r2
 801377c:	6878      	ldr	r0, [r7, #4]
 801377e:	4798      	blx	r3
 8013780:	4603      	mov	r3, r0
 8013782:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013784:	7bfb      	ldrb	r3, [r7, #15]
}
 8013786:	4618      	mov	r0, r3
 8013788:	3710      	adds	r7, #16
 801378a:	46bd      	mov	sp, r7
 801378c:	bd80      	pop	{r7, pc}

0801378e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801378e:	b580      	push	{r7, lr}
 8013790:	b084      	sub	sp, #16
 8013792:	af00      	add	r7, sp, #0
 8013794:	6078      	str	r0, [r7, #4]
 8013796:	460b      	mov	r3, r1
 8013798:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801379a:	2300      	movs	r3, #0
 801379c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80137a4:	685b      	ldr	r3, [r3, #4]
 80137a6:	78fa      	ldrb	r2, [r7, #3]
 80137a8:	4611      	mov	r1, r2
 80137aa:	6878      	ldr	r0, [r7, #4]
 80137ac:	4798      	blx	r3
 80137ae:	4603      	mov	r3, r0
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d001      	beq.n	80137b8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80137b4:	2303      	movs	r3, #3
 80137b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80137b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80137ba:	4618      	mov	r0, r3
 80137bc:	3710      	adds	r7, #16
 80137be:	46bd      	mov	sp, r7
 80137c0:	bd80      	pop	{r7, pc}

080137c2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80137c2:	b580      	push	{r7, lr}
 80137c4:	b084      	sub	sp, #16
 80137c6:	af00      	add	r7, sp, #0
 80137c8:	6078      	str	r0, [r7, #4]
 80137ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80137d2:	6839      	ldr	r1, [r7, #0]
 80137d4:	4618      	mov	r0, r3
 80137d6:	f001 f90e 	bl	80149f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	2201      	movs	r2, #1
 80137de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80137e8:	461a      	mov	r2, r3
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80137f6:	f003 031f 	and.w	r3, r3, #31
 80137fa:	2b02      	cmp	r3, #2
 80137fc:	d01a      	beq.n	8013834 <USBD_LL_SetupStage+0x72>
 80137fe:	2b02      	cmp	r3, #2
 8013800:	d822      	bhi.n	8013848 <USBD_LL_SetupStage+0x86>
 8013802:	2b00      	cmp	r3, #0
 8013804:	d002      	beq.n	801380c <USBD_LL_SetupStage+0x4a>
 8013806:	2b01      	cmp	r3, #1
 8013808:	d00a      	beq.n	8013820 <USBD_LL_SetupStage+0x5e>
 801380a:	e01d      	b.n	8013848 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013812:	4619      	mov	r1, r3
 8013814:	6878      	ldr	r0, [r7, #4]
 8013816:	f000 fb65 	bl	8013ee4 <USBD_StdDevReq>
 801381a:	4603      	mov	r3, r0
 801381c:	73fb      	strb	r3, [r7, #15]
      break;
 801381e:	e020      	b.n	8013862 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013826:	4619      	mov	r1, r3
 8013828:	6878      	ldr	r0, [r7, #4]
 801382a:	f000 fbcd 	bl	8013fc8 <USBD_StdItfReq>
 801382e:	4603      	mov	r3, r0
 8013830:	73fb      	strb	r3, [r7, #15]
      break;
 8013832:	e016      	b.n	8013862 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801383a:	4619      	mov	r1, r3
 801383c:	6878      	ldr	r0, [r7, #4]
 801383e:	f000 fc2f 	bl	80140a0 <USBD_StdEPReq>
 8013842:	4603      	mov	r3, r0
 8013844:	73fb      	strb	r3, [r7, #15]
      break;
 8013846:	e00c      	b.n	8013862 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801384e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013852:	b2db      	uxtb	r3, r3
 8013854:	4619      	mov	r1, r3
 8013856:	6878      	ldr	r0, [r7, #4]
 8013858:	f001 fe46 	bl	80154e8 <USBD_LL_StallEP>
 801385c:	4603      	mov	r3, r0
 801385e:	73fb      	strb	r3, [r7, #15]
      break;
 8013860:	bf00      	nop
  }

  return ret;
 8013862:	7bfb      	ldrb	r3, [r7, #15]
}
 8013864:	4618      	mov	r0, r3
 8013866:	3710      	adds	r7, #16
 8013868:	46bd      	mov	sp, r7
 801386a:	bd80      	pop	{r7, pc}

0801386c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801386c:	b580      	push	{r7, lr}
 801386e:	b086      	sub	sp, #24
 8013870:	af00      	add	r7, sp, #0
 8013872:	60f8      	str	r0, [r7, #12]
 8013874:	460b      	mov	r3, r1
 8013876:	607a      	str	r2, [r7, #4]
 8013878:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801387a:	2300      	movs	r3, #0
 801387c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801387e:	7afb      	ldrb	r3, [r7, #11]
 8013880:	2b00      	cmp	r3, #0
 8013882:	d16e      	bne.n	8013962 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801388a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013892:	2b03      	cmp	r3, #3
 8013894:	f040 8098 	bne.w	80139c8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013898:	693b      	ldr	r3, [r7, #16]
 801389a:	689a      	ldr	r2, [r3, #8]
 801389c:	693b      	ldr	r3, [r7, #16]
 801389e:	68db      	ldr	r3, [r3, #12]
 80138a0:	429a      	cmp	r2, r3
 80138a2:	d913      	bls.n	80138cc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80138a4:	693b      	ldr	r3, [r7, #16]
 80138a6:	689a      	ldr	r2, [r3, #8]
 80138a8:	693b      	ldr	r3, [r7, #16]
 80138aa:	68db      	ldr	r3, [r3, #12]
 80138ac:	1ad2      	subs	r2, r2, r3
 80138ae:	693b      	ldr	r3, [r7, #16]
 80138b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80138b2:	693b      	ldr	r3, [r7, #16]
 80138b4:	68da      	ldr	r2, [r3, #12]
 80138b6:	693b      	ldr	r3, [r7, #16]
 80138b8:	689b      	ldr	r3, [r3, #8]
 80138ba:	4293      	cmp	r3, r2
 80138bc:	bf28      	it	cs
 80138be:	4613      	movcs	r3, r2
 80138c0:	461a      	mov	r2, r3
 80138c2:	6879      	ldr	r1, [r7, #4]
 80138c4:	68f8      	ldr	r0, [r7, #12]
 80138c6:	f001 f98a 	bl	8014bde <USBD_CtlContinueRx>
 80138ca:	e07d      	b.n	80139c8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80138d2:	f003 031f 	and.w	r3, r3, #31
 80138d6:	2b02      	cmp	r3, #2
 80138d8:	d014      	beq.n	8013904 <USBD_LL_DataOutStage+0x98>
 80138da:	2b02      	cmp	r3, #2
 80138dc:	d81d      	bhi.n	801391a <USBD_LL_DataOutStage+0xae>
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d002      	beq.n	80138e8 <USBD_LL_DataOutStage+0x7c>
 80138e2:	2b01      	cmp	r3, #1
 80138e4:	d003      	beq.n	80138ee <USBD_LL_DataOutStage+0x82>
 80138e6:	e018      	b.n	801391a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80138e8:	2300      	movs	r3, #0
 80138ea:	75bb      	strb	r3, [r7, #22]
            break;
 80138ec:	e018      	b.n	8013920 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80138f4:	b2db      	uxtb	r3, r3
 80138f6:	4619      	mov	r1, r3
 80138f8:	68f8      	ldr	r0, [r7, #12]
 80138fa:	f000 fa64 	bl	8013dc6 <USBD_CoreFindIF>
 80138fe:	4603      	mov	r3, r0
 8013900:	75bb      	strb	r3, [r7, #22]
            break;
 8013902:	e00d      	b.n	8013920 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801390a:	b2db      	uxtb	r3, r3
 801390c:	4619      	mov	r1, r3
 801390e:	68f8      	ldr	r0, [r7, #12]
 8013910:	f000 fa66 	bl	8013de0 <USBD_CoreFindEP>
 8013914:	4603      	mov	r3, r0
 8013916:	75bb      	strb	r3, [r7, #22]
            break;
 8013918:	e002      	b.n	8013920 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801391a:	2300      	movs	r3, #0
 801391c:	75bb      	strb	r3, [r7, #22]
            break;
 801391e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013920:	7dbb      	ldrb	r3, [r7, #22]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d119      	bne.n	801395a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801392c:	b2db      	uxtb	r3, r3
 801392e:	2b03      	cmp	r3, #3
 8013930:	d113      	bne.n	801395a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013932:	7dba      	ldrb	r2, [r7, #22]
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	32ae      	adds	r2, #174	; 0xae
 8013938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801393c:	691b      	ldr	r3, [r3, #16]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d00b      	beq.n	801395a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013942:	7dba      	ldrb	r2, [r7, #22]
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801394a:	7dba      	ldrb	r2, [r7, #22]
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	32ae      	adds	r2, #174	; 0xae
 8013950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013954:	691b      	ldr	r3, [r3, #16]
 8013956:	68f8      	ldr	r0, [r7, #12]
 8013958:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801395a:	68f8      	ldr	r0, [r7, #12]
 801395c:	f001 f950 	bl	8014c00 <USBD_CtlSendStatus>
 8013960:	e032      	b.n	80139c8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013962:	7afb      	ldrb	r3, [r7, #11]
 8013964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013968:	b2db      	uxtb	r3, r3
 801396a:	4619      	mov	r1, r3
 801396c:	68f8      	ldr	r0, [r7, #12]
 801396e:	f000 fa37 	bl	8013de0 <USBD_CoreFindEP>
 8013972:	4603      	mov	r3, r0
 8013974:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013976:	7dbb      	ldrb	r3, [r7, #22]
 8013978:	2bff      	cmp	r3, #255	; 0xff
 801397a:	d025      	beq.n	80139c8 <USBD_LL_DataOutStage+0x15c>
 801397c:	7dbb      	ldrb	r3, [r7, #22]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d122      	bne.n	80139c8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013988:	b2db      	uxtb	r3, r3
 801398a:	2b03      	cmp	r3, #3
 801398c:	d117      	bne.n	80139be <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801398e:	7dba      	ldrb	r2, [r7, #22]
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	32ae      	adds	r2, #174	; 0xae
 8013994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013998:	699b      	ldr	r3, [r3, #24]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d00f      	beq.n	80139be <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801399e:	7dba      	ldrb	r2, [r7, #22]
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80139a6:	7dba      	ldrb	r2, [r7, #22]
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	32ae      	adds	r2, #174	; 0xae
 80139ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139b0:	699b      	ldr	r3, [r3, #24]
 80139b2:	7afa      	ldrb	r2, [r7, #11]
 80139b4:	4611      	mov	r1, r2
 80139b6:	68f8      	ldr	r0, [r7, #12]
 80139b8:	4798      	blx	r3
 80139ba:	4603      	mov	r3, r0
 80139bc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80139be:	7dfb      	ldrb	r3, [r7, #23]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d001      	beq.n	80139c8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80139c4:	7dfb      	ldrb	r3, [r7, #23]
 80139c6:	e000      	b.n	80139ca <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80139c8:	2300      	movs	r3, #0
}
 80139ca:	4618      	mov	r0, r3
 80139cc:	3718      	adds	r7, #24
 80139ce:	46bd      	mov	sp, r7
 80139d0:	bd80      	pop	{r7, pc}

080139d2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80139d2:	b580      	push	{r7, lr}
 80139d4:	b086      	sub	sp, #24
 80139d6:	af00      	add	r7, sp, #0
 80139d8:	60f8      	str	r0, [r7, #12]
 80139da:	460b      	mov	r3, r1
 80139dc:	607a      	str	r2, [r7, #4]
 80139de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80139e0:	7afb      	ldrb	r3, [r7, #11]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d16f      	bne.n	8013ac6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	3314      	adds	r3, #20
 80139ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80139f2:	2b02      	cmp	r3, #2
 80139f4:	d15a      	bne.n	8013aac <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80139f6:	693b      	ldr	r3, [r7, #16]
 80139f8:	689a      	ldr	r2, [r3, #8]
 80139fa:	693b      	ldr	r3, [r7, #16]
 80139fc:	68db      	ldr	r3, [r3, #12]
 80139fe:	429a      	cmp	r2, r3
 8013a00:	d914      	bls.n	8013a2c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013a02:	693b      	ldr	r3, [r7, #16]
 8013a04:	689a      	ldr	r2, [r3, #8]
 8013a06:	693b      	ldr	r3, [r7, #16]
 8013a08:	68db      	ldr	r3, [r3, #12]
 8013a0a:	1ad2      	subs	r2, r2, r3
 8013a0c:	693b      	ldr	r3, [r7, #16]
 8013a0e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013a10:	693b      	ldr	r3, [r7, #16]
 8013a12:	689b      	ldr	r3, [r3, #8]
 8013a14:	461a      	mov	r2, r3
 8013a16:	6879      	ldr	r1, [r7, #4]
 8013a18:	68f8      	ldr	r0, [r7, #12]
 8013a1a:	f001 f8b2 	bl	8014b82 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013a1e:	2300      	movs	r3, #0
 8013a20:	2200      	movs	r2, #0
 8013a22:	2100      	movs	r1, #0
 8013a24:	68f8      	ldr	r0, [r7, #12]
 8013a26:	f001 fe09 	bl	801563c <USBD_LL_PrepareReceive>
 8013a2a:	e03f      	b.n	8013aac <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013a2c:	693b      	ldr	r3, [r7, #16]
 8013a2e:	68da      	ldr	r2, [r3, #12]
 8013a30:	693b      	ldr	r3, [r7, #16]
 8013a32:	689b      	ldr	r3, [r3, #8]
 8013a34:	429a      	cmp	r2, r3
 8013a36:	d11c      	bne.n	8013a72 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013a38:	693b      	ldr	r3, [r7, #16]
 8013a3a:	685a      	ldr	r2, [r3, #4]
 8013a3c:	693b      	ldr	r3, [r7, #16]
 8013a3e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013a40:	429a      	cmp	r2, r3
 8013a42:	d316      	bcc.n	8013a72 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013a44:	693b      	ldr	r3, [r7, #16]
 8013a46:	685a      	ldr	r2, [r3, #4]
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013a4e:	429a      	cmp	r2, r3
 8013a50:	d20f      	bcs.n	8013a72 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013a52:	2200      	movs	r2, #0
 8013a54:	2100      	movs	r1, #0
 8013a56:	68f8      	ldr	r0, [r7, #12]
 8013a58:	f001 f893 	bl	8014b82 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	2200      	movs	r2, #0
 8013a60:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013a64:	2300      	movs	r3, #0
 8013a66:	2200      	movs	r2, #0
 8013a68:	2100      	movs	r1, #0
 8013a6a:	68f8      	ldr	r0, [r7, #12]
 8013a6c:	f001 fde6 	bl	801563c <USBD_LL_PrepareReceive>
 8013a70:	e01c      	b.n	8013aac <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013a78:	b2db      	uxtb	r3, r3
 8013a7a:	2b03      	cmp	r3, #3
 8013a7c:	d10f      	bne.n	8013a9e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a84:	68db      	ldr	r3, [r3, #12]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d009      	beq.n	8013a9e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	2200      	movs	r2, #0
 8013a8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a98:	68db      	ldr	r3, [r3, #12]
 8013a9a:	68f8      	ldr	r0, [r7, #12]
 8013a9c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013a9e:	2180      	movs	r1, #128	; 0x80
 8013aa0:	68f8      	ldr	r0, [r7, #12]
 8013aa2:	f001 fd21 	bl	80154e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013aa6:	68f8      	ldr	r0, [r7, #12]
 8013aa8:	f001 f8bd 	bl	8014c26 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d03a      	beq.n	8013b2c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8013ab6:	68f8      	ldr	r0, [r7, #12]
 8013ab8:	f7ff fe42 	bl	8013740 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	2200      	movs	r2, #0
 8013ac0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013ac4:	e032      	b.n	8013b2c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013ac6:	7afb      	ldrb	r3, [r7, #11]
 8013ac8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013acc:	b2db      	uxtb	r3, r3
 8013ace:	4619      	mov	r1, r3
 8013ad0:	68f8      	ldr	r0, [r7, #12]
 8013ad2:	f000 f985 	bl	8013de0 <USBD_CoreFindEP>
 8013ad6:	4603      	mov	r3, r0
 8013ad8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013ada:	7dfb      	ldrb	r3, [r7, #23]
 8013adc:	2bff      	cmp	r3, #255	; 0xff
 8013ade:	d025      	beq.n	8013b2c <USBD_LL_DataInStage+0x15a>
 8013ae0:	7dfb      	ldrb	r3, [r7, #23]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d122      	bne.n	8013b2c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013aec:	b2db      	uxtb	r3, r3
 8013aee:	2b03      	cmp	r3, #3
 8013af0:	d11c      	bne.n	8013b2c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8013af2:	7dfa      	ldrb	r2, [r7, #23]
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	32ae      	adds	r2, #174	; 0xae
 8013af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013afc:	695b      	ldr	r3, [r3, #20]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d014      	beq.n	8013b2c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8013b02:	7dfa      	ldrb	r2, [r7, #23]
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013b0a:	7dfa      	ldrb	r2, [r7, #23]
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	32ae      	adds	r2, #174	; 0xae
 8013b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b14:	695b      	ldr	r3, [r3, #20]
 8013b16:	7afa      	ldrb	r2, [r7, #11]
 8013b18:	4611      	mov	r1, r2
 8013b1a:	68f8      	ldr	r0, [r7, #12]
 8013b1c:	4798      	blx	r3
 8013b1e:	4603      	mov	r3, r0
 8013b20:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8013b22:	7dbb      	ldrb	r3, [r7, #22]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d001      	beq.n	8013b2c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013b28:	7dbb      	ldrb	r3, [r7, #22]
 8013b2a:	e000      	b.n	8013b2e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013b2c:	2300      	movs	r3, #0
}
 8013b2e:	4618      	mov	r0, r3
 8013b30:	3718      	adds	r7, #24
 8013b32:	46bd      	mov	sp, r7
 8013b34:	bd80      	pop	{r7, pc}

08013b36 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013b36:	b580      	push	{r7, lr}
 8013b38:	b084      	sub	sp, #16
 8013b3a:	af00      	add	r7, sp, #0
 8013b3c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013b3e:	2300      	movs	r3, #0
 8013b40:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	2201      	movs	r2, #1
 8013b46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	2200      	movs	r2, #0
 8013b4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	2200      	movs	r2, #0
 8013b56:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	2200      	movs	r2, #0
 8013b5c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	2200      	movs	r2, #0
 8013b64:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d014      	beq.n	8013b9c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013b78:	685b      	ldr	r3, [r3, #4]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d00e      	beq.n	8013b9c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013b84:	685b      	ldr	r3, [r3, #4]
 8013b86:	687a      	ldr	r2, [r7, #4]
 8013b88:	6852      	ldr	r2, [r2, #4]
 8013b8a:	b2d2      	uxtb	r2, r2
 8013b8c:	4611      	mov	r1, r2
 8013b8e:	6878      	ldr	r0, [r7, #4]
 8013b90:	4798      	blx	r3
 8013b92:	4603      	mov	r3, r0
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d001      	beq.n	8013b9c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8013b98:	2303      	movs	r3, #3
 8013b9a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013b9c:	2340      	movs	r3, #64	; 0x40
 8013b9e:	2200      	movs	r2, #0
 8013ba0:	2100      	movs	r1, #0
 8013ba2:	6878      	ldr	r0, [r7, #4]
 8013ba4:	f001 fc5b 	bl	801545e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	2201      	movs	r2, #1
 8013bac:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	2240      	movs	r2, #64	; 0x40
 8013bb4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013bb8:	2340      	movs	r3, #64	; 0x40
 8013bba:	2200      	movs	r2, #0
 8013bbc:	2180      	movs	r1, #128	; 0x80
 8013bbe:	6878      	ldr	r0, [r7, #4]
 8013bc0:	f001 fc4d 	bl	801545e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	2201      	movs	r2, #1
 8013bc8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	2240      	movs	r2, #64	; 0x40
 8013bce:	621a      	str	r2, [r3, #32]

  return ret;
 8013bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	3710      	adds	r7, #16
 8013bd6:	46bd      	mov	sp, r7
 8013bd8:	bd80      	pop	{r7, pc}

08013bda <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013bda:	b480      	push	{r7}
 8013bdc:	b083      	sub	sp, #12
 8013bde:	af00      	add	r7, sp, #0
 8013be0:	6078      	str	r0, [r7, #4]
 8013be2:	460b      	mov	r3, r1
 8013be4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	78fa      	ldrb	r2, [r7, #3]
 8013bea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013bec:	2300      	movs	r3, #0
}
 8013bee:	4618      	mov	r0, r3
 8013bf0:	370c      	adds	r7, #12
 8013bf2:	46bd      	mov	sp, r7
 8013bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf8:	4770      	bx	lr

08013bfa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013bfa:	b480      	push	{r7}
 8013bfc:	b083      	sub	sp, #12
 8013bfe:	af00      	add	r7, sp, #0
 8013c00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013c08:	b2db      	uxtb	r3, r3
 8013c0a:	2b04      	cmp	r3, #4
 8013c0c:	d006      	beq.n	8013c1c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013c14:	b2da      	uxtb	r2, r3
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	2204      	movs	r2, #4
 8013c20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013c24:	2300      	movs	r3, #0
}
 8013c26:	4618      	mov	r0, r3
 8013c28:	370c      	adds	r7, #12
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c30:	4770      	bx	lr

08013c32 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013c32:	b480      	push	{r7}
 8013c34:	b083      	sub	sp, #12
 8013c36:	af00      	add	r7, sp, #0
 8013c38:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013c40:	b2db      	uxtb	r3, r3
 8013c42:	2b04      	cmp	r3, #4
 8013c44:	d106      	bne.n	8013c54 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8013c4c:	b2da      	uxtb	r2, r3
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8013c54:	2300      	movs	r3, #0
}
 8013c56:	4618      	mov	r0, r3
 8013c58:	370c      	adds	r7, #12
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c60:	4770      	bx	lr

08013c62 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013c62:	b580      	push	{r7, lr}
 8013c64:	b082      	sub	sp, #8
 8013c66:	af00      	add	r7, sp, #0
 8013c68:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013c70:	b2db      	uxtb	r3, r3
 8013c72:	2b03      	cmp	r3, #3
 8013c74:	d110      	bne.n	8013c98 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d00b      	beq.n	8013c98 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c86:	69db      	ldr	r3, [r3, #28]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d005      	beq.n	8013c98 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c92:	69db      	ldr	r3, [r3, #28]
 8013c94:	6878      	ldr	r0, [r7, #4]
 8013c96:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8013c98:	2300      	movs	r3, #0
}
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	3708      	adds	r7, #8
 8013c9e:	46bd      	mov	sp, r7
 8013ca0:	bd80      	pop	{r7, pc}

08013ca2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8013ca2:	b580      	push	{r7, lr}
 8013ca4:	b082      	sub	sp, #8
 8013ca6:	af00      	add	r7, sp, #0
 8013ca8:	6078      	str	r0, [r7, #4]
 8013caa:	460b      	mov	r3, r1
 8013cac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	32ae      	adds	r2, #174	; 0xae
 8013cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d101      	bne.n	8013cc4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8013cc0:	2303      	movs	r3, #3
 8013cc2:	e01c      	b.n	8013cfe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013cca:	b2db      	uxtb	r3, r3
 8013ccc:	2b03      	cmp	r3, #3
 8013cce:	d115      	bne.n	8013cfc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	32ae      	adds	r2, #174	; 0xae
 8013cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cde:	6a1b      	ldr	r3, [r3, #32]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d00b      	beq.n	8013cfc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	32ae      	adds	r2, #174	; 0xae
 8013cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cf2:	6a1b      	ldr	r3, [r3, #32]
 8013cf4:	78fa      	ldrb	r2, [r7, #3]
 8013cf6:	4611      	mov	r1, r2
 8013cf8:	6878      	ldr	r0, [r7, #4]
 8013cfa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013cfc:	2300      	movs	r3, #0
}
 8013cfe:	4618      	mov	r0, r3
 8013d00:	3708      	adds	r7, #8
 8013d02:	46bd      	mov	sp, r7
 8013d04:	bd80      	pop	{r7, pc}

08013d06 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8013d06:	b580      	push	{r7, lr}
 8013d08:	b082      	sub	sp, #8
 8013d0a:	af00      	add	r7, sp, #0
 8013d0c:	6078      	str	r0, [r7, #4]
 8013d0e:	460b      	mov	r3, r1
 8013d10:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	32ae      	adds	r2, #174	; 0xae
 8013d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d101      	bne.n	8013d28 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8013d24:	2303      	movs	r3, #3
 8013d26:	e01c      	b.n	8013d62 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d2e:	b2db      	uxtb	r3, r3
 8013d30:	2b03      	cmp	r3, #3
 8013d32:	d115      	bne.n	8013d60 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	32ae      	adds	r2, #174	; 0xae
 8013d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d00b      	beq.n	8013d60 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	32ae      	adds	r2, #174	; 0xae
 8013d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d58:	78fa      	ldrb	r2, [r7, #3]
 8013d5a:	4611      	mov	r1, r2
 8013d5c:	6878      	ldr	r0, [r7, #4]
 8013d5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013d60:	2300      	movs	r3, #0
}
 8013d62:	4618      	mov	r0, r3
 8013d64:	3708      	adds	r7, #8
 8013d66:	46bd      	mov	sp, r7
 8013d68:	bd80      	pop	{r7, pc}

08013d6a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8013d6a:	b480      	push	{r7}
 8013d6c:	b083      	sub	sp, #12
 8013d6e:	af00      	add	r7, sp, #0
 8013d70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013d72:	2300      	movs	r3, #0
}
 8013d74:	4618      	mov	r0, r3
 8013d76:	370c      	adds	r7, #12
 8013d78:	46bd      	mov	sp, r7
 8013d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7e:	4770      	bx	lr

08013d80 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b084      	sub	sp, #16
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8013d88:	2300      	movs	r3, #0
 8013d8a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	2201      	movs	r2, #1
 8013d90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d00e      	beq.n	8013dbc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013da4:	685b      	ldr	r3, [r3, #4]
 8013da6:	687a      	ldr	r2, [r7, #4]
 8013da8:	6852      	ldr	r2, [r2, #4]
 8013daa:	b2d2      	uxtb	r2, r2
 8013dac:	4611      	mov	r1, r2
 8013dae:	6878      	ldr	r0, [r7, #4]
 8013db0:	4798      	blx	r3
 8013db2:	4603      	mov	r3, r0
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d001      	beq.n	8013dbc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8013db8:	2303      	movs	r3, #3
 8013dba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	3710      	adds	r7, #16
 8013dc2:	46bd      	mov	sp, r7
 8013dc4:	bd80      	pop	{r7, pc}

08013dc6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013dc6:	b480      	push	{r7}
 8013dc8:	b083      	sub	sp, #12
 8013dca:	af00      	add	r7, sp, #0
 8013dcc:	6078      	str	r0, [r7, #4]
 8013dce:	460b      	mov	r3, r1
 8013dd0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013dd2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	370c      	adds	r7, #12
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dde:	4770      	bx	lr

08013de0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013de0:	b480      	push	{r7}
 8013de2:	b083      	sub	sp, #12
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
 8013de8:	460b      	mov	r3, r1
 8013dea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013dec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013dee:	4618      	mov	r0, r3
 8013df0:	370c      	adds	r7, #12
 8013df2:	46bd      	mov	sp, r7
 8013df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df8:	4770      	bx	lr

08013dfa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8013dfa:	b580      	push	{r7, lr}
 8013dfc:	b086      	sub	sp, #24
 8013dfe:	af00      	add	r7, sp, #0
 8013e00:	6078      	str	r0, [r7, #4]
 8013e02:	460b      	mov	r3, r1
 8013e04:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8013e0e:	2300      	movs	r3, #0
 8013e10:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	885b      	ldrh	r3, [r3, #2]
 8013e16:	b29a      	uxth	r2, r3
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	781b      	ldrb	r3, [r3, #0]
 8013e1c:	b29b      	uxth	r3, r3
 8013e1e:	429a      	cmp	r2, r3
 8013e20:	d920      	bls.n	8013e64 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	781b      	ldrb	r3, [r3, #0]
 8013e26:	b29b      	uxth	r3, r3
 8013e28:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8013e2a:	e013      	b.n	8013e54 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8013e2c:	f107 030a 	add.w	r3, r7, #10
 8013e30:	4619      	mov	r1, r3
 8013e32:	6978      	ldr	r0, [r7, #20]
 8013e34:	f000 f81b 	bl	8013e6e <USBD_GetNextDesc>
 8013e38:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8013e3a:	697b      	ldr	r3, [r7, #20]
 8013e3c:	785b      	ldrb	r3, [r3, #1]
 8013e3e:	2b05      	cmp	r3, #5
 8013e40:	d108      	bne.n	8013e54 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8013e42:	697b      	ldr	r3, [r7, #20]
 8013e44:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8013e46:	693b      	ldr	r3, [r7, #16]
 8013e48:	789b      	ldrb	r3, [r3, #2]
 8013e4a:	78fa      	ldrb	r2, [r7, #3]
 8013e4c:	429a      	cmp	r2, r3
 8013e4e:	d008      	beq.n	8013e62 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8013e50:	2300      	movs	r3, #0
 8013e52:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	885b      	ldrh	r3, [r3, #2]
 8013e58:	b29a      	uxth	r2, r3
 8013e5a:	897b      	ldrh	r3, [r7, #10]
 8013e5c:	429a      	cmp	r2, r3
 8013e5e:	d8e5      	bhi.n	8013e2c <USBD_GetEpDesc+0x32>
 8013e60:	e000      	b.n	8013e64 <USBD_GetEpDesc+0x6a>
          break;
 8013e62:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8013e64:	693b      	ldr	r3, [r7, #16]
}
 8013e66:	4618      	mov	r0, r3
 8013e68:	3718      	adds	r7, #24
 8013e6a:	46bd      	mov	sp, r7
 8013e6c:	bd80      	pop	{r7, pc}

08013e6e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8013e6e:	b480      	push	{r7}
 8013e70:	b085      	sub	sp, #20
 8013e72:	af00      	add	r7, sp, #0
 8013e74:	6078      	str	r0, [r7, #4]
 8013e76:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8013e7c:	683b      	ldr	r3, [r7, #0]
 8013e7e:	881a      	ldrh	r2, [r3, #0]
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	781b      	ldrb	r3, [r3, #0]
 8013e84:	b29b      	uxth	r3, r3
 8013e86:	4413      	add	r3, r2
 8013e88:	b29a      	uxth	r2, r3
 8013e8a:	683b      	ldr	r3, [r7, #0]
 8013e8c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	781b      	ldrb	r3, [r3, #0]
 8013e92:	461a      	mov	r2, r3
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	4413      	add	r3, r2
 8013e98:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8013e9a:	68fb      	ldr	r3, [r7, #12]
}
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	3714      	adds	r7, #20
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea6:	4770      	bx	lr

08013ea8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013ea8:	b480      	push	{r7}
 8013eaa:	b087      	sub	sp, #28
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013eb4:	697b      	ldr	r3, [r7, #20]
 8013eb6:	781b      	ldrb	r3, [r3, #0]
 8013eb8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013eba:	697b      	ldr	r3, [r7, #20]
 8013ebc:	3301      	adds	r3, #1
 8013ebe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013ec0:	697b      	ldr	r3, [r7, #20]
 8013ec2:	781b      	ldrb	r3, [r3, #0]
 8013ec4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013ec6:	8a3b      	ldrh	r3, [r7, #16]
 8013ec8:	021b      	lsls	r3, r3, #8
 8013eca:	b21a      	sxth	r2, r3
 8013ecc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013ed0:	4313      	orrs	r3, r2
 8013ed2:	b21b      	sxth	r3, r3
 8013ed4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013ed6:	89fb      	ldrh	r3, [r7, #14]
}
 8013ed8:	4618      	mov	r0, r3
 8013eda:	371c      	adds	r7, #28
 8013edc:	46bd      	mov	sp, r7
 8013ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee2:	4770      	bx	lr

08013ee4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b084      	sub	sp, #16
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]
 8013eec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013eee:	2300      	movs	r3, #0
 8013ef0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013ef2:	683b      	ldr	r3, [r7, #0]
 8013ef4:	781b      	ldrb	r3, [r3, #0]
 8013ef6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013efa:	2b40      	cmp	r3, #64	; 0x40
 8013efc:	d005      	beq.n	8013f0a <USBD_StdDevReq+0x26>
 8013efe:	2b40      	cmp	r3, #64	; 0x40
 8013f00:	d857      	bhi.n	8013fb2 <USBD_StdDevReq+0xce>
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d00f      	beq.n	8013f26 <USBD_StdDevReq+0x42>
 8013f06:	2b20      	cmp	r3, #32
 8013f08:	d153      	bne.n	8013fb2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	32ae      	adds	r2, #174	; 0xae
 8013f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f18:	689b      	ldr	r3, [r3, #8]
 8013f1a:	6839      	ldr	r1, [r7, #0]
 8013f1c:	6878      	ldr	r0, [r7, #4]
 8013f1e:	4798      	blx	r3
 8013f20:	4603      	mov	r3, r0
 8013f22:	73fb      	strb	r3, [r7, #15]
      break;
 8013f24:	e04a      	b.n	8013fbc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013f26:	683b      	ldr	r3, [r7, #0]
 8013f28:	785b      	ldrb	r3, [r3, #1]
 8013f2a:	2b09      	cmp	r3, #9
 8013f2c:	d83b      	bhi.n	8013fa6 <USBD_StdDevReq+0xc2>
 8013f2e:	a201      	add	r2, pc, #4	; (adr r2, 8013f34 <USBD_StdDevReq+0x50>)
 8013f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f34:	08013f89 	.word	0x08013f89
 8013f38:	08013f9d 	.word	0x08013f9d
 8013f3c:	08013fa7 	.word	0x08013fa7
 8013f40:	08013f93 	.word	0x08013f93
 8013f44:	08013fa7 	.word	0x08013fa7
 8013f48:	08013f67 	.word	0x08013f67
 8013f4c:	08013f5d 	.word	0x08013f5d
 8013f50:	08013fa7 	.word	0x08013fa7
 8013f54:	08013f7f 	.word	0x08013f7f
 8013f58:	08013f71 	.word	0x08013f71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013f5c:	6839      	ldr	r1, [r7, #0]
 8013f5e:	6878      	ldr	r0, [r7, #4]
 8013f60:	f000 fa3c 	bl	80143dc <USBD_GetDescriptor>
          break;
 8013f64:	e024      	b.n	8013fb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013f66:	6839      	ldr	r1, [r7, #0]
 8013f68:	6878      	ldr	r0, [r7, #4]
 8013f6a:	f000 fba1 	bl	80146b0 <USBD_SetAddress>
          break;
 8013f6e:	e01f      	b.n	8013fb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013f70:	6839      	ldr	r1, [r7, #0]
 8013f72:	6878      	ldr	r0, [r7, #4]
 8013f74:	f000 fbe0 	bl	8014738 <USBD_SetConfig>
 8013f78:	4603      	mov	r3, r0
 8013f7a:	73fb      	strb	r3, [r7, #15]
          break;
 8013f7c:	e018      	b.n	8013fb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8013f7e:	6839      	ldr	r1, [r7, #0]
 8013f80:	6878      	ldr	r0, [r7, #4]
 8013f82:	f000 fc83 	bl	801488c <USBD_GetConfig>
          break;
 8013f86:	e013      	b.n	8013fb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013f88:	6839      	ldr	r1, [r7, #0]
 8013f8a:	6878      	ldr	r0, [r7, #4]
 8013f8c:	f000 fcb4 	bl	80148f8 <USBD_GetStatus>
          break;
 8013f90:	e00e      	b.n	8013fb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013f92:	6839      	ldr	r1, [r7, #0]
 8013f94:	6878      	ldr	r0, [r7, #4]
 8013f96:	f000 fce3 	bl	8014960 <USBD_SetFeature>
          break;
 8013f9a:	e009      	b.n	8013fb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013f9c:	6839      	ldr	r1, [r7, #0]
 8013f9e:	6878      	ldr	r0, [r7, #4]
 8013fa0:	f000 fd07 	bl	80149b2 <USBD_ClrFeature>
          break;
 8013fa4:	e004      	b.n	8013fb0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8013fa6:	6839      	ldr	r1, [r7, #0]
 8013fa8:	6878      	ldr	r0, [r7, #4]
 8013faa:	f000 fd5e 	bl	8014a6a <USBD_CtlError>
          break;
 8013fae:	bf00      	nop
      }
      break;
 8013fb0:	e004      	b.n	8013fbc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8013fb2:	6839      	ldr	r1, [r7, #0]
 8013fb4:	6878      	ldr	r0, [r7, #4]
 8013fb6:	f000 fd58 	bl	8014a6a <USBD_CtlError>
      break;
 8013fba:	bf00      	nop
  }

  return ret;
 8013fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	3710      	adds	r7, #16
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	bd80      	pop	{r7, pc}
 8013fc6:	bf00      	nop

08013fc8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b084      	sub	sp, #16
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	6078      	str	r0, [r7, #4]
 8013fd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013fd2:	2300      	movs	r3, #0
 8013fd4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013fd6:	683b      	ldr	r3, [r7, #0]
 8013fd8:	781b      	ldrb	r3, [r3, #0]
 8013fda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013fde:	2b40      	cmp	r3, #64	; 0x40
 8013fe0:	d005      	beq.n	8013fee <USBD_StdItfReq+0x26>
 8013fe2:	2b40      	cmp	r3, #64	; 0x40
 8013fe4:	d852      	bhi.n	801408c <USBD_StdItfReq+0xc4>
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d001      	beq.n	8013fee <USBD_StdItfReq+0x26>
 8013fea:	2b20      	cmp	r3, #32
 8013fec:	d14e      	bne.n	801408c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ff4:	b2db      	uxtb	r3, r3
 8013ff6:	3b01      	subs	r3, #1
 8013ff8:	2b02      	cmp	r3, #2
 8013ffa:	d840      	bhi.n	801407e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013ffc:	683b      	ldr	r3, [r7, #0]
 8013ffe:	889b      	ldrh	r3, [r3, #4]
 8014000:	b2db      	uxtb	r3, r3
 8014002:	2b01      	cmp	r3, #1
 8014004:	d836      	bhi.n	8014074 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8014006:	683b      	ldr	r3, [r7, #0]
 8014008:	889b      	ldrh	r3, [r3, #4]
 801400a:	b2db      	uxtb	r3, r3
 801400c:	4619      	mov	r1, r3
 801400e:	6878      	ldr	r0, [r7, #4]
 8014010:	f7ff fed9 	bl	8013dc6 <USBD_CoreFindIF>
 8014014:	4603      	mov	r3, r0
 8014016:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014018:	7bbb      	ldrb	r3, [r7, #14]
 801401a:	2bff      	cmp	r3, #255	; 0xff
 801401c:	d01d      	beq.n	801405a <USBD_StdItfReq+0x92>
 801401e:	7bbb      	ldrb	r3, [r7, #14]
 8014020:	2b00      	cmp	r3, #0
 8014022:	d11a      	bne.n	801405a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8014024:	7bba      	ldrb	r2, [r7, #14]
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	32ae      	adds	r2, #174	; 0xae
 801402a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801402e:	689b      	ldr	r3, [r3, #8]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d00f      	beq.n	8014054 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8014034:	7bba      	ldrb	r2, [r7, #14]
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801403c:	7bba      	ldrb	r2, [r7, #14]
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	32ae      	adds	r2, #174	; 0xae
 8014042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014046:	689b      	ldr	r3, [r3, #8]
 8014048:	6839      	ldr	r1, [r7, #0]
 801404a:	6878      	ldr	r0, [r7, #4]
 801404c:	4798      	blx	r3
 801404e:	4603      	mov	r3, r0
 8014050:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014052:	e004      	b.n	801405e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8014054:	2303      	movs	r3, #3
 8014056:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014058:	e001      	b.n	801405e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801405a:	2303      	movs	r3, #3
 801405c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801405e:	683b      	ldr	r3, [r7, #0]
 8014060:	88db      	ldrh	r3, [r3, #6]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d110      	bne.n	8014088 <USBD_StdItfReq+0xc0>
 8014066:	7bfb      	ldrb	r3, [r7, #15]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d10d      	bne.n	8014088 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801406c:	6878      	ldr	r0, [r7, #4]
 801406e:	f000 fdc7 	bl	8014c00 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014072:	e009      	b.n	8014088 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8014074:	6839      	ldr	r1, [r7, #0]
 8014076:	6878      	ldr	r0, [r7, #4]
 8014078:	f000 fcf7 	bl	8014a6a <USBD_CtlError>
          break;
 801407c:	e004      	b.n	8014088 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801407e:	6839      	ldr	r1, [r7, #0]
 8014080:	6878      	ldr	r0, [r7, #4]
 8014082:	f000 fcf2 	bl	8014a6a <USBD_CtlError>
          break;
 8014086:	e000      	b.n	801408a <USBD_StdItfReq+0xc2>
          break;
 8014088:	bf00      	nop
      }
      break;
 801408a:	e004      	b.n	8014096 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801408c:	6839      	ldr	r1, [r7, #0]
 801408e:	6878      	ldr	r0, [r7, #4]
 8014090:	f000 fceb 	bl	8014a6a <USBD_CtlError>
      break;
 8014094:	bf00      	nop
  }

  return ret;
 8014096:	7bfb      	ldrb	r3, [r7, #15]
}
 8014098:	4618      	mov	r0, r3
 801409a:	3710      	adds	r7, #16
 801409c:	46bd      	mov	sp, r7
 801409e:	bd80      	pop	{r7, pc}

080140a0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80140a0:	b580      	push	{r7, lr}
 80140a2:	b084      	sub	sp, #16
 80140a4:	af00      	add	r7, sp, #0
 80140a6:	6078      	str	r0, [r7, #4]
 80140a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80140aa:	2300      	movs	r3, #0
 80140ac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80140ae:	683b      	ldr	r3, [r7, #0]
 80140b0:	889b      	ldrh	r3, [r3, #4]
 80140b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80140b4:	683b      	ldr	r3, [r7, #0]
 80140b6:	781b      	ldrb	r3, [r3, #0]
 80140b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80140bc:	2b40      	cmp	r3, #64	; 0x40
 80140be:	d007      	beq.n	80140d0 <USBD_StdEPReq+0x30>
 80140c0:	2b40      	cmp	r3, #64	; 0x40
 80140c2:	f200 817f 	bhi.w	80143c4 <USBD_StdEPReq+0x324>
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d02a      	beq.n	8014120 <USBD_StdEPReq+0x80>
 80140ca:	2b20      	cmp	r3, #32
 80140cc:	f040 817a 	bne.w	80143c4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80140d0:	7bbb      	ldrb	r3, [r7, #14]
 80140d2:	4619      	mov	r1, r3
 80140d4:	6878      	ldr	r0, [r7, #4]
 80140d6:	f7ff fe83 	bl	8013de0 <USBD_CoreFindEP>
 80140da:	4603      	mov	r3, r0
 80140dc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80140de:	7b7b      	ldrb	r3, [r7, #13]
 80140e0:	2bff      	cmp	r3, #255	; 0xff
 80140e2:	f000 8174 	beq.w	80143ce <USBD_StdEPReq+0x32e>
 80140e6:	7b7b      	ldrb	r3, [r7, #13]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	f040 8170 	bne.w	80143ce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80140ee:	7b7a      	ldrb	r2, [r7, #13]
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80140f6:	7b7a      	ldrb	r2, [r7, #13]
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	32ae      	adds	r2, #174	; 0xae
 80140fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014100:	689b      	ldr	r3, [r3, #8]
 8014102:	2b00      	cmp	r3, #0
 8014104:	f000 8163 	beq.w	80143ce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8014108:	7b7a      	ldrb	r2, [r7, #13]
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	32ae      	adds	r2, #174	; 0xae
 801410e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014112:	689b      	ldr	r3, [r3, #8]
 8014114:	6839      	ldr	r1, [r7, #0]
 8014116:	6878      	ldr	r0, [r7, #4]
 8014118:	4798      	blx	r3
 801411a:	4603      	mov	r3, r0
 801411c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801411e:	e156      	b.n	80143ce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014120:	683b      	ldr	r3, [r7, #0]
 8014122:	785b      	ldrb	r3, [r3, #1]
 8014124:	2b03      	cmp	r3, #3
 8014126:	d008      	beq.n	801413a <USBD_StdEPReq+0x9a>
 8014128:	2b03      	cmp	r3, #3
 801412a:	f300 8145 	bgt.w	80143b8 <USBD_StdEPReq+0x318>
 801412e:	2b00      	cmp	r3, #0
 8014130:	f000 809b 	beq.w	801426a <USBD_StdEPReq+0x1ca>
 8014134:	2b01      	cmp	r3, #1
 8014136:	d03c      	beq.n	80141b2 <USBD_StdEPReq+0x112>
 8014138:	e13e      	b.n	80143b8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014140:	b2db      	uxtb	r3, r3
 8014142:	2b02      	cmp	r3, #2
 8014144:	d002      	beq.n	801414c <USBD_StdEPReq+0xac>
 8014146:	2b03      	cmp	r3, #3
 8014148:	d016      	beq.n	8014178 <USBD_StdEPReq+0xd8>
 801414a:	e02c      	b.n	80141a6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801414c:	7bbb      	ldrb	r3, [r7, #14]
 801414e:	2b00      	cmp	r3, #0
 8014150:	d00d      	beq.n	801416e <USBD_StdEPReq+0xce>
 8014152:	7bbb      	ldrb	r3, [r7, #14]
 8014154:	2b80      	cmp	r3, #128	; 0x80
 8014156:	d00a      	beq.n	801416e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014158:	7bbb      	ldrb	r3, [r7, #14]
 801415a:	4619      	mov	r1, r3
 801415c:	6878      	ldr	r0, [r7, #4]
 801415e:	f001 f9c3 	bl	80154e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014162:	2180      	movs	r1, #128	; 0x80
 8014164:	6878      	ldr	r0, [r7, #4]
 8014166:	f001 f9bf 	bl	80154e8 <USBD_LL_StallEP>
 801416a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801416c:	e020      	b.n	80141b0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801416e:	6839      	ldr	r1, [r7, #0]
 8014170:	6878      	ldr	r0, [r7, #4]
 8014172:	f000 fc7a 	bl	8014a6a <USBD_CtlError>
              break;
 8014176:	e01b      	b.n	80141b0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014178:	683b      	ldr	r3, [r7, #0]
 801417a:	885b      	ldrh	r3, [r3, #2]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d10e      	bne.n	801419e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014180:	7bbb      	ldrb	r3, [r7, #14]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d00b      	beq.n	801419e <USBD_StdEPReq+0xfe>
 8014186:	7bbb      	ldrb	r3, [r7, #14]
 8014188:	2b80      	cmp	r3, #128	; 0x80
 801418a:	d008      	beq.n	801419e <USBD_StdEPReq+0xfe>
 801418c:	683b      	ldr	r3, [r7, #0]
 801418e:	88db      	ldrh	r3, [r3, #6]
 8014190:	2b00      	cmp	r3, #0
 8014192:	d104      	bne.n	801419e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014194:	7bbb      	ldrb	r3, [r7, #14]
 8014196:	4619      	mov	r1, r3
 8014198:	6878      	ldr	r0, [r7, #4]
 801419a:	f001 f9a5 	bl	80154e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801419e:	6878      	ldr	r0, [r7, #4]
 80141a0:	f000 fd2e 	bl	8014c00 <USBD_CtlSendStatus>

              break;
 80141a4:	e004      	b.n	80141b0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80141a6:	6839      	ldr	r1, [r7, #0]
 80141a8:	6878      	ldr	r0, [r7, #4]
 80141aa:	f000 fc5e 	bl	8014a6a <USBD_CtlError>
              break;
 80141ae:	bf00      	nop
          }
          break;
 80141b0:	e107      	b.n	80143c2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80141b8:	b2db      	uxtb	r3, r3
 80141ba:	2b02      	cmp	r3, #2
 80141bc:	d002      	beq.n	80141c4 <USBD_StdEPReq+0x124>
 80141be:	2b03      	cmp	r3, #3
 80141c0:	d016      	beq.n	80141f0 <USBD_StdEPReq+0x150>
 80141c2:	e04b      	b.n	801425c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80141c4:	7bbb      	ldrb	r3, [r7, #14]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d00d      	beq.n	80141e6 <USBD_StdEPReq+0x146>
 80141ca:	7bbb      	ldrb	r3, [r7, #14]
 80141cc:	2b80      	cmp	r3, #128	; 0x80
 80141ce:	d00a      	beq.n	80141e6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80141d0:	7bbb      	ldrb	r3, [r7, #14]
 80141d2:	4619      	mov	r1, r3
 80141d4:	6878      	ldr	r0, [r7, #4]
 80141d6:	f001 f987 	bl	80154e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80141da:	2180      	movs	r1, #128	; 0x80
 80141dc:	6878      	ldr	r0, [r7, #4]
 80141de:	f001 f983 	bl	80154e8 <USBD_LL_StallEP>
 80141e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80141e4:	e040      	b.n	8014268 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80141e6:	6839      	ldr	r1, [r7, #0]
 80141e8:	6878      	ldr	r0, [r7, #4]
 80141ea:	f000 fc3e 	bl	8014a6a <USBD_CtlError>
              break;
 80141ee:	e03b      	b.n	8014268 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80141f0:	683b      	ldr	r3, [r7, #0]
 80141f2:	885b      	ldrh	r3, [r3, #2]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d136      	bne.n	8014266 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80141f8:	7bbb      	ldrb	r3, [r7, #14]
 80141fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d004      	beq.n	801420c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014202:	7bbb      	ldrb	r3, [r7, #14]
 8014204:	4619      	mov	r1, r3
 8014206:	6878      	ldr	r0, [r7, #4]
 8014208:	f001 f98d 	bl	8015526 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801420c:	6878      	ldr	r0, [r7, #4]
 801420e:	f000 fcf7 	bl	8014c00 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8014212:	7bbb      	ldrb	r3, [r7, #14]
 8014214:	4619      	mov	r1, r3
 8014216:	6878      	ldr	r0, [r7, #4]
 8014218:	f7ff fde2 	bl	8013de0 <USBD_CoreFindEP>
 801421c:	4603      	mov	r3, r0
 801421e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014220:	7b7b      	ldrb	r3, [r7, #13]
 8014222:	2bff      	cmp	r3, #255	; 0xff
 8014224:	d01f      	beq.n	8014266 <USBD_StdEPReq+0x1c6>
 8014226:	7b7b      	ldrb	r3, [r7, #13]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d11c      	bne.n	8014266 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801422c:	7b7a      	ldrb	r2, [r7, #13]
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8014234:	7b7a      	ldrb	r2, [r7, #13]
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	32ae      	adds	r2, #174	; 0xae
 801423a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801423e:	689b      	ldr	r3, [r3, #8]
 8014240:	2b00      	cmp	r3, #0
 8014242:	d010      	beq.n	8014266 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014244:	7b7a      	ldrb	r2, [r7, #13]
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	32ae      	adds	r2, #174	; 0xae
 801424a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801424e:	689b      	ldr	r3, [r3, #8]
 8014250:	6839      	ldr	r1, [r7, #0]
 8014252:	6878      	ldr	r0, [r7, #4]
 8014254:	4798      	blx	r3
 8014256:	4603      	mov	r3, r0
 8014258:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801425a:	e004      	b.n	8014266 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801425c:	6839      	ldr	r1, [r7, #0]
 801425e:	6878      	ldr	r0, [r7, #4]
 8014260:	f000 fc03 	bl	8014a6a <USBD_CtlError>
              break;
 8014264:	e000      	b.n	8014268 <USBD_StdEPReq+0x1c8>
              break;
 8014266:	bf00      	nop
          }
          break;
 8014268:	e0ab      	b.n	80143c2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014270:	b2db      	uxtb	r3, r3
 8014272:	2b02      	cmp	r3, #2
 8014274:	d002      	beq.n	801427c <USBD_StdEPReq+0x1dc>
 8014276:	2b03      	cmp	r3, #3
 8014278:	d032      	beq.n	80142e0 <USBD_StdEPReq+0x240>
 801427a:	e097      	b.n	80143ac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801427c:	7bbb      	ldrb	r3, [r7, #14]
 801427e:	2b00      	cmp	r3, #0
 8014280:	d007      	beq.n	8014292 <USBD_StdEPReq+0x1f2>
 8014282:	7bbb      	ldrb	r3, [r7, #14]
 8014284:	2b80      	cmp	r3, #128	; 0x80
 8014286:	d004      	beq.n	8014292 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8014288:	6839      	ldr	r1, [r7, #0]
 801428a:	6878      	ldr	r0, [r7, #4]
 801428c:	f000 fbed 	bl	8014a6a <USBD_CtlError>
                break;
 8014290:	e091      	b.n	80143b6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014292:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014296:	2b00      	cmp	r3, #0
 8014298:	da0b      	bge.n	80142b2 <USBD_StdEPReq+0x212>
 801429a:	7bbb      	ldrb	r3, [r7, #14]
 801429c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80142a0:	4613      	mov	r3, r2
 80142a2:	009b      	lsls	r3, r3, #2
 80142a4:	4413      	add	r3, r2
 80142a6:	009b      	lsls	r3, r3, #2
 80142a8:	3310      	adds	r3, #16
 80142aa:	687a      	ldr	r2, [r7, #4]
 80142ac:	4413      	add	r3, r2
 80142ae:	3304      	adds	r3, #4
 80142b0:	e00b      	b.n	80142ca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80142b2:	7bbb      	ldrb	r3, [r7, #14]
 80142b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80142b8:	4613      	mov	r3, r2
 80142ba:	009b      	lsls	r3, r3, #2
 80142bc:	4413      	add	r3, r2
 80142be:	009b      	lsls	r3, r3, #2
 80142c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80142c4:	687a      	ldr	r2, [r7, #4]
 80142c6:	4413      	add	r3, r2
 80142c8:	3304      	adds	r3, #4
 80142ca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80142cc:	68bb      	ldr	r3, [r7, #8]
 80142ce:	2200      	movs	r2, #0
 80142d0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80142d2:	68bb      	ldr	r3, [r7, #8]
 80142d4:	2202      	movs	r2, #2
 80142d6:	4619      	mov	r1, r3
 80142d8:	6878      	ldr	r0, [r7, #4]
 80142da:	f000 fc37 	bl	8014b4c <USBD_CtlSendData>
              break;
 80142de:	e06a      	b.n	80143b6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80142e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	da11      	bge.n	801430c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80142e8:	7bbb      	ldrb	r3, [r7, #14]
 80142ea:	f003 020f 	and.w	r2, r3, #15
 80142ee:	6879      	ldr	r1, [r7, #4]
 80142f0:	4613      	mov	r3, r2
 80142f2:	009b      	lsls	r3, r3, #2
 80142f4:	4413      	add	r3, r2
 80142f6:	009b      	lsls	r3, r3, #2
 80142f8:	440b      	add	r3, r1
 80142fa:	3324      	adds	r3, #36	; 0x24
 80142fc:	881b      	ldrh	r3, [r3, #0]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d117      	bne.n	8014332 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014302:	6839      	ldr	r1, [r7, #0]
 8014304:	6878      	ldr	r0, [r7, #4]
 8014306:	f000 fbb0 	bl	8014a6a <USBD_CtlError>
                  break;
 801430a:	e054      	b.n	80143b6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801430c:	7bbb      	ldrb	r3, [r7, #14]
 801430e:	f003 020f 	and.w	r2, r3, #15
 8014312:	6879      	ldr	r1, [r7, #4]
 8014314:	4613      	mov	r3, r2
 8014316:	009b      	lsls	r3, r3, #2
 8014318:	4413      	add	r3, r2
 801431a:	009b      	lsls	r3, r3, #2
 801431c:	440b      	add	r3, r1
 801431e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014322:	881b      	ldrh	r3, [r3, #0]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d104      	bne.n	8014332 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014328:	6839      	ldr	r1, [r7, #0]
 801432a:	6878      	ldr	r0, [r7, #4]
 801432c:	f000 fb9d 	bl	8014a6a <USBD_CtlError>
                  break;
 8014330:	e041      	b.n	80143b6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014332:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014336:	2b00      	cmp	r3, #0
 8014338:	da0b      	bge.n	8014352 <USBD_StdEPReq+0x2b2>
 801433a:	7bbb      	ldrb	r3, [r7, #14]
 801433c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014340:	4613      	mov	r3, r2
 8014342:	009b      	lsls	r3, r3, #2
 8014344:	4413      	add	r3, r2
 8014346:	009b      	lsls	r3, r3, #2
 8014348:	3310      	adds	r3, #16
 801434a:	687a      	ldr	r2, [r7, #4]
 801434c:	4413      	add	r3, r2
 801434e:	3304      	adds	r3, #4
 8014350:	e00b      	b.n	801436a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014352:	7bbb      	ldrb	r3, [r7, #14]
 8014354:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014358:	4613      	mov	r3, r2
 801435a:	009b      	lsls	r3, r3, #2
 801435c:	4413      	add	r3, r2
 801435e:	009b      	lsls	r3, r3, #2
 8014360:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014364:	687a      	ldr	r2, [r7, #4]
 8014366:	4413      	add	r3, r2
 8014368:	3304      	adds	r3, #4
 801436a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801436c:	7bbb      	ldrb	r3, [r7, #14]
 801436e:	2b00      	cmp	r3, #0
 8014370:	d002      	beq.n	8014378 <USBD_StdEPReq+0x2d8>
 8014372:	7bbb      	ldrb	r3, [r7, #14]
 8014374:	2b80      	cmp	r3, #128	; 0x80
 8014376:	d103      	bne.n	8014380 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8014378:	68bb      	ldr	r3, [r7, #8]
 801437a:	2200      	movs	r2, #0
 801437c:	601a      	str	r2, [r3, #0]
 801437e:	e00e      	b.n	801439e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014380:	7bbb      	ldrb	r3, [r7, #14]
 8014382:	4619      	mov	r1, r3
 8014384:	6878      	ldr	r0, [r7, #4]
 8014386:	f001 f8ed 	bl	8015564 <USBD_LL_IsStallEP>
 801438a:	4603      	mov	r3, r0
 801438c:	2b00      	cmp	r3, #0
 801438e:	d003      	beq.n	8014398 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8014390:	68bb      	ldr	r3, [r7, #8]
 8014392:	2201      	movs	r2, #1
 8014394:	601a      	str	r2, [r3, #0]
 8014396:	e002      	b.n	801439e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8014398:	68bb      	ldr	r3, [r7, #8]
 801439a:	2200      	movs	r2, #0
 801439c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801439e:	68bb      	ldr	r3, [r7, #8]
 80143a0:	2202      	movs	r2, #2
 80143a2:	4619      	mov	r1, r3
 80143a4:	6878      	ldr	r0, [r7, #4]
 80143a6:	f000 fbd1 	bl	8014b4c <USBD_CtlSendData>
              break;
 80143aa:	e004      	b.n	80143b6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80143ac:	6839      	ldr	r1, [r7, #0]
 80143ae:	6878      	ldr	r0, [r7, #4]
 80143b0:	f000 fb5b 	bl	8014a6a <USBD_CtlError>
              break;
 80143b4:	bf00      	nop
          }
          break;
 80143b6:	e004      	b.n	80143c2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80143b8:	6839      	ldr	r1, [r7, #0]
 80143ba:	6878      	ldr	r0, [r7, #4]
 80143bc:	f000 fb55 	bl	8014a6a <USBD_CtlError>
          break;
 80143c0:	bf00      	nop
      }
      break;
 80143c2:	e005      	b.n	80143d0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80143c4:	6839      	ldr	r1, [r7, #0]
 80143c6:	6878      	ldr	r0, [r7, #4]
 80143c8:	f000 fb4f 	bl	8014a6a <USBD_CtlError>
      break;
 80143cc:	e000      	b.n	80143d0 <USBD_StdEPReq+0x330>
      break;
 80143ce:	bf00      	nop
  }

  return ret;
 80143d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80143d2:	4618      	mov	r0, r3
 80143d4:	3710      	adds	r7, #16
 80143d6:	46bd      	mov	sp, r7
 80143d8:	bd80      	pop	{r7, pc}
	...

080143dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80143dc:	b580      	push	{r7, lr}
 80143de:	b084      	sub	sp, #16
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	6078      	str	r0, [r7, #4]
 80143e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80143e6:	2300      	movs	r3, #0
 80143e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80143ea:	2300      	movs	r3, #0
 80143ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80143ee:	2300      	movs	r3, #0
 80143f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80143f2:	683b      	ldr	r3, [r7, #0]
 80143f4:	885b      	ldrh	r3, [r3, #2]
 80143f6:	0a1b      	lsrs	r3, r3, #8
 80143f8:	b29b      	uxth	r3, r3
 80143fa:	3b01      	subs	r3, #1
 80143fc:	2b06      	cmp	r3, #6
 80143fe:	f200 8128 	bhi.w	8014652 <USBD_GetDescriptor+0x276>
 8014402:	a201      	add	r2, pc, #4	; (adr r2, 8014408 <USBD_GetDescriptor+0x2c>)
 8014404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014408:	08014425 	.word	0x08014425
 801440c:	0801443d 	.word	0x0801443d
 8014410:	0801447d 	.word	0x0801447d
 8014414:	08014653 	.word	0x08014653
 8014418:	08014653 	.word	0x08014653
 801441c:	080145f3 	.word	0x080145f3
 8014420:	0801461f 	.word	0x0801461f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	687a      	ldr	r2, [r7, #4]
 801442e:	7c12      	ldrb	r2, [r2, #16]
 8014430:	f107 0108 	add.w	r1, r7, #8
 8014434:	4610      	mov	r0, r2
 8014436:	4798      	blx	r3
 8014438:	60f8      	str	r0, [r7, #12]
      break;
 801443a:	e112      	b.n	8014662 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	7c1b      	ldrb	r3, [r3, #16]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d10d      	bne.n	8014460 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801444a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801444c:	f107 0208 	add.w	r2, r7, #8
 8014450:	4610      	mov	r0, r2
 8014452:	4798      	blx	r3
 8014454:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	3301      	adds	r3, #1
 801445a:	2202      	movs	r2, #2
 801445c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801445e:	e100      	b.n	8014662 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014468:	f107 0208 	add.w	r2, r7, #8
 801446c:	4610      	mov	r0, r2
 801446e:	4798      	blx	r3
 8014470:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	3301      	adds	r3, #1
 8014476:	2202      	movs	r2, #2
 8014478:	701a      	strb	r2, [r3, #0]
      break;
 801447a:	e0f2      	b.n	8014662 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801447c:	683b      	ldr	r3, [r7, #0]
 801447e:	885b      	ldrh	r3, [r3, #2]
 8014480:	b2db      	uxtb	r3, r3
 8014482:	2b05      	cmp	r3, #5
 8014484:	f200 80ac 	bhi.w	80145e0 <USBD_GetDescriptor+0x204>
 8014488:	a201      	add	r2, pc, #4	; (adr r2, 8014490 <USBD_GetDescriptor+0xb4>)
 801448a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801448e:	bf00      	nop
 8014490:	080144a9 	.word	0x080144a9
 8014494:	080144dd 	.word	0x080144dd
 8014498:	08014511 	.word	0x08014511
 801449c:	08014545 	.word	0x08014545
 80144a0:	08014579 	.word	0x08014579
 80144a4:	080145ad 	.word	0x080145ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80144ae:	685b      	ldr	r3, [r3, #4]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d00b      	beq.n	80144cc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80144ba:	685b      	ldr	r3, [r3, #4]
 80144bc:	687a      	ldr	r2, [r7, #4]
 80144be:	7c12      	ldrb	r2, [r2, #16]
 80144c0:	f107 0108 	add.w	r1, r7, #8
 80144c4:	4610      	mov	r0, r2
 80144c6:	4798      	blx	r3
 80144c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80144ca:	e091      	b.n	80145f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80144cc:	6839      	ldr	r1, [r7, #0]
 80144ce:	6878      	ldr	r0, [r7, #4]
 80144d0:	f000 facb 	bl	8014a6a <USBD_CtlError>
            err++;
 80144d4:	7afb      	ldrb	r3, [r7, #11]
 80144d6:	3301      	adds	r3, #1
 80144d8:	72fb      	strb	r3, [r7, #11]
          break;
 80144da:	e089      	b.n	80145f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80144e2:	689b      	ldr	r3, [r3, #8]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d00b      	beq.n	8014500 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80144ee:	689b      	ldr	r3, [r3, #8]
 80144f0:	687a      	ldr	r2, [r7, #4]
 80144f2:	7c12      	ldrb	r2, [r2, #16]
 80144f4:	f107 0108 	add.w	r1, r7, #8
 80144f8:	4610      	mov	r0, r2
 80144fa:	4798      	blx	r3
 80144fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80144fe:	e077      	b.n	80145f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014500:	6839      	ldr	r1, [r7, #0]
 8014502:	6878      	ldr	r0, [r7, #4]
 8014504:	f000 fab1 	bl	8014a6a <USBD_CtlError>
            err++;
 8014508:	7afb      	ldrb	r3, [r7, #11]
 801450a:	3301      	adds	r3, #1
 801450c:	72fb      	strb	r3, [r7, #11]
          break;
 801450e:	e06f      	b.n	80145f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014516:	68db      	ldr	r3, [r3, #12]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d00b      	beq.n	8014534 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014522:	68db      	ldr	r3, [r3, #12]
 8014524:	687a      	ldr	r2, [r7, #4]
 8014526:	7c12      	ldrb	r2, [r2, #16]
 8014528:	f107 0108 	add.w	r1, r7, #8
 801452c:	4610      	mov	r0, r2
 801452e:	4798      	blx	r3
 8014530:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014532:	e05d      	b.n	80145f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014534:	6839      	ldr	r1, [r7, #0]
 8014536:	6878      	ldr	r0, [r7, #4]
 8014538:	f000 fa97 	bl	8014a6a <USBD_CtlError>
            err++;
 801453c:	7afb      	ldrb	r3, [r7, #11]
 801453e:	3301      	adds	r3, #1
 8014540:	72fb      	strb	r3, [r7, #11]
          break;
 8014542:	e055      	b.n	80145f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801454a:	691b      	ldr	r3, [r3, #16]
 801454c:	2b00      	cmp	r3, #0
 801454e:	d00b      	beq.n	8014568 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014556:	691b      	ldr	r3, [r3, #16]
 8014558:	687a      	ldr	r2, [r7, #4]
 801455a:	7c12      	ldrb	r2, [r2, #16]
 801455c:	f107 0108 	add.w	r1, r7, #8
 8014560:	4610      	mov	r0, r2
 8014562:	4798      	blx	r3
 8014564:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014566:	e043      	b.n	80145f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014568:	6839      	ldr	r1, [r7, #0]
 801456a:	6878      	ldr	r0, [r7, #4]
 801456c:	f000 fa7d 	bl	8014a6a <USBD_CtlError>
            err++;
 8014570:	7afb      	ldrb	r3, [r7, #11]
 8014572:	3301      	adds	r3, #1
 8014574:	72fb      	strb	r3, [r7, #11]
          break;
 8014576:	e03b      	b.n	80145f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801457e:	695b      	ldr	r3, [r3, #20]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d00b      	beq.n	801459c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801458a:	695b      	ldr	r3, [r3, #20]
 801458c:	687a      	ldr	r2, [r7, #4]
 801458e:	7c12      	ldrb	r2, [r2, #16]
 8014590:	f107 0108 	add.w	r1, r7, #8
 8014594:	4610      	mov	r0, r2
 8014596:	4798      	blx	r3
 8014598:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801459a:	e029      	b.n	80145f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801459c:	6839      	ldr	r1, [r7, #0]
 801459e:	6878      	ldr	r0, [r7, #4]
 80145a0:	f000 fa63 	bl	8014a6a <USBD_CtlError>
            err++;
 80145a4:	7afb      	ldrb	r3, [r7, #11]
 80145a6:	3301      	adds	r3, #1
 80145a8:	72fb      	strb	r3, [r7, #11]
          break;
 80145aa:	e021      	b.n	80145f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80145b2:	699b      	ldr	r3, [r3, #24]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d00b      	beq.n	80145d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80145be:	699b      	ldr	r3, [r3, #24]
 80145c0:	687a      	ldr	r2, [r7, #4]
 80145c2:	7c12      	ldrb	r2, [r2, #16]
 80145c4:	f107 0108 	add.w	r1, r7, #8
 80145c8:	4610      	mov	r0, r2
 80145ca:	4798      	blx	r3
 80145cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80145ce:	e00f      	b.n	80145f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80145d0:	6839      	ldr	r1, [r7, #0]
 80145d2:	6878      	ldr	r0, [r7, #4]
 80145d4:	f000 fa49 	bl	8014a6a <USBD_CtlError>
            err++;
 80145d8:	7afb      	ldrb	r3, [r7, #11]
 80145da:	3301      	adds	r3, #1
 80145dc:	72fb      	strb	r3, [r7, #11]
          break;
 80145de:	e007      	b.n	80145f0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80145e0:	6839      	ldr	r1, [r7, #0]
 80145e2:	6878      	ldr	r0, [r7, #4]
 80145e4:	f000 fa41 	bl	8014a6a <USBD_CtlError>
          err++;
 80145e8:	7afb      	ldrb	r3, [r7, #11]
 80145ea:	3301      	adds	r3, #1
 80145ec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80145ee:	bf00      	nop
      }
      break;
 80145f0:	e037      	b.n	8014662 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	7c1b      	ldrb	r3, [r3, #16]
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d109      	bne.n	801460e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014602:	f107 0208 	add.w	r2, r7, #8
 8014606:	4610      	mov	r0, r2
 8014608:	4798      	blx	r3
 801460a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801460c:	e029      	b.n	8014662 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801460e:	6839      	ldr	r1, [r7, #0]
 8014610:	6878      	ldr	r0, [r7, #4]
 8014612:	f000 fa2a 	bl	8014a6a <USBD_CtlError>
        err++;
 8014616:	7afb      	ldrb	r3, [r7, #11]
 8014618:	3301      	adds	r3, #1
 801461a:	72fb      	strb	r3, [r7, #11]
      break;
 801461c:	e021      	b.n	8014662 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	7c1b      	ldrb	r3, [r3, #16]
 8014622:	2b00      	cmp	r3, #0
 8014624:	d10d      	bne.n	8014642 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801462c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801462e:	f107 0208 	add.w	r2, r7, #8
 8014632:	4610      	mov	r0, r2
 8014634:	4798      	blx	r3
 8014636:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	3301      	adds	r3, #1
 801463c:	2207      	movs	r2, #7
 801463e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014640:	e00f      	b.n	8014662 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014642:	6839      	ldr	r1, [r7, #0]
 8014644:	6878      	ldr	r0, [r7, #4]
 8014646:	f000 fa10 	bl	8014a6a <USBD_CtlError>
        err++;
 801464a:	7afb      	ldrb	r3, [r7, #11]
 801464c:	3301      	adds	r3, #1
 801464e:	72fb      	strb	r3, [r7, #11]
      break;
 8014650:	e007      	b.n	8014662 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8014652:	6839      	ldr	r1, [r7, #0]
 8014654:	6878      	ldr	r0, [r7, #4]
 8014656:	f000 fa08 	bl	8014a6a <USBD_CtlError>
      err++;
 801465a:	7afb      	ldrb	r3, [r7, #11]
 801465c:	3301      	adds	r3, #1
 801465e:	72fb      	strb	r3, [r7, #11]
      break;
 8014660:	bf00      	nop
  }

  if (err != 0U)
 8014662:	7afb      	ldrb	r3, [r7, #11]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d11e      	bne.n	80146a6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8014668:	683b      	ldr	r3, [r7, #0]
 801466a:	88db      	ldrh	r3, [r3, #6]
 801466c:	2b00      	cmp	r3, #0
 801466e:	d016      	beq.n	801469e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8014670:	893b      	ldrh	r3, [r7, #8]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d00e      	beq.n	8014694 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8014676:	683b      	ldr	r3, [r7, #0]
 8014678:	88da      	ldrh	r2, [r3, #6]
 801467a:	893b      	ldrh	r3, [r7, #8]
 801467c:	4293      	cmp	r3, r2
 801467e:	bf28      	it	cs
 8014680:	4613      	movcs	r3, r2
 8014682:	b29b      	uxth	r3, r3
 8014684:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014686:	893b      	ldrh	r3, [r7, #8]
 8014688:	461a      	mov	r2, r3
 801468a:	68f9      	ldr	r1, [r7, #12]
 801468c:	6878      	ldr	r0, [r7, #4]
 801468e:	f000 fa5d 	bl	8014b4c <USBD_CtlSendData>
 8014692:	e009      	b.n	80146a8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014694:	6839      	ldr	r1, [r7, #0]
 8014696:	6878      	ldr	r0, [r7, #4]
 8014698:	f000 f9e7 	bl	8014a6a <USBD_CtlError>
 801469c:	e004      	b.n	80146a8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801469e:	6878      	ldr	r0, [r7, #4]
 80146a0:	f000 faae 	bl	8014c00 <USBD_CtlSendStatus>
 80146a4:	e000      	b.n	80146a8 <USBD_GetDescriptor+0x2cc>
    return;
 80146a6:	bf00      	nop
  }
}
 80146a8:	3710      	adds	r7, #16
 80146aa:	46bd      	mov	sp, r7
 80146ac:	bd80      	pop	{r7, pc}
 80146ae:	bf00      	nop

080146b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80146b0:	b580      	push	{r7, lr}
 80146b2:	b084      	sub	sp, #16
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	6078      	str	r0, [r7, #4]
 80146b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80146ba:	683b      	ldr	r3, [r7, #0]
 80146bc:	889b      	ldrh	r3, [r3, #4]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d131      	bne.n	8014726 <USBD_SetAddress+0x76>
 80146c2:	683b      	ldr	r3, [r7, #0]
 80146c4:	88db      	ldrh	r3, [r3, #6]
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d12d      	bne.n	8014726 <USBD_SetAddress+0x76>
 80146ca:	683b      	ldr	r3, [r7, #0]
 80146cc:	885b      	ldrh	r3, [r3, #2]
 80146ce:	2b7f      	cmp	r3, #127	; 0x7f
 80146d0:	d829      	bhi.n	8014726 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80146d2:	683b      	ldr	r3, [r7, #0]
 80146d4:	885b      	ldrh	r3, [r3, #2]
 80146d6:	b2db      	uxtb	r3, r3
 80146d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80146dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80146e4:	b2db      	uxtb	r3, r3
 80146e6:	2b03      	cmp	r3, #3
 80146e8:	d104      	bne.n	80146f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80146ea:	6839      	ldr	r1, [r7, #0]
 80146ec:	6878      	ldr	r0, [r7, #4]
 80146ee:	f000 f9bc 	bl	8014a6a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80146f2:	e01d      	b.n	8014730 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	7bfa      	ldrb	r2, [r7, #15]
 80146f8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80146fc:	7bfb      	ldrb	r3, [r7, #15]
 80146fe:	4619      	mov	r1, r3
 8014700:	6878      	ldr	r0, [r7, #4]
 8014702:	f000 ff5b 	bl	80155bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014706:	6878      	ldr	r0, [r7, #4]
 8014708:	f000 fa7a 	bl	8014c00 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801470c:	7bfb      	ldrb	r3, [r7, #15]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d004      	beq.n	801471c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	2202      	movs	r2, #2
 8014716:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801471a:	e009      	b.n	8014730 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	2201      	movs	r2, #1
 8014720:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014724:	e004      	b.n	8014730 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014726:	6839      	ldr	r1, [r7, #0]
 8014728:	6878      	ldr	r0, [r7, #4]
 801472a:	f000 f99e 	bl	8014a6a <USBD_CtlError>
  }
}
 801472e:	bf00      	nop
 8014730:	bf00      	nop
 8014732:	3710      	adds	r7, #16
 8014734:	46bd      	mov	sp, r7
 8014736:	bd80      	pop	{r7, pc}

08014738 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014738:	b580      	push	{r7, lr}
 801473a:	b084      	sub	sp, #16
 801473c:	af00      	add	r7, sp, #0
 801473e:	6078      	str	r0, [r7, #4]
 8014740:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014742:	2300      	movs	r3, #0
 8014744:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014746:	683b      	ldr	r3, [r7, #0]
 8014748:	885b      	ldrh	r3, [r3, #2]
 801474a:	b2da      	uxtb	r2, r3
 801474c:	4b4e      	ldr	r3, [pc, #312]	; (8014888 <USBD_SetConfig+0x150>)
 801474e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014750:	4b4d      	ldr	r3, [pc, #308]	; (8014888 <USBD_SetConfig+0x150>)
 8014752:	781b      	ldrb	r3, [r3, #0]
 8014754:	2b01      	cmp	r3, #1
 8014756:	d905      	bls.n	8014764 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014758:	6839      	ldr	r1, [r7, #0]
 801475a:	6878      	ldr	r0, [r7, #4]
 801475c:	f000 f985 	bl	8014a6a <USBD_CtlError>
    return USBD_FAIL;
 8014760:	2303      	movs	r3, #3
 8014762:	e08c      	b.n	801487e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801476a:	b2db      	uxtb	r3, r3
 801476c:	2b02      	cmp	r3, #2
 801476e:	d002      	beq.n	8014776 <USBD_SetConfig+0x3e>
 8014770:	2b03      	cmp	r3, #3
 8014772:	d029      	beq.n	80147c8 <USBD_SetConfig+0x90>
 8014774:	e075      	b.n	8014862 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014776:	4b44      	ldr	r3, [pc, #272]	; (8014888 <USBD_SetConfig+0x150>)
 8014778:	781b      	ldrb	r3, [r3, #0]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d020      	beq.n	80147c0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801477e:	4b42      	ldr	r3, [pc, #264]	; (8014888 <USBD_SetConfig+0x150>)
 8014780:	781b      	ldrb	r3, [r3, #0]
 8014782:	461a      	mov	r2, r3
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014788:	4b3f      	ldr	r3, [pc, #252]	; (8014888 <USBD_SetConfig+0x150>)
 801478a:	781b      	ldrb	r3, [r3, #0]
 801478c:	4619      	mov	r1, r3
 801478e:	6878      	ldr	r0, [r7, #4]
 8014790:	f7fe ffe1 	bl	8013756 <USBD_SetClassConfig>
 8014794:	4603      	mov	r3, r0
 8014796:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014798:	7bfb      	ldrb	r3, [r7, #15]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d008      	beq.n	80147b0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801479e:	6839      	ldr	r1, [r7, #0]
 80147a0:	6878      	ldr	r0, [r7, #4]
 80147a2:	f000 f962 	bl	8014a6a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	2202      	movs	r2, #2
 80147aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80147ae:	e065      	b.n	801487c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80147b0:	6878      	ldr	r0, [r7, #4]
 80147b2:	f000 fa25 	bl	8014c00 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	2203      	movs	r2, #3
 80147ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80147be:	e05d      	b.n	801487c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80147c0:	6878      	ldr	r0, [r7, #4]
 80147c2:	f000 fa1d 	bl	8014c00 <USBD_CtlSendStatus>
      break;
 80147c6:	e059      	b.n	801487c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80147c8:	4b2f      	ldr	r3, [pc, #188]	; (8014888 <USBD_SetConfig+0x150>)
 80147ca:	781b      	ldrb	r3, [r3, #0]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d112      	bne.n	80147f6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	2202      	movs	r2, #2
 80147d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80147d8:	4b2b      	ldr	r3, [pc, #172]	; (8014888 <USBD_SetConfig+0x150>)
 80147da:	781b      	ldrb	r3, [r3, #0]
 80147dc:	461a      	mov	r2, r3
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80147e2:	4b29      	ldr	r3, [pc, #164]	; (8014888 <USBD_SetConfig+0x150>)
 80147e4:	781b      	ldrb	r3, [r3, #0]
 80147e6:	4619      	mov	r1, r3
 80147e8:	6878      	ldr	r0, [r7, #4]
 80147ea:	f7fe ffd0 	bl	801378e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80147ee:	6878      	ldr	r0, [r7, #4]
 80147f0:	f000 fa06 	bl	8014c00 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80147f4:	e042      	b.n	801487c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80147f6:	4b24      	ldr	r3, [pc, #144]	; (8014888 <USBD_SetConfig+0x150>)
 80147f8:	781b      	ldrb	r3, [r3, #0]
 80147fa:	461a      	mov	r2, r3
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	685b      	ldr	r3, [r3, #4]
 8014800:	429a      	cmp	r2, r3
 8014802:	d02a      	beq.n	801485a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	685b      	ldr	r3, [r3, #4]
 8014808:	b2db      	uxtb	r3, r3
 801480a:	4619      	mov	r1, r3
 801480c:	6878      	ldr	r0, [r7, #4]
 801480e:	f7fe ffbe 	bl	801378e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014812:	4b1d      	ldr	r3, [pc, #116]	; (8014888 <USBD_SetConfig+0x150>)
 8014814:	781b      	ldrb	r3, [r3, #0]
 8014816:	461a      	mov	r2, r3
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801481c:	4b1a      	ldr	r3, [pc, #104]	; (8014888 <USBD_SetConfig+0x150>)
 801481e:	781b      	ldrb	r3, [r3, #0]
 8014820:	4619      	mov	r1, r3
 8014822:	6878      	ldr	r0, [r7, #4]
 8014824:	f7fe ff97 	bl	8013756 <USBD_SetClassConfig>
 8014828:	4603      	mov	r3, r0
 801482a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801482c:	7bfb      	ldrb	r3, [r7, #15]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d00f      	beq.n	8014852 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8014832:	6839      	ldr	r1, [r7, #0]
 8014834:	6878      	ldr	r0, [r7, #4]
 8014836:	f000 f918 	bl	8014a6a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	685b      	ldr	r3, [r3, #4]
 801483e:	b2db      	uxtb	r3, r3
 8014840:	4619      	mov	r1, r3
 8014842:	6878      	ldr	r0, [r7, #4]
 8014844:	f7fe ffa3 	bl	801378e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	2202      	movs	r2, #2
 801484c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014850:	e014      	b.n	801487c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014852:	6878      	ldr	r0, [r7, #4]
 8014854:	f000 f9d4 	bl	8014c00 <USBD_CtlSendStatus>
      break;
 8014858:	e010      	b.n	801487c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801485a:	6878      	ldr	r0, [r7, #4]
 801485c:	f000 f9d0 	bl	8014c00 <USBD_CtlSendStatus>
      break;
 8014860:	e00c      	b.n	801487c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8014862:	6839      	ldr	r1, [r7, #0]
 8014864:	6878      	ldr	r0, [r7, #4]
 8014866:	f000 f900 	bl	8014a6a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801486a:	4b07      	ldr	r3, [pc, #28]	; (8014888 <USBD_SetConfig+0x150>)
 801486c:	781b      	ldrb	r3, [r3, #0]
 801486e:	4619      	mov	r1, r3
 8014870:	6878      	ldr	r0, [r7, #4]
 8014872:	f7fe ff8c 	bl	801378e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014876:	2303      	movs	r3, #3
 8014878:	73fb      	strb	r3, [r7, #15]
      break;
 801487a:	bf00      	nop
  }

  return ret;
 801487c:	7bfb      	ldrb	r3, [r7, #15]
}
 801487e:	4618      	mov	r0, r3
 8014880:	3710      	adds	r7, #16
 8014882:	46bd      	mov	sp, r7
 8014884:	bd80      	pop	{r7, pc}
 8014886:	bf00      	nop
 8014888:	24000d34 	.word	0x24000d34

0801488c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801488c:	b580      	push	{r7, lr}
 801488e:	b082      	sub	sp, #8
 8014890:	af00      	add	r7, sp, #0
 8014892:	6078      	str	r0, [r7, #4]
 8014894:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014896:	683b      	ldr	r3, [r7, #0]
 8014898:	88db      	ldrh	r3, [r3, #6]
 801489a:	2b01      	cmp	r3, #1
 801489c:	d004      	beq.n	80148a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801489e:	6839      	ldr	r1, [r7, #0]
 80148a0:	6878      	ldr	r0, [r7, #4]
 80148a2:	f000 f8e2 	bl	8014a6a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80148a6:	e023      	b.n	80148f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80148ae:	b2db      	uxtb	r3, r3
 80148b0:	2b02      	cmp	r3, #2
 80148b2:	dc02      	bgt.n	80148ba <USBD_GetConfig+0x2e>
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	dc03      	bgt.n	80148c0 <USBD_GetConfig+0x34>
 80148b8:	e015      	b.n	80148e6 <USBD_GetConfig+0x5a>
 80148ba:	2b03      	cmp	r3, #3
 80148bc:	d00b      	beq.n	80148d6 <USBD_GetConfig+0x4a>
 80148be:	e012      	b.n	80148e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	2200      	movs	r2, #0
 80148c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	3308      	adds	r3, #8
 80148ca:	2201      	movs	r2, #1
 80148cc:	4619      	mov	r1, r3
 80148ce:	6878      	ldr	r0, [r7, #4]
 80148d0:	f000 f93c 	bl	8014b4c <USBD_CtlSendData>
        break;
 80148d4:	e00c      	b.n	80148f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	3304      	adds	r3, #4
 80148da:	2201      	movs	r2, #1
 80148dc:	4619      	mov	r1, r3
 80148de:	6878      	ldr	r0, [r7, #4]
 80148e0:	f000 f934 	bl	8014b4c <USBD_CtlSendData>
        break;
 80148e4:	e004      	b.n	80148f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80148e6:	6839      	ldr	r1, [r7, #0]
 80148e8:	6878      	ldr	r0, [r7, #4]
 80148ea:	f000 f8be 	bl	8014a6a <USBD_CtlError>
        break;
 80148ee:	bf00      	nop
}
 80148f0:	bf00      	nop
 80148f2:	3708      	adds	r7, #8
 80148f4:	46bd      	mov	sp, r7
 80148f6:	bd80      	pop	{r7, pc}

080148f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b082      	sub	sp, #8
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
 8014900:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014908:	b2db      	uxtb	r3, r3
 801490a:	3b01      	subs	r3, #1
 801490c:	2b02      	cmp	r3, #2
 801490e:	d81e      	bhi.n	801494e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014910:	683b      	ldr	r3, [r7, #0]
 8014912:	88db      	ldrh	r3, [r3, #6]
 8014914:	2b02      	cmp	r3, #2
 8014916:	d004      	beq.n	8014922 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014918:	6839      	ldr	r1, [r7, #0]
 801491a:	6878      	ldr	r0, [r7, #4]
 801491c:	f000 f8a5 	bl	8014a6a <USBD_CtlError>
        break;
 8014920:	e01a      	b.n	8014958 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	2201      	movs	r2, #1
 8014926:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801492e:	2b00      	cmp	r3, #0
 8014930:	d005      	beq.n	801493e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	68db      	ldr	r3, [r3, #12]
 8014936:	f043 0202 	orr.w	r2, r3, #2
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	330c      	adds	r3, #12
 8014942:	2202      	movs	r2, #2
 8014944:	4619      	mov	r1, r3
 8014946:	6878      	ldr	r0, [r7, #4]
 8014948:	f000 f900 	bl	8014b4c <USBD_CtlSendData>
      break;
 801494c:	e004      	b.n	8014958 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801494e:	6839      	ldr	r1, [r7, #0]
 8014950:	6878      	ldr	r0, [r7, #4]
 8014952:	f000 f88a 	bl	8014a6a <USBD_CtlError>
      break;
 8014956:	bf00      	nop
  }
}
 8014958:	bf00      	nop
 801495a:	3708      	adds	r7, #8
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}

08014960 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014960:	b580      	push	{r7, lr}
 8014962:	b082      	sub	sp, #8
 8014964:	af00      	add	r7, sp, #0
 8014966:	6078      	str	r0, [r7, #4]
 8014968:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801496a:	683b      	ldr	r3, [r7, #0]
 801496c:	885b      	ldrh	r3, [r3, #2]
 801496e:	2b01      	cmp	r3, #1
 8014970:	d107      	bne.n	8014982 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	2201      	movs	r2, #1
 8014976:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801497a:	6878      	ldr	r0, [r7, #4]
 801497c:	f000 f940 	bl	8014c00 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014980:	e013      	b.n	80149aa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8014982:	683b      	ldr	r3, [r7, #0]
 8014984:	885b      	ldrh	r3, [r3, #2]
 8014986:	2b02      	cmp	r3, #2
 8014988:	d10b      	bne.n	80149a2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801498a:	683b      	ldr	r3, [r7, #0]
 801498c:	889b      	ldrh	r3, [r3, #4]
 801498e:	0a1b      	lsrs	r3, r3, #8
 8014990:	b29b      	uxth	r3, r3
 8014992:	b2da      	uxtb	r2, r3
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801499a:	6878      	ldr	r0, [r7, #4]
 801499c:	f000 f930 	bl	8014c00 <USBD_CtlSendStatus>
}
 80149a0:	e003      	b.n	80149aa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80149a2:	6839      	ldr	r1, [r7, #0]
 80149a4:	6878      	ldr	r0, [r7, #4]
 80149a6:	f000 f860 	bl	8014a6a <USBD_CtlError>
}
 80149aa:	bf00      	nop
 80149ac:	3708      	adds	r7, #8
 80149ae:	46bd      	mov	sp, r7
 80149b0:	bd80      	pop	{r7, pc}

080149b2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80149b2:	b580      	push	{r7, lr}
 80149b4:	b082      	sub	sp, #8
 80149b6:	af00      	add	r7, sp, #0
 80149b8:	6078      	str	r0, [r7, #4]
 80149ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80149c2:	b2db      	uxtb	r3, r3
 80149c4:	3b01      	subs	r3, #1
 80149c6:	2b02      	cmp	r3, #2
 80149c8:	d80b      	bhi.n	80149e2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80149ca:	683b      	ldr	r3, [r7, #0]
 80149cc:	885b      	ldrh	r3, [r3, #2]
 80149ce:	2b01      	cmp	r3, #1
 80149d0:	d10c      	bne.n	80149ec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	2200      	movs	r2, #0
 80149d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80149da:	6878      	ldr	r0, [r7, #4]
 80149dc:	f000 f910 	bl	8014c00 <USBD_CtlSendStatus>
      }
      break;
 80149e0:	e004      	b.n	80149ec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80149e2:	6839      	ldr	r1, [r7, #0]
 80149e4:	6878      	ldr	r0, [r7, #4]
 80149e6:	f000 f840 	bl	8014a6a <USBD_CtlError>
      break;
 80149ea:	e000      	b.n	80149ee <USBD_ClrFeature+0x3c>
      break;
 80149ec:	bf00      	nop
  }
}
 80149ee:	bf00      	nop
 80149f0:	3708      	adds	r7, #8
 80149f2:	46bd      	mov	sp, r7
 80149f4:	bd80      	pop	{r7, pc}

080149f6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80149f6:	b580      	push	{r7, lr}
 80149f8:	b084      	sub	sp, #16
 80149fa:	af00      	add	r7, sp, #0
 80149fc:	6078      	str	r0, [r7, #4]
 80149fe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014a00:	683b      	ldr	r3, [r7, #0]
 8014a02:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	781a      	ldrb	r2, [r3, #0]
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	3301      	adds	r3, #1
 8014a10:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	781a      	ldrb	r2, [r3, #0]
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	3301      	adds	r3, #1
 8014a1e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014a20:	68f8      	ldr	r0, [r7, #12]
 8014a22:	f7ff fa41 	bl	8013ea8 <SWAPBYTE>
 8014a26:	4603      	mov	r3, r0
 8014a28:	461a      	mov	r2, r3
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	3301      	adds	r3, #1
 8014a32:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	3301      	adds	r3, #1
 8014a38:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014a3a:	68f8      	ldr	r0, [r7, #12]
 8014a3c:	f7ff fa34 	bl	8013ea8 <SWAPBYTE>
 8014a40:	4603      	mov	r3, r0
 8014a42:	461a      	mov	r2, r3
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	3301      	adds	r3, #1
 8014a4c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	3301      	adds	r3, #1
 8014a52:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014a54:	68f8      	ldr	r0, [r7, #12]
 8014a56:	f7ff fa27 	bl	8013ea8 <SWAPBYTE>
 8014a5a:	4603      	mov	r3, r0
 8014a5c:	461a      	mov	r2, r3
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	80da      	strh	r2, [r3, #6]
}
 8014a62:	bf00      	nop
 8014a64:	3710      	adds	r7, #16
 8014a66:	46bd      	mov	sp, r7
 8014a68:	bd80      	pop	{r7, pc}

08014a6a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a6a:	b580      	push	{r7, lr}
 8014a6c:	b082      	sub	sp, #8
 8014a6e:	af00      	add	r7, sp, #0
 8014a70:	6078      	str	r0, [r7, #4]
 8014a72:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014a74:	2180      	movs	r1, #128	; 0x80
 8014a76:	6878      	ldr	r0, [r7, #4]
 8014a78:	f000 fd36 	bl	80154e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014a7c:	2100      	movs	r1, #0
 8014a7e:	6878      	ldr	r0, [r7, #4]
 8014a80:	f000 fd32 	bl	80154e8 <USBD_LL_StallEP>
}
 8014a84:	bf00      	nop
 8014a86:	3708      	adds	r7, #8
 8014a88:	46bd      	mov	sp, r7
 8014a8a:	bd80      	pop	{r7, pc}

08014a8c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b086      	sub	sp, #24
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	60f8      	str	r0, [r7, #12]
 8014a94:	60b9      	str	r1, [r7, #8]
 8014a96:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014a98:	2300      	movs	r3, #0
 8014a9a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d036      	beq.n	8014b10 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014aa6:	6938      	ldr	r0, [r7, #16]
 8014aa8:	f000 f836 	bl	8014b18 <USBD_GetLen>
 8014aac:	4603      	mov	r3, r0
 8014aae:	3301      	adds	r3, #1
 8014ab0:	b29b      	uxth	r3, r3
 8014ab2:	005b      	lsls	r3, r3, #1
 8014ab4:	b29a      	uxth	r2, r3
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014aba:	7dfb      	ldrb	r3, [r7, #23]
 8014abc:	68ba      	ldr	r2, [r7, #8]
 8014abe:	4413      	add	r3, r2
 8014ac0:	687a      	ldr	r2, [r7, #4]
 8014ac2:	7812      	ldrb	r2, [r2, #0]
 8014ac4:	701a      	strb	r2, [r3, #0]
  idx++;
 8014ac6:	7dfb      	ldrb	r3, [r7, #23]
 8014ac8:	3301      	adds	r3, #1
 8014aca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014acc:	7dfb      	ldrb	r3, [r7, #23]
 8014ace:	68ba      	ldr	r2, [r7, #8]
 8014ad0:	4413      	add	r3, r2
 8014ad2:	2203      	movs	r2, #3
 8014ad4:	701a      	strb	r2, [r3, #0]
  idx++;
 8014ad6:	7dfb      	ldrb	r3, [r7, #23]
 8014ad8:	3301      	adds	r3, #1
 8014ada:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014adc:	e013      	b.n	8014b06 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8014ade:	7dfb      	ldrb	r3, [r7, #23]
 8014ae0:	68ba      	ldr	r2, [r7, #8]
 8014ae2:	4413      	add	r3, r2
 8014ae4:	693a      	ldr	r2, [r7, #16]
 8014ae6:	7812      	ldrb	r2, [r2, #0]
 8014ae8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014aea:	693b      	ldr	r3, [r7, #16]
 8014aec:	3301      	adds	r3, #1
 8014aee:	613b      	str	r3, [r7, #16]
    idx++;
 8014af0:	7dfb      	ldrb	r3, [r7, #23]
 8014af2:	3301      	adds	r3, #1
 8014af4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014af6:	7dfb      	ldrb	r3, [r7, #23]
 8014af8:	68ba      	ldr	r2, [r7, #8]
 8014afa:	4413      	add	r3, r2
 8014afc:	2200      	movs	r2, #0
 8014afe:	701a      	strb	r2, [r3, #0]
    idx++;
 8014b00:	7dfb      	ldrb	r3, [r7, #23]
 8014b02:	3301      	adds	r3, #1
 8014b04:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014b06:	693b      	ldr	r3, [r7, #16]
 8014b08:	781b      	ldrb	r3, [r3, #0]
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d1e7      	bne.n	8014ade <USBD_GetString+0x52>
 8014b0e:	e000      	b.n	8014b12 <USBD_GetString+0x86>
    return;
 8014b10:	bf00      	nop
  }
}
 8014b12:	3718      	adds	r7, #24
 8014b14:	46bd      	mov	sp, r7
 8014b16:	bd80      	pop	{r7, pc}

08014b18 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014b18:	b480      	push	{r7}
 8014b1a:	b085      	sub	sp, #20
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014b20:	2300      	movs	r3, #0
 8014b22:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014b28:	e005      	b.n	8014b36 <USBD_GetLen+0x1e>
  {
    len++;
 8014b2a:	7bfb      	ldrb	r3, [r7, #15]
 8014b2c:	3301      	adds	r3, #1
 8014b2e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014b30:	68bb      	ldr	r3, [r7, #8]
 8014b32:	3301      	adds	r3, #1
 8014b34:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014b36:	68bb      	ldr	r3, [r7, #8]
 8014b38:	781b      	ldrb	r3, [r3, #0]
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d1f5      	bne.n	8014b2a <USBD_GetLen+0x12>
  }

  return len;
 8014b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b40:	4618      	mov	r0, r3
 8014b42:	3714      	adds	r7, #20
 8014b44:	46bd      	mov	sp, r7
 8014b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b4a:	4770      	bx	lr

08014b4c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014b4c:	b580      	push	{r7, lr}
 8014b4e:	b084      	sub	sp, #16
 8014b50:	af00      	add	r7, sp, #0
 8014b52:	60f8      	str	r0, [r7, #12]
 8014b54:	60b9      	str	r1, [r7, #8]
 8014b56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	2202      	movs	r2, #2
 8014b5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	687a      	ldr	r2, [r7, #4]
 8014b64:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	687a      	ldr	r2, [r7, #4]
 8014b6a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	68ba      	ldr	r2, [r7, #8]
 8014b70:	2100      	movs	r1, #0
 8014b72:	68f8      	ldr	r0, [r7, #12]
 8014b74:	f000 fd41 	bl	80155fa <USBD_LL_Transmit>

  return USBD_OK;
 8014b78:	2300      	movs	r3, #0
}
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	3710      	adds	r7, #16
 8014b7e:	46bd      	mov	sp, r7
 8014b80:	bd80      	pop	{r7, pc}

08014b82 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014b82:	b580      	push	{r7, lr}
 8014b84:	b084      	sub	sp, #16
 8014b86:	af00      	add	r7, sp, #0
 8014b88:	60f8      	str	r0, [r7, #12]
 8014b8a:	60b9      	str	r1, [r7, #8]
 8014b8c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	68ba      	ldr	r2, [r7, #8]
 8014b92:	2100      	movs	r1, #0
 8014b94:	68f8      	ldr	r0, [r7, #12]
 8014b96:	f000 fd30 	bl	80155fa <USBD_LL_Transmit>

  return USBD_OK;
 8014b9a:	2300      	movs	r3, #0
}
 8014b9c:	4618      	mov	r0, r3
 8014b9e:	3710      	adds	r7, #16
 8014ba0:	46bd      	mov	sp, r7
 8014ba2:	bd80      	pop	{r7, pc}

08014ba4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b084      	sub	sp, #16
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	60f8      	str	r0, [r7, #12]
 8014bac:	60b9      	str	r1, [r7, #8]
 8014bae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	2203      	movs	r2, #3
 8014bb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	687a      	ldr	r2, [r7, #4]
 8014bbc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	687a      	ldr	r2, [r7, #4]
 8014bc4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	68ba      	ldr	r2, [r7, #8]
 8014bcc:	2100      	movs	r1, #0
 8014bce:	68f8      	ldr	r0, [r7, #12]
 8014bd0:	f000 fd34 	bl	801563c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014bd4:	2300      	movs	r3, #0
}
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	3710      	adds	r7, #16
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	bd80      	pop	{r7, pc}

08014bde <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014bde:	b580      	push	{r7, lr}
 8014be0:	b084      	sub	sp, #16
 8014be2:	af00      	add	r7, sp, #0
 8014be4:	60f8      	str	r0, [r7, #12]
 8014be6:	60b9      	str	r1, [r7, #8]
 8014be8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	68ba      	ldr	r2, [r7, #8]
 8014bee:	2100      	movs	r1, #0
 8014bf0:	68f8      	ldr	r0, [r7, #12]
 8014bf2:	f000 fd23 	bl	801563c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014bf6:	2300      	movs	r3, #0
}
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	3710      	adds	r7, #16
 8014bfc:	46bd      	mov	sp, r7
 8014bfe:	bd80      	pop	{r7, pc}

08014c00 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014c00:	b580      	push	{r7, lr}
 8014c02:	b082      	sub	sp, #8
 8014c04:	af00      	add	r7, sp, #0
 8014c06:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	2204      	movs	r2, #4
 8014c0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014c10:	2300      	movs	r3, #0
 8014c12:	2200      	movs	r2, #0
 8014c14:	2100      	movs	r1, #0
 8014c16:	6878      	ldr	r0, [r7, #4]
 8014c18:	f000 fcef 	bl	80155fa <USBD_LL_Transmit>

  return USBD_OK;
 8014c1c:	2300      	movs	r3, #0
}
 8014c1e:	4618      	mov	r0, r3
 8014c20:	3708      	adds	r7, #8
 8014c22:	46bd      	mov	sp, r7
 8014c24:	bd80      	pop	{r7, pc}

08014c26 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014c26:	b580      	push	{r7, lr}
 8014c28:	b082      	sub	sp, #8
 8014c2a:	af00      	add	r7, sp, #0
 8014c2c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	2205      	movs	r2, #5
 8014c32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014c36:	2300      	movs	r3, #0
 8014c38:	2200      	movs	r2, #0
 8014c3a:	2100      	movs	r1, #0
 8014c3c:	6878      	ldr	r0, [r7, #4]
 8014c3e:	f000 fcfd 	bl	801563c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014c42:	2300      	movs	r3, #0
}
 8014c44:	4618      	mov	r0, r3
 8014c46:	3708      	adds	r7, #8
 8014c48:	46bd      	mov	sp, r7
 8014c4a:	bd80      	pop	{r7, pc}

08014c4c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014c4c:	b480      	push	{r7}
 8014c4e:	b087      	sub	sp, #28
 8014c50:	af00      	add	r7, sp, #0
 8014c52:	60f8      	str	r0, [r7, #12]
 8014c54:	60b9      	str	r1, [r7, #8]
 8014c56:	4613      	mov	r3, r2
 8014c58:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014c5a:	2301      	movs	r3, #1
 8014c5c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014c5e:	2300      	movs	r3, #0
 8014c60:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014c62:	4b1f      	ldr	r3, [pc, #124]	; (8014ce0 <FATFS_LinkDriverEx+0x94>)
 8014c64:	7a5b      	ldrb	r3, [r3, #9]
 8014c66:	b2db      	uxtb	r3, r3
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d131      	bne.n	8014cd0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014c6c:	4b1c      	ldr	r3, [pc, #112]	; (8014ce0 <FATFS_LinkDriverEx+0x94>)
 8014c6e:	7a5b      	ldrb	r3, [r3, #9]
 8014c70:	b2db      	uxtb	r3, r3
 8014c72:	461a      	mov	r2, r3
 8014c74:	4b1a      	ldr	r3, [pc, #104]	; (8014ce0 <FATFS_LinkDriverEx+0x94>)
 8014c76:	2100      	movs	r1, #0
 8014c78:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014c7a:	4b19      	ldr	r3, [pc, #100]	; (8014ce0 <FATFS_LinkDriverEx+0x94>)
 8014c7c:	7a5b      	ldrb	r3, [r3, #9]
 8014c7e:	b2db      	uxtb	r3, r3
 8014c80:	4a17      	ldr	r2, [pc, #92]	; (8014ce0 <FATFS_LinkDriverEx+0x94>)
 8014c82:	009b      	lsls	r3, r3, #2
 8014c84:	4413      	add	r3, r2
 8014c86:	68fa      	ldr	r2, [r7, #12]
 8014c88:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014c8a:	4b15      	ldr	r3, [pc, #84]	; (8014ce0 <FATFS_LinkDriverEx+0x94>)
 8014c8c:	7a5b      	ldrb	r3, [r3, #9]
 8014c8e:	b2db      	uxtb	r3, r3
 8014c90:	461a      	mov	r2, r3
 8014c92:	4b13      	ldr	r3, [pc, #76]	; (8014ce0 <FATFS_LinkDriverEx+0x94>)
 8014c94:	4413      	add	r3, r2
 8014c96:	79fa      	ldrb	r2, [r7, #7]
 8014c98:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014c9a:	4b11      	ldr	r3, [pc, #68]	; (8014ce0 <FATFS_LinkDriverEx+0x94>)
 8014c9c:	7a5b      	ldrb	r3, [r3, #9]
 8014c9e:	b2db      	uxtb	r3, r3
 8014ca0:	1c5a      	adds	r2, r3, #1
 8014ca2:	b2d1      	uxtb	r1, r2
 8014ca4:	4a0e      	ldr	r2, [pc, #56]	; (8014ce0 <FATFS_LinkDriverEx+0x94>)
 8014ca6:	7251      	strb	r1, [r2, #9]
 8014ca8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014caa:	7dbb      	ldrb	r3, [r7, #22]
 8014cac:	3330      	adds	r3, #48	; 0x30
 8014cae:	b2da      	uxtb	r2, r3
 8014cb0:	68bb      	ldr	r3, [r7, #8]
 8014cb2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014cb4:	68bb      	ldr	r3, [r7, #8]
 8014cb6:	3301      	adds	r3, #1
 8014cb8:	223a      	movs	r2, #58	; 0x3a
 8014cba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014cbc:	68bb      	ldr	r3, [r7, #8]
 8014cbe:	3302      	adds	r3, #2
 8014cc0:	222f      	movs	r2, #47	; 0x2f
 8014cc2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014cc4:	68bb      	ldr	r3, [r7, #8]
 8014cc6:	3303      	adds	r3, #3
 8014cc8:	2200      	movs	r2, #0
 8014cca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014ccc:	2300      	movs	r3, #0
 8014cce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	371c      	adds	r7, #28
 8014cd6:	46bd      	mov	sp, r7
 8014cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cdc:	4770      	bx	lr
 8014cde:	bf00      	nop
 8014ce0:	24000d38 	.word	0x24000d38

08014ce4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b082      	sub	sp, #8
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	6078      	str	r0, [r7, #4]
 8014cec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014cee:	2200      	movs	r2, #0
 8014cf0:	6839      	ldr	r1, [r7, #0]
 8014cf2:	6878      	ldr	r0, [r7, #4]
 8014cf4:	f7ff ffaa 	bl	8014c4c <FATFS_LinkDriverEx>
 8014cf8:	4603      	mov	r3, r0
}
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	3708      	adds	r7, #8
 8014cfe:	46bd      	mov	sp, r7
 8014d00:	bd80      	pop	{r7, pc}
	...

08014d04 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014d04:	b580      	push	{r7, lr}
 8014d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8014d08:	2201      	movs	r2, #1
 8014d0a:	4913      	ldr	r1, [pc, #76]	; (8014d58 <MX_USB_DEVICE_Init+0x54>)
 8014d0c:	4813      	ldr	r0, [pc, #76]	; (8014d5c <MX_USB_DEVICE_Init+0x58>)
 8014d0e:	f7fe fca5 	bl	801365c <USBD_Init>
 8014d12:	4603      	mov	r3, r0
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d001      	beq.n	8014d1c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014d18:	f7ec ff58 	bl	8001bcc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8014d1c:	4910      	ldr	r1, [pc, #64]	; (8014d60 <MX_USB_DEVICE_Init+0x5c>)
 8014d1e:	480f      	ldr	r0, [pc, #60]	; (8014d5c <MX_USB_DEVICE_Init+0x58>)
 8014d20:	f7fe fccc 	bl	80136bc <USBD_RegisterClass>
 8014d24:	4603      	mov	r3, r0
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d001      	beq.n	8014d2e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014d2a:	f7ec ff4f 	bl	8001bcc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8014d2e:	490d      	ldr	r1, [pc, #52]	; (8014d64 <MX_USB_DEVICE_Init+0x60>)
 8014d30:	480a      	ldr	r0, [pc, #40]	; (8014d5c <MX_USB_DEVICE_Init+0x58>)
 8014d32:	f7fe fbc3 	bl	80134bc <USBD_CDC_RegisterInterface>
 8014d36:	4603      	mov	r3, r0
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d001      	beq.n	8014d40 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014d3c:	f7ec ff46 	bl	8001bcc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8014d40:	4806      	ldr	r0, [pc, #24]	; (8014d5c <MX_USB_DEVICE_Init+0x58>)
 8014d42:	f7fe fcf1 	bl	8013728 <USBD_Start>
 8014d46:	4603      	mov	r3, r0
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d001      	beq.n	8014d50 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014d4c:	f7ec ff3e 	bl	8001bcc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8014d50:	f7f4 f9c0 	bl	80090d4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014d54:	bf00      	nop
 8014d56:	bd80      	pop	{r7, pc}
 8014d58:	240000b0 	.word	0x240000b0
 8014d5c:	24000d44 	.word	0x24000d44
 8014d60:	2400001c 	.word	0x2400001c
 8014d64:	2400009c 	.word	0x2400009c

08014d68 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8014d68:	b580      	push	{r7, lr}
 8014d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8014d6c:	2200      	movs	r2, #0
 8014d6e:	4905      	ldr	r1, [pc, #20]	; (8014d84 <CDC_Init_HS+0x1c>)
 8014d70:	4805      	ldr	r0, [pc, #20]	; (8014d88 <CDC_Init_HS+0x20>)
 8014d72:	f7fe fbbd 	bl	80134f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8014d76:	4905      	ldr	r1, [pc, #20]	; (8014d8c <CDC_Init_HS+0x24>)
 8014d78:	4803      	ldr	r0, [pc, #12]	; (8014d88 <CDC_Init_HS+0x20>)
 8014d7a:	f7fe fbdb 	bl	8013534 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014d7e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8014d80:	4618      	mov	r0, r3
 8014d82:	bd80      	pop	{r7, pc}
 8014d84:	24001820 	.word	0x24001820
 8014d88:	24000d44 	.word	0x24000d44
 8014d8c:	24001020 	.word	0x24001020

08014d90 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8014d90:	b480      	push	{r7}
 8014d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8014d94:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8014d96:	4618      	mov	r0, r3
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d9e:	4770      	bx	lr

08014da0 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014da0:	b480      	push	{r7}
 8014da2:	b083      	sub	sp, #12
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	4603      	mov	r3, r0
 8014da8:	6039      	str	r1, [r7, #0]
 8014daa:	71fb      	strb	r3, [r7, #7]
 8014dac:	4613      	mov	r3, r2
 8014dae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8014db0:	79fb      	ldrb	r3, [r7, #7]
 8014db2:	2b23      	cmp	r3, #35	; 0x23
 8014db4:	d84a      	bhi.n	8014e4c <CDC_Control_HS+0xac>
 8014db6:	a201      	add	r2, pc, #4	; (adr r2, 8014dbc <CDC_Control_HS+0x1c>)
 8014db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014dbc:	08014e4d 	.word	0x08014e4d
 8014dc0:	08014e4d 	.word	0x08014e4d
 8014dc4:	08014e4d 	.word	0x08014e4d
 8014dc8:	08014e4d 	.word	0x08014e4d
 8014dcc:	08014e4d 	.word	0x08014e4d
 8014dd0:	08014e4d 	.word	0x08014e4d
 8014dd4:	08014e4d 	.word	0x08014e4d
 8014dd8:	08014e4d 	.word	0x08014e4d
 8014ddc:	08014e4d 	.word	0x08014e4d
 8014de0:	08014e4d 	.word	0x08014e4d
 8014de4:	08014e4d 	.word	0x08014e4d
 8014de8:	08014e4d 	.word	0x08014e4d
 8014dec:	08014e4d 	.word	0x08014e4d
 8014df0:	08014e4d 	.word	0x08014e4d
 8014df4:	08014e4d 	.word	0x08014e4d
 8014df8:	08014e4d 	.word	0x08014e4d
 8014dfc:	08014e4d 	.word	0x08014e4d
 8014e00:	08014e4d 	.word	0x08014e4d
 8014e04:	08014e4d 	.word	0x08014e4d
 8014e08:	08014e4d 	.word	0x08014e4d
 8014e0c:	08014e4d 	.word	0x08014e4d
 8014e10:	08014e4d 	.word	0x08014e4d
 8014e14:	08014e4d 	.word	0x08014e4d
 8014e18:	08014e4d 	.word	0x08014e4d
 8014e1c:	08014e4d 	.word	0x08014e4d
 8014e20:	08014e4d 	.word	0x08014e4d
 8014e24:	08014e4d 	.word	0x08014e4d
 8014e28:	08014e4d 	.word	0x08014e4d
 8014e2c:	08014e4d 	.word	0x08014e4d
 8014e30:	08014e4d 	.word	0x08014e4d
 8014e34:	08014e4d 	.word	0x08014e4d
 8014e38:	08014e4d 	.word	0x08014e4d
 8014e3c:	08014e4d 	.word	0x08014e4d
 8014e40:	08014e4d 	.word	0x08014e4d
 8014e44:	08014e4d 	.word	0x08014e4d
 8014e48:	08014e4d 	.word	0x08014e4d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014e4c:	bf00      	nop
  }

  return (USBD_OK);
 8014e4e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8014e50:	4618      	mov	r0, r3
 8014e52:	370c      	adds	r7, #12
 8014e54:	46bd      	mov	sp, r7
 8014e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e5a:	4770      	bx	lr

08014e5c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	b082      	sub	sp, #8
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	6078      	str	r0, [r7, #4]
 8014e64:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8014e66:	6879      	ldr	r1, [r7, #4]
 8014e68:	4805      	ldr	r0, [pc, #20]	; (8014e80 <CDC_Receive_HS+0x24>)
 8014e6a:	f7fe fb63 	bl	8013534 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8014e6e:	4804      	ldr	r0, [pc, #16]	; (8014e80 <CDC_Receive_HS+0x24>)
 8014e70:	f7fe fbbe 	bl	80135f0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8014e74:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8014e76:	4618      	mov	r0, r3
 8014e78:	3708      	adds	r7, #8
 8014e7a:	46bd      	mov	sp, r7
 8014e7c:	bd80      	pop	{r7, pc}
 8014e7e:	bf00      	nop
 8014e80:	24000d44 	.word	0x24000d44

08014e84 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b084      	sub	sp, #16
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	6078      	str	r0, [r7, #4]
 8014e8c:	460b      	mov	r3, r1
 8014e8e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014e90:	2300      	movs	r3, #0
 8014e92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8014e94:	4b0d      	ldr	r3, [pc, #52]	; (8014ecc <CDC_Transmit_HS+0x48>)
 8014e96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014e9a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8014e9c:	68bb      	ldr	r3, [r7, #8]
 8014e9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d001      	beq.n	8014eaa <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8014ea6:	2301      	movs	r3, #1
 8014ea8:	e00b      	b.n	8014ec2 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8014eaa:	887b      	ldrh	r3, [r7, #2]
 8014eac:	461a      	mov	r2, r3
 8014eae:	6879      	ldr	r1, [r7, #4]
 8014eb0:	4806      	ldr	r0, [pc, #24]	; (8014ecc <CDC_Transmit_HS+0x48>)
 8014eb2:	f7fe fb1d 	bl	80134f0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8014eb6:	4805      	ldr	r0, [pc, #20]	; (8014ecc <CDC_Transmit_HS+0x48>)
 8014eb8:	f7fe fb5a 	bl	8013570 <USBD_CDC_TransmitPacket>
 8014ebc:	4603      	mov	r3, r0
 8014ebe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8014ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	3710      	adds	r7, #16
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	bd80      	pop	{r7, pc}
 8014eca:	bf00      	nop
 8014ecc:	24000d44 	.word	0x24000d44

08014ed0 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014ed0:	b480      	push	{r7}
 8014ed2:	b087      	sub	sp, #28
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	60f8      	str	r0, [r7, #12]
 8014ed8:	60b9      	str	r1, [r7, #8]
 8014eda:	4613      	mov	r3, r2
 8014edc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8014ede:	2300      	movs	r3, #0
 8014ee0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8014ee2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	371c      	adds	r7, #28
 8014eea:	46bd      	mov	sp, r7
 8014eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef0:	4770      	bx	lr
	...

08014ef4 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014ef4:	b480      	push	{r7}
 8014ef6:	b083      	sub	sp, #12
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	4603      	mov	r3, r0
 8014efc:	6039      	str	r1, [r7, #0]
 8014efe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8014f00:	683b      	ldr	r3, [r7, #0]
 8014f02:	2212      	movs	r2, #18
 8014f04:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8014f06:	4b03      	ldr	r3, [pc, #12]	; (8014f14 <USBD_HS_DeviceDescriptor+0x20>)
}
 8014f08:	4618      	mov	r0, r3
 8014f0a:	370c      	adds	r7, #12
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f12:	4770      	bx	lr
 8014f14:	240000cc 	.word	0x240000cc

08014f18 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014f18:	b480      	push	{r7}
 8014f1a:	b083      	sub	sp, #12
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	4603      	mov	r3, r0
 8014f20:	6039      	str	r1, [r7, #0]
 8014f22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014f24:	683b      	ldr	r3, [r7, #0]
 8014f26:	2204      	movs	r2, #4
 8014f28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014f2a:	4b03      	ldr	r3, [pc, #12]	; (8014f38 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8014f2c:	4618      	mov	r0, r3
 8014f2e:	370c      	adds	r7, #12
 8014f30:	46bd      	mov	sp, r7
 8014f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f36:	4770      	bx	lr
 8014f38:	240000e0 	.word	0x240000e0

08014f3c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b082      	sub	sp, #8
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	4603      	mov	r3, r0
 8014f44:	6039      	str	r1, [r7, #0]
 8014f46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014f48:	79fb      	ldrb	r3, [r7, #7]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d105      	bne.n	8014f5a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8014f4e:	683a      	ldr	r2, [r7, #0]
 8014f50:	4907      	ldr	r1, [pc, #28]	; (8014f70 <USBD_HS_ProductStrDescriptor+0x34>)
 8014f52:	4808      	ldr	r0, [pc, #32]	; (8014f74 <USBD_HS_ProductStrDescriptor+0x38>)
 8014f54:	f7ff fd9a 	bl	8014a8c <USBD_GetString>
 8014f58:	e004      	b.n	8014f64 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8014f5a:	683a      	ldr	r2, [r7, #0]
 8014f5c:	4904      	ldr	r1, [pc, #16]	; (8014f70 <USBD_HS_ProductStrDescriptor+0x34>)
 8014f5e:	4805      	ldr	r0, [pc, #20]	; (8014f74 <USBD_HS_ProductStrDescriptor+0x38>)
 8014f60:	f7ff fd94 	bl	8014a8c <USBD_GetString>
  }
  return USBD_StrDesc;
 8014f64:	4b02      	ldr	r3, [pc, #8]	; (8014f70 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8014f66:	4618      	mov	r0, r3
 8014f68:	3708      	adds	r7, #8
 8014f6a:	46bd      	mov	sp, r7
 8014f6c:	bd80      	pop	{r7, pc}
 8014f6e:	bf00      	nop
 8014f70:	24002020 	.word	0x24002020
 8014f74:	08019d7c 	.word	0x08019d7c

08014f78 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014f78:	b580      	push	{r7, lr}
 8014f7a:	b082      	sub	sp, #8
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	4603      	mov	r3, r0
 8014f80:	6039      	str	r1, [r7, #0]
 8014f82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014f84:	683a      	ldr	r2, [r7, #0]
 8014f86:	4904      	ldr	r1, [pc, #16]	; (8014f98 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8014f88:	4804      	ldr	r0, [pc, #16]	; (8014f9c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8014f8a:	f7ff fd7f 	bl	8014a8c <USBD_GetString>
  return USBD_StrDesc;
 8014f8e:	4b02      	ldr	r3, [pc, #8]	; (8014f98 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8014f90:	4618      	mov	r0, r3
 8014f92:	3708      	adds	r7, #8
 8014f94:	46bd      	mov	sp, r7
 8014f96:	bd80      	pop	{r7, pc}
 8014f98:	24002020 	.word	0x24002020
 8014f9c:	08019d98 	.word	0x08019d98

08014fa0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	b082      	sub	sp, #8
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	4603      	mov	r3, r0
 8014fa8:	6039      	str	r1, [r7, #0]
 8014faa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014fac:	683b      	ldr	r3, [r7, #0]
 8014fae:	221a      	movs	r2, #26
 8014fb0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014fb2:	f000 f843 	bl	801503c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8014fb6:	4b02      	ldr	r3, [pc, #8]	; (8014fc0 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8014fb8:	4618      	mov	r0, r3
 8014fba:	3708      	adds	r7, #8
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	bd80      	pop	{r7, pc}
 8014fc0:	240000e4 	.word	0x240000e4

08014fc4 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b082      	sub	sp, #8
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	4603      	mov	r3, r0
 8014fcc:	6039      	str	r1, [r7, #0]
 8014fce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014fd0:	79fb      	ldrb	r3, [r7, #7]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d105      	bne.n	8014fe2 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8014fd6:	683a      	ldr	r2, [r7, #0]
 8014fd8:	4907      	ldr	r1, [pc, #28]	; (8014ff8 <USBD_HS_ConfigStrDescriptor+0x34>)
 8014fda:	4808      	ldr	r0, [pc, #32]	; (8014ffc <USBD_HS_ConfigStrDescriptor+0x38>)
 8014fdc:	f7ff fd56 	bl	8014a8c <USBD_GetString>
 8014fe0:	e004      	b.n	8014fec <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8014fe2:	683a      	ldr	r2, [r7, #0]
 8014fe4:	4904      	ldr	r1, [pc, #16]	; (8014ff8 <USBD_HS_ConfigStrDescriptor+0x34>)
 8014fe6:	4805      	ldr	r0, [pc, #20]	; (8014ffc <USBD_HS_ConfigStrDescriptor+0x38>)
 8014fe8:	f7ff fd50 	bl	8014a8c <USBD_GetString>
  }
  return USBD_StrDesc;
 8014fec:	4b02      	ldr	r3, [pc, #8]	; (8014ff8 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8014fee:	4618      	mov	r0, r3
 8014ff0:	3708      	adds	r7, #8
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	bd80      	pop	{r7, pc}
 8014ff6:	bf00      	nop
 8014ff8:	24002020 	.word	0x24002020
 8014ffc:	08019d9c 	.word	0x08019d9c

08015000 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015000:	b580      	push	{r7, lr}
 8015002:	b082      	sub	sp, #8
 8015004:	af00      	add	r7, sp, #0
 8015006:	4603      	mov	r3, r0
 8015008:	6039      	str	r1, [r7, #0]
 801500a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801500c:	79fb      	ldrb	r3, [r7, #7]
 801500e:	2b00      	cmp	r3, #0
 8015010:	d105      	bne.n	801501e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8015012:	683a      	ldr	r2, [r7, #0]
 8015014:	4907      	ldr	r1, [pc, #28]	; (8015034 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8015016:	4808      	ldr	r0, [pc, #32]	; (8015038 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8015018:	f7ff fd38 	bl	8014a8c <USBD_GetString>
 801501c:	e004      	b.n	8015028 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801501e:	683a      	ldr	r2, [r7, #0]
 8015020:	4904      	ldr	r1, [pc, #16]	; (8015034 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8015022:	4805      	ldr	r0, [pc, #20]	; (8015038 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8015024:	f7ff fd32 	bl	8014a8c <USBD_GetString>
  }
  return USBD_StrDesc;
 8015028:	4b02      	ldr	r3, [pc, #8]	; (8015034 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801502a:	4618      	mov	r0, r3
 801502c:	3708      	adds	r7, #8
 801502e:	46bd      	mov	sp, r7
 8015030:	bd80      	pop	{r7, pc}
 8015032:	bf00      	nop
 8015034:	24002020 	.word	0x24002020
 8015038:	08019da8 	.word	0x08019da8

0801503c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801503c:	b580      	push	{r7, lr}
 801503e:	b084      	sub	sp, #16
 8015040:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015042:	4b0f      	ldr	r3, [pc, #60]	; (8015080 <Get_SerialNum+0x44>)
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015048:	4b0e      	ldr	r3, [pc, #56]	; (8015084 <Get_SerialNum+0x48>)
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801504e:	4b0e      	ldr	r3, [pc, #56]	; (8015088 <Get_SerialNum+0x4c>)
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015054:	68fa      	ldr	r2, [r7, #12]
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	4413      	add	r3, r2
 801505a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	2b00      	cmp	r3, #0
 8015060:	d009      	beq.n	8015076 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015062:	2208      	movs	r2, #8
 8015064:	4909      	ldr	r1, [pc, #36]	; (801508c <Get_SerialNum+0x50>)
 8015066:	68f8      	ldr	r0, [r7, #12]
 8015068:	f000 f814 	bl	8015094 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801506c:	2204      	movs	r2, #4
 801506e:	4908      	ldr	r1, [pc, #32]	; (8015090 <Get_SerialNum+0x54>)
 8015070:	68b8      	ldr	r0, [r7, #8]
 8015072:	f000 f80f 	bl	8015094 <IntToUnicode>
  }
}
 8015076:	bf00      	nop
 8015078:	3710      	adds	r7, #16
 801507a:	46bd      	mov	sp, r7
 801507c:	bd80      	pop	{r7, pc}
 801507e:	bf00      	nop
 8015080:	1ff1e800 	.word	0x1ff1e800
 8015084:	1ff1e804 	.word	0x1ff1e804
 8015088:	1ff1e808 	.word	0x1ff1e808
 801508c:	240000e6 	.word	0x240000e6
 8015090:	240000f6 	.word	0x240000f6

08015094 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015094:	b480      	push	{r7}
 8015096:	b087      	sub	sp, #28
 8015098:	af00      	add	r7, sp, #0
 801509a:	60f8      	str	r0, [r7, #12]
 801509c:	60b9      	str	r1, [r7, #8]
 801509e:	4613      	mov	r3, r2
 80150a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80150a2:	2300      	movs	r3, #0
 80150a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80150a6:	2300      	movs	r3, #0
 80150a8:	75fb      	strb	r3, [r7, #23]
 80150aa:	e027      	b.n	80150fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	0f1b      	lsrs	r3, r3, #28
 80150b0:	2b09      	cmp	r3, #9
 80150b2:	d80b      	bhi.n	80150cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	0f1b      	lsrs	r3, r3, #28
 80150b8:	b2da      	uxtb	r2, r3
 80150ba:	7dfb      	ldrb	r3, [r7, #23]
 80150bc:	005b      	lsls	r3, r3, #1
 80150be:	4619      	mov	r1, r3
 80150c0:	68bb      	ldr	r3, [r7, #8]
 80150c2:	440b      	add	r3, r1
 80150c4:	3230      	adds	r2, #48	; 0x30
 80150c6:	b2d2      	uxtb	r2, r2
 80150c8:	701a      	strb	r2, [r3, #0]
 80150ca:	e00a      	b.n	80150e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	0f1b      	lsrs	r3, r3, #28
 80150d0:	b2da      	uxtb	r2, r3
 80150d2:	7dfb      	ldrb	r3, [r7, #23]
 80150d4:	005b      	lsls	r3, r3, #1
 80150d6:	4619      	mov	r1, r3
 80150d8:	68bb      	ldr	r3, [r7, #8]
 80150da:	440b      	add	r3, r1
 80150dc:	3237      	adds	r2, #55	; 0x37
 80150de:	b2d2      	uxtb	r2, r2
 80150e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	011b      	lsls	r3, r3, #4
 80150e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80150e8:	7dfb      	ldrb	r3, [r7, #23]
 80150ea:	005b      	lsls	r3, r3, #1
 80150ec:	3301      	adds	r3, #1
 80150ee:	68ba      	ldr	r2, [r7, #8]
 80150f0:	4413      	add	r3, r2
 80150f2:	2200      	movs	r2, #0
 80150f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80150f6:	7dfb      	ldrb	r3, [r7, #23]
 80150f8:	3301      	adds	r3, #1
 80150fa:	75fb      	strb	r3, [r7, #23]
 80150fc:	7dfa      	ldrb	r2, [r7, #23]
 80150fe:	79fb      	ldrb	r3, [r7, #7]
 8015100:	429a      	cmp	r2, r3
 8015102:	d3d3      	bcc.n	80150ac <IntToUnicode+0x18>
  }
}
 8015104:	bf00      	nop
 8015106:	bf00      	nop
 8015108:	371c      	adds	r7, #28
 801510a:	46bd      	mov	sp, r7
 801510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015110:	4770      	bx	lr
	...

08015114 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015114:	b580      	push	{r7, lr}
 8015116:	b0b2      	sub	sp, #200	; 0xc8
 8015118:	af00      	add	r7, sp, #0
 801511a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801511c:	f107 0310 	add.w	r3, r7, #16
 8015120:	22b8      	movs	r2, #184	; 0xb8
 8015122:	2100      	movs	r1, #0
 8015124:	4618      	mov	r0, r3
 8015126:	f001 fa66 	bl	80165f6 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	4a1a      	ldr	r2, [pc, #104]	; (8015198 <HAL_PCD_MspInit+0x84>)
 8015130:	4293      	cmp	r3, r2
 8015132:	d12c      	bne.n	801518e <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8015134:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8015138:	f04f 0300 	mov.w	r3, #0
 801513c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8015140:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8015144:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8015148:	f107 0310 	add.w	r3, r7, #16
 801514c:	4618      	mov	r0, r3
 801514e:	f7f4 ffa1 	bl	800a094 <HAL_RCCEx_PeriphCLKConfig>
 8015152:	4603      	mov	r3, r0
 8015154:	2b00      	cmp	r3, #0
 8015156:	d001      	beq.n	801515c <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8015158:	f7ec fd38 	bl	8001bcc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801515c:	f7f3 ffba 	bl	80090d4 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8015160:	4b0e      	ldr	r3, [pc, #56]	; (801519c <HAL_PCD_MspInit+0x88>)
 8015162:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8015166:	4a0d      	ldr	r2, [pc, #52]	; (801519c <HAL_PCD_MspInit+0x88>)
 8015168:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801516c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8015170:	4b0a      	ldr	r3, [pc, #40]	; (801519c <HAL_PCD_MspInit+0x88>)
 8015172:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8015176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801517a:	60fb      	str	r3, [r7, #12]
 801517c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801517e:	2200      	movs	r2, #0
 8015180:	2100      	movs	r1, #0
 8015182:	204d      	movs	r0, #77	; 0x4d
 8015184:	f7ef fae7 	bl	8004756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8015188:	204d      	movs	r0, #77	; 0x4d
 801518a:	f7ef fafe 	bl	800478a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801518e:	bf00      	nop
 8015190:	37c8      	adds	r7, #200	; 0xc8
 8015192:	46bd      	mov	sp, r7
 8015194:	bd80      	pop	{r7, pc}
 8015196:	bf00      	nop
 8015198:	40040000 	.word	0x40040000
 801519c:	58024400 	.word	0x58024400

080151a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80151a0:	b580      	push	{r7, lr}
 80151a2:	b082      	sub	sp, #8
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80151b4:	4619      	mov	r1, r3
 80151b6:	4610      	mov	r0, r2
 80151b8:	f7fe fb03 	bl	80137c2 <USBD_LL_SetupStage>
}
 80151bc:	bf00      	nop
 80151be:	3708      	adds	r7, #8
 80151c0:	46bd      	mov	sp, r7
 80151c2:	bd80      	pop	{r7, pc}

080151c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80151c4:	b580      	push	{r7, lr}
 80151c6:	b082      	sub	sp, #8
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	6078      	str	r0, [r7, #4]
 80151cc:	460b      	mov	r3, r1
 80151ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80151d6:	78fa      	ldrb	r2, [r7, #3]
 80151d8:	6879      	ldr	r1, [r7, #4]
 80151da:	4613      	mov	r3, r2
 80151dc:	00db      	lsls	r3, r3, #3
 80151de:	4413      	add	r3, r2
 80151e0:	009b      	lsls	r3, r3, #2
 80151e2:	440b      	add	r3, r1
 80151e4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80151e8:	681a      	ldr	r2, [r3, #0]
 80151ea:	78fb      	ldrb	r3, [r7, #3]
 80151ec:	4619      	mov	r1, r3
 80151ee:	f7fe fb3d 	bl	801386c <USBD_LL_DataOutStage>
}
 80151f2:	bf00      	nop
 80151f4:	3708      	adds	r7, #8
 80151f6:	46bd      	mov	sp, r7
 80151f8:	bd80      	pop	{r7, pc}

080151fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80151fa:	b580      	push	{r7, lr}
 80151fc:	b082      	sub	sp, #8
 80151fe:	af00      	add	r7, sp, #0
 8015200:	6078      	str	r0, [r7, #4]
 8015202:	460b      	mov	r3, r1
 8015204:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801520c:	78fa      	ldrb	r2, [r7, #3]
 801520e:	6879      	ldr	r1, [r7, #4]
 8015210:	4613      	mov	r3, r2
 8015212:	00db      	lsls	r3, r3, #3
 8015214:	4413      	add	r3, r2
 8015216:	009b      	lsls	r3, r3, #2
 8015218:	440b      	add	r3, r1
 801521a:	3348      	adds	r3, #72	; 0x48
 801521c:	681a      	ldr	r2, [r3, #0]
 801521e:	78fb      	ldrb	r3, [r7, #3]
 8015220:	4619      	mov	r1, r3
 8015222:	f7fe fbd6 	bl	80139d2 <USBD_LL_DataInStage>
}
 8015226:	bf00      	nop
 8015228:	3708      	adds	r7, #8
 801522a:	46bd      	mov	sp, r7
 801522c:	bd80      	pop	{r7, pc}

0801522e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801522e:	b580      	push	{r7, lr}
 8015230:	b082      	sub	sp, #8
 8015232:	af00      	add	r7, sp, #0
 8015234:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801523c:	4618      	mov	r0, r3
 801523e:	f7fe fd10 	bl	8013c62 <USBD_LL_SOF>
}
 8015242:	bf00      	nop
 8015244:	3708      	adds	r7, #8
 8015246:	46bd      	mov	sp, r7
 8015248:	bd80      	pop	{r7, pc}

0801524a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801524a:	b580      	push	{r7, lr}
 801524c:	b084      	sub	sp, #16
 801524e:	af00      	add	r7, sp, #0
 8015250:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015252:	2301      	movs	r3, #1
 8015254:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	691b      	ldr	r3, [r3, #16]
 801525a:	2b00      	cmp	r3, #0
 801525c:	d102      	bne.n	8015264 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801525e:	2300      	movs	r3, #0
 8015260:	73fb      	strb	r3, [r7, #15]
 8015262:	e008      	b.n	8015276 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	691b      	ldr	r3, [r3, #16]
 8015268:	2b02      	cmp	r3, #2
 801526a:	d102      	bne.n	8015272 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801526c:	2301      	movs	r3, #1
 801526e:	73fb      	strb	r3, [r7, #15]
 8015270:	e001      	b.n	8015276 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015272:	f7ec fcab 	bl	8001bcc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801527c:	7bfa      	ldrb	r2, [r7, #15]
 801527e:	4611      	mov	r1, r2
 8015280:	4618      	mov	r0, r3
 8015282:	f7fe fcaa 	bl	8013bda <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801528c:	4618      	mov	r0, r3
 801528e:	f7fe fc52 	bl	8013b36 <USBD_LL_Reset>
}
 8015292:	bf00      	nop
 8015294:	3710      	adds	r7, #16
 8015296:	46bd      	mov	sp, r7
 8015298:	bd80      	pop	{r7, pc}
	...

0801529c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801529c:	b580      	push	{r7, lr}
 801529e:	b082      	sub	sp, #8
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80152aa:	4618      	mov	r0, r3
 80152ac:	f7fe fca5 	bl	8013bfa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	687a      	ldr	r2, [r7, #4]
 80152bc:	6812      	ldr	r2, [r2, #0]
 80152be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80152c2:	f043 0301 	orr.w	r3, r3, #1
 80152c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	6a1b      	ldr	r3, [r3, #32]
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d005      	beq.n	80152dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80152d0:	4b04      	ldr	r3, [pc, #16]	; (80152e4 <HAL_PCD_SuspendCallback+0x48>)
 80152d2:	691b      	ldr	r3, [r3, #16]
 80152d4:	4a03      	ldr	r2, [pc, #12]	; (80152e4 <HAL_PCD_SuspendCallback+0x48>)
 80152d6:	f043 0306 	orr.w	r3, r3, #6
 80152da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80152dc:	bf00      	nop
 80152de:	3708      	adds	r7, #8
 80152e0:	46bd      	mov	sp, r7
 80152e2:	bd80      	pop	{r7, pc}
 80152e4:	e000ed00 	.word	0xe000ed00

080152e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80152e8:	b580      	push	{r7, lr}
 80152ea:	b082      	sub	sp, #8
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80152f6:	4618      	mov	r0, r3
 80152f8:	f7fe fc9b 	bl	8013c32 <USBD_LL_Resume>
}
 80152fc:	bf00      	nop
 80152fe:	3708      	adds	r7, #8
 8015300:	46bd      	mov	sp, r7
 8015302:	bd80      	pop	{r7, pc}

08015304 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015304:	b580      	push	{r7, lr}
 8015306:	b082      	sub	sp, #8
 8015308:	af00      	add	r7, sp, #0
 801530a:	6078      	str	r0, [r7, #4]
 801530c:	460b      	mov	r3, r1
 801530e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015316:	78fa      	ldrb	r2, [r7, #3]
 8015318:	4611      	mov	r1, r2
 801531a:	4618      	mov	r0, r3
 801531c:	f7fe fcf3 	bl	8013d06 <USBD_LL_IsoOUTIncomplete>
}
 8015320:	bf00      	nop
 8015322:	3708      	adds	r7, #8
 8015324:	46bd      	mov	sp, r7
 8015326:	bd80      	pop	{r7, pc}

08015328 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015328:	b580      	push	{r7, lr}
 801532a:	b082      	sub	sp, #8
 801532c:	af00      	add	r7, sp, #0
 801532e:	6078      	str	r0, [r7, #4]
 8015330:	460b      	mov	r3, r1
 8015332:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801533a:	78fa      	ldrb	r2, [r7, #3]
 801533c:	4611      	mov	r1, r2
 801533e:	4618      	mov	r0, r3
 8015340:	f7fe fcaf 	bl	8013ca2 <USBD_LL_IsoINIncomplete>
}
 8015344:	bf00      	nop
 8015346:	3708      	adds	r7, #8
 8015348:	46bd      	mov	sp, r7
 801534a:	bd80      	pop	{r7, pc}

0801534c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801534c:	b580      	push	{r7, lr}
 801534e:	b082      	sub	sp, #8
 8015350:	af00      	add	r7, sp, #0
 8015352:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801535a:	4618      	mov	r0, r3
 801535c:	f7fe fd05 	bl	8013d6a <USBD_LL_DevConnected>
}
 8015360:	bf00      	nop
 8015362:	3708      	adds	r7, #8
 8015364:	46bd      	mov	sp, r7
 8015366:	bd80      	pop	{r7, pc}

08015368 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015368:	b580      	push	{r7, lr}
 801536a:	b082      	sub	sp, #8
 801536c:	af00      	add	r7, sp, #0
 801536e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015376:	4618      	mov	r0, r3
 8015378:	f7fe fd02 	bl	8013d80 <USBD_LL_DevDisconnected>
}
 801537c:	bf00      	nop
 801537e:	3708      	adds	r7, #8
 8015380:	46bd      	mov	sp, r7
 8015382:	bd80      	pop	{r7, pc}

08015384 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015384:	b580      	push	{r7, lr}
 8015386:	b082      	sub	sp, #8
 8015388:	af00      	add	r7, sp, #0
 801538a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	781b      	ldrb	r3, [r3, #0]
 8015390:	2b01      	cmp	r3, #1
 8015392:	d140      	bne.n	8015416 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8015394:	4a22      	ldr	r2, [pc, #136]	; (8015420 <USBD_LL_Init+0x9c>)
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	4a20      	ldr	r2, [pc, #128]	; (8015420 <USBD_LL_Init+0x9c>)
 80153a0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80153a4:	4b1e      	ldr	r3, [pc, #120]	; (8015420 <USBD_LL_Init+0x9c>)
 80153a6:	4a1f      	ldr	r2, [pc, #124]	; (8015424 <USBD_LL_Init+0xa0>)
 80153a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80153aa:	4b1d      	ldr	r3, [pc, #116]	; (8015420 <USBD_LL_Init+0x9c>)
 80153ac:	2209      	movs	r2, #9
 80153ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80153b0:	4b1b      	ldr	r3, [pc, #108]	; (8015420 <USBD_LL_Init+0x9c>)
 80153b2:	2202      	movs	r2, #2
 80153b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80153b6:	4b1a      	ldr	r3, [pc, #104]	; (8015420 <USBD_LL_Init+0x9c>)
 80153b8:	2200      	movs	r2, #0
 80153ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80153bc:	4b18      	ldr	r3, [pc, #96]	; (8015420 <USBD_LL_Init+0x9c>)
 80153be:	2202      	movs	r2, #2
 80153c0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80153c2:	4b17      	ldr	r3, [pc, #92]	; (8015420 <USBD_LL_Init+0x9c>)
 80153c4:	2200      	movs	r2, #0
 80153c6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80153c8:	4b15      	ldr	r3, [pc, #84]	; (8015420 <USBD_LL_Init+0x9c>)
 80153ca:	2200      	movs	r2, #0
 80153cc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80153ce:	4b14      	ldr	r3, [pc, #80]	; (8015420 <USBD_LL_Init+0x9c>)
 80153d0:	2200      	movs	r2, #0
 80153d2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80153d4:	4b12      	ldr	r3, [pc, #72]	; (8015420 <USBD_LL_Init+0x9c>)
 80153d6:	2200      	movs	r2, #0
 80153d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80153da:	4b11      	ldr	r3, [pc, #68]	; (8015420 <USBD_LL_Init+0x9c>)
 80153dc:	2200      	movs	r2, #0
 80153de:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80153e0:	4b0f      	ldr	r3, [pc, #60]	; (8015420 <USBD_LL_Init+0x9c>)
 80153e2:	2200      	movs	r2, #0
 80153e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80153e6:	480e      	ldr	r0, [pc, #56]	; (8015420 <USBD_LL_Init+0x9c>)
 80153e8:	f7f2 fb81 	bl	8007aee <HAL_PCD_Init>
 80153ec:	4603      	mov	r3, r0
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d001      	beq.n	80153f6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80153f2:	f7ec fbeb 	bl	8001bcc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80153f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80153fa:	4809      	ldr	r0, [pc, #36]	; (8015420 <USBD_LL_Init+0x9c>)
 80153fc:	f7f3 fdef 	bl	8008fde <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8015400:	2280      	movs	r2, #128	; 0x80
 8015402:	2100      	movs	r1, #0
 8015404:	4806      	ldr	r0, [pc, #24]	; (8015420 <USBD_LL_Init+0x9c>)
 8015406:	f7f3 fda3 	bl	8008f50 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801540a:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801540e:	2101      	movs	r1, #1
 8015410:	4803      	ldr	r0, [pc, #12]	; (8015420 <USBD_LL_Init+0x9c>)
 8015412:	f7f3 fd9d 	bl	8008f50 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8015416:	2300      	movs	r3, #0
}
 8015418:	4618      	mov	r0, r3
 801541a:	3708      	adds	r7, #8
 801541c:	46bd      	mov	sp, r7
 801541e:	bd80      	pop	{r7, pc}
 8015420:	24002220 	.word	0x24002220
 8015424:	40040000 	.word	0x40040000

08015428 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015428:	b580      	push	{r7, lr}
 801542a:	b084      	sub	sp, #16
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015430:	2300      	movs	r3, #0
 8015432:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015434:	2300      	movs	r3, #0
 8015436:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801543e:	4618      	mov	r0, r3
 8015440:	f7f2 fc79 	bl	8007d36 <HAL_PCD_Start>
 8015444:	4603      	mov	r3, r0
 8015446:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015448:	7bfb      	ldrb	r3, [r7, #15]
 801544a:	4618      	mov	r0, r3
 801544c:	f000 f942 	bl	80156d4 <USBD_Get_USB_Status>
 8015450:	4603      	mov	r3, r0
 8015452:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015454:	7bbb      	ldrb	r3, [r7, #14]
}
 8015456:	4618      	mov	r0, r3
 8015458:	3710      	adds	r7, #16
 801545a:	46bd      	mov	sp, r7
 801545c:	bd80      	pop	{r7, pc}

0801545e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801545e:	b580      	push	{r7, lr}
 8015460:	b084      	sub	sp, #16
 8015462:	af00      	add	r7, sp, #0
 8015464:	6078      	str	r0, [r7, #4]
 8015466:	4608      	mov	r0, r1
 8015468:	4611      	mov	r1, r2
 801546a:	461a      	mov	r2, r3
 801546c:	4603      	mov	r3, r0
 801546e:	70fb      	strb	r3, [r7, #3]
 8015470:	460b      	mov	r3, r1
 8015472:	70bb      	strb	r3, [r7, #2]
 8015474:	4613      	mov	r3, r2
 8015476:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015478:	2300      	movs	r3, #0
 801547a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801547c:	2300      	movs	r3, #0
 801547e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015486:	78bb      	ldrb	r3, [r7, #2]
 8015488:	883a      	ldrh	r2, [r7, #0]
 801548a:	78f9      	ldrb	r1, [r7, #3]
 801548c:	f7f3 f979 	bl	8008782 <HAL_PCD_EP_Open>
 8015490:	4603      	mov	r3, r0
 8015492:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015494:	7bfb      	ldrb	r3, [r7, #15]
 8015496:	4618      	mov	r0, r3
 8015498:	f000 f91c 	bl	80156d4 <USBD_Get_USB_Status>
 801549c:	4603      	mov	r3, r0
 801549e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80154a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80154a2:	4618      	mov	r0, r3
 80154a4:	3710      	adds	r7, #16
 80154a6:	46bd      	mov	sp, r7
 80154a8:	bd80      	pop	{r7, pc}

080154aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80154aa:	b580      	push	{r7, lr}
 80154ac:	b084      	sub	sp, #16
 80154ae:	af00      	add	r7, sp, #0
 80154b0:	6078      	str	r0, [r7, #4]
 80154b2:	460b      	mov	r3, r1
 80154b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80154b6:	2300      	movs	r3, #0
 80154b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80154ba:	2300      	movs	r3, #0
 80154bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80154c4:	78fa      	ldrb	r2, [r7, #3]
 80154c6:	4611      	mov	r1, r2
 80154c8:	4618      	mov	r0, r3
 80154ca:	f7f3 f9c2 	bl	8008852 <HAL_PCD_EP_Close>
 80154ce:	4603      	mov	r3, r0
 80154d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80154d2:	7bfb      	ldrb	r3, [r7, #15]
 80154d4:	4618      	mov	r0, r3
 80154d6:	f000 f8fd 	bl	80156d4 <USBD_Get_USB_Status>
 80154da:	4603      	mov	r3, r0
 80154dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80154de:	7bbb      	ldrb	r3, [r7, #14]
}
 80154e0:	4618      	mov	r0, r3
 80154e2:	3710      	adds	r7, #16
 80154e4:	46bd      	mov	sp, r7
 80154e6:	bd80      	pop	{r7, pc}

080154e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b084      	sub	sp, #16
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	6078      	str	r0, [r7, #4]
 80154f0:	460b      	mov	r3, r1
 80154f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80154f4:	2300      	movs	r3, #0
 80154f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80154f8:	2300      	movs	r3, #0
 80154fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015502:	78fa      	ldrb	r2, [r7, #3]
 8015504:	4611      	mov	r1, r2
 8015506:	4618      	mov	r0, r3
 8015508:	f7f3 fa7c 	bl	8008a04 <HAL_PCD_EP_SetStall>
 801550c:	4603      	mov	r3, r0
 801550e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015510:	7bfb      	ldrb	r3, [r7, #15]
 8015512:	4618      	mov	r0, r3
 8015514:	f000 f8de 	bl	80156d4 <USBD_Get_USB_Status>
 8015518:	4603      	mov	r3, r0
 801551a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801551c:	7bbb      	ldrb	r3, [r7, #14]
}
 801551e:	4618      	mov	r0, r3
 8015520:	3710      	adds	r7, #16
 8015522:	46bd      	mov	sp, r7
 8015524:	bd80      	pop	{r7, pc}

08015526 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015526:	b580      	push	{r7, lr}
 8015528:	b084      	sub	sp, #16
 801552a:	af00      	add	r7, sp, #0
 801552c:	6078      	str	r0, [r7, #4]
 801552e:	460b      	mov	r3, r1
 8015530:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015532:	2300      	movs	r3, #0
 8015534:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015536:	2300      	movs	r3, #0
 8015538:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015540:	78fa      	ldrb	r2, [r7, #3]
 8015542:	4611      	mov	r1, r2
 8015544:	4618      	mov	r0, r3
 8015546:	f7f3 fac1 	bl	8008acc <HAL_PCD_EP_ClrStall>
 801554a:	4603      	mov	r3, r0
 801554c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801554e:	7bfb      	ldrb	r3, [r7, #15]
 8015550:	4618      	mov	r0, r3
 8015552:	f000 f8bf 	bl	80156d4 <USBD_Get_USB_Status>
 8015556:	4603      	mov	r3, r0
 8015558:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801555a:	7bbb      	ldrb	r3, [r7, #14]
}
 801555c:	4618      	mov	r0, r3
 801555e:	3710      	adds	r7, #16
 8015560:	46bd      	mov	sp, r7
 8015562:	bd80      	pop	{r7, pc}

08015564 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015564:	b480      	push	{r7}
 8015566:	b085      	sub	sp, #20
 8015568:	af00      	add	r7, sp, #0
 801556a:	6078      	str	r0, [r7, #4]
 801556c:	460b      	mov	r3, r1
 801556e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015576:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015578:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801557c:	2b00      	cmp	r3, #0
 801557e:	da0b      	bge.n	8015598 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015580:	78fb      	ldrb	r3, [r7, #3]
 8015582:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015586:	68f9      	ldr	r1, [r7, #12]
 8015588:	4613      	mov	r3, r2
 801558a:	00db      	lsls	r3, r3, #3
 801558c:	4413      	add	r3, r2
 801558e:	009b      	lsls	r3, r3, #2
 8015590:	440b      	add	r3, r1
 8015592:	333e      	adds	r3, #62	; 0x3e
 8015594:	781b      	ldrb	r3, [r3, #0]
 8015596:	e00b      	b.n	80155b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015598:	78fb      	ldrb	r3, [r7, #3]
 801559a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801559e:	68f9      	ldr	r1, [r7, #12]
 80155a0:	4613      	mov	r3, r2
 80155a2:	00db      	lsls	r3, r3, #3
 80155a4:	4413      	add	r3, r2
 80155a6:	009b      	lsls	r3, r3, #2
 80155a8:	440b      	add	r3, r1
 80155aa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80155ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80155b0:	4618      	mov	r0, r3
 80155b2:	3714      	adds	r7, #20
 80155b4:	46bd      	mov	sp, r7
 80155b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ba:	4770      	bx	lr

080155bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80155bc:	b580      	push	{r7, lr}
 80155be:	b084      	sub	sp, #16
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	6078      	str	r0, [r7, #4]
 80155c4:	460b      	mov	r3, r1
 80155c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80155c8:	2300      	movs	r3, #0
 80155ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80155cc:	2300      	movs	r3, #0
 80155ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80155d6:	78fa      	ldrb	r2, [r7, #3]
 80155d8:	4611      	mov	r1, r2
 80155da:	4618      	mov	r0, r3
 80155dc:	f7f3 f8ac 	bl	8008738 <HAL_PCD_SetAddress>
 80155e0:	4603      	mov	r3, r0
 80155e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80155e4:	7bfb      	ldrb	r3, [r7, #15]
 80155e6:	4618      	mov	r0, r3
 80155e8:	f000 f874 	bl	80156d4 <USBD_Get_USB_Status>
 80155ec:	4603      	mov	r3, r0
 80155ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80155f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80155f2:	4618      	mov	r0, r3
 80155f4:	3710      	adds	r7, #16
 80155f6:	46bd      	mov	sp, r7
 80155f8:	bd80      	pop	{r7, pc}

080155fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80155fa:	b580      	push	{r7, lr}
 80155fc:	b086      	sub	sp, #24
 80155fe:	af00      	add	r7, sp, #0
 8015600:	60f8      	str	r0, [r7, #12]
 8015602:	607a      	str	r2, [r7, #4]
 8015604:	603b      	str	r3, [r7, #0]
 8015606:	460b      	mov	r3, r1
 8015608:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801560a:	2300      	movs	r3, #0
 801560c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801560e:	2300      	movs	r3, #0
 8015610:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015618:	7af9      	ldrb	r1, [r7, #11]
 801561a:	683b      	ldr	r3, [r7, #0]
 801561c:	687a      	ldr	r2, [r7, #4]
 801561e:	f7f3 f9b6 	bl	800898e <HAL_PCD_EP_Transmit>
 8015622:	4603      	mov	r3, r0
 8015624:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015626:	7dfb      	ldrb	r3, [r7, #23]
 8015628:	4618      	mov	r0, r3
 801562a:	f000 f853 	bl	80156d4 <USBD_Get_USB_Status>
 801562e:	4603      	mov	r3, r0
 8015630:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015632:	7dbb      	ldrb	r3, [r7, #22]
}
 8015634:	4618      	mov	r0, r3
 8015636:	3718      	adds	r7, #24
 8015638:	46bd      	mov	sp, r7
 801563a:	bd80      	pop	{r7, pc}

0801563c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801563c:	b580      	push	{r7, lr}
 801563e:	b086      	sub	sp, #24
 8015640:	af00      	add	r7, sp, #0
 8015642:	60f8      	str	r0, [r7, #12]
 8015644:	607a      	str	r2, [r7, #4]
 8015646:	603b      	str	r3, [r7, #0]
 8015648:	460b      	mov	r3, r1
 801564a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801564c:	2300      	movs	r3, #0
 801564e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015650:	2300      	movs	r3, #0
 8015652:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801565a:	7af9      	ldrb	r1, [r7, #11]
 801565c:	683b      	ldr	r3, [r7, #0]
 801565e:	687a      	ldr	r2, [r7, #4]
 8015660:	f7f3 f941 	bl	80088e6 <HAL_PCD_EP_Receive>
 8015664:	4603      	mov	r3, r0
 8015666:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015668:	7dfb      	ldrb	r3, [r7, #23]
 801566a:	4618      	mov	r0, r3
 801566c:	f000 f832 	bl	80156d4 <USBD_Get_USB_Status>
 8015670:	4603      	mov	r3, r0
 8015672:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015674:	7dbb      	ldrb	r3, [r7, #22]
}
 8015676:	4618      	mov	r0, r3
 8015678:	3718      	adds	r7, #24
 801567a:	46bd      	mov	sp, r7
 801567c:	bd80      	pop	{r7, pc}

0801567e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801567e:	b580      	push	{r7, lr}
 8015680:	b082      	sub	sp, #8
 8015682:	af00      	add	r7, sp, #0
 8015684:	6078      	str	r0, [r7, #4]
 8015686:	460b      	mov	r3, r1
 8015688:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015690:	78fa      	ldrb	r2, [r7, #3]
 8015692:	4611      	mov	r1, r2
 8015694:	4618      	mov	r0, r3
 8015696:	f7f3 f962 	bl	800895e <HAL_PCD_EP_GetRxCount>
 801569a:	4603      	mov	r3, r0
}
 801569c:	4618      	mov	r0, r3
 801569e:	3708      	adds	r7, #8
 80156a0:	46bd      	mov	sp, r7
 80156a2:	bd80      	pop	{r7, pc}

080156a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80156a4:	b480      	push	{r7}
 80156a6:	b083      	sub	sp, #12
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80156ac:	4b03      	ldr	r3, [pc, #12]	; (80156bc <USBD_static_malloc+0x18>)
}
 80156ae:	4618      	mov	r0, r3
 80156b0:	370c      	adds	r7, #12
 80156b2:	46bd      	mov	sp, r7
 80156b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b8:	4770      	bx	lr
 80156ba:	bf00      	nop
 80156bc:	2400272c 	.word	0x2400272c

080156c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80156c0:	b480      	push	{r7}
 80156c2:	b083      	sub	sp, #12
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80156c8:	bf00      	nop
 80156ca:	370c      	adds	r7, #12
 80156cc:	46bd      	mov	sp, r7
 80156ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d2:	4770      	bx	lr

080156d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80156d4:	b480      	push	{r7}
 80156d6:	b085      	sub	sp, #20
 80156d8:	af00      	add	r7, sp, #0
 80156da:	4603      	mov	r3, r0
 80156dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80156de:	2300      	movs	r3, #0
 80156e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80156e2:	79fb      	ldrb	r3, [r7, #7]
 80156e4:	2b03      	cmp	r3, #3
 80156e6:	d817      	bhi.n	8015718 <USBD_Get_USB_Status+0x44>
 80156e8:	a201      	add	r2, pc, #4	; (adr r2, 80156f0 <USBD_Get_USB_Status+0x1c>)
 80156ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156ee:	bf00      	nop
 80156f0:	08015701 	.word	0x08015701
 80156f4:	08015707 	.word	0x08015707
 80156f8:	0801570d 	.word	0x0801570d
 80156fc:	08015713 	.word	0x08015713
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015700:	2300      	movs	r3, #0
 8015702:	73fb      	strb	r3, [r7, #15]
    break;
 8015704:	e00b      	b.n	801571e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015706:	2303      	movs	r3, #3
 8015708:	73fb      	strb	r3, [r7, #15]
    break;
 801570a:	e008      	b.n	801571e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801570c:	2301      	movs	r3, #1
 801570e:	73fb      	strb	r3, [r7, #15]
    break;
 8015710:	e005      	b.n	801571e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015712:	2303      	movs	r3, #3
 8015714:	73fb      	strb	r3, [r7, #15]
    break;
 8015716:	e002      	b.n	801571e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015718:	2303      	movs	r3, #3
 801571a:	73fb      	strb	r3, [r7, #15]
    break;
 801571c:	bf00      	nop
  }
  return usb_status;
 801571e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015720:	4618      	mov	r0, r3
 8015722:	3714      	adds	r7, #20
 8015724:	46bd      	mov	sp, r7
 8015726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801572a:	4770      	bx	lr

0801572c <__cvt>:
 801572c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801572e:	ed2d 8b02 	vpush	{d8}
 8015732:	eeb0 8b40 	vmov.f64	d8, d0
 8015736:	b085      	sub	sp, #20
 8015738:	4617      	mov	r7, r2
 801573a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801573c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801573e:	ee18 2a90 	vmov	r2, s17
 8015742:	f025 0520 	bic.w	r5, r5, #32
 8015746:	2a00      	cmp	r2, #0
 8015748:	bfb6      	itet	lt
 801574a:	222d      	movlt	r2, #45	; 0x2d
 801574c:	2200      	movge	r2, #0
 801574e:	eeb1 8b40 	vneglt.f64	d8, d0
 8015752:	2d46      	cmp	r5, #70	; 0x46
 8015754:	460c      	mov	r4, r1
 8015756:	701a      	strb	r2, [r3, #0]
 8015758:	d004      	beq.n	8015764 <__cvt+0x38>
 801575a:	2d45      	cmp	r5, #69	; 0x45
 801575c:	d100      	bne.n	8015760 <__cvt+0x34>
 801575e:	3401      	adds	r4, #1
 8015760:	2102      	movs	r1, #2
 8015762:	e000      	b.n	8015766 <__cvt+0x3a>
 8015764:	2103      	movs	r1, #3
 8015766:	ab03      	add	r3, sp, #12
 8015768:	9301      	str	r3, [sp, #4]
 801576a:	ab02      	add	r3, sp, #8
 801576c:	9300      	str	r3, [sp, #0]
 801576e:	4622      	mov	r2, r4
 8015770:	4633      	mov	r3, r6
 8015772:	eeb0 0b48 	vmov.f64	d0, d8
 8015776:	f001 f85b 	bl	8016830 <_dtoa_r>
 801577a:	2d47      	cmp	r5, #71	; 0x47
 801577c:	d101      	bne.n	8015782 <__cvt+0x56>
 801577e:	07fb      	lsls	r3, r7, #31
 8015780:	d51a      	bpl.n	80157b8 <__cvt+0x8c>
 8015782:	2d46      	cmp	r5, #70	; 0x46
 8015784:	eb00 0204 	add.w	r2, r0, r4
 8015788:	d10c      	bne.n	80157a4 <__cvt+0x78>
 801578a:	7803      	ldrb	r3, [r0, #0]
 801578c:	2b30      	cmp	r3, #48	; 0x30
 801578e:	d107      	bne.n	80157a0 <__cvt+0x74>
 8015790:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015798:	bf1c      	itt	ne
 801579a:	f1c4 0401 	rsbne	r4, r4, #1
 801579e:	6034      	strne	r4, [r6, #0]
 80157a0:	6833      	ldr	r3, [r6, #0]
 80157a2:	441a      	add	r2, r3
 80157a4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80157a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157ac:	bf08      	it	eq
 80157ae:	9203      	streq	r2, [sp, #12]
 80157b0:	2130      	movs	r1, #48	; 0x30
 80157b2:	9b03      	ldr	r3, [sp, #12]
 80157b4:	4293      	cmp	r3, r2
 80157b6:	d307      	bcc.n	80157c8 <__cvt+0x9c>
 80157b8:	9b03      	ldr	r3, [sp, #12]
 80157ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80157bc:	1a1b      	subs	r3, r3, r0
 80157be:	6013      	str	r3, [r2, #0]
 80157c0:	b005      	add	sp, #20
 80157c2:	ecbd 8b02 	vpop	{d8}
 80157c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157c8:	1c5c      	adds	r4, r3, #1
 80157ca:	9403      	str	r4, [sp, #12]
 80157cc:	7019      	strb	r1, [r3, #0]
 80157ce:	e7f0      	b.n	80157b2 <__cvt+0x86>

080157d0 <__exponent>:
 80157d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80157d2:	4603      	mov	r3, r0
 80157d4:	2900      	cmp	r1, #0
 80157d6:	bfb8      	it	lt
 80157d8:	4249      	neglt	r1, r1
 80157da:	f803 2b02 	strb.w	r2, [r3], #2
 80157de:	bfb4      	ite	lt
 80157e0:	222d      	movlt	r2, #45	; 0x2d
 80157e2:	222b      	movge	r2, #43	; 0x2b
 80157e4:	2909      	cmp	r1, #9
 80157e6:	7042      	strb	r2, [r0, #1]
 80157e8:	dd2a      	ble.n	8015840 <__exponent+0x70>
 80157ea:	f10d 0207 	add.w	r2, sp, #7
 80157ee:	4617      	mov	r7, r2
 80157f0:	260a      	movs	r6, #10
 80157f2:	4694      	mov	ip, r2
 80157f4:	fb91 f5f6 	sdiv	r5, r1, r6
 80157f8:	fb06 1415 	mls	r4, r6, r5, r1
 80157fc:	3430      	adds	r4, #48	; 0x30
 80157fe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8015802:	460c      	mov	r4, r1
 8015804:	2c63      	cmp	r4, #99	; 0x63
 8015806:	f102 32ff 	add.w	r2, r2, #4294967295
 801580a:	4629      	mov	r1, r5
 801580c:	dcf1      	bgt.n	80157f2 <__exponent+0x22>
 801580e:	3130      	adds	r1, #48	; 0x30
 8015810:	f1ac 0402 	sub.w	r4, ip, #2
 8015814:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015818:	1c41      	adds	r1, r0, #1
 801581a:	4622      	mov	r2, r4
 801581c:	42ba      	cmp	r2, r7
 801581e:	d30a      	bcc.n	8015836 <__exponent+0x66>
 8015820:	f10d 0209 	add.w	r2, sp, #9
 8015824:	eba2 020c 	sub.w	r2, r2, ip
 8015828:	42bc      	cmp	r4, r7
 801582a:	bf88      	it	hi
 801582c:	2200      	movhi	r2, #0
 801582e:	4413      	add	r3, r2
 8015830:	1a18      	subs	r0, r3, r0
 8015832:	b003      	add	sp, #12
 8015834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015836:	f812 5b01 	ldrb.w	r5, [r2], #1
 801583a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801583e:	e7ed      	b.n	801581c <__exponent+0x4c>
 8015840:	2330      	movs	r3, #48	; 0x30
 8015842:	3130      	adds	r1, #48	; 0x30
 8015844:	7083      	strb	r3, [r0, #2]
 8015846:	70c1      	strb	r1, [r0, #3]
 8015848:	1d03      	adds	r3, r0, #4
 801584a:	e7f1      	b.n	8015830 <__exponent+0x60>
 801584c:	0000      	movs	r0, r0
	...

08015850 <_printf_float>:
 8015850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015854:	b08b      	sub	sp, #44	; 0x2c
 8015856:	460c      	mov	r4, r1
 8015858:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801585c:	4616      	mov	r6, r2
 801585e:	461f      	mov	r7, r3
 8015860:	4605      	mov	r5, r0
 8015862:	f000 fed1 	bl	8016608 <_localeconv_r>
 8015866:	f8d0 b000 	ldr.w	fp, [r0]
 801586a:	4658      	mov	r0, fp
 801586c:	f7ea fda0 	bl	80003b0 <strlen>
 8015870:	2300      	movs	r3, #0
 8015872:	9308      	str	r3, [sp, #32]
 8015874:	f8d8 3000 	ldr.w	r3, [r8]
 8015878:	f894 9018 	ldrb.w	r9, [r4, #24]
 801587c:	6822      	ldr	r2, [r4, #0]
 801587e:	3307      	adds	r3, #7
 8015880:	f023 0307 	bic.w	r3, r3, #7
 8015884:	f103 0108 	add.w	r1, r3, #8
 8015888:	f8c8 1000 	str.w	r1, [r8]
 801588c:	ed93 0b00 	vldr	d0, [r3]
 8015890:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8015af0 <_printf_float+0x2a0>
 8015894:	eeb0 7bc0 	vabs.f64	d7, d0
 8015898:	eeb4 7b46 	vcmp.f64	d7, d6
 801589c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158a0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80158a4:	4682      	mov	sl, r0
 80158a6:	dd24      	ble.n	80158f2 <_printf_float+0xa2>
 80158a8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80158ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158b0:	d502      	bpl.n	80158b8 <_printf_float+0x68>
 80158b2:	232d      	movs	r3, #45	; 0x2d
 80158b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80158b8:	498f      	ldr	r1, [pc, #572]	; (8015af8 <_printf_float+0x2a8>)
 80158ba:	4b90      	ldr	r3, [pc, #576]	; (8015afc <_printf_float+0x2ac>)
 80158bc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80158c0:	bf94      	ite	ls
 80158c2:	4688      	movls	r8, r1
 80158c4:	4698      	movhi	r8, r3
 80158c6:	2303      	movs	r3, #3
 80158c8:	6123      	str	r3, [r4, #16]
 80158ca:	f022 0204 	bic.w	r2, r2, #4
 80158ce:	2300      	movs	r3, #0
 80158d0:	6022      	str	r2, [r4, #0]
 80158d2:	9304      	str	r3, [sp, #16]
 80158d4:	9700      	str	r7, [sp, #0]
 80158d6:	4633      	mov	r3, r6
 80158d8:	aa09      	add	r2, sp, #36	; 0x24
 80158da:	4621      	mov	r1, r4
 80158dc:	4628      	mov	r0, r5
 80158de:	f000 f9d1 	bl	8015c84 <_printf_common>
 80158e2:	3001      	adds	r0, #1
 80158e4:	f040 808a 	bne.w	80159fc <_printf_float+0x1ac>
 80158e8:	f04f 30ff 	mov.w	r0, #4294967295
 80158ec:	b00b      	add	sp, #44	; 0x2c
 80158ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158f2:	eeb4 0b40 	vcmp.f64	d0, d0
 80158f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158fa:	d709      	bvc.n	8015910 <_printf_float+0xc0>
 80158fc:	ee10 3a90 	vmov	r3, s1
 8015900:	2b00      	cmp	r3, #0
 8015902:	bfbc      	itt	lt
 8015904:	232d      	movlt	r3, #45	; 0x2d
 8015906:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801590a:	497d      	ldr	r1, [pc, #500]	; (8015b00 <_printf_float+0x2b0>)
 801590c:	4b7d      	ldr	r3, [pc, #500]	; (8015b04 <_printf_float+0x2b4>)
 801590e:	e7d5      	b.n	80158bc <_printf_float+0x6c>
 8015910:	6863      	ldr	r3, [r4, #4]
 8015912:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8015916:	9104      	str	r1, [sp, #16]
 8015918:	1c59      	adds	r1, r3, #1
 801591a:	d13c      	bne.n	8015996 <_printf_float+0x146>
 801591c:	2306      	movs	r3, #6
 801591e:	6063      	str	r3, [r4, #4]
 8015920:	2300      	movs	r3, #0
 8015922:	9303      	str	r3, [sp, #12]
 8015924:	ab08      	add	r3, sp, #32
 8015926:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801592a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801592e:	ab07      	add	r3, sp, #28
 8015930:	6861      	ldr	r1, [r4, #4]
 8015932:	9300      	str	r3, [sp, #0]
 8015934:	6022      	str	r2, [r4, #0]
 8015936:	f10d 031b 	add.w	r3, sp, #27
 801593a:	4628      	mov	r0, r5
 801593c:	f7ff fef6 	bl	801572c <__cvt>
 8015940:	9b04      	ldr	r3, [sp, #16]
 8015942:	9907      	ldr	r1, [sp, #28]
 8015944:	2b47      	cmp	r3, #71	; 0x47
 8015946:	4680      	mov	r8, r0
 8015948:	d108      	bne.n	801595c <_printf_float+0x10c>
 801594a:	1cc8      	adds	r0, r1, #3
 801594c:	db02      	blt.n	8015954 <_printf_float+0x104>
 801594e:	6863      	ldr	r3, [r4, #4]
 8015950:	4299      	cmp	r1, r3
 8015952:	dd41      	ble.n	80159d8 <_printf_float+0x188>
 8015954:	f1a9 0902 	sub.w	r9, r9, #2
 8015958:	fa5f f989 	uxtb.w	r9, r9
 801595c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8015960:	d820      	bhi.n	80159a4 <_printf_float+0x154>
 8015962:	3901      	subs	r1, #1
 8015964:	464a      	mov	r2, r9
 8015966:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801596a:	9107      	str	r1, [sp, #28]
 801596c:	f7ff ff30 	bl	80157d0 <__exponent>
 8015970:	9a08      	ldr	r2, [sp, #32]
 8015972:	9004      	str	r0, [sp, #16]
 8015974:	1813      	adds	r3, r2, r0
 8015976:	2a01      	cmp	r2, #1
 8015978:	6123      	str	r3, [r4, #16]
 801597a:	dc02      	bgt.n	8015982 <_printf_float+0x132>
 801597c:	6822      	ldr	r2, [r4, #0]
 801597e:	07d2      	lsls	r2, r2, #31
 8015980:	d501      	bpl.n	8015986 <_printf_float+0x136>
 8015982:	3301      	adds	r3, #1
 8015984:	6123      	str	r3, [r4, #16]
 8015986:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801598a:	2b00      	cmp	r3, #0
 801598c:	d0a2      	beq.n	80158d4 <_printf_float+0x84>
 801598e:	232d      	movs	r3, #45	; 0x2d
 8015990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015994:	e79e      	b.n	80158d4 <_printf_float+0x84>
 8015996:	9904      	ldr	r1, [sp, #16]
 8015998:	2947      	cmp	r1, #71	; 0x47
 801599a:	d1c1      	bne.n	8015920 <_printf_float+0xd0>
 801599c:	2b00      	cmp	r3, #0
 801599e:	d1bf      	bne.n	8015920 <_printf_float+0xd0>
 80159a0:	2301      	movs	r3, #1
 80159a2:	e7bc      	b.n	801591e <_printf_float+0xce>
 80159a4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80159a8:	d118      	bne.n	80159dc <_printf_float+0x18c>
 80159aa:	2900      	cmp	r1, #0
 80159ac:	6863      	ldr	r3, [r4, #4]
 80159ae:	dd0b      	ble.n	80159c8 <_printf_float+0x178>
 80159b0:	6121      	str	r1, [r4, #16]
 80159b2:	b913      	cbnz	r3, 80159ba <_printf_float+0x16a>
 80159b4:	6822      	ldr	r2, [r4, #0]
 80159b6:	07d0      	lsls	r0, r2, #31
 80159b8:	d502      	bpl.n	80159c0 <_printf_float+0x170>
 80159ba:	3301      	adds	r3, #1
 80159bc:	440b      	add	r3, r1
 80159be:	6123      	str	r3, [r4, #16]
 80159c0:	2300      	movs	r3, #0
 80159c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80159c4:	9304      	str	r3, [sp, #16]
 80159c6:	e7de      	b.n	8015986 <_printf_float+0x136>
 80159c8:	b913      	cbnz	r3, 80159d0 <_printf_float+0x180>
 80159ca:	6822      	ldr	r2, [r4, #0]
 80159cc:	07d2      	lsls	r2, r2, #31
 80159ce:	d501      	bpl.n	80159d4 <_printf_float+0x184>
 80159d0:	3302      	adds	r3, #2
 80159d2:	e7f4      	b.n	80159be <_printf_float+0x16e>
 80159d4:	2301      	movs	r3, #1
 80159d6:	e7f2      	b.n	80159be <_printf_float+0x16e>
 80159d8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80159dc:	9b08      	ldr	r3, [sp, #32]
 80159de:	4299      	cmp	r1, r3
 80159e0:	db05      	blt.n	80159ee <_printf_float+0x19e>
 80159e2:	6823      	ldr	r3, [r4, #0]
 80159e4:	6121      	str	r1, [r4, #16]
 80159e6:	07d8      	lsls	r0, r3, #31
 80159e8:	d5ea      	bpl.n	80159c0 <_printf_float+0x170>
 80159ea:	1c4b      	adds	r3, r1, #1
 80159ec:	e7e7      	b.n	80159be <_printf_float+0x16e>
 80159ee:	2900      	cmp	r1, #0
 80159f0:	bfd4      	ite	le
 80159f2:	f1c1 0202 	rsble	r2, r1, #2
 80159f6:	2201      	movgt	r2, #1
 80159f8:	4413      	add	r3, r2
 80159fa:	e7e0      	b.n	80159be <_printf_float+0x16e>
 80159fc:	6823      	ldr	r3, [r4, #0]
 80159fe:	055a      	lsls	r2, r3, #21
 8015a00:	d407      	bmi.n	8015a12 <_printf_float+0x1c2>
 8015a02:	6923      	ldr	r3, [r4, #16]
 8015a04:	4642      	mov	r2, r8
 8015a06:	4631      	mov	r1, r6
 8015a08:	4628      	mov	r0, r5
 8015a0a:	47b8      	blx	r7
 8015a0c:	3001      	adds	r0, #1
 8015a0e:	d12a      	bne.n	8015a66 <_printf_float+0x216>
 8015a10:	e76a      	b.n	80158e8 <_printf_float+0x98>
 8015a12:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8015a16:	f240 80e0 	bls.w	8015bda <_printf_float+0x38a>
 8015a1a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8015a1e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a26:	d133      	bne.n	8015a90 <_printf_float+0x240>
 8015a28:	4a37      	ldr	r2, [pc, #220]	; (8015b08 <_printf_float+0x2b8>)
 8015a2a:	2301      	movs	r3, #1
 8015a2c:	4631      	mov	r1, r6
 8015a2e:	4628      	mov	r0, r5
 8015a30:	47b8      	blx	r7
 8015a32:	3001      	adds	r0, #1
 8015a34:	f43f af58 	beq.w	80158e8 <_printf_float+0x98>
 8015a38:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8015a3c:	429a      	cmp	r2, r3
 8015a3e:	db02      	blt.n	8015a46 <_printf_float+0x1f6>
 8015a40:	6823      	ldr	r3, [r4, #0]
 8015a42:	07d8      	lsls	r0, r3, #31
 8015a44:	d50f      	bpl.n	8015a66 <_printf_float+0x216>
 8015a46:	4653      	mov	r3, sl
 8015a48:	465a      	mov	r2, fp
 8015a4a:	4631      	mov	r1, r6
 8015a4c:	4628      	mov	r0, r5
 8015a4e:	47b8      	blx	r7
 8015a50:	3001      	adds	r0, #1
 8015a52:	f43f af49 	beq.w	80158e8 <_printf_float+0x98>
 8015a56:	f04f 0800 	mov.w	r8, #0
 8015a5a:	f104 091a 	add.w	r9, r4, #26
 8015a5e:	9b08      	ldr	r3, [sp, #32]
 8015a60:	3b01      	subs	r3, #1
 8015a62:	4543      	cmp	r3, r8
 8015a64:	dc09      	bgt.n	8015a7a <_printf_float+0x22a>
 8015a66:	6823      	ldr	r3, [r4, #0]
 8015a68:	079b      	lsls	r3, r3, #30
 8015a6a:	f100 8106 	bmi.w	8015c7a <_printf_float+0x42a>
 8015a6e:	68e0      	ldr	r0, [r4, #12]
 8015a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a72:	4298      	cmp	r0, r3
 8015a74:	bfb8      	it	lt
 8015a76:	4618      	movlt	r0, r3
 8015a78:	e738      	b.n	80158ec <_printf_float+0x9c>
 8015a7a:	2301      	movs	r3, #1
 8015a7c:	464a      	mov	r2, r9
 8015a7e:	4631      	mov	r1, r6
 8015a80:	4628      	mov	r0, r5
 8015a82:	47b8      	blx	r7
 8015a84:	3001      	adds	r0, #1
 8015a86:	f43f af2f 	beq.w	80158e8 <_printf_float+0x98>
 8015a8a:	f108 0801 	add.w	r8, r8, #1
 8015a8e:	e7e6      	b.n	8015a5e <_printf_float+0x20e>
 8015a90:	9b07      	ldr	r3, [sp, #28]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	dc3a      	bgt.n	8015b0c <_printf_float+0x2bc>
 8015a96:	4a1c      	ldr	r2, [pc, #112]	; (8015b08 <_printf_float+0x2b8>)
 8015a98:	2301      	movs	r3, #1
 8015a9a:	4631      	mov	r1, r6
 8015a9c:	4628      	mov	r0, r5
 8015a9e:	47b8      	blx	r7
 8015aa0:	3001      	adds	r0, #1
 8015aa2:	f43f af21 	beq.w	80158e8 <_printf_float+0x98>
 8015aa6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8015aaa:	4313      	orrs	r3, r2
 8015aac:	d102      	bne.n	8015ab4 <_printf_float+0x264>
 8015aae:	6823      	ldr	r3, [r4, #0]
 8015ab0:	07d9      	lsls	r1, r3, #31
 8015ab2:	d5d8      	bpl.n	8015a66 <_printf_float+0x216>
 8015ab4:	4653      	mov	r3, sl
 8015ab6:	465a      	mov	r2, fp
 8015ab8:	4631      	mov	r1, r6
 8015aba:	4628      	mov	r0, r5
 8015abc:	47b8      	blx	r7
 8015abe:	3001      	adds	r0, #1
 8015ac0:	f43f af12 	beq.w	80158e8 <_printf_float+0x98>
 8015ac4:	f04f 0900 	mov.w	r9, #0
 8015ac8:	f104 0a1a 	add.w	sl, r4, #26
 8015acc:	9b07      	ldr	r3, [sp, #28]
 8015ace:	425b      	negs	r3, r3
 8015ad0:	454b      	cmp	r3, r9
 8015ad2:	dc01      	bgt.n	8015ad8 <_printf_float+0x288>
 8015ad4:	9b08      	ldr	r3, [sp, #32]
 8015ad6:	e795      	b.n	8015a04 <_printf_float+0x1b4>
 8015ad8:	2301      	movs	r3, #1
 8015ada:	4652      	mov	r2, sl
 8015adc:	4631      	mov	r1, r6
 8015ade:	4628      	mov	r0, r5
 8015ae0:	47b8      	blx	r7
 8015ae2:	3001      	adds	r0, #1
 8015ae4:	f43f af00 	beq.w	80158e8 <_printf_float+0x98>
 8015ae8:	f109 0901 	add.w	r9, r9, #1
 8015aec:	e7ee      	b.n	8015acc <_printf_float+0x27c>
 8015aee:	bf00      	nop
 8015af0:	ffffffff 	.word	0xffffffff
 8015af4:	7fefffff 	.word	0x7fefffff
 8015af8:	08019e1c 	.word	0x08019e1c
 8015afc:	08019e20 	.word	0x08019e20
 8015b00:	08019e24 	.word	0x08019e24
 8015b04:	08019e28 	.word	0x08019e28
 8015b08:	08019e2c 	.word	0x08019e2c
 8015b0c:	9a08      	ldr	r2, [sp, #32]
 8015b0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015b10:	429a      	cmp	r2, r3
 8015b12:	bfa8      	it	ge
 8015b14:	461a      	movge	r2, r3
 8015b16:	2a00      	cmp	r2, #0
 8015b18:	4691      	mov	r9, r2
 8015b1a:	dc38      	bgt.n	8015b8e <_printf_float+0x33e>
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	9305      	str	r3, [sp, #20]
 8015b20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015b24:	f104 021a 	add.w	r2, r4, #26
 8015b28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015b2a:	9905      	ldr	r1, [sp, #20]
 8015b2c:	9304      	str	r3, [sp, #16]
 8015b2e:	eba3 0309 	sub.w	r3, r3, r9
 8015b32:	428b      	cmp	r3, r1
 8015b34:	dc33      	bgt.n	8015b9e <_printf_float+0x34e>
 8015b36:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8015b3a:	429a      	cmp	r2, r3
 8015b3c:	db3c      	blt.n	8015bb8 <_printf_float+0x368>
 8015b3e:	6823      	ldr	r3, [r4, #0]
 8015b40:	07da      	lsls	r2, r3, #31
 8015b42:	d439      	bmi.n	8015bb8 <_printf_float+0x368>
 8015b44:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8015b48:	eba2 0903 	sub.w	r9, r2, r3
 8015b4c:	9b04      	ldr	r3, [sp, #16]
 8015b4e:	1ad2      	subs	r2, r2, r3
 8015b50:	4591      	cmp	r9, r2
 8015b52:	bfa8      	it	ge
 8015b54:	4691      	movge	r9, r2
 8015b56:	f1b9 0f00 	cmp.w	r9, #0
 8015b5a:	dc35      	bgt.n	8015bc8 <_printf_float+0x378>
 8015b5c:	f04f 0800 	mov.w	r8, #0
 8015b60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015b64:	f104 0a1a 	add.w	sl, r4, #26
 8015b68:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8015b6c:	1a9b      	subs	r3, r3, r2
 8015b6e:	eba3 0309 	sub.w	r3, r3, r9
 8015b72:	4543      	cmp	r3, r8
 8015b74:	f77f af77 	ble.w	8015a66 <_printf_float+0x216>
 8015b78:	2301      	movs	r3, #1
 8015b7a:	4652      	mov	r2, sl
 8015b7c:	4631      	mov	r1, r6
 8015b7e:	4628      	mov	r0, r5
 8015b80:	47b8      	blx	r7
 8015b82:	3001      	adds	r0, #1
 8015b84:	f43f aeb0 	beq.w	80158e8 <_printf_float+0x98>
 8015b88:	f108 0801 	add.w	r8, r8, #1
 8015b8c:	e7ec      	b.n	8015b68 <_printf_float+0x318>
 8015b8e:	4613      	mov	r3, r2
 8015b90:	4631      	mov	r1, r6
 8015b92:	4642      	mov	r2, r8
 8015b94:	4628      	mov	r0, r5
 8015b96:	47b8      	blx	r7
 8015b98:	3001      	adds	r0, #1
 8015b9a:	d1bf      	bne.n	8015b1c <_printf_float+0x2cc>
 8015b9c:	e6a4      	b.n	80158e8 <_printf_float+0x98>
 8015b9e:	2301      	movs	r3, #1
 8015ba0:	4631      	mov	r1, r6
 8015ba2:	4628      	mov	r0, r5
 8015ba4:	9204      	str	r2, [sp, #16]
 8015ba6:	47b8      	blx	r7
 8015ba8:	3001      	adds	r0, #1
 8015baa:	f43f ae9d 	beq.w	80158e8 <_printf_float+0x98>
 8015bae:	9b05      	ldr	r3, [sp, #20]
 8015bb0:	9a04      	ldr	r2, [sp, #16]
 8015bb2:	3301      	adds	r3, #1
 8015bb4:	9305      	str	r3, [sp, #20]
 8015bb6:	e7b7      	b.n	8015b28 <_printf_float+0x2d8>
 8015bb8:	4653      	mov	r3, sl
 8015bba:	465a      	mov	r2, fp
 8015bbc:	4631      	mov	r1, r6
 8015bbe:	4628      	mov	r0, r5
 8015bc0:	47b8      	blx	r7
 8015bc2:	3001      	adds	r0, #1
 8015bc4:	d1be      	bne.n	8015b44 <_printf_float+0x2f4>
 8015bc6:	e68f      	b.n	80158e8 <_printf_float+0x98>
 8015bc8:	9a04      	ldr	r2, [sp, #16]
 8015bca:	464b      	mov	r3, r9
 8015bcc:	4442      	add	r2, r8
 8015bce:	4631      	mov	r1, r6
 8015bd0:	4628      	mov	r0, r5
 8015bd2:	47b8      	blx	r7
 8015bd4:	3001      	adds	r0, #1
 8015bd6:	d1c1      	bne.n	8015b5c <_printf_float+0x30c>
 8015bd8:	e686      	b.n	80158e8 <_printf_float+0x98>
 8015bda:	9a08      	ldr	r2, [sp, #32]
 8015bdc:	2a01      	cmp	r2, #1
 8015bde:	dc01      	bgt.n	8015be4 <_printf_float+0x394>
 8015be0:	07db      	lsls	r3, r3, #31
 8015be2:	d537      	bpl.n	8015c54 <_printf_float+0x404>
 8015be4:	2301      	movs	r3, #1
 8015be6:	4642      	mov	r2, r8
 8015be8:	4631      	mov	r1, r6
 8015bea:	4628      	mov	r0, r5
 8015bec:	47b8      	blx	r7
 8015bee:	3001      	adds	r0, #1
 8015bf0:	f43f ae7a 	beq.w	80158e8 <_printf_float+0x98>
 8015bf4:	4653      	mov	r3, sl
 8015bf6:	465a      	mov	r2, fp
 8015bf8:	4631      	mov	r1, r6
 8015bfa:	4628      	mov	r0, r5
 8015bfc:	47b8      	blx	r7
 8015bfe:	3001      	adds	r0, #1
 8015c00:	f43f ae72 	beq.w	80158e8 <_printf_float+0x98>
 8015c04:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8015c08:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c10:	9b08      	ldr	r3, [sp, #32]
 8015c12:	d01a      	beq.n	8015c4a <_printf_float+0x3fa>
 8015c14:	3b01      	subs	r3, #1
 8015c16:	f108 0201 	add.w	r2, r8, #1
 8015c1a:	4631      	mov	r1, r6
 8015c1c:	4628      	mov	r0, r5
 8015c1e:	47b8      	blx	r7
 8015c20:	3001      	adds	r0, #1
 8015c22:	d10e      	bne.n	8015c42 <_printf_float+0x3f2>
 8015c24:	e660      	b.n	80158e8 <_printf_float+0x98>
 8015c26:	2301      	movs	r3, #1
 8015c28:	464a      	mov	r2, r9
 8015c2a:	4631      	mov	r1, r6
 8015c2c:	4628      	mov	r0, r5
 8015c2e:	47b8      	blx	r7
 8015c30:	3001      	adds	r0, #1
 8015c32:	f43f ae59 	beq.w	80158e8 <_printf_float+0x98>
 8015c36:	f108 0801 	add.w	r8, r8, #1
 8015c3a:	9b08      	ldr	r3, [sp, #32]
 8015c3c:	3b01      	subs	r3, #1
 8015c3e:	4543      	cmp	r3, r8
 8015c40:	dcf1      	bgt.n	8015c26 <_printf_float+0x3d6>
 8015c42:	9b04      	ldr	r3, [sp, #16]
 8015c44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015c48:	e6dd      	b.n	8015a06 <_printf_float+0x1b6>
 8015c4a:	f04f 0800 	mov.w	r8, #0
 8015c4e:	f104 091a 	add.w	r9, r4, #26
 8015c52:	e7f2      	b.n	8015c3a <_printf_float+0x3ea>
 8015c54:	2301      	movs	r3, #1
 8015c56:	4642      	mov	r2, r8
 8015c58:	e7df      	b.n	8015c1a <_printf_float+0x3ca>
 8015c5a:	2301      	movs	r3, #1
 8015c5c:	464a      	mov	r2, r9
 8015c5e:	4631      	mov	r1, r6
 8015c60:	4628      	mov	r0, r5
 8015c62:	47b8      	blx	r7
 8015c64:	3001      	adds	r0, #1
 8015c66:	f43f ae3f 	beq.w	80158e8 <_printf_float+0x98>
 8015c6a:	f108 0801 	add.w	r8, r8, #1
 8015c6e:	68e3      	ldr	r3, [r4, #12]
 8015c70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015c72:	1a5b      	subs	r3, r3, r1
 8015c74:	4543      	cmp	r3, r8
 8015c76:	dcf0      	bgt.n	8015c5a <_printf_float+0x40a>
 8015c78:	e6f9      	b.n	8015a6e <_printf_float+0x21e>
 8015c7a:	f04f 0800 	mov.w	r8, #0
 8015c7e:	f104 0919 	add.w	r9, r4, #25
 8015c82:	e7f4      	b.n	8015c6e <_printf_float+0x41e>

08015c84 <_printf_common>:
 8015c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c88:	4616      	mov	r6, r2
 8015c8a:	4699      	mov	r9, r3
 8015c8c:	688a      	ldr	r2, [r1, #8]
 8015c8e:	690b      	ldr	r3, [r1, #16]
 8015c90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015c94:	4293      	cmp	r3, r2
 8015c96:	bfb8      	it	lt
 8015c98:	4613      	movlt	r3, r2
 8015c9a:	6033      	str	r3, [r6, #0]
 8015c9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015ca0:	4607      	mov	r7, r0
 8015ca2:	460c      	mov	r4, r1
 8015ca4:	b10a      	cbz	r2, 8015caa <_printf_common+0x26>
 8015ca6:	3301      	adds	r3, #1
 8015ca8:	6033      	str	r3, [r6, #0]
 8015caa:	6823      	ldr	r3, [r4, #0]
 8015cac:	0699      	lsls	r1, r3, #26
 8015cae:	bf42      	ittt	mi
 8015cb0:	6833      	ldrmi	r3, [r6, #0]
 8015cb2:	3302      	addmi	r3, #2
 8015cb4:	6033      	strmi	r3, [r6, #0]
 8015cb6:	6825      	ldr	r5, [r4, #0]
 8015cb8:	f015 0506 	ands.w	r5, r5, #6
 8015cbc:	d106      	bne.n	8015ccc <_printf_common+0x48>
 8015cbe:	f104 0a19 	add.w	sl, r4, #25
 8015cc2:	68e3      	ldr	r3, [r4, #12]
 8015cc4:	6832      	ldr	r2, [r6, #0]
 8015cc6:	1a9b      	subs	r3, r3, r2
 8015cc8:	42ab      	cmp	r3, r5
 8015cca:	dc26      	bgt.n	8015d1a <_printf_common+0x96>
 8015ccc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015cd0:	1e13      	subs	r3, r2, #0
 8015cd2:	6822      	ldr	r2, [r4, #0]
 8015cd4:	bf18      	it	ne
 8015cd6:	2301      	movne	r3, #1
 8015cd8:	0692      	lsls	r2, r2, #26
 8015cda:	d42b      	bmi.n	8015d34 <_printf_common+0xb0>
 8015cdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015ce0:	4649      	mov	r1, r9
 8015ce2:	4638      	mov	r0, r7
 8015ce4:	47c0      	blx	r8
 8015ce6:	3001      	adds	r0, #1
 8015ce8:	d01e      	beq.n	8015d28 <_printf_common+0xa4>
 8015cea:	6823      	ldr	r3, [r4, #0]
 8015cec:	6922      	ldr	r2, [r4, #16]
 8015cee:	f003 0306 	and.w	r3, r3, #6
 8015cf2:	2b04      	cmp	r3, #4
 8015cf4:	bf02      	ittt	eq
 8015cf6:	68e5      	ldreq	r5, [r4, #12]
 8015cf8:	6833      	ldreq	r3, [r6, #0]
 8015cfa:	1aed      	subeq	r5, r5, r3
 8015cfc:	68a3      	ldr	r3, [r4, #8]
 8015cfe:	bf0c      	ite	eq
 8015d00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015d04:	2500      	movne	r5, #0
 8015d06:	4293      	cmp	r3, r2
 8015d08:	bfc4      	itt	gt
 8015d0a:	1a9b      	subgt	r3, r3, r2
 8015d0c:	18ed      	addgt	r5, r5, r3
 8015d0e:	2600      	movs	r6, #0
 8015d10:	341a      	adds	r4, #26
 8015d12:	42b5      	cmp	r5, r6
 8015d14:	d11a      	bne.n	8015d4c <_printf_common+0xc8>
 8015d16:	2000      	movs	r0, #0
 8015d18:	e008      	b.n	8015d2c <_printf_common+0xa8>
 8015d1a:	2301      	movs	r3, #1
 8015d1c:	4652      	mov	r2, sl
 8015d1e:	4649      	mov	r1, r9
 8015d20:	4638      	mov	r0, r7
 8015d22:	47c0      	blx	r8
 8015d24:	3001      	adds	r0, #1
 8015d26:	d103      	bne.n	8015d30 <_printf_common+0xac>
 8015d28:	f04f 30ff 	mov.w	r0, #4294967295
 8015d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d30:	3501      	adds	r5, #1
 8015d32:	e7c6      	b.n	8015cc2 <_printf_common+0x3e>
 8015d34:	18e1      	adds	r1, r4, r3
 8015d36:	1c5a      	adds	r2, r3, #1
 8015d38:	2030      	movs	r0, #48	; 0x30
 8015d3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015d3e:	4422      	add	r2, r4
 8015d40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015d44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015d48:	3302      	adds	r3, #2
 8015d4a:	e7c7      	b.n	8015cdc <_printf_common+0x58>
 8015d4c:	2301      	movs	r3, #1
 8015d4e:	4622      	mov	r2, r4
 8015d50:	4649      	mov	r1, r9
 8015d52:	4638      	mov	r0, r7
 8015d54:	47c0      	blx	r8
 8015d56:	3001      	adds	r0, #1
 8015d58:	d0e6      	beq.n	8015d28 <_printf_common+0xa4>
 8015d5a:	3601      	adds	r6, #1
 8015d5c:	e7d9      	b.n	8015d12 <_printf_common+0x8e>
	...

08015d60 <_printf_i>:
 8015d60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015d64:	7e0f      	ldrb	r7, [r1, #24]
 8015d66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015d68:	2f78      	cmp	r7, #120	; 0x78
 8015d6a:	4691      	mov	r9, r2
 8015d6c:	4680      	mov	r8, r0
 8015d6e:	460c      	mov	r4, r1
 8015d70:	469a      	mov	sl, r3
 8015d72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015d76:	d807      	bhi.n	8015d88 <_printf_i+0x28>
 8015d78:	2f62      	cmp	r7, #98	; 0x62
 8015d7a:	d80a      	bhi.n	8015d92 <_printf_i+0x32>
 8015d7c:	2f00      	cmp	r7, #0
 8015d7e:	f000 80d4 	beq.w	8015f2a <_printf_i+0x1ca>
 8015d82:	2f58      	cmp	r7, #88	; 0x58
 8015d84:	f000 80c0 	beq.w	8015f08 <_printf_i+0x1a8>
 8015d88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015d8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015d90:	e03a      	b.n	8015e08 <_printf_i+0xa8>
 8015d92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015d96:	2b15      	cmp	r3, #21
 8015d98:	d8f6      	bhi.n	8015d88 <_printf_i+0x28>
 8015d9a:	a101      	add	r1, pc, #4	; (adr r1, 8015da0 <_printf_i+0x40>)
 8015d9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015da0:	08015df9 	.word	0x08015df9
 8015da4:	08015e0d 	.word	0x08015e0d
 8015da8:	08015d89 	.word	0x08015d89
 8015dac:	08015d89 	.word	0x08015d89
 8015db0:	08015d89 	.word	0x08015d89
 8015db4:	08015d89 	.word	0x08015d89
 8015db8:	08015e0d 	.word	0x08015e0d
 8015dbc:	08015d89 	.word	0x08015d89
 8015dc0:	08015d89 	.word	0x08015d89
 8015dc4:	08015d89 	.word	0x08015d89
 8015dc8:	08015d89 	.word	0x08015d89
 8015dcc:	08015f11 	.word	0x08015f11
 8015dd0:	08015e39 	.word	0x08015e39
 8015dd4:	08015ecb 	.word	0x08015ecb
 8015dd8:	08015d89 	.word	0x08015d89
 8015ddc:	08015d89 	.word	0x08015d89
 8015de0:	08015f33 	.word	0x08015f33
 8015de4:	08015d89 	.word	0x08015d89
 8015de8:	08015e39 	.word	0x08015e39
 8015dec:	08015d89 	.word	0x08015d89
 8015df0:	08015d89 	.word	0x08015d89
 8015df4:	08015ed3 	.word	0x08015ed3
 8015df8:	682b      	ldr	r3, [r5, #0]
 8015dfa:	1d1a      	adds	r2, r3, #4
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	602a      	str	r2, [r5, #0]
 8015e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015e04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015e08:	2301      	movs	r3, #1
 8015e0a:	e09f      	b.n	8015f4c <_printf_i+0x1ec>
 8015e0c:	6820      	ldr	r0, [r4, #0]
 8015e0e:	682b      	ldr	r3, [r5, #0]
 8015e10:	0607      	lsls	r7, r0, #24
 8015e12:	f103 0104 	add.w	r1, r3, #4
 8015e16:	6029      	str	r1, [r5, #0]
 8015e18:	d501      	bpl.n	8015e1e <_printf_i+0xbe>
 8015e1a:	681e      	ldr	r6, [r3, #0]
 8015e1c:	e003      	b.n	8015e26 <_printf_i+0xc6>
 8015e1e:	0646      	lsls	r6, r0, #25
 8015e20:	d5fb      	bpl.n	8015e1a <_printf_i+0xba>
 8015e22:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015e26:	2e00      	cmp	r6, #0
 8015e28:	da03      	bge.n	8015e32 <_printf_i+0xd2>
 8015e2a:	232d      	movs	r3, #45	; 0x2d
 8015e2c:	4276      	negs	r6, r6
 8015e2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015e32:	485a      	ldr	r0, [pc, #360]	; (8015f9c <_printf_i+0x23c>)
 8015e34:	230a      	movs	r3, #10
 8015e36:	e012      	b.n	8015e5e <_printf_i+0xfe>
 8015e38:	682b      	ldr	r3, [r5, #0]
 8015e3a:	6820      	ldr	r0, [r4, #0]
 8015e3c:	1d19      	adds	r1, r3, #4
 8015e3e:	6029      	str	r1, [r5, #0]
 8015e40:	0605      	lsls	r5, r0, #24
 8015e42:	d501      	bpl.n	8015e48 <_printf_i+0xe8>
 8015e44:	681e      	ldr	r6, [r3, #0]
 8015e46:	e002      	b.n	8015e4e <_printf_i+0xee>
 8015e48:	0641      	lsls	r1, r0, #25
 8015e4a:	d5fb      	bpl.n	8015e44 <_printf_i+0xe4>
 8015e4c:	881e      	ldrh	r6, [r3, #0]
 8015e4e:	4853      	ldr	r0, [pc, #332]	; (8015f9c <_printf_i+0x23c>)
 8015e50:	2f6f      	cmp	r7, #111	; 0x6f
 8015e52:	bf0c      	ite	eq
 8015e54:	2308      	moveq	r3, #8
 8015e56:	230a      	movne	r3, #10
 8015e58:	2100      	movs	r1, #0
 8015e5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015e5e:	6865      	ldr	r5, [r4, #4]
 8015e60:	60a5      	str	r5, [r4, #8]
 8015e62:	2d00      	cmp	r5, #0
 8015e64:	bfa2      	ittt	ge
 8015e66:	6821      	ldrge	r1, [r4, #0]
 8015e68:	f021 0104 	bicge.w	r1, r1, #4
 8015e6c:	6021      	strge	r1, [r4, #0]
 8015e6e:	b90e      	cbnz	r6, 8015e74 <_printf_i+0x114>
 8015e70:	2d00      	cmp	r5, #0
 8015e72:	d04b      	beq.n	8015f0c <_printf_i+0x1ac>
 8015e74:	4615      	mov	r5, r2
 8015e76:	fbb6 f1f3 	udiv	r1, r6, r3
 8015e7a:	fb03 6711 	mls	r7, r3, r1, r6
 8015e7e:	5dc7      	ldrb	r7, [r0, r7]
 8015e80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015e84:	4637      	mov	r7, r6
 8015e86:	42bb      	cmp	r3, r7
 8015e88:	460e      	mov	r6, r1
 8015e8a:	d9f4      	bls.n	8015e76 <_printf_i+0x116>
 8015e8c:	2b08      	cmp	r3, #8
 8015e8e:	d10b      	bne.n	8015ea8 <_printf_i+0x148>
 8015e90:	6823      	ldr	r3, [r4, #0]
 8015e92:	07de      	lsls	r6, r3, #31
 8015e94:	d508      	bpl.n	8015ea8 <_printf_i+0x148>
 8015e96:	6923      	ldr	r3, [r4, #16]
 8015e98:	6861      	ldr	r1, [r4, #4]
 8015e9a:	4299      	cmp	r1, r3
 8015e9c:	bfde      	ittt	le
 8015e9e:	2330      	movle	r3, #48	; 0x30
 8015ea0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015ea4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015ea8:	1b52      	subs	r2, r2, r5
 8015eaa:	6122      	str	r2, [r4, #16]
 8015eac:	f8cd a000 	str.w	sl, [sp]
 8015eb0:	464b      	mov	r3, r9
 8015eb2:	aa03      	add	r2, sp, #12
 8015eb4:	4621      	mov	r1, r4
 8015eb6:	4640      	mov	r0, r8
 8015eb8:	f7ff fee4 	bl	8015c84 <_printf_common>
 8015ebc:	3001      	adds	r0, #1
 8015ebe:	d14a      	bne.n	8015f56 <_printf_i+0x1f6>
 8015ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8015ec4:	b004      	add	sp, #16
 8015ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015eca:	6823      	ldr	r3, [r4, #0]
 8015ecc:	f043 0320 	orr.w	r3, r3, #32
 8015ed0:	6023      	str	r3, [r4, #0]
 8015ed2:	4833      	ldr	r0, [pc, #204]	; (8015fa0 <_printf_i+0x240>)
 8015ed4:	2778      	movs	r7, #120	; 0x78
 8015ed6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015eda:	6823      	ldr	r3, [r4, #0]
 8015edc:	6829      	ldr	r1, [r5, #0]
 8015ede:	061f      	lsls	r7, r3, #24
 8015ee0:	f851 6b04 	ldr.w	r6, [r1], #4
 8015ee4:	d402      	bmi.n	8015eec <_printf_i+0x18c>
 8015ee6:	065f      	lsls	r7, r3, #25
 8015ee8:	bf48      	it	mi
 8015eea:	b2b6      	uxthmi	r6, r6
 8015eec:	07df      	lsls	r7, r3, #31
 8015eee:	bf48      	it	mi
 8015ef0:	f043 0320 	orrmi.w	r3, r3, #32
 8015ef4:	6029      	str	r1, [r5, #0]
 8015ef6:	bf48      	it	mi
 8015ef8:	6023      	strmi	r3, [r4, #0]
 8015efa:	b91e      	cbnz	r6, 8015f04 <_printf_i+0x1a4>
 8015efc:	6823      	ldr	r3, [r4, #0]
 8015efe:	f023 0320 	bic.w	r3, r3, #32
 8015f02:	6023      	str	r3, [r4, #0]
 8015f04:	2310      	movs	r3, #16
 8015f06:	e7a7      	b.n	8015e58 <_printf_i+0xf8>
 8015f08:	4824      	ldr	r0, [pc, #144]	; (8015f9c <_printf_i+0x23c>)
 8015f0a:	e7e4      	b.n	8015ed6 <_printf_i+0x176>
 8015f0c:	4615      	mov	r5, r2
 8015f0e:	e7bd      	b.n	8015e8c <_printf_i+0x12c>
 8015f10:	682b      	ldr	r3, [r5, #0]
 8015f12:	6826      	ldr	r6, [r4, #0]
 8015f14:	6961      	ldr	r1, [r4, #20]
 8015f16:	1d18      	adds	r0, r3, #4
 8015f18:	6028      	str	r0, [r5, #0]
 8015f1a:	0635      	lsls	r5, r6, #24
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	d501      	bpl.n	8015f24 <_printf_i+0x1c4>
 8015f20:	6019      	str	r1, [r3, #0]
 8015f22:	e002      	b.n	8015f2a <_printf_i+0x1ca>
 8015f24:	0670      	lsls	r0, r6, #25
 8015f26:	d5fb      	bpl.n	8015f20 <_printf_i+0x1c0>
 8015f28:	8019      	strh	r1, [r3, #0]
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	6123      	str	r3, [r4, #16]
 8015f2e:	4615      	mov	r5, r2
 8015f30:	e7bc      	b.n	8015eac <_printf_i+0x14c>
 8015f32:	682b      	ldr	r3, [r5, #0]
 8015f34:	1d1a      	adds	r2, r3, #4
 8015f36:	602a      	str	r2, [r5, #0]
 8015f38:	681d      	ldr	r5, [r3, #0]
 8015f3a:	6862      	ldr	r2, [r4, #4]
 8015f3c:	2100      	movs	r1, #0
 8015f3e:	4628      	mov	r0, r5
 8015f40:	f7ea f9e6 	bl	8000310 <memchr>
 8015f44:	b108      	cbz	r0, 8015f4a <_printf_i+0x1ea>
 8015f46:	1b40      	subs	r0, r0, r5
 8015f48:	6060      	str	r0, [r4, #4]
 8015f4a:	6863      	ldr	r3, [r4, #4]
 8015f4c:	6123      	str	r3, [r4, #16]
 8015f4e:	2300      	movs	r3, #0
 8015f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015f54:	e7aa      	b.n	8015eac <_printf_i+0x14c>
 8015f56:	6923      	ldr	r3, [r4, #16]
 8015f58:	462a      	mov	r2, r5
 8015f5a:	4649      	mov	r1, r9
 8015f5c:	4640      	mov	r0, r8
 8015f5e:	47d0      	blx	sl
 8015f60:	3001      	adds	r0, #1
 8015f62:	d0ad      	beq.n	8015ec0 <_printf_i+0x160>
 8015f64:	6823      	ldr	r3, [r4, #0]
 8015f66:	079b      	lsls	r3, r3, #30
 8015f68:	d413      	bmi.n	8015f92 <_printf_i+0x232>
 8015f6a:	68e0      	ldr	r0, [r4, #12]
 8015f6c:	9b03      	ldr	r3, [sp, #12]
 8015f6e:	4298      	cmp	r0, r3
 8015f70:	bfb8      	it	lt
 8015f72:	4618      	movlt	r0, r3
 8015f74:	e7a6      	b.n	8015ec4 <_printf_i+0x164>
 8015f76:	2301      	movs	r3, #1
 8015f78:	4632      	mov	r2, r6
 8015f7a:	4649      	mov	r1, r9
 8015f7c:	4640      	mov	r0, r8
 8015f7e:	47d0      	blx	sl
 8015f80:	3001      	adds	r0, #1
 8015f82:	d09d      	beq.n	8015ec0 <_printf_i+0x160>
 8015f84:	3501      	adds	r5, #1
 8015f86:	68e3      	ldr	r3, [r4, #12]
 8015f88:	9903      	ldr	r1, [sp, #12]
 8015f8a:	1a5b      	subs	r3, r3, r1
 8015f8c:	42ab      	cmp	r3, r5
 8015f8e:	dcf2      	bgt.n	8015f76 <_printf_i+0x216>
 8015f90:	e7eb      	b.n	8015f6a <_printf_i+0x20a>
 8015f92:	2500      	movs	r5, #0
 8015f94:	f104 0619 	add.w	r6, r4, #25
 8015f98:	e7f5      	b.n	8015f86 <_printf_i+0x226>
 8015f9a:	bf00      	nop
 8015f9c:	08019e2e 	.word	0x08019e2e
 8015fa0:	08019e3f 	.word	0x08019e3f

08015fa4 <_scanf_float>:
 8015fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fa8:	b087      	sub	sp, #28
 8015faa:	4617      	mov	r7, r2
 8015fac:	9303      	str	r3, [sp, #12]
 8015fae:	688b      	ldr	r3, [r1, #8]
 8015fb0:	1e5a      	subs	r2, r3, #1
 8015fb2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015fb6:	bf83      	ittte	hi
 8015fb8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8015fbc:	195b      	addhi	r3, r3, r5
 8015fbe:	9302      	strhi	r3, [sp, #8]
 8015fc0:	2300      	movls	r3, #0
 8015fc2:	bf86      	itte	hi
 8015fc4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015fc8:	608b      	strhi	r3, [r1, #8]
 8015fca:	9302      	strls	r3, [sp, #8]
 8015fcc:	680b      	ldr	r3, [r1, #0]
 8015fce:	468b      	mov	fp, r1
 8015fd0:	2500      	movs	r5, #0
 8015fd2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015fd6:	f84b 3b1c 	str.w	r3, [fp], #28
 8015fda:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8015fde:	4680      	mov	r8, r0
 8015fe0:	460c      	mov	r4, r1
 8015fe2:	465e      	mov	r6, fp
 8015fe4:	46aa      	mov	sl, r5
 8015fe6:	46a9      	mov	r9, r5
 8015fe8:	9501      	str	r5, [sp, #4]
 8015fea:	68a2      	ldr	r2, [r4, #8]
 8015fec:	b152      	cbz	r2, 8016004 <_scanf_float+0x60>
 8015fee:	683b      	ldr	r3, [r7, #0]
 8015ff0:	781b      	ldrb	r3, [r3, #0]
 8015ff2:	2b4e      	cmp	r3, #78	; 0x4e
 8015ff4:	d864      	bhi.n	80160c0 <_scanf_float+0x11c>
 8015ff6:	2b40      	cmp	r3, #64	; 0x40
 8015ff8:	d83c      	bhi.n	8016074 <_scanf_float+0xd0>
 8015ffa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8015ffe:	b2c8      	uxtb	r0, r1
 8016000:	280e      	cmp	r0, #14
 8016002:	d93a      	bls.n	801607a <_scanf_float+0xd6>
 8016004:	f1b9 0f00 	cmp.w	r9, #0
 8016008:	d003      	beq.n	8016012 <_scanf_float+0x6e>
 801600a:	6823      	ldr	r3, [r4, #0]
 801600c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016010:	6023      	str	r3, [r4, #0]
 8016012:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016016:	f1ba 0f01 	cmp.w	sl, #1
 801601a:	f200 8113 	bhi.w	8016244 <_scanf_float+0x2a0>
 801601e:	455e      	cmp	r6, fp
 8016020:	f200 8105 	bhi.w	801622e <_scanf_float+0x28a>
 8016024:	2501      	movs	r5, #1
 8016026:	4628      	mov	r0, r5
 8016028:	b007      	add	sp, #28
 801602a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801602e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8016032:	2a0d      	cmp	r2, #13
 8016034:	d8e6      	bhi.n	8016004 <_scanf_float+0x60>
 8016036:	a101      	add	r1, pc, #4	; (adr r1, 801603c <_scanf_float+0x98>)
 8016038:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801603c:	0801617b 	.word	0x0801617b
 8016040:	08016005 	.word	0x08016005
 8016044:	08016005 	.word	0x08016005
 8016048:	08016005 	.word	0x08016005
 801604c:	080161db 	.word	0x080161db
 8016050:	080161b3 	.word	0x080161b3
 8016054:	08016005 	.word	0x08016005
 8016058:	08016005 	.word	0x08016005
 801605c:	08016189 	.word	0x08016189
 8016060:	08016005 	.word	0x08016005
 8016064:	08016005 	.word	0x08016005
 8016068:	08016005 	.word	0x08016005
 801606c:	08016005 	.word	0x08016005
 8016070:	08016141 	.word	0x08016141
 8016074:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8016078:	e7db      	b.n	8016032 <_scanf_float+0x8e>
 801607a:	290e      	cmp	r1, #14
 801607c:	d8c2      	bhi.n	8016004 <_scanf_float+0x60>
 801607e:	a001      	add	r0, pc, #4	; (adr r0, 8016084 <_scanf_float+0xe0>)
 8016080:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8016084:	08016133 	.word	0x08016133
 8016088:	08016005 	.word	0x08016005
 801608c:	08016133 	.word	0x08016133
 8016090:	080161c7 	.word	0x080161c7
 8016094:	08016005 	.word	0x08016005
 8016098:	080160e1 	.word	0x080160e1
 801609c:	0801611d 	.word	0x0801611d
 80160a0:	0801611d 	.word	0x0801611d
 80160a4:	0801611d 	.word	0x0801611d
 80160a8:	0801611d 	.word	0x0801611d
 80160ac:	0801611d 	.word	0x0801611d
 80160b0:	0801611d 	.word	0x0801611d
 80160b4:	0801611d 	.word	0x0801611d
 80160b8:	0801611d 	.word	0x0801611d
 80160bc:	0801611d 	.word	0x0801611d
 80160c0:	2b6e      	cmp	r3, #110	; 0x6e
 80160c2:	d809      	bhi.n	80160d8 <_scanf_float+0x134>
 80160c4:	2b60      	cmp	r3, #96	; 0x60
 80160c6:	d8b2      	bhi.n	801602e <_scanf_float+0x8a>
 80160c8:	2b54      	cmp	r3, #84	; 0x54
 80160ca:	d077      	beq.n	80161bc <_scanf_float+0x218>
 80160cc:	2b59      	cmp	r3, #89	; 0x59
 80160ce:	d199      	bne.n	8016004 <_scanf_float+0x60>
 80160d0:	2d07      	cmp	r5, #7
 80160d2:	d197      	bne.n	8016004 <_scanf_float+0x60>
 80160d4:	2508      	movs	r5, #8
 80160d6:	e029      	b.n	801612c <_scanf_float+0x188>
 80160d8:	2b74      	cmp	r3, #116	; 0x74
 80160da:	d06f      	beq.n	80161bc <_scanf_float+0x218>
 80160dc:	2b79      	cmp	r3, #121	; 0x79
 80160de:	e7f6      	b.n	80160ce <_scanf_float+0x12a>
 80160e0:	6821      	ldr	r1, [r4, #0]
 80160e2:	05c8      	lsls	r0, r1, #23
 80160e4:	d51a      	bpl.n	801611c <_scanf_float+0x178>
 80160e6:	9b02      	ldr	r3, [sp, #8]
 80160e8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80160ec:	6021      	str	r1, [r4, #0]
 80160ee:	f109 0901 	add.w	r9, r9, #1
 80160f2:	b11b      	cbz	r3, 80160fc <_scanf_float+0x158>
 80160f4:	3b01      	subs	r3, #1
 80160f6:	3201      	adds	r2, #1
 80160f8:	9302      	str	r3, [sp, #8]
 80160fa:	60a2      	str	r2, [r4, #8]
 80160fc:	68a3      	ldr	r3, [r4, #8]
 80160fe:	3b01      	subs	r3, #1
 8016100:	60a3      	str	r3, [r4, #8]
 8016102:	6923      	ldr	r3, [r4, #16]
 8016104:	3301      	adds	r3, #1
 8016106:	6123      	str	r3, [r4, #16]
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	3b01      	subs	r3, #1
 801610c:	2b00      	cmp	r3, #0
 801610e:	607b      	str	r3, [r7, #4]
 8016110:	f340 8084 	ble.w	801621c <_scanf_float+0x278>
 8016114:	683b      	ldr	r3, [r7, #0]
 8016116:	3301      	adds	r3, #1
 8016118:	603b      	str	r3, [r7, #0]
 801611a:	e766      	b.n	8015fea <_scanf_float+0x46>
 801611c:	eb1a 0f05 	cmn.w	sl, r5
 8016120:	f47f af70 	bne.w	8016004 <_scanf_float+0x60>
 8016124:	6822      	ldr	r2, [r4, #0]
 8016126:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801612a:	6022      	str	r2, [r4, #0]
 801612c:	f806 3b01 	strb.w	r3, [r6], #1
 8016130:	e7e4      	b.n	80160fc <_scanf_float+0x158>
 8016132:	6822      	ldr	r2, [r4, #0]
 8016134:	0610      	lsls	r0, r2, #24
 8016136:	f57f af65 	bpl.w	8016004 <_scanf_float+0x60>
 801613a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801613e:	e7f4      	b.n	801612a <_scanf_float+0x186>
 8016140:	f1ba 0f00 	cmp.w	sl, #0
 8016144:	d10e      	bne.n	8016164 <_scanf_float+0x1c0>
 8016146:	f1b9 0f00 	cmp.w	r9, #0
 801614a:	d10e      	bne.n	801616a <_scanf_float+0x1c6>
 801614c:	6822      	ldr	r2, [r4, #0]
 801614e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016152:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016156:	d108      	bne.n	801616a <_scanf_float+0x1c6>
 8016158:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801615c:	6022      	str	r2, [r4, #0]
 801615e:	f04f 0a01 	mov.w	sl, #1
 8016162:	e7e3      	b.n	801612c <_scanf_float+0x188>
 8016164:	f1ba 0f02 	cmp.w	sl, #2
 8016168:	d055      	beq.n	8016216 <_scanf_float+0x272>
 801616a:	2d01      	cmp	r5, #1
 801616c:	d002      	beq.n	8016174 <_scanf_float+0x1d0>
 801616e:	2d04      	cmp	r5, #4
 8016170:	f47f af48 	bne.w	8016004 <_scanf_float+0x60>
 8016174:	3501      	adds	r5, #1
 8016176:	b2ed      	uxtb	r5, r5
 8016178:	e7d8      	b.n	801612c <_scanf_float+0x188>
 801617a:	f1ba 0f01 	cmp.w	sl, #1
 801617e:	f47f af41 	bne.w	8016004 <_scanf_float+0x60>
 8016182:	f04f 0a02 	mov.w	sl, #2
 8016186:	e7d1      	b.n	801612c <_scanf_float+0x188>
 8016188:	b97d      	cbnz	r5, 80161aa <_scanf_float+0x206>
 801618a:	f1b9 0f00 	cmp.w	r9, #0
 801618e:	f47f af3c 	bne.w	801600a <_scanf_float+0x66>
 8016192:	6822      	ldr	r2, [r4, #0]
 8016194:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016198:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801619c:	f47f af39 	bne.w	8016012 <_scanf_float+0x6e>
 80161a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80161a4:	6022      	str	r2, [r4, #0]
 80161a6:	2501      	movs	r5, #1
 80161a8:	e7c0      	b.n	801612c <_scanf_float+0x188>
 80161aa:	2d03      	cmp	r5, #3
 80161ac:	d0e2      	beq.n	8016174 <_scanf_float+0x1d0>
 80161ae:	2d05      	cmp	r5, #5
 80161b0:	e7de      	b.n	8016170 <_scanf_float+0x1cc>
 80161b2:	2d02      	cmp	r5, #2
 80161b4:	f47f af26 	bne.w	8016004 <_scanf_float+0x60>
 80161b8:	2503      	movs	r5, #3
 80161ba:	e7b7      	b.n	801612c <_scanf_float+0x188>
 80161bc:	2d06      	cmp	r5, #6
 80161be:	f47f af21 	bne.w	8016004 <_scanf_float+0x60>
 80161c2:	2507      	movs	r5, #7
 80161c4:	e7b2      	b.n	801612c <_scanf_float+0x188>
 80161c6:	6822      	ldr	r2, [r4, #0]
 80161c8:	0591      	lsls	r1, r2, #22
 80161ca:	f57f af1b 	bpl.w	8016004 <_scanf_float+0x60>
 80161ce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80161d2:	6022      	str	r2, [r4, #0]
 80161d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80161d8:	e7a8      	b.n	801612c <_scanf_float+0x188>
 80161da:	6822      	ldr	r2, [r4, #0]
 80161dc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80161e0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80161e4:	d006      	beq.n	80161f4 <_scanf_float+0x250>
 80161e6:	0550      	lsls	r0, r2, #21
 80161e8:	f57f af0c 	bpl.w	8016004 <_scanf_float+0x60>
 80161ec:	f1b9 0f00 	cmp.w	r9, #0
 80161f0:	f43f af0f 	beq.w	8016012 <_scanf_float+0x6e>
 80161f4:	0591      	lsls	r1, r2, #22
 80161f6:	bf58      	it	pl
 80161f8:	9901      	ldrpl	r1, [sp, #4]
 80161fa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80161fe:	bf58      	it	pl
 8016200:	eba9 0101 	subpl.w	r1, r9, r1
 8016204:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8016208:	bf58      	it	pl
 801620a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801620e:	6022      	str	r2, [r4, #0]
 8016210:	f04f 0900 	mov.w	r9, #0
 8016214:	e78a      	b.n	801612c <_scanf_float+0x188>
 8016216:	f04f 0a03 	mov.w	sl, #3
 801621a:	e787      	b.n	801612c <_scanf_float+0x188>
 801621c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016220:	4639      	mov	r1, r7
 8016222:	4640      	mov	r0, r8
 8016224:	4798      	blx	r3
 8016226:	2800      	cmp	r0, #0
 8016228:	f43f aedf 	beq.w	8015fea <_scanf_float+0x46>
 801622c:	e6ea      	b.n	8016004 <_scanf_float+0x60>
 801622e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016232:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016236:	463a      	mov	r2, r7
 8016238:	4640      	mov	r0, r8
 801623a:	4798      	blx	r3
 801623c:	6923      	ldr	r3, [r4, #16]
 801623e:	3b01      	subs	r3, #1
 8016240:	6123      	str	r3, [r4, #16]
 8016242:	e6ec      	b.n	801601e <_scanf_float+0x7a>
 8016244:	1e6b      	subs	r3, r5, #1
 8016246:	2b06      	cmp	r3, #6
 8016248:	d825      	bhi.n	8016296 <_scanf_float+0x2f2>
 801624a:	2d02      	cmp	r5, #2
 801624c:	d836      	bhi.n	80162bc <_scanf_float+0x318>
 801624e:	455e      	cmp	r6, fp
 8016250:	f67f aee8 	bls.w	8016024 <_scanf_float+0x80>
 8016254:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016258:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801625c:	463a      	mov	r2, r7
 801625e:	4640      	mov	r0, r8
 8016260:	4798      	blx	r3
 8016262:	6923      	ldr	r3, [r4, #16]
 8016264:	3b01      	subs	r3, #1
 8016266:	6123      	str	r3, [r4, #16]
 8016268:	e7f1      	b.n	801624e <_scanf_float+0x2aa>
 801626a:	9802      	ldr	r0, [sp, #8]
 801626c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016270:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016274:	9002      	str	r0, [sp, #8]
 8016276:	463a      	mov	r2, r7
 8016278:	4640      	mov	r0, r8
 801627a:	4798      	blx	r3
 801627c:	6923      	ldr	r3, [r4, #16]
 801627e:	3b01      	subs	r3, #1
 8016280:	6123      	str	r3, [r4, #16]
 8016282:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016286:	fa5f fa8a 	uxtb.w	sl, sl
 801628a:	f1ba 0f02 	cmp.w	sl, #2
 801628e:	d1ec      	bne.n	801626a <_scanf_float+0x2c6>
 8016290:	3d03      	subs	r5, #3
 8016292:	b2ed      	uxtb	r5, r5
 8016294:	1b76      	subs	r6, r6, r5
 8016296:	6823      	ldr	r3, [r4, #0]
 8016298:	05da      	lsls	r2, r3, #23
 801629a:	d52f      	bpl.n	80162fc <_scanf_float+0x358>
 801629c:	055b      	lsls	r3, r3, #21
 801629e:	d510      	bpl.n	80162c2 <_scanf_float+0x31e>
 80162a0:	455e      	cmp	r6, fp
 80162a2:	f67f aebf 	bls.w	8016024 <_scanf_float+0x80>
 80162a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80162aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80162ae:	463a      	mov	r2, r7
 80162b0:	4640      	mov	r0, r8
 80162b2:	4798      	blx	r3
 80162b4:	6923      	ldr	r3, [r4, #16]
 80162b6:	3b01      	subs	r3, #1
 80162b8:	6123      	str	r3, [r4, #16]
 80162ba:	e7f1      	b.n	80162a0 <_scanf_float+0x2fc>
 80162bc:	46aa      	mov	sl, r5
 80162be:	9602      	str	r6, [sp, #8]
 80162c0:	e7df      	b.n	8016282 <_scanf_float+0x2de>
 80162c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80162c6:	6923      	ldr	r3, [r4, #16]
 80162c8:	2965      	cmp	r1, #101	; 0x65
 80162ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80162ce:	f106 35ff 	add.w	r5, r6, #4294967295
 80162d2:	6123      	str	r3, [r4, #16]
 80162d4:	d00c      	beq.n	80162f0 <_scanf_float+0x34c>
 80162d6:	2945      	cmp	r1, #69	; 0x45
 80162d8:	d00a      	beq.n	80162f0 <_scanf_float+0x34c>
 80162da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80162de:	463a      	mov	r2, r7
 80162e0:	4640      	mov	r0, r8
 80162e2:	4798      	blx	r3
 80162e4:	6923      	ldr	r3, [r4, #16]
 80162e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80162ea:	3b01      	subs	r3, #1
 80162ec:	1eb5      	subs	r5, r6, #2
 80162ee:	6123      	str	r3, [r4, #16]
 80162f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80162f4:	463a      	mov	r2, r7
 80162f6:	4640      	mov	r0, r8
 80162f8:	4798      	blx	r3
 80162fa:	462e      	mov	r6, r5
 80162fc:	6825      	ldr	r5, [r4, #0]
 80162fe:	f015 0510 	ands.w	r5, r5, #16
 8016302:	d14d      	bne.n	80163a0 <_scanf_float+0x3fc>
 8016304:	7035      	strb	r5, [r6, #0]
 8016306:	6823      	ldr	r3, [r4, #0]
 8016308:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801630c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016310:	d11a      	bne.n	8016348 <_scanf_float+0x3a4>
 8016312:	9b01      	ldr	r3, [sp, #4]
 8016314:	454b      	cmp	r3, r9
 8016316:	eba3 0209 	sub.w	r2, r3, r9
 801631a:	d122      	bne.n	8016362 <_scanf_float+0x3be>
 801631c:	2200      	movs	r2, #0
 801631e:	4659      	mov	r1, fp
 8016320:	4640      	mov	r0, r8
 8016322:	f002 fb67 	bl	80189f4 <_strtod_r>
 8016326:	9b03      	ldr	r3, [sp, #12]
 8016328:	6821      	ldr	r1, [r4, #0]
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	f011 0f02 	tst.w	r1, #2
 8016330:	f103 0204 	add.w	r2, r3, #4
 8016334:	d020      	beq.n	8016378 <_scanf_float+0x3d4>
 8016336:	9903      	ldr	r1, [sp, #12]
 8016338:	600a      	str	r2, [r1, #0]
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	ed83 0b00 	vstr	d0, [r3]
 8016340:	68e3      	ldr	r3, [r4, #12]
 8016342:	3301      	adds	r3, #1
 8016344:	60e3      	str	r3, [r4, #12]
 8016346:	e66e      	b.n	8016026 <_scanf_float+0x82>
 8016348:	9b04      	ldr	r3, [sp, #16]
 801634a:	2b00      	cmp	r3, #0
 801634c:	d0e6      	beq.n	801631c <_scanf_float+0x378>
 801634e:	9905      	ldr	r1, [sp, #20]
 8016350:	230a      	movs	r3, #10
 8016352:	462a      	mov	r2, r5
 8016354:	3101      	adds	r1, #1
 8016356:	4640      	mov	r0, r8
 8016358:	f002 fbd4 	bl	8018b04 <_strtol_r>
 801635c:	9b04      	ldr	r3, [sp, #16]
 801635e:	9e05      	ldr	r6, [sp, #20]
 8016360:	1ac2      	subs	r2, r0, r3
 8016362:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016366:	429e      	cmp	r6, r3
 8016368:	bf28      	it	cs
 801636a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801636e:	490d      	ldr	r1, [pc, #52]	; (80163a4 <_scanf_float+0x400>)
 8016370:	4630      	mov	r0, r6
 8016372:	f000 f8dd 	bl	8016530 <siprintf>
 8016376:	e7d1      	b.n	801631c <_scanf_float+0x378>
 8016378:	f011 0f04 	tst.w	r1, #4
 801637c:	9903      	ldr	r1, [sp, #12]
 801637e:	600a      	str	r2, [r1, #0]
 8016380:	d1db      	bne.n	801633a <_scanf_float+0x396>
 8016382:	eeb4 0b40 	vcmp.f64	d0, d0
 8016386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801638a:	681e      	ldr	r6, [r3, #0]
 801638c:	d705      	bvc.n	801639a <_scanf_float+0x3f6>
 801638e:	4806      	ldr	r0, [pc, #24]	; (80163a8 <_scanf_float+0x404>)
 8016390:	f000 f9c0 	bl	8016714 <nanf>
 8016394:	ed86 0a00 	vstr	s0, [r6]
 8016398:	e7d2      	b.n	8016340 <_scanf_float+0x39c>
 801639a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801639e:	e7f9      	b.n	8016394 <_scanf_float+0x3f0>
 80163a0:	2500      	movs	r5, #0
 80163a2:	e640      	b.n	8016026 <_scanf_float+0x82>
 80163a4:	08019e50 	.word	0x08019e50
 80163a8:	0801a1e5 	.word	0x0801a1e5

080163ac <std>:
 80163ac:	2300      	movs	r3, #0
 80163ae:	b510      	push	{r4, lr}
 80163b0:	4604      	mov	r4, r0
 80163b2:	e9c0 3300 	strd	r3, r3, [r0]
 80163b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80163ba:	6083      	str	r3, [r0, #8]
 80163bc:	8181      	strh	r1, [r0, #12]
 80163be:	6643      	str	r3, [r0, #100]	; 0x64
 80163c0:	81c2      	strh	r2, [r0, #14]
 80163c2:	6183      	str	r3, [r0, #24]
 80163c4:	4619      	mov	r1, r3
 80163c6:	2208      	movs	r2, #8
 80163c8:	305c      	adds	r0, #92	; 0x5c
 80163ca:	f000 f914 	bl	80165f6 <memset>
 80163ce:	4b0d      	ldr	r3, [pc, #52]	; (8016404 <std+0x58>)
 80163d0:	6263      	str	r3, [r4, #36]	; 0x24
 80163d2:	4b0d      	ldr	r3, [pc, #52]	; (8016408 <std+0x5c>)
 80163d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80163d6:	4b0d      	ldr	r3, [pc, #52]	; (801640c <std+0x60>)
 80163d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80163da:	4b0d      	ldr	r3, [pc, #52]	; (8016410 <std+0x64>)
 80163dc:	6323      	str	r3, [r4, #48]	; 0x30
 80163de:	4b0d      	ldr	r3, [pc, #52]	; (8016414 <std+0x68>)
 80163e0:	6224      	str	r4, [r4, #32]
 80163e2:	429c      	cmp	r4, r3
 80163e4:	d006      	beq.n	80163f4 <std+0x48>
 80163e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80163ea:	4294      	cmp	r4, r2
 80163ec:	d002      	beq.n	80163f4 <std+0x48>
 80163ee:	33d0      	adds	r3, #208	; 0xd0
 80163f0:	429c      	cmp	r4, r3
 80163f2:	d105      	bne.n	8016400 <std+0x54>
 80163f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80163f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80163fc:	f000 b978 	b.w	80166f0 <__retarget_lock_init_recursive>
 8016400:	bd10      	pop	{r4, pc}
 8016402:	bf00      	nop
 8016404:	08016571 	.word	0x08016571
 8016408:	08016593 	.word	0x08016593
 801640c:	080165cb 	.word	0x080165cb
 8016410:	080165ef 	.word	0x080165ef
 8016414:	2400294c 	.word	0x2400294c

08016418 <stdio_exit_handler>:
 8016418:	4a02      	ldr	r2, [pc, #8]	; (8016424 <stdio_exit_handler+0xc>)
 801641a:	4903      	ldr	r1, [pc, #12]	; (8016428 <stdio_exit_handler+0x10>)
 801641c:	4803      	ldr	r0, [pc, #12]	; (801642c <stdio_exit_handler+0x14>)
 801641e:	f000 b869 	b.w	80164f4 <_fwalk_sglue>
 8016422:	bf00      	nop
 8016424:	24000100 	.word	0x24000100
 8016428:	08018ec5 	.word	0x08018ec5
 801642c:	2400010c 	.word	0x2400010c

08016430 <cleanup_stdio>:
 8016430:	6841      	ldr	r1, [r0, #4]
 8016432:	4b0c      	ldr	r3, [pc, #48]	; (8016464 <cleanup_stdio+0x34>)
 8016434:	4299      	cmp	r1, r3
 8016436:	b510      	push	{r4, lr}
 8016438:	4604      	mov	r4, r0
 801643a:	d001      	beq.n	8016440 <cleanup_stdio+0x10>
 801643c:	f002 fd42 	bl	8018ec4 <_fflush_r>
 8016440:	68a1      	ldr	r1, [r4, #8]
 8016442:	4b09      	ldr	r3, [pc, #36]	; (8016468 <cleanup_stdio+0x38>)
 8016444:	4299      	cmp	r1, r3
 8016446:	d002      	beq.n	801644e <cleanup_stdio+0x1e>
 8016448:	4620      	mov	r0, r4
 801644a:	f002 fd3b 	bl	8018ec4 <_fflush_r>
 801644e:	68e1      	ldr	r1, [r4, #12]
 8016450:	4b06      	ldr	r3, [pc, #24]	; (801646c <cleanup_stdio+0x3c>)
 8016452:	4299      	cmp	r1, r3
 8016454:	d004      	beq.n	8016460 <cleanup_stdio+0x30>
 8016456:	4620      	mov	r0, r4
 8016458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801645c:	f002 bd32 	b.w	8018ec4 <_fflush_r>
 8016460:	bd10      	pop	{r4, pc}
 8016462:	bf00      	nop
 8016464:	2400294c 	.word	0x2400294c
 8016468:	240029b4 	.word	0x240029b4
 801646c:	24002a1c 	.word	0x24002a1c

08016470 <global_stdio_init.part.0>:
 8016470:	b510      	push	{r4, lr}
 8016472:	4b0b      	ldr	r3, [pc, #44]	; (80164a0 <global_stdio_init.part.0+0x30>)
 8016474:	4c0b      	ldr	r4, [pc, #44]	; (80164a4 <global_stdio_init.part.0+0x34>)
 8016476:	4a0c      	ldr	r2, [pc, #48]	; (80164a8 <global_stdio_init.part.0+0x38>)
 8016478:	601a      	str	r2, [r3, #0]
 801647a:	4620      	mov	r0, r4
 801647c:	2200      	movs	r2, #0
 801647e:	2104      	movs	r1, #4
 8016480:	f7ff ff94 	bl	80163ac <std>
 8016484:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8016488:	2201      	movs	r2, #1
 801648a:	2109      	movs	r1, #9
 801648c:	f7ff ff8e 	bl	80163ac <std>
 8016490:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8016494:	2202      	movs	r2, #2
 8016496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801649a:	2112      	movs	r1, #18
 801649c:	f7ff bf86 	b.w	80163ac <std>
 80164a0:	24002a84 	.word	0x24002a84
 80164a4:	2400294c 	.word	0x2400294c
 80164a8:	08016419 	.word	0x08016419

080164ac <__sfp_lock_acquire>:
 80164ac:	4801      	ldr	r0, [pc, #4]	; (80164b4 <__sfp_lock_acquire+0x8>)
 80164ae:	f000 b920 	b.w	80166f2 <__retarget_lock_acquire_recursive>
 80164b2:	bf00      	nop
 80164b4:	24002a8d 	.word	0x24002a8d

080164b8 <__sfp_lock_release>:
 80164b8:	4801      	ldr	r0, [pc, #4]	; (80164c0 <__sfp_lock_release+0x8>)
 80164ba:	f000 b91b 	b.w	80166f4 <__retarget_lock_release_recursive>
 80164be:	bf00      	nop
 80164c0:	24002a8d 	.word	0x24002a8d

080164c4 <__sinit>:
 80164c4:	b510      	push	{r4, lr}
 80164c6:	4604      	mov	r4, r0
 80164c8:	f7ff fff0 	bl	80164ac <__sfp_lock_acquire>
 80164cc:	6a23      	ldr	r3, [r4, #32]
 80164ce:	b11b      	cbz	r3, 80164d8 <__sinit+0x14>
 80164d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80164d4:	f7ff bff0 	b.w	80164b8 <__sfp_lock_release>
 80164d8:	4b04      	ldr	r3, [pc, #16]	; (80164ec <__sinit+0x28>)
 80164da:	6223      	str	r3, [r4, #32]
 80164dc:	4b04      	ldr	r3, [pc, #16]	; (80164f0 <__sinit+0x2c>)
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d1f5      	bne.n	80164d0 <__sinit+0xc>
 80164e4:	f7ff ffc4 	bl	8016470 <global_stdio_init.part.0>
 80164e8:	e7f2      	b.n	80164d0 <__sinit+0xc>
 80164ea:	bf00      	nop
 80164ec:	08016431 	.word	0x08016431
 80164f0:	24002a84 	.word	0x24002a84

080164f4 <_fwalk_sglue>:
 80164f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80164f8:	4607      	mov	r7, r0
 80164fa:	4688      	mov	r8, r1
 80164fc:	4614      	mov	r4, r2
 80164fe:	2600      	movs	r6, #0
 8016500:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016504:	f1b9 0901 	subs.w	r9, r9, #1
 8016508:	d505      	bpl.n	8016516 <_fwalk_sglue+0x22>
 801650a:	6824      	ldr	r4, [r4, #0]
 801650c:	2c00      	cmp	r4, #0
 801650e:	d1f7      	bne.n	8016500 <_fwalk_sglue+0xc>
 8016510:	4630      	mov	r0, r6
 8016512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016516:	89ab      	ldrh	r3, [r5, #12]
 8016518:	2b01      	cmp	r3, #1
 801651a:	d907      	bls.n	801652c <_fwalk_sglue+0x38>
 801651c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016520:	3301      	adds	r3, #1
 8016522:	d003      	beq.n	801652c <_fwalk_sglue+0x38>
 8016524:	4629      	mov	r1, r5
 8016526:	4638      	mov	r0, r7
 8016528:	47c0      	blx	r8
 801652a:	4306      	orrs	r6, r0
 801652c:	3568      	adds	r5, #104	; 0x68
 801652e:	e7e9      	b.n	8016504 <_fwalk_sglue+0x10>

08016530 <siprintf>:
 8016530:	b40e      	push	{r1, r2, r3}
 8016532:	b500      	push	{lr}
 8016534:	b09c      	sub	sp, #112	; 0x70
 8016536:	ab1d      	add	r3, sp, #116	; 0x74
 8016538:	9002      	str	r0, [sp, #8]
 801653a:	9006      	str	r0, [sp, #24]
 801653c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016540:	4809      	ldr	r0, [pc, #36]	; (8016568 <siprintf+0x38>)
 8016542:	9107      	str	r1, [sp, #28]
 8016544:	9104      	str	r1, [sp, #16]
 8016546:	4909      	ldr	r1, [pc, #36]	; (801656c <siprintf+0x3c>)
 8016548:	f853 2b04 	ldr.w	r2, [r3], #4
 801654c:	9105      	str	r1, [sp, #20]
 801654e:	6800      	ldr	r0, [r0, #0]
 8016550:	9301      	str	r3, [sp, #4]
 8016552:	a902      	add	r1, sp, #8
 8016554:	f002 fb32 	bl	8018bbc <_svfiprintf_r>
 8016558:	9b02      	ldr	r3, [sp, #8]
 801655a:	2200      	movs	r2, #0
 801655c:	701a      	strb	r2, [r3, #0]
 801655e:	b01c      	add	sp, #112	; 0x70
 8016560:	f85d eb04 	ldr.w	lr, [sp], #4
 8016564:	b003      	add	sp, #12
 8016566:	4770      	bx	lr
 8016568:	24000158 	.word	0x24000158
 801656c:	ffff0208 	.word	0xffff0208

08016570 <__sread>:
 8016570:	b510      	push	{r4, lr}
 8016572:	460c      	mov	r4, r1
 8016574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016578:	f000 f86c 	bl	8016654 <_read_r>
 801657c:	2800      	cmp	r0, #0
 801657e:	bfab      	itete	ge
 8016580:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016582:	89a3      	ldrhlt	r3, [r4, #12]
 8016584:	181b      	addge	r3, r3, r0
 8016586:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801658a:	bfac      	ite	ge
 801658c:	6563      	strge	r3, [r4, #84]	; 0x54
 801658e:	81a3      	strhlt	r3, [r4, #12]
 8016590:	bd10      	pop	{r4, pc}

08016592 <__swrite>:
 8016592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016596:	461f      	mov	r7, r3
 8016598:	898b      	ldrh	r3, [r1, #12]
 801659a:	05db      	lsls	r3, r3, #23
 801659c:	4605      	mov	r5, r0
 801659e:	460c      	mov	r4, r1
 80165a0:	4616      	mov	r6, r2
 80165a2:	d505      	bpl.n	80165b0 <__swrite+0x1e>
 80165a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165a8:	2302      	movs	r3, #2
 80165aa:	2200      	movs	r2, #0
 80165ac:	f000 f840 	bl	8016630 <_lseek_r>
 80165b0:	89a3      	ldrh	r3, [r4, #12]
 80165b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80165b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80165ba:	81a3      	strh	r3, [r4, #12]
 80165bc:	4632      	mov	r2, r6
 80165be:	463b      	mov	r3, r7
 80165c0:	4628      	mov	r0, r5
 80165c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80165c6:	f000 b857 	b.w	8016678 <_write_r>

080165ca <__sseek>:
 80165ca:	b510      	push	{r4, lr}
 80165cc:	460c      	mov	r4, r1
 80165ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165d2:	f000 f82d 	bl	8016630 <_lseek_r>
 80165d6:	1c43      	adds	r3, r0, #1
 80165d8:	89a3      	ldrh	r3, [r4, #12]
 80165da:	bf15      	itete	ne
 80165dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80165de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80165e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80165e6:	81a3      	strheq	r3, [r4, #12]
 80165e8:	bf18      	it	ne
 80165ea:	81a3      	strhne	r3, [r4, #12]
 80165ec:	bd10      	pop	{r4, pc}

080165ee <__sclose>:
 80165ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165f2:	f000 b80d 	b.w	8016610 <_close_r>

080165f6 <memset>:
 80165f6:	4402      	add	r2, r0
 80165f8:	4603      	mov	r3, r0
 80165fa:	4293      	cmp	r3, r2
 80165fc:	d100      	bne.n	8016600 <memset+0xa>
 80165fe:	4770      	bx	lr
 8016600:	f803 1b01 	strb.w	r1, [r3], #1
 8016604:	e7f9      	b.n	80165fa <memset+0x4>
	...

08016608 <_localeconv_r>:
 8016608:	4800      	ldr	r0, [pc, #0]	; (801660c <_localeconv_r+0x4>)
 801660a:	4770      	bx	lr
 801660c:	2400024c 	.word	0x2400024c

08016610 <_close_r>:
 8016610:	b538      	push	{r3, r4, r5, lr}
 8016612:	4d06      	ldr	r5, [pc, #24]	; (801662c <_close_r+0x1c>)
 8016614:	2300      	movs	r3, #0
 8016616:	4604      	mov	r4, r0
 8016618:	4608      	mov	r0, r1
 801661a:	602b      	str	r3, [r5, #0]
 801661c:	f7ec fa77 	bl	8002b0e <_close>
 8016620:	1c43      	adds	r3, r0, #1
 8016622:	d102      	bne.n	801662a <_close_r+0x1a>
 8016624:	682b      	ldr	r3, [r5, #0]
 8016626:	b103      	cbz	r3, 801662a <_close_r+0x1a>
 8016628:	6023      	str	r3, [r4, #0]
 801662a:	bd38      	pop	{r3, r4, r5, pc}
 801662c:	24002a88 	.word	0x24002a88

08016630 <_lseek_r>:
 8016630:	b538      	push	{r3, r4, r5, lr}
 8016632:	4d07      	ldr	r5, [pc, #28]	; (8016650 <_lseek_r+0x20>)
 8016634:	4604      	mov	r4, r0
 8016636:	4608      	mov	r0, r1
 8016638:	4611      	mov	r1, r2
 801663a:	2200      	movs	r2, #0
 801663c:	602a      	str	r2, [r5, #0]
 801663e:	461a      	mov	r2, r3
 8016640:	f7ec fa8c 	bl	8002b5c <_lseek>
 8016644:	1c43      	adds	r3, r0, #1
 8016646:	d102      	bne.n	801664e <_lseek_r+0x1e>
 8016648:	682b      	ldr	r3, [r5, #0]
 801664a:	b103      	cbz	r3, 801664e <_lseek_r+0x1e>
 801664c:	6023      	str	r3, [r4, #0]
 801664e:	bd38      	pop	{r3, r4, r5, pc}
 8016650:	24002a88 	.word	0x24002a88

08016654 <_read_r>:
 8016654:	b538      	push	{r3, r4, r5, lr}
 8016656:	4d07      	ldr	r5, [pc, #28]	; (8016674 <_read_r+0x20>)
 8016658:	4604      	mov	r4, r0
 801665a:	4608      	mov	r0, r1
 801665c:	4611      	mov	r1, r2
 801665e:	2200      	movs	r2, #0
 8016660:	602a      	str	r2, [r5, #0]
 8016662:	461a      	mov	r2, r3
 8016664:	f7ec fa1a 	bl	8002a9c <_read>
 8016668:	1c43      	adds	r3, r0, #1
 801666a:	d102      	bne.n	8016672 <_read_r+0x1e>
 801666c:	682b      	ldr	r3, [r5, #0]
 801666e:	b103      	cbz	r3, 8016672 <_read_r+0x1e>
 8016670:	6023      	str	r3, [r4, #0]
 8016672:	bd38      	pop	{r3, r4, r5, pc}
 8016674:	24002a88 	.word	0x24002a88

08016678 <_write_r>:
 8016678:	b538      	push	{r3, r4, r5, lr}
 801667a:	4d07      	ldr	r5, [pc, #28]	; (8016698 <_write_r+0x20>)
 801667c:	4604      	mov	r4, r0
 801667e:	4608      	mov	r0, r1
 8016680:	4611      	mov	r1, r2
 8016682:	2200      	movs	r2, #0
 8016684:	602a      	str	r2, [r5, #0]
 8016686:	461a      	mov	r2, r3
 8016688:	f7ec fa25 	bl	8002ad6 <_write>
 801668c:	1c43      	adds	r3, r0, #1
 801668e:	d102      	bne.n	8016696 <_write_r+0x1e>
 8016690:	682b      	ldr	r3, [r5, #0]
 8016692:	b103      	cbz	r3, 8016696 <_write_r+0x1e>
 8016694:	6023      	str	r3, [r4, #0]
 8016696:	bd38      	pop	{r3, r4, r5, pc}
 8016698:	24002a88 	.word	0x24002a88

0801669c <__errno>:
 801669c:	4b01      	ldr	r3, [pc, #4]	; (80166a4 <__errno+0x8>)
 801669e:	6818      	ldr	r0, [r3, #0]
 80166a0:	4770      	bx	lr
 80166a2:	bf00      	nop
 80166a4:	24000158 	.word	0x24000158

080166a8 <__libc_init_array>:
 80166a8:	b570      	push	{r4, r5, r6, lr}
 80166aa:	4d0d      	ldr	r5, [pc, #52]	; (80166e0 <__libc_init_array+0x38>)
 80166ac:	4c0d      	ldr	r4, [pc, #52]	; (80166e4 <__libc_init_array+0x3c>)
 80166ae:	1b64      	subs	r4, r4, r5
 80166b0:	10a4      	asrs	r4, r4, #2
 80166b2:	2600      	movs	r6, #0
 80166b4:	42a6      	cmp	r6, r4
 80166b6:	d109      	bne.n	80166cc <__libc_init_array+0x24>
 80166b8:	4d0b      	ldr	r5, [pc, #44]	; (80166e8 <__libc_init_array+0x40>)
 80166ba:	4c0c      	ldr	r4, [pc, #48]	; (80166ec <__libc_init_array+0x44>)
 80166bc:	f003 fb0c 	bl	8019cd8 <_init>
 80166c0:	1b64      	subs	r4, r4, r5
 80166c2:	10a4      	asrs	r4, r4, #2
 80166c4:	2600      	movs	r6, #0
 80166c6:	42a6      	cmp	r6, r4
 80166c8:	d105      	bne.n	80166d6 <__libc_init_array+0x2e>
 80166ca:	bd70      	pop	{r4, r5, r6, pc}
 80166cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80166d0:	4798      	blx	r3
 80166d2:	3601      	adds	r6, #1
 80166d4:	e7ee      	b.n	80166b4 <__libc_init_array+0xc>
 80166d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80166da:	4798      	blx	r3
 80166dc:	3601      	adds	r6, #1
 80166de:	e7f2      	b.n	80166c6 <__libc_init_array+0x1e>
 80166e0:	0801a250 	.word	0x0801a250
 80166e4:	0801a250 	.word	0x0801a250
 80166e8:	0801a250 	.word	0x0801a250
 80166ec:	0801a254 	.word	0x0801a254

080166f0 <__retarget_lock_init_recursive>:
 80166f0:	4770      	bx	lr

080166f2 <__retarget_lock_acquire_recursive>:
 80166f2:	4770      	bx	lr

080166f4 <__retarget_lock_release_recursive>:
 80166f4:	4770      	bx	lr

080166f6 <memcpy>:
 80166f6:	440a      	add	r2, r1
 80166f8:	4291      	cmp	r1, r2
 80166fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80166fe:	d100      	bne.n	8016702 <memcpy+0xc>
 8016700:	4770      	bx	lr
 8016702:	b510      	push	{r4, lr}
 8016704:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016708:	f803 4f01 	strb.w	r4, [r3, #1]!
 801670c:	4291      	cmp	r1, r2
 801670e:	d1f9      	bne.n	8016704 <memcpy+0xe>
 8016710:	bd10      	pop	{r4, pc}
	...

08016714 <nanf>:
 8016714:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801671c <nanf+0x8>
 8016718:	4770      	bx	lr
 801671a:	bf00      	nop
 801671c:	7fc00000 	.word	0x7fc00000

08016720 <quorem>:
 8016720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016724:	6903      	ldr	r3, [r0, #16]
 8016726:	690c      	ldr	r4, [r1, #16]
 8016728:	42a3      	cmp	r3, r4
 801672a:	4607      	mov	r7, r0
 801672c:	db7e      	blt.n	801682c <quorem+0x10c>
 801672e:	3c01      	subs	r4, #1
 8016730:	f101 0814 	add.w	r8, r1, #20
 8016734:	f100 0514 	add.w	r5, r0, #20
 8016738:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801673c:	9301      	str	r3, [sp, #4]
 801673e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016742:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016746:	3301      	adds	r3, #1
 8016748:	429a      	cmp	r2, r3
 801674a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801674e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016752:	fbb2 f6f3 	udiv	r6, r2, r3
 8016756:	d331      	bcc.n	80167bc <quorem+0x9c>
 8016758:	f04f 0e00 	mov.w	lr, #0
 801675c:	4640      	mov	r0, r8
 801675e:	46ac      	mov	ip, r5
 8016760:	46f2      	mov	sl, lr
 8016762:	f850 2b04 	ldr.w	r2, [r0], #4
 8016766:	b293      	uxth	r3, r2
 8016768:	fb06 e303 	mla	r3, r6, r3, lr
 801676c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016770:	0c1a      	lsrs	r2, r3, #16
 8016772:	b29b      	uxth	r3, r3
 8016774:	ebaa 0303 	sub.w	r3, sl, r3
 8016778:	f8dc a000 	ldr.w	sl, [ip]
 801677c:	fa13 f38a 	uxtah	r3, r3, sl
 8016780:	fb06 220e 	mla	r2, r6, lr, r2
 8016784:	9300      	str	r3, [sp, #0]
 8016786:	9b00      	ldr	r3, [sp, #0]
 8016788:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801678c:	b292      	uxth	r2, r2
 801678e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8016792:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016796:	f8bd 3000 	ldrh.w	r3, [sp]
 801679a:	4581      	cmp	r9, r0
 801679c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80167a0:	f84c 3b04 	str.w	r3, [ip], #4
 80167a4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80167a8:	d2db      	bcs.n	8016762 <quorem+0x42>
 80167aa:	f855 300b 	ldr.w	r3, [r5, fp]
 80167ae:	b92b      	cbnz	r3, 80167bc <quorem+0x9c>
 80167b0:	9b01      	ldr	r3, [sp, #4]
 80167b2:	3b04      	subs	r3, #4
 80167b4:	429d      	cmp	r5, r3
 80167b6:	461a      	mov	r2, r3
 80167b8:	d32c      	bcc.n	8016814 <quorem+0xf4>
 80167ba:	613c      	str	r4, [r7, #16]
 80167bc:	4638      	mov	r0, r7
 80167be:	f001 f969 	bl	8017a94 <__mcmp>
 80167c2:	2800      	cmp	r0, #0
 80167c4:	db22      	blt.n	801680c <quorem+0xec>
 80167c6:	3601      	adds	r6, #1
 80167c8:	4629      	mov	r1, r5
 80167ca:	2000      	movs	r0, #0
 80167cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80167d0:	f8d1 c000 	ldr.w	ip, [r1]
 80167d4:	b293      	uxth	r3, r2
 80167d6:	1ac3      	subs	r3, r0, r3
 80167d8:	0c12      	lsrs	r2, r2, #16
 80167da:	fa13 f38c 	uxtah	r3, r3, ip
 80167de:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80167e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80167e6:	b29b      	uxth	r3, r3
 80167e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80167ec:	45c1      	cmp	r9, r8
 80167ee:	f841 3b04 	str.w	r3, [r1], #4
 80167f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80167f6:	d2e9      	bcs.n	80167cc <quorem+0xac>
 80167f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80167fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016800:	b922      	cbnz	r2, 801680c <quorem+0xec>
 8016802:	3b04      	subs	r3, #4
 8016804:	429d      	cmp	r5, r3
 8016806:	461a      	mov	r2, r3
 8016808:	d30a      	bcc.n	8016820 <quorem+0x100>
 801680a:	613c      	str	r4, [r7, #16]
 801680c:	4630      	mov	r0, r6
 801680e:	b003      	add	sp, #12
 8016810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016814:	6812      	ldr	r2, [r2, #0]
 8016816:	3b04      	subs	r3, #4
 8016818:	2a00      	cmp	r2, #0
 801681a:	d1ce      	bne.n	80167ba <quorem+0x9a>
 801681c:	3c01      	subs	r4, #1
 801681e:	e7c9      	b.n	80167b4 <quorem+0x94>
 8016820:	6812      	ldr	r2, [r2, #0]
 8016822:	3b04      	subs	r3, #4
 8016824:	2a00      	cmp	r2, #0
 8016826:	d1f0      	bne.n	801680a <quorem+0xea>
 8016828:	3c01      	subs	r4, #1
 801682a:	e7eb      	b.n	8016804 <quorem+0xe4>
 801682c:	2000      	movs	r0, #0
 801682e:	e7ee      	b.n	801680e <quorem+0xee>

08016830 <_dtoa_r>:
 8016830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016834:	ed2d 8b02 	vpush	{d8}
 8016838:	69c5      	ldr	r5, [r0, #28]
 801683a:	b091      	sub	sp, #68	; 0x44
 801683c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8016840:	ec59 8b10 	vmov	r8, r9, d0
 8016844:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8016846:	9106      	str	r1, [sp, #24]
 8016848:	4606      	mov	r6, r0
 801684a:	9208      	str	r2, [sp, #32]
 801684c:	930c      	str	r3, [sp, #48]	; 0x30
 801684e:	b975      	cbnz	r5, 801686e <_dtoa_r+0x3e>
 8016850:	2010      	movs	r0, #16
 8016852:	f000 fda5 	bl	80173a0 <malloc>
 8016856:	4602      	mov	r2, r0
 8016858:	61f0      	str	r0, [r6, #28]
 801685a:	b920      	cbnz	r0, 8016866 <_dtoa_r+0x36>
 801685c:	4ba6      	ldr	r3, [pc, #664]	; (8016af8 <_dtoa_r+0x2c8>)
 801685e:	21ef      	movs	r1, #239	; 0xef
 8016860:	48a6      	ldr	r0, [pc, #664]	; (8016afc <_dtoa_r+0x2cc>)
 8016862:	f002 fb9d 	bl	8018fa0 <__assert_func>
 8016866:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801686a:	6005      	str	r5, [r0, #0]
 801686c:	60c5      	str	r5, [r0, #12]
 801686e:	69f3      	ldr	r3, [r6, #28]
 8016870:	6819      	ldr	r1, [r3, #0]
 8016872:	b151      	cbz	r1, 801688a <_dtoa_r+0x5a>
 8016874:	685a      	ldr	r2, [r3, #4]
 8016876:	604a      	str	r2, [r1, #4]
 8016878:	2301      	movs	r3, #1
 801687a:	4093      	lsls	r3, r2
 801687c:	608b      	str	r3, [r1, #8]
 801687e:	4630      	mov	r0, r6
 8016880:	f000 fe82 	bl	8017588 <_Bfree>
 8016884:	69f3      	ldr	r3, [r6, #28]
 8016886:	2200      	movs	r2, #0
 8016888:	601a      	str	r2, [r3, #0]
 801688a:	f1b9 0300 	subs.w	r3, r9, #0
 801688e:	bfbb      	ittet	lt
 8016890:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016894:	9303      	strlt	r3, [sp, #12]
 8016896:	2300      	movge	r3, #0
 8016898:	2201      	movlt	r2, #1
 801689a:	bfac      	ite	ge
 801689c:	6023      	strge	r3, [r4, #0]
 801689e:	6022      	strlt	r2, [r4, #0]
 80168a0:	4b97      	ldr	r3, [pc, #604]	; (8016b00 <_dtoa_r+0x2d0>)
 80168a2:	9c03      	ldr	r4, [sp, #12]
 80168a4:	43a3      	bics	r3, r4
 80168a6:	d11c      	bne.n	80168e2 <_dtoa_r+0xb2>
 80168a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80168aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80168ae:	6013      	str	r3, [r2, #0]
 80168b0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80168b4:	ea53 0308 	orrs.w	r3, r3, r8
 80168b8:	f000 84fb 	beq.w	80172b2 <_dtoa_r+0xa82>
 80168bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80168be:	b963      	cbnz	r3, 80168da <_dtoa_r+0xaa>
 80168c0:	4b90      	ldr	r3, [pc, #576]	; (8016b04 <_dtoa_r+0x2d4>)
 80168c2:	e020      	b.n	8016906 <_dtoa_r+0xd6>
 80168c4:	4b90      	ldr	r3, [pc, #576]	; (8016b08 <_dtoa_r+0x2d8>)
 80168c6:	9301      	str	r3, [sp, #4]
 80168c8:	3308      	adds	r3, #8
 80168ca:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80168cc:	6013      	str	r3, [r2, #0]
 80168ce:	9801      	ldr	r0, [sp, #4]
 80168d0:	b011      	add	sp, #68	; 0x44
 80168d2:	ecbd 8b02 	vpop	{d8}
 80168d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168da:	4b8a      	ldr	r3, [pc, #552]	; (8016b04 <_dtoa_r+0x2d4>)
 80168dc:	9301      	str	r3, [sp, #4]
 80168de:	3303      	adds	r3, #3
 80168e0:	e7f3      	b.n	80168ca <_dtoa_r+0x9a>
 80168e2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80168e6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80168ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ee:	d10c      	bne.n	801690a <_dtoa_r+0xda>
 80168f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80168f2:	2301      	movs	r3, #1
 80168f4:	6013      	str	r3, [r2, #0]
 80168f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	f000 84d7 	beq.w	80172ac <_dtoa_r+0xa7c>
 80168fe:	4b83      	ldr	r3, [pc, #524]	; (8016b0c <_dtoa_r+0x2dc>)
 8016900:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016902:	6013      	str	r3, [r2, #0]
 8016904:	3b01      	subs	r3, #1
 8016906:	9301      	str	r3, [sp, #4]
 8016908:	e7e1      	b.n	80168ce <_dtoa_r+0x9e>
 801690a:	aa0e      	add	r2, sp, #56	; 0x38
 801690c:	a90f      	add	r1, sp, #60	; 0x3c
 801690e:	4630      	mov	r0, r6
 8016910:	eeb0 0b48 	vmov.f64	d0, d8
 8016914:	f001 f9d4 	bl	8017cc0 <__d2b>
 8016918:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801691c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801691e:	4605      	mov	r5, r0
 8016920:	2b00      	cmp	r3, #0
 8016922:	d046      	beq.n	80169b2 <_dtoa_r+0x182>
 8016924:	eeb0 7b48 	vmov.f64	d7, d8
 8016928:	ee18 1a90 	vmov	r1, s17
 801692c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8016930:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8016934:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8016938:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801693c:	2000      	movs	r0, #0
 801693e:	ee07 1a90 	vmov	s15, r1
 8016942:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8016946:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8016ae0 <_dtoa_r+0x2b0>
 801694a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801694e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8016ae8 <_dtoa_r+0x2b8>
 8016952:	eea7 6b05 	vfma.f64	d6, d7, d5
 8016956:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8016af0 <_dtoa_r+0x2c0>
 801695a:	ee07 3a90 	vmov	s15, r3
 801695e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8016962:	eeb0 7b46 	vmov.f64	d7, d6
 8016966:	eea4 7b05 	vfma.f64	d7, d4, d5
 801696a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801696e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8016972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016976:	ee16 ba90 	vmov	fp, s13
 801697a:	9009      	str	r0, [sp, #36]	; 0x24
 801697c:	d508      	bpl.n	8016990 <_dtoa_r+0x160>
 801697e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8016982:	eeb4 6b47 	vcmp.f64	d6, d7
 8016986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801698a:	bf18      	it	ne
 801698c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8016990:	f1bb 0f16 	cmp.w	fp, #22
 8016994:	d82b      	bhi.n	80169ee <_dtoa_r+0x1be>
 8016996:	495e      	ldr	r1, [pc, #376]	; (8016b10 <_dtoa_r+0x2e0>)
 8016998:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801699c:	ed91 7b00 	vldr	d7, [r1]
 80169a0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80169a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169a8:	d501      	bpl.n	80169ae <_dtoa_r+0x17e>
 80169aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80169ae:	2100      	movs	r1, #0
 80169b0:	e01e      	b.n	80169f0 <_dtoa_r+0x1c0>
 80169b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80169b4:	4413      	add	r3, r2
 80169b6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80169ba:	2920      	cmp	r1, #32
 80169bc:	bfc1      	itttt	gt
 80169be:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80169c2:	408c      	lslgt	r4, r1
 80169c4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80169c8:	fa28 f101 	lsrgt.w	r1, r8, r1
 80169cc:	bfd6      	itet	le
 80169ce:	f1c1 0120 	rsble	r1, r1, #32
 80169d2:	4321      	orrgt	r1, r4
 80169d4:	fa08 f101 	lslle.w	r1, r8, r1
 80169d8:	ee07 1a90 	vmov	s15, r1
 80169dc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80169e0:	3b01      	subs	r3, #1
 80169e2:	ee17 1a90 	vmov	r1, s15
 80169e6:	2001      	movs	r0, #1
 80169e8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80169ec:	e7a7      	b.n	801693e <_dtoa_r+0x10e>
 80169ee:	2101      	movs	r1, #1
 80169f0:	1ad2      	subs	r2, r2, r3
 80169f2:	1e53      	subs	r3, r2, #1
 80169f4:	9305      	str	r3, [sp, #20]
 80169f6:	bf45      	ittet	mi
 80169f8:	f1c2 0301 	rsbmi	r3, r2, #1
 80169fc:	9304      	strmi	r3, [sp, #16]
 80169fe:	2300      	movpl	r3, #0
 8016a00:	2300      	movmi	r3, #0
 8016a02:	bf4c      	ite	mi
 8016a04:	9305      	strmi	r3, [sp, #20]
 8016a06:	9304      	strpl	r3, [sp, #16]
 8016a08:	f1bb 0f00 	cmp.w	fp, #0
 8016a0c:	910b      	str	r1, [sp, #44]	; 0x2c
 8016a0e:	db18      	blt.n	8016a42 <_dtoa_r+0x212>
 8016a10:	9b05      	ldr	r3, [sp, #20]
 8016a12:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8016a16:	445b      	add	r3, fp
 8016a18:	9305      	str	r3, [sp, #20]
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	9a06      	ldr	r2, [sp, #24]
 8016a1e:	2a09      	cmp	r2, #9
 8016a20:	d848      	bhi.n	8016ab4 <_dtoa_r+0x284>
 8016a22:	2a05      	cmp	r2, #5
 8016a24:	bfc4      	itt	gt
 8016a26:	3a04      	subgt	r2, #4
 8016a28:	9206      	strgt	r2, [sp, #24]
 8016a2a:	9a06      	ldr	r2, [sp, #24]
 8016a2c:	f1a2 0202 	sub.w	r2, r2, #2
 8016a30:	bfcc      	ite	gt
 8016a32:	2400      	movgt	r4, #0
 8016a34:	2401      	movle	r4, #1
 8016a36:	2a03      	cmp	r2, #3
 8016a38:	d847      	bhi.n	8016aca <_dtoa_r+0x29a>
 8016a3a:	e8df f002 	tbb	[pc, r2]
 8016a3e:	2d0b      	.short	0x2d0b
 8016a40:	392b      	.short	0x392b
 8016a42:	9b04      	ldr	r3, [sp, #16]
 8016a44:	2200      	movs	r2, #0
 8016a46:	eba3 030b 	sub.w	r3, r3, fp
 8016a4a:	9304      	str	r3, [sp, #16]
 8016a4c:	920a      	str	r2, [sp, #40]	; 0x28
 8016a4e:	f1cb 0300 	rsb	r3, fp, #0
 8016a52:	e7e3      	b.n	8016a1c <_dtoa_r+0x1ec>
 8016a54:	2200      	movs	r2, #0
 8016a56:	9207      	str	r2, [sp, #28]
 8016a58:	9a08      	ldr	r2, [sp, #32]
 8016a5a:	2a00      	cmp	r2, #0
 8016a5c:	dc38      	bgt.n	8016ad0 <_dtoa_r+0x2a0>
 8016a5e:	f04f 0a01 	mov.w	sl, #1
 8016a62:	46d1      	mov	r9, sl
 8016a64:	4652      	mov	r2, sl
 8016a66:	f8cd a020 	str.w	sl, [sp, #32]
 8016a6a:	69f7      	ldr	r7, [r6, #28]
 8016a6c:	2100      	movs	r1, #0
 8016a6e:	2004      	movs	r0, #4
 8016a70:	f100 0c14 	add.w	ip, r0, #20
 8016a74:	4594      	cmp	ip, r2
 8016a76:	d930      	bls.n	8016ada <_dtoa_r+0x2aa>
 8016a78:	6079      	str	r1, [r7, #4]
 8016a7a:	4630      	mov	r0, r6
 8016a7c:	930d      	str	r3, [sp, #52]	; 0x34
 8016a7e:	f000 fd43 	bl	8017508 <_Balloc>
 8016a82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016a84:	9001      	str	r0, [sp, #4]
 8016a86:	4602      	mov	r2, r0
 8016a88:	2800      	cmp	r0, #0
 8016a8a:	d145      	bne.n	8016b18 <_dtoa_r+0x2e8>
 8016a8c:	4b21      	ldr	r3, [pc, #132]	; (8016b14 <_dtoa_r+0x2e4>)
 8016a8e:	f240 11af 	movw	r1, #431	; 0x1af
 8016a92:	e6e5      	b.n	8016860 <_dtoa_r+0x30>
 8016a94:	2201      	movs	r2, #1
 8016a96:	e7de      	b.n	8016a56 <_dtoa_r+0x226>
 8016a98:	2200      	movs	r2, #0
 8016a9a:	9207      	str	r2, [sp, #28]
 8016a9c:	9a08      	ldr	r2, [sp, #32]
 8016a9e:	eb0b 0a02 	add.w	sl, fp, r2
 8016aa2:	f10a 0901 	add.w	r9, sl, #1
 8016aa6:	464a      	mov	r2, r9
 8016aa8:	2a01      	cmp	r2, #1
 8016aaa:	bfb8      	it	lt
 8016aac:	2201      	movlt	r2, #1
 8016aae:	e7dc      	b.n	8016a6a <_dtoa_r+0x23a>
 8016ab0:	2201      	movs	r2, #1
 8016ab2:	e7f2      	b.n	8016a9a <_dtoa_r+0x26a>
 8016ab4:	2401      	movs	r4, #1
 8016ab6:	2200      	movs	r2, #0
 8016ab8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8016abc:	f04f 3aff 	mov.w	sl, #4294967295
 8016ac0:	2100      	movs	r1, #0
 8016ac2:	46d1      	mov	r9, sl
 8016ac4:	2212      	movs	r2, #18
 8016ac6:	9108      	str	r1, [sp, #32]
 8016ac8:	e7cf      	b.n	8016a6a <_dtoa_r+0x23a>
 8016aca:	2201      	movs	r2, #1
 8016acc:	9207      	str	r2, [sp, #28]
 8016ace:	e7f5      	b.n	8016abc <_dtoa_r+0x28c>
 8016ad0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016ad4:	46d1      	mov	r9, sl
 8016ad6:	4652      	mov	r2, sl
 8016ad8:	e7c7      	b.n	8016a6a <_dtoa_r+0x23a>
 8016ada:	3101      	adds	r1, #1
 8016adc:	0040      	lsls	r0, r0, #1
 8016ade:	e7c7      	b.n	8016a70 <_dtoa_r+0x240>
 8016ae0:	636f4361 	.word	0x636f4361
 8016ae4:	3fd287a7 	.word	0x3fd287a7
 8016ae8:	8b60c8b3 	.word	0x8b60c8b3
 8016aec:	3fc68a28 	.word	0x3fc68a28
 8016af0:	509f79fb 	.word	0x509f79fb
 8016af4:	3fd34413 	.word	0x3fd34413
 8016af8:	08019e62 	.word	0x08019e62
 8016afc:	08019e79 	.word	0x08019e79
 8016b00:	7ff00000 	.word	0x7ff00000
 8016b04:	08019e5e 	.word	0x08019e5e
 8016b08:	08019e55 	.word	0x08019e55
 8016b0c:	08019e2d 	.word	0x08019e2d
 8016b10:	08019f68 	.word	0x08019f68
 8016b14:	08019ed1 	.word	0x08019ed1
 8016b18:	69f2      	ldr	r2, [r6, #28]
 8016b1a:	9901      	ldr	r1, [sp, #4]
 8016b1c:	6011      	str	r1, [r2, #0]
 8016b1e:	f1b9 0f0e 	cmp.w	r9, #14
 8016b22:	d86c      	bhi.n	8016bfe <_dtoa_r+0x3ce>
 8016b24:	2c00      	cmp	r4, #0
 8016b26:	d06a      	beq.n	8016bfe <_dtoa_r+0x3ce>
 8016b28:	f1bb 0f00 	cmp.w	fp, #0
 8016b2c:	f340 80a0 	ble.w	8016c70 <_dtoa_r+0x440>
 8016b30:	4ac1      	ldr	r2, [pc, #772]	; (8016e38 <_dtoa_r+0x608>)
 8016b32:	f00b 010f 	and.w	r1, fp, #15
 8016b36:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8016b3a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8016b3e:	ed92 7b00 	vldr	d7, [r2]
 8016b42:	ea4f 122b 	mov.w	r2, fp, asr #4
 8016b46:	f000 8087 	beq.w	8016c58 <_dtoa_r+0x428>
 8016b4a:	49bc      	ldr	r1, [pc, #752]	; (8016e3c <_dtoa_r+0x60c>)
 8016b4c:	ed91 6b08 	vldr	d6, [r1, #32]
 8016b50:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8016b54:	ed8d 6b02 	vstr	d6, [sp, #8]
 8016b58:	f002 020f 	and.w	r2, r2, #15
 8016b5c:	2103      	movs	r1, #3
 8016b5e:	48b7      	ldr	r0, [pc, #732]	; (8016e3c <_dtoa_r+0x60c>)
 8016b60:	2a00      	cmp	r2, #0
 8016b62:	d17b      	bne.n	8016c5c <_dtoa_r+0x42c>
 8016b64:	ed9d 6b02 	vldr	d6, [sp, #8]
 8016b68:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016b6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016b70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016b72:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016b76:	2a00      	cmp	r2, #0
 8016b78:	f000 80a0 	beq.w	8016cbc <_dtoa_r+0x48c>
 8016b7c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8016b80:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8016b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b88:	f140 8098 	bpl.w	8016cbc <_dtoa_r+0x48c>
 8016b8c:	f1b9 0f00 	cmp.w	r9, #0
 8016b90:	f000 8094 	beq.w	8016cbc <_dtoa_r+0x48c>
 8016b94:	f1ba 0f00 	cmp.w	sl, #0
 8016b98:	dd2f      	ble.n	8016bfa <_dtoa_r+0x3ca>
 8016b9a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8016b9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016ba2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016ba6:	f10b 32ff 	add.w	r2, fp, #4294967295
 8016baa:	3101      	adds	r1, #1
 8016bac:	4654      	mov	r4, sl
 8016bae:	ed9d 6b02 	vldr	d6, [sp, #8]
 8016bb2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8016bb6:	ee07 1a90 	vmov	s15, r1
 8016bba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016bbe:	eea7 5b06 	vfma.f64	d5, d7, d6
 8016bc2:	ee15 7a90 	vmov	r7, s11
 8016bc6:	ec51 0b15 	vmov	r0, r1, d5
 8016bca:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8016bce:	2c00      	cmp	r4, #0
 8016bd0:	d177      	bne.n	8016cc2 <_dtoa_r+0x492>
 8016bd2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8016bd6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8016bda:	ec41 0b17 	vmov	d7, r0, r1
 8016bde:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016be6:	f300 826a 	bgt.w	80170be <_dtoa_r+0x88e>
 8016bea:	eeb1 7b47 	vneg.f64	d7, d7
 8016bee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bf6:	f100 8260 	bmi.w	80170ba <_dtoa_r+0x88a>
 8016bfa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8016bfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016c00:	2a00      	cmp	r2, #0
 8016c02:	f2c0 811d 	blt.w	8016e40 <_dtoa_r+0x610>
 8016c06:	f1bb 0f0e 	cmp.w	fp, #14
 8016c0a:	f300 8119 	bgt.w	8016e40 <_dtoa_r+0x610>
 8016c0e:	4b8a      	ldr	r3, [pc, #552]	; (8016e38 <_dtoa_r+0x608>)
 8016c10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016c14:	ed93 6b00 	vldr	d6, [r3]
 8016c18:	9b08      	ldr	r3, [sp, #32]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	f280 80b7 	bge.w	8016d8e <_dtoa_r+0x55e>
 8016c20:	f1b9 0f00 	cmp.w	r9, #0
 8016c24:	f300 80b3 	bgt.w	8016d8e <_dtoa_r+0x55e>
 8016c28:	f040 8246 	bne.w	80170b8 <_dtoa_r+0x888>
 8016c2c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8016c30:	ee26 6b07 	vmul.f64	d6, d6, d7
 8016c34:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016c38:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c40:	464c      	mov	r4, r9
 8016c42:	464f      	mov	r7, r9
 8016c44:	f280 821c 	bge.w	8017080 <_dtoa_r+0x850>
 8016c48:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016c4c:	2331      	movs	r3, #49	; 0x31
 8016c4e:	f808 3b01 	strb.w	r3, [r8], #1
 8016c52:	f10b 0b01 	add.w	fp, fp, #1
 8016c56:	e218      	b.n	801708a <_dtoa_r+0x85a>
 8016c58:	2102      	movs	r1, #2
 8016c5a:	e780      	b.n	8016b5e <_dtoa_r+0x32e>
 8016c5c:	07d4      	lsls	r4, r2, #31
 8016c5e:	d504      	bpl.n	8016c6a <_dtoa_r+0x43a>
 8016c60:	ed90 6b00 	vldr	d6, [r0]
 8016c64:	3101      	adds	r1, #1
 8016c66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016c6a:	1052      	asrs	r2, r2, #1
 8016c6c:	3008      	adds	r0, #8
 8016c6e:	e777      	b.n	8016b60 <_dtoa_r+0x330>
 8016c70:	d022      	beq.n	8016cb8 <_dtoa_r+0x488>
 8016c72:	f1cb 0200 	rsb	r2, fp, #0
 8016c76:	4970      	ldr	r1, [pc, #448]	; (8016e38 <_dtoa_r+0x608>)
 8016c78:	f002 000f 	and.w	r0, r2, #15
 8016c7c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016c80:	ed91 7b00 	vldr	d7, [r1]
 8016c84:	ee28 7b07 	vmul.f64	d7, d8, d7
 8016c88:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016c8c:	486b      	ldr	r0, [pc, #428]	; (8016e3c <_dtoa_r+0x60c>)
 8016c8e:	1112      	asrs	r2, r2, #4
 8016c90:	2400      	movs	r4, #0
 8016c92:	2102      	movs	r1, #2
 8016c94:	b92a      	cbnz	r2, 8016ca2 <_dtoa_r+0x472>
 8016c96:	2c00      	cmp	r4, #0
 8016c98:	f43f af6a 	beq.w	8016b70 <_dtoa_r+0x340>
 8016c9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016ca0:	e766      	b.n	8016b70 <_dtoa_r+0x340>
 8016ca2:	07d7      	lsls	r7, r2, #31
 8016ca4:	d505      	bpl.n	8016cb2 <_dtoa_r+0x482>
 8016ca6:	ed90 6b00 	vldr	d6, [r0]
 8016caa:	3101      	adds	r1, #1
 8016cac:	2401      	movs	r4, #1
 8016cae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016cb2:	1052      	asrs	r2, r2, #1
 8016cb4:	3008      	adds	r0, #8
 8016cb6:	e7ed      	b.n	8016c94 <_dtoa_r+0x464>
 8016cb8:	2102      	movs	r1, #2
 8016cba:	e759      	b.n	8016b70 <_dtoa_r+0x340>
 8016cbc:	465a      	mov	r2, fp
 8016cbe:	464c      	mov	r4, r9
 8016cc0:	e775      	b.n	8016bae <_dtoa_r+0x37e>
 8016cc2:	ec41 0b17 	vmov	d7, r0, r1
 8016cc6:	495c      	ldr	r1, [pc, #368]	; (8016e38 <_dtoa_r+0x608>)
 8016cc8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8016ccc:	ed11 4b02 	vldr	d4, [r1, #-8]
 8016cd0:	9901      	ldr	r1, [sp, #4]
 8016cd2:	440c      	add	r4, r1
 8016cd4:	9907      	ldr	r1, [sp, #28]
 8016cd6:	b351      	cbz	r1, 8016d2e <_dtoa_r+0x4fe>
 8016cd8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8016cdc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8016ce0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016ce4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8016ce8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8016cec:	ee35 7b47 	vsub.f64	d7, d5, d7
 8016cf0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8016cf4:	ee14 1a90 	vmov	r1, s9
 8016cf8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8016cfc:	3130      	adds	r1, #48	; 0x30
 8016cfe:	ee36 6b45 	vsub.f64	d6, d6, d5
 8016d02:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d0a:	f808 1b01 	strb.w	r1, [r8], #1
 8016d0e:	d439      	bmi.n	8016d84 <_dtoa_r+0x554>
 8016d10:	ee32 5b46 	vsub.f64	d5, d2, d6
 8016d14:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8016d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d1c:	d472      	bmi.n	8016e04 <_dtoa_r+0x5d4>
 8016d1e:	45a0      	cmp	r8, r4
 8016d20:	f43f af6b 	beq.w	8016bfa <_dtoa_r+0x3ca>
 8016d24:	ee27 7b03 	vmul.f64	d7, d7, d3
 8016d28:	ee26 6b03 	vmul.f64	d6, d6, d3
 8016d2c:	e7e0      	b.n	8016cf0 <_dtoa_r+0x4c0>
 8016d2e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016d32:	ee27 7b04 	vmul.f64	d7, d7, d4
 8016d36:	4620      	mov	r0, r4
 8016d38:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8016d3c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8016d40:	ee14 1a90 	vmov	r1, s9
 8016d44:	3130      	adds	r1, #48	; 0x30
 8016d46:	f808 1b01 	strb.w	r1, [r8], #1
 8016d4a:	45a0      	cmp	r8, r4
 8016d4c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8016d50:	ee36 6b45 	vsub.f64	d6, d6, d5
 8016d54:	d118      	bne.n	8016d88 <_dtoa_r+0x558>
 8016d56:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8016d5a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8016d5e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8016d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d66:	dc4d      	bgt.n	8016e04 <_dtoa_r+0x5d4>
 8016d68:	ee35 5b47 	vsub.f64	d5, d5, d7
 8016d6c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8016d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d74:	f57f af41 	bpl.w	8016bfa <_dtoa_r+0x3ca>
 8016d78:	4680      	mov	r8, r0
 8016d7a:	3801      	subs	r0, #1
 8016d7c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8016d80:	2b30      	cmp	r3, #48	; 0x30
 8016d82:	d0f9      	beq.n	8016d78 <_dtoa_r+0x548>
 8016d84:	4693      	mov	fp, r2
 8016d86:	e02a      	b.n	8016dde <_dtoa_r+0x5ae>
 8016d88:	ee26 6b03 	vmul.f64	d6, d6, d3
 8016d8c:	e7d6      	b.n	8016d3c <_dtoa_r+0x50c>
 8016d8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016d92:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8016d96:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016d9a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8016d9e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8016da2:	ee15 3a10 	vmov	r3, s10
 8016da6:	3330      	adds	r3, #48	; 0x30
 8016da8:	f808 3b01 	strb.w	r3, [r8], #1
 8016dac:	9b01      	ldr	r3, [sp, #4]
 8016dae:	eba8 0303 	sub.w	r3, r8, r3
 8016db2:	4599      	cmp	r9, r3
 8016db4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8016db8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8016dbc:	d133      	bne.n	8016e26 <_dtoa_r+0x5f6>
 8016dbe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8016dc2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8016dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dca:	dc1a      	bgt.n	8016e02 <_dtoa_r+0x5d2>
 8016dcc:	eeb4 7b46 	vcmp.f64	d7, d6
 8016dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dd4:	d103      	bne.n	8016dde <_dtoa_r+0x5ae>
 8016dd6:	ee15 3a10 	vmov	r3, s10
 8016dda:	07d9      	lsls	r1, r3, #31
 8016ddc:	d411      	bmi.n	8016e02 <_dtoa_r+0x5d2>
 8016dde:	4629      	mov	r1, r5
 8016de0:	4630      	mov	r0, r6
 8016de2:	f000 fbd1 	bl	8017588 <_Bfree>
 8016de6:	2300      	movs	r3, #0
 8016de8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016dea:	f888 3000 	strb.w	r3, [r8]
 8016dee:	f10b 0301 	add.w	r3, fp, #1
 8016df2:	6013      	str	r3, [r2, #0]
 8016df4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	f43f ad69 	beq.w	80168ce <_dtoa_r+0x9e>
 8016dfc:	f8c3 8000 	str.w	r8, [r3]
 8016e00:	e565      	b.n	80168ce <_dtoa_r+0x9e>
 8016e02:	465a      	mov	r2, fp
 8016e04:	4643      	mov	r3, r8
 8016e06:	4698      	mov	r8, r3
 8016e08:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8016e0c:	2939      	cmp	r1, #57	; 0x39
 8016e0e:	d106      	bne.n	8016e1e <_dtoa_r+0x5ee>
 8016e10:	9901      	ldr	r1, [sp, #4]
 8016e12:	4299      	cmp	r1, r3
 8016e14:	d1f7      	bne.n	8016e06 <_dtoa_r+0x5d6>
 8016e16:	9801      	ldr	r0, [sp, #4]
 8016e18:	2130      	movs	r1, #48	; 0x30
 8016e1a:	3201      	adds	r2, #1
 8016e1c:	7001      	strb	r1, [r0, #0]
 8016e1e:	7819      	ldrb	r1, [r3, #0]
 8016e20:	3101      	adds	r1, #1
 8016e22:	7019      	strb	r1, [r3, #0]
 8016e24:	e7ae      	b.n	8016d84 <_dtoa_r+0x554>
 8016e26:	ee27 7b04 	vmul.f64	d7, d7, d4
 8016e2a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e32:	d1b2      	bne.n	8016d9a <_dtoa_r+0x56a>
 8016e34:	e7d3      	b.n	8016dde <_dtoa_r+0x5ae>
 8016e36:	bf00      	nop
 8016e38:	08019f68 	.word	0x08019f68
 8016e3c:	08019f40 	.word	0x08019f40
 8016e40:	9907      	ldr	r1, [sp, #28]
 8016e42:	2900      	cmp	r1, #0
 8016e44:	f000 80d0 	beq.w	8016fe8 <_dtoa_r+0x7b8>
 8016e48:	9906      	ldr	r1, [sp, #24]
 8016e4a:	2901      	cmp	r1, #1
 8016e4c:	f300 80b4 	bgt.w	8016fb8 <_dtoa_r+0x788>
 8016e50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016e52:	2900      	cmp	r1, #0
 8016e54:	f000 80ac 	beq.w	8016fb0 <_dtoa_r+0x780>
 8016e58:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016e5c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8016e60:	461c      	mov	r4, r3
 8016e62:	9309      	str	r3, [sp, #36]	; 0x24
 8016e64:	9b04      	ldr	r3, [sp, #16]
 8016e66:	4413      	add	r3, r2
 8016e68:	9304      	str	r3, [sp, #16]
 8016e6a:	9b05      	ldr	r3, [sp, #20]
 8016e6c:	2101      	movs	r1, #1
 8016e6e:	4413      	add	r3, r2
 8016e70:	4630      	mov	r0, r6
 8016e72:	9305      	str	r3, [sp, #20]
 8016e74:	f000 fc88 	bl	8017788 <__i2b>
 8016e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e7a:	4607      	mov	r7, r0
 8016e7c:	f1b8 0f00 	cmp.w	r8, #0
 8016e80:	d00d      	beq.n	8016e9e <_dtoa_r+0x66e>
 8016e82:	9a05      	ldr	r2, [sp, #20]
 8016e84:	2a00      	cmp	r2, #0
 8016e86:	dd0a      	ble.n	8016e9e <_dtoa_r+0x66e>
 8016e88:	4542      	cmp	r2, r8
 8016e8a:	9904      	ldr	r1, [sp, #16]
 8016e8c:	bfa8      	it	ge
 8016e8e:	4642      	movge	r2, r8
 8016e90:	1a89      	subs	r1, r1, r2
 8016e92:	9104      	str	r1, [sp, #16]
 8016e94:	9905      	ldr	r1, [sp, #20]
 8016e96:	eba8 0802 	sub.w	r8, r8, r2
 8016e9a:	1a8a      	subs	r2, r1, r2
 8016e9c:	9205      	str	r2, [sp, #20]
 8016e9e:	b303      	cbz	r3, 8016ee2 <_dtoa_r+0x6b2>
 8016ea0:	9a07      	ldr	r2, [sp, #28]
 8016ea2:	2a00      	cmp	r2, #0
 8016ea4:	f000 80a5 	beq.w	8016ff2 <_dtoa_r+0x7c2>
 8016ea8:	2c00      	cmp	r4, #0
 8016eaa:	dd13      	ble.n	8016ed4 <_dtoa_r+0x6a4>
 8016eac:	4639      	mov	r1, r7
 8016eae:	4622      	mov	r2, r4
 8016eb0:	4630      	mov	r0, r6
 8016eb2:	930d      	str	r3, [sp, #52]	; 0x34
 8016eb4:	f000 fd28 	bl	8017908 <__pow5mult>
 8016eb8:	462a      	mov	r2, r5
 8016eba:	4601      	mov	r1, r0
 8016ebc:	4607      	mov	r7, r0
 8016ebe:	4630      	mov	r0, r6
 8016ec0:	f000 fc78 	bl	80177b4 <__multiply>
 8016ec4:	4629      	mov	r1, r5
 8016ec6:	9009      	str	r0, [sp, #36]	; 0x24
 8016ec8:	4630      	mov	r0, r6
 8016eca:	f000 fb5d 	bl	8017588 <_Bfree>
 8016ece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016ed0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016ed2:	4615      	mov	r5, r2
 8016ed4:	1b1a      	subs	r2, r3, r4
 8016ed6:	d004      	beq.n	8016ee2 <_dtoa_r+0x6b2>
 8016ed8:	4629      	mov	r1, r5
 8016eda:	4630      	mov	r0, r6
 8016edc:	f000 fd14 	bl	8017908 <__pow5mult>
 8016ee0:	4605      	mov	r5, r0
 8016ee2:	2101      	movs	r1, #1
 8016ee4:	4630      	mov	r0, r6
 8016ee6:	f000 fc4f 	bl	8017788 <__i2b>
 8016eea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	4604      	mov	r4, r0
 8016ef0:	f340 8081 	ble.w	8016ff6 <_dtoa_r+0x7c6>
 8016ef4:	461a      	mov	r2, r3
 8016ef6:	4601      	mov	r1, r0
 8016ef8:	4630      	mov	r0, r6
 8016efa:	f000 fd05 	bl	8017908 <__pow5mult>
 8016efe:	9b06      	ldr	r3, [sp, #24]
 8016f00:	2b01      	cmp	r3, #1
 8016f02:	4604      	mov	r4, r0
 8016f04:	dd7a      	ble.n	8016ffc <_dtoa_r+0x7cc>
 8016f06:	2300      	movs	r3, #0
 8016f08:	9309      	str	r3, [sp, #36]	; 0x24
 8016f0a:	6922      	ldr	r2, [r4, #16]
 8016f0c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8016f10:	6910      	ldr	r0, [r2, #16]
 8016f12:	f000 fbeb 	bl	80176ec <__hi0bits>
 8016f16:	f1c0 0020 	rsb	r0, r0, #32
 8016f1a:	9b05      	ldr	r3, [sp, #20]
 8016f1c:	4418      	add	r0, r3
 8016f1e:	f010 001f 	ands.w	r0, r0, #31
 8016f22:	f000 8093 	beq.w	801704c <_dtoa_r+0x81c>
 8016f26:	f1c0 0220 	rsb	r2, r0, #32
 8016f2a:	2a04      	cmp	r2, #4
 8016f2c:	f340 8085 	ble.w	801703a <_dtoa_r+0x80a>
 8016f30:	9b04      	ldr	r3, [sp, #16]
 8016f32:	f1c0 001c 	rsb	r0, r0, #28
 8016f36:	4403      	add	r3, r0
 8016f38:	9304      	str	r3, [sp, #16]
 8016f3a:	9b05      	ldr	r3, [sp, #20]
 8016f3c:	4480      	add	r8, r0
 8016f3e:	4403      	add	r3, r0
 8016f40:	9305      	str	r3, [sp, #20]
 8016f42:	9b04      	ldr	r3, [sp, #16]
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	dd05      	ble.n	8016f54 <_dtoa_r+0x724>
 8016f48:	4629      	mov	r1, r5
 8016f4a:	461a      	mov	r2, r3
 8016f4c:	4630      	mov	r0, r6
 8016f4e:	f000 fd35 	bl	80179bc <__lshift>
 8016f52:	4605      	mov	r5, r0
 8016f54:	9b05      	ldr	r3, [sp, #20]
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	dd05      	ble.n	8016f66 <_dtoa_r+0x736>
 8016f5a:	4621      	mov	r1, r4
 8016f5c:	461a      	mov	r2, r3
 8016f5e:	4630      	mov	r0, r6
 8016f60:	f000 fd2c 	bl	80179bc <__lshift>
 8016f64:	4604      	mov	r4, r0
 8016f66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d071      	beq.n	8017050 <_dtoa_r+0x820>
 8016f6c:	4621      	mov	r1, r4
 8016f6e:	4628      	mov	r0, r5
 8016f70:	f000 fd90 	bl	8017a94 <__mcmp>
 8016f74:	2800      	cmp	r0, #0
 8016f76:	da6b      	bge.n	8017050 <_dtoa_r+0x820>
 8016f78:	2300      	movs	r3, #0
 8016f7a:	4629      	mov	r1, r5
 8016f7c:	220a      	movs	r2, #10
 8016f7e:	4630      	mov	r0, r6
 8016f80:	f000 fb24 	bl	80175cc <__multadd>
 8016f84:	9b07      	ldr	r3, [sp, #28]
 8016f86:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016f8a:	4605      	mov	r5, r0
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	f000 8197 	beq.w	80172c0 <_dtoa_r+0xa90>
 8016f92:	4639      	mov	r1, r7
 8016f94:	2300      	movs	r3, #0
 8016f96:	220a      	movs	r2, #10
 8016f98:	4630      	mov	r0, r6
 8016f9a:	f000 fb17 	bl	80175cc <__multadd>
 8016f9e:	f1ba 0f00 	cmp.w	sl, #0
 8016fa2:	4607      	mov	r7, r0
 8016fa4:	f300 8093 	bgt.w	80170ce <_dtoa_r+0x89e>
 8016fa8:	9b06      	ldr	r3, [sp, #24]
 8016faa:	2b02      	cmp	r3, #2
 8016fac:	dc57      	bgt.n	801705e <_dtoa_r+0x82e>
 8016fae:	e08e      	b.n	80170ce <_dtoa_r+0x89e>
 8016fb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016fb2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016fb6:	e751      	b.n	8016e5c <_dtoa_r+0x62c>
 8016fb8:	f109 34ff 	add.w	r4, r9, #4294967295
 8016fbc:	42a3      	cmp	r3, r4
 8016fbe:	bfbf      	itttt	lt
 8016fc0:	1ae2      	sublt	r2, r4, r3
 8016fc2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8016fc4:	189b      	addlt	r3, r3, r2
 8016fc6:	930a      	strlt	r3, [sp, #40]	; 0x28
 8016fc8:	bfae      	itee	ge
 8016fca:	1b1c      	subge	r4, r3, r4
 8016fcc:	4623      	movlt	r3, r4
 8016fce:	2400      	movlt	r4, #0
 8016fd0:	f1b9 0f00 	cmp.w	r9, #0
 8016fd4:	bfb5      	itete	lt
 8016fd6:	9a04      	ldrlt	r2, [sp, #16]
 8016fd8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8016fdc:	eba2 0809 	sublt.w	r8, r2, r9
 8016fe0:	464a      	movge	r2, r9
 8016fe2:	bfb8      	it	lt
 8016fe4:	2200      	movlt	r2, #0
 8016fe6:	e73c      	b.n	8016e62 <_dtoa_r+0x632>
 8016fe8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8016fec:	9f07      	ldr	r7, [sp, #28]
 8016fee:	461c      	mov	r4, r3
 8016ff0:	e744      	b.n	8016e7c <_dtoa_r+0x64c>
 8016ff2:	461a      	mov	r2, r3
 8016ff4:	e770      	b.n	8016ed8 <_dtoa_r+0x6a8>
 8016ff6:	9b06      	ldr	r3, [sp, #24]
 8016ff8:	2b01      	cmp	r3, #1
 8016ffa:	dc18      	bgt.n	801702e <_dtoa_r+0x7fe>
 8016ffc:	9b02      	ldr	r3, [sp, #8]
 8016ffe:	b9b3      	cbnz	r3, 801702e <_dtoa_r+0x7fe>
 8017000:	9b03      	ldr	r3, [sp, #12]
 8017002:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8017006:	b9a2      	cbnz	r2, 8017032 <_dtoa_r+0x802>
 8017008:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801700c:	0d12      	lsrs	r2, r2, #20
 801700e:	0512      	lsls	r2, r2, #20
 8017010:	b18a      	cbz	r2, 8017036 <_dtoa_r+0x806>
 8017012:	9b04      	ldr	r3, [sp, #16]
 8017014:	3301      	adds	r3, #1
 8017016:	9304      	str	r3, [sp, #16]
 8017018:	9b05      	ldr	r3, [sp, #20]
 801701a:	3301      	adds	r3, #1
 801701c:	9305      	str	r3, [sp, #20]
 801701e:	2301      	movs	r3, #1
 8017020:	9309      	str	r3, [sp, #36]	; 0x24
 8017022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017024:	2b00      	cmp	r3, #0
 8017026:	f47f af70 	bne.w	8016f0a <_dtoa_r+0x6da>
 801702a:	2001      	movs	r0, #1
 801702c:	e775      	b.n	8016f1a <_dtoa_r+0x6ea>
 801702e:	2300      	movs	r3, #0
 8017030:	e7f6      	b.n	8017020 <_dtoa_r+0x7f0>
 8017032:	9b02      	ldr	r3, [sp, #8]
 8017034:	e7f4      	b.n	8017020 <_dtoa_r+0x7f0>
 8017036:	9209      	str	r2, [sp, #36]	; 0x24
 8017038:	e7f3      	b.n	8017022 <_dtoa_r+0x7f2>
 801703a:	d082      	beq.n	8016f42 <_dtoa_r+0x712>
 801703c:	9b04      	ldr	r3, [sp, #16]
 801703e:	321c      	adds	r2, #28
 8017040:	4413      	add	r3, r2
 8017042:	9304      	str	r3, [sp, #16]
 8017044:	9b05      	ldr	r3, [sp, #20]
 8017046:	4490      	add	r8, r2
 8017048:	4413      	add	r3, r2
 801704a:	e779      	b.n	8016f40 <_dtoa_r+0x710>
 801704c:	4602      	mov	r2, r0
 801704e:	e7f5      	b.n	801703c <_dtoa_r+0x80c>
 8017050:	f1b9 0f00 	cmp.w	r9, #0
 8017054:	dc36      	bgt.n	80170c4 <_dtoa_r+0x894>
 8017056:	9b06      	ldr	r3, [sp, #24]
 8017058:	2b02      	cmp	r3, #2
 801705a:	dd33      	ble.n	80170c4 <_dtoa_r+0x894>
 801705c:	46ca      	mov	sl, r9
 801705e:	f1ba 0f00 	cmp.w	sl, #0
 8017062:	d10d      	bne.n	8017080 <_dtoa_r+0x850>
 8017064:	4621      	mov	r1, r4
 8017066:	4653      	mov	r3, sl
 8017068:	2205      	movs	r2, #5
 801706a:	4630      	mov	r0, r6
 801706c:	f000 faae 	bl	80175cc <__multadd>
 8017070:	4601      	mov	r1, r0
 8017072:	4604      	mov	r4, r0
 8017074:	4628      	mov	r0, r5
 8017076:	f000 fd0d 	bl	8017a94 <__mcmp>
 801707a:	2800      	cmp	r0, #0
 801707c:	f73f ade4 	bgt.w	8016c48 <_dtoa_r+0x418>
 8017080:	9b08      	ldr	r3, [sp, #32]
 8017082:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017086:	ea6f 0b03 	mvn.w	fp, r3
 801708a:	f04f 0900 	mov.w	r9, #0
 801708e:	4621      	mov	r1, r4
 8017090:	4630      	mov	r0, r6
 8017092:	f000 fa79 	bl	8017588 <_Bfree>
 8017096:	2f00      	cmp	r7, #0
 8017098:	f43f aea1 	beq.w	8016dde <_dtoa_r+0x5ae>
 801709c:	f1b9 0f00 	cmp.w	r9, #0
 80170a0:	d005      	beq.n	80170ae <_dtoa_r+0x87e>
 80170a2:	45b9      	cmp	r9, r7
 80170a4:	d003      	beq.n	80170ae <_dtoa_r+0x87e>
 80170a6:	4649      	mov	r1, r9
 80170a8:	4630      	mov	r0, r6
 80170aa:	f000 fa6d 	bl	8017588 <_Bfree>
 80170ae:	4639      	mov	r1, r7
 80170b0:	4630      	mov	r0, r6
 80170b2:	f000 fa69 	bl	8017588 <_Bfree>
 80170b6:	e692      	b.n	8016dde <_dtoa_r+0x5ae>
 80170b8:	2400      	movs	r4, #0
 80170ba:	4627      	mov	r7, r4
 80170bc:	e7e0      	b.n	8017080 <_dtoa_r+0x850>
 80170be:	4693      	mov	fp, r2
 80170c0:	4627      	mov	r7, r4
 80170c2:	e5c1      	b.n	8016c48 <_dtoa_r+0x418>
 80170c4:	9b07      	ldr	r3, [sp, #28]
 80170c6:	46ca      	mov	sl, r9
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	f000 8100 	beq.w	80172ce <_dtoa_r+0xa9e>
 80170ce:	f1b8 0f00 	cmp.w	r8, #0
 80170d2:	dd05      	ble.n	80170e0 <_dtoa_r+0x8b0>
 80170d4:	4639      	mov	r1, r7
 80170d6:	4642      	mov	r2, r8
 80170d8:	4630      	mov	r0, r6
 80170da:	f000 fc6f 	bl	80179bc <__lshift>
 80170de:	4607      	mov	r7, r0
 80170e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d05d      	beq.n	80171a2 <_dtoa_r+0x972>
 80170e6:	6879      	ldr	r1, [r7, #4]
 80170e8:	4630      	mov	r0, r6
 80170ea:	f000 fa0d 	bl	8017508 <_Balloc>
 80170ee:	4680      	mov	r8, r0
 80170f0:	b928      	cbnz	r0, 80170fe <_dtoa_r+0x8ce>
 80170f2:	4b82      	ldr	r3, [pc, #520]	; (80172fc <_dtoa_r+0xacc>)
 80170f4:	4602      	mov	r2, r0
 80170f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80170fa:	f7ff bbb1 	b.w	8016860 <_dtoa_r+0x30>
 80170fe:	693a      	ldr	r2, [r7, #16]
 8017100:	3202      	adds	r2, #2
 8017102:	0092      	lsls	r2, r2, #2
 8017104:	f107 010c 	add.w	r1, r7, #12
 8017108:	300c      	adds	r0, #12
 801710a:	f7ff faf4 	bl	80166f6 <memcpy>
 801710e:	2201      	movs	r2, #1
 8017110:	4641      	mov	r1, r8
 8017112:	4630      	mov	r0, r6
 8017114:	f000 fc52 	bl	80179bc <__lshift>
 8017118:	9b01      	ldr	r3, [sp, #4]
 801711a:	3301      	adds	r3, #1
 801711c:	9304      	str	r3, [sp, #16]
 801711e:	9b01      	ldr	r3, [sp, #4]
 8017120:	4453      	add	r3, sl
 8017122:	9308      	str	r3, [sp, #32]
 8017124:	9b02      	ldr	r3, [sp, #8]
 8017126:	f003 0301 	and.w	r3, r3, #1
 801712a:	46b9      	mov	r9, r7
 801712c:	9307      	str	r3, [sp, #28]
 801712e:	4607      	mov	r7, r0
 8017130:	9b04      	ldr	r3, [sp, #16]
 8017132:	4621      	mov	r1, r4
 8017134:	3b01      	subs	r3, #1
 8017136:	4628      	mov	r0, r5
 8017138:	9302      	str	r3, [sp, #8]
 801713a:	f7ff faf1 	bl	8016720 <quorem>
 801713e:	4603      	mov	r3, r0
 8017140:	3330      	adds	r3, #48	; 0x30
 8017142:	9005      	str	r0, [sp, #20]
 8017144:	4649      	mov	r1, r9
 8017146:	4628      	mov	r0, r5
 8017148:	9309      	str	r3, [sp, #36]	; 0x24
 801714a:	f000 fca3 	bl	8017a94 <__mcmp>
 801714e:	463a      	mov	r2, r7
 8017150:	4682      	mov	sl, r0
 8017152:	4621      	mov	r1, r4
 8017154:	4630      	mov	r0, r6
 8017156:	f000 fcb9 	bl	8017acc <__mdiff>
 801715a:	68c2      	ldr	r2, [r0, #12]
 801715c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801715e:	4680      	mov	r8, r0
 8017160:	bb0a      	cbnz	r2, 80171a6 <_dtoa_r+0x976>
 8017162:	4601      	mov	r1, r0
 8017164:	4628      	mov	r0, r5
 8017166:	f000 fc95 	bl	8017a94 <__mcmp>
 801716a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801716c:	4602      	mov	r2, r0
 801716e:	4641      	mov	r1, r8
 8017170:	4630      	mov	r0, r6
 8017172:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8017176:	f000 fa07 	bl	8017588 <_Bfree>
 801717a:	9b06      	ldr	r3, [sp, #24]
 801717c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801717e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8017182:	ea43 0102 	orr.w	r1, r3, r2
 8017186:	9b07      	ldr	r3, [sp, #28]
 8017188:	4319      	orrs	r1, r3
 801718a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801718c:	d10d      	bne.n	80171aa <_dtoa_r+0x97a>
 801718e:	2b39      	cmp	r3, #57	; 0x39
 8017190:	d029      	beq.n	80171e6 <_dtoa_r+0x9b6>
 8017192:	f1ba 0f00 	cmp.w	sl, #0
 8017196:	dd01      	ble.n	801719c <_dtoa_r+0x96c>
 8017198:	9b05      	ldr	r3, [sp, #20]
 801719a:	3331      	adds	r3, #49	; 0x31
 801719c:	9a02      	ldr	r2, [sp, #8]
 801719e:	7013      	strb	r3, [r2, #0]
 80171a0:	e775      	b.n	801708e <_dtoa_r+0x85e>
 80171a2:	4638      	mov	r0, r7
 80171a4:	e7b8      	b.n	8017118 <_dtoa_r+0x8e8>
 80171a6:	2201      	movs	r2, #1
 80171a8:	e7e1      	b.n	801716e <_dtoa_r+0x93e>
 80171aa:	f1ba 0f00 	cmp.w	sl, #0
 80171ae:	db06      	blt.n	80171be <_dtoa_r+0x98e>
 80171b0:	9906      	ldr	r1, [sp, #24]
 80171b2:	ea41 0a0a 	orr.w	sl, r1, sl
 80171b6:	9907      	ldr	r1, [sp, #28]
 80171b8:	ea5a 0a01 	orrs.w	sl, sl, r1
 80171bc:	d120      	bne.n	8017200 <_dtoa_r+0x9d0>
 80171be:	2a00      	cmp	r2, #0
 80171c0:	ddec      	ble.n	801719c <_dtoa_r+0x96c>
 80171c2:	4629      	mov	r1, r5
 80171c4:	2201      	movs	r2, #1
 80171c6:	4630      	mov	r0, r6
 80171c8:	9304      	str	r3, [sp, #16]
 80171ca:	f000 fbf7 	bl	80179bc <__lshift>
 80171ce:	4621      	mov	r1, r4
 80171d0:	4605      	mov	r5, r0
 80171d2:	f000 fc5f 	bl	8017a94 <__mcmp>
 80171d6:	2800      	cmp	r0, #0
 80171d8:	9b04      	ldr	r3, [sp, #16]
 80171da:	dc02      	bgt.n	80171e2 <_dtoa_r+0x9b2>
 80171dc:	d1de      	bne.n	801719c <_dtoa_r+0x96c>
 80171de:	07da      	lsls	r2, r3, #31
 80171e0:	d5dc      	bpl.n	801719c <_dtoa_r+0x96c>
 80171e2:	2b39      	cmp	r3, #57	; 0x39
 80171e4:	d1d8      	bne.n	8017198 <_dtoa_r+0x968>
 80171e6:	9a02      	ldr	r2, [sp, #8]
 80171e8:	2339      	movs	r3, #57	; 0x39
 80171ea:	7013      	strb	r3, [r2, #0]
 80171ec:	4643      	mov	r3, r8
 80171ee:	4698      	mov	r8, r3
 80171f0:	3b01      	subs	r3, #1
 80171f2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80171f6:	2a39      	cmp	r2, #57	; 0x39
 80171f8:	d051      	beq.n	801729e <_dtoa_r+0xa6e>
 80171fa:	3201      	adds	r2, #1
 80171fc:	701a      	strb	r2, [r3, #0]
 80171fe:	e746      	b.n	801708e <_dtoa_r+0x85e>
 8017200:	2a00      	cmp	r2, #0
 8017202:	dd03      	ble.n	801720c <_dtoa_r+0x9dc>
 8017204:	2b39      	cmp	r3, #57	; 0x39
 8017206:	d0ee      	beq.n	80171e6 <_dtoa_r+0x9b6>
 8017208:	3301      	adds	r3, #1
 801720a:	e7c7      	b.n	801719c <_dtoa_r+0x96c>
 801720c:	9a04      	ldr	r2, [sp, #16]
 801720e:	9908      	ldr	r1, [sp, #32]
 8017210:	f802 3c01 	strb.w	r3, [r2, #-1]
 8017214:	428a      	cmp	r2, r1
 8017216:	d02b      	beq.n	8017270 <_dtoa_r+0xa40>
 8017218:	4629      	mov	r1, r5
 801721a:	2300      	movs	r3, #0
 801721c:	220a      	movs	r2, #10
 801721e:	4630      	mov	r0, r6
 8017220:	f000 f9d4 	bl	80175cc <__multadd>
 8017224:	45b9      	cmp	r9, r7
 8017226:	4605      	mov	r5, r0
 8017228:	f04f 0300 	mov.w	r3, #0
 801722c:	f04f 020a 	mov.w	r2, #10
 8017230:	4649      	mov	r1, r9
 8017232:	4630      	mov	r0, r6
 8017234:	d107      	bne.n	8017246 <_dtoa_r+0xa16>
 8017236:	f000 f9c9 	bl	80175cc <__multadd>
 801723a:	4681      	mov	r9, r0
 801723c:	4607      	mov	r7, r0
 801723e:	9b04      	ldr	r3, [sp, #16]
 8017240:	3301      	adds	r3, #1
 8017242:	9304      	str	r3, [sp, #16]
 8017244:	e774      	b.n	8017130 <_dtoa_r+0x900>
 8017246:	f000 f9c1 	bl	80175cc <__multadd>
 801724a:	4639      	mov	r1, r7
 801724c:	4681      	mov	r9, r0
 801724e:	2300      	movs	r3, #0
 8017250:	220a      	movs	r2, #10
 8017252:	4630      	mov	r0, r6
 8017254:	f000 f9ba 	bl	80175cc <__multadd>
 8017258:	4607      	mov	r7, r0
 801725a:	e7f0      	b.n	801723e <_dtoa_r+0xa0e>
 801725c:	f1ba 0f00 	cmp.w	sl, #0
 8017260:	9a01      	ldr	r2, [sp, #4]
 8017262:	bfcc      	ite	gt
 8017264:	46d0      	movgt	r8, sl
 8017266:	f04f 0801 	movle.w	r8, #1
 801726a:	4490      	add	r8, r2
 801726c:	f04f 0900 	mov.w	r9, #0
 8017270:	4629      	mov	r1, r5
 8017272:	2201      	movs	r2, #1
 8017274:	4630      	mov	r0, r6
 8017276:	9302      	str	r3, [sp, #8]
 8017278:	f000 fba0 	bl	80179bc <__lshift>
 801727c:	4621      	mov	r1, r4
 801727e:	4605      	mov	r5, r0
 8017280:	f000 fc08 	bl	8017a94 <__mcmp>
 8017284:	2800      	cmp	r0, #0
 8017286:	dcb1      	bgt.n	80171ec <_dtoa_r+0x9bc>
 8017288:	d102      	bne.n	8017290 <_dtoa_r+0xa60>
 801728a:	9b02      	ldr	r3, [sp, #8]
 801728c:	07db      	lsls	r3, r3, #31
 801728e:	d4ad      	bmi.n	80171ec <_dtoa_r+0x9bc>
 8017290:	4643      	mov	r3, r8
 8017292:	4698      	mov	r8, r3
 8017294:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017298:	2a30      	cmp	r2, #48	; 0x30
 801729a:	d0fa      	beq.n	8017292 <_dtoa_r+0xa62>
 801729c:	e6f7      	b.n	801708e <_dtoa_r+0x85e>
 801729e:	9a01      	ldr	r2, [sp, #4]
 80172a0:	429a      	cmp	r2, r3
 80172a2:	d1a4      	bne.n	80171ee <_dtoa_r+0x9be>
 80172a4:	f10b 0b01 	add.w	fp, fp, #1
 80172a8:	2331      	movs	r3, #49	; 0x31
 80172aa:	e778      	b.n	801719e <_dtoa_r+0x96e>
 80172ac:	4b14      	ldr	r3, [pc, #80]	; (8017300 <_dtoa_r+0xad0>)
 80172ae:	f7ff bb2a 	b.w	8016906 <_dtoa_r+0xd6>
 80172b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	f47f ab05 	bne.w	80168c4 <_dtoa_r+0x94>
 80172ba:	4b12      	ldr	r3, [pc, #72]	; (8017304 <_dtoa_r+0xad4>)
 80172bc:	f7ff bb23 	b.w	8016906 <_dtoa_r+0xd6>
 80172c0:	f1ba 0f00 	cmp.w	sl, #0
 80172c4:	dc03      	bgt.n	80172ce <_dtoa_r+0xa9e>
 80172c6:	9b06      	ldr	r3, [sp, #24]
 80172c8:	2b02      	cmp	r3, #2
 80172ca:	f73f aec8 	bgt.w	801705e <_dtoa_r+0x82e>
 80172ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80172d2:	4621      	mov	r1, r4
 80172d4:	4628      	mov	r0, r5
 80172d6:	f7ff fa23 	bl	8016720 <quorem>
 80172da:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80172de:	f808 3b01 	strb.w	r3, [r8], #1
 80172e2:	9a01      	ldr	r2, [sp, #4]
 80172e4:	eba8 0202 	sub.w	r2, r8, r2
 80172e8:	4592      	cmp	sl, r2
 80172ea:	ddb7      	ble.n	801725c <_dtoa_r+0xa2c>
 80172ec:	4629      	mov	r1, r5
 80172ee:	2300      	movs	r3, #0
 80172f0:	220a      	movs	r2, #10
 80172f2:	4630      	mov	r0, r6
 80172f4:	f000 f96a 	bl	80175cc <__multadd>
 80172f8:	4605      	mov	r5, r0
 80172fa:	e7ea      	b.n	80172d2 <_dtoa_r+0xaa2>
 80172fc:	08019ed1 	.word	0x08019ed1
 8017300:	08019e2c 	.word	0x08019e2c
 8017304:	08019e55 	.word	0x08019e55

08017308 <_free_r>:
 8017308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801730a:	2900      	cmp	r1, #0
 801730c:	d044      	beq.n	8017398 <_free_r+0x90>
 801730e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017312:	9001      	str	r0, [sp, #4]
 8017314:	2b00      	cmp	r3, #0
 8017316:	f1a1 0404 	sub.w	r4, r1, #4
 801731a:	bfb8      	it	lt
 801731c:	18e4      	addlt	r4, r4, r3
 801731e:	f000 f8e7 	bl	80174f0 <__malloc_lock>
 8017322:	4a1e      	ldr	r2, [pc, #120]	; (801739c <_free_r+0x94>)
 8017324:	9801      	ldr	r0, [sp, #4]
 8017326:	6813      	ldr	r3, [r2, #0]
 8017328:	b933      	cbnz	r3, 8017338 <_free_r+0x30>
 801732a:	6063      	str	r3, [r4, #4]
 801732c:	6014      	str	r4, [r2, #0]
 801732e:	b003      	add	sp, #12
 8017330:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017334:	f000 b8e2 	b.w	80174fc <__malloc_unlock>
 8017338:	42a3      	cmp	r3, r4
 801733a:	d908      	bls.n	801734e <_free_r+0x46>
 801733c:	6825      	ldr	r5, [r4, #0]
 801733e:	1961      	adds	r1, r4, r5
 8017340:	428b      	cmp	r3, r1
 8017342:	bf01      	itttt	eq
 8017344:	6819      	ldreq	r1, [r3, #0]
 8017346:	685b      	ldreq	r3, [r3, #4]
 8017348:	1949      	addeq	r1, r1, r5
 801734a:	6021      	streq	r1, [r4, #0]
 801734c:	e7ed      	b.n	801732a <_free_r+0x22>
 801734e:	461a      	mov	r2, r3
 8017350:	685b      	ldr	r3, [r3, #4]
 8017352:	b10b      	cbz	r3, 8017358 <_free_r+0x50>
 8017354:	42a3      	cmp	r3, r4
 8017356:	d9fa      	bls.n	801734e <_free_r+0x46>
 8017358:	6811      	ldr	r1, [r2, #0]
 801735a:	1855      	adds	r5, r2, r1
 801735c:	42a5      	cmp	r5, r4
 801735e:	d10b      	bne.n	8017378 <_free_r+0x70>
 8017360:	6824      	ldr	r4, [r4, #0]
 8017362:	4421      	add	r1, r4
 8017364:	1854      	adds	r4, r2, r1
 8017366:	42a3      	cmp	r3, r4
 8017368:	6011      	str	r1, [r2, #0]
 801736a:	d1e0      	bne.n	801732e <_free_r+0x26>
 801736c:	681c      	ldr	r4, [r3, #0]
 801736e:	685b      	ldr	r3, [r3, #4]
 8017370:	6053      	str	r3, [r2, #4]
 8017372:	440c      	add	r4, r1
 8017374:	6014      	str	r4, [r2, #0]
 8017376:	e7da      	b.n	801732e <_free_r+0x26>
 8017378:	d902      	bls.n	8017380 <_free_r+0x78>
 801737a:	230c      	movs	r3, #12
 801737c:	6003      	str	r3, [r0, #0]
 801737e:	e7d6      	b.n	801732e <_free_r+0x26>
 8017380:	6825      	ldr	r5, [r4, #0]
 8017382:	1961      	adds	r1, r4, r5
 8017384:	428b      	cmp	r3, r1
 8017386:	bf04      	itt	eq
 8017388:	6819      	ldreq	r1, [r3, #0]
 801738a:	685b      	ldreq	r3, [r3, #4]
 801738c:	6063      	str	r3, [r4, #4]
 801738e:	bf04      	itt	eq
 8017390:	1949      	addeq	r1, r1, r5
 8017392:	6021      	streq	r1, [r4, #0]
 8017394:	6054      	str	r4, [r2, #4]
 8017396:	e7ca      	b.n	801732e <_free_r+0x26>
 8017398:	b003      	add	sp, #12
 801739a:	bd30      	pop	{r4, r5, pc}
 801739c:	24002a90 	.word	0x24002a90

080173a0 <malloc>:
 80173a0:	4b02      	ldr	r3, [pc, #8]	; (80173ac <malloc+0xc>)
 80173a2:	4601      	mov	r1, r0
 80173a4:	6818      	ldr	r0, [r3, #0]
 80173a6:	f000 b823 	b.w	80173f0 <_malloc_r>
 80173aa:	bf00      	nop
 80173ac:	24000158 	.word	0x24000158

080173b0 <sbrk_aligned>:
 80173b0:	b570      	push	{r4, r5, r6, lr}
 80173b2:	4e0e      	ldr	r6, [pc, #56]	; (80173ec <sbrk_aligned+0x3c>)
 80173b4:	460c      	mov	r4, r1
 80173b6:	6831      	ldr	r1, [r6, #0]
 80173b8:	4605      	mov	r5, r0
 80173ba:	b911      	cbnz	r1, 80173c2 <sbrk_aligned+0x12>
 80173bc:	f001 fdd6 	bl	8018f6c <_sbrk_r>
 80173c0:	6030      	str	r0, [r6, #0]
 80173c2:	4621      	mov	r1, r4
 80173c4:	4628      	mov	r0, r5
 80173c6:	f001 fdd1 	bl	8018f6c <_sbrk_r>
 80173ca:	1c43      	adds	r3, r0, #1
 80173cc:	d00a      	beq.n	80173e4 <sbrk_aligned+0x34>
 80173ce:	1cc4      	adds	r4, r0, #3
 80173d0:	f024 0403 	bic.w	r4, r4, #3
 80173d4:	42a0      	cmp	r0, r4
 80173d6:	d007      	beq.n	80173e8 <sbrk_aligned+0x38>
 80173d8:	1a21      	subs	r1, r4, r0
 80173da:	4628      	mov	r0, r5
 80173dc:	f001 fdc6 	bl	8018f6c <_sbrk_r>
 80173e0:	3001      	adds	r0, #1
 80173e2:	d101      	bne.n	80173e8 <sbrk_aligned+0x38>
 80173e4:	f04f 34ff 	mov.w	r4, #4294967295
 80173e8:	4620      	mov	r0, r4
 80173ea:	bd70      	pop	{r4, r5, r6, pc}
 80173ec:	24002a94 	.word	0x24002a94

080173f0 <_malloc_r>:
 80173f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80173f4:	1ccd      	adds	r5, r1, #3
 80173f6:	f025 0503 	bic.w	r5, r5, #3
 80173fa:	3508      	adds	r5, #8
 80173fc:	2d0c      	cmp	r5, #12
 80173fe:	bf38      	it	cc
 8017400:	250c      	movcc	r5, #12
 8017402:	2d00      	cmp	r5, #0
 8017404:	4607      	mov	r7, r0
 8017406:	db01      	blt.n	801740c <_malloc_r+0x1c>
 8017408:	42a9      	cmp	r1, r5
 801740a:	d905      	bls.n	8017418 <_malloc_r+0x28>
 801740c:	230c      	movs	r3, #12
 801740e:	603b      	str	r3, [r7, #0]
 8017410:	2600      	movs	r6, #0
 8017412:	4630      	mov	r0, r6
 8017414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017418:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80174ec <_malloc_r+0xfc>
 801741c:	f000 f868 	bl	80174f0 <__malloc_lock>
 8017420:	f8d8 3000 	ldr.w	r3, [r8]
 8017424:	461c      	mov	r4, r3
 8017426:	bb5c      	cbnz	r4, 8017480 <_malloc_r+0x90>
 8017428:	4629      	mov	r1, r5
 801742a:	4638      	mov	r0, r7
 801742c:	f7ff ffc0 	bl	80173b0 <sbrk_aligned>
 8017430:	1c43      	adds	r3, r0, #1
 8017432:	4604      	mov	r4, r0
 8017434:	d155      	bne.n	80174e2 <_malloc_r+0xf2>
 8017436:	f8d8 4000 	ldr.w	r4, [r8]
 801743a:	4626      	mov	r6, r4
 801743c:	2e00      	cmp	r6, #0
 801743e:	d145      	bne.n	80174cc <_malloc_r+0xdc>
 8017440:	2c00      	cmp	r4, #0
 8017442:	d048      	beq.n	80174d6 <_malloc_r+0xe6>
 8017444:	6823      	ldr	r3, [r4, #0]
 8017446:	4631      	mov	r1, r6
 8017448:	4638      	mov	r0, r7
 801744a:	eb04 0903 	add.w	r9, r4, r3
 801744e:	f001 fd8d 	bl	8018f6c <_sbrk_r>
 8017452:	4581      	cmp	r9, r0
 8017454:	d13f      	bne.n	80174d6 <_malloc_r+0xe6>
 8017456:	6821      	ldr	r1, [r4, #0]
 8017458:	1a6d      	subs	r5, r5, r1
 801745a:	4629      	mov	r1, r5
 801745c:	4638      	mov	r0, r7
 801745e:	f7ff ffa7 	bl	80173b0 <sbrk_aligned>
 8017462:	3001      	adds	r0, #1
 8017464:	d037      	beq.n	80174d6 <_malloc_r+0xe6>
 8017466:	6823      	ldr	r3, [r4, #0]
 8017468:	442b      	add	r3, r5
 801746a:	6023      	str	r3, [r4, #0]
 801746c:	f8d8 3000 	ldr.w	r3, [r8]
 8017470:	2b00      	cmp	r3, #0
 8017472:	d038      	beq.n	80174e6 <_malloc_r+0xf6>
 8017474:	685a      	ldr	r2, [r3, #4]
 8017476:	42a2      	cmp	r2, r4
 8017478:	d12b      	bne.n	80174d2 <_malloc_r+0xe2>
 801747a:	2200      	movs	r2, #0
 801747c:	605a      	str	r2, [r3, #4]
 801747e:	e00f      	b.n	80174a0 <_malloc_r+0xb0>
 8017480:	6822      	ldr	r2, [r4, #0]
 8017482:	1b52      	subs	r2, r2, r5
 8017484:	d41f      	bmi.n	80174c6 <_malloc_r+0xd6>
 8017486:	2a0b      	cmp	r2, #11
 8017488:	d917      	bls.n	80174ba <_malloc_r+0xca>
 801748a:	1961      	adds	r1, r4, r5
 801748c:	42a3      	cmp	r3, r4
 801748e:	6025      	str	r5, [r4, #0]
 8017490:	bf18      	it	ne
 8017492:	6059      	strne	r1, [r3, #4]
 8017494:	6863      	ldr	r3, [r4, #4]
 8017496:	bf08      	it	eq
 8017498:	f8c8 1000 	streq.w	r1, [r8]
 801749c:	5162      	str	r2, [r4, r5]
 801749e:	604b      	str	r3, [r1, #4]
 80174a0:	4638      	mov	r0, r7
 80174a2:	f104 060b 	add.w	r6, r4, #11
 80174a6:	f000 f829 	bl	80174fc <__malloc_unlock>
 80174aa:	f026 0607 	bic.w	r6, r6, #7
 80174ae:	1d23      	adds	r3, r4, #4
 80174b0:	1af2      	subs	r2, r6, r3
 80174b2:	d0ae      	beq.n	8017412 <_malloc_r+0x22>
 80174b4:	1b9b      	subs	r3, r3, r6
 80174b6:	50a3      	str	r3, [r4, r2]
 80174b8:	e7ab      	b.n	8017412 <_malloc_r+0x22>
 80174ba:	42a3      	cmp	r3, r4
 80174bc:	6862      	ldr	r2, [r4, #4]
 80174be:	d1dd      	bne.n	801747c <_malloc_r+0x8c>
 80174c0:	f8c8 2000 	str.w	r2, [r8]
 80174c4:	e7ec      	b.n	80174a0 <_malloc_r+0xb0>
 80174c6:	4623      	mov	r3, r4
 80174c8:	6864      	ldr	r4, [r4, #4]
 80174ca:	e7ac      	b.n	8017426 <_malloc_r+0x36>
 80174cc:	4634      	mov	r4, r6
 80174ce:	6876      	ldr	r6, [r6, #4]
 80174d0:	e7b4      	b.n	801743c <_malloc_r+0x4c>
 80174d2:	4613      	mov	r3, r2
 80174d4:	e7cc      	b.n	8017470 <_malloc_r+0x80>
 80174d6:	230c      	movs	r3, #12
 80174d8:	603b      	str	r3, [r7, #0]
 80174da:	4638      	mov	r0, r7
 80174dc:	f000 f80e 	bl	80174fc <__malloc_unlock>
 80174e0:	e797      	b.n	8017412 <_malloc_r+0x22>
 80174e2:	6025      	str	r5, [r4, #0]
 80174e4:	e7dc      	b.n	80174a0 <_malloc_r+0xb0>
 80174e6:	605b      	str	r3, [r3, #4]
 80174e8:	deff      	udf	#255	; 0xff
 80174ea:	bf00      	nop
 80174ec:	24002a90 	.word	0x24002a90

080174f0 <__malloc_lock>:
 80174f0:	4801      	ldr	r0, [pc, #4]	; (80174f8 <__malloc_lock+0x8>)
 80174f2:	f7ff b8fe 	b.w	80166f2 <__retarget_lock_acquire_recursive>
 80174f6:	bf00      	nop
 80174f8:	24002a8c 	.word	0x24002a8c

080174fc <__malloc_unlock>:
 80174fc:	4801      	ldr	r0, [pc, #4]	; (8017504 <__malloc_unlock+0x8>)
 80174fe:	f7ff b8f9 	b.w	80166f4 <__retarget_lock_release_recursive>
 8017502:	bf00      	nop
 8017504:	24002a8c 	.word	0x24002a8c

08017508 <_Balloc>:
 8017508:	b570      	push	{r4, r5, r6, lr}
 801750a:	69c6      	ldr	r6, [r0, #28]
 801750c:	4604      	mov	r4, r0
 801750e:	460d      	mov	r5, r1
 8017510:	b976      	cbnz	r6, 8017530 <_Balloc+0x28>
 8017512:	2010      	movs	r0, #16
 8017514:	f7ff ff44 	bl	80173a0 <malloc>
 8017518:	4602      	mov	r2, r0
 801751a:	61e0      	str	r0, [r4, #28]
 801751c:	b920      	cbnz	r0, 8017528 <_Balloc+0x20>
 801751e:	4b18      	ldr	r3, [pc, #96]	; (8017580 <_Balloc+0x78>)
 8017520:	4818      	ldr	r0, [pc, #96]	; (8017584 <_Balloc+0x7c>)
 8017522:	216b      	movs	r1, #107	; 0x6b
 8017524:	f001 fd3c 	bl	8018fa0 <__assert_func>
 8017528:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801752c:	6006      	str	r6, [r0, #0]
 801752e:	60c6      	str	r6, [r0, #12]
 8017530:	69e6      	ldr	r6, [r4, #28]
 8017532:	68f3      	ldr	r3, [r6, #12]
 8017534:	b183      	cbz	r3, 8017558 <_Balloc+0x50>
 8017536:	69e3      	ldr	r3, [r4, #28]
 8017538:	68db      	ldr	r3, [r3, #12]
 801753a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801753e:	b9b8      	cbnz	r0, 8017570 <_Balloc+0x68>
 8017540:	2101      	movs	r1, #1
 8017542:	fa01 f605 	lsl.w	r6, r1, r5
 8017546:	1d72      	adds	r2, r6, #5
 8017548:	0092      	lsls	r2, r2, #2
 801754a:	4620      	mov	r0, r4
 801754c:	f001 fd46 	bl	8018fdc <_calloc_r>
 8017550:	b160      	cbz	r0, 801756c <_Balloc+0x64>
 8017552:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017556:	e00e      	b.n	8017576 <_Balloc+0x6e>
 8017558:	2221      	movs	r2, #33	; 0x21
 801755a:	2104      	movs	r1, #4
 801755c:	4620      	mov	r0, r4
 801755e:	f001 fd3d 	bl	8018fdc <_calloc_r>
 8017562:	69e3      	ldr	r3, [r4, #28]
 8017564:	60f0      	str	r0, [r6, #12]
 8017566:	68db      	ldr	r3, [r3, #12]
 8017568:	2b00      	cmp	r3, #0
 801756a:	d1e4      	bne.n	8017536 <_Balloc+0x2e>
 801756c:	2000      	movs	r0, #0
 801756e:	bd70      	pop	{r4, r5, r6, pc}
 8017570:	6802      	ldr	r2, [r0, #0]
 8017572:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017576:	2300      	movs	r3, #0
 8017578:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801757c:	e7f7      	b.n	801756e <_Balloc+0x66>
 801757e:	bf00      	nop
 8017580:	08019e62 	.word	0x08019e62
 8017584:	08019ee2 	.word	0x08019ee2

08017588 <_Bfree>:
 8017588:	b570      	push	{r4, r5, r6, lr}
 801758a:	69c6      	ldr	r6, [r0, #28]
 801758c:	4605      	mov	r5, r0
 801758e:	460c      	mov	r4, r1
 8017590:	b976      	cbnz	r6, 80175b0 <_Bfree+0x28>
 8017592:	2010      	movs	r0, #16
 8017594:	f7ff ff04 	bl	80173a0 <malloc>
 8017598:	4602      	mov	r2, r0
 801759a:	61e8      	str	r0, [r5, #28]
 801759c:	b920      	cbnz	r0, 80175a8 <_Bfree+0x20>
 801759e:	4b09      	ldr	r3, [pc, #36]	; (80175c4 <_Bfree+0x3c>)
 80175a0:	4809      	ldr	r0, [pc, #36]	; (80175c8 <_Bfree+0x40>)
 80175a2:	218f      	movs	r1, #143	; 0x8f
 80175a4:	f001 fcfc 	bl	8018fa0 <__assert_func>
 80175a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80175ac:	6006      	str	r6, [r0, #0]
 80175ae:	60c6      	str	r6, [r0, #12]
 80175b0:	b13c      	cbz	r4, 80175c2 <_Bfree+0x3a>
 80175b2:	69eb      	ldr	r3, [r5, #28]
 80175b4:	6862      	ldr	r2, [r4, #4]
 80175b6:	68db      	ldr	r3, [r3, #12]
 80175b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80175bc:	6021      	str	r1, [r4, #0]
 80175be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80175c2:	bd70      	pop	{r4, r5, r6, pc}
 80175c4:	08019e62 	.word	0x08019e62
 80175c8:	08019ee2 	.word	0x08019ee2

080175cc <__multadd>:
 80175cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175d0:	690d      	ldr	r5, [r1, #16]
 80175d2:	4607      	mov	r7, r0
 80175d4:	460c      	mov	r4, r1
 80175d6:	461e      	mov	r6, r3
 80175d8:	f101 0c14 	add.w	ip, r1, #20
 80175dc:	2000      	movs	r0, #0
 80175de:	f8dc 3000 	ldr.w	r3, [ip]
 80175e2:	b299      	uxth	r1, r3
 80175e4:	fb02 6101 	mla	r1, r2, r1, r6
 80175e8:	0c1e      	lsrs	r6, r3, #16
 80175ea:	0c0b      	lsrs	r3, r1, #16
 80175ec:	fb02 3306 	mla	r3, r2, r6, r3
 80175f0:	b289      	uxth	r1, r1
 80175f2:	3001      	adds	r0, #1
 80175f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80175f8:	4285      	cmp	r5, r0
 80175fa:	f84c 1b04 	str.w	r1, [ip], #4
 80175fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8017602:	dcec      	bgt.n	80175de <__multadd+0x12>
 8017604:	b30e      	cbz	r6, 801764a <__multadd+0x7e>
 8017606:	68a3      	ldr	r3, [r4, #8]
 8017608:	42ab      	cmp	r3, r5
 801760a:	dc19      	bgt.n	8017640 <__multadd+0x74>
 801760c:	6861      	ldr	r1, [r4, #4]
 801760e:	4638      	mov	r0, r7
 8017610:	3101      	adds	r1, #1
 8017612:	f7ff ff79 	bl	8017508 <_Balloc>
 8017616:	4680      	mov	r8, r0
 8017618:	b928      	cbnz	r0, 8017626 <__multadd+0x5a>
 801761a:	4602      	mov	r2, r0
 801761c:	4b0c      	ldr	r3, [pc, #48]	; (8017650 <__multadd+0x84>)
 801761e:	480d      	ldr	r0, [pc, #52]	; (8017654 <__multadd+0x88>)
 8017620:	21ba      	movs	r1, #186	; 0xba
 8017622:	f001 fcbd 	bl	8018fa0 <__assert_func>
 8017626:	6922      	ldr	r2, [r4, #16]
 8017628:	3202      	adds	r2, #2
 801762a:	f104 010c 	add.w	r1, r4, #12
 801762e:	0092      	lsls	r2, r2, #2
 8017630:	300c      	adds	r0, #12
 8017632:	f7ff f860 	bl	80166f6 <memcpy>
 8017636:	4621      	mov	r1, r4
 8017638:	4638      	mov	r0, r7
 801763a:	f7ff ffa5 	bl	8017588 <_Bfree>
 801763e:	4644      	mov	r4, r8
 8017640:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017644:	3501      	adds	r5, #1
 8017646:	615e      	str	r6, [r3, #20]
 8017648:	6125      	str	r5, [r4, #16]
 801764a:	4620      	mov	r0, r4
 801764c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017650:	08019ed1 	.word	0x08019ed1
 8017654:	08019ee2 	.word	0x08019ee2

08017658 <__s2b>:
 8017658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801765c:	460c      	mov	r4, r1
 801765e:	4615      	mov	r5, r2
 8017660:	461f      	mov	r7, r3
 8017662:	2209      	movs	r2, #9
 8017664:	3308      	adds	r3, #8
 8017666:	4606      	mov	r6, r0
 8017668:	fb93 f3f2 	sdiv	r3, r3, r2
 801766c:	2100      	movs	r1, #0
 801766e:	2201      	movs	r2, #1
 8017670:	429a      	cmp	r2, r3
 8017672:	db09      	blt.n	8017688 <__s2b+0x30>
 8017674:	4630      	mov	r0, r6
 8017676:	f7ff ff47 	bl	8017508 <_Balloc>
 801767a:	b940      	cbnz	r0, 801768e <__s2b+0x36>
 801767c:	4602      	mov	r2, r0
 801767e:	4b19      	ldr	r3, [pc, #100]	; (80176e4 <__s2b+0x8c>)
 8017680:	4819      	ldr	r0, [pc, #100]	; (80176e8 <__s2b+0x90>)
 8017682:	21d3      	movs	r1, #211	; 0xd3
 8017684:	f001 fc8c 	bl	8018fa0 <__assert_func>
 8017688:	0052      	lsls	r2, r2, #1
 801768a:	3101      	adds	r1, #1
 801768c:	e7f0      	b.n	8017670 <__s2b+0x18>
 801768e:	9b08      	ldr	r3, [sp, #32]
 8017690:	6143      	str	r3, [r0, #20]
 8017692:	2d09      	cmp	r5, #9
 8017694:	f04f 0301 	mov.w	r3, #1
 8017698:	6103      	str	r3, [r0, #16]
 801769a:	dd16      	ble.n	80176ca <__s2b+0x72>
 801769c:	f104 0909 	add.w	r9, r4, #9
 80176a0:	46c8      	mov	r8, r9
 80176a2:	442c      	add	r4, r5
 80176a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80176a8:	4601      	mov	r1, r0
 80176aa:	3b30      	subs	r3, #48	; 0x30
 80176ac:	220a      	movs	r2, #10
 80176ae:	4630      	mov	r0, r6
 80176b0:	f7ff ff8c 	bl	80175cc <__multadd>
 80176b4:	45a0      	cmp	r8, r4
 80176b6:	d1f5      	bne.n	80176a4 <__s2b+0x4c>
 80176b8:	f1a5 0408 	sub.w	r4, r5, #8
 80176bc:	444c      	add	r4, r9
 80176be:	1b2d      	subs	r5, r5, r4
 80176c0:	1963      	adds	r3, r4, r5
 80176c2:	42bb      	cmp	r3, r7
 80176c4:	db04      	blt.n	80176d0 <__s2b+0x78>
 80176c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80176ca:	340a      	adds	r4, #10
 80176cc:	2509      	movs	r5, #9
 80176ce:	e7f6      	b.n	80176be <__s2b+0x66>
 80176d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80176d4:	4601      	mov	r1, r0
 80176d6:	3b30      	subs	r3, #48	; 0x30
 80176d8:	220a      	movs	r2, #10
 80176da:	4630      	mov	r0, r6
 80176dc:	f7ff ff76 	bl	80175cc <__multadd>
 80176e0:	e7ee      	b.n	80176c0 <__s2b+0x68>
 80176e2:	bf00      	nop
 80176e4:	08019ed1 	.word	0x08019ed1
 80176e8:	08019ee2 	.word	0x08019ee2

080176ec <__hi0bits>:
 80176ec:	0c03      	lsrs	r3, r0, #16
 80176ee:	041b      	lsls	r3, r3, #16
 80176f0:	b9d3      	cbnz	r3, 8017728 <__hi0bits+0x3c>
 80176f2:	0400      	lsls	r0, r0, #16
 80176f4:	2310      	movs	r3, #16
 80176f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80176fa:	bf04      	itt	eq
 80176fc:	0200      	lsleq	r0, r0, #8
 80176fe:	3308      	addeq	r3, #8
 8017700:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8017704:	bf04      	itt	eq
 8017706:	0100      	lsleq	r0, r0, #4
 8017708:	3304      	addeq	r3, #4
 801770a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801770e:	bf04      	itt	eq
 8017710:	0080      	lsleq	r0, r0, #2
 8017712:	3302      	addeq	r3, #2
 8017714:	2800      	cmp	r0, #0
 8017716:	db05      	blt.n	8017724 <__hi0bits+0x38>
 8017718:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801771c:	f103 0301 	add.w	r3, r3, #1
 8017720:	bf08      	it	eq
 8017722:	2320      	moveq	r3, #32
 8017724:	4618      	mov	r0, r3
 8017726:	4770      	bx	lr
 8017728:	2300      	movs	r3, #0
 801772a:	e7e4      	b.n	80176f6 <__hi0bits+0xa>

0801772c <__lo0bits>:
 801772c:	6803      	ldr	r3, [r0, #0]
 801772e:	f013 0207 	ands.w	r2, r3, #7
 8017732:	d00c      	beq.n	801774e <__lo0bits+0x22>
 8017734:	07d9      	lsls	r1, r3, #31
 8017736:	d422      	bmi.n	801777e <__lo0bits+0x52>
 8017738:	079a      	lsls	r2, r3, #30
 801773a:	bf49      	itett	mi
 801773c:	085b      	lsrmi	r3, r3, #1
 801773e:	089b      	lsrpl	r3, r3, #2
 8017740:	6003      	strmi	r3, [r0, #0]
 8017742:	2201      	movmi	r2, #1
 8017744:	bf5c      	itt	pl
 8017746:	6003      	strpl	r3, [r0, #0]
 8017748:	2202      	movpl	r2, #2
 801774a:	4610      	mov	r0, r2
 801774c:	4770      	bx	lr
 801774e:	b299      	uxth	r1, r3
 8017750:	b909      	cbnz	r1, 8017756 <__lo0bits+0x2a>
 8017752:	0c1b      	lsrs	r3, r3, #16
 8017754:	2210      	movs	r2, #16
 8017756:	b2d9      	uxtb	r1, r3
 8017758:	b909      	cbnz	r1, 801775e <__lo0bits+0x32>
 801775a:	3208      	adds	r2, #8
 801775c:	0a1b      	lsrs	r3, r3, #8
 801775e:	0719      	lsls	r1, r3, #28
 8017760:	bf04      	itt	eq
 8017762:	091b      	lsreq	r3, r3, #4
 8017764:	3204      	addeq	r2, #4
 8017766:	0799      	lsls	r1, r3, #30
 8017768:	bf04      	itt	eq
 801776a:	089b      	lsreq	r3, r3, #2
 801776c:	3202      	addeq	r2, #2
 801776e:	07d9      	lsls	r1, r3, #31
 8017770:	d403      	bmi.n	801777a <__lo0bits+0x4e>
 8017772:	085b      	lsrs	r3, r3, #1
 8017774:	f102 0201 	add.w	r2, r2, #1
 8017778:	d003      	beq.n	8017782 <__lo0bits+0x56>
 801777a:	6003      	str	r3, [r0, #0]
 801777c:	e7e5      	b.n	801774a <__lo0bits+0x1e>
 801777e:	2200      	movs	r2, #0
 8017780:	e7e3      	b.n	801774a <__lo0bits+0x1e>
 8017782:	2220      	movs	r2, #32
 8017784:	e7e1      	b.n	801774a <__lo0bits+0x1e>
	...

08017788 <__i2b>:
 8017788:	b510      	push	{r4, lr}
 801778a:	460c      	mov	r4, r1
 801778c:	2101      	movs	r1, #1
 801778e:	f7ff febb 	bl	8017508 <_Balloc>
 8017792:	4602      	mov	r2, r0
 8017794:	b928      	cbnz	r0, 80177a2 <__i2b+0x1a>
 8017796:	4b05      	ldr	r3, [pc, #20]	; (80177ac <__i2b+0x24>)
 8017798:	4805      	ldr	r0, [pc, #20]	; (80177b0 <__i2b+0x28>)
 801779a:	f240 1145 	movw	r1, #325	; 0x145
 801779e:	f001 fbff 	bl	8018fa0 <__assert_func>
 80177a2:	2301      	movs	r3, #1
 80177a4:	6144      	str	r4, [r0, #20]
 80177a6:	6103      	str	r3, [r0, #16]
 80177a8:	bd10      	pop	{r4, pc}
 80177aa:	bf00      	nop
 80177ac:	08019ed1 	.word	0x08019ed1
 80177b0:	08019ee2 	.word	0x08019ee2

080177b4 <__multiply>:
 80177b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177b8:	4691      	mov	r9, r2
 80177ba:	690a      	ldr	r2, [r1, #16]
 80177bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80177c0:	429a      	cmp	r2, r3
 80177c2:	bfb8      	it	lt
 80177c4:	460b      	movlt	r3, r1
 80177c6:	460c      	mov	r4, r1
 80177c8:	bfbc      	itt	lt
 80177ca:	464c      	movlt	r4, r9
 80177cc:	4699      	movlt	r9, r3
 80177ce:	6927      	ldr	r7, [r4, #16]
 80177d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80177d4:	68a3      	ldr	r3, [r4, #8]
 80177d6:	6861      	ldr	r1, [r4, #4]
 80177d8:	eb07 060a 	add.w	r6, r7, sl
 80177dc:	42b3      	cmp	r3, r6
 80177de:	b085      	sub	sp, #20
 80177e0:	bfb8      	it	lt
 80177e2:	3101      	addlt	r1, #1
 80177e4:	f7ff fe90 	bl	8017508 <_Balloc>
 80177e8:	b930      	cbnz	r0, 80177f8 <__multiply+0x44>
 80177ea:	4602      	mov	r2, r0
 80177ec:	4b44      	ldr	r3, [pc, #272]	; (8017900 <__multiply+0x14c>)
 80177ee:	4845      	ldr	r0, [pc, #276]	; (8017904 <__multiply+0x150>)
 80177f0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80177f4:	f001 fbd4 	bl	8018fa0 <__assert_func>
 80177f8:	f100 0514 	add.w	r5, r0, #20
 80177fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017800:	462b      	mov	r3, r5
 8017802:	2200      	movs	r2, #0
 8017804:	4543      	cmp	r3, r8
 8017806:	d321      	bcc.n	801784c <__multiply+0x98>
 8017808:	f104 0314 	add.w	r3, r4, #20
 801780c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8017810:	f109 0314 	add.w	r3, r9, #20
 8017814:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8017818:	9202      	str	r2, [sp, #8]
 801781a:	1b3a      	subs	r2, r7, r4
 801781c:	3a15      	subs	r2, #21
 801781e:	f022 0203 	bic.w	r2, r2, #3
 8017822:	3204      	adds	r2, #4
 8017824:	f104 0115 	add.w	r1, r4, #21
 8017828:	428f      	cmp	r7, r1
 801782a:	bf38      	it	cc
 801782c:	2204      	movcc	r2, #4
 801782e:	9201      	str	r2, [sp, #4]
 8017830:	9a02      	ldr	r2, [sp, #8]
 8017832:	9303      	str	r3, [sp, #12]
 8017834:	429a      	cmp	r2, r3
 8017836:	d80c      	bhi.n	8017852 <__multiply+0x9e>
 8017838:	2e00      	cmp	r6, #0
 801783a:	dd03      	ble.n	8017844 <__multiply+0x90>
 801783c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017840:	2b00      	cmp	r3, #0
 8017842:	d05b      	beq.n	80178fc <__multiply+0x148>
 8017844:	6106      	str	r6, [r0, #16]
 8017846:	b005      	add	sp, #20
 8017848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801784c:	f843 2b04 	str.w	r2, [r3], #4
 8017850:	e7d8      	b.n	8017804 <__multiply+0x50>
 8017852:	f8b3 a000 	ldrh.w	sl, [r3]
 8017856:	f1ba 0f00 	cmp.w	sl, #0
 801785a:	d024      	beq.n	80178a6 <__multiply+0xf2>
 801785c:	f104 0e14 	add.w	lr, r4, #20
 8017860:	46a9      	mov	r9, r5
 8017862:	f04f 0c00 	mov.w	ip, #0
 8017866:	f85e 2b04 	ldr.w	r2, [lr], #4
 801786a:	f8d9 1000 	ldr.w	r1, [r9]
 801786e:	fa1f fb82 	uxth.w	fp, r2
 8017872:	b289      	uxth	r1, r1
 8017874:	fb0a 110b 	mla	r1, sl, fp, r1
 8017878:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801787c:	f8d9 2000 	ldr.w	r2, [r9]
 8017880:	4461      	add	r1, ip
 8017882:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017886:	fb0a c20b 	mla	r2, sl, fp, ip
 801788a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801788e:	b289      	uxth	r1, r1
 8017890:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017894:	4577      	cmp	r7, lr
 8017896:	f849 1b04 	str.w	r1, [r9], #4
 801789a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801789e:	d8e2      	bhi.n	8017866 <__multiply+0xb2>
 80178a0:	9a01      	ldr	r2, [sp, #4]
 80178a2:	f845 c002 	str.w	ip, [r5, r2]
 80178a6:	9a03      	ldr	r2, [sp, #12]
 80178a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80178ac:	3304      	adds	r3, #4
 80178ae:	f1b9 0f00 	cmp.w	r9, #0
 80178b2:	d021      	beq.n	80178f8 <__multiply+0x144>
 80178b4:	6829      	ldr	r1, [r5, #0]
 80178b6:	f104 0c14 	add.w	ip, r4, #20
 80178ba:	46ae      	mov	lr, r5
 80178bc:	f04f 0a00 	mov.w	sl, #0
 80178c0:	f8bc b000 	ldrh.w	fp, [ip]
 80178c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80178c8:	fb09 220b 	mla	r2, r9, fp, r2
 80178cc:	4452      	add	r2, sl
 80178ce:	b289      	uxth	r1, r1
 80178d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80178d4:	f84e 1b04 	str.w	r1, [lr], #4
 80178d8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80178dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80178e0:	f8be 1000 	ldrh.w	r1, [lr]
 80178e4:	fb09 110a 	mla	r1, r9, sl, r1
 80178e8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80178ec:	4567      	cmp	r7, ip
 80178ee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80178f2:	d8e5      	bhi.n	80178c0 <__multiply+0x10c>
 80178f4:	9a01      	ldr	r2, [sp, #4]
 80178f6:	50a9      	str	r1, [r5, r2]
 80178f8:	3504      	adds	r5, #4
 80178fa:	e799      	b.n	8017830 <__multiply+0x7c>
 80178fc:	3e01      	subs	r6, #1
 80178fe:	e79b      	b.n	8017838 <__multiply+0x84>
 8017900:	08019ed1 	.word	0x08019ed1
 8017904:	08019ee2 	.word	0x08019ee2

08017908 <__pow5mult>:
 8017908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801790c:	4615      	mov	r5, r2
 801790e:	f012 0203 	ands.w	r2, r2, #3
 8017912:	4606      	mov	r6, r0
 8017914:	460f      	mov	r7, r1
 8017916:	d007      	beq.n	8017928 <__pow5mult+0x20>
 8017918:	4c25      	ldr	r4, [pc, #148]	; (80179b0 <__pow5mult+0xa8>)
 801791a:	3a01      	subs	r2, #1
 801791c:	2300      	movs	r3, #0
 801791e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017922:	f7ff fe53 	bl	80175cc <__multadd>
 8017926:	4607      	mov	r7, r0
 8017928:	10ad      	asrs	r5, r5, #2
 801792a:	d03d      	beq.n	80179a8 <__pow5mult+0xa0>
 801792c:	69f4      	ldr	r4, [r6, #28]
 801792e:	b97c      	cbnz	r4, 8017950 <__pow5mult+0x48>
 8017930:	2010      	movs	r0, #16
 8017932:	f7ff fd35 	bl	80173a0 <malloc>
 8017936:	4602      	mov	r2, r0
 8017938:	61f0      	str	r0, [r6, #28]
 801793a:	b928      	cbnz	r0, 8017948 <__pow5mult+0x40>
 801793c:	4b1d      	ldr	r3, [pc, #116]	; (80179b4 <__pow5mult+0xac>)
 801793e:	481e      	ldr	r0, [pc, #120]	; (80179b8 <__pow5mult+0xb0>)
 8017940:	f240 11b3 	movw	r1, #435	; 0x1b3
 8017944:	f001 fb2c 	bl	8018fa0 <__assert_func>
 8017948:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801794c:	6004      	str	r4, [r0, #0]
 801794e:	60c4      	str	r4, [r0, #12]
 8017950:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8017954:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017958:	b94c      	cbnz	r4, 801796e <__pow5mult+0x66>
 801795a:	f240 2171 	movw	r1, #625	; 0x271
 801795e:	4630      	mov	r0, r6
 8017960:	f7ff ff12 	bl	8017788 <__i2b>
 8017964:	2300      	movs	r3, #0
 8017966:	f8c8 0008 	str.w	r0, [r8, #8]
 801796a:	4604      	mov	r4, r0
 801796c:	6003      	str	r3, [r0, #0]
 801796e:	f04f 0900 	mov.w	r9, #0
 8017972:	07eb      	lsls	r3, r5, #31
 8017974:	d50a      	bpl.n	801798c <__pow5mult+0x84>
 8017976:	4639      	mov	r1, r7
 8017978:	4622      	mov	r2, r4
 801797a:	4630      	mov	r0, r6
 801797c:	f7ff ff1a 	bl	80177b4 <__multiply>
 8017980:	4639      	mov	r1, r7
 8017982:	4680      	mov	r8, r0
 8017984:	4630      	mov	r0, r6
 8017986:	f7ff fdff 	bl	8017588 <_Bfree>
 801798a:	4647      	mov	r7, r8
 801798c:	106d      	asrs	r5, r5, #1
 801798e:	d00b      	beq.n	80179a8 <__pow5mult+0xa0>
 8017990:	6820      	ldr	r0, [r4, #0]
 8017992:	b938      	cbnz	r0, 80179a4 <__pow5mult+0x9c>
 8017994:	4622      	mov	r2, r4
 8017996:	4621      	mov	r1, r4
 8017998:	4630      	mov	r0, r6
 801799a:	f7ff ff0b 	bl	80177b4 <__multiply>
 801799e:	6020      	str	r0, [r4, #0]
 80179a0:	f8c0 9000 	str.w	r9, [r0]
 80179a4:	4604      	mov	r4, r0
 80179a6:	e7e4      	b.n	8017972 <__pow5mult+0x6a>
 80179a8:	4638      	mov	r0, r7
 80179aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80179ae:	bf00      	nop
 80179b0:	0801a030 	.word	0x0801a030
 80179b4:	08019e62 	.word	0x08019e62
 80179b8:	08019ee2 	.word	0x08019ee2

080179bc <__lshift>:
 80179bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80179c0:	460c      	mov	r4, r1
 80179c2:	6849      	ldr	r1, [r1, #4]
 80179c4:	6923      	ldr	r3, [r4, #16]
 80179c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80179ca:	68a3      	ldr	r3, [r4, #8]
 80179cc:	4607      	mov	r7, r0
 80179ce:	4691      	mov	r9, r2
 80179d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80179d4:	f108 0601 	add.w	r6, r8, #1
 80179d8:	42b3      	cmp	r3, r6
 80179da:	db0b      	blt.n	80179f4 <__lshift+0x38>
 80179dc:	4638      	mov	r0, r7
 80179de:	f7ff fd93 	bl	8017508 <_Balloc>
 80179e2:	4605      	mov	r5, r0
 80179e4:	b948      	cbnz	r0, 80179fa <__lshift+0x3e>
 80179e6:	4602      	mov	r2, r0
 80179e8:	4b28      	ldr	r3, [pc, #160]	; (8017a8c <__lshift+0xd0>)
 80179ea:	4829      	ldr	r0, [pc, #164]	; (8017a90 <__lshift+0xd4>)
 80179ec:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80179f0:	f001 fad6 	bl	8018fa0 <__assert_func>
 80179f4:	3101      	adds	r1, #1
 80179f6:	005b      	lsls	r3, r3, #1
 80179f8:	e7ee      	b.n	80179d8 <__lshift+0x1c>
 80179fa:	2300      	movs	r3, #0
 80179fc:	f100 0114 	add.w	r1, r0, #20
 8017a00:	f100 0210 	add.w	r2, r0, #16
 8017a04:	4618      	mov	r0, r3
 8017a06:	4553      	cmp	r3, sl
 8017a08:	db33      	blt.n	8017a72 <__lshift+0xb6>
 8017a0a:	6920      	ldr	r0, [r4, #16]
 8017a0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017a10:	f104 0314 	add.w	r3, r4, #20
 8017a14:	f019 091f 	ands.w	r9, r9, #31
 8017a18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017a1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017a20:	d02b      	beq.n	8017a7a <__lshift+0xbe>
 8017a22:	f1c9 0e20 	rsb	lr, r9, #32
 8017a26:	468a      	mov	sl, r1
 8017a28:	2200      	movs	r2, #0
 8017a2a:	6818      	ldr	r0, [r3, #0]
 8017a2c:	fa00 f009 	lsl.w	r0, r0, r9
 8017a30:	4310      	orrs	r0, r2
 8017a32:	f84a 0b04 	str.w	r0, [sl], #4
 8017a36:	f853 2b04 	ldr.w	r2, [r3], #4
 8017a3a:	459c      	cmp	ip, r3
 8017a3c:	fa22 f20e 	lsr.w	r2, r2, lr
 8017a40:	d8f3      	bhi.n	8017a2a <__lshift+0x6e>
 8017a42:	ebac 0304 	sub.w	r3, ip, r4
 8017a46:	3b15      	subs	r3, #21
 8017a48:	f023 0303 	bic.w	r3, r3, #3
 8017a4c:	3304      	adds	r3, #4
 8017a4e:	f104 0015 	add.w	r0, r4, #21
 8017a52:	4584      	cmp	ip, r0
 8017a54:	bf38      	it	cc
 8017a56:	2304      	movcc	r3, #4
 8017a58:	50ca      	str	r2, [r1, r3]
 8017a5a:	b10a      	cbz	r2, 8017a60 <__lshift+0xa4>
 8017a5c:	f108 0602 	add.w	r6, r8, #2
 8017a60:	3e01      	subs	r6, #1
 8017a62:	4638      	mov	r0, r7
 8017a64:	612e      	str	r6, [r5, #16]
 8017a66:	4621      	mov	r1, r4
 8017a68:	f7ff fd8e 	bl	8017588 <_Bfree>
 8017a6c:	4628      	mov	r0, r5
 8017a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a72:	f842 0f04 	str.w	r0, [r2, #4]!
 8017a76:	3301      	adds	r3, #1
 8017a78:	e7c5      	b.n	8017a06 <__lshift+0x4a>
 8017a7a:	3904      	subs	r1, #4
 8017a7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017a80:	f841 2f04 	str.w	r2, [r1, #4]!
 8017a84:	459c      	cmp	ip, r3
 8017a86:	d8f9      	bhi.n	8017a7c <__lshift+0xc0>
 8017a88:	e7ea      	b.n	8017a60 <__lshift+0xa4>
 8017a8a:	bf00      	nop
 8017a8c:	08019ed1 	.word	0x08019ed1
 8017a90:	08019ee2 	.word	0x08019ee2

08017a94 <__mcmp>:
 8017a94:	b530      	push	{r4, r5, lr}
 8017a96:	6902      	ldr	r2, [r0, #16]
 8017a98:	690c      	ldr	r4, [r1, #16]
 8017a9a:	1b12      	subs	r2, r2, r4
 8017a9c:	d10e      	bne.n	8017abc <__mcmp+0x28>
 8017a9e:	f100 0314 	add.w	r3, r0, #20
 8017aa2:	3114      	adds	r1, #20
 8017aa4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8017aa8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8017aac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8017ab0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8017ab4:	42a5      	cmp	r5, r4
 8017ab6:	d003      	beq.n	8017ac0 <__mcmp+0x2c>
 8017ab8:	d305      	bcc.n	8017ac6 <__mcmp+0x32>
 8017aba:	2201      	movs	r2, #1
 8017abc:	4610      	mov	r0, r2
 8017abe:	bd30      	pop	{r4, r5, pc}
 8017ac0:	4283      	cmp	r3, r0
 8017ac2:	d3f3      	bcc.n	8017aac <__mcmp+0x18>
 8017ac4:	e7fa      	b.n	8017abc <__mcmp+0x28>
 8017ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8017aca:	e7f7      	b.n	8017abc <__mcmp+0x28>

08017acc <__mdiff>:
 8017acc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ad0:	460c      	mov	r4, r1
 8017ad2:	4606      	mov	r6, r0
 8017ad4:	4611      	mov	r1, r2
 8017ad6:	4620      	mov	r0, r4
 8017ad8:	4690      	mov	r8, r2
 8017ada:	f7ff ffdb 	bl	8017a94 <__mcmp>
 8017ade:	1e05      	subs	r5, r0, #0
 8017ae0:	d110      	bne.n	8017b04 <__mdiff+0x38>
 8017ae2:	4629      	mov	r1, r5
 8017ae4:	4630      	mov	r0, r6
 8017ae6:	f7ff fd0f 	bl	8017508 <_Balloc>
 8017aea:	b930      	cbnz	r0, 8017afa <__mdiff+0x2e>
 8017aec:	4b3a      	ldr	r3, [pc, #232]	; (8017bd8 <__mdiff+0x10c>)
 8017aee:	4602      	mov	r2, r0
 8017af0:	f240 2137 	movw	r1, #567	; 0x237
 8017af4:	4839      	ldr	r0, [pc, #228]	; (8017bdc <__mdiff+0x110>)
 8017af6:	f001 fa53 	bl	8018fa0 <__assert_func>
 8017afa:	2301      	movs	r3, #1
 8017afc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017b00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b04:	bfa4      	itt	ge
 8017b06:	4643      	movge	r3, r8
 8017b08:	46a0      	movge	r8, r4
 8017b0a:	4630      	mov	r0, r6
 8017b0c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017b10:	bfa6      	itte	ge
 8017b12:	461c      	movge	r4, r3
 8017b14:	2500      	movge	r5, #0
 8017b16:	2501      	movlt	r5, #1
 8017b18:	f7ff fcf6 	bl	8017508 <_Balloc>
 8017b1c:	b920      	cbnz	r0, 8017b28 <__mdiff+0x5c>
 8017b1e:	4b2e      	ldr	r3, [pc, #184]	; (8017bd8 <__mdiff+0x10c>)
 8017b20:	4602      	mov	r2, r0
 8017b22:	f240 2145 	movw	r1, #581	; 0x245
 8017b26:	e7e5      	b.n	8017af4 <__mdiff+0x28>
 8017b28:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017b2c:	6926      	ldr	r6, [r4, #16]
 8017b2e:	60c5      	str	r5, [r0, #12]
 8017b30:	f104 0914 	add.w	r9, r4, #20
 8017b34:	f108 0514 	add.w	r5, r8, #20
 8017b38:	f100 0e14 	add.w	lr, r0, #20
 8017b3c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8017b40:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8017b44:	f108 0210 	add.w	r2, r8, #16
 8017b48:	46f2      	mov	sl, lr
 8017b4a:	2100      	movs	r1, #0
 8017b4c:	f859 3b04 	ldr.w	r3, [r9], #4
 8017b50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8017b54:	fa11 f88b 	uxtah	r8, r1, fp
 8017b58:	b299      	uxth	r1, r3
 8017b5a:	0c1b      	lsrs	r3, r3, #16
 8017b5c:	eba8 0801 	sub.w	r8, r8, r1
 8017b60:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8017b64:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8017b68:	fa1f f888 	uxth.w	r8, r8
 8017b6c:	1419      	asrs	r1, r3, #16
 8017b6e:	454e      	cmp	r6, r9
 8017b70:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8017b74:	f84a 3b04 	str.w	r3, [sl], #4
 8017b78:	d8e8      	bhi.n	8017b4c <__mdiff+0x80>
 8017b7a:	1b33      	subs	r3, r6, r4
 8017b7c:	3b15      	subs	r3, #21
 8017b7e:	f023 0303 	bic.w	r3, r3, #3
 8017b82:	3304      	adds	r3, #4
 8017b84:	3415      	adds	r4, #21
 8017b86:	42a6      	cmp	r6, r4
 8017b88:	bf38      	it	cc
 8017b8a:	2304      	movcc	r3, #4
 8017b8c:	441d      	add	r5, r3
 8017b8e:	4473      	add	r3, lr
 8017b90:	469e      	mov	lr, r3
 8017b92:	462e      	mov	r6, r5
 8017b94:	4566      	cmp	r6, ip
 8017b96:	d30e      	bcc.n	8017bb6 <__mdiff+0xea>
 8017b98:	f10c 0203 	add.w	r2, ip, #3
 8017b9c:	1b52      	subs	r2, r2, r5
 8017b9e:	f022 0203 	bic.w	r2, r2, #3
 8017ba2:	3d03      	subs	r5, #3
 8017ba4:	45ac      	cmp	ip, r5
 8017ba6:	bf38      	it	cc
 8017ba8:	2200      	movcc	r2, #0
 8017baa:	4413      	add	r3, r2
 8017bac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8017bb0:	b17a      	cbz	r2, 8017bd2 <__mdiff+0x106>
 8017bb2:	6107      	str	r7, [r0, #16]
 8017bb4:	e7a4      	b.n	8017b00 <__mdiff+0x34>
 8017bb6:	f856 8b04 	ldr.w	r8, [r6], #4
 8017bba:	fa11 f288 	uxtah	r2, r1, r8
 8017bbe:	1414      	asrs	r4, r2, #16
 8017bc0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8017bc4:	b292      	uxth	r2, r2
 8017bc6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8017bca:	f84e 2b04 	str.w	r2, [lr], #4
 8017bce:	1421      	asrs	r1, r4, #16
 8017bd0:	e7e0      	b.n	8017b94 <__mdiff+0xc8>
 8017bd2:	3f01      	subs	r7, #1
 8017bd4:	e7ea      	b.n	8017bac <__mdiff+0xe0>
 8017bd6:	bf00      	nop
 8017bd8:	08019ed1 	.word	0x08019ed1
 8017bdc:	08019ee2 	.word	0x08019ee2

08017be0 <__ulp>:
 8017be0:	b082      	sub	sp, #8
 8017be2:	ed8d 0b00 	vstr	d0, [sp]
 8017be6:	9a01      	ldr	r2, [sp, #4]
 8017be8:	4b0f      	ldr	r3, [pc, #60]	; (8017c28 <__ulp+0x48>)
 8017bea:	4013      	ands	r3, r2
 8017bec:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	dc08      	bgt.n	8017c06 <__ulp+0x26>
 8017bf4:	425b      	negs	r3, r3
 8017bf6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8017bfa:	ea4f 5223 	mov.w	r2, r3, asr #20
 8017bfe:	da04      	bge.n	8017c0a <__ulp+0x2a>
 8017c00:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8017c04:	4113      	asrs	r3, r2
 8017c06:	2200      	movs	r2, #0
 8017c08:	e008      	b.n	8017c1c <__ulp+0x3c>
 8017c0a:	f1a2 0314 	sub.w	r3, r2, #20
 8017c0e:	2b1e      	cmp	r3, #30
 8017c10:	bfda      	itte	le
 8017c12:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8017c16:	40da      	lsrle	r2, r3
 8017c18:	2201      	movgt	r2, #1
 8017c1a:	2300      	movs	r3, #0
 8017c1c:	4619      	mov	r1, r3
 8017c1e:	4610      	mov	r0, r2
 8017c20:	ec41 0b10 	vmov	d0, r0, r1
 8017c24:	b002      	add	sp, #8
 8017c26:	4770      	bx	lr
 8017c28:	7ff00000 	.word	0x7ff00000

08017c2c <__b2d>:
 8017c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c30:	6906      	ldr	r6, [r0, #16]
 8017c32:	f100 0814 	add.w	r8, r0, #20
 8017c36:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8017c3a:	1f37      	subs	r7, r6, #4
 8017c3c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8017c40:	4610      	mov	r0, r2
 8017c42:	f7ff fd53 	bl	80176ec <__hi0bits>
 8017c46:	f1c0 0320 	rsb	r3, r0, #32
 8017c4a:	280a      	cmp	r0, #10
 8017c4c:	600b      	str	r3, [r1, #0]
 8017c4e:	491b      	ldr	r1, [pc, #108]	; (8017cbc <__b2d+0x90>)
 8017c50:	dc15      	bgt.n	8017c7e <__b2d+0x52>
 8017c52:	f1c0 0c0b 	rsb	ip, r0, #11
 8017c56:	fa22 f30c 	lsr.w	r3, r2, ip
 8017c5a:	45b8      	cmp	r8, r7
 8017c5c:	ea43 0501 	orr.w	r5, r3, r1
 8017c60:	bf34      	ite	cc
 8017c62:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017c66:	2300      	movcs	r3, #0
 8017c68:	3015      	adds	r0, #21
 8017c6a:	fa02 f000 	lsl.w	r0, r2, r0
 8017c6e:	fa23 f30c 	lsr.w	r3, r3, ip
 8017c72:	4303      	orrs	r3, r0
 8017c74:	461c      	mov	r4, r3
 8017c76:	ec45 4b10 	vmov	d0, r4, r5
 8017c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c7e:	45b8      	cmp	r8, r7
 8017c80:	bf3a      	itte	cc
 8017c82:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017c86:	f1a6 0708 	subcc.w	r7, r6, #8
 8017c8a:	2300      	movcs	r3, #0
 8017c8c:	380b      	subs	r0, #11
 8017c8e:	d012      	beq.n	8017cb6 <__b2d+0x8a>
 8017c90:	f1c0 0120 	rsb	r1, r0, #32
 8017c94:	fa23 f401 	lsr.w	r4, r3, r1
 8017c98:	4082      	lsls	r2, r0
 8017c9a:	4322      	orrs	r2, r4
 8017c9c:	4547      	cmp	r7, r8
 8017c9e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8017ca2:	bf8c      	ite	hi
 8017ca4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8017ca8:	2200      	movls	r2, #0
 8017caa:	4083      	lsls	r3, r0
 8017cac:	40ca      	lsrs	r2, r1
 8017cae:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8017cb2:	4313      	orrs	r3, r2
 8017cb4:	e7de      	b.n	8017c74 <__b2d+0x48>
 8017cb6:	ea42 0501 	orr.w	r5, r2, r1
 8017cba:	e7db      	b.n	8017c74 <__b2d+0x48>
 8017cbc:	3ff00000 	.word	0x3ff00000

08017cc0 <__d2b>:
 8017cc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017cc4:	460f      	mov	r7, r1
 8017cc6:	2101      	movs	r1, #1
 8017cc8:	ec59 8b10 	vmov	r8, r9, d0
 8017ccc:	4616      	mov	r6, r2
 8017cce:	f7ff fc1b 	bl	8017508 <_Balloc>
 8017cd2:	4604      	mov	r4, r0
 8017cd4:	b930      	cbnz	r0, 8017ce4 <__d2b+0x24>
 8017cd6:	4602      	mov	r2, r0
 8017cd8:	4b24      	ldr	r3, [pc, #144]	; (8017d6c <__d2b+0xac>)
 8017cda:	4825      	ldr	r0, [pc, #148]	; (8017d70 <__d2b+0xb0>)
 8017cdc:	f240 310f 	movw	r1, #783	; 0x30f
 8017ce0:	f001 f95e 	bl	8018fa0 <__assert_func>
 8017ce4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017ce8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017cec:	bb2d      	cbnz	r5, 8017d3a <__d2b+0x7a>
 8017cee:	9301      	str	r3, [sp, #4]
 8017cf0:	f1b8 0300 	subs.w	r3, r8, #0
 8017cf4:	d026      	beq.n	8017d44 <__d2b+0x84>
 8017cf6:	4668      	mov	r0, sp
 8017cf8:	9300      	str	r3, [sp, #0]
 8017cfa:	f7ff fd17 	bl	801772c <__lo0bits>
 8017cfe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8017d02:	b1e8      	cbz	r0, 8017d40 <__d2b+0x80>
 8017d04:	f1c0 0320 	rsb	r3, r0, #32
 8017d08:	fa02 f303 	lsl.w	r3, r2, r3
 8017d0c:	430b      	orrs	r3, r1
 8017d0e:	40c2      	lsrs	r2, r0
 8017d10:	6163      	str	r3, [r4, #20]
 8017d12:	9201      	str	r2, [sp, #4]
 8017d14:	9b01      	ldr	r3, [sp, #4]
 8017d16:	61a3      	str	r3, [r4, #24]
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	bf14      	ite	ne
 8017d1c:	2202      	movne	r2, #2
 8017d1e:	2201      	moveq	r2, #1
 8017d20:	6122      	str	r2, [r4, #16]
 8017d22:	b1bd      	cbz	r5, 8017d54 <__d2b+0x94>
 8017d24:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8017d28:	4405      	add	r5, r0
 8017d2a:	603d      	str	r5, [r7, #0]
 8017d2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017d30:	6030      	str	r0, [r6, #0]
 8017d32:	4620      	mov	r0, r4
 8017d34:	b003      	add	sp, #12
 8017d36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017d3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017d3e:	e7d6      	b.n	8017cee <__d2b+0x2e>
 8017d40:	6161      	str	r1, [r4, #20]
 8017d42:	e7e7      	b.n	8017d14 <__d2b+0x54>
 8017d44:	a801      	add	r0, sp, #4
 8017d46:	f7ff fcf1 	bl	801772c <__lo0bits>
 8017d4a:	9b01      	ldr	r3, [sp, #4]
 8017d4c:	6163      	str	r3, [r4, #20]
 8017d4e:	3020      	adds	r0, #32
 8017d50:	2201      	movs	r2, #1
 8017d52:	e7e5      	b.n	8017d20 <__d2b+0x60>
 8017d54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017d58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017d5c:	6038      	str	r0, [r7, #0]
 8017d5e:	6918      	ldr	r0, [r3, #16]
 8017d60:	f7ff fcc4 	bl	80176ec <__hi0bits>
 8017d64:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017d68:	e7e2      	b.n	8017d30 <__d2b+0x70>
 8017d6a:	bf00      	nop
 8017d6c:	08019ed1 	.word	0x08019ed1
 8017d70:	08019ee2 	.word	0x08019ee2

08017d74 <__ratio>:
 8017d74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d78:	4688      	mov	r8, r1
 8017d7a:	4669      	mov	r1, sp
 8017d7c:	4681      	mov	r9, r0
 8017d7e:	f7ff ff55 	bl	8017c2c <__b2d>
 8017d82:	a901      	add	r1, sp, #4
 8017d84:	4640      	mov	r0, r8
 8017d86:	ec55 4b10 	vmov	r4, r5, d0
 8017d8a:	ee10 aa10 	vmov	sl, s0
 8017d8e:	f7ff ff4d 	bl	8017c2c <__b2d>
 8017d92:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8017d96:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8017d9a:	1ad2      	subs	r2, r2, r3
 8017d9c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8017da0:	1a5b      	subs	r3, r3, r1
 8017da2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8017da6:	ec57 6b10 	vmov	r6, r7, d0
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	bfd6      	itet	le
 8017dae:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017db2:	462a      	movgt	r2, r5
 8017db4:	463a      	movle	r2, r7
 8017db6:	46ab      	mov	fp, r5
 8017db8:	bfd6      	itet	le
 8017dba:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8017dbe:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8017dc2:	ee00 3a90 	vmovle	s1, r3
 8017dc6:	ec4b ab17 	vmov	d7, sl, fp
 8017dca:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8017dce:	b003      	add	sp, #12
 8017dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017dd4 <__copybits>:
 8017dd4:	3901      	subs	r1, #1
 8017dd6:	b570      	push	{r4, r5, r6, lr}
 8017dd8:	1149      	asrs	r1, r1, #5
 8017dda:	6914      	ldr	r4, [r2, #16]
 8017ddc:	3101      	adds	r1, #1
 8017dde:	f102 0314 	add.w	r3, r2, #20
 8017de2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017de6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017dea:	1f05      	subs	r5, r0, #4
 8017dec:	42a3      	cmp	r3, r4
 8017dee:	d30c      	bcc.n	8017e0a <__copybits+0x36>
 8017df0:	1aa3      	subs	r3, r4, r2
 8017df2:	3b11      	subs	r3, #17
 8017df4:	f023 0303 	bic.w	r3, r3, #3
 8017df8:	3211      	adds	r2, #17
 8017dfa:	42a2      	cmp	r2, r4
 8017dfc:	bf88      	it	hi
 8017dfe:	2300      	movhi	r3, #0
 8017e00:	4418      	add	r0, r3
 8017e02:	2300      	movs	r3, #0
 8017e04:	4288      	cmp	r0, r1
 8017e06:	d305      	bcc.n	8017e14 <__copybits+0x40>
 8017e08:	bd70      	pop	{r4, r5, r6, pc}
 8017e0a:	f853 6b04 	ldr.w	r6, [r3], #4
 8017e0e:	f845 6f04 	str.w	r6, [r5, #4]!
 8017e12:	e7eb      	b.n	8017dec <__copybits+0x18>
 8017e14:	f840 3b04 	str.w	r3, [r0], #4
 8017e18:	e7f4      	b.n	8017e04 <__copybits+0x30>

08017e1a <__any_on>:
 8017e1a:	f100 0214 	add.w	r2, r0, #20
 8017e1e:	6900      	ldr	r0, [r0, #16]
 8017e20:	114b      	asrs	r3, r1, #5
 8017e22:	4298      	cmp	r0, r3
 8017e24:	b510      	push	{r4, lr}
 8017e26:	db11      	blt.n	8017e4c <__any_on+0x32>
 8017e28:	dd0a      	ble.n	8017e40 <__any_on+0x26>
 8017e2a:	f011 011f 	ands.w	r1, r1, #31
 8017e2e:	d007      	beq.n	8017e40 <__any_on+0x26>
 8017e30:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017e34:	fa24 f001 	lsr.w	r0, r4, r1
 8017e38:	fa00 f101 	lsl.w	r1, r0, r1
 8017e3c:	428c      	cmp	r4, r1
 8017e3e:	d10b      	bne.n	8017e58 <__any_on+0x3e>
 8017e40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017e44:	4293      	cmp	r3, r2
 8017e46:	d803      	bhi.n	8017e50 <__any_on+0x36>
 8017e48:	2000      	movs	r0, #0
 8017e4a:	bd10      	pop	{r4, pc}
 8017e4c:	4603      	mov	r3, r0
 8017e4e:	e7f7      	b.n	8017e40 <__any_on+0x26>
 8017e50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017e54:	2900      	cmp	r1, #0
 8017e56:	d0f5      	beq.n	8017e44 <__any_on+0x2a>
 8017e58:	2001      	movs	r0, #1
 8017e5a:	e7f6      	b.n	8017e4a <__any_on+0x30>

08017e5c <sulp>:
 8017e5c:	b570      	push	{r4, r5, r6, lr}
 8017e5e:	4604      	mov	r4, r0
 8017e60:	460d      	mov	r5, r1
 8017e62:	4616      	mov	r6, r2
 8017e64:	ec45 4b10 	vmov	d0, r4, r5
 8017e68:	f7ff feba 	bl	8017be0 <__ulp>
 8017e6c:	b17e      	cbz	r6, 8017e8e <sulp+0x32>
 8017e6e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8017e72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	dd09      	ble.n	8017e8e <sulp+0x32>
 8017e7a:	051b      	lsls	r3, r3, #20
 8017e7c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8017e80:	2000      	movs	r0, #0
 8017e82:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8017e86:	ec41 0b17 	vmov	d7, r0, r1
 8017e8a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017e8e:	bd70      	pop	{r4, r5, r6, pc}

08017e90 <_strtod_l>:
 8017e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e94:	ed2d 8b0e 	vpush	{d8-d14}
 8017e98:	b097      	sub	sp, #92	; 0x5c
 8017e9a:	4604      	mov	r4, r0
 8017e9c:	920d      	str	r2, [sp, #52]	; 0x34
 8017e9e:	2200      	movs	r2, #0
 8017ea0:	9212      	str	r2, [sp, #72]	; 0x48
 8017ea2:	468a      	mov	sl, r1
 8017ea4:	f04f 0800 	mov.w	r8, #0
 8017ea8:	f04f 0900 	mov.w	r9, #0
 8017eac:	460a      	mov	r2, r1
 8017eae:	9211      	str	r2, [sp, #68]	; 0x44
 8017eb0:	7811      	ldrb	r1, [r2, #0]
 8017eb2:	292b      	cmp	r1, #43	; 0x2b
 8017eb4:	d04c      	beq.n	8017f50 <_strtod_l+0xc0>
 8017eb6:	d839      	bhi.n	8017f2c <_strtod_l+0x9c>
 8017eb8:	290d      	cmp	r1, #13
 8017eba:	d833      	bhi.n	8017f24 <_strtod_l+0x94>
 8017ebc:	2908      	cmp	r1, #8
 8017ebe:	d833      	bhi.n	8017f28 <_strtod_l+0x98>
 8017ec0:	2900      	cmp	r1, #0
 8017ec2:	d03c      	beq.n	8017f3e <_strtod_l+0xae>
 8017ec4:	2200      	movs	r2, #0
 8017ec6:	9208      	str	r2, [sp, #32]
 8017ec8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8017eca:	7832      	ldrb	r2, [r6, #0]
 8017ecc:	2a30      	cmp	r2, #48	; 0x30
 8017ece:	f040 80b8 	bne.w	8018042 <_strtod_l+0x1b2>
 8017ed2:	7872      	ldrb	r2, [r6, #1]
 8017ed4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8017ed8:	2a58      	cmp	r2, #88	; 0x58
 8017eda:	d170      	bne.n	8017fbe <_strtod_l+0x12e>
 8017edc:	9302      	str	r3, [sp, #8]
 8017ede:	9b08      	ldr	r3, [sp, #32]
 8017ee0:	9301      	str	r3, [sp, #4]
 8017ee2:	ab12      	add	r3, sp, #72	; 0x48
 8017ee4:	9300      	str	r3, [sp, #0]
 8017ee6:	4a91      	ldr	r2, [pc, #580]	; (801812c <_strtod_l+0x29c>)
 8017ee8:	ab13      	add	r3, sp, #76	; 0x4c
 8017eea:	a911      	add	r1, sp, #68	; 0x44
 8017eec:	4620      	mov	r0, r4
 8017eee:	f001 f8f3 	bl	80190d8 <__gethex>
 8017ef2:	f010 070f 	ands.w	r7, r0, #15
 8017ef6:	4605      	mov	r5, r0
 8017ef8:	d005      	beq.n	8017f06 <_strtod_l+0x76>
 8017efa:	2f06      	cmp	r7, #6
 8017efc:	d12a      	bne.n	8017f54 <_strtod_l+0xc4>
 8017efe:	3601      	adds	r6, #1
 8017f00:	2300      	movs	r3, #0
 8017f02:	9611      	str	r6, [sp, #68]	; 0x44
 8017f04:	9308      	str	r3, [sp, #32]
 8017f06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	f040 8555 	bne.w	80189b8 <_strtod_l+0xb28>
 8017f0e:	9b08      	ldr	r3, [sp, #32]
 8017f10:	ec49 8b10 	vmov	d0, r8, r9
 8017f14:	b1cb      	cbz	r3, 8017f4a <_strtod_l+0xba>
 8017f16:	eeb1 0b40 	vneg.f64	d0, d0
 8017f1a:	b017      	add	sp, #92	; 0x5c
 8017f1c:	ecbd 8b0e 	vpop	{d8-d14}
 8017f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f24:	2920      	cmp	r1, #32
 8017f26:	d1cd      	bne.n	8017ec4 <_strtod_l+0x34>
 8017f28:	3201      	adds	r2, #1
 8017f2a:	e7c0      	b.n	8017eae <_strtod_l+0x1e>
 8017f2c:	292d      	cmp	r1, #45	; 0x2d
 8017f2e:	d1c9      	bne.n	8017ec4 <_strtod_l+0x34>
 8017f30:	2101      	movs	r1, #1
 8017f32:	9108      	str	r1, [sp, #32]
 8017f34:	1c51      	adds	r1, r2, #1
 8017f36:	9111      	str	r1, [sp, #68]	; 0x44
 8017f38:	7852      	ldrb	r2, [r2, #1]
 8017f3a:	2a00      	cmp	r2, #0
 8017f3c:	d1c4      	bne.n	8017ec8 <_strtod_l+0x38>
 8017f3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017f40:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	f040 8535 	bne.w	80189b4 <_strtod_l+0xb24>
 8017f4a:	ec49 8b10 	vmov	d0, r8, r9
 8017f4e:	e7e4      	b.n	8017f1a <_strtod_l+0x8a>
 8017f50:	2100      	movs	r1, #0
 8017f52:	e7ee      	b.n	8017f32 <_strtod_l+0xa2>
 8017f54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017f56:	b13a      	cbz	r2, 8017f68 <_strtod_l+0xd8>
 8017f58:	2135      	movs	r1, #53	; 0x35
 8017f5a:	a814      	add	r0, sp, #80	; 0x50
 8017f5c:	f7ff ff3a 	bl	8017dd4 <__copybits>
 8017f60:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017f62:	4620      	mov	r0, r4
 8017f64:	f7ff fb10 	bl	8017588 <_Bfree>
 8017f68:	1e7b      	subs	r3, r7, #1
 8017f6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017f6c:	2b04      	cmp	r3, #4
 8017f6e:	d806      	bhi.n	8017f7e <_strtod_l+0xee>
 8017f70:	e8df f003 	tbb	[pc, r3]
 8017f74:	201d0314 	.word	0x201d0314
 8017f78:	14          	.byte	0x14
 8017f79:	00          	.byte	0x00
 8017f7a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8017f7e:	05eb      	lsls	r3, r5, #23
 8017f80:	bf48      	it	mi
 8017f82:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8017f86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017f8a:	0d1b      	lsrs	r3, r3, #20
 8017f8c:	051b      	lsls	r3, r3, #20
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d1b9      	bne.n	8017f06 <_strtod_l+0x76>
 8017f92:	f7fe fb83 	bl	801669c <__errno>
 8017f96:	2322      	movs	r3, #34	; 0x22
 8017f98:	6003      	str	r3, [r0, #0]
 8017f9a:	e7b4      	b.n	8017f06 <_strtod_l+0x76>
 8017f9c:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8017fa0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017fa4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8017fa8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8017fac:	e7e7      	b.n	8017f7e <_strtod_l+0xee>
 8017fae:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8018134 <_strtod_l+0x2a4>
 8017fb2:	e7e4      	b.n	8017f7e <_strtod_l+0xee>
 8017fb4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8017fb8:	f04f 38ff 	mov.w	r8, #4294967295
 8017fbc:	e7df      	b.n	8017f7e <_strtod_l+0xee>
 8017fbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017fc0:	1c5a      	adds	r2, r3, #1
 8017fc2:	9211      	str	r2, [sp, #68]	; 0x44
 8017fc4:	785b      	ldrb	r3, [r3, #1]
 8017fc6:	2b30      	cmp	r3, #48	; 0x30
 8017fc8:	d0f9      	beq.n	8017fbe <_strtod_l+0x12e>
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	d09b      	beq.n	8017f06 <_strtod_l+0x76>
 8017fce:	2301      	movs	r3, #1
 8017fd0:	9306      	str	r3, [sp, #24]
 8017fd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8017fd6:	2300      	movs	r3, #0
 8017fd8:	9305      	str	r3, [sp, #20]
 8017fda:	9307      	str	r3, [sp, #28]
 8017fdc:	461e      	mov	r6, r3
 8017fde:	220a      	movs	r2, #10
 8017fe0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017fe2:	7805      	ldrb	r5, [r0, #0]
 8017fe4:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8017fe8:	b2d9      	uxtb	r1, r3
 8017fea:	2909      	cmp	r1, #9
 8017fec:	d92b      	bls.n	8018046 <_strtod_l+0x1b6>
 8017fee:	4950      	ldr	r1, [pc, #320]	; (8018130 <_strtod_l+0x2a0>)
 8017ff0:	2201      	movs	r2, #1
 8017ff2:	f000 ffa9 	bl	8018f48 <strncmp>
 8017ff6:	2800      	cmp	r0, #0
 8017ff8:	d035      	beq.n	8018066 <_strtod_l+0x1d6>
 8017ffa:	2000      	movs	r0, #0
 8017ffc:	462a      	mov	r2, r5
 8017ffe:	4633      	mov	r3, r6
 8018000:	4683      	mov	fp, r0
 8018002:	4601      	mov	r1, r0
 8018004:	2a65      	cmp	r2, #101	; 0x65
 8018006:	d001      	beq.n	801800c <_strtod_l+0x17c>
 8018008:	2a45      	cmp	r2, #69	; 0x45
 801800a:	d118      	bne.n	801803e <_strtod_l+0x1ae>
 801800c:	b91b      	cbnz	r3, 8018016 <_strtod_l+0x186>
 801800e:	9b06      	ldr	r3, [sp, #24]
 8018010:	4303      	orrs	r3, r0
 8018012:	d094      	beq.n	8017f3e <_strtod_l+0xae>
 8018014:	2300      	movs	r3, #0
 8018016:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 801801a:	f10a 0201 	add.w	r2, sl, #1
 801801e:	9211      	str	r2, [sp, #68]	; 0x44
 8018020:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8018024:	2a2b      	cmp	r2, #43	; 0x2b
 8018026:	d075      	beq.n	8018114 <_strtod_l+0x284>
 8018028:	2a2d      	cmp	r2, #45	; 0x2d
 801802a:	d07b      	beq.n	8018124 <_strtod_l+0x294>
 801802c:	f04f 0e00 	mov.w	lr, #0
 8018030:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8018034:	2d09      	cmp	r5, #9
 8018036:	f240 8083 	bls.w	8018140 <_strtod_l+0x2b0>
 801803a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801803e:	2500      	movs	r5, #0
 8018040:	e09e      	b.n	8018180 <_strtod_l+0x2f0>
 8018042:	2300      	movs	r3, #0
 8018044:	e7c4      	b.n	8017fd0 <_strtod_l+0x140>
 8018046:	2e08      	cmp	r6, #8
 8018048:	bfd5      	itete	le
 801804a:	9907      	ldrle	r1, [sp, #28]
 801804c:	9905      	ldrgt	r1, [sp, #20]
 801804e:	fb02 3301 	mlale	r3, r2, r1, r3
 8018052:	fb02 3301 	mlagt	r3, r2, r1, r3
 8018056:	f100 0001 	add.w	r0, r0, #1
 801805a:	bfd4      	ite	le
 801805c:	9307      	strle	r3, [sp, #28]
 801805e:	9305      	strgt	r3, [sp, #20]
 8018060:	3601      	adds	r6, #1
 8018062:	9011      	str	r0, [sp, #68]	; 0x44
 8018064:	e7bc      	b.n	8017fe0 <_strtod_l+0x150>
 8018066:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018068:	1c5a      	adds	r2, r3, #1
 801806a:	9211      	str	r2, [sp, #68]	; 0x44
 801806c:	785a      	ldrb	r2, [r3, #1]
 801806e:	b3ae      	cbz	r6, 80180dc <_strtod_l+0x24c>
 8018070:	4683      	mov	fp, r0
 8018072:	4633      	mov	r3, r6
 8018074:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8018078:	2909      	cmp	r1, #9
 801807a:	d912      	bls.n	80180a2 <_strtod_l+0x212>
 801807c:	2101      	movs	r1, #1
 801807e:	e7c1      	b.n	8018004 <_strtod_l+0x174>
 8018080:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018082:	1c5a      	adds	r2, r3, #1
 8018084:	9211      	str	r2, [sp, #68]	; 0x44
 8018086:	785a      	ldrb	r2, [r3, #1]
 8018088:	3001      	adds	r0, #1
 801808a:	2a30      	cmp	r2, #48	; 0x30
 801808c:	d0f8      	beq.n	8018080 <_strtod_l+0x1f0>
 801808e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8018092:	2b08      	cmp	r3, #8
 8018094:	f200 8495 	bhi.w	80189c2 <_strtod_l+0xb32>
 8018098:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801809a:	9309      	str	r3, [sp, #36]	; 0x24
 801809c:	4683      	mov	fp, r0
 801809e:	2000      	movs	r0, #0
 80180a0:	4603      	mov	r3, r0
 80180a2:	3a30      	subs	r2, #48	; 0x30
 80180a4:	f100 0101 	add.w	r1, r0, #1
 80180a8:	d012      	beq.n	80180d0 <_strtod_l+0x240>
 80180aa:	448b      	add	fp, r1
 80180ac:	eb00 0c03 	add.w	ip, r0, r3
 80180b0:	4619      	mov	r1, r3
 80180b2:	250a      	movs	r5, #10
 80180b4:	4561      	cmp	r1, ip
 80180b6:	d113      	bne.n	80180e0 <_strtod_l+0x250>
 80180b8:	1819      	adds	r1, r3, r0
 80180ba:	2908      	cmp	r1, #8
 80180bc:	f103 0301 	add.w	r3, r3, #1
 80180c0:	4403      	add	r3, r0
 80180c2:	dc1b      	bgt.n	80180fc <_strtod_l+0x26c>
 80180c4:	9807      	ldr	r0, [sp, #28]
 80180c6:	210a      	movs	r1, #10
 80180c8:	fb01 2200 	mla	r2, r1, r0, r2
 80180cc:	9207      	str	r2, [sp, #28]
 80180ce:	2100      	movs	r1, #0
 80180d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80180d2:	1c50      	adds	r0, r2, #1
 80180d4:	9011      	str	r0, [sp, #68]	; 0x44
 80180d6:	7852      	ldrb	r2, [r2, #1]
 80180d8:	4608      	mov	r0, r1
 80180da:	e7cb      	b.n	8018074 <_strtod_l+0x1e4>
 80180dc:	4630      	mov	r0, r6
 80180de:	e7d4      	b.n	801808a <_strtod_l+0x1fa>
 80180e0:	2908      	cmp	r1, #8
 80180e2:	f101 0101 	add.w	r1, r1, #1
 80180e6:	dc03      	bgt.n	80180f0 <_strtod_l+0x260>
 80180e8:	9f07      	ldr	r7, [sp, #28]
 80180ea:	436f      	muls	r7, r5
 80180ec:	9707      	str	r7, [sp, #28]
 80180ee:	e7e1      	b.n	80180b4 <_strtod_l+0x224>
 80180f0:	2910      	cmp	r1, #16
 80180f2:	bfde      	ittt	le
 80180f4:	9f05      	ldrle	r7, [sp, #20]
 80180f6:	436f      	mulle	r7, r5
 80180f8:	9705      	strle	r7, [sp, #20]
 80180fa:	e7db      	b.n	80180b4 <_strtod_l+0x224>
 80180fc:	2b10      	cmp	r3, #16
 80180fe:	bfdf      	itttt	le
 8018100:	9805      	ldrle	r0, [sp, #20]
 8018102:	210a      	movle	r1, #10
 8018104:	fb01 2200 	mlale	r2, r1, r0, r2
 8018108:	9205      	strle	r2, [sp, #20]
 801810a:	e7e0      	b.n	80180ce <_strtod_l+0x23e>
 801810c:	f04f 0b00 	mov.w	fp, #0
 8018110:	2101      	movs	r1, #1
 8018112:	e77c      	b.n	801800e <_strtod_l+0x17e>
 8018114:	f04f 0e00 	mov.w	lr, #0
 8018118:	f10a 0202 	add.w	r2, sl, #2
 801811c:	9211      	str	r2, [sp, #68]	; 0x44
 801811e:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8018122:	e785      	b.n	8018030 <_strtod_l+0x1a0>
 8018124:	f04f 0e01 	mov.w	lr, #1
 8018128:	e7f6      	b.n	8018118 <_strtod_l+0x288>
 801812a:	bf00      	nop
 801812c:	0801a040 	.word	0x0801a040
 8018130:	0801a03c 	.word	0x0801a03c
 8018134:	7ff00000 	.word	0x7ff00000
 8018138:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801813a:	1c55      	adds	r5, r2, #1
 801813c:	9511      	str	r5, [sp, #68]	; 0x44
 801813e:	7852      	ldrb	r2, [r2, #1]
 8018140:	2a30      	cmp	r2, #48	; 0x30
 8018142:	d0f9      	beq.n	8018138 <_strtod_l+0x2a8>
 8018144:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8018148:	2d08      	cmp	r5, #8
 801814a:	f63f af78 	bhi.w	801803e <_strtod_l+0x1ae>
 801814e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8018152:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018154:	920a      	str	r2, [sp, #40]	; 0x28
 8018156:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018158:	1c55      	adds	r5, r2, #1
 801815a:	9511      	str	r5, [sp, #68]	; 0x44
 801815c:	7852      	ldrb	r2, [r2, #1]
 801815e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8018162:	2f09      	cmp	r7, #9
 8018164:	d937      	bls.n	80181d6 <_strtod_l+0x346>
 8018166:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8018168:	1bed      	subs	r5, r5, r7
 801816a:	2d08      	cmp	r5, #8
 801816c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8018170:	dc02      	bgt.n	8018178 <_strtod_l+0x2e8>
 8018172:	4565      	cmp	r5, ip
 8018174:	bfa8      	it	ge
 8018176:	4665      	movge	r5, ip
 8018178:	f1be 0f00 	cmp.w	lr, #0
 801817c:	d000      	beq.n	8018180 <_strtod_l+0x2f0>
 801817e:	426d      	negs	r5, r5
 8018180:	2b00      	cmp	r3, #0
 8018182:	d14d      	bne.n	8018220 <_strtod_l+0x390>
 8018184:	9b06      	ldr	r3, [sp, #24]
 8018186:	4303      	orrs	r3, r0
 8018188:	f47f aebd 	bne.w	8017f06 <_strtod_l+0x76>
 801818c:	2900      	cmp	r1, #0
 801818e:	f47f aed6 	bne.w	8017f3e <_strtod_l+0xae>
 8018192:	2a69      	cmp	r2, #105	; 0x69
 8018194:	d027      	beq.n	80181e6 <_strtod_l+0x356>
 8018196:	dc24      	bgt.n	80181e2 <_strtod_l+0x352>
 8018198:	2a49      	cmp	r2, #73	; 0x49
 801819a:	d024      	beq.n	80181e6 <_strtod_l+0x356>
 801819c:	2a4e      	cmp	r2, #78	; 0x4e
 801819e:	f47f aece 	bne.w	8017f3e <_strtod_l+0xae>
 80181a2:	4995      	ldr	r1, [pc, #596]	; (80183f8 <_strtod_l+0x568>)
 80181a4:	a811      	add	r0, sp, #68	; 0x44
 80181a6:	f001 f9d7 	bl	8019558 <__match>
 80181aa:	2800      	cmp	r0, #0
 80181ac:	f43f aec7 	beq.w	8017f3e <_strtod_l+0xae>
 80181b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80181b2:	781b      	ldrb	r3, [r3, #0]
 80181b4:	2b28      	cmp	r3, #40	; 0x28
 80181b6:	d12d      	bne.n	8018214 <_strtod_l+0x384>
 80181b8:	4990      	ldr	r1, [pc, #576]	; (80183fc <_strtod_l+0x56c>)
 80181ba:	aa14      	add	r2, sp, #80	; 0x50
 80181bc:	a811      	add	r0, sp, #68	; 0x44
 80181be:	f001 f9df 	bl	8019580 <__hexnan>
 80181c2:	2805      	cmp	r0, #5
 80181c4:	d126      	bne.n	8018214 <_strtod_l+0x384>
 80181c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80181c8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80181cc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80181d0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80181d4:	e697      	b.n	8017f06 <_strtod_l+0x76>
 80181d6:	250a      	movs	r5, #10
 80181d8:	fb05 2c0c 	mla	ip, r5, ip, r2
 80181dc:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80181e0:	e7b9      	b.n	8018156 <_strtod_l+0x2c6>
 80181e2:	2a6e      	cmp	r2, #110	; 0x6e
 80181e4:	e7db      	b.n	801819e <_strtod_l+0x30e>
 80181e6:	4986      	ldr	r1, [pc, #536]	; (8018400 <_strtod_l+0x570>)
 80181e8:	a811      	add	r0, sp, #68	; 0x44
 80181ea:	f001 f9b5 	bl	8019558 <__match>
 80181ee:	2800      	cmp	r0, #0
 80181f0:	f43f aea5 	beq.w	8017f3e <_strtod_l+0xae>
 80181f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80181f6:	4983      	ldr	r1, [pc, #524]	; (8018404 <_strtod_l+0x574>)
 80181f8:	3b01      	subs	r3, #1
 80181fa:	a811      	add	r0, sp, #68	; 0x44
 80181fc:	9311      	str	r3, [sp, #68]	; 0x44
 80181fe:	f001 f9ab 	bl	8019558 <__match>
 8018202:	b910      	cbnz	r0, 801820a <_strtod_l+0x37a>
 8018204:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018206:	3301      	adds	r3, #1
 8018208:	9311      	str	r3, [sp, #68]	; 0x44
 801820a:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8018418 <_strtod_l+0x588>
 801820e:	f04f 0800 	mov.w	r8, #0
 8018212:	e678      	b.n	8017f06 <_strtod_l+0x76>
 8018214:	487c      	ldr	r0, [pc, #496]	; (8018408 <_strtod_l+0x578>)
 8018216:	f000 febb 	bl	8018f90 <nan>
 801821a:	ec59 8b10 	vmov	r8, r9, d0
 801821e:	e672      	b.n	8017f06 <_strtod_l+0x76>
 8018220:	eddd 7a07 	vldr	s15, [sp, #28]
 8018224:	eba5 020b 	sub.w	r2, r5, fp
 8018228:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801822c:	2e00      	cmp	r6, #0
 801822e:	bf08      	it	eq
 8018230:	461e      	moveq	r6, r3
 8018232:	2b10      	cmp	r3, #16
 8018234:	9206      	str	r2, [sp, #24]
 8018236:	461a      	mov	r2, r3
 8018238:	bfa8      	it	ge
 801823a:	2210      	movge	r2, #16
 801823c:	2b09      	cmp	r3, #9
 801823e:	ec59 8b17 	vmov	r8, r9, d7
 8018242:	dd0c      	ble.n	801825e <_strtod_l+0x3ce>
 8018244:	4971      	ldr	r1, [pc, #452]	; (801840c <_strtod_l+0x57c>)
 8018246:	eddd 6a05 	vldr	s13, [sp, #20]
 801824a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801824e:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8018252:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8018256:	eea7 6b05 	vfma.f64	d6, d7, d5
 801825a:	ec59 8b16 	vmov	r8, r9, d6
 801825e:	2b0f      	cmp	r3, #15
 8018260:	dc37      	bgt.n	80182d2 <_strtod_l+0x442>
 8018262:	9906      	ldr	r1, [sp, #24]
 8018264:	2900      	cmp	r1, #0
 8018266:	f43f ae4e 	beq.w	8017f06 <_strtod_l+0x76>
 801826a:	dd23      	ble.n	80182b4 <_strtod_l+0x424>
 801826c:	2916      	cmp	r1, #22
 801826e:	dc0b      	bgt.n	8018288 <_strtod_l+0x3f8>
 8018270:	4b66      	ldr	r3, [pc, #408]	; (801840c <_strtod_l+0x57c>)
 8018272:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8018276:	ed93 7b00 	vldr	d7, [r3]
 801827a:	ec49 8b16 	vmov	d6, r8, r9
 801827e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018282:	ec59 8b17 	vmov	r8, r9, d7
 8018286:	e63e      	b.n	8017f06 <_strtod_l+0x76>
 8018288:	9806      	ldr	r0, [sp, #24]
 801828a:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801828e:	4281      	cmp	r1, r0
 8018290:	db1f      	blt.n	80182d2 <_strtod_l+0x442>
 8018292:	4a5e      	ldr	r2, [pc, #376]	; (801840c <_strtod_l+0x57c>)
 8018294:	f1c3 030f 	rsb	r3, r3, #15
 8018298:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801829c:	ed91 7b00 	vldr	d7, [r1]
 80182a0:	ec49 8b16 	vmov	d6, r8, r9
 80182a4:	1ac3      	subs	r3, r0, r3
 80182a6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80182aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80182ae:	ed92 6b00 	vldr	d6, [r2]
 80182b2:	e7e4      	b.n	801827e <_strtod_l+0x3ee>
 80182b4:	9906      	ldr	r1, [sp, #24]
 80182b6:	3116      	adds	r1, #22
 80182b8:	db0b      	blt.n	80182d2 <_strtod_l+0x442>
 80182ba:	4b54      	ldr	r3, [pc, #336]	; (801840c <_strtod_l+0x57c>)
 80182bc:	ebab 0505 	sub.w	r5, fp, r5
 80182c0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80182c4:	ed95 7b00 	vldr	d7, [r5]
 80182c8:	ec49 8b16 	vmov	d6, r8, r9
 80182cc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80182d0:	e7d7      	b.n	8018282 <_strtod_l+0x3f2>
 80182d2:	9906      	ldr	r1, [sp, #24]
 80182d4:	1a9a      	subs	r2, r3, r2
 80182d6:	440a      	add	r2, r1
 80182d8:	2a00      	cmp	r2, #0
 80182da:	dd6e      	ble.n	80183ba <_strtod_l+0x52a>
 80182dc:	f012 000f 	ands.w	r0, r2, #15
 80182e0:	d00a      	beq.n	80182f8 <_strtod_l+0x468>
 80182e2:	494a      	ldr	r1, [pc, #296]	; (801840c <_strtod_l+0x57c>)
 80182e4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80182e8:	ed91 7b00 	vldr	d7, [r1]
 80182ec:	ec49 8b16 	vmov	d6, r8, r9
 80182f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80182f4:	ec59 8b17 	vmov	r8, r9, d7
 80182f8:	f032 020f 	bics.w	r2, r2, #15
 80182fc:	d04e      	beq.n	801839c <_strtod_l+0x50c>
 80182fe:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8018302:	dd22      	ble.n	801834a <_strtod_l+0x4ba>
 8018304:	2500      	movs	r5, #0
 8018306:	462e      	mov	r6, r5
 8018308:	9507      	str	r5, [sp, #28]
 801830a:	462f      	mov	r7, r5
 801830c:	2322      	movs	r3, #34	; 0x22
 801830e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8018418 <_strtod_l+0x588>
 8018312:	6023      	str	r3, [r4, #0]
 8018314:	f04f 0800 	mov.w	r8, #0
 8018318:	9b07      	ldr	r3, [sp, #28]
 801831a:	2b00      	cmp	r3, #0
 801831c:	f43f adf3 	beq.w	8017f06 <_strtod_l+0x76>
 8018320:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018322:	4620      	mov	r0, r4
 8018324:	f7ff f930 	bl	8017588 <_Bfree>
 8018328:	4639      	mov	r1, r7
 801832a:	4620      	mov	r0, r4
 801832c:	f7ff f92c 	bl	8017588 <_Bfree>
 8018330:	4631      	mov	r1, r6
 8018332:	4620      	mov	r0, r4
 8018334:	f7ff f928 	bl	8017588 <_Bfree>
 8018338:	9907      	ldr	r1, [sp, #28]
 801833a:	4620      	mov	r0, r4
 801833c:	f7ff f924 	bl	8017588 <_Bfree>
 8018340:	4629      	mov	r1, r5
 8018342:	4620      	mov	r0, r4
 8018344:	f7ff f920 	bl	8017588 <_Bfree>
 8018348:	e5dd      	b.n	8017f06 <_strtod_l+0x76>
 801834a:	2000      	movs	r0, #0
 801834c:	ec49 8b17 	vmov	d7, r8, r9
 8018350:	4f2f      	ldr	r7, [pc, #188]	; (8018410 <_strtod_l+0x580>)
 8018352:	1112      	asrs	r2, r2, #4
 8018354:	4601      	mov	r1, r0
 8018356:	2a01      	cmp	r2, #1
 8018358:	dc23      	bgt.n	80183a2 <_strtod_l+0x512>
 801835a:	b108      	cbz	r0, 8018360 <_strtod_l+0x4d0>
 801835c:	ec59 8b17 	vmov	r8, r9, d7
 8018360:	4a2b      	ldr	r2, [pc, #172]	; (8018410 <_strtod_l+0x580>)
 8018362:	482c      	ldr	r0, [pc, #176]	; (8018414 <_strtod_l+0x584>)
 8018364:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8018368:	ed92 7b00 	vldr	d7, [r2]
 801836c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8018370:	ec49 8b16 	vmov	d6, r8, r9
 8018374:	4a28      	ldr	r2, [pc, #160]	; (8018418 <_strtod_l+0x588>)
 8018376:	ee27 7b06 	vmul.f64	d7, d7, d6
 801837a:	ee17 1a90 	vmov	r1, s15
 801837e:	400a      	ands	r2, r1
 8018380:	4282      	cmp	r2, r0
 8018382:	ec59 8b17 	vmov	r8, r9, d7
 8018386:	d8bd      	bhi.n	8018304 <_strtod_l+0x474>
 8018388:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801838c:	4282      	cmp	r2, r0
 801838e:	bf86      	itte	hi
 8018390:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 801841c <_strtod_l+0x58c>
 8018394:	f04f 38ff 	movhi.w	r8, #4294967295
 8018398:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801839c:	2200      	movs	r2, #0
 801839e:	9205      	str	r2, [sp, #20]
 80183a0:	e076      	b.n	8018490 <_strtod_l+0x600>
 80183a2:	f012 0f01 	tst.w	r2, #1
 80183a6:	d004      	beq.n	80183b2 <_strtod_l+0x522>
 80183a8:	ed97 6b00 	vldr	d6, [r7]
 80183ac:	2001      	movs	r0, #1
 80183ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80183b2:	3101      	adds	r1, #1
 80183b4:	1052      	asrs	r2, r2, #1
 80183b6:	3708      	adds	r7, #8
 80183b8:	e7cd      	b.n	8018356 <_strtod_l+0x4c6>
 80183ba:	d0ef      	beq.n	801839c <_strtod_l+0x50c>
 80183bc:	4252      	negs	r2, r2
 80183be:	f012 000f 	ands.w	r0, r2, #15
 80183c2:	d00a      	beq.n	80183da <_strtod_l+0x54a>
 80183c4:	4911      	ldr	r1, [pc, #68]	; (801840c <_strtod_l+0x57c>)
 80183c6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80183ca:	ed91 7b00 	vldr	d7, [r1]
 80183ce:	ec49 8b16 	vmov	d6, r8, r9
 80183d2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80183d6:	ec59 8b17 	vmov	r8, r9, d7
 80183da:	1112      	asrs	r2, r2, #4
 80183dc:	d0de      	beq.n	801839c <_strtod_l+0x50c>
 80183de:	2a1f      	cmp	r2, #31
 80183e0:	dd1e      	ble.n	8018420 <_strtod_l+0x590>
 80183e2:	2500      	movs	r5, #0
 80183e4:	462e      	mov	r6, r5
 80183e6:	9507      	str	r5, [sp, #28]
 80183e8:	462f      	mov	r7, r5
 80183ea:	2322      	movs	r3, #34	; 0x22
 80183ec:	f04f 0800 	mov.w	r8, #0
 80183f0:	f04f 0900 	mov.w	r9, #0
 80183f4:	6023      	str	r3, [r4, #0]
 80183f6:	e78f      	b.n	8018318 <_strtod_l+0x488>
 80183f8:	08019e29 	.word	0x08019e29
 80183fc:	0801a054 	.word	0x0801a054
 8018400:	08019e21 	.word	0x08019e21
 8018404:	08019e58 	.word	0x08019e58
 8018408:	0801a1e5 	.word	0x0801a1e5
 801840c:	08019f68 	.word	0x08019f68
 8018410:	08019f40 	.word	0x08019f40
 8018414:	7ca00000 	.word	0x7ca00000
 8018418:	7ff00000 	.word	0x7ff00000
 801841c:	7fefffff 	.word	0x7fefffff
 8018420:	f012 0110 	ands.w	r1, r2, #16
 8018424:	bf18      	it	ne
 8018426:	216a      	movne	r1, #106	; 0x6a
 8018428:	9105      	str	r1, [sp, #20]
 801842a:	ec49 8b17 	vmov	d7, r8, r9
 801842e:	49be      	ldr	r1, [pc, #760]	; (8018728 <_strtod_l+0x898>)
 8018430:	2000      	movs	r0, #0
 8018432:	07d7      	lsls	r7, r2, #31
 8018434:	d504      	bpl.n	8018440 <_strtod_l+0x5b0>
 8018436:	ed91 6b00 	vldr	d6, [r1]
 801843a:	2001      	movs	r0, #1
 801843c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018440:	1052      	asrs	r2, r2, #1
 8018442:	f101 0108 	add.w	r1, r1, #8
 8018446:	d1f4      	bne.n	8018432 <_strtod_l+0x5a2>
 8018448:	b108      	cbz	r0, 801844e <_strtod_l+0x5be>
 801844a:	ec59 8b17 	vmov	r8, r9, d7
 801844e:	9a05      	ldr	r2, [sp, #20]
 8018450:	b1ba      	cbz	r2, 8018482 <_strtod_l+0x5f2>
 8018452:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8018456:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 801845a:	2a00      	cmp	r2, #0
 801845c:	4648      	mov	r0, r9
 801845e:	dd10      	ble.n	8018482 <_strtod_l+0x5f2>
 8018460:	2a1f      	cmp	r2, #31
 8018462:	f340 812c 	ble.w	80186be <_strtod_l+0x82e>
 8018466:	2a34      	cmp	r2, #52	; 0x34
 8018468:	bfde      	ittt	le
 801846a:	f04f 32ff 	movle.w	r2, #4294967295
 801846e:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8018472:	408a      	lslle	r2, r1
 8018474:	f04f 0800 	mov.w	r8, #0
 8018478:	bfcc      	ite	gt
 801847a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801847e:	ea02 0900 	andle.w	r9, r2, r0
 8018482:	ec49 8b17 	vmov	d7, r8, r9
 8018486:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801848a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801848e:	d0a8      	beq.n	80183e2 <_strtod_l+0x552>
 8018490:	9a07      	ldr	r2, [sp, #28]
 8018492:	9200      	str	r2, [sp, #0]
 8018494:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018496:	4632      	mov	r2, r6
 8018498:	4620      	mov	r0, r4
 801849a:	f7ff f8dd 	bl	8017658 <__s2b>
 801849e:	9007      	str	r0, [sp, #28]
 80184a0:	2800      	cmp	r0, #0
 80184a2:	f43f af2f 	beq.w	8018304 <_strtod_l+0x474>
 80184a6:	9a06      	ldr	r2, [sp, #24]
 80184a8:	2a00      	cmp	r2, #0
 80184aa:	ebab 0305 	sub.w	r3, fp, r5
 80184ae:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8018708 <_strtod_l+0x878>
 80184b2:	bfa8      	it	ge
 80184b4:	2300      	movge	r3, #0
 80184b6:	ed9f ab96 	vldr	d10, [pc, #600]	; 8018710 <_strtod_l+0x880>
 80184ba:	ed9f bb97 	vldr	d11, [pc, #604]	; 8018718 <_strtod_l+0x888>
 80184be:	9309      	str	r3, [sp, #36]	; 0x24
 80184c0:	2500      	movs	r5, #0
 80184c2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80184c6:	930c      	str	r3, [sp, #48]	; 0x30
 80184c8:	462e      	mov	r6, r5
 80184ca:	9b07      	ldr	r3, [sp, #28]
 80184cc:	4620      	mov	r0, r4
 80184ce:	6859      	ldr	r1, [r3, #4]
 80184d0:	f7ff f81a 	bl	8017508 <_Balloc>
 80184d4:	4607      	mov	r7, r0
 80184d6:	2800      	cmp	r0, #0
 80184d8:	f43f af18 	beq.w	801830c <_strtod_l+0x47c>
 80184dc:	9b07      	ldr	r3, [sp, #28]
 80184de:	691a      	ldr	r2, [r3, #16]
 80184e0:	3202      	adds	r2, #2
 80184e2:	f103 010c 	add.w	r1, r3, #12
 80184e6:	0092      	lsls	r2, r2, #2
 80184e8:	300c      	adds	r0, #12
 80184ea:	f7fe f904 	bl	80166f6 <memcpy>
 80184ee:	ec49 8b10 	vmov	d0, r8, r9
 80184f2:	aa14      	add	r2, sp, #80	; 0x50
 80184f4:	a913      	add	r1, sp, #76	; 0x4c
 80184f6:	4620      	mov	r0, r4
 80184f8:	f7ff fbe2 	bl	8017cc0 <__d2b>
 80184fc:	ec49 8b18 	vmov	d8, r8, r9
 8018500:	9012      	str	r0, [sp, #72]	; 0x48
 8018502:	2800      	cmp	r0, #0
 8018504:	f43f af02 	beq.w	801830c <_strtod_l+0x47c>
 8018508:	2101      	movs	r1, #1
 801850a:	4620      	mov	r0, r4
 801850c:	f7ff f93c 	bl	8017788 <__i2b>
 8018510:	4606      	mov	r6, r0
 8018512:	2800      	cmp	r0, #0
 8018514:	f43f aefa 	beq.w	801830c <_strtod_l+0x47c>
 8018518:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801851a:	9914      	ldr	r1, [sp, #80]	; 0x50
 801851c:	2b00      	cmp	r3, #0
 801851e:	bfab      	itete	ge
 8018520:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8018522:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8018524:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8018528:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 801852c:	bfac      	ite	ge
 801852e:	eb03 0b02 	addge.w	fp, r3, r2
 8018532:	eba2 0a03 	sublt.w	sl, r2, r3
 8018536:	9a05      	ldr	r2, [sp, #20]
 8018538:	1a9b      	subs	r3, r3, r2
 801853a:	440b      	add	r3, r1
 801853c:	4a7b      	ldr	r2, [pc, #492]	; (801872c <_strtod_l+0x89c>)
 801853e:	3b01      	subs	r3, #1
 8018540:	4293      	cmp	r3, r2
 8018542:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8018546:	f280 80cd 	bge.w	80186e4 <_strtod_l+0x854>
 801854a:	1ad2      	subs	r2, r2, r3
 801854c:	2a1f      	cmp	r2, #31
 801854e:	eba1 0102 	sub.w	r1, r1, r2
 8018552:	f04f 0001 	mov.w	r0, #1
 8018556:	f300 80b9 	bgt.w	80186cc <_strtod_l+0x83c>
 801855a:	fa00 f302 	lsl.w	r3, r0, r2
 801855e:	930b      	str	r3, [sp, #44]	; 0x2c
 8018560:	2300      	movs	r3, #0
 8018562:	930a      	str	r3, [sp, #40]	; 0x28
 8018564:	eb0b 0301 	add.w	r3, fp, r1
 8018568:	9a05      	ldr	r2, [sp, #20]
 801856a:	459b      	cmp	fp, r3
 801856c:	448a      	add	sl, r1
 801856e:	4492      	add	sl, r2
 8018570:	465a      	mov	r2, fp
 8018572:	bfa8      	it	ge
 8018574:	461a      	movge	r2, r3
 8018576:	4552      	cmp	r2, sl
 8018578:	bfa8      	it	ge
 801857a:	4652      	movge	r2, sl
 801857c:	2a00      	cmp	r2, #0
 801857e:	bfc2      	ittt	gt
 8018580:	1a9b      	subgt	r3, r3, r2
 8018582:	ebaa 0a02 	subgt.w	sl, sl, r2
 8018586:	ebab 0b02 	subgt.w	fp, fp, r2
 801858a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801858c:	2a00      	cmp	r2, #0
 801858e:	dd18      	ble.n	80185c2 <_strtod_l+0x732>
 8018590:	4631      	mov	r1, r6
 8018592:	4620      	mov	r0, r4
 8018594:	930f      	str	r3, [sp, #60]	; 0x3c
 8018596:	f7ff f9b7 	bl	8017908 <__pow5mult>
 801859a:	4606      	mov	r6, r0
 801859c:	2800      	cmp	r0, #0
 801859e:	f43f aeb5 	beq.w	801830c <_strtod_l+0x47c>
 80185a2:	4601      	mov	r1, r0
 80185a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80185a6:	4620      	mov	r0, r4
 80185a8:	f7ff f904 	bl	80177b4 <__multiply>
 80185ac:	900e      	str	r0, [sp, #56]	; 0x38
 80185ae:	2800      	cmp	r0, #0
 80185b0:	f43f aeac 	beq.w	801830c <_strtod_l+0x47c>
 80185b4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80185b6:	4620      	mov	r0, r4
 80185b8:	f7fe ffe6 	bl	8017588 <_Bfree>
 80185bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80185be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80185c0:	9212      	str	r2, [sp, #72]	; 0x48
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	f300 8093 	bgt.w	80186ee <_strtod_l+0x85e>
 80185c8:	9b06      	ldr	r3, [sp, #24]
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	dd08      	ble.n	80185e0 <_strtod_l+0x750>
 80185ce:	4639      	mov	r1, r7
 80185d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80185d2:	4620      	mov	r0, r4
 80185d4:	f7ff f998 	bl	8017908 <__pow5mult>
 80185d8:	4607      	mov	r7, r0
 80185da:	2800      	cmp	r0, #0
 80185dc:	f43f ae96 	beq.w	801830c <_strtod_l+0x47c>
 80185e0:	f1ba 0f00 	cmp.w	sl, #0
 80185e4:	dd08      	ble.n	80185f8 <_strtod_l+0x768>
 80185e6:	4639      	mov	r1, r7
 80185e8:	4652      	mov	r2, sl
 80185ea:	4620      	mov	r0, r4
 80185ec:	f7ff f9e6 	bl	80179bc <__lshift>
 80185f0:	4607      	mov	r7, r0
 80185f2:	2800      	cmp	r0, #0
 80185f4:	f43f ae8a 	beq.w	801830c <_strtod_l+0x47c>
 80185f8:	f1bb 0f00 	cmp.w	fp, #0
 80185fc:	dd08      	ble.n	8018610 <_strtod_l+0x780>
 80185fe:	4631      	mov	r1, r6
 8018600:	465a      	mov	r2, fp
 8018602:	4620      	mov	r0, r4
 8018604:	f7ff f9da 	bl	80179bc <__lshift>
 8018608:	4606      	mov	r6, r0
 801860a:	2800      	cmp	r0, #0
 801860c:	f43f ae7e 	beq.w	801830c <_strtod_l+0x47c>
 8018610:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018612:	463a      	mov	r2, r7
 8018614:	4620      	mov	r0, r4
 8018616:	f7ff fa59 	bl	8017acc <__mdiff>
 801861a:	4605      	mov	r5, r0
 801861c:	2800      	cmp	r0, #0
 801861e:	f43f ae75 	beq.w	801830c <_strtod_l+0x47c>
 8018622:	2300      	movs	r3, #0
 8018624:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8018628:	60c3      	str	r3, [r0, #12]
 801862a:	4631      	mov	r1, r6
 801862c:	f7ff fa32 	bl	8017a94 <__mcmp>
 8018630:	2800      	cmp	r0, #0
 8018632:	da7f      	bge.n	8018734 <_strtod_l+0x8a4>
 8018634:	ea5a 0a08 	orrs.w	sl, sl, r8
 8018638:	f040 80a5 	bne.w	8018786 <_strtod_l+0x8f6>
 801863c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018640:	2b00      	cmp	r3, #0
 8018642:	f040 80a0 	bne.w	8018786 <_strtod_l+0x8f6>
 8018646:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801864a:	0d1b      	lsrs	r3, r3, #20
 801864c:	051b      	lsls	r3, r3, #20
 801864e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8018652:	f240 8098 	bls.w	8018786 <_strtod_l+0x8f6>
 8018656:	696b      	ldr	r3, [r5, #20]
 8018658:	b91b      	cbnz	r3, 8018662 <_strtod_l+0x7d2>
 801865a:	692b      	ldr	r3, [r5, #16]
 801865c:	2b01      	cmp	r3, #1
 801865e:	f340 8092 	ble.w	8018786 <_strtod_l+0x8f6>
 8018662:	4629      	mov	r1, r5
 8018664:	2201      	movs	r2, #1
 8018666:	4620      	mov	r0, r4
 8018668:	f7ff f9a8 	bl	80179bc <__lshift>
 801866c:	4631      	mov	r1, r6
 801866e:	4605      	mov	r5, r0
 8018670:	f7ff fa10 	bl	8017a94 <__mcmp>
 8018674:	2800      	cmp	r0, #0
 8018676:	f340 8086 	ble.w	8018786 <_strtod_l+0x8f6>
 801867a:	9905      	ldr	r1, [sp, #20]
 801867c:	4a2c      	ldr	r2, [pc, #176]	; (8018730 <_strtod_l+0x8a0>)
 801867e:	464b      	mov	r3, r9
 8018680:	2900      	cmp	r1, #0
 8018682:	f000 809f 	beq.w	80187c4 <_strtod_l+0x934>
 8018686:	ea02 0109 	and.w	r1, r2, r9
 801868a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801868e:	f300 8099 	bgt.w	80187c4 <_strtod_l+0x934>
 8018692:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8018696:	f77f aea8 	ble.w	80183ea <_strtod_l+0x55a>
 801869a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8018720 <_strtod_l+0x890>
 801869e:	ec49 8b16 	vmov	d6, r8, r9
 80186a2:	4b23      	ldr	r3, [pc, #140]	; (8018730 <_strtod_l+0x8a0>)
 80186a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80186a8:	ee17 2a90 	vmov	r2, s15
 80186ac:	4013      	ands	r3, r2
 80186ae:	ec59 8b17 	vmov	r8, r9, d7
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	f47f ae34 	bne.w	8018320 <_strtod_l+0x490>
 80186b8:	2322      	movs	r3, #34	; 0x22
 80186ba:	6023      	str	r3, [r4, #0]
 80186bc:	e630      	b.n	8018320 <_strtod_l+0x490>
 80186be:	f04f 31ff 	mov.w	r1, #4294967295
 80186c2:	fa01 f202 	lsl.w	r2, r1, r2
 80186c6:	ea02 0808 	and.w	r8, r2, r8
 80186ca:	e6da      	b.n	8018482 <_strtod_l+0x5f2>
 80186cc:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80186d0:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80186d4:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80186d8:	33e2      	adds	r3, #226	; 0xe2
 80186da:	fa00 f303 	lsl.w	r3, r0, r3
 80186de:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 80186e2:	e73f      	b.n	8018564 <_strtod_l+0x6d4>
 80186e4:	2200      	movs	r2, #0
 80186e6:	2301      	movs	r3, #1
 80186e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80186ec:	e73a      	b.n	8018564 <_strtod_l+0x6d4>
 80186ee:	9912      	ldr	r1, [sp, #72]	; 0x48
 80186f0:	461a      	mov	r2, r3
 80186f2:	4620      	mov	r0, r4
 80186f4:	f7ff f962 	bl	80179bc <__lshift>
 80186f8:	9012      	str	r0, [sp, #72]	; 0x48
 80186fa:	2800      	cmp	r0, #0
 80186fc:	f47f af64 	bne.w	80185c8 <_strtod_l+0x738>
 8018700:	e604      	b.n	801830c <_strtod_l+0x47c>
 8018702:	bf00      	nop
 8018704:	f3af 8000 	nop.w
 8018708:	94a03595 	.word	0x94a03595
 801870c:	3fcfffff 	.word	0x3fcfffff
 8018710:	94a03595 	.word	0x94a03595
 8018714:	3fdfffff 	.word	0x3fdfffff
 8018718:	35afe535 	.word	0x35afe535
 801871c:	3fe00000 	.word	0x3fe00000
 8018720:	00000000 	.word	0x00000000
 8018724:	39500000 	.word	0x39500000
 8018728:	0801a068 	.word	0x0801a068
 801872c:	fffffc02 	.word	0xfffffc02
 8018730:	7ff00000 	.word	0x7ff00000
 8018734:	46cb      	mov	fp, r9
 8018736:	d15f      	bne.n	80187f8 <_strtod_l+0x968>
 8018738:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801873c:	f1ba 0f00 	cmp.w	sl, #0
 8018740:	d02a      	beq.n	8018798 <_strtod_l+0x908>
 8018742:	4aa7      	ldr	r2, [pc, #668]	; (80189e0 <_strtod_l+0xb50>)
 8018744:	4293      	cmp	r3, r2
 8018746:	d12b      	bne.n	80187a0 <_strtod_l+0x910>
 8018748:	9b05      	ldr	r3, [sp, #20]
 801874a:	4642      	mov	r2, r8
 801874c:	b1fb      	cbz	r3, 801878e <_strtod_l+0x8fe>
 801874e:	4ba5      	ldr	r3, [pc, #660]	; (80189e4 <_strtod_l+0xb54>)
 8018750:	ea09 0303 	and.w	r3, r9, r3
 8018754:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8018758:	f04f 31ff 	mov.w	r1, #4294967295
 801875c:	d81a      	bhi.n	8018794 <_strtod_l+0x904>
 801875e:	0d1b      	lsrs	r3, r3, #20
 8018760:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018764:	fa01 f303 	lsl.w	r3, r1, r3
 8018768:	429a      	cmp	r2, r3
 801876a:	d119      	bne.n	80187a0 <_strtod_l+0x910>
 801876c:	4b9e      	ldr	r3, [pc, #632]	; (80189e8 <_strtod_l+0xb58>)
 801876e:	459b      	cmp	fp, r3
 8018770:	d102      	bne.n	8018778 <_strtod_l+0x8e8>
 8018772:	3201      	adds	r2, #1
 8018774:	f43f adca 	beq.w	801830c <_strtod_l+0x47c>
 8018778:	4b9a      	ldr	r3, [pc, #616]	; (80189e4 <_strtod_l+0xb54>)
 801877a:	ea0b 0303 	and.w	r3, fp, r3
 801877e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8018782:	f04f 0800 	mov.w	r8, #0
 8018786:	9b05      	ldr	r3, [sp, #20]
 8018788:	2b00      	cmp	r3, #0
 801878a:	d186      	bne.n	801869a <_strtod_l+0x80a>
 801878c:	e5c8      	b.n	8018320 <_strtod_l+0x490>
 801878e:	f04f 33ff 	mov.w	r3, #4294967295
 8018792:	e7e9      	b.n	8018768 <_strtod_l+0x8d8>
 8018794:	460b      	mov	r3, r1
 8018796:	e7e7      	b.n	8018768 <_strtod_l+0x8d8>
 8018798:	ea53 0308 	orrs.w	r3, r3, r8
 801879c:	f43f af6d 	beq.w	801867a <_strtod_l+0x7ea>
 80187a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80187a2:	b1cb      	cbz	r3, 80187d8 <_strtod_l+0x948>
 80187a4:	ea13 0f0b 	tst.w	r3, fp
 80187a8:	d0ed      	beq.n	8018786 <_strtod_l+0x8f6>
 80187aa:	9a05      	ldr	r2, [sp, #20]
 80187ac:	4640      	mov	r0, r8
 80187ae:	4649      	mov	r1, r9
 80187b0:	f1ba 0f00 	cmp.w	sl, #0
 80187b4:	d014      	beq.n	80187e0 <_strtod_l+0x950>
 80187b6:	f7ff fb51 	bl	8017e5c <sulp>
 80187ba:	ee38 7b00 	vadd.f64	d7, d8, d0
 80187be:	ec59 8b17 	vmov	r8, r9, d7
 80187c2:	e7e0      	b.n	8018786 <_strtod_l+0x8f6>
 80187c4:	4013      	ands	r3, r2
 80187c6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80187ca:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80187ce:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80187d2:	f04f 38ff 	mov.w	r8, #4294967295
 80187d6:	e7d6      	b.n	8018786 <_strtod_l+0x8f6>
 80187d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80187da:	ea13 0f08 	tst.w	r3, r8
 80187de:	e7e3      	b.n	80187a8 <_strtod_l+0x918>
 80187e0:	f7ff fb3c 	bl	8017e5c <sulp>
 80187e4:	ee38 0b40 	vsub.f64	d0, d8, d0
 80187e8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80187ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187f0:	ec59 8b10 	vmov	r8, r9, d0
 80187f4:	d1c7      	bne.n	8018786 <_strtod_l+0x8f6>
 80187f6:	e5f8      	b.n	80183ea <_strtod_l+0x55a>
 80187f8:	4631      	mov	r1, r6
 80187fa:	4628      	mov	r0, r5
 80187fc:	f7ff faba 	bl	8017d74 <__ratio>
 8018800:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8018804:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8018808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801880c:	d85f      	bhi.n	80188ce <_strtod_l+0xa3e>
 801880e:	f1ba 0f00 	cmp.w	sl, #0
 8018812:	d166      	bne.n	80188e2 <_strtod_l+0xa52>
 8018814:	f1b8 0f00 	cmp.w	r8, #0
 8018818:	d14d      	bne.n	80188b6 <_strtod_l+0xa26>
 801881a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801881e:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8018822:	2b00      	cmp	r3, #0
 8018824:	d162      	bne.n	80188ec <_strtod_l+0xa5c>
 8018826:	eeb4 0bcd 	vcmpe.f64	d0, d13
 801882a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801882e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018832:	d401      	bmi.n	8018838 <_strtod_l+0x9a8>
 8018834:	ee20 db0d 	vmul.f64	d13, d0, d13
 8018838:	eeb1 cb4d 	vneg.f64	d12, d13
 801883c:	4869      	ldr	r0, [pc, #420]	; (80189e4 <_strtod_l+0xb54>)
 801883e:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 80189f0 <_strtod_l+0xb60>
 8018842:	ea0b 0100 	and.w	r1, fp, r0
 8018846:	4561      	cmp	r1, ip
 8018848:	ec53 2b1c 	vmov	r2, r3, d12
 801884c:	d17a      	bne.n	8018944 <_strtod_l+0xab4>
 801884e:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8018852:	ec49 8b10 	vmov	d0, r8, r9
 8018856:	910a      	str	r1, [sp, #40]	; 0x28
 8018858:	f7ff f9c2 	bl	8017be0 <__ulp>
 801885c:	ec49 8b1e 	vmov	d14, r8, r9
 8018860:	4860      	ldr	r0, [pc, #384]	; (80189e4 <_strtod_l+0xb54>)
 8018862:	eea0 eb0c 	vfma.f64	d14, d0, d12
 8018866:	ee1e 3a90 	vmov	r3, s29
 801886a:	4a60      	ldr	r2, [pc, #384]	; (80189ec <_strtod_l+0xb5c>)
 801886c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801886e:	4018      	ands	r0, r3
 8018870:	4290      	cmp	r0, r2
 8018872:	ec59 8b1e 	vmov	r8, r9, d14
 8018876:	d93c      	bls.n	80188f2 <_strtod_l+0xa62>
 8018878:	ee18 2a90 	vmov	r2, s17
 801887c:	4b5a      	ldr	r3, [pc, #360]	; (80189e8 <_strtod_l+0xb58>)
 801887e:	429a      	cmp	r2, r3
 8018880:	d104      	bne.n	801888c <_strtod_l+0x9fc>
 8018882:	ee18 3a10 	vmov	r3, s16
 8018886:	3301      	adds	r3, #1
 8018888:	f43f ad40 	beq.w	801830c <_strtod_l+0x47c>
 801888c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80189e8 <_strtod_l+0xb58>
 8018890:	f04f 38ff 	mov.w	r8, #4294967295
 8018894:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018896:	4620      	mov	r0, r4
 8018898:	f7fe fe76 	bl	8017588 <_Bfree>
 801889c:	4639      	mov	r1, r7
 801889e:	4620      	mov	r0, r4
 80188a0:	f7fe fe72 	bl	8017588 <_Bfree>
 80188a4:	4631      	mov	r1, r6
 80188a6:	4620      	mov	r0, r4
 80188a8:	f7fe fe6e 	bl	8017588 <_Bfree>
 80188ac:	4629      	mov	r1, r5
 80188ae:	4620      	mov	r0, r4
 80188b0:	f7fe fe6a 	bl	8017588 <_Bfree>
 80188b4:	e609      	b.n	80184ca <_strtod_l+0x63a>
 80188b6:	f1b8 0f01 	cmp.w	r8, #1
 80188ba:	d103      	bne.n	80188c4 <_strtod_l+0xa34>
 80188bc:	f1b9 0f00 	cmp.w	r9, #0
 80188c0:	f43f ad93 	beq.w	80183ea <_strtod_l+0x55a>
 80188c4:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 80188c8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80188cc:	e7b6      	b.n	801883c <_strtod_l+0x9ac>
 80188ce:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80188d2:	ee20 db0d 	vmul.f64	d13, d0, d13
 80188d6:	f1ba 0f00 	cmp.w	sl, #0
 80188da:	d0ad      	beq.n	8018838 <_strtod_l+0x9a8>
 80188dc:	eeb0 cb4d 	vmov.f64	d12, d13
 80188e0:	e7ac      	b.n	801883c <_strtod_l+0x9ac>
 80188e2:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 80188e6:	eeb0 db4c 	vmov.f64	d13, d12
 80188ea:	e7a7      	b.n	801883c <_strtod_l+0x9ac>
 80188ec:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 80188f0:	e7a4      	b.n	801883c <_strtod_l+0x9ac>
 80188f2:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80188f6:	9b05      	ldr	r3, [sp, #20]
 80188f8:	46cb      	mov	fp, r9
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d1ca      	bne.n	8018894 <_strtod_l+0xa04>
 80188fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8018902:	0d1b      	lsrs	r3, r3, #20
 8018904:	051b      	lsls	r3, r3, #20
 8018906:	4299      	cmp	r1, r3
 8018908:	d1c4      	bne.n	8018894 <_strtod_l+0xa04>
 801890a:	ec51 0b1d 	vmov	r0, r1, d13
 801890e:	f7e7 ff2b 	bl	8000768 <__aeabi_d2lz>
 8018912:	f7e7 fee3 	bl	80006dc <__aeabi_l2d>
 8018916:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 801891a:	ec41 0b17 	vmov	d7, r0, r1
 801891e:	ea4b 0b08 	orr.w	fp, fp, r8
 8018922:	ea5b 0b0a 	orrs.w	fp, fp, sl
 8018926:	ee3d db47 	vsub.f64	d13, d13, d7
 801892a:	d03c      	beq.n	80189a6 <_strtod_l+0xb16>
 801892c:	eeb4 dbca 	vcmpe.f64	d13, d10
 8018930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018934:	f53f acf4 	bmi.w	8018320 <_strtod_l+0x490>
 8018938:	eeb4 dbcb 	vcmpe.f64	d13, d11
 801893c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018940:	dda8      	ble.n	8018894 <_strtod_l+0xa04>
 8018942:	e4ed      	b.n	8018320 <_strtod_l+0x490>
 8018944:	9805      	ldr	r0, [sp, #20]
 8018946:	b1f0      	cbz	r0, 8018986 <_strtod_l+0xaf6>
 8018948:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801894c:	d81b      	bhi.n	8018986 <_strtod_l+0xaf6>
 801894e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 80189d8 <_strtod_l+0xb48>
 8018952:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8018956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801895a:	d811      	bhi.n	8018980 <_strtod_l+0xaf0>
 801895c:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8018960:	ee1d 3a10 	vmov	r3, s26
 8018964:	2b01      	cmp	r3, #1
 8018966:	bf38      	it	cc
 8018968:	2301      	movcc	r3, #1
 801896a:	ee0d 3a10 	vmov	s26, r3
 801896e:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8018972:	f1ba 0f00 	cmp.w	sl, #0
 8018976:	d113      	bne.n	80189a0 <_strtod_l+0xb10>
 8018978:	eeb1 7b4d 	vneg.f64	d7, d13
 801897c:	ec53 2b17 	vmov	r2, r3, d7
 8018980:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8018984:	1a43      	subs	r3, r0, r1
 8018986:	eeb0 0b48 	vmov.f64	d0, d8
 801898a:	ec43 2b1c 	vmov	d12, r2, r3
 801898e:	910a      	str	r1, [sp, #40]	; 0x28
 8018990:	f7ff f926 	bl	8017be0 <__ulp>
 8018994:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018996:	eeac 8b00 	vfma.f64	d8, d12, d0
 801899a:	ec59 8b18 	vmov	r8, r9, d8
 801899e:	e7aa      	b.n	80188f6 <_strtod_l+0xa66>
 80189a0:	eeb0 7b4d 	vmov.f64	d7, d13
 80189a4:	e7ea      	b.n	801897c <_strtod_l+0xaec>
 80189a6:	eeb4 dbc9 	vcmpe.f64	d13, d9
 80189aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189ae:	f57f af71 	bpl.w	8018894 <_strtod_l+0xa04>
 80189b2:	e4b5      	b.n	8018320 <_strtod_l+0x490>
 80189b4:	2300      	movs	r3, #0
 80189b6:	9308      	str	r3, [sp, #32]
 80189b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80189ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80189bc:	6013      	str	r3, [r2, #0]
 80189be:	f7ff baa6 	b.w	8017f0e <_strtod_l+0x7e>
 80189c2:	2a65      	cmp	r2, #101	; 0x65
 80189c4:	f43f aba2 	beq.w	801810c <_strtod_l+0x27c>
 80189c8:	2a45      	cmp	r2, #69	; 0x45
 80189ca:	f43f ab9f 	beq.w	801810c <_strtod_l+0x27c>
 80189ce:	2101      	movs	r1, #1
 80189d0:	f7ff bbd8 	b.w	8018184 <_strtod_l+0x2f4>
 80189d4:	f3af 8000 	nop.w
 80189d8:	ffc00000 	.word	0xffc00000
 80189dc:	41dfffff 	.word	0x41dfffff
 80189e0:	000fffff 	.word	0x000fffff
 80189e4:	7ff00000 	.word	0x7ff00000
 80189e8:	7fefffff 	.word	0x7fefffff
 80189ec:	7c9fffff 	.word	0x7c9fffff
 80189f0:	7fe00000 	.word	0x7fe00000

080189f4 <_strtod_r>:
 80189f4:	4b01      	ldr	r3, [pc, #4]	; (80189fc <_strtod_r+0x8>)
 80189f6:	f7ff ba4b 	b.w	8017e90 <_strtod_l>
 80189fa:	bf00      	nop
 80189fc:	2400015c 	.word	0x2400015c

08018a00 <_strtol_l.constprop.0>:
 8018a00:	2b01      	cmp	r3, #1
 8018a02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a06:	d001      	beq.n	8018a0c <_strtol_l.constprop.0+0xc>
 8018a08:	2b24      	cmp	r3, #36	; 0x24
 8018a0a:	d906      	bls.n	8018a1a <_strtol_l.constprop.0+0x1a>
 8018a0c:	f7fd fe46 	bl	801669c <__errno>
 8018a10:	2316      	movs	r3, #22
 8018a12:	6003      	str	r3, [r0, #0]
 8018a14:	2000      	movs	r0, #0
 8018a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a1a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8018b00 <_strtol_l.constprop.0+0x100>
 8018a1e:	460d      	mov	r5, r1
 8018a20:	462e      	mov	r6, r5
 8018a22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018a26:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8018a2a:	f017 0708 	ands.w	r7, r7, #8
 8018a2e:	d1f7      	bne.n	8018a20 <_strtol_l.constprop.0+0x20>
 8018a30:	2c2d      	cmp	r4, #45	; 0x2d
 8018a32:	d132      	bne.n	8018a9a <_strtol_l.constprop.0+0x9a>
 8018a34:	782c      	ldrb	r4, [r5, #0]
 8018a36:	2701      	movs	r7, #1
 8018a38:	1cb5      	adds	r5, r6, #2
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d05b      	beq.n	8018af6 <_strtol_l.constprop.0+0xf6>
 8018a3e:	2b10      	cmp	r3, #16
 8018a40:	d109      	bne.n	8018a56 <_strtol_l.constprop.0+0x56>
 8018a42:	2c30      	cmp	r4, #48	; 0x30
 8018a44:	d107      	bne.n	8018a56 <_strtol_l.constprop.0+0x56>
 8018a46:	782c      	ldrb	r4, [r5, #0]
 8018a48:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8018a4c:	2c58      	cmp	r4, #88	; 0x58
 8018a4e:	d14d      	bne.n	8018aec <_strtol_l.constprop.0+0xec>
 8018a50:	786c      	ldrb	r4, [r5, #1]
 8018a52:	2310      	movs	r3, #16
 8018a54:	3502      	adds	r5, #2
 8018a56:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8018a5a:	f108 38ff 	add.w	r8, r8, #4294967295
 8018a5e:	f04f 0e00 	mov.w	lr, #0
 8018a62:	fbb8 f9f3 	udiv	r9, r8, r3
 8018a66:	4676      	mov	r6, lr
 8018a68:	fb03 8a19 	mls	sl, r3, r9, r8
 8018a6c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8018a70:	f1bc 0f09 	cmp.w	ip, #9
 8018a74:	d816      	bhi.n	8018aa4 <_strtol_l.constprop.0+0xa4>
 8018a76:	4664      	mov	r4, ip
 8018a78:	42a3      	cmp	r3, r4
 8018a7a:	dd24      	ble.n	8018ac6 <_strtol_l.constprop.0+0xc6>
 8018a7c:	f1be 3fff 	cmp.w	lr, #4294967295
 8018a80:	d008      	beq.n	8018a94 <_strtol_l.constprop.0+0x94>
 8018a82:	45b1      	cmp	r9, r6
 8018a84:	d31c      	bcc.n	8018ac0 <_strtol_l.constprop.0+0xc0>
 8018a86:	d101      	bne.n	8018a8c <_strtol_l.constprop.0+0x8c>
 8018a88:	45a2      	cmp	sl, r4
 8018a8a:	db19      	blt.n	8018ac0 <_strtol_l.constprop.0+0xc0>
 8018a8c:	fb06 4603 	mla	r6, r6, r3, r4
 8018a90:	f04f 0e01 	mov.w	lr, #1
 8018a94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018a98:	e7e8      	b.n	8018a6c <_strtol_l.constprop.0+0x6c>
 8018a9a:	2c2b      	cmp	r4, #43	; 0x2b
 8018a9c:	bf04      	itt	eq
 8018a9e:	782c      	ldrbeq	r4, [r5, #0]
 8018aa0:	1cb5      	addeq	r5, r6, #2
 8018aa2:	e7ca      	b.n	8018a3a <_strtol_l.constprop.0+0x3a>
 8018aa4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8018aa8:	f1bc 0f19 	cmp.w	ip, #25
 8018aac:	d801      	bhi.n	8018ab2 <_strtol_l.constprop.0+0xb2>
 8018aae:	3c37      	subs	r4, #55	; 0x37
 8018ab0:	e7e2      	b.n	8018a78 <_strtol_l.constprop.0+0x78>
 8018ab2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8018ab6:	f1bc 0f19 	cmp.w	ip, #25
 8018aba:	d804      	bhi.n	8018ac6 <_strtol_l.constprop.0+0xc6>
 8018abc:	3c57      	subs	r4, #87	; 0x57
 8018abe:	e7db      	b.n	8018a78 <_strtol_l.constprop.0+0x78>
 8018ac0:	f04f 3eff 	mov.w	lr, #4294967295
 8018ac4:	e7e6      	b.n	8018a94 <_strtol_l.constprop.0+0x94>
 8018ac6:	f1be 3fff 	cmp.w	lr, #4294967295
 8018aca:	d105      	bne.n	8018ad8 <_strtol_l.constprop.0+0xd8>
 8018acc:	2322      	movs	r3, #34	; 0x22
 8018ace:	6003      	str	r3, [r0, #0]
 8018ad0:	4646      	mov	r6, r8
 8018ad2:	b942      	cbnz	r2, 8018ae6 <_strtol_l.constprop.0+0xe6>
 8018ad4:	4630      	mov	r0, r6
 8018ad6:	e79e      	b.n	8018a16 <_strtol_l.constprop.0+0x16>
 8018ad8:	b107      	cbz	r7, 8018adc <_strtol_l.constprop.0+0xdc>
 8018ada:	4276      	negs	r6, r6
 8018adc:	2a00      	cmp	r2, #0
 8018ade:	d0f9      	beq.n	8018ad4 <_strtol_l.constprop.0+0xd4>
 8018ae0:	f1be 0f00 	cmp.w	lr, #0
 8018ae4:	d000      	beq.n	8018ae8 <_strtol_l.constprop.0+0xe8>
 8018ae6:	1e69      	subs	r1, r5, #1
 8018ae8:	6011      	str	r1, [r2, #0]
 8018aea:	e7f3      	b.n	8018ad4 <_strtol_l.constprop.0+0xd4>
 8018aec:	2430      	movs	r4, #48	; 0x30
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d1b1      	bne.n	8018a56 <_strtol_l.constprop.0+0x56>
 8018af2:	2308      	movs	r3, #8
 8018af4:	e7af      	b.n	8018a56 <_strtol_l.constprop.0+0x56>
 8018af6:	2c30      	cmp	r4, #48	; 0x30
 8018af8:	d0a5      	beq.n	8018a46 <_strtol_l.constprop.0+0x46>
 8018afa:	230a      	movs	r3, #10
 8018afc:	e7ab      	b.n	8018a56 <_strtol_l.constprop.0+0x56>
 8018afe:	bf00      	nop
 8018b00:	0801a091 	.word	0x0801a091

08018b04 <_strtol_r>:
 8018b04:	f7ff bf7c 	b.w	8018a00 <_strtol_l.constprop.0>

08018b08 <__ssputs_r>:
 8018b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b0c:	688e      	ldr	r6, [r1, #8]
 8018b0e:	461f      	mov	r7, r3
 8018b10:	42be      	cmp	r6, r7
 8018b12:	680b      	ldr	r3, [r1, #0]
 8018b14:	4682      	mov	sl, r0
 8018b16:	460c      	mov	r4, r1
 8018b18:	4690      	mov	r8, r2
 8018b1a:	d82c      	bhi.n	8018b76 <__ssputs_r+0x6e>
 8018b1c:	898a      	ldrh	r2, [r1, #12]
 8018b1e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018b22:	d026      	beq.n	8018b72 <__ssputs_r+0x6a>
 8018b24:	6965      	ldr	r5, [r4, #20]
 8018b26:	6909      	ldr	r1, [r1, #16]
 8018b28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018b2c:	eba3 0901 	sub.w	r9, r3, r1
 8018b30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018b34:	1c7b      	adds	r3, r7, #1
 8018b36:	444b      	add	r3, r9
 8018b38:	106d      	asrs	r5, r5, #1
 8018b3a:	429d      	cmp	r5, r3
 8018b3c:	bf38      	it	cc
 8018b3e:	461d      	movcc	r5, r3
 8018b40:	0553      	lsls	r3, r2, #21
 8018b42:	d527      	bpl.n	8018b94 <__ssputs_r+0x8c>
 8018b44:	4629      	mov	r1, r5
 8018b46:	f7fe fc53 	bl	80173f0 <_malloc_r>
 8018b4a:	4606      	mov	r6, r0
 8018b4c:	b360      	cbz	r0, 8018ba8 <__ssputs_r+0xa0>
 8018b4e:	6921      	ldr	r1, [r4, #16]
 8018b50:	464a      	mov	r2, r9
 8018b52:	f7fd fdd0 	bl	80166f6 <memcpy>
 8018b56:	89a3      	ldrh	r3, [r4, #12]
 8018b58:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018b60:	81a3      	strh	r3, [r4, #12]
 8018b62:	6126      	str	r6, [r4, #16]
 8018b64:	6165      	str	r5, [r4, #20]
 8018b66:	444e      	add	r6, r9
 8018b68:	eba5 0509 	sub.w	r5, r5, r9
 8018b6c:	6026      	str	r6, [r4, #0]
 8018b6e:	60a5      	str	r5, [r4, #8]
 8018b70:	463e      	mov	r6, r7
 8018b72:	42be      	cmp	r6, r7
 8018b74:	d900      	bls.n	8018b78 <__ssputs_r+0x70>
 8018b76:	463e      	mov	r6, r7
 8018b78:	6820      	ldr	r0, [r4, #0]
 8018b7a:	4632      	mov	r2, r6
 8018b7c:	4641      	mov	r1, r8
 8018b7e:	f000 f9c9 	bl	8018f14 <memmove>
 8018b82:	68a3      	ldr	r3, [r4, #8]
 8018b84:	1b9b      	subs	r3, r3, r6
 8018b86:	60a3      	str	r3, [r4, #8]
 8018b88:	6823      	ldr	r3, [r4, #0]
 8018b8a:	4433      	add	r3, r6
 8018b8c:	6023      	str	r3, [r4, #0]
 8018b8e:	2000      	movs	r0, #0
 8018b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b94:	462a      	mov	r2, r5
 8018b96:	f000 fda0 	bl	80196da <_realloc_r>
 8018b9a:	4606      	mov	r6, r0
 8018b9c:	2800      	cmp	r0, #0
 8018b9e:	d1e0      	bne.n	8018b62 <__ssputs_r+0x5a>
 8018ba0:	6921      	ldr	r1, [r4, #16]
 8018ba2:	4650      	mov	r0, sl
 8018ba4:	f7fe fbb0 	bl	8017308 <_free_r>
 8018ba8:	230c      	movs	r3, #12
 8018baa:	f8ca 3000 	str.w	r3, [sl]
 8018bae:	89a3      	ldrh	r3, [r4, #12]
 8018bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018bb4:	81a3      	strh	r3, [r4, #12]
 8018bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8018bba:	e7e9      	b.n	8018b90 <__ssputs_r+0x88>

08018bbc <_svfiprintf_r>:
 8018bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bc0:	4698      	mov	r8, r3
 8018bc2:	898b      	ldrh	r3, [r1, #12]
 8018bc4:	061b      	lsls	r3, r3, #24
 8018bc6:	b09d      	sub	sp, #116	; 0x74
 8018bc8:	4607      	mov	r7, r0
 8018bca:	460d      	mov	r5, r1
 8018bcc:	4614      	mov	r4, r2
 8018bce:	d50e      	bpl.n	8018bee <_svfiprintf_r+0x32>
 8018bd0:	690b      	ldr	r3, [r1, #16]
 8018bd2:	b963      	cbnz	r3, 8018bee <_svfiprintf_r+0x32>
 8018bd4:	2140      	movs	r1, #64	; 0x40
 8018bd6:	f7fe fc0b 	bl	80173f0 <_malloc_r>
 8018bda:	6028      	str	r0, [r5, #0]
 8018bdc:	6128      	str	r0, [r5, #16]
 8018bde:	b920      	cbnz	r0, 8018bea <_svfiprintf_r+0x2e>
 8018be0:	230c      	movs	r3, #12
 8018be2:	603b      	str	r3, [r7, #0]
 8018be4:	f04f 30ff 	mov.w	r0, #4294967295
 8018be8:	e0d0      	b.n	8018d8c <_svfiprintf_r+0x1d0>
 8018bea:	2340      	movs	r3, #64	; 0x40
 8018bec:	616b      	str	r3, [r5, #20]
 8018bee:	2300      	movs	r3, #0
 8018bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8018bf2:	2320      	movs	r3, #32
 8018bf4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018bf8:	f8cd 800c 	str.w	r8, [sp, #12]
 8018bfc:	2330      	movs	r3, #48	; 0x30
 8018bfe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8018da4 <_svfiprintf_r+0x1e8>
 8018c02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018c06:	f04f 0901 	mov.w	r9, #1
 8018c0a:	4623      	mov	r3, r4
 8018c0c:	469a      	mov	sl, r3
 8018c0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018c12:	b10a      	cbz	r2, 8018c18 <_svfiprintf_r+0x5c>
 8018c14:	2a25      	cmp	r2, #37	; 0x25
 8018c16:	d1f9      	bne.n	8018c0c <_svfiprintf_r+0x50>
 8018c18:	ebba 0b04 	subs.w	fp, sl, r4
 8018c1c:	d00b      	beq.n	8018c36 <_svfiprintf_r+0x7a>
 8018c1e:	465b      	mov	r3, fp
 8018c20:	4622      	mov	r2, r4
 8018c22:	4629      	mov	r1, r5
 8018c24:	4638      	mov	r0, r7
 8018c26:	f7ff ff6f 	bl	8018b08 <__ssputs_r>
 8018c2a:	3001      	adds	r0, #1
 8018c2c:	f000 80a9 	beq.w	8018d82 <_svfiprintf_r+0x1c6>
 8018c30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018c32:	445a      	add	r2, fp
 8018c34:	9209      	str	r2, [sp, #36]	; 0x24
 8018c36:	f89a 3000 	ldrb.w	r3, [sl]
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	f000 80a1 	beq.w	8018d82 <_svfiprintf_r+0x1c6>
 8018c40:	2300      	movs	r3, #0
 8018c42:	f04f 32ff 	mov.w	r2, #4294967295
 8018c46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018c4a:	f10a 0a01 	add.w	sl, sl, #1
 8018c4e:	9304      	str	r3, [sp, #16]
 8018c50:	9307      	str	r3, [sp, #28]
 8018c52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018c56:	931a      	str	r3, [sp, #104]	; 0x68
 8018c58:	4654      	mov	r4, sl
 8018c5a:	2205      	movs	r2, #5
 8018c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c60:	4850      	ldr	r0, [pc, #320]	; (8018da4 <_svfiprintf_r+0x1e8>)
 8018c62:	f7e7 fb55 	bl	8000310 <memchr>
 8018c66:	9a04      	ldr	r2, [sp, #16]
 8018c68:	b9d8      	cbnz	r0, 8018ca2 <_svfiprintf_r+0xe6>
 8018c6a:	06d0      	lsls	r0, r2, #27
 8018c6c:	bf44      	itt	mi
 8018c6e:	2320      	movmi	r3, #32
 8018c70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018c74:	0711      	lsls	r1, r2, #28
 8018c76:	bf44      	itt	mi
 8018c78:	232b      	movmi	r3, #43	; 0x2b
 8018c7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018c7e:	f89a 3000 	ldrb.w	r3, [sl]
 8018c82:	2b2a      	cmp	r3, #42	; 0x2a
 8018c84:	d015      	beq.n	8018cb2 <_svfiprintf_r+0xf6>
 8018c86:	9a07      	ldr	r2, [sp, #28]
 8018c88:	4654      	mov	r4, sl
 8018c8a:	2000      	movs	r0, #0
 8018c8c:	f04f 0c0a 	mov.w	ip, #10
 8018c90:	4621      	mov	r1, r4
 8018c92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018c96:	3b30      	subs	r3, #48	; 0x30
 8018c98:	2b09      	cmp	r3, #9
 8018c9a:	d94d      	bls.n	8018d38 <_svfiprintf_r+0x17c>
 8018c9c:	b1b0      	cbz	r0, 8018ccc <_svfiprintf_r+0x110>
 8018c9e:	9207      	str	r2, [sp, #28]
 8018ca0:	e014      	b.n	8018ccc <_svfiprintf_r+0x110>
 8018ca2:	eba0 0308 	sub.w	r3, r0, r8
 8018ca6:	fa09 f303 	lsl.w	r3, r9, r3
 8018caa:	4313      	orrs	r3, r2
 8018cac:	9304      	str	r3, [sp, #16]
 8018cae:	46a2      	mov	sl, r4
 8018cb0:	e7d2      	b.n	8018c58 <_svfiprintf_r+0x9c>
 8018cb2:	9b03      	ldr	r3, [sp, #12]
 8018cb4:	1d19      	adds	r1, r3, #4
 8018cb6:	681b      	ldr	r3, [r3, #0]
 8018cb8:	9103      	str	r1, [sp, #12]
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	bfbb      	ittet	lt
 8018cbe:	425b      	neglt	r3, r3
 8018cc0:	f042 0202 	orrlt.w	r2, r2, #2
 8018cc4:	9307      	strge	r3, [sp, #28]
 8018cc6:	9307      	strlt	r3, [sp, #28]
 8018cc8:	bfb8      	it	lt
 8018cca:	9204      	strlt	r2, [sp, #16]
 8018ccc:	7823      	ldrb	r3, [r4, #0]
 8018cce:	2b2e      	cmp	r3, #46	; 0x2e
 8018cd0:	d10c      	bne.n	8018cec <_svfiprintf_r+0x130>
 8018cd2:	7863      	ldrb	r3, [r4, #1]
 8018cd4:	2b2a      	cmp	r3, #42	; 0x2a
 8018cd6:	d134      	bne.n	8018d42 <_svfiprintf_r+0x186>
 8018cd8:	9b03      	ldr	r3, [sp, #12]
 8018cda:	1d1a      	adds	r2, r3, #4
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	9203      	str	r2, [sp, #12]
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	bfb8      	it	lt
 8018ce4:	f04f 33ff 	movlt.w	r3, #4294967295
 8018ce8:	3402      	adds	r4, #2
 8018cea:	9305      	str	r3, [sp, #20]
 8018cec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8018db4 <_svfiprintf_r+0x1f8>
 8018cf0:	7821      	ldrb	r1, [r4, #0]
 8018cf2:	2203      	movs	r2, #3
 8018cf4:	4650      	mov	r0, sl
 8018cf6:	f7e7 fb0b 	bl	8000310 <memchr>
 8018cfa:	b138      	cbz	r0, 8018d0c <_svfiprintf_r+0x150>
 8018cfc:	9b04      	ldr	r3, [sp, #16]
 8018cfe:	eba0 000a 	sub.w	r0, r0, sl
 8018d02:	2240      	movs	r2, #64	; 0x40
 8018d04:	4082      	lsls	r2, r0
 8018d06:	4313      	orrs	r3, r2
 8018d08:	3401      	adds	r4, #1
 8018d0a:	9304      	str	r3, [sp, #16]
 8018d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018d10:	4825      	ldr	r0, [pc, #148]	; (8018da8 <_svfiprintf_r+0x1ec>)
 8018d12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018d16:	2206      	movs	r2, #6
 8018d18:	f7e7 fafa 	bl	8000310 <memchr>
 8018d1c:	2800      	cmp	r0, #0
 8018d1e:	d038      	beq.n	8018d92 <_svfiprintf_r+0x1d6>
 8018d20:	4b22      	ldr	r3, [pc, #136]	; (8018dac <_svfiprintf_r+0x1f0>)
 8018d22:	bb1b      	cbnz	r3, 8018d6c <_svfiprintf_r+0x1b0>
 8018d24:	9b03      	ldr	r3, [sp, #12]
 8018d26:	3307      	adds	r3, #7
 8018d28:	f023 0307 	bic.w	r3, r3, #7
 8018d2c:	3308      	adds	r3, #8
 8018d2e:	9303      	str	r3, [sp, #12]
 8018d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d32:	4433      	add	r3, r6
 8018d34:	9309      	str	r3, [sp, #36]	; 0x24
 8018d36:	e768      	b.n	8018c0a <_svfiprintf_r+0x4e>
 8018d38:	fb0c 3202 	mla	r2, ip, r2, r3
 8018d3c:	460c      	mov	r4, r1
 8018d3e:	2001      	movs	r0, #1
 8018d40:	e7a6      	b.n	8018c90 <_svfiprintf_r+0xd4>
 8018d42:	2300      	movs	r3, #0
 8018d44:	3401      	adds	r4, #1
 8018d46:	9305      	str	r3, [sp, #20]
 8018d48:	4619      	mov	r1, r3
 8018d4a:	f04f 0c0a 	mov.w	ip, #10
 8018d4e:	4620      	mov	r0, r4
 8018d50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018d54:	3a30      	subs	r2, #48	; 0x30
 8018d56:	2a09      	cmp	r2, #9
 8018d58:	d903      	bls.n	8018d62 <_svfiprintf_r+0x1a6>
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d0c6      	beq.n	8018cec <_svfiprintf_r+0x130>
 8018d5e:	9105      	str	r1, [sp, #20]
 8018d60:	e7c4      	b.n	8018cec <_svfiprintf_r+0x130>
 8018d62:	fb0c 2101 	mla	r1, ip, r1, r2
 8018d66:	4604      	mov	r4, r0
 8018d68:	2301      	movs	r3, #1
 8018d6a:	e7f0      	b.n	8018d4e <_svfiprintf_r+0x192>
 8018d6c:	ab03      	add	r3, sp, #12
 8018d6e:	9300      	str	r3, [sp, #0]
 8018d70:	462a      	mov	r2, r5
 8018d72:	4b0f      	ldr	r3, [pc, #60]	; (8018db0 <_svfiprintf_r+0x1f4>)
 8018d74:	a904      	add	r1, sp, #16
 8018d76:	4638      	mov	r0, r7
 8018d78:	f7fc fd6a 	bl	8015850 <_printf_float>
 8018d7c:	1c42      	adds	r2, r0, #1
 8018d7e:	4606      	mov	r6, r0
 8018d80:	d1d6      	bne.n	8018d30 <_svfiprintf_r+0x174>
 8018d82:	89ab      	ldrh	r3, [r5, #12]
 8018d84:	065b      	lsls	r3, r3, #25
 8018d86:	f53f af2d 	bmi.w	8018be4 <_svfiprintf_r+0x28>
 8018d8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018d8c:	b01d      	add	sp, #116	; 0x74
 8018d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d92:	ab03      	add	r3, sp, #12
 8018d94:	9300      	str	r3, [sp, #0]
 8018d96:	462a      	mov	r2, r5
 8018d98:	4b05      	ldr	r3, [pc, #20]	; (8018db0 <_svfiprintf_r+0x1f4>)
 8018d9a:	a904      	add	r1, sp, #16
 8018d9c:	4638      	mov	r0, r7
 8018d9e:	f7fc ffdf 	bl	8015d60 <_printf_i>
 8018da2:	e7eb      	b.n	8018d7c <_svfiprintf_r+0x1c0>
 8018da4:	0801a191 	.word	0x0801a191
 8018da8:	0801a19b 	.word	0x0801a19b
 8018dac:	08015851 	.word	0x08015851
 8018db0:	08018b09 	.word	0x08018b09
 8018db4:	0801a197 	.word	0x0801a197

08018db8 <__sflush_r>:
 8018db8:	898a      	ldrh	r2, [r1, #12]
 8018dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018dbe:	4605      	mov	r5, r0
 8018dc0:	0710      	lsls	r0, r2, #28
 8018dc2:	460c      	mov	r4, r1
 8018dc4:	d458      	bmi.n	8018e78 <__sflush_r+0xc0>
 8018dc6:	684b      	ldr	r3, [r1, #4]
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	dc05      	bgt.n	8018dd8 <__sflush_r+0x20>
 8018dcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	dc02      	bgt.n	8018dd8 <__sflush_r+0x20>
 8018dd2:	2000      	movs	r0, #0
 8018dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018dd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018dda:	2e00      	cmp	r6, #0
 8018ddc:	d0f9      	beq.n	8018dd2 <__sflush_r+0x1a>
 8018dde:	2300      	movs	r3, #0
 8018de0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018de4:	682f      	ldr	r7, [r5, #0]
 8018de6:	6a21      	ldr	r1, [r4, #32]
 8018de8:	602b      	str	r3, [r5, #0]
 8018dea:	d032      	beq.n	8018e52 <__sflush_r+0x9a>
 8018dec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018dee:	89a3      	ldrh	r3, [r4, #12]
 8018df0:	075a      	lsls	r2, r3, #29
 8018df2:	d505      	bpl.n	8018e00 <__sflush_r+0x48>
 8018df4:	6863      	ldr	r3, [r4, #4]
 8018df6:	1ac0      	subs	r0, r0, r3
 8018df8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018dfa:	b10b      	cbz	r3, 8018e00 <__sflush_r+0x48>
 8018dfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018dfe:	1ac0      	subs	r0, r0, r3
 8018e00:	2300      	movs	r3, #0
 8018e02:	4602      	mov	r2, r0
 8018e04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018e06:	6a21      	ldr	r1, [r4, #32]
 8018e08:	4628      	mov	r0, r5
 8018e0a:	47b0      	blx	r6
 8018e0c:	1c43      	adds	r3, r0, #1
 8018e0e:	89a3      	ldrh	r3, [r4, #12]
 8018e10:	d106      	bne.n	8018e20 <__sflush_r+0x68>
 8018e12:	6829      	ldr	r1, [r5, #0]
 8018e14:	291d      	cmp	r1, #29
 8018e16:	d82b      	bhi.n	8018e70 <__sflush_r+0xb8>
 8018e18:	4a29      	ldr	r2, [pc, #164]	; (8018ec0 <__sflush_r+0x108>)
 8018e1a:	410a      	asrs	r2, r1
 8018e1c:	07d6      	lsls	r6, r2, #31
 8018e1e:	d427      	bmi.n	8018e70 <__sflush_r+0xb8>
 8018e20:	2200      	movs	r2, #0
 8018e22:	6062      	str	r2, [r4, #4]
 8018e24:	04d9      	lsls	r1, r3, #19
 8018e26:	6922      	ldr	r2, [r4, #16]
 8018e28:	6022      	str	r2, [r4, #0]
 8018e2a:	d504      	bpl.n	8018e36 <__sflush_r+0x7e>
 8018e2c:	1c42      	adds	r2, r0, #1
 8018e2e:	d101      	bne.n	8018e34 <__sflush_r+0x7c>
 8018e30:	682b      	ldr	r3, [r5, #0]
 8018e32:	b903      	cbnz	r3, 8018e36 <__sflush_r+0x7e>
 8018e34:	6560      	str	r0, [r4, #84]	; 0x54
 8018e36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018e38:	602f      	str	r7, [r5, #0]
 8018e3a:	2900      	cmp	r1, #0
 8018e3c:	d0c9      	beq.n	8018dd2 <__sflush_r+0x1a>
 8018e3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018e42:	4299      	cmp	r1, r3
 8018e44:	d002      	beq.n	8018e4c <__sflush_r+0x94>
 8018e46:	4628      	mov	r0, r5
 8018e48:	f7fe fa5e 	bl	8017308 <_free_r>
 8018e4c:	2000      	movs	r0, #0
 8018e4e:	6360      	str	r0, [r4, #52]	; 0x34
 8018e50:	e7c0      	b.n	8018dd4 <__sflush_r+0x1c>
 8018e52:	2301      	movs	r3, #1
 8018e54:	4628      	mov	r0, r5
 8018e56:	47b0      	blx	r6
 8018e58:	1c41      	adds	r1, r0, #1
 8018e5a:	d1c8      	bne.n	8018dee <__sflush_r+0x36>
 8018e5c:	682b      	ldr	r3, [r5, #0]
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d0c5      	beq.n	8018dee <__sflush_r+0x36>
 8018e62:	2b1d      	cmp	r3, #29
 8018e64:	d001      	beq.n	8018e6a <__sflush_r+0xb2>
 8018e66:	2b16      	cmp	r3, #22
 8018e68:	d101      	bne.n	8018e6e <__sflush_r+0xb6>
 8018e6a:	602f      	str	r7, [r5, #0]
 8018e6c:	e7b1      	b.n	8018dd2 <__sflush_r+0x1a>
 8018e6e:	89a3      	ldrh	r3, [r4, #12]
 8018e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e74:	81a3      	strh	r3, [r4, #12]
 8018e76:	e7ad      	b.n	8018dd4 <__sflush_r+0x1c>
 8018e78:	690f      	ldr	r7, [r1, #16]
 8018e7a:	2f00      	cmp	r7, #0
 8018e7c:	d0a9      	beq.n	8018dd2 <__sflush_r+0x1a>
 8018e7e:	0793      	lsls	r3, r2, #30
 8018e80:	680e      	ldr	r6, [r1, #0]
 8018e82:	bf08      	it	eq
 8018e84:	694b      	ldreq	r3, [r1, #20]
 8018e86:	600f      	str	r7, [r1, #0]
 8018e88:	bf18      	it	ne
 8018e8a:	2300      	movne	r3, #0
 8018e8c:	eba6 0807 	sub.w	r8, r6, r7
 8018e90:	608b      	str	r3, [r1, #8]
 8018e92:	f1b8 0f00 	cmp.w	r8, #0
 8018e96:	dd9c      	ble.n	8018dd2 <__sflush_r+0x1a>
 8018e98:	6a21      	ldr	r1, [r4, #32]
 8018e9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018e9c:	4643      	mov	r3, r8
 8018e9e:	463a      	mov	r2, r7
 8018ea0:	4628      	mov	r0, r5
 8018ea2:	47b0      	blx	r6
 8018ea4:	2800      	cmp	r0, #0
 8018ea6:	dc06      	bgt.n	8018eb6 <__sflush_r+0xfe>
 8018ea8:	89a3      	ldrh	r3, [r4, #12]
 8018eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018eae:	81a3      	strh	r3, [r4, #12]
 8018eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8018eb4:	e78e      	b.n	8018dd4 <__sflush_r+0x1c>
 8018eb6:	4407      	add	r7, r0
 8018eb8:	eba8 0800 	sub.w	r8, r8, r0
 8018ebc:	e7e9      	b.n	8018e92 <__sflush_r+0xda>
 8018ebe:	bf00      	nop
 8018ec0:	dfbffffe 	.word	0xdfbffffe

08018ec4 <_fflush_r>:
 8018ec4:	b538      	push	{r3, r4, r5, lr}
 8018ec6:	690b      	ldr	r3, [r1, #16]
 8018ec8:	4605      	mov	r5, r0
 8018eca:	460c      	mov	r4, r1
 8018ecc:	b913      	cbnz	r3, 8018ed4 <_fflush_r+0x10>
 8018ece:	2500      	movs	r5, #0
 8018ed0:	4628      	mov	r0, r5
 8018ed2:	bd38      	pop	{r3, r4, r5, pc}
 8018ed4:	b118      	cbz	r0, 8018ede <_fflush_r+0x1a>
 8018ed6:	6a03      	ldr	r3, [r0, #32]
 8018ed8:	b90b      	cbnz	r3, 8018ede <_fflush_r+0x1a>
 8018eda:	f7fd faf3 	bl	80164c4 <__sinit>
 8018ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018ee2:	2b00      	cmp	r3, #0
 8018ee4:	d0f3      	beq.n	8018ece <_fflush_r+0xa>
 8018ee6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018ee8:	07d0      	lsls	r0, r2, #31
 8018eea:	d404      	bmi.n	8018ef6 <_fflush_r+0x32>
 8018eec:	0599      	lsls	r1, r3, #22
 8018eee:	d402      	bmi.n	8018ef6 <_fflush_r+0x32>
 8018ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018ef2:	f7fd fbfe 	bl	80166f2 <__retarget_lock_acquire_recursive>
 8018ef6:	4628      	mov	r0, r5
 8018ef8:	4621      	mov	r1, r4
 8018efa:	f7ff ff5d 	bl	8018db8 <__sflush_r>
 8018efe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018f00:	07da      	lsls	r2, r3, #31
 8018f02:	4605      	mov	r5, r0
 8018f04:	d4e4      	bmi.n	8018ed0 <_fflush_r+0xc>
 8018f06:	89a3      	ldrh	r3, [r4, #12]
 8018f08:	059b      	lsls	r3, r3, #22
 8018f0a:	d4e1      	bmi.n	8018ed0 <_fflush_r+0xc>
 8018f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018f0e:	f7fd fbf1 	bl	80166f4 <__retarget_lock_release_recursive>
 8018f12:	e7dd      	b.n	8018ed0 <_fflush_r+0xc>

08018f14 <memmove>:
 8018f14:	4288      	cmp	r0, r1
 8018f16:	b510      	push	{r4, lr}
 8018f18:	eb01 0402 	add.w	r4, r1, r2
 8018f1c:	d902      	bls.n	8018f24 <memmove+0x10>
 8018f1e:	4284      	cmp	r4, r0
 8018f20:	4623      	mov	r3, r4
 8018f22:	d807      	bhi.n	8018f34 <memmove+0x20>
 8018f24:	1e43      	subs	r3, r0, #1
 8018f26:	42a1      	cmp	r1, r4
 8018f28:	d008      	beq.n	8018f3c <memmove+0x28>
 8018f2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018f2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018f32:	e7f8      	b.n	8018f26 <memmove+0x12>
 8018f34:	4402      	add	r2, r0
 8018f36:	4601      	mov	r1, r0
 8018f38:	428a      	cmp	r2, r1
 8018f3a:	d100      	bne.n	8018f3e <memmove+0x2a>
 8018f3c:	bd10      	pop	{r4, pc}
 8018f3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018f42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018f46:	e7f7      	b.n	8018f38 <memmove+0x24>

08018f48 <strncmp>:
 8018f48:	b510      	push	{r4, lr}
 8018f4a:	b16a      	cbz	r2, 8018f68 <strncmp+0x20>
 8018f4c:	3901      	subs	r1, #1
 8018f4e:	1884      	adds	r4, r0, r2
 8018f50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018f54:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8018f58:	429a      	cmp	r2, r3
 8018f5a:	d103      	bne.n	8018f64 <strncmp+0x1c>
 8018f5c:	42a0      	cmp	r0, r4
 8018f5e:	d001      	beq.n	8018f64 <strncmp+0x1c>
 8018f60:	2a00      	cmp	r2, #0
 8018f62:	d1f5      	bne.n	8018f50 <strncmp+0x8>
 8018f64:	1ad0      	subs	r0, r2, r3
 8018f66:	bd10      	pop	{r4, pc}
 8018f68:	4610      	mov	r0, r2
 8018f6a:	e7fc      	b.n	8018f66 <strncmp+0x1e>

08018f6c <_sbrk_r>:
 8018f6c:	b538      	push	{r3, r4, r5, lr}
 8018f6e:	4d06      	ldr	r5, [pc, #24]	; (8018f88 <_sbrk_r+0x1c>)
 8018f70:	2300      	movs	r3, #0
 8018f72:	4604      	mov	r4, r0
 8018f74:	4608      	mov	r0, r1
 8018f76:	602b      	str	r3, [r5, #0]
 8018f78:	f7e9 fdfe 	bl	8002b78 <_sbrk>
 8018f7c:	1c43      	adds	r3, r0, #1
 8018f7e:	d102      	bne.n	8018f86 <_sbrk_r+0x1a>
 8018f80:	682b      	ldr	r3, [r5, #0]
 8018f82:	b103      	cbz	r3, 8018f86 <_sbrk_r+0x1a>
 8018f84:	6023      	str	r3, [r4, #0]
 8018f86:	bd38      	pop	{r3, r4, r5, pc}
 8018f88:	24002a88 	.word	0x24002a88
 8018f8c:	00000000 	.word	0x00000000

08018f90 <nan>:
 8018f90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018f98 <nan+0x8>
 8018f94:	4770      	bx	lr
 8018f96:	bf00      	nop
 8018f98:	00000000 	.word	0x00000000
 8018f9c:	7ff80000 	.word	0x7ff80000

08018fa0 <__assert_func>:
 8018fa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018fa2:	4614      	mov	r4, r2
 8018fa4:	461a      	mov	r2, r3
 8018fa6:	4b09      	ldr	r3, [pc, #36]	; (8018fcc <__assert_func+0x2c>)
 8018fa8:	681b      	ldr	r3, [r3, #0]
 8018faa:	4605      	mov	r5, r0
 8018fac:	68d8      	ldr	r0, [r3, #12]
 8018fae:	b14c      	cbz	r4, 8018fc4 <__assert_func+0x24>
 8018fb0:	4b07      	ldr	r3, [pc, #28]	; (8018fd0 <__assert_func+0x30>)
 8018fb2:	9100      	str	r1, [sp, #0]
 8018fb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018fb8:	4906      	ldr	r1, [pc, #24]	; (8018fd4 <__assert_func+0x34>)
 8018fba:	462b      	mov	r3, r5
 8018fbc:	f000 fbca 	bl	8019754 <fiprintf>
 8018fc0:	f000 fbda 	bl	8019778 <abort>
 8018fc4:	4b04      	ldr	r3, [pc, #16]	; (8018fd8 <__assert_func+0x38>)
 8018fc6:	461c      	mov	r4, r3
 8018fc8:	e7f3      	b.n	8018fb2 <__assert_func+0x12>
 8018fca:	bf00      	nop
 8018fcc:	24000158 	.word	0x24000158
 8018fd0:	0801a1aa 	.word	0x0801a1aa
 8018fd4:	0801a1b7 	.word	0x0801a1b7
 8018fd8:	0801a1e5 	.word	0x0801a1e5

08018fdc <_calloc_r>:
 8018fdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018fde:	fba1 2402 	umull	r2, r4, r1, r2
 8018fe2:	b94c      	cbnz	r4, 8018ff8 <_calloc_r+0x1c>
 8018fe4:	4611      	mov	r1, r2
 8018fe6:	9201      	str	r2, [sp, #4]
 8018fe8:	f7fe fa02 	bl	80173f0 <_malloc_r>
 8018fec:	9a01      	ldr	r2, [sp, #4]
 8018fee:	4605      	mov	r5, r0
 8018ff0:	b930      	cbnz	r0, 8019000 <_calloc_r+0x24>
 8018ff2:	4628      	mov	r0, r5
 8018ff4:	b003      	add	sp, #12
 8018ff6:	bd30      	pop	{r4, r5, pc}
 8018ff8:	220c      	movs	r2, #12
 8018ffa:	6002      	str	r2, [r0, #0]
 8018ffc:	2500      	movs	r5, #0
 8018ffe:	e7f8      	b.n	8018ff2 <_calloc_r+0x16>
 8019000:	4621      	mov	r1, r4
 8019002:	f7fd faf8 	bl	80165f6 <memset>
 8019006:	e7f4      	b.n	8018ff2 <_calloc_r+0x16>

08019008 <rshift>:
 8019008:	6903      	ldr	r3, [r0, #16]
 801900a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801900e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019012:	ea4f 1261 	mov.w	r2, r1, asr #5
 8019016:	f100 0414 	add.w	r4, r0, #20
 801901a:	dd45      	ble.n	80190a8 <rshift+0xa0>
 801901c:	f011 011f 	ands.w	r1, r1, #31
 8019020:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8019024:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8019028:	d10c      	bne.n	8019044 <rshift+0x3c>
 801902a:	f100 0710 	add.w	r7, r0, #16
 801902e:	4629      	mov	r1, r5
 8019030:	42b1      	cmp	r1, r6
 8019032:	d334      	bcc.n	801909e <rshift+0x96>
 8019034:	1a9b      	subs	r3, r3, r2
 8019036:	009b      	lsls	r3, r3, #2
 8019038:	1eea      	subs	r2, r5, #3
 801903a:	4296      	cmp	r6, r2
 801903c:	bf38      	it	cc
 801903e:	2300      	movcc	r3, #0
 8019040:	4423      	add	r3, r4
 8019042:	e015      	b.n	8019070 <rshift+0x68>
 8019044:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8019048:	f1c1 0820 	rsb	r8, r1, #32
 801904c:	40cf      	lsrs	r7, r1
 801904e:	f105 0e04 	add.w	lr, r5, #4
 8019052:	46a1      	mov	r9, r4
 8019054:	4576      	cmp	r6, lr
 8019056:	46f4      	mov	ip, lr
 8019058:	d815      	bhi.n	8019086 <rshift+0x7e>
 801905a:	1a9a      	subs	r2, r3, r2
 801905c:	0092      	lsls	r2, r2, #2
 801905e:	3a04      	subs	r2, #4
 8019060:	3501      	adds	r5, #1
 8019062:	42ae      	cmp	r6, r5
 8019064:	bf38      	it	cc
 8019066:	2200      	movcc	r2, #0
 8019068:	18a3      	adds	r3, r4, r2
 801906a:	50a7      	str	r7, [r4, r2]
 801906c:	b107      	cbz	r7, 8019070 <rshift+0x68>
 801906e:	3304      	adds	r3, #4
 8019070:	1b1a      	subs	r2, r3, r4
 8019072:	42a3      	cmp	r3, r4
 8019074:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8019078:	bf08      	it	eq
 801907a:	2300      	moveq	r3, #0
 801907c:	6102      	str	r2, [r0, #16]
 801907e:	bf08      	it	eq
 8019080:	6143      	streq	r3, [r0, #20]
 8019082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019086:	f8dc c000 	ldr.w	ip, [ip]
 801908a:	fa0c fc08 	lsl.w	ip, ip, r8
 801908e:	ea4c 0707 	orr.w	r7, ip, r7
 8019092:	f849 7b04 	str.w	r7, [r9], #4
 8019096:	f85e 7b04 	ldr.w	r7, [lr], #4
 801909a:	40cf      	lsrs	r7, r1
 801909c:	e7da      	b.n	8019054 <rshift+0x4c>
 801909e:	f851 cb04 	ldr.w	ip, [r1], #4
 80190a2:	f847 cf04 	str.w	ip, [r7, #4]!
 80190a6:	e7c3      	b.n	8019030 <rshift+0x28>
 80190a8:	4623      	mov	r3, r4
 80190aa:	e7e1      	b.n	8019070 <rshift+0x68>

080190ac <__hexdig_fun>:
 80190ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80190b0:	2b09      	cmp	r3, #9
 80190b2:	d802      	bhi.n	80190ba <__hexdig_fun+0xe>
 80190b4:	3820      	subs	r0, #32
 80190b6:	b2c0      	uxtb	r0, r0
 80190b8:	4770      	bx	lr
 80190ba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80190be:	2b05      	cmp	r3, #5
 80190c0:	d801      	bhi.n	80190c6 <__hexdig_fun+0x1a>
 80190c2:	3847      	subs	r0, #71	; 0x47
 80190c4:	e7f7      	b.n	80190b6 <__hexdig_fun+0xa>
 80190c6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80190ca:	2b05      	cmp	r3, #5
 80190cc:	d801      	bhi.n	80190d2 <__hexdig_fun+0x26>
 80190ce:	3827      	subs	r0, #39	; 0x27
 80190d0:	e7f1      	b.n	80190b6 <__hexdig_fun+0xa>
 80190d2:	2000      	movs	r0, #0
 80190d4:	4770      	bx	lr
	...

080190d8 <__gethex>:
 80190d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190dc:	4617      	mov	r7, r2
 80190de:	680a      	ldr	r2, [r1, #0]
 80190e0:	b085      	sub	sp, #20
 80190e2:	f102 0b02 	add.w	fp, r2, #2
 80190e6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80190ea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80190ee:	4681      	mov	r9, r0
 80190f0:	468a      	mov	sl, r1
 80190f2:	9302      	str	r3, [sp, #8]
 80190f4:	32fe      	adds	r2, #254	; 0xfe
 80190f6:	eb02 030b 	add.w	r3, r2, fp
 80190fa:	46d8      	mov	r8, fp
 80190fc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8019100:	9301      	str	r3, [sp, #4]
 8019102:	2830      	cmp	r0, #48	; 0x30
 8019104:	d0f7      	beq.n	80190f6 <__gethex+0x1e>
 8019106:	f7ff ffd1 	bl	80190ac <__hexdig_fun>
 801910a:	4604      	mov	r4, r0
 801910c:	2800      	cmp	r0, #0
 801910e:	d138      	bne.n	8019182 <__gethex+0xaa>
 8019110:	49a7      	ldr	r1, [pc, #668]	; (80193b0 <__gethex+0x2d8>)
 8019112:	2201      	movs	r2, #1
 8019114:	4640      	mov	r0, r8
 8019116:	f7ff ff17 	bl	8018f48 <strncmp>
 801911a:	4606      	mov	r6, r0
 801911c:	2800      	cmp	r0, #0
 801911e:	d169      	bne.n	80191f4 <__gethex+0x11c>
 8019120:	f898 0001 	ldrb.w	r0, [r8, #1]
 8019124:	465d      	mov	r5, fp
 8019126:	f7ff ffc1 	bl	80190ac <__hexdig_fun>
 801912a:	2800      	cmp	r0, #0
 801912c:	d064      	beq.n	80191f8 <__gethex+0x120>
 801912e:	465a      	mov	r2, fp
 8019130:	7810      	ldrb	r0, [r2, #0]
 8019132:	2830      	cmp	r0, #48	; 0x30
 8019134:	4690      	mov	r8, r2
 8019136:	f102 0201 	add.w	r2, r2, #1
 801913a:	d0f9      	beq.n	8019130 <__gethex+0x58>
 801913c:	f7ff ffb6 	bl	80190ac <__hexdig_fun>
 8019140:	2301      	movs	r3, #1
 8019142:	fab0 f480 	clz	r4, r0
 8019146:	0964      	lsrs	r4, r4, #5
 8019148:	465e      	mov	r6, fp
 801914a:	9301      	str	r3, [sp, #4]
 801914c:	4642      	mov	r2, r8
 801914e:	4615      	mov	r5, r2
 8019150:	3201      	adds	r2, #1
 8019152:	7828      	ldrb	r0, [r5, #0]
 8019154:	f7ff ffaa 	bl	80190ac <__hexdig_fun>
 8019158:	2800      	cmp	r0, #0
 801915a:	d1f8      	bne.n	801914e <__gethex+0x76>
 801915c:	4994      	ldr	r1, [pc, #592]	; (80193b0 <__gethex+0x2d8>)
 801915e:	2201      	movs	r2, #1
 8019160:	4628      	mov	r0, r5
 8019162:	f7ff fef1 	bl	8018f48 <strncmp>
 8019166:	b978      	cbnz	r0, 8019188 <__gethex+0xb0>
 8019168:	b946      	cbnz	r6, 801917c <__gethex+0xa4>
 801916a:	1c6e      	adds	r6, r5, #1
 801916c:	4632      	mov	r2, r6
 801916e:	4615      	mov	r5, r2
 8019170:	3201      	adds	r2, #1
 8019172:	7828      	ldrb	r0, [r5, #0]
 8019174:	f7ff ff9a 	bl	80190ac <__hexdig_fun>
 8019178:	2800      	cmp	r0, #0
 801917a:	d1f8      	bne.n	801916e <__gethex+0x96>
 801917c:	1b73      	subs	r3, r6, r5
 801917e:	009e      	lsls	r6, r3, #2
 8019180:	e004      	b.n	801918c <__gethex+0xb4>
 8019182:	2400      	movs	r4, #0
 8019184:	4626      	mov	r6, r4
 8019186:	e7e1      	b.n	801914c <__gethex+0x74>
 8019188:	2e00      	cmp	r6, #0
 801918a:	d1f7      	bne.n	801917c <__gethex+0xa4>
 801918c:	782b      	ldrb	r3, [r5, #0]
 801918e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019192:	2b50      	cmp	r3, #80	; 0x50
 8019194:	d13d      	bne.n	8019212 <__gethex+0x13a>
 8019196:	786b      	ldrb	r3, [r5, #1]
 8019198:	2b2b      	cmp	r3, #43	; 0x2b
 801919a:	d02f      	beq.n	80191fc <__gethex+0x124>
 801919c:	2b2d      	cmp	r3, #45	; 0x2d
 801919e:	d031      	beq.n	8019204 <__gethex+0x12c>
 80191a0:	1c69      	adds	r1, r5, #1
 80191a2:	f04f 0b00 	mov.w	fp, #0
 80191a6:	7808      	ldrb	r0, [r1, #0]
 80191a8:	f7ff ff80 	bl	80190ac <__hexdig_fun>
 80191ac:	1e42      	subs	r2, r0, #1
 80191ae:	b2d2      	uxtb	r2, r2
 80191b0:	2a18      	cmp	r2, #24
 80191b2:	d82e      	bhi.n	8019212 <__gethex+0x13a>
 80191b4:	f1a0 0210 	sub.w	r2, r0, #16
 80191b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80191bc:	f7ff ff76 	bl	80190ac <__hexdig_fun>
 80191c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80191c4:	fa5f fc8c 	uxtb.w	ip, ip
 80191c8:	f1bc 0f18 	cmp.w	ip, #24
 80191cc:	d91d      	bls.n	801920a <__gethex+0x132>
 80191ce:	f1bb 0f00 	cmp.w	fp, #0
 80191d2:	d000      	beq.n	80191d6 <__gethex+0xfe>
 80191d4:	4252      	negs	r2, r2
 80191d6:	4416      	add	r6, r2
 80191d8:	f8ca 1000 	str.w	r1, [sl]
 80191dc:	b1dc      	cbz	r4, 8019216 <__gethex+0x13e>
 80191de:	9b01      	ldr	r3, [sp, #4]
 80191e0:	2b00      	cmp	r3, #0
 80191e2:	bf14      	ite	ne
 80191e4:	f04f 0800 	movne.w	r8, #0
 80191e8:	f04f 0806 	moveq.w	r8, #6
 80191ec:	4640      	mov	r0, r8
 80191ee:	b005      	add	sp, #20
 80191f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191f4:	4645      	mov	r5, r8
 80191f6:	4626      	mov	r6, r4
 80191f8:	2401      	movs	r4, #1
 80191fa:	e7c7      	b.n	801918c <__gethex+0xb4>
 80191fc:	f04f 0b00 	mov.w	fp, #0
 8019200:	1ca9      	adds	r1, r5, #2
 8019202:	e7d0      	b.n	80191a6 <__gethex+0xce>
 8019204:	f04f 0b01 	mov.w	fp, #1
 8019208:	e7fa      	b.n	8019200 <__gethex+0x128>
 801920a:	230a      	movs	r3, #10
 801920c:	fb03 0002 	mla	r0, r3, r2, r0
 8019210:	e7d0      	b.n	80191b4 <__gethex+0xdc>
 8019212:	4629      	mov	r1, r5
 8019214:	e7e0      	b.n	80191d8 <__gethex+0x100>
 8019216:	eba5 0308 	sub.w	r3, r5, r8
 801921a:	3b01      	subs	r3, #1
 801921c:	4621      	mov	r1, r4
 801921e:	2b07      	cmp	r3, #7
 8019220:	dc0a      	bgt.n	8019238 <__gethex+0x160>
 8019222:	4648      	mov	r0, r9
 8019224:	f7fe f970 	bl	8017508 <_Balloc>
 8019228:	4604      	mov	r4, r0
 801922a:	b940      	cbnz	r0, 801923e <__gethex+0x166>
 801922c:	4b61      	ldr	r3, [pc, #388]	; (80193b4 <__gethex+0x2dc>)
 801922e:	4602      	mov	r2, r0
 8019230:	21e4      	movs	r1, #228	; 0xe4
 8019232:	4861      	ldr	r0, [pc, #388]	; (80193b8 <__gethex+0x2e0>)
 8019234:	f7ff feb4 	bl	8018fa0 <__assert_func>
 8019238:	3101      	adds	r1, #1
 801923a:	105b      	asrs	r3, r3, #1
 801923c:	e7ef      	b.n	801921e <__gethex+0x146>
 801923e:	f100 0a14 	add.w	sl, r0, #20
 8019242:	2300      	movs	r3, #0
 8019244:	495a      	ldr	r1, [pc, #360]	; (80193b0 <__gethex+0x2d8>)
 8019246:	f8cd a004 	str.w	sl, [sp, #4]
 801924a:	469b      	mov	fp, r3
 801924c:	45a8      	cmp	r8, r5
 801924e:	d342      	bcc.n	80192d6 <__gethex+0x1fe>
 8019250:	9801      	ldr	r0, [sp, #4]
 8019252:	f840 bb04 	str.w	fp, [r0], #4
 8019256:	eba0 000a 	sub.w	r0, r0, sl
 801925a:	1080      	asrs	r0, r0, #2
 801925c:	6120      	str	r0, [r4, #16]
 801925e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8019262:	4658      	mov	r0, fp
 8019264:	f7fe fa42 	bl	80176ec <__hi0bits>
 8019268:	683d      	ldr	r5, [r7, #0]
 801926a:	eba8 0000 	sub.w	r0, r8, r0
 801926e:	42a8      	cmp	r0, r5
 8019270:	dd59      	ble.n	8019326 <__gethex+0x24e>
 8019272:	eba0 0805 	sub.w	r8, r0, r5
 8019276:	4641      	mov	r1, r8
 8019278:	4620      	mov	r0, r4
 801927a:	f7fe fdce 	bl	8017e1a <__any_on>
 801927e:	4683      	mov	fp, r0
 8019280:	b1b8      	cbz	r0, 80192b2 <__gethex+0x1da>
 8019282:	f108 33ff 	add.w	r3, r8, #4294967295
 8019286:	1159      	asrs	r1, r3, #5
 8019288:	f003 021f 	and.w	r2, r3, #31
 801928c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8019290:	f04f 0b01 	mov.w	fp, #1
 8019294:	fa0b f202 	lsl.w	r2, fp, r2
 8019298:	420a      	tst	r2, r1
 801929a:	d00a      	beq.n	80192b2 <__gethex+0x1da>
 801929c:	455b      	cmp	r3, fp
 801929e:	dd06      	ble.n	80192ae <__gethex+0x1d6>
 80192a0:	f1a8 0102 	sub.w	r1, r8, #2
 80192a4:	4620      	mov	r0, r4
 80192a6:	f7fe fdb8 	bl	8017e1a <__any_on>
 80192aa:	2800      	cmp	r0, #0
 80192ac:	d138      	bne.n	8019320 <__gethex+0x248>
 80192ae:	f04f 0b02 	mov.w	fp, #2
 80192b2:	4641      	mov	r1, r8
 80192b4:	4620      	mov	r0, r4
 80192b6:	f7ff fea7 	bl	8019008 <rshift>
 80192ba:	4446      	add	r6, r8
 80192bc:	68bb      	ldr	r3, [r7, #8]
 80192be:	42b3      	cmp	r3, r6
 80192c0:	da41      	bge.n	8019346 <__gethex+0x26e>
 80192c2:	4621      	mov	r1, r4
 80192c4:	4648      	mov	r0, r9
 80192c6:	f7fe f95f 	bl	8017588 <_Bfree>
 80192ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80192cc:	2300      	movs	r3, #0
 80192ce:	6013      	str	r3, [r2, #0]
 80192d0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80192d4:	e78a      	b.n	80191ec <__gethex+0x114>
 80192d6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80192da:	2a2e      	cmp	r2, #46	; 0x2e
 80192dc:	d014      	beq.n	8019308 <__gethex+0x230>
 80192de:	2b20      	cmp	r3, #32
 80192e0:	d106      	bne.n	80192f0 <__gethex+0x218>
 80192e2:	9b01      	ldr	r3, [sp, #4]
 80192e4:	f843 bb04 	str.w	fp, [r3], #4
 80192e8:	f04f 0b00 	mov.w	fp, #0
 80192ec:	9301      	str	r3, [sp, #4]
 80192ee:	465b      	mov	r3, fp
 80192f0:	7828      	ldrb	r0, [r5, #0]
 80192f2:	9303      	str	r3, [sp, #12]
 80192f4:	f7ff feda 	bl	80190ac <__hexdig_fun>
 80192f8:	9b03      	ldr	r3, [sp, #12]
 80192fa:	f000 000f 	and.w	r0, r0, #15
 80192fe:	4098      	lsls	r0, r3
 8019300:	ea4b 0b00 	orr.w	fp, fp, r0
 8019304:	3304      	adds	r3, #4
 8019306:	e7a1      	b.n	801924c <__gethex+0x174>
 8019308:	45a8      	cmp	r8, r5
 801930a:	d8e8      	bhi.n	80192de <__gethex+0x206>
 801930c:	2201      	movs	r2, #1
 801930e:	4628      	mov	r0, r5
 8019310:	9303      	str	r3, [sp, #12]
 8019312:	f7ff fe19 	bl	8018f48 <strncmp>
 8019316:	4926      	ldr	r1, [pc, #152]	; (80193b0 <__gethex+0x2d8>)
 8019318:	9b03      	ldr	r3, [sp, #12]
 801931a:	2800      	cmp	r0, #0
 801931c:	d1df      	bne.n	80192de <__gethex+0x206>
 801931e:	e795      	b.n	801924c <__gethex+0x174>
 8019320:	f04f 0b03 	mov.w	fp, #3
 8019324:	e7c5      	b.n	80192b2 <__gethex+0x1da>
 8019326:	da0b      	bge.n	8019340 <__gethex+0x268>
 8019328:	eba5 0800 	sub.w	r8, r5, r0
 801932c:	4621      	mov	r1, r4
 801932e:	4642      	mov	r2, r8
 8019330:	4648      	mov	r0, r9
 8019332:	f7fe fb43 	bl	80179bc <__lshift>
 8019336:	eba6 0608 	sub.w	r6, r6, r8
 801933a:	4604      	mov	r4, r0
 801933c:	f100 0a14 	add.w	sl, r0, #20
 8019340:	f04f 0b00 	mov.w	fp, #0
 8019344:	e7ba      	b.n	80192bc <__gethex+0x1e4>
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	42b3      	cmp	r3, r6
 801934a:	dd73      	ble.n	8019434 <__gethex+0x35c>
 801934c:	1b9e      	subs	r6, r3, r6
 801934e:	42b5      	cmp	r5, r6
 8019350:	dc34      	bgt.n	80193bc <__gethex+0x2e4>
 8019352:	68fb      	ldr	r3, [r7, #12]
 8019354:	2b02      	cmp	r3, #2
 8019356:	d023      	beq.n	80193a0 <__gethex+0x2c8>
 8019358:	2b03      	cmp	r3, #3
 801935a:	d025      	beq.n	80193a8 <__gethex+0x2d0>
 801935c:	2b01      	cmp	r3, #1
 801935e:	d115      	bne.n	801938c <__gethex+0x2b4>
 8019360:	42b5      	cmp	r5, r6
 8019362:	d113      	bne.n	801938c <__gethex+0x2b4>
 8019364:	2d01      	cmp	r5, #1
 8019366:	d10b      	bne.n	8019380 <__gethex+0x2a8>
 8019368:	9a02      	ldr	r2, [sp, #8]
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	6013      	str	r3, [r2, #0]
 801936e:	2301      	movs	r3, #1
 8019370:	6123      	str	r3, [r4, #16]
 8019372:	f8ca 3000 	str.w	r3, [sl]
 8019376:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019378:	f04f 0862 	mov.w	r8, #98	; 0x62
 801937c:	601c      	str	r4, [r3, #0]
 801937e:	e735      	b.n	80191ec <__gethex+0x114>
 8019380:	1e69      	subs	r1, r5, #1
 8019382:	4620      	mov	r0, r4
 8019384:	f7fe fd49 	bl	8017e1a <__any_on>
 8019388:	2800      	cmp	r0, #0
 801938a:	d1ed      	bne.n	8019368 <__gethex+0x290>
 801938c:	4621      	mov	r1, r4
 801938e:	4648      	mov	r0, r9
 8019390:	f7fe f8fa 	bl	8017588 <_Bfree>
 8019394:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019396:	2300      	movs	r3, #0
 8019398:	6013      	str	r3, [r2, #0]
 801939a:	f04f 0850 	mov.w	r8, #80	; 0x50
 801939e:	e725      	b.n	80191ec <__gethex+0x114>
 80193a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80193a2:	2b00      	cmp	r3, #0
 80193a4:	d1f2      	bne.n	801938c <__gethex+0x2b4>
 80193a6:	e7df      	b.n	8019368 <__gethex+0x290>
 80193a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80193aa:	2b00      	cmp	r3, #0
 80193ac:	d1dc      	bne.n	8019368 <__gethex+0x290>
 80193ae:	e7ed      	b.n	801938c <__gethex+0x2b4>
 80193b0:	0801a03c 	.word	0x0801a03c
 80193b4:	08019ed1 	.word	0x08019ed1
 80193b8:	0801a1e6 	.word	0x0801a1e6
 80193bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80193c0:	f1bb 0f00 	cmp.w	fp, #0
 80193c4:	d133      	bne.n	801942e <__gethex+0x356>
 80193c6:	f1b8 0f00 	cmp.w	r8, #0
 80193ca:	d004      	beq.n	80193d6 <__gethex+0x2fe>
 80193cc:	4641      	mov	r1, r8
 80193ce:	4620      	mov	r0, r4
 80193d0:	f7fe fd23 	bl	8017e1a <__any_on>
 80193d4:	4683      	mov	fp, r0
 80193d6:	ea4f 1268 	mov.w	r2, r8, asr #5
 80193da:	2301      	movs	r3, #1
 80193dc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80193e0:	f008 081f 	and.w	r8, r8, #31
 80193e4:	fa03 f308 	lsl.w	r3, r3, r8
 80193e8:	4213      	tst	r3, r2
 80193ea:	4631      	mov	r1, r6
 80193ec:	4620      	mov	r0, r4
 80193ee:	bf18      	it	ne
 80193f0:	f04b 0b02 	orrne.w	fp, fp, #2
 80193f4:	1bad      	subs	r5, r5, r6
 80193f6:	f7ff fe07 	bl	8019008 <rshift>
 80193fa:	687e      	ldr	r6, [r7, #4]
 80193fc:	f04f 0802 	mov.w	r8, #2
 8019400:	f1bb 0f00 	cmp.w	fp, #0
 8019404:	d04a      	beq.n	801949c <__gethex+0x3c4>
 8019406:	68fb      	ldr	r3, [r7, #12]
 8019408:	2b02      	cmp	r3, #2
 801940a:	d016      	beq.n	801943a <__gethex+0x362>
 801940c:	2b03      	cmp	r3, #3
 801940e:	d018      	beq.n	8019442 <__gethex+0x36a>
 8019410:	2b01      	cmp	r3, #1
 8019412:	d109      	bne.n	8019428 <__gethex+0x350>
 8019414:	f01b 0f02 	tst.w	fp, #2
 8019418:	d006      	beq.n	8019428 <__gethex+0x350>
 801941a:	f8da 3000 	ldr.w	r3, [sl]
 801941e:	ea4b 0b03 	orr.w	fp, fp, r3
 8019422:	f01b 0f01 	tst.w	fp, #1
 8019426:	d10f      	bne.n	8019448 <__gethex+0x370>
 8019428:	f048 0810 	orr.w	r8, r8, #16
 801942c:	e036      	b.n	801949c <__gethex+0x3c4>
 801942e:	f04f 0b01 	mov.w	fp, #1
 8019432:	e7d0      	b.n	80193d6 <__gethex+0x2fe>
 8019434:	f04f 0801 	mov.w	r8, #1
 8019438:	e7e2      	b.n	8019400 <__gethex+0x328>
 801943a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801943c:	f1c3 0301 	rsb	r3, r3, #1
 8019440:	930f      	str	r3, [sp, #60]	; 0x3c
 8019442:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019444:	2b00      	cmp	r3, #0
 8019446:	d0ef      	beq.n	8019428 <__gethex+0x350>
 8019448:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801944c:	f104 0214 	add.w	r2, r4, #20
 8019450:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8019454:	9301      	str	r3, [sp, #4]
 8019456:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801945a:	2300      	movs	r3, #0
 801945c:	4694      	mov	ip, r2
 801945e:	f852 1b04 	ldr.w	r1, [r2], #4
 8019462:	f1b1 3fff 	cmp.w	r1, #4294967295
 8019466:	d01e      	beq.n	80194a6 <__gethex+0x3ce>
 8019468:	3101      	adds	r1, #1
 801946a:	f8cc 1000 	str.w	r1, [ip]
 801946e:	f1b8 0f02 	cmp.w	r8, #2
 8019472:	f104 0214 	add.w	r2, r4, #20
 8019476:	d13d      	bne.n	80194f4 <__gethex+0x41c>
 8019478:	683b      	ldr	r3, [r7, #0]
 801947a:	3b01      	subs	r3, #1
 801947c:	42ab      	cmp	r3, r5
 801947e:	d10b      	bne.n	8019498 <__gethex+0x3c0>
 8019480:	1169      	asrs	r1, r5, #5
 8019482:	2301      	movs	r3, #1
 8019484:	f005 051f 	and.w	r5, r5, #31
 8019488:	fa03 f505 	lsl.w	r5, r3, r5
 801948c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019490:	421d      	tst	r5, r3
 8019492:	bf18      	it	ne
 8019494:	f04f 0801 	movne.w	r8, #1
 8019498:	f048 0820 	orr.w	r8, r8, #32
 801949c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801949e:	601c      	str	r4, [r3, #0]
 80194a0:	9b02      	ldr	r3, [sp, #8]
 80194a2:	601e      	str	r6, [r3, #0]
 80194a4:	e6a2      	b.n	80191ec <__gethex+0x114>
 80194a6:	4290      	cmp	r0, r2
 80194a8:	f842 3c04 	str.w	r3, [r2, #-4]
 80194ac:	d8d6      	bhi.n	801945c <__gethex+0x384>
 80194ae:	68a2      	ldr	r2, [r4, #8]
 80194b0:	4593      	cmp	fp, r2
 80194b2:	db17      	blt.n	80194e4 <__gethex+0x40c>
 80194b4:	6861      	ldr	r1, [r4, #4]
 80194b6:	4648      	mov	r0, r9
 80194b8:	3101      	adds	r1, #1
 80194ba:	f7fe f825 	bl	8017508 <_Balloc>
 80194be:	4682      	mov	sl, r0
 80194c0:	b918      	cbnz	r0, 80194ca <__gethex+0x3f2>
 80194c2:	4b1b      	ldr	r3, [pc, #108]	; (8019530 <__gethex+0x458>)
 80194c4:	4602      	mov	r2, r0
 80194c6:	2184      	movs	r1, #132	; 0x84
 80194c8:	e6b3      	b.n	8019232 <__gethex+0x15a>
 80194ca:	6922      	ldr	r2, [r4, #16]
 80194cc:	3202      	adds	r2, #2
 80194ce:	f104 010c 	add.w	r1, r4, #12
 80194d2:	0092      	lsls	r2, r2, #2
 80194d4:	300c      	adds	r0, #12
 80194d6:	f7fd f90e 	bl	80166f6 <memcpy>
 80194da:	4621      	mov	r1, r4
 80194dc:	4648      	mov	r0, r9
 80194de:	f7fe f853 	bl	8017588 <_Bfree>
 80194e2:	4654      	mov	r4, sl
 80194e4:	6922      	ldr	r2, [r4, #16]
 80194e6:	1c51      	adds	r1, r2, #1
 80194e8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80194ec:	6121      	str	r1, [r4, #16]
 80194ee:	2101      	movs	r1, #1
 80194f0:	6151      	str	r1, [r2, #20]
 80194f2:	e7bc      	b.n	801946e <__gethex+0x396>
 80194f4:	6921      	ldr	r1, [r4, #16]
 80194f6:	4559      	cmp	r1, fp
 80194f8:	dd0b      	ble.n	8019512 <__gethex+0x43a>
 80194fa:	2101      	movs	r1, #1
 80194fc:	4620      	mov	r0, r4
 80194fe:	f7ff fd83 	bl	8019008 <rshift>
 8019502:	68bb      	ldr	r3, [r7, #8]
 8019504:	3601      	adds	r6, #1
 8019506:	42b3      	cmp	r3, r6
 8019508:	f6ff aedb 	blt.w	80192c2 <__gethex+0x1ea>
 801950c:	f04f 0801 	mov.w	r8, #1
 8019510:	e7c2      	b.n	8019498 <__gethex+0x3c0>
 8019512:	f015 051f 	ands.w	r5, r5, #31
 8019516:	d0f9      	beq.n	801950c <__gethex+0x434>
 8019518:	9b01      	ldr	r3, [sp, #4]
 801951a:	441a      	add	r2, r3
 801951c:	f1c5 0520 	rsb	r5, r5, #32
 8019520:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8019524:	f7fe f8e2 	bl	80176ec <__hi0bits>
 8019528:	42a8      	cmp	r0, r5
 801952a:	dbe6      	blt.n	80194fa <__gethex+0x422>
 801952c:	e7ee      	b.n	801950c <__gethex+0x434>
 801952e:	bf00      	nop
 8019530:	08019ed1 	.word	0x08019ed1

08019534 <L_shift>:
 8019534:	f1c2 0208 	rsb	r2, r2, #8
 8019538:	0092      	lsls	r2, r2, #2
 801953a:	b570      	push	{r4, r5, r6, lr}
 801953c:	f1c2 0620 	rsb	r6, r2, #32
 8019540:	6843      	ldr	r3, [r0, #4]
 8019542:	6804      	ldr	r4, [r0, #0]
 8019544:	fa03 f506 	lsl.w	r5, r3, r6
 8019548:	432c      	orrs	r4, r5
 801954a:	40d3      	lsrs	r3, r2
 801954c:	6004      	str	r4, [r0, #0]
 801954e:	f840 3f04 	str.w	r3, [r0, #4]!
 8019552:	4288      	cmp	r0, r1
 8019554:	d3f4      	bcc.n	8019540 <L_shift+0xc>
 8019556:	bd70      	pop	{r4, r5, r6, pc}

08019558 <__match>:
 8019558:	b530      	push	{r4, r5, lr}
 801955a:	6803      	ldr	r3, [r0, #0]
 801955c:	3301      	adds	r3, #1
 801955e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019562:	b914      	cbnz	r4, 801956a <__match+0x12>
 8019564:	6003      	str	r3, [r0, #0]
 8019566:	2001      	movs	r0, #1
 8019568:	bd30      	pop	{r4, r5, pc}
 801956a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801956e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8019572:	2d19      	cmp	r5, #25
 8019574:	bf98      	it	ls
 8019576:	3220      	addls	r2, #32
 8019578:	42a2      	cmp	r2, r4
 801957a:	d0f0      	beq.n	801955e <__match+0x6>
 801957c:	2000      	movs	r0, #0
 801957e:	e7f3      	b.n	8019568 <__match+0x10>

08019580 <__hexnan>:
 8019580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019584:	680b      	ldr	r3, [r1, #0]
 8019586:	6801      	ldr	r1, [r0, #0]
 8019588:	115e      	asrs	r6, r3, #5
 801958a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801958e:	f013 031f 	ands.w	r3, r3, #31
 8019592:	b087      	sub	sp, #28
 8019594:	bf18      	it	ne
 8019596:	3604      	addne	r6, #4
 8019598:	2500      	movs	r5, #0
 801959a:	1f37      	subs	r7, r6, #4
 801959c:	4682      	mov	sl, r0
 801959e:	4690      	mov	r8, r2
 80195a0:	9301      	str	r3, [sp, #4]
 80195a2:	f846 5c04 	str.w	r5, [r6, #-4]
 80195a6:	46b9      	mov	r9, r7
 80195a8:	463c      	mov	r4, r7
 80195aa:	9502      	str	r5, [sp, #8]
 80195ac:	46ab      	mov	fp, r5
 80195ae:	784a      	ldrb	r2, [r1, #1]
 80195b0:	1c4b      	adds	r3, r1, #1
 80195b2:	9303      	str	r3, [sp, #12]
 80195b4:	b342      	cbz	r2, 8019608 <__hexnan+0x88>
 80195b6:	4610      	mov	r0, r2
 80195b8:	9105      	str	r1, [sp, #20]
 80195ba:	9204      	str	r2, [sp, #16]
 80195bc:	f7ff fd76 	bl	80190ac <__hexdig_fun>
 80195c0:	2800      	cmp	r0, #0
 80195c2:	d14f      	bne.n	8019664 <__hexnan+0xe4>
 80195c4:	9a04      	ldr	r2, [sp, #16]
 80195c6:	9905      	ldr	r1, [sp, #20]
 80195c8:	2a20      	cmp	r2, #32
 80195ca:	d818      	bhi.n	80195fe <__hexnan+0x7e>
 80195cc:	9b02      	ldr	r3, [sp, #8]
 80195ce:	459b      	cmp	fp, r3
 80195d0:	dd13      	ble.n	80195fa <__hexnan+0x7a>
 80195d2:	454c      	cmp	r4, r9
 80195d4:	d206      	bcs.n	80195e4 <__hexnan+0x64>
 80195d6:	2d07      	cmp	r5, #7
 80195d8:	dc04      	bgt.n	80195e4 <__hexnan+0x64>
 80195da:	462a      	mov	r2, r5
 80195dc:	4649      	mov	r1, r9
 80195de:	4620      	mov	r0, r4
 80195e0:	f7ff ffa8 	bl	8019534 <L_shift>
 80195e4:	4544      	cmp	r4, r8
 80195e6:	d950      	bls.n	801968a <__hexnan+0x10a>
 80195e8:	2300      	movs	r3, #0
 80195ea:	f1a4 0904 	sub.w	r9, r4, #4
 80195ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80195f2:	f8cd b008 	str.w	fp, [sp, #8]
 80195f6:	464c      	mov	r4, r9
 80195f8:	461d      	mov	r5, r3
 80195fa:	9903      	ldr	r1, [sp, #12]
 80195fc:	e7d7      	b.n	80195ae <__hexnan+0x2e>
 80195fe:	2a29      	cmp	r2, #41	; 0x29
 8019600:	d155      	bne.n	80196ae <__hexnan+0x12e>
 8019602:	3102      	adds	r1, #2
 8019604:	f8ca 1000 	str.w	r1, [sl]
 8019608:	f1bb 0f00 	cmp.w	fp, #0
 801960c:	d04f      	beq.n	80196ae <__hexnan+0x12e>
 801960e:	454c      	cmp	r4, r9
 8019610:	d206      	bcs.n	8019620 <__hexnan+0xa0>
 8019612:	2d07      	cmp	r5, #7
 8019614:	dc04      	bgt.n	8019620 <__hexnan+0xa0>
 8019616:	462a      	mov	r2, r5
 8019618:	4649      	mov	r1, r9
 801961a:	4620      	mov	r0, r4
 801961c:	f7ff ff8a 	bl	8019534 <L_shift>
 8019620:	4544      	cmp	r4, r8
 8019622:	d934      	bls.n	801968e <__hexnan+0x10e>
 8019624:	f1a8 0204 	sub.w	r2, r8, #4
 8019628:	4623      	mov	r3, r4
 801962a:	f853 1b04 	ldr.w	r1, [r3], #4
 801962e:	f842 1f04 	str.w	r1, [r2, #4]!
 8019632:	429f      	cmp	r7, r3
 8019634:	d2f9      	bcs.n	801962a <__hexnan+0xaa>
 8019636:	1b3b      	subs	r3, r7, r4
 8019638:	f023 0303 	bic.w	r3, r3, #3
 801963c:	3304      	adds	r3, #4
 801963e:	3e03      	subs	r6, #3
 8019640:	3401      	adds	r4, #1
 8019642:	42a6      	cmp	r6, r4
 8019644:	bf38      	it	cc
 8019646:	2304      	movcc	r3, #4
 8019648:	4443      	add	r3, r8
 801964a:	2200      	movs	r2, #0
 801964c:	f843 2b04 	str.w	r2, [r3], #4
 8019650:	429f      	cmp	r7, r3
 8019652:	d2fb      	bcs.n	801964c <__hexnan+0xcc>
 8019654:	683b      	ldr	r3, [r7, #0]
 8019656:	b91b      	cbnz	r3, 8019660 <__hexnan+0xe0>
 8019658:	4547      	cmp	r7, r8
 801965a:	d126      	bne.n	80196aa <__hexnan+0x12a>
 801965c:	2301      	movs	r3, #1
 801965e:	603b      	str	r3, [r7, #0]
 8019660:	2005      	movs	r0, #5
 8019662:	e025      	b.n	80196b0 <__hexnan+0x130>
 8019664:	3501      	adds	r5, #1
 8019666:	2d08      	cmp	r5, #8
 8019668:	f10b 0b01 	add.w	fp, fp, #1
 801966c:	dd06      	ble.n	801967c <__hexnan+0xfc>
 801966e:	4544      	cmp	r4, r8
 8019670:	d9c3      	bls.n	80195fa <__hexnan+0x7a>
 8019672:	2300      	movs	r3, #0
 8019674:	f844 3c04 	str.w	r3, [r4, #-4]
 8019678:	2501      	movs	r5, #1
 801967a:	3c04      	subs	r4, #4
 801967c:	6822      	ldr	r2, [r4, #0]
 801967e:	f000 000f 	and.w	r0, r0, #15
 8019682:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8019686:	6020      	str	r0, [r4, #0]
 8019688:	e7b7      	b.n	80195fa <__hexnan+0x7a>
 801968a:	2508      	movs	r5, #8
 801968c:	e7b5      	b.n	80195fa <__hexnan+0x7a>
 801968e:	9b01      	ldr	r3, [sp, #4]
 8019690:	2b00      	cmp	r3, #0
 8019692:	d0df      	beq.n	8019654 <__hexnan+0xd4>
 8019694:	f1c3 0320 	rsb	r3, r3, #32
 8019698:	f04f 32ff 	mov.w	r2, #4294967295
 801969c:	40da      	lsrs	r2, r3
 801969e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80196a2:	4013      	ands	r3, r2
 80196a4:	f846 3c04 	str.w	r3, [r6, #-4]
 80196a8:	e7d4      	b.n	8019654 <__hexnan+0xd4>
 80196aa:	3f04      	subs	r7, #4
 80196ac:	e7d2      	b.n	8019654 <__hexnan+0xd4>
 80196ae:	2004      	movs	r0, #4
 80196b0:	b007      	add	sp, #28
 80196b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080196b6 <__ascii_mbtowc>:
 80196b6:	b082      	sub	sp, #8
 80196b8:	b901      	cbnz	r1, 80196bc <__ascii_mbtowc+0x6>
 80196ba:	a901      	add	r1, sp, #4
 80196bc:	b142      	cbz	r2, 80196d0 <__ascii_mbtowc+0x1a>
 80196be:	b14b      	cbz	r3, 80196d4 <__ascii_mbtowc+0x1e>
 80196c0:	7813      	ldrb	r3, [r2, #0]
 80196c2:	600b      	str	r3, [r1, #0]
 80196c4:	7812      	ldrb	r2, [r2, #0]
 80196c6:	1e10      	subs	r0, r2, #0
 80196c8:	bf18      	it	ne
 80196ca:	2001      	movne	r0, #1
 80196cc:	b002      	add	sp, #8
 80196ce:	4770      	bx	lr
 80196d0:	4610      	mov	r0, r2
 80196d2:	e7fb      	b.n	80196cc <__ascii_mbtowc+0x16>
 80196d4:	f06f 0001 	mvn.w	r0, #1
 80196d8:	e7f8      	b.n	80196cc <__ascii_mbtowc+0x16>

080196da <_realloc_r>:
 80196da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196de:	4680      	mov	r8, r0
 80196e0:	4614      	mov	r4, r2
 80196e2:	460e      	mov	r6, r1
 80196e4:	b921      	cbnz	r1, 80196f0 <_realloc_r+0x16>
 80196e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80196ea:	4611      	mov	r1, r2
 80196ec:	f7fd be80 	b.w	80173f0 <_malloc_r>
 80196f0:	b92a      	cbnz	r2, 80196fe <_realloc_r+0x24>
 80196f2:	f7fd fe09 	bl	8017308 <_free_r>
 80196f6:	4625      	mov	r5, r4
 80196f8:	4628      	mov	r0, r5
 80196fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196fe:	f000 f842 	bl	8019786 <_malloc_usable_size_r>
 8019702:	4284      	cmp	r4, r0
 8019704:	4607      	mov	r7, r0
 8019706:	d802      	bhi.n	801970e <_realloc_r+0x34>
 8019708:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801970c:	d812      	bhi.n	8019734 <_realloc_r+0x5a>
 801970e:	4621      	mov	r1, r4
 8019710:	4640      	mov	r0, r8
 8019712:	f7fd fe6d 	bl	80173f0 <_malloc_r>
 8019716:	4605      	mov	r5, r0
 8019718:	2800      	cmp	r0, #0
 801971a:	d0ed      	beq.n	80196f8 <_realloc_r+0x1e>
 801971c:	42bc      	cmp	r4, r7
 801971e:	4622      	mov	r2, r4
 8019720:	4631      	mov	r1, r6
 8019722:	bf28      	it	cs
 8019724:	463a      	movcs	r2, r7
 8019726:	f7fc ffe6 	bl	80166f6 <memcpy>
 801972a:	4631      	mov	r1, r6
 801972c:	4640      	mov	r0, r8
 801972e:	f7fd fdeb 	bl	8017308 <_free_r>
 8019732:	e7e1      	b.n	80196f8 <_realloc_r+0x1e>
 8019734:	4635      	mov	r5, r6
 8019736:	e7df      	b.n	80196f8 <_realloc_r+0x1e>

08019738 <__ascii_wctomb>:
 8019738:	b149      	cbz	r1, 801974e <__ascii_wctomb+0x16>
 801973a:	2aff      	cmp	r2, #255	; 0xff
 801973c:	bf85      	ittet	hi
 801973e:	238a      	movhi	r3, #138	; 0x8a
 8019740:	6003      	strhi	r3, [r0, #0]
 8019742:	700a      	strbls	r2, [r1, #0]
 8019744:	f04f 30ff 	movhi.w	r0, #4294967295
 8019748:	bf98      	it	ls
 801974a:	2001      	movls	r0, #1
 801974c:	4770      	bx	lr
 801974e:	4608      	mov	r0, r1
 8019750:	4770      	bx	lr
	...

08019754 <fiprintf>:
 8019754:	b40e      	push	{r1, r2, r3}
 8019756:	b503      	push	{r0, r1, lr}
 8019758:	4601      	mov	r1, r0
 801975a:	ab03      	add	r3, sp, #12
 801975c:	4805      	ldr	r0, [pc, #20]	; (8019774 <fiprintf+0x20>)
 801975e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019762:	6800      	ldr	r0, [r0, #0]
 8019764:	9301      	str	r3, [sp, #4]
 8019766:	f000 f83f 	bl	80197e8 <_vfiprintf_r>
 801976a:	b002      	add	sp, #8
 801976c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019770:	b003      	add	sp, #12
 8019772:	4770      	bx	lr
 8019774:	24000158 	.word	0x24000158

08019778 <abort>:
 8019778:	b508      	push	{r3, lr}
 801977a:	2006      	movs	r0, #6
 801977c:	f000 fa0c 	bl	8019b98 <raise>
 8019780:	2001      	movs	r0, #1
 8019782:	f7e9 f981 	bl	8002a88 <_exit>

08019786 <_malloc_usable_size_r>:
 8019786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801978a:	1f18      	subs	r0, r3, #4
 801978c:	2b00      	cmp	r3, #0
 801978e:	bfbc      	itt	lt
 8019790:	580b      	ldrlt	r3, [r1, r0]
 8019792:	18c0      	addlt	r0, r0, r3
 8019794:	4770      	bx	lr

08019796 <__sfputc_r>:
 8019796:	6893      	ldr	r3, [r2, #8]
 8019798:	3b01      	subs	r3, #1
 801979a:	2b00      	cmp	r3, #0
 801979c:	b410      	push	{r4}
 801979e:	6093      	str	r3, [r2, #8]
 80197a0:	da08      	bge.n	80197b4 <__sfputc_r+0x1e>
 80197a2:	6994      	ldr	r4, [r2, #24]
 80197a4:	42a3      	cmp	r3, r4
 80197a6:	db01      	blt.n	80197ac <__sfputc_r+0x16>
 80197a8:	290a      	cmp	r1, #10
 80197aa:	d103      	bne.n	80197b4 <__sfputc_r+0x1e>
 80197ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80197b0:	f000 b934 	b.w	8019a1c <__swbuf_r>
 80197b4:	6813      	ldr	r3, [r2, #0]
 80197b6:	1c58      	adds	r0, r3, #1
 80197b8:	6010      	str	r0, [r2, #0]
 80197ba:	7019      	strb	r1, [r3, #0]
 80197bc:	4608      	mov	r0, r1
 80197be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80197c2:	4770      	bx	lr

080197c4 <__sfputs_r>:
 80197c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197c6:	4606      	mov	r6, r0
 80197c8:	460f      	mov	r7, r1
 80197ca:	4614      	mov	r4, r2
 80197cc:	18d5      	adds	r5, r2, r3
 80197ce:	42ac      	cmp	r4, r5
 80197d0:	d101      	bne.n	80197d6 <__sfputs_r+0x12>
 80197d2:	2000      	movs	r0, #0
 80197d4:	e007      	b.n	80197e6 <__sfputs_r+0x22>
 80197d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80197da:	463a      	mov	r2, r7
 80197dc:	4630      	mov	r0, r6
 80197de:	f7ff ffda 	bl	8019796 <__sfputc_r>
 80197e2:	1c43      	adds	r3, r0, #1
 80197e4:	d1f3      	bne.n	80197ce <__sfputs_r+0xa>
 80197e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080197e8 <_vfiprintf_r>:
 80197e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197ec:	460d      	mov	r5, r1
 80197ee:	b09d      	sub	sp, #116	; 0x74
 80197f0:	4614      	mov	r4, r2
 80197f2:	4698      	mov	r8, r3
 80197f4:	4606      	mov	r6, r0
 80197f6:	b118      	cbz	r0, 8019800 <_vfiprintf_r+0x18>
 80197f8:	6a03      	ldr	r3, [r0, #32]
 80197fa:	b90b      	cbnz	r3, 8019800 <_vfiprintf_r+0x18>
 80197fc:	f7fc fe62 	bl	80164c4 <__sinit>
 8019800:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019802:	07d9      	lsls	r1, r3, #31
 8019804:	d405      	bmi.n	8019812 <_vfiprintf_r+0x2a>
 8019806:	89ab      	ldrh	r3, [r5, #12]
 8019808:	059a      	lsls	r2, r3, #22
 801980a:	d402      	bmi.n	8019812 <_vfiprintf_r+0x2a>
 801980c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801980e:	f7fc ff70 	bl	80166f2 <__retarget_lock_acquire_recursive>
 8019812:	89ab      	ldrh	r3, [r5, #12]
 8019814:	071b      	lsls	r3, r3, #28
 8019816:	d501      	bpl.n	801981c <_vfiprintf_r+0x34>
 8019818:	692b      	ldr	r3, [r5, #16]
 801981a:	b99b      	cbnz	r3, 8019844 <_vfiprintf_r+0x5c>
 801981c:	4629      	mov	r1, r5
 801981e:	4630      	mov	r0, r6
 8019820:	f000 f93a 	bl	8019a98 <__swsetup_r>
 8019824:	b170      	cbz	r0, 8019844 <_vfiprintf_r+0x5c>
 8019826:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019828:	07dc      	lsls	r4, r3, #31
 801982a:	d504      	bpl.n	8019836 <_vfiprintf_r+0x4e>
 801982c:	f04f 30ff 	mov.w	r0, #4294967295
 8019830:	b01d      	add	sp, #116	; 0x74
 8019832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019836:	89ab      	ldrh	r3, [r5, #12]
 8019838:	0598      	lsls	r0, r3, #22
 801983a:	d4f7      	bmi.n	801982c <_vfiprintf_r+0x44>
 801983c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801983e:	f7fc ff59 	bl	80166f4 <__retarget_lock_release_recursive>
 8019842:	e7f3      	b.n	801982c <_vfiprintf_r+0x44>
 8019844:	2300      	movs	r3, #0
 8019846:	9309      	str	r3, [sp, #36]	; 0x24
 8019848:	2320      	movs	r3, #32
 801984a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801984e:	f8cd 800c 	str.w	r8, [sp, #12]
 8019852:	2330      	movs	r3, #48	; 0x30
 8019854:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8019a08 <_vfiprintf_r+0x220>
 8019858:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801985c:	f04f 0901 	mov.w	r9, #1
 8019860:	4623      	mov	r3, r4
 8019862:	469a      	mov	sl, r3
 8019864:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019868:	b10a      	cbz	r2, 801986e <_vfiprintf_r+0x86>
 801986a:	2a25      	cmp	r2, #37	; 0x25
 801986c:	d1f9      	bne.n	8019862 <_vfiprintf_r+0x7a>
 801986e:	ebba 0b04 	subs.w	fp, sl, r4
 8019872:	d00b      	beq.n	801988c <_vfiprintf_r+0xa4>
 8019874:	465b      	mov	r3, fp
 8019876:	4622      	mov	r2, r4
 8019878:	4629      	mov	r1, r5
 801987a:	4630      	mov	r0, r6
 801987c:	f7ff ffa2 	bl	80197c4 <__sfputs_r>
 8019880:	3001      	adds	r0, #1
 8019882:	f000 80a9 	beq.w	80199d8 <_vfiprintf_r+0x1f0>
 8019886:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019888:	445a      	add	r2, fp
 801988a:	9209      	str	r2, [sp, #36]	; 0x24
 801988c:	f89a 3000 	ldrb.w	r3, [sl]
 8019890:	2b00      	cmp	r3, #0
 8019892:	f000 80a1 	beq.w	80199d8 <_vfiprintf_r+0x1f0>
 8019896:	2300      	movs	r3, #0
 8019898:	f04f 32ff 	mov.w	r2, #4294967295
 801989c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80198a0:	f10a 0a01 	add.w	sl, sl, #1
 80198a4:	9304      	str	r3, [sp, #16]
 80198a6:	9307      	str	r3, [sp, #28]
 80198a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80198ac:	931a      	str	r3, [sp, #104]	; 0x68
 80198ae:	4654      	mov	r4, sl
 80198b0:	2205      	movs	r2, #5
 80198b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80198b6:	4854      	ldr	r0, [pc, #336]	; (8019a08 <_vfiprintf_r+0x220>)
 80198b8:	f7e6 fd2a 	bl	8000310 <memchr>
 80198bc:	9a04      	ldr	r2, [sp, #16]
 80198be:	b9d8      	cbnz	r0, 80198f8 <_vfiprintf_r+0x110>
 80198c0:	06d1      	lsls	r1, r2, #27
 80198c2:	bf44      	itt	mi
 80198c4:	2320      	movmi	r3, #32
 80198c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80198ca:	0713      	lsls	r3, r2, #28
 80198cc:	bf44      	itt	mi
 80198ce:	232b      	movmi	r3, #43	; 0x2b
 80198d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80198d4:	f89a 3000 	ldrb.w	r3, [sl]
 80198d8:	2b2a      	cmp	r3, #42	; 0x2a
 80198da:	d015      	beq.n	8019908 <_vfiprintf_r+0x120>
 80198dc:	9a07      	ldr	r2, [sp, #28]
 80198de:	4654      	mov	r4, sl
 80198e0:	2000      	movs	r0, #0
 80198e2:	f04f 0c0a 	mov.w	ip, #10
 80198e6:	4621      	mov	r1, r4
 80198e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80198ec:	3b30      	subs	r3, #48	; 0x30
 80198ee:	2b09      	cmp	r3, #9
 80198f0:	d94d      	bls.n	801998e <_vfiprintf_r+0x1a6>
 80198f2:	b1b0      	cbz	r0, 8019922 <_vfiprintf_r+0x13a>
 80198f4:	9207      	str	r2, [sp, #28]
 80198f6:	e014      	b.n	8019922 <_vfiprintf_r+0x13a>
 80198f8:	eba0 0308 	sub.w	r3, r0, r8
 80198fc:	fa09 f303 	lsl.w	r3, r9, r3
 8019900:	4313      	orrs	r3, r2
 8019902:	9304      	str	r3, [sp, #16]
 8019904:	46a2      	mov	sl, r4
 8019906:	e7d2      	b.n	80198ae <_vfiprintf_r+0xc6>
 8019908:	9b03      	ldr	r3, [sp, #12]
 801990a:	1d19      	adds	r1, r3, #4
 801990c:	681b      	ldr	r3, [r3, #0]
 801990e:	9103      	str	r1, [sp, #12]
 8019910:	2b00      	cmp	r3, #0
 8019912:	bfbb      	ittet	lt
 8019914:	425b      	neglt	r3, r3
 8019916:	f042 0202 	orrlt.w	r2, r2, #2
 801991a:	9307      	strge	r3, [sp, #28]
 801991c:	9307      	strlt	r3, [sp, #28]
 801991e:	bfb8      	it	lt
 8019920:	9204      	strlt	r2, [sp, #16]
 8019922:	7823      	ldrb	r3, [r4, #0]
 8019924:	2b2e      	cmp	r3, #46	; 0x2e
 8019926:	d10c      	bne.n	8019942 <_vfiprintf_r+0x15a>
 8019928:	7863      	ldrb	r3, [r4, #1]
 801992a:	2b2a      	cmp	r3, #42	; 0x2a
 801992c:	d134      	bne.n	8019998 <_vfiprintf_r+0x1b0>
 801992e:	9b03      	ldr	r3, [sp, #12]
 8019930:	1d1a      	adds	r2, r3, #4
 8019932:	681b      	ldr	r3, [r3, #0]
 8019934:	9203      	str	r2, [sp, #12]
 8019936:	2b00      	cmp	r3, #0
 8019938:	bfb8      	it	lt
 801993a:	f04f 33ff 	movlt.w	r3, #4294967295
 801993e:	3402      	adds	r4, #2
 8019940:	9305      	str	r3, [sp, #20]
 8019942:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8019a18 <_vfiprintf_r+0x230>
 8019946:	7821      	ldrb	r1, [r4, #0]
 8019948:	2203      	movs	r2, #3
 801994a:	4650      	mov	r0, sl
 801994c:	f7e6 fce0 	bl	8000310 <memchr>
 8019950:	b138      	cbz	r0, 8019962 <_vfiprintf_r+0x17a>
 8019952:	9b04      	ldr	r3, [sp, #16]
 8019954:	eba0 000a 	sub.w	r0, r0, sl
 8019958:	2240      	movs	r2, #64	; 0x40
 801995a:	4082      	lsls	r2, r0
 801995c:	4313      	orrs	r3, r2
 801995e:	3401      	adds	r4, #1
 8019960:	9304      	str	r3, [sp, #16]
 8019962:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019966:	4829      	ldr	r0, [pc, #164]	; (8019a0c <_vfiprintf_r+0x224>)
 8019968:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801996c:	2206      	movs	r2, #6
 801996e:	f7e6 fccf 	bl	8000310 <memchr>
 8019972:	2800      	cmp	r0, #0
 8019974:	d03f      	beq.n	80199f6 <_vfiprintf_r+0x20e>
 8019976:	4b26      	ldr	r3, [pc, #152]	; (8019a10 <_vfiprintf_r+0x228>)
 8019978:	bb1b      	cbnz	r3, 80199c2 <_vfiprintf_r+0x1da>
 801997a:	9b03      	ldr	r3, [sp, #12]
 801997c:	3307      	adds	r3, #7
 801997e:	f023 0307 	bic.w	r3, r3, #7
 8019982:	3308      	adds	r3, #8
 8019984:	9303      	str	r3, [sp, #12]
 8019986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019988:	443b      	add	r3, r7
 801998a:	9309      	str	r3, [sp, #36]	; 0x24
 801998c:	e768      	b.n	8019860 <_vfiprintf_r+0x78>
 801998e:	fb0c 3202 	mla	r2, ip, r2, r3
 8019992:	460c      	mov	r4, r1
 8019994:	2001      	movs	r0, #1
 8019996:	e7a6      	b.n	80198e6 <_vfiprintf_r+0xfe>
 8019998:	2300      	movs	r3, #0
 801999a:	3401      	adds	r4, #1
 801999c:	9305      	str	r3, [sp, #20]
 801999e:	4619      	mov	r1, r3
 80199a0:	f04f 0c0a 	mov.w	ip, #10
 80199a4:	4620      	mov	r0, r4
 80199a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80199aa:	3a30      	subs	r2, #48	; 0x30
 80199ac:	2a09      	cmp	r2, #9
 80199ae:	d903      	bls.n	80199b8 <_vfiprintf_r+0x1d0>
 80199b0:	2b00      	cmp	r3, #0
 80199b2:	d0c6      	beq.n	8019942 <_vfiprintf_r+0x15a>
 80199b4:	9105      	str	r1, [sp, #20]
 80199b6:	e7c4      	b.n	8019942 <_vfiprintf_r+0x15a>
 80199b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80199bc:	4604      	mov	r4, r0
 80199be:	2301      	movs	r3, #1
 80199c0:	e7f0      	b.n	80199a4 <_vfiprintf_r+0x1bc>
 80199c2:	ab03      	add	r3, sp, #12
 80199c4:	9300      	str	r3, [sp, #0]
 80199c6:	462a      	mov	r2, r5
 80199c8:	4b12      	ldr	r3, [pc, #72]	; (8019a14 <_vfiprintf_r+0x22c>)
 80199ca:	a904      	add	r1, sp, #16
 80199cc:	4630      	mov	r0, r6
 80199ce:	f7fb ff3f 	bl	8015850 <_printf_float>
 80199d2:	4607      	mov	r7, r0
 80199d4:	1c78      	adds	r0, r7, #1
 80199d6:	d1d6      	bne.n	8019986 <_vfiprintf_r+0x19e>
 80199d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80199da:	07d9      	lsls	r1, r3, #31
 80199dc:	d405      	bmi.n	80199ea <_vfiprintf_r+0x202>
 80199de:	89ab      	ldrh	r3, [r5, #12]
 80199e0:	059a      	lsls	r2, r3, #22
 80199e2:	d402      	bmi.n	80199ea <_vfiprintf_r+0x202>
 80199e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80199e6:	f7fc fe85 	bl	80166f4 <__retarget_lock_release_recursive>
 80199ea:	89ab      	ldrh	r3, [r5, #12]
 80199ec:	065b      	lsls	r3, r3, #25
 80199ee:	f53f af1d 	bmi.w	801982c <_vfiprintf_r+0x44>
 80199f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80199f4:	e71c      	b.n	8019830 <_vfiprintf_r+0x48>
 80199f6:	ab03      	add	r3, sp, #12
 80199f8:	9300      	str	r3, [sp, #0]
 80199fa:	462a      	mov	r2, r5
 80199fc:	4b05      	ldr	r3, [pc, #20]	; (8019a14 <_vfiprintf_r+0x22c>)
 80199fe:	a904      	add	r1, sp, #16
 8019a00:	4630      	mov	r0, r6
 8019a02:	f7fc f9ad 	bl	8015d60 <_printf_i>
 8019a06:	e7e4      	b.n	80199d2 <_vfiprintf_r+0x1ea>
 8019a08:	0801a191 	.word	0x0801a191
 8019a0c:	0801a19b 	.word	0x0801a19b
 8019a10:	08015851 	.word	0x08015851
 8019a14:	080197c5 	.word	0x080197c5
 8019a18:	0801a197 	.word	0x0801a197

08019a1c <__swbuf_r>:
 8019a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a1e:	460e      	mov	r6, r1
 8019a20:	4614      	mov	r4, r2
 8019a22:	4605      	mov	r5, r0
 8019a24:	b118      	cbz	r0, 8019a2e <__swbuf_r+0x12>
 8019a26:	6a03      	ldr	r3, [r0, #32]
 8019a28:	b90b      	cbnz	r3, 8019a2e <__swbuf_r+0x12>
 8019a2a:	f7fc fd4b 	bl	80164c4 <__sinit>
 8019a2e:	69a3      	ldr	r3, [r4, #24]
 8019a30:	60a3      	str	r3, [r4, #8]
 8019a32:	89a3      	ldrh	r3, [r4, #12]
 8019a34:	071a      	lsls	r2, r3, #28
 8019a36:	d525      	bpl.n	8019a84 <__swbuf_r+0x68>
 8019a38:	6923      	ldr	r3, [r4, #16]
 8019a3a:	b31b      	cbz	r3, 8019a84 <__swbuf_r+0x68>
 8019a3c:	6823      	ldr	r3, [r4, #0]
 8019a3e:	6922      	ldr	r2, [r4, #16]
 8019a40:	1a98      	subs	r0, r3, r2
 8019a42:	6963      	ldr	r3, [r4, #20]
 8019a44:	b2f6      	uxtb	r6, r6
 8019a46:	4283      	cmp	r3, r0
 8019a48:	4637      	mov	r7, r6
 8019a4a:	dc04      	bgt.n	8019a56 <__swbuf_r+0x3a>
 8019a4c:	4621      	mov	r1, r4
 8019a4e:	4628      	mov	r0, r5
 8019a50:	f7ff fa38 	bl	8018ec4 <_fflush_r>
 8019a54:	b9e0      	cbnz	r0, 8019a90 <__swbuf_r+0x74>
 8019a56:	68a3      	ldr	r3, [r4, #8]
 8019a58:	3b01      	subs	r3, #1
 8019a5a:	60a3      	str	r3, [r4, #8]
 8019a5c:	6823      	ldr	r3, [r4, #0]
 8019a5e:	1c5a      	adds	r2, r3, #1
 8019a60:	6022      	str	r2, [r4, #0]
 8019a62:	701e      	strb	r6, [r3, #0]
 8019a64:	6962      	ldr	r2, [r4, #20]
 8019a66:	1c43      	adds	r3, r0, #1
 8019a68:	429a      	cmp	r2, r3
 8019a6a:	d004      	beq.n	8019a76 <__swbuf_r+0x5a>
 8019a6c:	89a3      	ldrh	r3, [r4, #12]
 8019a6e:	07db      	lsls	r3, r3, #31
 8019a70:	d506      	bpl.n	8019a80 <__swbuf_r+0x64>
 8019a72:	2e0a      	cmp	r6, #10
 8019a74:	d104      	bne.n	8019a80 <__swbuf_r+0x64>
 8019a76:	4621      	mov	r1, r4
 8019a78:	4628      	mov	r0, r5
 8019a7a:	f7ff fa23 	bl	8018ec4 <_fflush_r>
 8019a7e:	b938      	cbnz	r0, 8019a90 <__swbuf_r+0x74>
 8019a80:	4638      	mov	r0, r7
 8019a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a84:	4621      	mov	r1, r4
 8019a86:	4628      	mov	r0, r5
 8019a88:	f000 f806 	bl	8019a98 <__swsetup_r>
 8019a8c:	2800      	cmp	r0, #0
 8019a8e:	d0d5      	beq.n	8019a3c <__swbuf_r+0x20>
 8019a90:	f04f 37ff 	mov.w	r7, #4294967295
 8019a94:	e7f4      	b.n	8019a80 <__swbuf_r+0x64>
	...

08019a98 <__swsetup_r>:
 8019a98:	b538      	push	{r3, r4, r5, lr}
 8019a9a:	4b2a      	ldr	r3, [pc, #168]	; (8019b44 <__swsetup_r+0xac>)
 8019a9c:	4605      	mov	r5, r0
 8019a9e:	6818      	ldr	r0, [r3, #0]
 8019aa0:	460c      	mov	r4, r1
 8019aa2:	b118      	cbz	r0, 8019aac <__swsetup_r+0x14>
 8019aa4:	6a03      	ldr	r3, [r0, #32]
 8019aa6:	b90b      	cbnz	r3, 8019aac <__swsetup_r+0x14>
 8019aa8:	f7fc fd0c 	bl	80164c4 <__sinit>
 8019aac:	89a3      	ldrh	r3, [r4, #12]
 8019aae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019ab2:	0718      	lsls	r0, r3, #28
 8019ab4:	d422      	bmi.n	8019afc <__swsetup_r+0x64>
 8019ab6:	06d9      	lsls	r1, r3, #27
 8019ab8:	d407      	bmi.n	8019aca <__swsetup_r+0x32>
 8019aba:	2309      	movs	r3, #9
 8019abc:	602b      	str	r3, [r5, #0]
 8019abe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019ac2:	81a3      	strh	r3, [r4, #12]
 8019ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8019ac8:	e034      	b.n	8019b34 <__swsetup_r+0x9c>
 8019aca:	0758      	lsls	r0, r3, #29
 8019acc:	d512      	bpl.n	8019af4 <__swsetup_r+0x5c>
 8019ace:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019ad0:	b141      	cbz	r1, 8019ae4 <__swsetup_r+0x4c>
 8019ad2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019ad6:	4299      	cmp	r1, r3
 8019ad8:	d002      	beq.n	8019ae0 <__swsetup_r+0x48>
 8019ada:	4628      	mov	r0, r5
 8019adc:	f7fd fc14 	bl	8017308 <_free_r>
 8019ae0:	2300      	movs	r3, #0
 8019ae2:	6363      	str	r3, [r4, #52]	; 0x34
 8019ae4:	89a3      	ldrh	r3, [r4, #12]
 8019ae6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019aea:	81a3      	strh	r3, [r4, #12]
 8019aec:	2300      	movs	r3, #0
 8019aee:	6063      	str	r3, [r4, #4]
 8019af0:	6923      	ldr	r3, [r4, #16]
 8019af2:	6023      	str	r3, [r4, #0]
 8019af4:	89a3      	ldrh	r3, [r4, #12]
 8019af6:	f043 0308 	orr.w	r3, r3, #8
 8019afa:	81a3      	strh	r3, [r4, #12]
 8019afc:	6923      	ldr	r3, [r4, #16]
 8019afe:	b94b      	cbnz	r3, 8019b14 <__swsetup_r+0x7c>
 8019b00:	89a3      	ldrh	r3, [r4, #12]
 8019b02:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019b0a:	d003      	beq.n	8019b14 <__swsetup_r+0x7c>
 8019b0c:	4621      	mov	r1, r4
 8019b0e:	4628      	mov	r0, r5
 8019b10:	f000 f884 	bl	8019c1c <__smakebuf_r>
 8019b14:	89a0      	ldrh	r0, [r4, #12]
 8019b16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019b1a:	f010 0301 	ands.w	r3, r0, #1
 8019b1e:	d00a      	beq.n	8019b36 <__swsetup_r+0x9e>
 8019b20:	2300      	movs	r3, #0
 8019b22:	60a3      	str	r3, [r4, #8]
 8019b24:	6963      	ldr	r3, [r4, #20]
 8019b26:	425b      	negs	r3, r3
 8019b28:	61a3      	str	r3, [r4, #24]
 8019b2a:	6923      	ldr	r3, [r4, #16]
 8019b2c:	b943      	cbnz	r3, 8019b40 <__swsetup_r+0xa8>
 8019b2e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019b32:	d1c4      	bne.n	8019abe <__swsetup_r+0x26>
 8019b34:	bd38      	pop	{r3, r4, r5, pc}
 8019b36:	0781      	lsls	r1, r0, #30
 8019b38:	bf58      	it	pl
 8019b3a:	6963      	ldrpl	r3, [r4, #20]
 8019b3c:	60a3      	str	r3, [r4, #8]
 8019b3e:	e7f4      	b.n	8019b2a <__swsetup_r+0x92>
 8019b40:	2000      	movs	r0, #0
 8019b42:	e7f7      	b.n	8019b34 <__swsetup_r+0x9c>
 8019b44:	24000158 	.word	0x24000158

08019b48 <_raise_r>:
 8019b48:	291f      	cmp	r1, #31
 8019b4a:	b538      	push	{r3, r4, r5, lr}
 8019b4c:	4604      	mov	r4, r0
 8019b4e:	460d      	mov	r5, r1
 8019b50:	d904      	bls.n	8019b5c <_raise_r+0x14>
 8019b52:	2316      	movs	r3, #22
 8019b54:	6003      	str	r3, [r0, #0]
 8019b56:	f04f 30ff 	mov.w	r0, #4294967295
 8019b5a:	bd38      	pop	{r3, r4, r5, pc}
 8019b5c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8019b5e:	b112      	cbz	r2, 8019b66 <_raise_r+0x1e>
 8019b60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019b64:	b94b      	cbnz	r3, 8019b7a <_raise_r+0x32>
 8019b66:	4620      	mov	r0, r4
 8019b68:	f000 f830 	bl	8019bcc <_getpid_r>
 8019b6c:	462a      	mov	r2, r5
 8019b6e:	4601      	mov	r1, r0
 8019b70:	4620      	mov	r0, r4
 8019b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019b76:	f000 b817 	b.w	8019ba8 <_kill_r>
 8019b7a:	2b01      	cmp	r3, #1
 8019b7c:	d00a      	beq.n	8019b94 <_raise_r+0x4c>
 8019b7e:	1c59      	adds	r1, r3, #1
 8019b80:	d103      	bne.n	8019b8a <_raise_r+0x42>
 8019b82:	2316      	movs	r3, #22
 8019b84:	6003      	str	r3, [r0, #0]
 8019b86:	2001      	movs	r0, #1
 8019b88:	e7e7      	b.n	8019b5a <_raise_r+0x12>
 8019b8a:	2400      	movs	r4, #0
 8019b8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019b90:	4628      	mov	r0, r5
 8019b92:	4798      	blx	r3
 8019b94:	2000      	movs	r0, #0
 8019b96:	e7e0      	b.n	8019b5a <_raise_r+0x12>

08019b98 <raise>:
 8019b98:	4b02      	ldr	r3, [pc, #8]	; (8019ba4 <raise+0xc>)
 8019b9a:	4601      	mov	r1, r0
 8019b9c:	6818      	ldr	r0, [r3, #0]
 8019b9e:	f7ff bfd3 	b.w	8019b48 <_raise_r>
 8019ba2:	bf00      	nop
 8019ba4:	24000158 	.word	0x24000158

08019ba8 <_kill_r>:
 8019ba8:	b538      	push	{r3, r4, r5, lr}
 8019baa:	4d07      	ldr	r5, [pc, #28]	; (8019bc8 <_kill_r+0x20>)
 8019bac:	2300      	movs	r3, #0
 8019bae:	4604      	mov	r4, r0
 8019bb0:	4608      	mov	r0, r1
 8019bb2:	4611      	mov	r1, r2
 8019bb4:	602b      	str	r3, [r5, #0]
 8019bb6:	f7e8 ff57 	bl	8002a68 <_kill>
 8019bba:	1c43      	adds	r3, r0, #1
 8019bbc:	d102      	bne.n	8019bc4 <_kill_r+0x1c>
 8019bbe:	682b      	ldr	r3, [r5, #0]
 8019bc0:	b103      	cbz	r3, 8019bc4 <_kill_r+0x1c>
 8019bc2:	6023      	str	r3, [r4, #0]
 8019bc4:	bd38      	pop	{r3, r4, r5, pc}
 8019bc6:	bf00      	nop
 8019bc8:	24002a88 	.word	0x24002a88

08019bcc <_getpid_r>:
 8019bcc:	f7e8 bf44 	b.w	8002a58 <_getpid>

08019bd0 <__swhatbuf_r>:
 8019bd0:	b570      	push	{r4, r5, r6, lr}
 8019bd2:	460c      	mov	r4, r1
 8019bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019bd8:	2900      	cmp	r1, #0
 8019bda:	b096      	sub	sp, #88	; 0x58
 8019bdc:	4615      	mov	r5, r2
 8019bde:	461e      	mov	r6, r3
 8019be0:	da0d      	bge.n	8019bfe <__swhatbuf_r+0x2e>
 8019be2:	89a3      	ldrh	r3, [r4, #12]
 8019be4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8019be8:	f04f 0100 	mov.w	r1, #0
 8019bec:	bf0c      	ite	eq
 8019bee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8019bf2:	2340      	movne	r3, #64	; 0x40
 8019bf4:	2000      	movs	r0, #0
 8019bf6:	6031      	str	r1, [r6, #0]
 8019bf8:	602b      	str	r3, [r5, #0]
 8019bfa:	b016      	add	sp, #88	; 0x58
 8019bfc:	bd70      	pop	{r4, r5, r6, pc}
 8019bfe:	466a      	mov	r2, sp
 8019c00:	f000 f848 	bl	8019c94 <_fstat_r>
 8019c04:	2800      	cmp	r0, #0
 8019c06:	dbec      	blt.n	8019be2 <__swhatbuf_r+0x12>
 8019c08:	9901      	ldr	r1, [sp, #4]
 8019c0a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8019c0e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8019c12:	4259      	negs	r1, r3
 8019c14:	4159      	adcs	r1, r3
 8019c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019c1a:	e7eb      	b.n	8019bf4 <__swhatbuf_r+0x24>

08019c1c <__smakebuf_r>:
 8019c1c:	898b      	ldrh	r3, [r1, #12]
 8019c1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019c20:	079d      	lsls	r5, r3, #30
 8019c22:	4606      	mov	r6, r0
 8019c24:	460c      	mov	r4, r1
 8019c26:	d507      	bpl.n	8019c38 <__smakebuf_r+0x1c>
 8019c28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019c2c:	6023      	str	r3, [r4, #0]
 8019c2e:	6123      	str	r3, [r4, #16]
 8019c30:	2301      	movs	r3, #1
 8019c32:	6163      	str	r3, [r4, #20]
 8019c34:	b002      	add	sp, #8
 8019c36:	bd70      	pop	{r4, r5, r6, pc}
 8019c38:	ab01      	add	r3, sp, #4
 8019c3a:	466a      	mov	r2, sp
 8019c3c:	f7ff ffc8 	bl	8019bd0 <__swhatbuf_r>
 8019c40:	9900      	ldr	r1, [sp, #0]
 8019c42:	4605      	mov	r5, r0
 8019c44:	4630      	mov	r0, r6
 8019c46:	f7fd fbd3 	bl	80173f0 <_malloc_r>
 8019c4a:	b948      	cbnz	r0, 8019c60 <__smakebuf_r+0x44>
 8019c4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019c50:	059a      	lsls	r2, r3, #22
 8019c52:	d4ef      	bmi.n	8019c34 <__smakebuf_r+0x18>
 8019c54:	f023 0303 	bic.w	r3, r3, #3
 8019c58:	f043 0302 	orr.w	r3, r3, #2
 8019c5c:	81a3      	strh	r3, [r4, #12]
 8019c5e:	e7e3      	b.n	8019c28 <__smakebuf_r+0xc>
 8019c60:	89a3      	ldrh	r3, [r4, #12]
 8019c62:	6020      	str	r0, [r4, #0]
 8019c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019c68:	81a3      	strh	r3, [r4, #12]
 8019c6a:	9b00      	ldr	r3, [sp, #0]
 8019c6c:	6163      	str	r3, [r4, #20]
 8019c6e:	9b01      	ldr	r3, [sp, #4]
 8019c70:	6120      	str	r0, [r4, #16]
 8019c72:	b15b      	cbz	r3, 8019c8c <__smakebuf_r+0x70>
 8019c74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019c78:	4630      	mov	r0, r6
 8019c7a:	f000 f81d 	bl	8019cb8 <_isatty_r>
 8019c7e:	b128      	cbz	r0, 8019c8c <__smakebuf_r+0x70>
 8019c80:	89a3      	ldrh	r3, [r4, #12]
 8019c82:	f023 0303 	bic.w	r3, r3, #3
 8019c86:	f043 0301 	orr.w	r3, r3, #1
 8019c8a:	81a3      	strh	r3, [r4, #12]
 8019c8c:	89a3      	ldrh	r3, [r4, #12]
 8019c8e:	431d      	orrs	r5, r3
 8019c90:	81a5      	strh	r5, [r4, #12]
 8019c92:	e7cf      	b.n	8019c34 <__smakebuf_r+0x18>

08019c94 <_fstat_r>:
 8019c94:	b538      	push	{r3, r4, r5, lr}
 8019c96:	4d07      	ldr	r5, [pc, #28]	; (8019cb4 <_fstat_r+0x20>)
 8019c98:	2300      	movs	r3, #0
 8019c9a:	4604      	mov	r4, r0
 8019c9c:	4608      	mov	r0, r1
 8019c9e:	4611      	mov	r1, r2
 8019ca0:	602b      	str	r3, [r5, #0]
 8019ca2:	f7e8 ff40 	bl	8002b26 <_fstat>
 8019ca6:	1c43      	adds	r3, r0, #1
 8019ca8:	d102      	bne.n	8019cb0 <_fstat_r+0x1c>
 8019caa:	682b      	ldr	r3, [r5, #0]
 8019cac:	b103      	cbz	r3, 8019cb0 <_fstat_r+0x1c>
 8019cae:	6023      	str	r3, [r4, #0]
 8019cb0:	bd38      	pop	{r3, r4, r5, pc}
 8019cb2:	bf00      	nop
 8019cb4:	24002a88 	.word	0x24002a88

08019cb8 <_isatty_r>:
 8019cb8:	b538      	push	{r3, r4, r5, lr}
 8019cba:	4d06      	ldr	r5, [pc, #24]	; (8019cd4 <_isatty_r+0x1c>)
 8019cbc:	2300      	movs	r3, #0
 8019cbe:	4604      	mov	r4, r0
 8019cc0:	4608      	mov	r0, r1
 8019cc2:	602b      	str	r3, [r5, #0]
 8019cc4:	f7e8 ff3f 	bl	8002b46 <_isatty>
 8019cc8:	1c43      	adds	r3, r0, #1
 8019cca:	d102      	bne.n	8019cd2 <_isatty_r+0x1a>
 8019ccc:	682b      	ldr	r3, [r5, #0]
 8019cce:	b103      	cbz	r3, 8019cd2 <_isatty_r+0x1a>
 8019cd0:	6023      	str	r3, [r4, #0]
 8019cd2:	bd38      	pop	{r3, r4, r5, pc}
 8019cd4:	24002a88 	.word	0x24002a88

08019cd8 <_init>:
 8019cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019cda:	bf00      	nop
 8019cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019cde:	bc08      	pop	{r3}
 8019ce0:	469e      	mov	lr, r3
 8019ce2:	4770      	bx	lr

08019ce4 <_fini>:
 8019ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ce6:	bf00      	nop
 8019ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019cea:	bc08      	pop	{r3}
 8019cec:	469e      	mov	lr, r3
 8019cee:	4770      	bx	lr
